
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bac4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  0801bd68  0801bd68  0001cd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cd60  0801cd60  0001dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801cd68  0801cd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801cd70  0801cd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0801cd78  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c44  2400009c  0801ce14  0001e09c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ce0  0801ce14  0001ece0  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001e09c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c61af  00000000  00000000  0001e0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d214  00000000  00000000  000e4279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00004940  00000000  00000000  000f1490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003846  00000000  00000000  000f5dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048e35  00000000  00000000  000f9616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00051fed  00000000  00000000  0014244b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a2899  00000000  00000000  00194438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00336cd1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0001698c  00000000  00000000  00336d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0034d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400009c 	.word	0x2400009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bd4c 	.word	0x0801bd4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a0 	.word	0x240000a0
 80002dc:	0801bd4c 	.word	0x0801bd4c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f019 ffdc 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	761a      	strb	r2, [r3, #24]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3330      	adds	r3, #48	@ 0x30
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	7e1b      	ldrb	r3, [r3, #24]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c76:	e005      	b.n	8000c84 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f000 f805 	bl	8000c94 <_ZN3Pin9configPinEv>
}
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b08e      	sub	sp, #56	@ 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8000c9c:	4868      	ldr	r0, [pc, #416]	@ (8000e40 <_ZN3Pin9configPinEv+0x1ac>)
 8000c9e:	f01a f9f7 	bl	801b090 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8000ca2:	4b68      	ldr	r3, [pc, #416]	@ (8000e44 <_ZN3Pin9configPinEv+0x1b0>)
 8000ca4:	f107 0420 	add.w	r4, r7, #32
 8000ca8:	461d      	mov	r5, r3
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f019 ff38 	bl	801ab2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b50      	cmp	r3, #80	@ 0x50
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d05e      	beq.n	8000d8c <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f019 ff2a 	bl	801ab2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3b41      	subs	r3, #65	@ 0x41
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f019 ff1f 	bl	801ab2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b30      	subs	r3, #48	@ 0x30
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f019 ff14 	bl	801ab2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000d04:	4603      	mov	r3, r0
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3b30      	subs	r3, #48	@ 0x30
 8000d0a:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 8000d0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d80b      	bhi.n	8000d2a <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	8b9b      	ldrh	r3, [r3, #28]
 8000d16:	461a      	mov	r2, r3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000d22:	4413      	add	r3, r2
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	8b9b      	ldrh	r3, [r3, #28]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2301      	movs	r3, #1
 8000d32:	4093      	lsls	r3, r2
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e9b      	ldrb	r3, [r3, #26]
 8000d3e:	3341      	adds	r3, #65	@ 0x41
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	4840      	ldr	r0, [pc, #256]	@ (8000e48 <_ZN3Pin9configPinEv+0x1b4>)
 8000d46:	f01a f933 	bl	801afb0 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	8b9b      	ldrh	r3, [r3, #28]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483e      	ldr	r0, [pc, #248]	@ (8000e4c <_ZN3Pin9configPinEv+0x1b8>)
 8000d52:	f01a f92d 	bl	801afb0 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7e9b      	ldrb	r3, [r3, #26]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	3338      	adds	r3, #56	@ 0x38
 8000d5e:	443b      	add	r3, r7
 8000d60:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e9b      	ldrb	r3, [r3, #26]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d861      	bhi.n	8000e34 <_ZN3Pin9configPinEv+0x1a0>
 8000d70:	a201      	add	r2, pc, #4	@ (adr r2, 8000d78 <_ZN3Pin9configPinEv+0xe4>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d95 	.word	0x08000d95
 8000d7c:	08000db5 	.word	0x08000db5
 8000d80:	08000dd5 	.word	0x08000dd5
 8000d84:	08000df5 	.word	0x08000df5
 8000d88:	08000e15 	.word	0x08000e15
        printf("  Invalid port and pin definition\n");
 8000d8c:	4830      	ldr	r0, [pc, #192]	@ (8000e50 <_ZN3Pin9configPinEv+0x1bc>)
 8000d8e:	f01a f97f 	bl	801b090 <puts>
 8000d92:	e052      	b.n	8000e3a <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b2f      	ldr	r3, [pc, #188]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
            break;
 8000db2:	e03f      	b.n	8000e34 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc4:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
            break;
 8000dd2:	e02f      	b.n	8000e34 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
            break;
 8000df2:	e01f      	b.n	8000e34 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
            break;
 8000e12:	e00f      	b.n	8000e34 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <_ZN3Pin9configPinEv+0x1c0>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
            break;
 8000e32:	bf00      	nop
    }

    this->initPin();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f80f 	bl	8000e58 <_ZN3Pin7initPinEv>
}
 8000e3a:	3738      	adds	r7, #56	@ 0x38
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	0801bdbc 	.word	0x0801bdbc
 8000e44:	0801be10 	.word	0x0801be10
 8000e48:	0801bdf0 	.word	0x0801bdf0
 8000e4c:	0801be04 	.word	0x0801be04
 8000e50:	0801bdcc 	.word	0x0801bdcc
 8000e54:	58024400 	.word	0x58024400

08000e58 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	8bdb      	ldrh	r3, [r3, #30]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f00f fed8 	bl	8010c20 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	8bdb      	ldrh	r3, [r3, #30]
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a1a      	ldr	r2, [r3, #32]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3330      	adds	r3, #48	@ 0x30
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f00f fd10 	bl	80108c0 <HAL_GPIO_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <_ZN9InterruptC1Ev+0x1c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	0801ca70 	.word	0x0801ca70

08000ec8 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000ed6:	f01a f86b 	bl	801afb0 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000eda:	4905      	ldr	r1, [pc, #20]	@ (8000ef0 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	0801be24 	.word	0x0801be24
 8000ef0:	240000b8 	.word	0x240000b8

08000ef4 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a02      	ldr	r2, [pc, #8]	@ (8000f0c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000f02:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000f04:	4610      	mov	r0, r2
 8000f06:	4798      	blx	r3
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	240000b8 	.word	0x240000b8

08000f10 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a02      	ldr	r2, [pc, #8]	@ (8000f28 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000f1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000f20:	4610      	mov	r0, r2
 8000f22:	4798      	blx	r3
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	240000b8 	.word	0x240000b8

08000f2c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a02      	ldr	r2, [pc, #8]	@ (8000f44 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000f3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4798      	blx	r3
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	240000b8 	.word	0x240000b8

08000f48 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a02      	ldr	r2, [pc, #8]	@ (8000f60 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000f56:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4798      	blx	r3
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	240000b8 	.word	0x240000b8

08000f64 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a02      	ldr	r2, [pc, #8]	@ (8000f7c <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000f72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000f74:	4610      	mov	r0, r2
 8000f76:	4798      	blx	r3
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	240000b8 	.word	0x240000b8

08000f80 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000f86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a02      	ldr	r2, [pc, #8]	@ (8000f98 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000f8e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000f90:	4610      	mov	r0, r2
 8000f92:	4798      	blx	r3
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	240000b8 	.word	0x240000b8

08000f9c <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8000fa0:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8000fb4:	f7ff fff2 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f958 	bl	8003274 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	e004      	b.n	8000fd2 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f9e9 	bl	80003a0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	bf00      	nop
      }
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8000fe4:	6838      	ldr	r0, [r7, #0]
 8000fe6:	f019 fe2d 	bl	801ac44 <malloc>
 8000fea:	4603      	mov	r3, r0
  }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    free(ptr);
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f019 fe28 	bl	801ac54 <free>
  }
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	68b8      	ldr	r0, [r7, #8]
 800101c:	f019 fed0 	bl	801adc0 <realloc>
 8001020:	4603      	mov	r3, r0
  }
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8001030:	4b02      	ldr	r3, [pc, #8]	@ (800103c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	24000000 	.word	0x24000000

08001040 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3309      	adds	r3, #9
  }
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001068:	d301      	bcc.n	800106e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 800106a:	2300      	movs	r3, #0
 800106c:	e01b      	b.n	80010a6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffe6 	bl	8001040 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8001074:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d201      	bcs.n	8001082 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 800107e:	2300      	movs	r3, #0
 8001080:	e011      	b.n	80010a6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	4798      	blx	r3
 800108e:	60b8      	str	r0, [r7, #8]
    if (node) {
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b29a      	uxth	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2201      	movs	r2, #1
 80010a2:	809a      	strh	r2, [r3, #4]
    }
    return node;
 80010a4:	68bb      	ldr	r3, [r7, #8]
  }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 80010ae:	b5b0      	push	{r4, r5, r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d20e      	bcs.n	80010e0 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3308      	adds	r3, #8
 80010c8:	681c      	ldr	r4, [r3, #0]
 80010ca:	687d      	ldr	r5, [r7, #4]
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f7ff ffb7 	bl	8001040 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	4628      	mov	r0, r5
 80010da:	47a0      	blx	r4
 80010dc:	6178      	str	r0, [r7, #20]
 80010de:	e001      	b.n	80010e4 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
    if (newNode)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	80da      	strh	r2, [r3, #6]
 80010f2:	e006      	b.n	8001102 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
    return newNode;
 8001102:	697b      	ldr	r3, [r7, #20]
  }
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bdb0      	pop	{r4, r5, r7, pc}

0800110c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	4798      	blx	r3
  }
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  static constexpr size_t sizeMask = size_t(-1) >> 1;
#else
  static constexpr size_t sizeMask = size_t(-1);
#endif

  RamString(const char* str, size_t sz, bool isStatic = false)
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	721a      	strb	r2, [r3, #8]
    ARDUINOJSON_ASSERT(size_ == sz);
  }
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:

  bool isNull() const {
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
    return !str_;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
  }
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:

  size_t size() const {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    return size_;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
  }
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  char operator[](size_t i) const {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
  }
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    return str_;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
  }
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    while (strings_) {
 80011d6:	e00a      	b.n	80011ee <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ff8f 	bl	800110c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	601a      	str	r2, [r3, #0]
  }
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e029      	b.n	8001290 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3308      	adds	r3, #8
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	d11f      	bne.n	8001286 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	889b      	ldrh	r3, [r3, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	809a      	strh	r2, [r3, #4]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d019      	beq.n	8001298 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e003      	b.n	800127c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f7ff ff44 	bl	800110c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8001284:	e008      	b.n	8001298 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1d2      	bne.n	800123c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 8001296:	e000      	b.n	800129a <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8001298:	bf00      	nop
    }
  }
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	2301      	movs	r3, #1
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	f7ff ff3c 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 80012be:	b590      	push	{r4, r7, lr}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 80012cc:	68fc      	ldr	r4, [r7, #12]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f7ff f863 	bl	80003a0 <strlen>
 80012da:	4602      	mov	r2, r0
 80012dc:	e000      	b.n	80012e0 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 80012de:	2200      	movs	r2, #0
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff ff21 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}

080012f4 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return str_.data();
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff58 	bl	80011b4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8001304:	4603      	mov	r3, r0
  }
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
    return s.str_;
 8001316:	687b      	ldr	r3, [r7, #4]
  }
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001338:	809a      	strh	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
  }
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
  }
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f805 	bl	80013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80013a0:	4603      	mov	r3, r0
  }
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
  }
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
    return p;
 80013cc:	683b      	ldr	r3, [r7, #0]
  }
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf14      	ite	ne
 8001410:	2301      	movne	r3, #1
 8001412:	2300      	moveq	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    return p;
 8001442:	683b      	ldr	r3, [r7, #0]
  }
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffe1 	bl	8001422 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	711a      	strb	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146c:	80da      	strh	r2, [r3, #6]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    return next_;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	88db      	ldrh	r3, [r3, #6]
  }
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	80da      	strh	r2, [r3, #6]
  }
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f85f 	bl	800157a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e000      	b.n	80014c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 80014c6:	2300      	movs	r3, #0
  }
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f85f 	bl	800159c <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	e000      	b.n	80014ea <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 80014e8:	2300      	movs	r3, #0
  }
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f86c 	bl	80015d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e000      	b.n	800150c <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 800150a:	2300      	movs	r3, #0
  }
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ffe8 	bl	80014f2 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8001522:	4603      	mov	r3, r0
  }
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d002      	beq.n	8001544 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 800153e:	2b05      	cmp	r3, #5
 8001540:	d008      	beq.n	8001554 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8001542:	e013      	b.n	800156c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff feb6 	bl	80012be <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8001552:	e00e      	b.n	8001572 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	88da      	ldrh	r2, [r3, #6]
 8001562:	2300      	movs	r3, #0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 fea5 	bl	80032b4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 800156a:	e002      	b.n	8001572 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fe97 	bl	80012a0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	2b40      	cmp	r3, #64	@ 0x40
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
  }
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	2160      	movs	r1, #96	@ 0x60
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff22 	bl	80013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80015b0:	4603      	mov	r3, r0
  }
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	2108      	movs	r1, #8
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff13 	bl	80013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80015ce:	4603      	mov	r3, r0
  }
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
  }
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	711a      	strb	r2, [r3, #4]
  }
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2206      	movs	r2, #6
 8001624:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	701a      	strb	r2, [r3, #0]
  }
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f805 	bl	8001656 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800164c:	2301      	movs	r3, #1
  }
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2205      	movs	r2, #5
 8001664:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]
  }
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800168e:	805a      	strh	r2, [r3, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffe5 	bl	8001678 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff fe79 	bl	80013c2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 80016d6:	2200      	movs	r2, #0
 80016d8:	801a      	strh	r2, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	805a      	strh	r2, [r3, #2]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffdd 	bl	800169e <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 80016e4:	687b      	ldr	r3, [r7, #4]
  }
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ffbd 	bl	8001678 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	2004      	movs	r0, #4
 800171c:	f7ff fe51 	bl	80013c2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	805a      	strh	r2, [r3, #2]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffdd 	bl	80016ee <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8001734:	687b      	ldr	r3, [r7, #4]
  }
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	621a      	str	r2, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	849a      	strh	r2, [r3, #36]	@ 0x24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800177a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	711a      	strb	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3308      	adds	r3, #8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ffca 	bl	800173e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	330c      	adds	r3, #12
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffd3 	bl	800175a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3308      	adds	r3, #8
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd16 	bl	8001200 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f7ff fc33 	bl	8001058 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 80017f2:	60f8      	str	r0, [r7, #12]
    if (!node)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	711a      	strb	r2, [r3, #4]
    return node;
 8001800:	68fb      	ldr	r3, [r7, #12]
  }
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f7ff fc45 	bl	80010ae <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8001824:	60b8      	str	r0, [r7, #8]
    if (!node)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	711a      	strb	r2, [r3, #4]
    return node;
 8001832:	68bb      	ldr	r3, [r7, #8]
  }
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f7ff fc5d 	bl	800110c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f103 0008 	add.w	r0, r3, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	f7ff fcd7 	bl	8001224 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 020c 	add.w	r2, r3, #12
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f001 fd24 	bl	80032e0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f103 0208 	add.w	r2, r3, #8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff fc8e 	bl	80011cc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 020c 	add.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f001 fd3f 	bl	8003350 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    return data_;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
  }
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    return resources_;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
  }
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
    return resources_;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
  }
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    return data_;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
  }
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	463b      	mov	r3, r7
 800198e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8001992:	463b      	mov	r3, r7
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fd13 	bl	80033c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800199a:	60f8      	str	r0, [r7, #12]
    return !!data;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
  }
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fcb2 	bl	8001324 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	1d38      	adds	r0, r7, #4
 80019d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80019d8:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	461a      	mov	r2, r3
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fcce 	bl	80013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8001a0e:	4601      	mov	r1, r0
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff8a 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fc98 	bl	800136a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8001a3a:	4603      	mov	r3, r0
  }
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f000 f936 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8001a5a:	687b      	ldr	r3, [r7, #4]
  }
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    if (!data_)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff76 	bl	80019b0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8001ac4:	e011      	b.n	8001aea <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f919 	bl	8001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	ca06      	ldmia	r2, {r1, r2}
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff70 	bl	80019ca <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
    return iterator();
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff57 	bl	80019b0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
    return resources_;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
  }
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fc2f 	bl	80013da <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8001b7c:	4603      	mov	r3, r0
  }
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fdf8 	bl	800178a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3338      	adds	r3, #56	@ 0x38
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fc56 	bl	8001450 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe7d 	bl	80018b8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe54 	bl	800187e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3338      	adds	r3, #56	@ 0x38
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd0d 	bl	80015fa <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    return &resources_;
 8001bf0:	687b      	ldr	r3, [r7, #4]
  }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
    return &data_;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3338      	adds	r3, #56	@ 0x38
  }
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
    return &data_;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3338      	adds	r3, #56	@ 0x38
  }
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f93e 	bl	8001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fbdd 	bl	8003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e00d      	b.n	8001c7a <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	ca06      	ldmia	r2, {r1, r2}
 8001c68:	f000 f867 	bl	8001d3a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fbda 	bl	800342a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	bf00      	nop
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fbe5 	bl	8001478 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	e001      	b.n	8001cb8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8001cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	80da      	strh	r2, [r3, #6]
}
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f000 f965 	bl	8001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	88da      	ldrh	r2, [r3, #6]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fbbe 	bl	8001478 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	80da      	strh	r2, [r3, #6]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f941 	bl	8001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8001d24:	4601      	mov	r1, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff ffa8 	bl	8001c82 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8001d3a:	b590      	push	{r4, r7, lr}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	1d38      	adds	r0, r7, #4
 8001d44:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d48:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	885b      	ldrh	r3, [r3, #2]
 8001d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	885b      	ldrh	r3, [r3, #2]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f000 f922 	bl	8001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8001d62:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8001d64:	697c      	ldr	r4, [r7, #20]
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fb6a 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff fb8c 	bl	8001490 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fb61 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8001d88:	e00f      	b.n	8001daa <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fb58 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 fb50 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	805a      	strh	r2, [r3, #2]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}

08001db2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8001db2:	b082      	sub	sp, #8
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	1d38      	adds	r0, r7, #4
 8001dbe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fb47 	bl	800345a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fb35 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff fb57 	bl	8001490 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	885b      	ldrh	r3, [r3, #2]
 8001de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01a      	beq.n	8001e24 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	885b      	ldrh	r3, [r3, #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001df6:	f000 f8d6 	bl	8001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8001dfa:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8001dfc:	697c      	ldr	r4, [r7, #20]
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fb1e 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff fb40 	bl	8001490 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8001e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fb14 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8001e22:	e010      	b.n	8001e46 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fb0b 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8001e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fb02 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	805a      	strh	r2, [r3, #2]
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e50:	b002      	add	sp, #8
 8001e52:	4770      	bx	lr

08001e54 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8001e64:	e01b      	b.n	8001e9e <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8001e66:	8afb      	ldrh	r3, [r7, #22]
 8001e68:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8001e6a:	8afb      	ldrh	r3, [r7, #22]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6838      	ldr	r0, [r7, #0]
 8001e70:	f000 f899 	bl	8001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8001e74:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f7ff fafe 	bl	8001478 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8001e80:	683c      	ldr	r4, [r7, #0]
 8001e82:	8aba      	ldrh	r2, [r7, #20]
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 faf1 	bl	8003472 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f000 f851 	bl	8001f40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8001e9e:	8afb      	ldrh	r3, [r7, #22]
 8001ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d1de      	bne.n	8001e66 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eae:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb6:	805a      	strh	r2, [r3, #2]
}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}

08001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f103 010c 	add.w	r1, r3, #12
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 faf0 	bl	80034be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fb2e 	bl	8003544 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	711a      	strb	r2, [r3, #4]
    return {};
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f001 facd 	bl	800349a <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8001f00:	e01a      	b.n	8001f38 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fb2d 	bl	8003566 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2008      	movs	r0, #8
 8001f12:	f7ff fa91 	bl	8001438 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 8001f16:	4604      	mov	r4, r0
 8001f18:	2c00      	cmp	r4, #0
 8001f1a:	d002      	beq.n	8001f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fa97 	bl	8001450 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fb29 	bl	800357e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4621      	mov	r1, r4
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f001 fa9d 	bl	8003472 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 fa82 	bl	800345a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fa1c 	bl	8002398 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f103 040c 	add.w	r4, r3, #12
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fa5e 	bl	800342a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 fb10 	bl	8003596 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 8001f76:	4605      	mov	r5, r0
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f001 fa61 	bl	8003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	4629      	mov	r1, r5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fb10 	bl	80035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f001 fb1d 	bl	80035d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}

08001fa6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fb28 	bl	8003610 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8001fca:	b590      	push	{r4, r7, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f103 010c 	add.w	r1, r3, #12
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fa6b 	bl	80034be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 faa9 	bl	8003544 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	711a      	strb	r2, [r3, #4]
    return {};
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f001 fb27 	bl	8003658 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 800200a:	e011      	b.n	8002030 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4618      	mov	r0, r3
 8002012:	f001 faa8 	bl	8003566 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8002016:	4603      	mov	r3, r0
 8002018:	461c      	mov	r4, r3
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f001 faad 	bl	800357e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	4621      	mov	r1, r4
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f001 fb26 	bl	800367c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f816 	bl	800207a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800204e:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 040c 	add.w	r4, r3, #12
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	6979      	ldr	r1, [r7, #20]
 800205e:	4618      	mov	r0, r3
 8002060:	f001 faa6 	bl	80035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	e893 0006 	ldmia.w	r3, {r1, r2}
 800206c:	4620      	mov	r0, r4
 800206e:	f001 fab3 	bl	80035d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}

0800207a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	330c      	adds	r3, #12
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f001 fabe 	bl	8003610 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f000 f819 	bl	80020e0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 80020ae:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e00c      	b.n	80020d6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d103      	bne.n	80020ce <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3301      	adds	r3, #1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	e003      	b.n	80020d6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3302      	adds	r3, #2
 80020d2:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 80020d4:	e7ec      	b.n	80020b0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e000      	b.n	80020f6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 80020f4:	2300      	movs	r3, #0
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 80020f8:	4413      	add	r3, r2
  }
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0801be58 	.word	0x0801be58

0800210c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
    if (node_)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7ff fb73 	bl	800183c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    size_ = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    if (!node_)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	211f      	movs	r1, #31
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb2d 	bl	80017dc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
  }
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	2200      	movs	r2, #0
 80021a4:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681c      	ldr	r4, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f103 0108 	add.w	r1, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fa72 	bl	80036a4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	4620      	mov	r0, r4
 80021c8:	f001 fa7d 	bl	80036c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80021cc:	6178      	str	r0, [r7, #20]
    if (!node) {
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	461a      	mov	r2, r3
 80021e2:	f7ff fb12 	bl	800180a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80021e6:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fae5 	bl	80017be <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e005      	b.n	8002208 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002208:	697b      	ldr	r3, [r7, #20]
  }
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}

08002212 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 8002212:	b590      	push	{r4, r7, lr}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d014      	beq.n	8002250 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6852      	ldr	r2, [r2, #4]
 800222e:	88d2      	ldrh	r2, [r2, #6]
 8002230:	4293      	cmp	r3, r2
 8002232:	d10d      	bne.n	8002250 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	3301      	adds	r3, #1
 8002244:	461a      	mov	r2, r3
 8002246:	f7ff fae0 	bl	800180a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800224a:	4602      	mov	r2, r0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	605a      	str	r2, [r3, #4]
    if (node_)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 8002258:	78fc      	ldrb	r4, [r7, #3]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	1c58      	adds	r0, r3, #1
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6088      	str	r0, [r1, #8]
 8002268:	4413      	add	r3, r2
 800226a:	4622      	mov	r2, r4
 800226c:	721a      	strb	r2, [r3, #8]
  }
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}

08002276 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
  }
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4413      	add	r3, r2
 80022ac:	2200      	movs	r2, #0
 80022ae:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f103 0108 	add.w	r1, r3, #8
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	2300      	movs	r3, #0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f001 fa11 	bl	80036e6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	463b      	mov	r3, r7
 80022d4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80022d8:	463b      	mov	r3, r7
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 f87c 	bl	80033d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80022e0:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	6979      	ldr	r1, [r7, #20]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f91c 	bl	800152c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fffb 	bl	80012f4 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 80022fe:	4603      	mov	r3, r0
 8002300:	e000      	b.n	8002304 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8002302:	2300      	movs	r3, #0
  }
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4618      	mov	r0, r3
 800231e:	f001 f84f 	bl	80033c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002322:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f9ef 	bl	800370a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800232c:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f7ff f8ba 	bl	80014ae <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800233a:	4603      	mov	r3, r0
 800233c:	e000      	b.n	8002340 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 800233e:	2300      	movs	r3, #0
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fb9e 	bl	8001a86 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f001 f82c 	bl	80033c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002368:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f9cc 	bl	800370a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8002372:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff f8b9 	bl	80014f2 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002380:	4603      	mov	r3, r0
 8002382:	e000      	b.n	8002386 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8002384:	2300      	movs	r3, #0
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4619      	mov	r1, r3
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff fbce 	bl	8001b2c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	791b      	ldrb	r3, [r3, #4]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f823 	bl	80013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3308      	adds	r3, #8
 80023ba:	4619      	mov	r1, r3
 80023bc:	6838      	ldr	r0, [r7, #0]
 80023be:	f7ff fa4c 	bl	800185a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	2110      	movs	r1, #16
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f813 	bl	80013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f7ff fe2c 	bl	8002038 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff f875 	bl	80014d0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 80023e6:	60f8      	str	r0, [r7, #12]
  if (collection)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff fd2f 	bl	8001e54 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	711a      	strb	r2, [r3, #4]
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	791b      	ldrb	r3, [r3, #4]
 8002412:	2110      	movs	r1, #16
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe ffed 	bl	80013f4 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800241a:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	6838      	ldr	r0, [r7, #0]
 8002428:	f7ff fe27 	bl	800207a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800242c:	4603      	mov	r3, r0
             : nullptr;
 800242e:	e000      	b.n	8002432 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
    return code_;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
  }
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	24000004 	.word	0x24000004

08002498 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    return true;
 80024a0:	2301      	movs	r3, #1
  }
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
    return true;
 80024b6:	2301      	movs	r3, #1
  }
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    return true;
 80024cc:	2301      	movs	r3, #1
  }
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
    return true;
 80024e2:	2301      	movs	r3, #1
  }
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	220a      	movs	r2, #10
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ffe2 	bl	800250c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8002548:	7b3b      	ldrb	r3, [r7, #12]
  }
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
  }
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800257c:	793b      	ldrb	r3, [r7, #4]
 800257e:	737b      	strb	r3, [r7, #13]
 8002580:	2300      	movs	r3, #0
 8002582:	7b3a      	ldrb	r2, [r7, #12]
 8002584:	f362 0307 	bfi	r3, r2, #0, #8
 8002588:	7b7a      	ldrb	r2, [r7, #13]
 800258a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fb03 	bl	8001bae <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80025c0:	d305      	bcc.n	80025ce <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80025c8:	d201      	bcs.n	80025ce <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80025ec:	d305      	bcc.n	80025fa <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80025f4:	d201      	bcs.n	80025fa <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ffb9 	bl	80025b0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	801a      	strh	r2, [r3, #0]
      return false;
 8002650:	2300      	movs	r3, #0
 8002652:	e018      	b.n	8002686 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffc0 	bl	80025dc <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	029a      	lsls	r2, r3, #10
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266e:	4313      	orrs	r3, r2
 8002670:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002674:	461a      	mov	r2, r3
      codepoint_ =
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]
      return true;
 800267a:	2301      	movs	r3, #1
 800267c:	e003      	b.n	8002686 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]
    return true;
 8002684:	2301      	movs	r3, #1
  }
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
  }
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80026b4:	d904      	bls.n	80026c0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b39      	cmp	r3, #57	@ 0x39
 80026ba:	d801      	bhi.n	80026c0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	ed87 0a00 	vstr	s0, [r7]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	e9c7 2300 	strd	r2, r3, [r7]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002716:	e9c1 2300 	strd	r2, r3, [r1]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	e9c7 2300 	strd	r2, r3, [r7]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800273a:	e9c1 2300 	strd	r2, r3, [r1]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	ed87 0b00 	vstr	d0, [r7]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3308      	adds	r3, #8
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffa3 	bl	80026ce <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	ed87 0a00 	vstr	s0, [r7]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3308      	adds	r3, #8
 80027a8:	ed97 0a00 	vldr	s0, [r7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff99 	bl	80026e4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	e9c7 2300 	strd	r2, r3, [r7]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	4608      	mov	r0, r1
 80027da:	f7ff ff93 	bl	8002704 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	e9c7 2300 	strd	r2, r3, [r7]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2203      	movs	r2, #3
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f103 0108 	add.w	r1, r3, #8
 8002800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002804:	4608      	mov	r0, r1
 8002806:	f7ff ff8f 	bl	8002728 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	ed87 0b00 	vstr	d0, [r7]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2204      	movs	r2, #4
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3308      	adds	r3, #8
 800282a:	ed97 0b00 	vldr	d0, [r7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff8c 	bl	800274c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
    return type_;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	781b      	ldrb	r3, [r3, #0]
  }
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	ee07 3a90 	vmov	s15, r3
  }
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028ba:	ec43 2b17 	vmov	d7, r2, r3
  }
 80028be:	eeb0 0b47 	vmov.f64	d0, d7
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b0a6      	sub	sp, #152	@ 0x98
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80028d6:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 80028de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80028e4:	d008      	beq.n	80028f8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 80028e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80028e8:	d10a      	bne.n	8002900 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 80028f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028f2:	3301      	adds	r3, #1
 80028f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f6:	e003      	b.n	8002900 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 80028f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fa:	3301      	adds	r3, #1
 80028fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fe:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8002900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fece 	bl	80026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 800290a:	4603      	mov	r3, r0
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8002916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b2e      	cmp	r3, #46	@ 0x2e
 800291c:	d001      	beq.n	8002922 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8002928:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800292a:	f7ff ff21 	bl	8002770 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 800292e:	e1f5      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 800294e:	e054      	b.n	80029fa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8002950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	3b30      	subs	r3, #48	@ 0x30
 8002956:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 800295a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800295e:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002962:	49ae      	ldr	r1, [pc, #696]	@ (8002c1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8002964:	418b      	sbcs	r3, r1
 8002966:	d251      	bcs.n	8002a0c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8002968:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800296c:	4622      	mov	r2, r4
 800296e:	462b      	mov	r3, r5
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	0099      	lsls	r1, r3, #2
 800297a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800297e:	0090      	lsls	r0, r2, #2
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	eb12 0804 	adds.w	r8, r2, r4
 8002988:	eb43 0905 	adc.w	r9, r3, r5
 800298c:	eb18 0308 	adds.w	r3, r8, r8
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	eb49 0309 	adc.w	r3, r9, r9
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800299c:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 80029a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80029a4:	2200      	movs	r2, #0
 80029a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80029a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80029aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80029ae:	460b      	mov	r3, r1
 80029b0:	43db      	mvns	r3, r3
 80029b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029b4:	4613      	mov	r3, r2
 80029b6:	43db      	mvns	r3, r3
 80029b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029be:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80029c2:	4621      	mov	r1, r4
 80029c4:	4291      	cmp	r1, r2
 80029c6:	4629      	mov	r1, r5
 80029c8:	eb71 0303 	sbcs.w	r3, r1, r3
 80029cc:	d320      	bcc.n	8002a10 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 80029ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80029d2:	2200      	movs	r2, #0
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80029d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029e0:	4621      	mov	r1, r4
 80029e2:	1851      	adds	r1, r2, r1
 80029e4:	6139      	str	r1, [r7, #16]
 80029e6:	4629      	mov	r1, r5
 80029e8:	414b      	adcs	r3, r1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029f0:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 80029f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f6:	3301      	adds	r3, #1
 80029f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 80029fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fe51 	bl	80026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1a2      	bne.n	8002950 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8002a0a:	e002      	b.n	8002a12 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8002a10:	bf00      	nop
  }

  if (*s == '\0') {
 8002a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d136      	bne.n	8002a88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8002a1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a2a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8002a2e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a32:	2a01      	cmp	r2, #1
 8002a34:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8002a38:	d226      	bcs.n	8002a88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8002a3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4250      	negs	r0, r2
 8002a42:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002a44:	eb61 0303 	sbc.w	r3, r1, r3
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a4e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a50:	f7ff feb4 	bl	80027bc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8002a54:	e162      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8002a56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a5a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a5c:	f7ff fec4 	bl	80027e8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8002a60:	e15c      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002a62:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002a66:	f04f 020a 	mov.w	r2, #10
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f7fd ff69 	bl	8000944 <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 8002a7a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8002a88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a90:	d2e7      	bcs.n	8002a62 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002a92:	e009      	b.n	8002aa8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8002a94:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fdfa 	bl	80026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ed      	bne.n	8002a94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002abe:	d14c      	bne.n	8002b5a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8002ac6:	e040      	b.n	8002b4a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8002ac8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002acc:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002ad0:	4953      	ldr	r1, [pc, #332]	@ (8002c20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8002ad2:	418b      	sbcs	r3, r1
 8002ad4:	d236      	bcs.n	8002b44 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002ad6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	0099      	lsls	r1, r3, #2
 8002ae8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002aec:	0090      	lsls	r0, r2, #2
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	eb12 0a04 	adds.w	sl, r2, r4
 8002af6:	eb43 0b05 	adc.w	fp, r3, r5
 8002afa:	eb1a 030a 	adds.w	r3, sl, sl
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	eb4b 030b 	adc.w	r3, fp, fp
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b0a:	4652      	mov	r2, sl
 8002b0c:	465b      	mov	r3, fp
 8002b0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b10:	7809      	ldrb	r1, [r1, #0]
 8002b12:	3930      	subs	r1, #48	@ 0x30
 8002b14:	b2c9      	uxtb	r1, r1
 8002b16:	b2c9      	uxtb	r1, r1
 8002b18:	2000      	movs	r0, #0
 8002b1a:	6239      	str	r1, [r7, #32]
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b22:	4621      	mov	r1, r4
 8002b24:	1851      	adds	r1, r2, r1
 8002b26:	6039      	str	r1, [r7, #0]
 8002b28:	4629      	mov	r1, r5
 8002b2a:	414b      	adcs	r3, r1
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b32:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8002b36:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8002b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b46:	3301      	adds	r3, #1
 8002b48:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fda9 	bl	80026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1b6      	bne.n	8002ac8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b65      	cmp	r3, #101	@ 0x65
 8002b66:	d003      	beq.n	8002b70 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8002b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b45      	cmp	r3, #69	@ 0x45
 8002b6e:	d171      	bne.n	8002c54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8002b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b72:	3301      	adds	r3, #1
 8002b74:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b82:	d106      	bne.n	8002b92 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8002b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b90:	e04f      	b.n	8002c32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8002b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b98:	d14b      	bne.n	8002c32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8002ba0:	e047      	b.n	8002c32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8002ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	3b30      	subs	r3, #48	@ 0x30
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8002bbc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8002bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002bca:	dd2f      	ble.n	8002c2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8002bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8002bd4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8002bdc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002c24 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8002be0:	e001      	b.n	8002be6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8002be2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002c28 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 8002be6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002bec:	f7ff fdd1 	bl	8002792 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8002bf0:	e094      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8002bf2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8002bfa:	f000 fda7 	bl	800374c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8002bfe:	eeb0 7b40 	vmov.f64	d7, d0
 8002c02:	eeb1 7b47 	vneg.f64	d7, d7
 8002c06:	e003      	b.n	8002c10 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8002c08:	f000 fda0 	bl	800374c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8002c0c:	eeb0 7b40 	vmov.f64	d7, d0
 8002c10:	eeb0 0b47 	vmov.f64	d0, d7
 8002c14:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c16:	f7ff fdfd 	bl	8002814 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8002c1a:	e07f      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8002c1c:	19999999 	.word	0x19999999
 8002c20:	00019999 	.word	0x00019999
 8002c24:	80000000 	.word	0x80000000
 8002c28:	00000000 	.word	0x00000000
      }
      s++;
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c2e:	3301      	adds	r3, #1
 8002c30:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8002c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fd35 	bl	80026a6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1af      	bne.n	8002ba2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8002c42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8002c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c4e:	425b      	negs	r3, r3
 8002c50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8002c54:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8002c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8002c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8002c6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c6c:	f7ff fd80 	bl	8002770 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8002c70:	e054      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8002c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c76:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8002c7a:	db0a      	blt.n	8002c92 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8002c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c80:	2b26      	cmp	r3, #38	@ 0x26
 8002c82:	dc06      	bgt.n	8002c92 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8002c84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c88:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8002c8c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c90:	d301      	bcc.n	8002c96 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8002c96:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8002c98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8002c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01e      	beq.n	8002ce2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8002ca4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002ca8:	f7fd fd08 	bl	80006bc <__aeabi_ul2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002cb4:	ec43 2b10 	vmov	d0, r2, r3
 8002cb8:	f000 fd56 	bl	8003768 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8002cbc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8002cc0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8002cc8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002ccc:	eeb1 7b47 	vneg.f64	d7, d7
 8002cd0:	e001      	b.n	8002cd6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8002cd2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8002cda:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cdc:	f7ff fd9a 	bl	8002814 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8002ce0:	e01c      	b.n	8002d1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8002ce2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002ce6:	f7fd fde7 	bl	80008b8 <__aeabi_ul2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002cf0:	ee00 3a10 	vmov	s0, r3
 8002cf4:	f000 fd79 	bl	80037ea <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8002cf8:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8002cfc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8002d04:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002d08:	eef1 7a67 	vneg.f32	s15, s15
 8002d0c:	e001      	b.n	8002d12 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8002d0e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002d12:	eeb0 0a67 	vmov.f32	s0, s15
 8002d16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d18:	f7ff fd3b 	bl	8002792 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8002d1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d1e:	3798      	adds	r7, #152	@ 0x98
 8002d20:	46bd      	mov	sp, r7
 8002d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop

08002d28 <_ZN6Remora11setBaseFreqEm>:
    void loadModules();

public:

	Remora();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	611a      	str	r2, [r3, #16]
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	601a      	str	r2, [r3, #0]
	configError(false)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1d1c      	adds	r4, r3, #4
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f017 fdaa 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	461a      	mov	r2, r3
 8002d84:	4914      	ldr	r1, [pc, #80]	@ (8002dd8 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8002d86:	4620      	mov	r0, r4
 8002d88:	f000 fd70 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4618      	mov	r0, r3
 8002d92:	f017 fd9f 	bl	801a8d4 <_ZNSaIcED1Ev>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8002d9a:	61da      	str	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f103 0420 	add.w	r4, r3, #32
 8002da2:	f7fe f943 	bl	800102c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7fe feeb 	bl	8001b86 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3360      	adds	r3, #96	@ 0x60
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe fea8 	bl	8001b0a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f80c 	bl	8002de0 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f82b 	bl	8002e24 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	0801beb0 	.word	0x0801beb0
 8002ddc:	0801beb4 	.word	0x0801beb4

08002de0 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4618      	mov	r0, r3
 8002dee:	f017 fe98 	bl	801ab22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3320      	adds	r3, #32
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fee5 	bl	8001bc6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f903 	bl	8003008 <_ZN17JsonConfigHandler16readFileContentsEv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e003      	b.n	8002e1a <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9c8 	bl	80031a8 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b0a1      	sub	sp, #132	@ 0x84
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 808e 	bne.w	8002f54 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8002e38:	4848      	ldr	r0, [pc, #288]	@ (8002f5c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8002e3a:	f018 f929 	bl	801b090 <puts>

    JsonArray Threads = doc["Threads"];
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f103 0120 	add.w	r1, r3, #32
 8002e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e48:	4a45      	ldr	r2, [pc, #276]	@ (8002f60 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd38 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd49 	bl	80038f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	f107 021c 	add.w	r2, r7, #28
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fe1e 	bl	8001aac <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8002e70:	e05c      	b.n	8002f2c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8002e72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e76:	f107 0210 	add.w	r2, r7, #16
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe fdbd 	bl	80019fc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8002e82:	68fc      	ldr	r4, [r7, #12]
 8002e84:	463b      	mov	r3, r7
 8002e86:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd3f 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8002e92:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8002e96:	463a      	mov	r2, r7
 8002e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e9c:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002ea6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fd3e 	bl	800392e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8002eb2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd5e 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8002ebc:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002ec4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ec8:	4a27      	ldr	r2, [pc, #156]	@ (8002f68 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fd60 	bl	8003990 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8002ed0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd80 	bl	80039da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8002eda:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8002edc:	4923      	ldr	r1, [pc, #140]	@ (8002f6c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8002ede:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002ee0:	f7fd f9fe 	bl	80002e0 <strcmp>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8002eea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002eec:	4820      	ldr	r0, [pc, #128]	@ (8002f70 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8002eee:	f018 f85f 	bl	801afb0 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff15 	bl	8002d28 <_ZN6Remora11setBaseFreqEm>
 8002efe:	e010      	b.n	8002f22 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8002f00:	491c      	ldr	r1, [pc, #112]	@ (8002f74 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8002f02:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002f04:	f7fd f9ec 	bl	80002e0 <strcmp>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8002f0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002f10:	4819      	ldr	r0, [pc, #100]	@ (8002f78 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 8002f12:	f018 f84d 	bl	801afb0 <iprintf>
            remoraInstance->setServoFreq(freq);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff11 	bl	8002d44 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd8c 	bl	8001a44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8002f2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f30:	f107 021c 	add.w	r2, r7, #28
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fddb 	bl	8001af2 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8002f3c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fd6c 	bl	8001a24 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d18f      	bne.n	8002e72 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8002f52:	e000      	b.n	8002f56 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8002f54:	bf00      	nop
        }
    }
}
 8002f56:	3784      	adds	r7, #132	@ 0x84
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	0801bec0 	.word	0x0801bec0
 8002f60:	0801bee0 	.word	0x0801bee0
 8002f64:	0801bee8 	.word	0x0801bee8
 8002f68:	0801bef0 	.word	0x0801bef0
 8002f6c:	0801befc 	.word	0x0801befc
 8002f70:	0801bf04 	.word	0x0801bf04
 8002f74:	0801bf2c 	.word	0x0801bf2c
 8002f78:	0801bf34 	.word	0x0801bf34

08002f7c <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b08f      	sub	sp, #60	@ 0x3c
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f103 0120 	add.w	r1, r3, #32
 8002f8c:	f107 0308 	add.w	r3, r7, #8
 8002f90:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fc94 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8002fa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa4:	f001 fc9a 	bl	80048dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fac:	f001 fca6 	bl	80048fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fcb9 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8002fbe:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8002fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc8:	f7fe fcdd 	bl	8001986 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	bf00      	nop
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f103 0120 	add.w	r1, r3, #32
 8002fda:	f107 0318 	add.w	r3, r7, #24
 8002fde:	4a09      	ldr	r2, [pc, #36]	@ (8003004 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fc6d 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f107 0218 	add.w	r2, r7, #24
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fcff 	bl	80039f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8002ff4:	e002      	b.n	8002ffc <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fd34 	bl	8001a64 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	373c      	adds	r7, #60	@ 0x3c
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	0801bf5c 	.word	0x0801bf5c

08003008 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8003008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800300c:	b08f      	sub	sp, #60	@ 0x3c
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8003012:	485a      	ldr	r0, [pc, #360]	@ (800317c <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 8003014:	f018 f83c 	bl	801b090 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8003018:	4859      	ldr	r0, [pc, #356]	@ (8003180 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 800301a:	f018 f839 	bl	801b090 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800301e:	2200      	movs	r2, #0
 8003020:	4958      	ldr	r1, [pc, #352]	@ (8003184 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 8003022:	4859      	ldr	r0, [pc, #356]	@ (8003188 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 8003024:	f016 fff0 	bl	801a008 <f_mount>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8003038:	4854      	ldr	r0, [pc, #336]	@ (800318c <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 800303a:	f017 ffb9 	bl	801afb0 <iprintf>
    	Error_Handler();
 800303e:	f004 facf 	bl	80075e0 <Error_Handler>
 8003042:	e094      	b.n	800316e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2201      	movs	r2, #1
 800304a:	4619      	mov	r1, r3
 800304c:	4850      	ldr	r0, [pc, #320]	@ (8003190 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 800304e:	f017 f821 	bl	801a094 <f_open>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8003062:	484c      	ldr	r0, [pc, #304]	@ (8003194 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8003064:	f018 f814 	bl	801b090 <puts>
			Error_Handler();
 8003068:	f004 faba 	bl	80075e0 <Error_Handler>
 800306c:	e07f      	b.n	800316e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 800306e:	466b      	mov	r3, sp
 8003070:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8003078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800307a:	4847      	ldr	r0, [pc, #284]	@ (8003198 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 800307c:	f017 ff98 	bl	801afb0 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8003080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003082:	1e4b      	subs	r3, r1, #1
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003086:	460a      	mov	r2, r1
 8003088:	2300      	movs	r3, #0
 800308a:	4690      	mov	r8, r2
 800308c:	4699      	mov	r9, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800309a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030a2:	460a      	mov	r2, r1
 80030a4:	2300      	movs	r3, #0
 80030a6:	4614      	mov	r4, r2
 80030a8:	461d      	mov	r5, r3
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	00eb      	lsls	r3, r5, #3
 80030b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b8:	00e2      	lsls	r2, r4, #3
 80030ba:	460b      	mov	r3, r1
 80030bc:	3318      	adds	r3, #24
 80030be:	3307      	adds	r3, #7
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	ebad 0d03 	sub.w	sp, sp, r3
 80030c8:	466b      	mov	r3, sp
 80030ca:	331f      	adds	r3, #31
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 80030d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030da:	482d      	ldr	r0, [pc, #180]	@ (8003190 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80030dc:	f017 f994 	bl	801a408 <f_read>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 80030f0:	482a      	ldr	r0, [pc, #168]	@ (800319c <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 80030f2:	f017 ffcd 	bl	801b090 <puts>
 80030f6:	e036      	b.n	8003166 <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 80030f8:	4829      	ldr	r0, [pc, #164]	@ (80031a0 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 80030fa:	f017 ffc9 	bl	801b090 <puts>
				jsonContent.reserve(length + 1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1d1a      	adds	r2, r3, #4
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	3301      	adds	r3, #1
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f017 fcef 	bl	801aaec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800310e:	2300      	movs	r3, #0
 8003110:	637b      	str	r3, [r7, #52]	@ 0x34
 8003112:	e01a      	b.n	800314a <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1d19      	adds	r1, r3, #4
 8003118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311c:	4413      	add	r3, r2
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fc88 	bl	8003a3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	f107 0210 	add.w	r2, r7, #16
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f017 fc6a 	bl	801aa0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f017 fc5f 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8003144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003146:	3301      	adds	r3, #1
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
 800314a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	429a      	cmp	r2, r3
 8003150:	dbe0      	blt.n	8003114 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	4618      	mov	r0, r3
 8003158:	f017 fd34 	bl	801abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800315c:	4603      	mov	r3, r0
 800315e:	4619      	mov	r1, r3
 8003160:	4810      	ldr	r0, [pc, #64]	@ (80031a4 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 8003162:	f017 ff25 	bl	801afb0 <iprintf>
			f_close(&SDFile);
 8003166:	480a      	ldr	r0, [pc, #40]	@ (8003190 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8003168:	f017 fb0b 	bl	801a782 <f_close>
 800316c:	46b5      	mov	sp, r6
    }

	return true;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	373c      	adds	r7, #60	@ 0x3c
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800317a:	bf00      	nop
 800317c:	0801bf64 	.word	0x0801bf64
 8003180:	0801bf88 	.word	0x0801bf88
 8003184:	240004f0 	.word	0x240004f0
 8003188:	240004f4 	.word	0x240004f4
 800318c:	0801bfa8 	.word	0x0801bfa8
 8003190:	24000724 	.word	0x24000724
 8003194:	0801bfc4 	.word	0x0801bfc4
 8003198:	0801bfe8 	.word	0x0801bfe8
 800319c:	0801c00c 	.word	0x0801c00c
 80031a0:	0801c02c 	.word	0x0801c02c
 80031a4:	0801c04c 	.word	0x0801c04c

080031a8 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 80031b0:	482a      	ldr	r0, [pc, #168]	@ (800325c <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 80031b2:	f017 ff6d 	bl	801b090 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3320      	adds	r3, #32
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fd03 	bl	8001bc6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 0420 	add.w	r4, r3, #32
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f017 fcfa 	bl	801abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4619      	mov	r1, r3
 80031d4:	4620      	mov	r0, r4
 80031d6:	f000 fc46 	bl	8003a66 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 80031da:	4603      	mov	r3, r0
 80031dc:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 80031de:	4820      	ldr	r0, [pc, #128]	@ (8003260 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 80031e0:	f017 fee6 	bl	801afb0 <iprintf>

    switch (error.code())
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f936 	bl	800245a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d012      	beq.n	800321a <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	dc18      	bgt.n	800322a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d004      	beq.n	800320a <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8003200:	e013      	b.n	800322a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8003202:	4818      	ldr	r0, [pc, #96]	@ (8003264 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8003204:	f017 ff44 	bl	801b090 <puts>
            break;
 8003208:	e023      	b.n	8003252 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800320a:	4817      	ldr	r0, [pc, #92]	@ (8003268 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 800320c:	f017 ff40 	bl	801b090 <puts>
            configError = true;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8003218:	e01b      	b.n	8003252 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800321a:	4814      	ldr	r0, [pc, #80]	@ (800326c <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 800321c:	f017 ff38 	bl	801b090 <puts>
            configError = true;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8003228:	e013      	b.n	8003252 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 800322a:	4811      	ldr	r0, [pc, #68]	@ (8003270 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 800322c:	f017 fec0 	bl	801afb0 <iprintf>
            printf(error.c_str());
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f91d 	bl	8002474 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 800323a:	4603      	mov	r3, r0
 800323c:	4618      	mov	r0, r3
 800323e:	f017 feb7 	bl	801afb0 <iprintf>
            printf("\n");
 8003242:	200a      	movs	r0, #10
 8003244:	f017 fec6 	bl	801afd4 <putchar>
            configError = true;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8003250:	bf00      	nop
    }

    return true;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}
 800325c:	0801c054 	.word	0x0801c054
 8003260:	0801c078 	.word	0x0801c078
 8003264:	0801c094 	.word	0x0801c094
 8003268:	0801c0b0 	.word	0x0801c0b0
 800326c:	0801c0c0 	.word	0x0801c0c0
 8003270:	0801c0d4 	.word	0x0801c0d4

08003274 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8003280:	e002      	b.n	8003288 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	2200      	movs	r2, #0
 8003290:	72fa      	strb	r2, [r7, #11]
 8003292:	f107 020b 	add.w	r2, r7, #11
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fbf7 	bl	8003a8c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 800329e:	4603      	mov	r3, r0
 80032a0:	f083 0301 	eor.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1eb      	bne.n	8003282 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80032aa:	68fb      	ldr	r3, [r7, #12]
    }
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	460b      	mov	r3, r1
 80032c4:	80fb      	strh	r3, [r7, #6]
 80032c6:	4613      	mov	r3, r2
 80032c8:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	797b      	ldrb	r3, [r7, #5]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	f7fd ff2b 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	e00b      	b.n	8003308 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fc40 	bl	8003b82 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	3301      	adds	r3, #1
 8003306:	81fb      	strh	r3, [r7, #14]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800330c:	89fa      	ldrh	r2, [r7, #14]
 800330e:	429a      	cmp	r2, r3
 8003310:	d3ee      	bcc.n	80032f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800331e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d00e      	beq.n	8003348 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3304      	adds	r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6a12      	ldr	r2, [r2, #32]
 8003336:	4611      	mov	r1, r2
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	4798      	blx	r3
      pools_ = preallocatedPools_;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800336a:	4619      	mov	r1, r3
 800336c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003370:	440b      	add	r3, r1
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fc2e 	bl	8003bda <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d017      	beq.n	80033b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003390:	429a      	cmp	r2, r3
 8003392:	d011      	beq.n	80033b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6a11      	ldr	r1, [r2, #32]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80033a4:	00d2      	lsls	r2, r2, #3
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	4798      	blx	r3
 80033aa:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fe fad0 	bl	800196e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80033ce:	4603      	mov	r3, r0
  }
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    return client.getData();
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe fa8d 	bl	8001900 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 80033e6:	4603      	mov	r3, r0
  }
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fe fa8d 	bl	8001918 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 80033fe:	4603      	mov	r3, r0
  }
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
  }
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
    return ptr_;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
  }
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
    return id_;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	889b      	ldrh	r3, [r3, #4]
  }
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
  }
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	4613      	mov	r3, r2
 800347e:	80fb      	strh	r3, [r7, #6]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	809a      	strh	r2, [r3, #4]
  }
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034ae:	809a      	strh	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 80034be:	b580      	push	{r7, lr}
 80034c0:	b088      	sub	sp, #32
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d005      	beq.n	80034e2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fbda 	bl	8003c94 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 80034e0:	e02c      	b.n	800353c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fbec 	bl	8003cce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f822 	bl	8003544 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	461a      	mov	r2, r3
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003512:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8003516:	e011      	b.n	800353c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	f000 fc14 	bl	8003d48 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8003520:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fc49 	bl	8003dc0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800352e:	e005      	b.n	800353c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fbca 	bl	8003cce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 800353a:	bf00      	nop
  }
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
  }
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
    return ptr_;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
  }
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
    return id_;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	889b      	ldrh	r3, [r3, #4]
  }
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	809a      	strh	r2, [r3, #4]
  }
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fbf9 	bl	8003de4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4622      	mov	r2, r4
 80035f6:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ffbf 	bl	800357e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}

08003610 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8003626:	2300      	movs	r3, #0
 8003628:	e012      	b.n	8003650 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	09db      	lsrs	r3, r3, #7
 800362e:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003636:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	89ba      	ldrh	r2, [r7, #12]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fbd8 	bl	8003dfc <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800364c:	4603      	mov	r3, r0
 800364e:	bf00      	nop
  }
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800366c:	809a      	strh	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	809a      	strh	r2, [r3, #4]
  }
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fbe6 	bl	8003e88 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 80036bc:	bf00      	nop
}
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3308      	adds	r3, #8
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fbe6 	bl	8003ea8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80036dc:	4603      	mov	r3, r0
  }
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	f7fd fd16 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe f91f 	bl	8001956 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8003718:	4603      	mov	r3, r0
  }
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	f000 fbf6 	bl	8003f1e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8003732:	4603      	mov	r3, r0
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fdea 	bl	800130e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8003750:	f04f 0000 	mov.w	r0, #0
 8003754:	4903      	ldr	r1, [pc, #12]	@ (8003764 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8003756:	f000 fc0d 	bl	8003f74 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 800375a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800375e:	eeb0 0b47 	vmov.f64	d0, d7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	7ff00000 	.word	0x7ff00000

08003768 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003772:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	dd04      	ble.n	8003784 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800377a:	f000 fb51 	bl	8003e20 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800377e:	4603      	mov	r3, r0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e003      	b.n	800378c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8003784:	f000 fb70 	bl	8003e68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8003788:	4603      	mov	r3, r0
 800378a:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	dc02      	bgt.n	8003798 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	425b      	negs	r3, r3
 8003796:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8003798:	2300      	movs	r3, #0
 800379a:	75fb      	strb	r3, [r7, #23]
 800379c:	e019      	b.n	80037d2 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80037a8:	7dfa      	ldrb	r2, [r7, #23]
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fb45 	bl	8003e40 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80037b6:	eeb0 6b40 	vmov.f64	d6, d0
 80037ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80037be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037c2:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	105b      	asrs	r3, r3, #1
 80037ca:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	3301      	adds	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e2      	bne.n	800379e <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80037d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80037e0:	eeb0 0b47 	vmov.f64	d0, d7
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80037f4:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dd04      	ble.n	8003806 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 80037fc:	f000 fbca 	bl	8003f94 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8003800:	4603      	mov	r3, r0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	e003      	b.n	800380e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8003806:	f000 fbd5 	bl	8003fb4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 800380a:	4603      	mov	r3, r0
 800380c:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dc02      	bgt.n	800381a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	425b      	negs	r3, r3
 8003818:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e019      	b.n	8003854 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fbce 	bl	8003fd4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8003838:	eeb0 7a40 	vmov.f32	s14, s0
 800383c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	105b      	asrs	r3, r3, #1
 800384c:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	3301      	adds	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e2      	bne.n	8003820 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	ee07 3a90 	vmov	s15, r3
}
 8003860:	eeb0 0a67 	vmov.f32	s0, s15
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8003878:	68fc      	ldr	r4, [r7, #12]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f017 f83f 	bl	801a8fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003880:	4603      	mov	r3, r0
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4619      	mov	r1, r3
 8003886:	4620      	mov	r0, r4
 8003888:	f017 f99e 	bl	801abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8003892:	480a      	ldr	r0, [pc, #40]	@ (80038bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8003894:	f017 f825 	bl	801a8e2 <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8003898:	68b8      	ldr	r0, [r7, #8]
 800389a:	f7fd fb87 	bl	8000fac <_ZNSt11char_traitsIcE6lengthEPKc>
 800389e:	4602      	mov	r2, r0
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4413      	add	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80038a6:	462b      	mov	r3, r5
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f922 	bl	8003af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	0801c0f0 	.word	0x0801c0f0

080038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fb92 	bl	8003ffc <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	cb0c      	ldmia	r3, {r2, r3}
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb9c 	bl	8004022 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
    return as<T>();
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f876 	bl	80039f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8003906:	bf00      	nop
  }
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
    return as<T>();
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fb9b 	bl	800405a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8003924:	bf00      	nop
  }
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800392e:	b580      	push	{r7, lr}
 8003930:	b08c      	sub	sp, #48	@ 0x30
 8003932:	af02      	add	r7, sp, #8
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003944:	e883 0003 	stmia.w	r3, {r0, r1}
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fba7 	bl	80040a2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8003954:	466a      	mov	r2, sp
 8003956:	f107 0320 	add.w	r3, r7, #32
 800395a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800395e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f107 0214 	add.w	r2, r7, #20
 8003968:	ca06      	ldmia	r2, {r1, r2}
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f973 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	3728      	adds	r7, #40	@ 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fba1 	bl	80040c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8003986:	4603      	mov	r3, r0
  }
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	f107 0314 	add.w	r3, r7, #20
 80039a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fbab 	bl	800410c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80039b6:	466a      	mov	r2, sp
 80039b8:	f107 0320 	add.w	r3, r7, #32
 80039bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	ca06      	ldmia	r2, {r1, r2}
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f942 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	3728      	adds	r7, #40	@ 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
    return as<T>();
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fba5 	bl	8004132 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 80039e8:	4603      	mov	r3, r0
  }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80039f2:	b590      	push	{r4, r7, lr}
 80039f4:	b087      	sub	sp, #28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8003a04:	6938      	ldr	r0, [r7, #16]
 8003a06:	f000 ff69 	bl	80048dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	6938      	ldr	r0, [r7, #16]
 8003a0e:	f000 ff75 	bl	80048fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f107 0308 	add.w	r3, r7, #8
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd ff88 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8003a20:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003a2c:	f7fe fc6e 	bl	800230c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8003a30:	bf00      	nop
}
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}

08003a3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f017 f8d9 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	461a      	mov	r2, r3
 8003a54:	2101      	movs	r1, #1
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f017 f8aa 	bl	801abb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8003a5c:	bf00      	nop
    }
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fb80 	bl	8004176 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8003a76:	4602      	mov	r2, r0
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 fb85 	bl	800418c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8003a82:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f016 ff3a 	bl	801a960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b088      	sub	sp, #32
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68b8      	ldr	r0, [r7, #8]
 8003b08:	f000 fb61 	bl	80041ce <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d911      	bls.n	8003b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f016 fefc 	bl	801a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f016 fee4 	bl	801a8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4619      	mov	r1, r3
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f016 fee5 	bl	801a902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8003b38:	e005      	b.n	8003b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8003b3e:	69f8      	ldr	r0, [r7, #28]
 8003b40:	f016 fedd 	bl	801a8fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003b44:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8003b46:	f107 0314 	add.w	r3, r7, #20
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ffb1 	bl	8003ab4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f016 fed1 	bl	801a8fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f016 ff43 	bl	801a9ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f016 feca 	bl	801a906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ffab 	bl	8003ad2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
    if (slots_)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6852      	ldr	r2, [r2, #4]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	4798      	blx	r3
    slots_ = nullptr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	805a      	strh	r2, [r3, #2]
  }
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	00db      	lsls	r3, r3, #3
  }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8003bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	681c      	ldr	r4, [r3, #0]
 8003bec:	683d      	ldr	r5, [r7, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685e      	ldr	r6, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	885b      	ldrh	r3, [r3, #2]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ffe2 	bl	8003bc0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4631      	mov	r1, r6
 8003c02:	4628      	mov	r0, r5
 8003c04:	47a0      	blx	r4
 8003c06:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	885a      	ldrh	r2, [r3, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	801a      	strh	r2, [r3, #0]
  }
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c24 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e008      	b.n	8003c4e <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	463b      	mov	r3, r7
 8003c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c46:	f000 fad6 	bl	80041f6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	bf00      	nop
  }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8003c56:	b082      	sub	sp, #8
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	1d38      	adds	r0, r7, #4
 8003c62:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c66:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	1d3a      	adds	r2, r7, #4
 8003c6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c72:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f107 021c 	add.w	r2, r7, #28
 8003c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	b002      	add	sp, #8
 8003c92:	4770      	bx	lr

08003c94 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca2:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f7ff fcb0 	bl	8003610 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003cb0:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fc75 	bl	80035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8003cce:	b5b0      	push	{r4, r5, r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	8afb      	ldrh	r3, [r7, #22]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	441a      	add	r2, r3
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 faad 	bl	8004250 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fc22 	bl	8003544 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f083 0301 	eor.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f857 	bl	8003dc0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8003d12:	e015      	b.n	8003d40 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f863 	bl	8003de4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8003d1e:	4605      	mov	r5, r0
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	b29c      	uxth	r4, r3
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fc27 	bl	800357e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4423      	add	r3, r4
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	4629      	mov	r1, r5
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fc38 	bl	80035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}

08003d48 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10b      	bne.n	8003d76 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 faa1 	bl	80042a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f083 0301 	eor.w	r3, r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e01b      	b.n	8003db8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	b288      	uxth	r0, r1
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	8488      	strh	r0, [r1, #36]	@ 0x24
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da2:	d102      	bne.n	8003daa <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8003daa:	89fb      	ldrh	r3, [r7, #14]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f000 fabe 	bl	8004332 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8003db6:	68bb      	ldr	r3, [r7, #8]
  }
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dd4:	809a      	strh	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    return ptr_;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
  }
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	887b      	ldrh	r3, [r7, #2]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
  }
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	4904      	ldr	r1, [pc, #16]	@ (8003e3c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 faa7 	bl	800437e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8003e30:	687b      	ldr	r3, [r7, #4]
  }
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0801ca78 	.word	0x0801ca78

08003e40 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 faa1 	bl	800439c <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8003e5a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003e5e:	eeb0 0b47 	vmov.f64	d0, d7
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	4904      	ldr	r1, [pc, #16]	@ (8003e84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa83 	bl	800437e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8003e78:	687b      	ldr	r3, [r7, #4]
  }
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	0801cac0 	.word	0x0801cac0

08003e88 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8003e94:	2300      	movs	r3, #0
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7fd f946 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b089      	sub	sp, #36	@ 0x24
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e01e      	b.n	8003ef8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f103 0108 	add.w	r1, r3, #8
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	88db      	ldrh	r3, [r3, #6]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f107 0308 	add.w	r3, r7, #8
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fbea 	bl	80036a4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	466c      	mov	r4, sp
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003edc:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ee4:	f000 fa6a 	bl	80043bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	e006      	b.n	8003f00 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1dd      	bne.n	8003eba <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8003efe:	2300      	movs	r3, #0
  }
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}

08003f08 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8003f10:	687b      	ldr	r3, [r7, #4]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8003f26:	687b      	ldr	r3, [r7, #4]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa7f 	bl	8004440 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa86 	bl	8004456 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003f4a:	4603      	mov	r3, r0
  }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa6f 	bl	8004440 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa82 	bl	800446e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8003f6a:	4603      	mov	r3, r0
  }
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8003f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f82:	f000 fa80 	bl	8004486 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 8003f86:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	4904      	ldr	r1, [pc, #16]	@ (8003fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa85 	bl	80044ae <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8003fa4:	687b      	ldr	r3, [r7, #4]
  }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	0801cb08 	.word	0x0801cb08

08003fb4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	4904      	ldr	r1, [pc, #16]	@ (8003fd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa75 	bl	80044ae <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8003fc4:	687b      	ldr	r3, [r7, #4]
  }
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	0801cb20 	.word	0x0801cb20

08003fd4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa6f 	bl	80044cc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8003fee:	eef0 7a40 	vmov.f32	s15, s0
  }
 8003ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f000 fa6f 	bl	80044ea <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fa74 	bl	8004500 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8004018:	bf00      	nop
}
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8004022:	b082      	sub	sp, #8
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	f107 0110 	add.w	r1, r7, #16
 8004032:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	f107 0210 	add.w	r2, r7, #16
 8004044:	ca07      	ldmia	r2, {r0, r1, r2}
 8004046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	b002      	add	sp, #8
 8004058:	4770      	bx	lr

0800405a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800405a:	b590      	push	{r4, r7, lr}
 800405c:	b087      	sub	sp, #28
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800406c:	6938      	ldr	r0, [r7, #16]
 800406e:	f7ff ff71 	bl	8003f54 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8004072:	4604      	mov	r4, r0
 8004074:	6938      	ldr	r0, [r7, #16]
 8004076:	f7ff ff5d 	bl	8003f34 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800407a:	4602      	mov	r2, r0
 800407c:	f107 0308 	add.w	r3, r7, #8
 8004080:	4621      	mov	r1, r4
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fc54 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8004088:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004094:	f7fe f95d 	bl	8002352 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8004098:	bf00      	nop
}
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd90      	pop	{r4, r7, pc}

080040a2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f000 fa36 	bl	800451e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa3b 	bl	8004534 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 80040be:	bf00      	nop
}
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80040d8:	6938      	ldr	r0, [r7, #16]
 80040da:	f000 fcce 	bl	8004a7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80040de:	4604      	mov	r4, r0
 80040e0:	6938      	ldr	r0, [r7, #16]
 80040e2:	f000 fb58 	bl	8004796 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80040e6:	4602      	mov	r2, r0
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	4621      	mov	r1, r4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd fbf3 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80040f4:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040fe:	f7fe f8e5 	bl	80022cc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}

0800410c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004116:	6838      	ldr	r0, [r7, #0]
 8004118:	f000 fa1b 	bl	8004552 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800411c:	4602      	mov	r2, r0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fa20 	bl	8004568 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8004128:	bf00      	nop
}
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8004142:	6938      	ldr	r0, [r7, #16]
 8004144:	f000 fc99 	bl	8004a7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8004148:	4604      	mov	r4, r0
 800414a:	6938      	ldr	r0, [r7, #16]
 800414c:	f000 fb23 	bl	8004796 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8004150:	4602      	mov	r2, r0
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4621      	mov	r1, r4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fd fbbe 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800415e:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004168:	f000 fa0d 	bl	8004586 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 800416c:	4603      	mov	r3, r0
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}

08004176 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800417e:	687b      	ldr	r3, [r7, #4]
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f7ff feb6 	bl	8003f08 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800419c:	4603      	mov	r3, r0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa0f 	bl	80045c2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 80041a4:	4604      	mov	r4, r0
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f9a0 	bl	80024f0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 80041b0:	7a38      	ldrb	r0, [r7, #8]
 80041b2:	f7fe f9df 	bl	8002574 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 80041b6:	4603      	mov	r3, r0
 80041b8:	81bb      	strh	r3, [r7, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4621      	mov	r1, r4
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa20 	bl	8004604 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 80041c4:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd90      	pop	{r4, r7, pc}

080041ce <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80041ce:	b5b0      	push	{r4, r5, r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80041d8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fa4a 	bl	8004676 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80041e2:	462a      	mov	r2, r5
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4620      	mov	r0, r4
 80041e8:	f000 fa4f 	bl	800468a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80041ec:	4603      	mov	r3, r0
    }
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bdb0      	pop	{r4, r5, r7, pc}

080041f6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b088      	sub	sp, #32
 80041fa:	af02      	add	r7, sp, #8
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	4638      	mov	r0, r7
 8004200:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8004204:	f107 0010 	add.w	r0, r7, #16
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	463b      	mov	r3, r7
 8004212:	cb0c      	ldmia	r3, {r2, r3}
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	f000 fa47 	bl	80046a8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 800421a:	f107 0310 	add.w	r3, r7, #16
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd f892 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 800422a:	2300      	movs	r3, #0
 800422c:	e00c      	b.n	8004248 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 800422e:	f107 0310 	add.w	r3, r7, #16
 8004232:	6a39      	ldr	r1, [r7, #32]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd fd46 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd f8b3 	bl	80013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8004244:	4603      	mov	r3, r0
 8004246:	bf00      	nop
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    if (!slots_)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fdac 	bl	8003dc0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004268:	e01a      	b.n	80042a0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	885a      	ldrh	r2, [r3, #2]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d303      	bcc.n	800427e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fda2 	bl	8003dc0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800427c:	e010      	b.n	80042a0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	885b      	ldrh	r3, [r3, #2]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	b291      	uxth	r1, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	8051      	strh	r1, [r2, #2]
 800428a:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	89fa      	ldrh	r2, [r7, #14]
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff f988 	bl	80035b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ba:	d101      	bne.n	80042c0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 80042bc:	2300      	movs	r3, #0
 80042be:	e034      	b.n	800432a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d114      	bne.n	80042fc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	897a      	ldrh	r2, [r7, #10]
 80042da:	00d2      	lsls	r2, r2, #3
 80042dc:	4611      	mov	r1, r2
 80042de:	6838      	ldr	r0, [r7, #0]
 80042e0:	4798      	blx	r3
 80042e2:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e01d      	b.n	800432a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	4619      	mov	r1, r3
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f017 f894 	bl	801b422 <memcpy>
 80042fa:	e00f      	b.n	800431c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6a11      	ldr	r1, [r2, #32]
 8004308:	897a      	ldrh	r2, [r7, #10]
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	4798      	blx	r3
 8004310:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8004318:	2300      	movs	r3, #0
 800431a:	e006      	b.n	800432a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	897a      	ldrh	r2, [r7, #10]
 8004326:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8004328:	2301      	movs	r3, #1
  }
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8004332:	b5b0      	push	{r4, r5, r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	460b      	mov	r3, r1
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	687d      	ldr	r5, [r7, #4]
 8004348:	897b      	ldrh	r3, [r7, #10]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fc38 	bl	8003bc0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8004350:	4603      	mov	r3, r0
 8004352:	4619      	mov	r1, r3
 8004354:	4628      	mov	r0, r5
 8004356:	47a0      	blx	r4
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8004366:	897a      	ldrh	r2, [r7, #10]
 8004368:	e000      	b.n	800436c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 800436a:	2200      	movs	r2, #0
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	805a      	strh	r2, [r3, #2]
  }
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bdb0      	pop	{r4, r5, r7, pc}

0800437e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return *p;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80043ae:	eeb0 0b47 	vmov.f64	d0, d7
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80043bc:	b082      	sub	sp, #8
 80043be:	b590      	push	{r4, r7, lr}
 80043c0:	b089      	sub	sp, #36	@ 0x24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	1d3c      	adds	r4, r7, #4
 80043c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fed4 	bl	800117c <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80043d4:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 80043d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc fece 	bl	800117c <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80043e0:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d001      	beq.n	80043ee <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e021      	b.n	8004432 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e019      	b.n	8004428 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	69f9      	ldr	r1, [r7, #28]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc fecb 	bl	8001194 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80043fe:	4603      	mov	r3, r0
 8004400:	461c      	mov	r4, r3
 8004402:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fec3 	bl	8001194 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800440e:	4603      	mov	r3, r0
 8004410:	429c      	cmp	r4, r3
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 800441e:	2300      	movs	r3, #0
 8004420:	e007      	b.n	8004432 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3e1      	bcc.n	80043f4 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8004430:	2301      	movs	r3, #1
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800443c:	b002      	add	sp, #8
 800443e:	4770      	bx	lr

08004440 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8004448:	687b      	ldr	r3, [r7, #4]
  }
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fa79 	bl	8001956 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004464:	4603      	mov	r3, r0
  }
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd fa79 	bl	800196e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 800447c:	4603      	mov	r3, r0
  }
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8004490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004494:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8004498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800449c:	ec43 2b17 	vmov	d7, r2, r3
}
 80044a0:	eeb0 0b47 	vmov.f64	d0, d7
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return *p;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	ee07 3a90 	vmov	s15, r3
}
 80044dc:	eeb0 0a67 	vmov.f32	s0, s15
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80044f2:	687b      	ldr	r3, [r7, #4]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800450a:	2301      	movs	r3, #1
 800450c:	2207      	movs	r2, #7
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fe0b 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8004526:	687b      	ldr	r3, [r7, #4]
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800453e:	2301      	movs	r3, #1
 8004540:	2206      	movs	r2, #6
 8004542:	6839      	ldr	r1, [r7, #0]
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc fdf1 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800455a:	687b      	ldr	r3, [r7, #4]
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8004572:	2301      	movs	r3, #1
 8004574:	2209      	movs	r2, #9
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fc fdd7 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	463b      	mov	r3, r7
 800458e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8004592:	463b      	mov	r3, r7
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe ff1f 	bl	80033d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800459a:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800459c:	463b      	mov	r3, r7
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe ff26 	bl	80033f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80045a4:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f902 	bl	80047b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80045b4:	4603      	mov	r3, r0
 80045b6:	e000      	b.n	80045ba <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80045b8:	2300      	movs	r3, #0
  }
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fc9c 	bl	8003f08 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80045d0:	4603      	mov	r3, r0
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f99e 	bl	800491c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fd9e 	bl	8002136 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b0a1      	sub	sp, #132	@ 0x84
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f999 	bl	8004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8004616:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8004618:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	2104      	movs	r1, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd ff08 	bl	800243a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 800462a:	7e3b      	ldrb	r3, [r7, #24]
 800462c:	e01f      	b.n	800466e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f996 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8004634:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7fd fac5 	bl	8001bc6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 800463c:	f107 031c 	add.w	r3, r7, #28
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f997 	bl	8004978 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 800464a:	f107 001c 	add.w	r0, r7, #28
 800464e:	797b      	ldrb	r3, [r7, #5]
 8004650:	4622      	mov	r2, r4
 8004652:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004654:	f000 f9ac 	bl	80049b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8004658:	4603      	mov	r3, r0
 800465a:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 800465c:	f107 031c 	add.w	r3, r7, #28
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ffc2 	bl	80045ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fd ff97 	bl	800259a <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 800466c:	7d3b      	ldrb	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3784      	adds	r7, #132	@ 0x84
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
    }
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80046a8:	b082      	sub	sp, #8
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08e      	sub	sp, #56	@ 0x38
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
 80046b4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80046b8:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 80046bc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80046c0:	f7fc fd4b 	bl	800115a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fe2a 	bl	8001324 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80046d0:	e05a      	b.n	8004788 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fd fb13 	bl	8001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80046e6:	e041      	b.n	800476c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 80046e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d025      	beq.n	800473c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fc fe4c 	bl	8001392 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc ff12 	bl	800152c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8004708:	f107 0320 	add.w	r3, r7, #32
 800470c:	f107 0214 	add.w	r2, r7, #20
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f985 	bl	8004a22 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8004718:	466a      	mov	r2, sp
 800471a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800471e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004722:	e882 0003 	stmia.w	r2, {r0, r1}
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800472c:	ca07      	ldmia	r2, {r0, r1, r2}
 800472e:	f7ff fe45 	bl	80043bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 800473c:	2300      	movs	r3, #0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800474e:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8004752:	e019      	b.n	8004788 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8004754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004758:	f083 0301 	eor.w	r3, r3, #1
 800475c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd faad 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	4618      	mov	r0, r3
 8004772:	f7fc fde9 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8004776:	4603      	mov	r3, r0
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1b2      	bne.n	80046e8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fdce 	bl	8001324 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	3730      	adds	r7, #48	@ 0x30
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004792:	b002      	add	sp, #8
 8004794:	4770      	bx	lr

08004796 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f954 	bl	8004a4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f95b 	bl	8004a62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80047ac:	4603      	mov	r3, r0
  }
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fd fe1d 	bl	8002404 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80047ca:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	3b04      	subs	r3, #4
 80047d2:	2b1a      	cmp	r3, #26
 80047d4:	d87c      	bhi.n	80048d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	0800488f 	.word	0x0800488f
 80047e0:	0800489d 	.word	0x0800489d
 80047e4:	08004849 	.word	0x08004849
 80047e8:	080048d1 	.word	0x080048d1
 80047ec:	080048d1 	.word	0x080048d1
 80047f0:	080048d1 	.word	0x080048d1
 80047f4:	0800484f 	.word	0x0800484f
 80047f8:	080048d1 	.word	0x080048d1
 80047fc:	0800485d 	.word	0x0800485d
 8004800:	080048d1 	.word	0x080048d1
 8004804:	080048ad 	.word	0x080048ad
 8004808:	080048d1 	.word	0x080048d1
 800480c:	080048d1 	.word	0x080048d1
 8004810:	080048d1 	.word	0x080048d1
 8004814:	080048d1 	.word	0x080048d1
 8004818:	080048d1 	.word	0x080048d1
 800481c:	080048d1 	.word	0x080048d1
 8004820:	080048d1 	.word	0x080048d1
 8004824:	080048d1 	.word	0x080048d1
 8004828:	080048d1 	.word	0x080048d1
 800482c:	080048d1 	.word	0x080048d1
 8004830:	080048d1 	.word	0x080048d1
 8004834:	0800486b 	.word	0x0800486b
 8004838:	080048d1 	.word	0x080048d1
 800483c:	0800487d 	.word	0x0800487d
 8004840:	080048d1 	.word	0x080048d1
 8004844:	080048bf 	.word	0x080048bf
        return content_.asBoolean;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	e041      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f921 	bl	8004a9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8004858:	4603      	mov	r3, r0
 800485a:	e03a      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f92b 	bl	8004abc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8004866:	4603      	mov	r3, r0
 8004868:	e033      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	f000 f933 	bl	8004ade <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8004878:	4603      	mov	r3, r0
 800487a:	e02a      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f000 f93d 	bl	8004b04 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800488a:	4603      	mov	r3, r0
 800488c:	e021      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f949 	bl	8004b2a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8004898:	4603      	mov	r3, r0
 800489a:	e01a      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f941 	bl	8004b2a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80048a8:	4603      	mov	r3, r0
 80048aa:	e012      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	eeb0 0a67 	vmov.f32	s0, s15
 80048b6:	f000 f94c 	bl	8004b52 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80048ba:	4603      	mov	r3, r0
 80048bc:	e009      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	ed93 7b00 	vldr	d7, [r3]
 80048c4:	eeb0 0b47 	vmov.f64	d0, d7
 80048c8:	f000 f95b 	bl	8004b82 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80048cc:	4603      	mov	r3, r0
 80048ce:	e000      	b.n	80048d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80048d0:	2300      	movs	r3, #0
  }
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop

080048dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f964 	bl	8004bb2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f96b 	bl	8004bc8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 80048f2:	4603      	mov	r3, r0
  }
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f954 	bl	8004bb2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f967 	bl	8004be0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8004912:	4603      	mov	r3, r0
  }
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	e000      	b.n	8004932 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8004930:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	0801beb0 	.word	0x0801beb0

08004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fd f960 	bl	8001c16 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8004956:	4603      	mov	r3, r0
  }
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fd f93d 	bl	8001be8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 800496e:	4603      	mov	r3, r0
  }
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fbbf 	bl	800210c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3310      	adds	r3, #16
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f92c 	bl	8004bf8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	619a      	str	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b089      	sub	sp, #36	@ 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	713a      	strb	r2, [r7, #4]
 80049bc:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 80049be:	783b      	ldrb	r3, [r7, #0]
 80049c0:	4622      	mov	r2, r4
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f929 	bl	8004c1c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10f      	bne.n	80049f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fa0d 	bl	8004df8 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80049e4:	68b8      	ldr	r0, [r7, #8]
 80049e6:	f7fc fde8 	bl	80015ba <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 80049fa:	f107 0318 	add.w	r3, r7, #24
 80049fe:	2103      	movs	r1, #3
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fd1a 	bl	800243a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8004a06:	7e3b      	ldrb	r3, [r7, #24]
 8004a08:	e007      	b.n	8004a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8004a0a:	7dfa      	ldrb	r2, [r7, #23]
 8004a0c:	f107 031c 	add.w	r3, r7, #28
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd fd11 	bl	800243a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8004a18:	7f3b      	ldrb	r3, [r7, #28]
  }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}

08004a22 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004a2c:	6838      	ldr	r0, [r7, #0]
 8004a2e:	f000 f9ef 	bl	8004e10 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fc fc6a 	bl	800130e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8004a54:	687b      	ldr	r3, [r7, #4]
  }
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9db 	bl	8004e26 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8004a70:	4603      	mov	r3, r0
  }
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ffe2 	bl	8004a4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f9d9 	bl	8004e42 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8004a90:	4603      	mov	r3, r0
  }
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9d9 	bl	8004e5a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	e000      	b.n	8004ab4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f9d9 	bl	8004e7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	e000      	b.n	8004ad6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aec:	f000 f9dc 	bl	8004ea8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	e000      	b.n	8004afc <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b12:	f000 f9e1 	bl	8004ed8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	e000      	b.n	8004b22 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fd fec7 	bl	80028cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f9e6 	bl	8004f14 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004b5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b60:	f000 fa1e 	bl	8004fa0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 8004b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	ee17 3a90 	vmov	r3, s15
 8004b76:	e000      	b.n	8004b7a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8004b8c:	ed97 0b00 	vldr	d0, [r7]
 8004b90:	f000 fa34 	bl	8004ffc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8004b9a:	ed97 7b00 	vldr	d7, [r7]
 8004b9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004ba2:	ee17 3a90 	vmov	r3, s15
 8004ba6:	e000      	b.n	8004baa <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8004bba:	687b      	ldr	r3, [r7, #4]
  }
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa39 	bl	8005048 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 8004bd6:	4603      	mov	r3, r0
  }
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa49 	bl	8005080 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8004bee:	4603      	mov	r3, r0
  }
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8004c1c:	b5b0      	push	{r4, r5, r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	713a      	strb	r2, [r7, #4]
 8004c28:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa36 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]
    if (err)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	e0d2      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa62 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b7b      	cmp	r3, #123	@ 0x7b
 8004c48:	f300 80ba 	bgt.w	8004dc0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8004c4c:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c4e:	da04      	bge.n	8004c5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8004c50:	2b22      	cmp	r3, #34	@ 0x22
 8004c52:	d07b      	beq.n	8004d4c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8004c54:	2b27      	cmp	r3, #39	@ 0x27
 8004c56:	d079      	beq.n	8004d4c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8004c58:	e0b2      	b.n	8004dc0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8004c5a:	3b5b      	subs	r3, #91	@ 0x5b
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	f200 80af 	bhi.w	8004dc0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8004c62:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004dc1 	.word	0x08004dc1
 8004c70:	08004dc1 	.word	0x08004dc1
 8004c74:	08004dc1 	.word	0x08004dc1
 8004c78:	08004dc1 	.word	0x08004dc1
 8004c7c:	08004dc1 	.word	0x08004dc1
 8004c80:	08004dc1 	.word	0x08004dc1
 8004c84:	08004dc1 	.word	0x08004dc1
 8004c88:	08004dc1 	.word	0x08004dc1
 8004c8c:	08004dc1 	.word	0x08004dc1
 8004c90:	08004dc1 	.word	0x08004dc1
 8004c94:	08004d93 	.word	0x08004d93
 8004c98:	08004dc1 	.word	0x08004dc1
 8004c9c:	08004dc1 	.word	0x08004dc1
 8004ca0:	08004dc1 	.word	0x08004dc1
 8004ca4:	08004dc1 	.word	0x08004dc1
 8004ca8:	08004dc1 	.word	0x08004dc1
 8004cac:	08004dc1 	.word	0x08004dc1
 8004cb0:	08004dc1 	.word	0x08004dc1
 8004cb4:	08004db5 	.word	0x08004db5
 8004cb8:	08004dc1 	.word	0x08004dc1
 8004cbc:	08004dc1 	.word	0x08004dc1
 8004cc0:	08004dc1 	.word	0x08004dc1
 8004cc4:	08004dc1 	.word	0x08004dc1
 8004cc8:	08004dc1 	.word	0x08004dc1
 8004ccc:	08004d71 	.word	0x08004d71
 8004cd0:	08004dc1 	.word	0x08004dc1
 8004cd4:	08004dc1 	.word	0x08004dc1
 8004cd8:	08004dc1 	.word	0x08004dc1
 8004cdc:	08004dc1 	.word	0x08004dc1
 8004ce0:	08004dc1 	.word	0x08004dc1
 8004ce4:	08004dc1 	.word	0x08004dc1
 8004ce8:	08004d1d 	.word	0x08004d1d
        if (filter.allowArray())
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd fbdd 	bl	80024ae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f7fc fcdc 	bl	80016b8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8004d00:	4601      	mov	r1, r0
 8004d02:	783b      	ldrb	r3, [r7, #0]
 8004d04:	462a      	mov	r2, r5
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fa15 	bl	8005136 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	e069      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8004d10:	7839      	ldrb	r1, [r7, #0]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa95 	bl	8005242 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	e063      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd fbd0 	bl	80024c4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8004d2a:	68b8      	ldr	r0, [r7, #8]
 8004d2c:	f7fc fcec 	bl	8001708 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8004d30:	4601      	mov	r1, r0
 8004d32:	783b      	ldrb	r3, [r7, #0]
 8004d34:	4622      	mov	r2, r4
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fac6 	bl	80052c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	e051      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8004d40:	7839      	ldrb	r1, [r7, #0]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fbac 	bl	80054a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e04b      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fbc3 	bl	80024da <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fc1f 	bl	80055a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8004d62:	4603      	mov	r3, r0
 8004d64:	e03e      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fc3b 	bl	80055e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	e039      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd fbb1 	bl	80024da <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8004d7e:	2101      	movs	r1, #1
 8004d80:	68b8      	ldr	r0, [r7, #8]
 8004d82:	f7fc fc47 	bl	8001614 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8004d86:	4919      	ldr	r1, [pc, #100]	@ (8004dec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fc5f 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	e028      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd fba0 	bl	80024da <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8004da0:	2100      	movs	r1, #0
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f7fc fc36 	bl	8001614 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8004da8:	4911      	ldr	r1, [pc, #68]	@ (8004df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fc4e 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8004db0:	4603      	mov	r3, r0
 8004db2:	e017      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8004db4:	490f      	ldr	r1, [pc, #60]	@ (8004df4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fc48 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	e011      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fb89 	bl	80024da <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc61 	bl	8005698 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	e004      	b.n	8004de4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fd04 	bl	80057e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8004de0:	4603      	mov	r3, r0
 8004de2:	bf00      	nop
  }
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bdb0      	pop	{r4, r5, r7, pc}
 8004dec:	0801c124 	.word	0x0801c124
 8004df0:	0801c12c 	.word	0x0801c12c
 8004df4:	0801c134 	.word	0x0801c134

08004df8 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    return current_;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	791b      	ldrb	r3, [r3, #4]
  }
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8004e18:	687b      	ldr	r3, [r7, #4]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fcf6 	bl	8005824 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8004e38:	4603      	mov	r3, r0
  }
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fd04 	bl	8005858 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8004e50:	4603      	mov	r3, r0
  }
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004e62:	f000 f8c2 	bl	8004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8004e66:	4602      	mov	r2, r0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bf94      	ite	ls
 8004e6e:	2301      	movls	r3, #1
 8004e70:	2300      	movhi	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da01      	bge.n	8004e8e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e008      	b.n	8004ea0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8004e8e:	f000 f8ac 	bl	8004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8004e92:	4602      	mov	r2, r0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf2c      	ite	cs
 8004e9a:	2301      	movcs	r3, #1
 8004e9c:	2300      	movcc	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004ea8:	b5b0      	push	{r4, r5, r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004eb2:	f000 f89a 	bl	8004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2200      	movs	r2, #0
 8004eba:	461c      	mov	r4, r3
 8004ebc:	4615      	mov	r5, r2
 8004ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec2:	4294      	cmp	r4, r2
 8004ec4:	eb75 0303 	sbcs.w	r3, r5, r3
 8004ec8:	bf2c      	ite	cs
 8004eca:	2301      	movcs	r3, #1
 8004ecc:	2300      	movcc	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bdb0      	pop	{r4, r5, r7, pc}

08004ed8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8004ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da01      	bge.n	8004eee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e00e      	b.n	8004f0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8004eee:	f000 f87c 	bl	8004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	4615      	mov	r5, r2
 8004efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004efe:	4294      	cmp	r4, r2
 8004f00:	eb75 0303 	sbcs.w	r3, r5, r3
 8004f04:	bfac      	ite	ge
 8004f06:	2301      	movge	r3, #1
 8004f08:	2300      	movlt	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bdb0      	pop	{r4, r5, r7, pc}

08004f14 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d82e      	bhi.n	8004f84 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f4f 	.word	0x08004f4f
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f73 	.word	0x08004f73
        return convertNumber<T>(value_.asFloat);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f42:	eeb0 0a67 	vmov.f32	s0, s15
 8004f46:	f7ff fe04 	bl	8004b52 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	e01b      	b.n	8004f86 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7ff fdd4 	bl	8004b04 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	e012      	b.n	8004f86 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f7ff fdb8 	bl	8004ade <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	e009      	b.n	8004f86 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f78:	eeb0 0b47 	vmov.f64	d0, d7
 8004f7c:	f7ff fe01 	bl	8004b82 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8004f80:	4603      	mov	r3, r0
 8004f82:	e000      	b.n	8004f86 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8004f84:	2300      	movs	r3, #0
  }
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop

08004f90 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
    return 0;
 8004f94:	2300      	movs	r3, #0
  }
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8004faa:	f7ff fff1 	bl	8004f90 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8004fae:	ee07 0a90 	vmov	s15, r0
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	db0d      	blt.n	8004fe0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f000 fc63 	bl	8005890 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8004fca:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8004fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fda:	d801      	bhi.n	8004fe0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
    return T(-1);
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8005006:	f7ff ffc3 	bl	8004f90 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 800500a:	ee07 0a90 	vmov	s15, r0
 800500e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005012:	ed97 6b00 	vldr	d6, [r7]
 8005016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	db0e      	blt.n	800503e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8005020:	f7ff ffe3 	bl	8004fea <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8005024:	ee07 0a90 	vmov	s15, r0
 8005028:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800502c:	ed97 6b00 	vldr	d6, [r7]
 8005030:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005038:	d801      	bhi.n	800503e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b085      	sub	sp, #20
 800504c:	af02      	add	r7, sp, #8
 800504e:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fc2b 	bl	80058b0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 800505a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fc7d 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005066:	4602      	mov	r2, r0
    return VariantData::getMember(
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9200      	str	r2, [sp, #0]
 800506c:	3304      	adds	r3, #4
 800506e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005070:	4620      	mov	r0, r4
 8005072:	f000 fc29 	bl	80058c8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8005076:	4603      	mov	r3, r0
  }
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bd90      	pop	{r4, r7, pc}

08005080 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fc67 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005092:	4603      	mov	r3, r0
  }
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
      switch (current()) {
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f82f 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db1d      	blt.n	80050f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	dc1b      	bgt.n	80050f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	db19      	blt.n	80050f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80050bc:	3b09      	subs	r3, #9
 80050be:	4a11      	ldr	r2, [pc, #68]	@ (8005104 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 80050d6:	e00b      	b.n	80050f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7b1b      	ldrb	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 80050e0:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 80050e2:	e00b      	b.n	80050fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80050e4:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 80050e6:	e009      	b.n	80050fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc06 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 80050ee:	e004      	b.n	80050fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e000      	b.n	80050fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 80050fa:	e7d3      	b.n	80050a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	00800013 	.word	0x00800013

08005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3310      	adds	r3, #16
 8005114:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	795b      	ldrb	r3, [r3, #5]
 800511a:	f083 0301 	eor.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 ff1a 	bl	8005f5e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	791b      	ldrb	r3, [r3, #4]
  }
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 8005136:	b590      	push	{r4, r7, lr}
 8005138:	b089      	sub	sp, #36	@ 0x24
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	713a      	strb	r2, [r7, #4]
 8005142:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8005144:	463b      	mov	r3, r7
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fa03 	bl	8002552 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8005152:	2305      	movs	r3, #5
 8005154:	e071      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fbcf 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff ff9d 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005162:	4603      	mov	r3, r0
 8005164:	77fb      	strb	r3, [r7, #31]
    if (err)
 8005166:	7ffb      	ldrb	r3, [r7, #31]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 800516c:	7ffb      	ldrb	r3, [r7, #31]
 800516e:	e064      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8005170:	215d      	movs	r1, #93	@ 0x5d
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fbce 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 800517e:	2300      	movs	r3, #0
 8005180:	e05b      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	f107 0214 	add.w	r2, r7, #20
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fbdd 	bl	800594e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8005194:	f107 0310 	add.w	r3, r7, #16
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd f97d 	bl	8002498 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01c      	beq.n	80051de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	4619      	mov	r1, r3
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f7fc fd3f 	bl	8001c2e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 80051b0:	61b8      	str	r0, [r7, #24]
        if (!value)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 80051b8:	2304      	movs	r3, #4
 80051ba:	e03e      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 80051bc:	463b      	mov	r3, r7
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd f9b4 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4622      	mov	r2, r4
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fd26 	bl	8004c1c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80051d0:	4603      	mov	r3, r0
 80051d2:	77fb      	strb	r3, [r7, #31]
        if (err)
 80051d4:	7ffb      	ldrb	r3, [r7, #31]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d011      	beq.n	80051fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	e02d      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 80051de:	463b      	mov	r3, r7
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd f9a3 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4619      	mov	r1, r3
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fbbc 	bl	8005968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80051f0:	4603      	mov	r3, r0
 80051f2:	77fb      	strb	r3, [r7, #31]
        if (err)
 80051f4:	7ffb      	ldrb	r3, [r7, #31]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	e01d      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff ff4c 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005204:	4603      	mov	r3, r0
 8005206:	77fb      	strb	r3, [r7, #31]
      if (err)
 8005208:	7ffb      	ldrb	r3, [r7, #31]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800520e:	7ffb      	ldrb	r3, [r7, #31]
 8005210:	e013      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 8005212:	215d      	movs	r1, #93	@ 0x5d
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fb7d 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8005220:	2300      	movs	r3, #0
 8005222:	e00a      	b.n	800523a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 8005224:	212c      	movs	r1, #44	@ 0x2c
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb74 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800522c:	4603      	mov	r3, r0
 800522e:	f083 0301 	eor.w	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ad      	beq.n	8005194 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8005238:	2303      	movs	r3, #3
  }
 800523a:	4618      	mov	r0, r3
 800523c:	3724      	adds	r7, #36	@ 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}

08005242 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800524c:	463b      	mov	r3, r7
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd f97f 	bl	8002552 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800525a:	2305      	movs	r3, #5
 800525c:	e030      	b.n	80052c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb4b 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8005264:	463b      	mov	r3, r7
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd f960 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb79 	bl	8005968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
      if (err)
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	e01d      	b.n	80052c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff ff09 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	e013      	b.n	80052c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 8005298:	215d      	movs	r1, #93	@ 0x5d
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fb3a 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e00a      	b.n	80052c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 80052aa:	212c      	movs	r1, #44	@ 0x2c
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fb31 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f083 0301 	eor.w	r3, r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0d2      	beq.n	8005264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 80052be:	2303      	movs	r3, #3
  }
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b091      	sub	sp, #68	@ 0x44
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	713a      	strb	r2, [r7, #4]
 80052d4:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80052d6:	463b      	mov	r3, r7
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fd f93a 	bl	8002552 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80052e4:	2305      	movs	r3, #5
 80052e6:	e0d7      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fb06 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fed4 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 80052fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8005302:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005306:	e0c7      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8005308:	217d      	movs	r1, #125	@ 0x7d
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb02 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8005316:	2300      	movs	r3, #0
 8005318:	e0be      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fbba 	bl	8005a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8005326:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800532e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005332:	e0b1      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff feb1 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8005340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8005348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800534c:	e0a4      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 800534e:	213a      	movs	r1, #58	@ 0x3a
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fadf 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005356:	4603      	mov	r3, r0
 8005358:	f083 0301 	eor.w	r3, r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8005362:	2303      	movs	r3, #3
 8005364:	e098      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f7fc ff92 	bl	8002298 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8005374:	f107 0214 	add.w	r2, r7, #20
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fba9 	bl	8005ad4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8005382:	f107 0310 	add.w	r3, r7, #16
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd f886 	bl	8002498 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d040      	beq.n	8005414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8005392:	f107 0320 	add.w	r3, r7, #32
 8005396:	f107 0214 	add.w	r2, r7, #20
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe f9c0 	bl	8003722 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	f107 0320 	add.w	r3, r7, #32
 80053ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ae:	68b8      	ldr	r0, [r7, #8]
 80053b0:	f7fe ff21 	bl	80041f6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80053b4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d111      	bne.n	80053e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fc fee6 	bl	8002190 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80053c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ce:	68b8      	ldr	r0, [r7, #8]
 80053d0:	f000 fb8c 	bl	8005aec <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 80053d4:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 80053dc:	2304      	movs	r3, #4
 80053de:	e05b      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80053e8:	f7fc ffd6 	bl	8002398 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 80053ec:	463b      	mov	r3, r7
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd f89c 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4622      	mov	r2, r4
 80053f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff fc0e 	bl	8004c1c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8005406:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800540a:	2b00      	cmp	r3, #0
 800540c:	d015      	beq.n	800543a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800540e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005412:	e041      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 8005414:	463b      	mov	r3, r7
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd f888 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800541c:	4603      	mov	r3, r0
 800541e:	4619      	mov	r1, r3
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 faa1 	bl	8005968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800542c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8005434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005438:	e02e      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fe2e 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8005446:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 800544e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005452:	e021      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 8005454:	217d      	movs	r1, #125	@ 0x7d
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa5c 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8005462:	2300      	movs	r3, #0
 8005464:	e018      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8005466:	212c      	movs	r1, #44	@ 0x2c
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fa53 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800546e:	4603      	mov	r3, r0
 8005470:	f083 0301 	eor.w	r3, r3, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 800547a:	2303      	movs	r3, #3
 800547c:	e00c      	b.n	8005498 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fe0c 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800548a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800548e:	2b00      	cmp	r3, #0
 8005490:	f43f af43 	beq.w	800531a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8005494:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8005498:	4618      	mov	r0, r3
 800549a:	373c      	adds	r7, #60	@ 0x3c
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}

080054a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80054aa:	463b      	mov	r3, r7
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fd f850 	bl	8002552 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80054b8:	2305      	movs	r3, #5
 80054ba:	e06d      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa1c 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff fdea 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
    if (err)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	e060      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 80054d6:	217d      	movs	r1, #125	@ 0x7d
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa1b 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e057      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb54 	bl	8005b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 80054ee:	4603      	mov	r3, r0
 80054f0:	73fb      	strb	r3, [r7, #15]
      if (err)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	e04d      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fdcd 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]
      if (err)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	e043      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8005510:	213a      	movs	r1, #58	@ 0x3a
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9fe 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005518:	4603      	mov	r3, r0
 800551a:	f083 0301 	eor.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8005524:	2303      	movs	r3, #3
 8005526:	e037      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8005528:	463b      	mov	r3, r7
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fffe 	bl	800252c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8005530:	4603      	mov	r3, r0
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fa17 	bl	8005968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	e027      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fda7 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
      if (err)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	e01d      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800555c:	217d      	movs	r1, #125	@ 0x7d
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9d8 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800556a:	2300      	movs	r3, #0
 800556c:	e014      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800556e:	212c      	movs	r1, #44	@ 0x2c
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9cf 	bl	8005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8005576:	4603      	mov	r3, r0
 8005578:	f083 0301 	eor.w	r3, r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8005582:	2303      	movs	r3, #3
 8005584:	e008      	b.n	8005598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fd88 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
      if (err)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0a8      	beq.n	80054e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
  }
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fc fdd7 	bl	8002160 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb0b 	bl	8005bce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
    if (err)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	e009      	b.n	80055da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fc fde1 	bl	8002190 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4619      	mov	r1, r3
 80055d2:	6838      	ldr	r0, [r7, #0]
 80055d4:	f7fc f83f 	bl	8001656 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 80055d8:	2300      	movs	r3, #0
  }
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fd8c 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
    move();
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f980 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fd84 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005600:	4603      	mov	r3, r0
 8005602:	73bb      	strb	r3, [r7, #14]
      move();
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f978 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 800560a:	7bba      	ldrb	r2, [r7, #14]
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	429a      	cmp	r2, r3
 8005610:	d016      	beq.n	8005640 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8005618:	2302      	movs	r3, #2
 800561a:	e013      	b.n	8005644 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b5c      	cmp	r3, #92	@ 0x5c
 8005620:	d1eb      	bne.n	80055fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fd70 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0e0      	beq.n	80055fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f95e 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 800563e:	e7dc      	b.n	80055fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8005640:	bf00      	nop
    return DeserializationError::Ok;
 8005642:	2300      	movs	r3, #0
  }
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
    while (*s) {
 8005656:	e016      	b.n	8005686 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fd55 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8005668:	2302      	movs	r3, #2
 800566a:	e011      	b.n	8005690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8005676:	2303      	movs	r3, #3
 8005678:	e00a      	b.n	8005690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	603b      	str	r3, [r7, #0]
      move();
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f93a 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e4      	bne.n	8005658 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 800568e:	2300      	movs	r3, #0
  }
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fd2e 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80056b0:	e00f      	b.n	80056d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f921 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 80056b8:	7fba      	ldrb	r2, [r7, #30]
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	77f9      	strb	r1, [r7, #31]
 80056c0:	4619      	mov	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	440b      	add	r3, r1
 80056c6:	771a      	strb	r2, [r3, #28]
      c = current();
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fd1d 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80056ce:	4603      	mov	r3, r0
 80056d0:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80056d2:	7fbb      	ldrb	r3, [r7, #30]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fafb 	bl	8005cd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80056e4:	d801      	bhi.n	80056ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e0      	bne.n	80056b2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 80056f0:	7ffb      	ldrb	r3, [r7, #31]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f103 021c 	add.w	r2, r3, #28
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd f8e0 	bl	80028cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd f894 	bl	800283e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8005716:	4603      	mov	r3, r0
 8005718:	3b01      	subs	r3, #1
 800571a:	2b03      	cmp	r3, #3
 800571c:	d85e      	bhi.n	80057dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005785 	.word	0x08005785
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005735 	.word	0x08005735
 8005730:	080057b1 	.word	0x080057b1
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4618      	mov	r0, r3
 800573a:	f7fd f89a 	bl	8002872 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	6989      	ldr	r1, [r1, #24]
 8005746:	9100      	str	r1, [sp, #0]
 8005748:	6838      	ldr	r0, [r7, #0]
 800574a:	f000 fae5 	bl	8005d18 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8005754:	2300      	movs	r3, #0
 8005756:	e042      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8005758:	2304      	movs	r3, #4
 800575a:	e040      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	4618      	mov	r0, r3
 8005762:	f7fd f878 	bl	8002856 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	6989      	ldr	r1, [r1, #24]
 800576e:	9100      	str	r1, [sp, #0]
 8005770:	6838      	ldr	r0, [r7, #0]
 8005772:	f000 fb13 	bl	8005d9c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 800577c:	2300      	movs	r3, #0
 800577e:	e02e      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8005780:	2304      	movs	r3, #4
 8005782:	e02c      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8005784:	f107 0308 	add.w	r3, r7, #8
 8005788:	4618      	mov	r0, r3
 800578a:	f7fd f880 	bl	800288e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 800578e:	eef0 7a40 	vmov.f32	s15, s0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	4619      	mov	r1, r3
 8005798:	eeb0 0a67 	vmov.f32	s0, s15
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f000 fb3f 	bl	8005e20 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e018      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80057ac:	2304      	movs	r3, #4
 80057ae:	e016      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 80057b0:	f107 0308 	add.w	r3, r7, #8
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fd f879 	bl	80028ac <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 80057ba:	eeb0 7b40 	vmov.f64	d7, d0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	4619      	mov	r1, r3
 80057c4:	eeb0 0b47 	vmov.f64	d0, d7
 80057c8:	6838      	ldr	r0, [r7, #0]
 80057ca:	f000 fb3d 	bl	8005e48 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e002      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80057d8:	2304      	movs	r3, #4
 80057da:	e000      	b.n	80057de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 80057dc:	2303      	movs	r3, #3
  }
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop

080057e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    char c = current();
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fc89 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80057f6:	4603      	mov	r3, r0
 80057f8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 80057fa:	e007      	b.n	800580c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f87c 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fc80 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005808:	4603      	mov	r3, r0
 800580a:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fa5e 	bl	8005cd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800581a:	2300      	movs	r3, #0
  }
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fc f990 	bl	8001b52 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8005832:	4603      	mov	r3, r0
  }
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb4c 	bl	8005ee2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 800584a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800584e:	eeb0 0a67 	vmov.f32	s0, s15
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b085      	sub	sp, #20
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fb4c 	bl	8005f02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800586a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ffd7 	bl	8005824 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8005876:	4602      	mov	r2, r0
    return VariantData::getMember(
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	9200      	str	r2, [sp, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005880:	4620      	mov	r0, r4
 8005882:	f000 f821 	bl	80058c8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8005886:	4603      	mov	r3, r0
  }
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8005898:	4804      	ldr	r0, [pc, #16]	@ (80058ac <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 800589a:	f7ff ffcf 	bl	800583c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800589e:	eef0 7a40 	vmov.f32	s15, s0
  }
 80058a2:	eeb0 0a67 	vmov.f32	s0, s15
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	4f7fffff 	.word	0x4f7fffff

080058b0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fc f9a0 	bl	8001bfe <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 80058be:	4603      	mov	r3, r0
  }
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	4638      	mov	r0, r7
 80058d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	e008      	b.n	80058f2 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	463b      	mov	r3, r7
 80058e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ea:	f000 fb16 	bl	8005f1a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 80058ee:	4603      	mov	r3, r0
 80058f0:	bf00      	nop
  }
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fb1c 	bl	8005f44 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fbf1 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	4293      	cmp	r3, r2
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 800593a:	2300      	movs	r3, #0
 800593c:	e003      	b.n	8005946 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ffdb 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8005944:	2301      	movs	r3, #1
  }
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8005958:	bf00      	nop
  }
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fb92 	bl	800509c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	e07c      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fbbe 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800598c:	4603      	mov	r3, r0
 800598e:	2b7b      	cmp	r3, #123	@ 0x7b
 8005990:	dc71      	bgt.n	8005a76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8005992:	2b5b      	cmp	r3, #91	@ 0x5b
 8005994:	da04      	bge.n	80059a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8005996:	2b22      	cmp	r3, #34	@ 0x22
 8005998:	d056      	beq.n	8005a48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800599a:	2b27      	cmp	r3, #39	@ 0x27
 800599c:	d054      	beq.n	8005a48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800599e:	e06a      	b.n	8005a76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80059a0:	3b5b      	subs	r3, #91	@ 0x5b
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d867      	bhi.n	8005a76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80059a6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	08005a31 	.word	0x08005a31
 80059b0:	08005a77 	.word	0x08005a77
 80059b4:	08005a77 	.word	0x08005a77
 80059b8:	08005a77 	.word	0x08005a77
 80059bc:	08005a77 	.word	0x08005a77
 80059c0:	08005a77 	.word	0x08005a77
 80059c4:	08005a77 	.word	0x08005a77
 80059c8:	08005a77 	.word	0x08005a77
 80059cc:	08005a77 	.word	0x08005a77
 80059d0:	08005a77 	.word	0x08005a77
 80059d4:	08005a77 	.word	0x08005a77
 80059d8:	08005a5f 	.word	0x08005a5f
 80059dc:	08005a77 	.word	0x08005a77
 80059e0:	08005a77 	.word	0x08005a77
 80059e4:	08005a77 	.word	0x08005a77
 80059e8:	08005a77 	.word	0x08005a77
 80059ec:	08005a77 	.word	0x08005a77
 80059f0:	08005a77 	.word	0x08005a77
 80059f4:	08005a77 	.word	0x08005a77
 80059f8:	08005a6b 	.word	0x08005a6b
 80059fc:	08005a77 	.word	0x08005a77
 8005a00:	08005a77 	.word	0x08005a77
 8005a04:	08005a77 	.word	0x08005a77
 8005a08:	08005a77 	.word	0x08005a77
 8005a0c:	08005a77 	.word	0x08005a77
 8005a10:	08005a53 	.word	0x08005a53
 8005a14:	08005a77 	.word	0x08005a77
 8005a18:	08005a77 	.word	0x08005a77
 8005a1c:	08005a77 	.word	0x08005a77
 8005a20:	08005a77 	.word	0x08005a77
 8005a24:	08005a77 	.word	0x08005a77
 8005a28:	08005a77 	.word	0x08005a77
 8005a2c:	08005a3d 	.word	0x08005a3d
        return skipArray(nestingLimit);
 8005a30:	7839      	ldrb	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fc05 	bl	8005242 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e021      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8005a3c:	7839      	ldrb	r1, [r7, #0]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fd2e 	bl	80054a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8005a44:	4603      	mov	r3, r0
 8005a46:	e01b      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fdca 	bl	80055e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	e016      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8005a52:	490d      	ldr	r1, [pc, #52]	@ (8005a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fdf9 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	e010      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8005a5e:	490b      	ldr	r1, [pc, #44]	@ (8005a8c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fdf3 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8005a66:	4603      	mov	r3, r0
 8005a68:	e00a      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8005a6a:	4909      	ldr	r1, [pc, #36]	@ (8005a90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fded 	bl	800564c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e004      	b.n	8005a80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff feb6 	bl	80057e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	bf00      	nop
  }
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	0801c124 	.word	0x0801c124
 8005a8c:	0801c12c 	.word	0x0801c12c
 8005a90:	0801c134 	.word	0x0801c134

08005a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fc fb5e 	bl	8002160 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fb2f 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fa6c 	bl	8005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f888 	bl	8005bce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	e004      	b.n	8005acc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa75 	bl	8005fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	bf00      	nop
  }
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8005ade:	bf00      	nop
  }
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8005af8:	f107 0318 	add.w	r3, r7, #24
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fc f9de 	bl	8001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8005b04:	f107 0318 	add.w	r3, r7, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd fc7d 	bl	8003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f083 0301 	eor.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e037      	b.n	8005b8e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8005b1e:	f107 0310 	add.w	r3, r7, #16
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fc f9cb 	bl	8001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8005b2a:	f107 0310 	add.w	r3, r7, #16
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fd fc6a 	bl	8003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f083 0301 	eor.w	r3, r3, #1
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e024      	b.n	8005b8e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8005b44:	f107 0318 	add.w	r3, r7, #24
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd fc86 	bl	800345a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb fd6f 	bl	8001638 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f083 0301 	eor.w	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e011      	b.n	8005b8e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f107 0218 	add.w	r2, r7, #24
 8005b7a:	ca06      	ldmia	r2, {r1, r2}
 8005b7c:	f7fc f919 	bl	8001db2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8005b80:	f107 0310 	add.w	r3, r7, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fd fc50 	bl	800342a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	bf00      	nop
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fab2 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f9ef 	bl	8005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fd15 	bl	80055e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	e004      	b.n	8005bc6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa31 	bl	8006024 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	bf00      	nop
  }
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8005bd6:	f107 030c 	add.w	r3, r7, #12
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fc fd14 	bl	8002608 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff fa91 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75bb      	strb	r3, [r7, #22]
    move();
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fe85 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff fa89 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
      move();
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe7d 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8005c00:	7dfa      	ldrb	r2, [r7, #23]
 8005c02:	7dbb      	ldrb	r3, [r7, #22]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d051      	beq.n	8005cac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e05a      	b.n	8005cc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c16:	d140      	bne.n	8005c9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fa75 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e04d      	b.n	8005cc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b75      	cmp	r3, #117	@ 0x75
 8005c30:	d125      	bne.n	8005c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fe61 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8005c38:	f107 030a 	add.w	r3, r7, #10
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa0e 	bl	8006060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8005c44:	4603      	mov	r3, r0
 8005c46:	757b      	strb	r3, [r7, #21]
          if (err)
 8005c48:	7d7b      	ldrb	r3, [r7, #21]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8005c4e:	7d7b      	ldrb	r3, [r7, #21]
 8005c50:	e03a      	b.n	8005cc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8005c52:	897a      	ldrh	r2, [r7, #10]
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fc fce5 	bl	800262a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fc fd0f 	bl	800268e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8005c70:	4602      	mov	r2, r0
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f000 fa2b 	bl	80060d2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8005c7c:	e7b8      	b.n	8005bf0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fc fa0c 	bl	800209e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e019      	b.n	8005cc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fe30 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	7dfa      	ldrb	r2, [r7, #23]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fc fab6 	bl	8002212 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8005ca6:	e7a3      	b.n	8005bf0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8005ca8:	bf00      	nop
    for (;;) {
 8005caa:	e7a1      	b.n	8005bf0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8005cac:	bf00      	nop
    if (!stringBuilder_.isValid())
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fc fae0 	bl	8002276 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	e000      	b.n	8005cc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8005cc6:	2300      	movs	r3, #0
  }
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2239      	movs	r2, #57	@ 0x39
 8005cde:	2130      	movs	r1, #48	@ 0x30
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fa7a 	bl	80061da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8005ce6:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10e      	bne.n	8005d0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	2b2b      	cmp	r3, #43	@ 0x2b
 8005cf0:	d00b      	beq.n	8005d0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b2d      	cmp	r3, #45	@ 0x2d
 8005cf6:	d008      	beq.n	8005d0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cfc:	d005      	beq.n	8005d0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b65      	cmp	r3, #101	@ 0x65
 8005d02:	d002      	beq.n	8005d0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b45      	cmp	r3, #69	@ 0x45
 8005d08:	d101      	bne.n	8005d0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8005d0e:	2300      	movs	r3, #0
  }
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8005d18:	b5b0      	push	{r4, r5, r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8005d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d28:	f7ff f8be 	bl	8004ea8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	220a      	movs	r2, #10
 8005d36:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e028      	b.n	8005d92 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8005d40:	f107 0310 	add.w	r3, r7, #16
 8005d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fc f93f 	bl	8001fca <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fa5c 	bl	800620e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e016      	b.n	8005d94 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	221a      	movs	r2, #26
 8005d6a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fa5d 	bl	8006230 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8005d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d82:	f107 0310 	add.w	r3, r7, #16
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fa5e 	bl	8006248 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8005d92:	2301      	movs	r3, #1
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bdb0      	pop	{r4, r5, r7, pc}

08005d9c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8005d9c:	b5b0      	push	{r4, r5, r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8005da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dac:	f000 fa58 	bl	8006260 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	220c      	movs	r2, #12
 8005dba:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e028      	b.n	8005e16 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fc f8fd 	bl	8001fca <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8005dd0:	f107 0310 	add.w	r3, r7, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fa1a 	bl	800620e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e016      	b.n	8005e18 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	221c      	movs	r2, #28
 8005dee:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8005df0:	f107 0310 	add.w	r3, r7, #16
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fa1b 	bl	8006230 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8005e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e06:	f107 0310 	add.w	r3, r7, #16
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa1c 	bl	8006248 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8005e10:	4603      	mov	r3, r0
 8005e12:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8005e16:	2301      	movs	r3, #1
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bdb0      	pop	{r4, r5, r7, pc}

08005e20 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e2c:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	220e      	movs	r2, #14
 8005e32:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	601a      	str	r2, [r3, #0]
    return true;
 8005e3a:	2301      	movs	r3, #1
  }
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8005e48:	b5b0      	push	{r4, r5, r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	ed87 0b00 	vstr	d0, [r7]
 8005e54:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8005e56:	ed97 7b00 	vldr	d7, [r7]
 8005e5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8005e62:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e6a:	ed97 6b00 	vldr	d6, [r7]
 8005e6e:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	d106      	bne.n	8005e86 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	220e      	movs	r2, #14
 8005e7c:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e028      	b.n	8005ed8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8005e86:	f107 0314 	add.w	r3, r7, #20
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fc f89c 	bl	8001fca <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f9b9 	bl	800620e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f083 0301 	eor.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e016      	b.n	8005eda <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	221e      	movs	r2, #30
 8005eb0:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f9ba 	bl	8006230 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8005ec4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f9bb 	bl	8006248 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8005ed8:	2301      	movs	r3, #1
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bdb0      	pop	{r4, r5, r7, pc}

08005ee2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	ee07 3a90 	vmov	s15, r3
}
 8005ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
    return client.getData();
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb fe2d 	bl	8001b6a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8005f10:	4603      	mov	r3, r0
  }
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b086      	sub	sp, #24
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	4638      	mov	r0, r7
 8005f24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7fb faf3 	bl	8001514 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	463b      	mov	r3, r7
 8005f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f36:	f7fd fe75 	bl	8003c24 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8005f3a:	4603      	mov	r3, r0
  }
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	715a      	strb	r2, [r3, #5]
  }
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f99f 	bl	80062ac <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8005f6e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	715a      	strb	r2, [r3, #5]
  }
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	4603      	mov	r3, r0
 8005f92:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	2b27      	cmp	r3, #39	@ 0x27
 8005f98:	d002      	beq.n	8005fa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	2b22      	cmp	r3, #34	@ 0x22
 8005f9e:	d101      	bne.n	8005fa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8005fa4:	2300      	movs	r3, #0
  }
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
    char c = current();
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff f8a4 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f980 	bl	80062cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fc91 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fc f917 	bl	8002212 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f88f 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f96b 	bl	80062cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ea      	bne.n	8005fd2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8005ffc:	e001      	b.n	8006002 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e00c      	b.n	800601c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fc f936 	bl	8002276 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800600a:	4603      	mov	r3, r0
 800600c:	f083 0301 	eor.w	r3, r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 8006016:	2304      	movs	r3, #4
 8006018:	e000      	b.n	800601c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 800601a:	2300      	movs	r3, #0
  }
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    char c = current();
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff f86b 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8006036:	e007      	b.n	8006048 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fc5e 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff f862 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f93e 	bl	80062cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8006056:	2300      	movs	r3, #0
  }
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
    result = 0;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2200      	movs	r2, #0
 800606e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8006070:	2300      	movs	r3, #0
 8006072:	73fb      	strb	r3, [r7, #15]
 8006074:	e025      	b.n	80060c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff f846 	bl	8005108 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800607c:	4603      	mov	r3, r0
 800607e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 8006086:	2302      	movs	r3, #2
 8006088:	e01f      	b.n	80060ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f944 	bl	800631a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8006092:	4603      	mov	r3, r0
 8006094:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8006096:	7b7b      	ldrb	r3, [r7, #13]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d901      	bls.n	80060a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800609c:	2303      	movs	r3, #3
 800609e:	e014      	b.n	80060ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	b21a      	sxth	r2, r3
 80060a8:	7b7b      	ldrb	r3, [r7, #13]
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	801a      	strh	r2, [r3, #0]
      move();
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fc1f 	bl	80058fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	3301      	adds	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d9d6      	bls.n	8006076 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 80060c8:	2300      	movs	r3, #0
  }
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e0:	d806      	bhi.n	80060f0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	6838      	ldr	r0, [r7, #0]
 80060ea:	f7fc f892 	bl	8002212 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 80060ee:	e070      	b.n	80061d2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	617a      	str	r2, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800610e:	b2d9      	uxtb	r1, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	617a      	str	r2, [r7, #20]
 8006116:	460a      	mov	r2, r1
 8006118:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	099b      	lsrs	r3, r3, #6
 800611e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	2b1f      	cmp	r3, #31
 8006124:	d80a      	bhi.n	800613c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800612e:	b2d9      	uxtb	r1, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	617a      	str	r2, [r7, #20]
 8006136:	460a      	mov	r2, r1
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e03e      	b.n	80061ba <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800613c:	8a7b      	ldrh	r3, [r7, #18]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800614a:	b2d9      	uxtb	r1, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	617a      	str	r2, [r7, #20]
 8006152:	460a      	mov	r2, r1
 8006154:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 8006156:	8a7b      	ldrh	r3, [r7, #18]
 8006158:	099b      	lsrs	r3, r3, #6
 800615a:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800615c:	8a7b      	ldrh	r3, [r7, #18]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d80a      	bhi.n	8006178 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 8006162:	8a7b      	ldrh	r3, [r7, #18]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f063 031f 	orn	r3, r3, #31
 800616a:	b2d9      	uxtb	r1, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	617a      	str	r2, [r7, #20]
 8006172:	460a      	mov	r2, r1
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e020      	b.n	80061ba <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8006178:	8a7b      	ldrh	r3, [r7, #18]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006186:	b2d9      	uxtb	r1, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	617a      	str	r2, [r7, #20]
 800618e:	460a      	mov	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8006192:	8a7b      	ldrh	r3, [r7, #18]
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 8006198:	8a7b      	ldrh	r3, [r7, #18]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f063 030f 	orn	r3, r3, #15
 80061a0:	b2d9      	uxtb	r1, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	617a      	str	r2, [r7, #20]
 80061a8:	460a      	mov	r2, r1
 80061aa:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 80061ac:	e005      	b.n	80061ba <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f7fc f82c 	bl	8002212 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	3b01      	subs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1ed      	bne.n	80061ae <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 80061d2:	bf00      	nop
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	71fb      	strb	r3, [r7, #7]
 80061e4:	460b      	mov	r3, r1
 80061e6:	71bb      	strb	r3, [r7, #6]
 80061e8:	4613      	mov	r3, r2
 80061ea:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 80061ec:	79ba      	ldrb	r2, [r7, #6]
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d805      	bhi.n	8006200 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 80061f4:	79fa      	ldrb	r2, [r7, #7]
 80061f6:	797b      	ldrb	r3, [r7, #5]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d801      	bhi.n	8006200 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8006200:	2300      	movs	r3, #0
  }
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
  }
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
    return id_;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	889b      	ldrh	r3, [r3, #4]
  }
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
  }
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800626c:	f000 f86e 	bl	800634c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8006270:	4603      	mov	r3, r0
 8006272:	17da      	asrs	r2, r3, #31
 8006274:	4698      	mov	r8, r3
 8006276:	4691      	mov	r9, r2
 8006278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627c:	4542      	cmp	r2, r8
 800627e:	eb73 0309 	sbcs.w	r3, r3, r9
 8006282:	db0d      	blt.n	80062a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8006284:	f000 f86b 	bl	800635e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 8006288:	4603      	mov	r3, r0
 800628a:	17da      	asrs	r2, r3, #31
 800628c:	461c      	mov	r4, r3
 800628e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	4294      	cmp	r4, r2
 8006296:	eb75 0303 	sbcs.w	r3, r5, r3
 800629a:	db01      	blt.n	80062a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080062ac <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
  }
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2239      	movs	r2, #57	@ 0x39
 80062da:	2130      	movs	r1, #48	@ 0x30
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff ff7c 	bl	80061da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d111      	bne.n	800630c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	227a      	movs	r2, #122	@ 0x7a
 80062ec:	215f      	movs	r1, #95	@ 0x5f
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ff73 	bl	80061da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	225a      	movs	r2, #90	@ 0x5a
 80062fe:	2141      	movs	r1, #65	@ 0x41
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff6a 	bl	80061da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8006306:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 8006310:	2300      	movs	r3, #0
  }
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	4603      	mov	r3, r0
 8006322:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b40      	cmp	r3, #64	@ 0x40
 8006328:	d803      	bhi.n	8006332 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	3b30      	subs	r3, #48	@ 0x30
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e006      	b.n	8006340 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	f023 0320 	bic.w	r3, r3, #32
 8006338:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	3b37      	subs	r3, #55	@ 0x37
 800633e:	b2db      	uxtb	r3, r3
  }
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8006350:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800635e:	b580      	push	{r7, lr}
 8006360:	af00      	add	r7, sp, #0
    return T(~lowest());
 8006362:	f7ff fff3 	bl	800634c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8006366:	4603      	mov	r3, r0
 8006368:	43db      	mvns	r3, r3
  }
 800636a:	4618      	mov	r0, r3
 800636c:	bd80      	pop	{r7, pc}

0800636e <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
      header = 0;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
      outputs = 0;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (int i=0;i<Config::JOINTS;i++) {
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e008      	b.n	80063aa <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	2200      	movs	r2, #0
 80063a2:	605a      	str	r2, [r3, #4]
      for (int i=0;i<Config::JOINTS;i++) {
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b07      	cmp	r3, #7
 80063ae:	d9f3      	bls.n	8006398 <_ZN8rxData_tC1Ev+0x2a>
      }
      for (int i=0;i<Config::VARIABLES;i++) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	e00b      	b.n	80063ce <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	3308      	adds	r3, #8
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	3304      	adds	r3, #4
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
      for (int i=0;i<Config::VARIABLES;i++) {
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b05      	cmp	r3, #5
 80063d2:	d9f0      	bls.n	80063b6 <_ZN8rxData_tC1Ev+0x48>
     }
  }
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::JOINTS];	  // Base thread feedback ??
    float processVariable[Config::VARIABLES];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
      header = 0;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
      inputs = 0;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (int i=0;i<Config::JOINTS;i++) {
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e008      	b.n	800640e <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
      for (int i=0;i<Config::JOINTS;i++) {
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b07      	cmp	r3, #7
 8006412:	d9f3      	bls.n	80063fc <_ZN8txData_tC1Ev+0x1a>
      }
      for (int i=0;i<Config::VARIABLES;i++) {
 8006414:	2300      	movs	r3, #0
 8006416:	60bb      	str	r3, [r7, #8]
 8006418:	e00b      	b.n	8006432 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3308      	adds	r3, #8
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	3304      	adds	r3, #4
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
      for (int i=0;i<Config::VARIABLES;i++) {
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3301      	adds	r3, #1
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b05      	cmp	r3, #5
 8006436:	d9f0      	bls.n	800641a <_ZN8txData_tC1Ev+0x38>
     }
  }
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  }
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f103 0208 	add.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7fa feab 	bl	80011cc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f103 020c 	add.w	r2, r3, #12
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f7fc ff2c 	bl	80032e0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	330c      	adds	r3, #12
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f8b3 	bl	80075f8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3308      	adds	r3, #8
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff ffd5 	bl	8006446 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff ffd3 	bl	800645c <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80064c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e2:	2210      	movs	r2, #16
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 80064e8:	f7fa fd04 	bl	8000ef4 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 80064f4:	f7fa fd0c 	bl	8000f10 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80064f8:	bf00      	nop
 80064fa:	bd80      	pop	{r7, pc}

080064fc <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8006500:	f7fa fd14 	bl	8000f2c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 8006504:	bf00      	nop
 8006506:	bd80      	pop	{r7, pc}

08006508 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 800650c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d009      	beq.n	8006538 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8006524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8006534:	f7fa fd08 	bl	8000f48 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8006538:	bf00      	nop
 800653a:	bd80      	pop	{r7, pc}

0800653c <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8006540:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <TIM3_IRQHandler+0x30>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8006556:	4b05      	ldr	r3, [pc, #20]	@ (800656c <TIM3_IRQHandler+0x30>)
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	4a04      	ldr	r2, [pc, #16]	@ (800656c <TIM3_IRQHandler+0x30>)
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 8006562:	f7fa fcff 	bl	8000f64 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8006566:	bf00      	nop
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40000400 	.word	0x40000400

08006570 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <TIM4_IRQHandler+0x30>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 800658a:	4b05      	ldr	r3, [pc, #20]	@ (80065a0 <TIM4_IRQHandler+0x30>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4a04      	ldr	r2, [pc, #16]	@ (80065a0 <TIM4_IRQHandler+0x30>)
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8006596:	f7fa fcf3 	bl	8000f80 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40000800 	.word	0x40000800

080065a4 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM2_IRQn, SERVO_THREAD_IRQ_PRIORITY);

	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 80065b2:	b5b0      	push	{r4, r5, r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2401      	movs	r4, #1
 80065be:	461d      	mov	r5, r3
 80065c0:	e004      	b.n	80065cc <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff fed3 	bl	800636e <_ZN8rxData_tC1Ev>
 80065c8:	3c01      	subs	r4, #1
 80065ca:	3540      	adds	r5, #64	@ 0x40
 80065cc:	2c00      	cmp	r4, #0
 80065ce:	daf8      	bge.n	80065c2 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080065dc <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80065e4:	1d39      	adds	r1, r7, #4
 80065e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065ea:	2201      	movs	r2, #1
 80065ec:	4803      	ldr	r0, [pc, #12]	@ (80065fc <__io_putchar+0x20>)
 80065ee:	f00f fe4c 	bl	801628a <HAL_UART_Transmit>
	  return ch;
 80065f2:	687b      	ldr	r3, [r7, #4]
	}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	24000448 	.word	0x24000448

08006600 <_Z9initCommsv>:
}


void initComms()
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
    printf("\n1. Starting up Remora communications\n");
 8006604:	4807      	ldr	r0, [pc, #28]	@ (8006624 <_Z9initCommsv+0x24>)
 8006606:	f014 fd43 	bl	801b090 <puts>

    // initialise and start the Remora communications module
    comms->init();
 800660a:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <_Z9initCommsv+0x28>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f004 fd46 	bl	800b0a0 <_ZN11RemoraComms4initEv>
    comms->start();
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <_Z9initCommsv+0x28>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f004 fec5 	bl	800b3a8 <_ZN11RemoraComms5startEv>
}
 800661e:	bf00      	nop
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	0801c194 	.word	0x0801c194
 8006628:	240003c8 	.word	0x240003c8

0800662c <_Z10commsTasksv>:


void commsTasks()
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
	// check and process communications packets
	comms->processPacket();
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <_Z10commsTasksv+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f005 fd20 	bl	800c07a <_ZN11RemoraComms13processPacketEv>
}
 800663a:	bf00      	nop
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	240003c8 	.word	0x240003c8

08006644 <_Z14readJsonConfigv>:


void readJsonConfig()
{
 8006644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006648:	b08d      	sub	sp, #52	@ 0x34
 800664a:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n2. Reading JSON configuration file\n");
 800664c:	4854      	ldr	r0, [pc, #336]	@ (80067a0 <_Z14readJsonConfigv+0x15c>)
 800664e:	f014 fd1f 	bl	801b090 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8006652:	4854      	ldr	r0, [pc, #336]	@ (80067a4 <_Z14readJsonConfigv+0x160>)
 8006654:	f014 fd1c 	bl	801b090 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8006658:	2200      	movs	r2, #0
 800665a:	4953      	ldr	r1, [pc, #332]	@ (80067a8 <_Z14readJsonConfigv+0x164>)
 800665c:	4853      	ldr	r0, [pc, #332]	@ (80067ac <_Z14readJsonConfigv+0x168>)
 800665e:	f013 fcd3 	bl	801a008 <f_mount>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 8006672:	484f      	ldr	r0, [pc, #316]	@ (80067b0 <_Z14readJsonConfigv+0x16c>)
 8006674:	f014 fc9c 	bl	801afb0 <iprintf>
    	Error_Handler();
 8006678:	f000 ffb2 	bl	80075e0 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 800667c:	e08a      	b.n	8006794 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 800667e:	2201      	movs	r2, #1
 8006680:	494c      	ldr	r1, [pc, #304]	@ (80067b4 <_Z14readJsonConfigv+0x170>)
 8006682:	484d      	ldr	r0, [pc, #308]	@ (80067b8 <_Z14readJsonConfigv+0x174>)
 8006684:	f013 fd06 	bl	801a094 <f_open>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8006698:	4848      	ldr	r0, [pc, #288]	@ (80067bc <_Z14readJsonConfigv+0x178>)
 800669a:	f014 fcf9 	bl	801b090 <puts>
			Error_Handler();
 800669e:	f000 ff9f 	bl	80075e0 <Error_Handler>
}
 80066a2:	e077      	b.n	8006794 <_Z14readJsonConfigv+0x150>
		}
 80066a4:	466b      	mov	r3, sp
 80066a6:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80066a8:	4b43      	ldr	r3, [pc, #268]	@ (80067b8 <_Z14readJsonConfigv+0x174>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 80066ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066b0:	4843      	ldr	r0, [pc, #268]	@ (80067c0 <_Z14readJsonConfigv+0x17c>)
 80066b2:	f014 fc7d 	bl	801afb0 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 80066b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066b8:	1e4b      	subs	r3, r1, #1
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80066bc:	460a      	mov	r2, r1
 80066be:	2300      	movs	r3, #0
 80066c0:	4690      	mov	r8, r2
 80066c2:	4699      	mov	r9, r3
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d8:	460a      	mov	r2, r1
 80066da:	2300      	movs	r3, #0
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	00eb      	lsls	r3, r5, #3
 80066ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ee:	00e2      	lsls	r2, r4, #3
 80066f0:	460b      	mov	r3, r1
 80066f2:	3318      	adds	r3, #24
 80066f4:	3307      	adds	r3, #7
 80066f6:	08db      	lsrs	r3, r3, #3
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	ebad 0d03 	sub.w	sp, sp, r3
 80066fe:	466b      	mov	r3, sp
 8006700:	331f      	adds	r3, #31
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	015b      	lsls	r3, r3, #5
 8006706:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8006708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670a:	1d3b      	adds	r3, r7, #4
 800670c:	6a39      	ldr	r1, [r7, #32]
 800670e:	482a      	ldr	r0, [pc, #168]	@ (80067b8 <_Z14readJsonConfigv+0x174>)
 8006710:	f013 fe7a 	bl	801a408 <f_read>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8006724:	4827      	ldr	r0, [pc, #156]	@ (80067c4 <_Z14readJsonConfigv+0x180>)
 8006726:	f014 fcb3 	bl	801b090 <puts>
 800672a:	e02f      	b.n	800678c <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 800672c:	4826      	ldr	r0, [pc, #152]	@ (80067c8 <_Z14readJsonConfigv+0x184>)
 800672e:	f014 fcaf 	bl	801b090 <puts>
				strJson.reserve(length + 1);
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	3301      	adds	r3, #1
 8006736:	4619      	mov	r1, r3
 8006738:	4824      	ldr	r0, [pc, #144]	@ (80067cc <_Z14readJsonConfigv+0x188>)
 800673a:	f014 f9d7 	bl	801aaec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006742:	e017      	b.n	8006774 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006748:	4413      	add	r3, r2
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	491e      	ldr	r1, [pc, #120]	@ (80067cc <_Z14readJsonConfigv+0x188>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f971 	bl	8003a3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	4619      	mov	r1, r3
 800675e:	481b      	ldr	r0, [pc, #108]	@ (80067cc <_Z14readJsonConfigv+0x188>)
 8006760:	f014 f955 	bl	801aa0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006764:	f107 0308 	add.w	r3, r7, #8
 8006768:	4618      	mov	r0, r3
 800676a:	f014 f94a 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	3301      	adds	r3, #1
 8006772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	429a      	cmp	r2, r3
 800677a:	dbe3      	blt.n	8006744 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 800677c:	4813      	ldr	r0, [pc, #76]	@ (80067cc <_Z14readJsonConfigv+0x188>)
 800677e:	f014 fa21 	bl	801abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006782:	4603      	mov	r3, r0
 8006784:	4619      	mov	r1, r3
 8006786:	4812      	ldr	r0, [pc, #72]	@ (80067d0 <_Z14readJsonConfigv+0x18c>)
 8006788:	f014 fc12 	bl	801afb0 <iprintf>
			f_close(&SDFile);
 800678c:	480a      	ldr	r0, [pc, #40]	@ (80067b8 <_Z14readJsonConfigv+0x174>)
 800678e:	f013 fff8 	bl	801a782 <f_close>
 8006792:	46b5      	mov	sp, r6
}
 8006794:	bf00      	nop
 8006796:	3734      	adds	r7, #52	@ 0x34
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800679e:	bf00      	nop
 80067a0:	0801c1bc 	.word	0x0801c1bc
 80067a4:	0801c1e0 	.word	0x0801c1e0
 80067a8:	240004f0 	.word	0x240004f0
 80067ac:	240004f4 	.word	0x240004f4
 80067b0:	0801c200 	.word	0x0801c200
 80067b4:	0801c21c 	.word	0x0801c21c
 80067b8:	24000724 	.word	0x24000724
 80067bc:	0801c228 	.word	0x0801c228
 80067c0:	0801c24c 	.word	0x0801c24c
 80067c4:	0801c270 	.word	0x0801c270
 80067c8:	0801c290 	.word	0x0801c290
 80067cc:	24000360 	.word	0x24000360
 80067d0:	0801c2b0 	.word	0x0801c2b0

080067d4 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 80067da:	4823      	ldr	r0, [pc, #140]	@ (8006868 <_Z15deserialiseJSONv+0x94>)
 80067dc:	f014 fc58 	bl	801b090 <puts>

    const char *json = strJson.c_str();
 80067e0:	4822      	ldr	r0, [pc, #136]	@ (800686c <_Z15deserialiseJSONv+0x98>)
 80067e2:	f014 f9ef 	bl	801abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80067e6:	6078      	str	r0, [r7, #4]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4821      	ldr	r0, [pc, #132]	@ (8006870 <_Z15deserialiseJSONv+0x9c>)
 80067ec:	f7fd f93b 	bl	8003a66 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 80067f0:	4603      	mov	r3, r0
 80067f2:	703b      	strb	r3, [r7, #0]

    printf("	Config deserialisation - ");
 80067f4:	481f      	ldr	r0, [pc, #124]	@ (8006874 <_Z15deserialiseJSONv+0xa0>)
 80067f6:	f014 fbdb 	bl	801afb0 <iprintf>

    switch (error.code())
 80067fa:	463b      	mov	r3, r7
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fb fe2c 	bl	800245a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8006802:	4603      	mov	r3, r0
 8006804:	2b04      	cmp	r3, #4
 8006806:	d011      	beq.n	800682c <_Z15deserialiseJSONv+0x58>
 8006808:	2b04      	cmp	r3, #4
 800680a:	dc16      	bgt.n	800683a <_Z15deserialiseJSONv+0x66>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <_Z15deserialiseJSONv+0x42>
 8006810:	2b03      	cmp	r3, #3
 8006812:	d004      	beq.n	800681e <_Z15deserialiseJSONv+0x4a>
 8006814:	e011      	b.n	800683a <_Z15deserialiseJSONv+0x66>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8006816:	4818      	ldr	r0, [pc, #96]	@ (8006878 <_Z15deserialiseJSONv+0xa4>)
 8006818:	f014 fc3a 	bl	801b090 <puts>
            break;
 800681c:	e01f      	b.n	800685e <_Z15deserialiseJSONv+0x8a>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800681e:	4817      	ldr	r0, [pc, #92]	@ (800687c <_Z15deserialiseJSONv+0xa8>)
 8006820:	f014 fc36 	bl	801b090 <puts>
            configError = true;
 8006824:	4b16      	ldr	r3, [pc, #88]	@ (8006880 <_Z15deserialiseJSONv+0xac>)
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
            break;
 800682a:	e018      	b.n	800685e <_Z15deserialiseJSONv+0x8a>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800682c:	4815      	ldr	r0, [pc, #84]	@ (8006884 <_Z15deserialiseJSONv+0xb0>)
 800682e:	f014 fc2f 	bl	801b090 <puts>
            configError = true;
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <_Z15deserialiseJSONv+0xac>)
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
            break;
 8006838:	e011      	b.n	800685e <_Z15deserialiseJSONv+0x8a>
        default:
            printf("Deserialization failed: ");
 800683a:	4813      	ldr	r0, [pc, #76]	@ (8006888 <_Z15deserialiseJSONv+0xb4>)
 800683c:	f014 fbb8 	bl	801afb0 <iprintf>
            printf(error.c_str());
 8006840:	463b      	mov	r3, r7
 8006842:	4618      	mov	r0, r3
 8006844:	f7fb fe16 	bl	8002474 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 8006848:	4603      	mov	r3, r0
 800684a:	4618      	mov	r0, r3
 800684c:	f014 fbb0 	bl	801afb0 <iprintf>
            printf("\n");
 8006850:	200a      	movs	r0, #10
 8006852:	f014 fbbf 	bl	801afd4 <putchar>
            configError = true;
 8006856:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <_Z15deserialiseJSONv+0xac>)
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
            break;
 800685c:	bf00      	nop
    }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	0801c2b8 	.word	0x0801c2b8
 800686c:	24000360 	.word	0x24000360
 8006870:	24000378 	.word	0x24000378
 8006874:	0801c2dc 	.word	0x0801c2dc
 8006878:	0801c2f8 	.word	0x0801c2f8
 800687c:	0801c314 	.word	0x0801c314
 8006880:	2400030f 	.word	0x2400030f
 8006884:	0801c324 	.word	0x0801c324
 8006888:	0801c338 	.word	0x0801c338

0800688c <_Z12countModulesv>:


void countModules()
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b098      	sub	sp, #96	@ 0x60
 8006890:	af00      	add	r7, sp, #0
    baseCount = 0;
 8006892:	4b4a      	ldr	r3, [pc, #296]	@ (80069bc <_Z12countModulesv+0x130>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
    servoCount = 0;
 8006898:	4b49      	ldr	r3, [pc, #292]	@ (80069c0 <_Z12countModulesv+0x134>)
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]

    printf("\n4. Counting modules\n");
 800689e:	4849      	ldr	r0, [pc, #292]	@ (80069c4 <_Z12countModulesv+0x138>)
 80068a0:	f014 fbf6 	bl	801b090 <puts>

    JsonArray Modules = doc["Modules"];
 80068a4:	f107 0320 	add.w	r3, r7, #32
 80068a8:	4a47      	ldr	r2, [pc, #284]	@ (80069c8 <_Z12countModulesv+0x13c>)
 80068aa:	4948      	ldr	r1, [pc, #288]	@ (80069cc <_Z12countModulesv+0x140>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd f807 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80068b2:	f107 0318 	add.w	r3, r7, #24
 80068b6:	f107 0220 	add.w	r2, r7, #32
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fd f818 	bl	80038f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>
    for (JsonArray::iterator it = Modules.begin(); it != Modules.end(); ++it) {
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	f107 0218 	add.w	r2, r7, #24
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fb f8ed 	bl	8001aac <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 80068d2:	e03e      	b.n	8006952 <_Z12countModulesv+0xc6>
        JsonObject module = *it;
 80068d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068d8:	f107 020c 	add.w	r2, r7, #12
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fb f88c 	bl	80019fc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 80068e4:	1d3b      	adds	r3, r7, #4
 80068e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd f80f 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>

        const char* thread = module["Thread"];
 80068f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068f6:	1d39      	adds	r1, r7, #4
 80068f8:	4a35      	ldr	r2, [pc, #212]	@ (80069d0 <_Z12countModulesv+0x144>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fd f817 	bl	800392e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006900:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006904:	4618      	mov	r0, r3
 8006906:	f7fd f837 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800690a:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (thread) {
 800690c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01a      	beq.n	8006948 <_Z12countModulesv+0xbc>
            if (!strcmp(thread, "Base")) {
 8006912:	4930      	ldr	r1, [pc, #192]	@ (80069d4 <_Z12countModulesv+0x148>)
 8006914:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006916:	f7f9 fce3 	bl	80002e0 <strcmp>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <_Z12countModulesv+0xa2>
                ++baseCount;
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <_Z12countModulesv+0x130>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <_Z12countModulesv+0x130>)
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e00c      	b.n	8006948 <_Z12countModulesv+0xbc>
            } else if (!strcmp(thread, "Servo")) {
 800692e:	492a      	ldr	r1, [pc, #168]	@ (80069d8 <_Z12countModulesv+0x14c>)
 8006930:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006932:	f7f9 fcd5 	bl	80002e0 <strcmp>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <_Z12countModulesv+0xbc>
                ++servoCount;
 800693c:	4b20      	ldr	r3, [pc, #128]	@ (80069c0 <_Z12countModulesv+0x134>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	4b1e      	ldr	r3, [pc, #120]	@ (80069c0 <_Z12countModulesv+0x134>)
 8006946:	701a      	strb	r2, [r3, #0]
    for (JsonArray::iterator it = Modules.begin(); it != Modules.end(); ++it) {
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	4618      	mov	r0, r3
 800694e:	f7fb f879 	bl	8001a44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8006952:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006956:	f107 0218 	add.w	r2, r7, #24
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f7fb f8c8 	bl	8001af2 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8006962:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fb f859 	bl	8001a24 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1ad      	bne.n	80068d4 <_Z12countModulesv+0x48>
            }
        }
    }

    // add the communication monitoring module to the servo thread count
    ++servoCount;
 8006978:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <_Z12countModulesv+0x134>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	4b0f      	ldr	r3, [pc, #60]	@ (80069c0 <_Z12countModulesv+0x134>)
 8006982:	701a      	strb	r2, [r3, #0]

    if (DEBUG_THREADS)
    {
    	baseCount = baseCount + 2;
 8006984:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <_Z12countModulesv+0x130>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	3302      	adds	r3, #2
 800698a:	b2da      	uxtb	r2, r3
 800698c:	4b0b      	ldr	r3, [pc, #44]	@ (80069bc <_Z12countModulesv+0x130>)
 800698e:	701a      	strb	r2, [r3, #0]
    	servoCount = servoCount + 2;
 8006990:	4b0b      	ldr	r3, [pc, #44]	@ (80069c0 <_Z12countModulesv+0x134>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	3302      	adds	r3, #2
 8006996:	b2da      	uxtb	r2, r3
 8006998:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <_Z12countModulesv+0x134>)
 800699a:	701a      	strb	r2, [r3, #0]
    }

    printf("	Base thread modules: %d\n", baseCount);
 800699c:	4b07      	ldr	r3, [pc, #28]	@ (80069bc <_Z12countModulesv+0x130>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	480e      	ldr	r0, [pc, #56]	@ (80069dc <_Z12countModulesv+0x150>)
 80069a4:	f014 fb04 	bl	801afb0 <iprintf>
    printf("	Servo thread modules: %d\n", servoCount);
 80069a8:	4b05      	ldr	r3, [pc, #20]	@ (80069c0 <_Z12countModulesv+0x134>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	480c      	ldr	r0, [pc, #48]	@ (80069e0 <_Z12countModulesv+0x154>)
 80069b0:	f014 fafe 	bl	801afb0 <iprintf>
}
 80069b4:	bf00      	nop
 80069b6:	3760      	adds	r7, #96	@ 0x60
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	2400030d 	.word	0x2400030d
 80069c0:	2400030e 	.word	0x2400030e
 80069c4:	0801c354 	.word	0x0801c354
 80069c8:	0801c36c 	.word	0x0801c36c
 80069cc:	24000378 	.word	0x24000378
 80069d0:	0801c374 	.word	0x0801c374
 80069d4:	0801c37c 	.word	0x0801c37c
 80069d8:	0801c384 	.word	0x0801c384
 80069dc:	0801c38c 	.word	0x0801c38c
 80069e0:	0801c3a8 	.word	0x0801c3a8

080069e4 <_Z13configThreadsv>:


void configThreads()
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b09f      	sub	sp, #124	@ 0x7c
 80069e8:	af00      	add	r7, sp, #0
    if (configError) return;
 80069ea:	4b47      	ldr	r3, [pc, #284]	@ (8006b08 <_Z13configThreadsv+0x124>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 8085 	bne.w	8006afe <_Z13configThreadsv+0x11a>

    printf("\n5. Configuring threads\n");
 80069f4:	4845      	ldr	r0, [pc, #276]	@ (8006b0c <_Z13configThreadsv+0x128>)
 80069f6:	f014 fb4b 	bl	801b090 <puts>

    JsonArray Threads = doc["Threads"];
 80069fa:	f107 031c 	add.w	r3, r7, #28
 80069fe:	4a44      	ldr	r2, [pc, #272]	@ (8006b10 <_Z13configThreadsv+0x12c>)
 8006a00:	4944      	ldr	r1, [pc, #272]	@ (8006b14 <_Z13configThreadsv+0x130>)
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fc ff5c 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	f107 021c 	add.w	r2, r7, #28
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fc ff6d 	bl	80038f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8006a18:	f107 0308 	add.w	r3, r7, #8
 8006a1c:	f107 0214 	add.w	r2, r7, #20
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fb f842 	bl	8001aac <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006a28:	e055      	b.n	8006ad6 <_Z13configThreadsv+0xf2>
    {
        thread = *it;
 8006a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a2e:	f107 0208 	add.w	r2, r7, #8
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fa ffe1 	bl	80019fc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8006a3a:	4c37      	ldr	r4, [pc, #220]	@ (8006b18 <_Z13configThreadsv+0x134>)
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fc ff63 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a52:	e882 0003 	stmia.w	r2, {r0, r1}

        const char* configor = thread["Thread"];
 8006a56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a5a:	4a30      	ldr	r2, [pc, #192]	@ (8006b1c <_Z13configThreadsv+0x138>)
 8006a5c:	492e      	ldr	r1, [pc, #184]	@ (8006b18 <_Z13configThreadsv+0x134>)
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fc ff65 	bl	800392e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006a64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fc ff85 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8006a6e:	6778      	str	r0, [r7, #116]	@ 0x74
        uint32_t    freq = thread["Frequency"];
 8006a70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006a74:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <_Z13configThreadsv+0x13c>)
 8006a76:	4928      	ldr	r1, [pc, #160]	@ (8006b18 <_Z13configThreadsv+0x134>)
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fc ff89 	bl	8003990 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006a7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fc ffa9 	bl	80039da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8006a88:	6738      	str	r0, [r7, #112]	@ 0x70

        if (!strcmp(configor,"Base"))
 8006a8a:	4926      	ldr	r1, [pc, #152]	@ (8006b24 <_Z13configThreadsv+0x140>)
 8006a8c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006a8e:	f7f9 fc27 	bl	80002e0 <strcmp>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <_Z13configThreadsv+0xc8>
        {
            baseFreq = freq;
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <_Z13configThreadsv+0x144>)
 8006a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a9c:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", baseFreq);
 8006a9e:	4b22      	ldr	r3, [pc, #136]	@ (8006b28 <_Z13configThreadsv+0x144>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4821      	ldr	r0, [pc, #132]	@ (8006b2c <_Z13configThreadsv+0x148>)
 8006aa6:	f014 fa83 	bl	801afb0 <iprintf>
 8006aaa:	e00f      	b.n	8006acc <_Z13configThreadsv+0xe8>
        }
        else if (!strcmp(configor,"Servo"))
 8006aac:	4920      	ldr	r1, [pc, #128]	@ (8006b30 <_Z13configThreadsv+0x14c>)
 8006aae:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006ab0:	f7f9 fc16 	bl	80002e0 <strcmp>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d108      	bne.n	8006acc <_Z13configThreadsv+0xe8>
        {
            servoFreq = freq;
 8006aba:	4a1e      	ldr	r2, [pc, #120]	@ (8006b34 <_Z13configThreadsv+0x150>)
 8006abc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006abe:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servoFreq);
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b34 <_Z13configThreadsv+0x150>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	481c      	ldr	r0, [pc, #112]	@ (8006b38 <_Z13configThreadsv+0x154>)
 8006ac8:	f014 fa72 	bl	801afb0 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fa ffb7 	bl	8001a44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8006ad6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006ada:	f107 0214 	add.w	r2, r7, #20
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fb f806 	bl	8001af2 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8006ae6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fa ff97 	bl	8001a24 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d196      	bne.n	8006a2a <_Z13configThreadsv+0x46>
 8006afc:	e000      	b.n	8006b00 <_Z13configThreadsv+0x11c>
    if (configError) return;
 8006afe:	bf00      	nop
        }
    }
}
 8006b00:	377c      	adds	r7, #124	@ 0x7c
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2400030f 	.word	0x2400030f
 8006b0c:	0801c3c4 	.word	0x0801c3c4
 8006b10:	0801c3dc 	.word	0x0801c3dc
 8006b14:	24000378 	.word	0x24000378
 8006b18:	240003b8 	.word	0x240003b8
 8006b1c:	0801c374 	.word	0x0801c374
 8006b20:	0801c3e4 	.word	0x0801c3e4
 8006b24:	0801c37c 	.word	0x0801c37c
 8006b28:	2400001c 	.word	0x2400001c
 8006b2c:	0801c3f0 	.word	0x0801c3f0
 8006b30:	0801c384 	.word	0x0801c384
 8006b34:	24000020 	.word	0x24000020
 8006b38:	0801c418 	.word	0x0801c418

08006b3c <_Z11loadModulesv>:


void loadModules()
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b09f      	sub	sp, #124	@ 0x7c
 8006b40:	af00      	add	r7, sp, #0
    if (configError) return;
 8006b42:	4b73      	ldr	r3, [pc, #460]	@ (8006d10 <_Z11loadModulesv+0x1d4>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 80de 	bne.w	8006d08 <_Z11loadModulesv+0x1cc>

    printf("\n6. Loading modules\n");
 8006b4c:	4871      	ldr	r0, [pc, #452]	@ (8006d14 <_Z11loadModulesv+0x1d8>)
 8006b4e:	f014 fa9f 	bl	801b090 <puts>

    // Communication monitoring
    //servoThread->registerModule(comms);

    JsonArray Modules = doc["Modules"];
 8006b52:	f107 031c 	add.w	r3, r7, #28
 8006b56:	4a70      	ldr	r2, [pc, #448]	@ (8006d18 <_Z11loadModulesv+0x1dc>)
 8006b58:	4970      	ldr	r1, [pc, #448]	@ (8006d1c <_Z11loadModulesv+0x1e0>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc feb0 	bl	80038c0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006b60:	f107 0314 	add.w	r3, r7, #20
 8006b64:	f107 021c 	add.w	r2, r7, #28
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc fec1 	bl	80038f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from json data
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8006b70:	f107 0308 	add.w	r3, r7, #8
 8006b74:	f107 0214 	add.w	r2, r7, #20
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fa ff96 	bl	8001aac <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006b80:	e0ad      	b.n	8006cde <_Z11loadModulesv+0x1a2>
    {
        module = *it;
 8006b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006b86:	f107 0208 	add.w	r2, r7, #8
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fa ff35 	bl	80019fc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8006b92:	4c63      	ldr	r4, [pc, #396]	@ (8006d20 <_Z11loadModulesv+0x1e4>)
 8006b94:	463b      	mov	r3, r7
 8006b96:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fc feb7 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006baa:	e882 0003 	stmia.w	r2, {r0, r1}

        const char* thread = module["Thread"];
 8006bae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8006d24 <_Z11loadModulesv+0x1e8>)
 8006bb4:	495a      	ldr	r1, [pc, #360]	@ (8006d20 <_Z11loadModulesv+0x1e4>)
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fc feb9 	bl	800392e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006bbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fc fed9 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8006bc6:	6778      	str	r0, [r7, #116]	@ 0x74
        const char* type = module["Type"];
 8006bc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006bcc:	4a56      	ldr	r2, [pc, #344]	@ (8006d28 <_Z11loadModulesv+0x1ec>)
 8006bce:	4954      	ldr	r1, [pc, #336]	@ (8006d20 <_Z11loadModulesv+0x1e4>)
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd1c 	bl	800760e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006bd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fc fecc 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8006be0:	6738      	str	r0, [r7, #112]	@ 0x70

        if (!strcmp(thread,"Base"))
 8006be2:	4952      	ldr	r1, [pc, #328]	@ (8006d2c <_Z11loadModulesv+0x1f0>)
 8006be4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006be6:	f7f9 fb7b 	bl	80002e0 <strcmp>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d115      	bne.n	8006c1c <_Z11loadModulesv+0xe0>
        {
            printf("\nBase thread object\n");
 8006bf0:	484f      	ldr	r0, [pc, #316]	@ (8006d30 <_Z11loadModulesv+0x1f4>)
 8006bf2:	f014 fa4d 	bl	801b090 <puts>

            if (!strcmp(type,"Stepgen"))
 8006bf6:	494f      	ldr	r1, [pc, #316]	@ (8006d34 <_Z11loadModulesv+0x1f8>)
 8006bf8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006bfa:	f7f9 fb71 	bl	80002e0 <strcmp>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d067      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createStepgen();
            }
            else if (!strcmp(type,"Encoder"))
 8006c04:	494c      	ldr	r1, [pc, #304]	@ (8006d38 <_Z11loadModulesv+0x1fc>)
 8006c06:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c08:	f7f9 fb6a 	bl	80002e0 <strcmp>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d060      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createEncoder();
            }
            else if (!strcmp(type,"RCServo"))
 8006c12:	494a      	ldr	r1, [pc, #296]	@ (8006d3c <_Z11loadModulesv+0x200>)
 8006c14:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c16:	f7f9 fb63 	bl	80002e0 <strcmp>
 8006c1a:	e05b      	b.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createRCServo();
            }
        }
        else if (!strcmp(thread,"Servo"))
 8006c1c:	4948      	ldr	r1, [pc, #288]	@ (8006d40 <_Z11loadModulesv+0x204>)
 8006c1e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006c20:	f7f9 fb5e 	bl	80002e0 <strcmp>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d138      	bne.n	8006c9c <_Z11loadModulesv+0x160>
        {
            printf("\nServo thread object\n");
 8006c2a:	4846      	ldr	r0, [pc, #280]	@ (8006d44 <_Z11loadModulesv+0x208>)
 8006c2c:	f014 fa30 	bl	801b090 <puts>

            if (!strcmp(type, "eStop"))
 8006c30:	4945      	ldr	r1, [pc, #276]	@ (8006d48 <_Z11loadModulesv+0x20c>)
 8006c32:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c34:	f7f9 fb54 	bl	80002e0 <strcmp>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d04a      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createEStop();
            }
            else if (!strcmp(type, "Reset Pin"))
 8006c3e:	4943      	ldr	r1, [pc, #268]	@ (8006d4c <_Z11loadModulesv+0x210>)
 8006c40:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c42:	f7f9 fb4d 	bl	80002e0 <strcmp>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d043      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createResetPin();
            }
            else if (!strcmp(type, "Blink"))
 8006c4c:	4940      	ldr	r1, [pc, #256]	@ (8006d50 <_Z11loadModulesv+0x214>)
 8006c4e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c50:	f7f9 fb46 	bl	80002e0 <strcmp>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d03c      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createBlink();
            }
            else if (!strcmp(type,"Digital Pin"))
 8006c5a:	493e      	ldr	r1, [pc, #248]	@ (8006d54 <_Z11loadModulesv+0x218>)
 8006c5c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c5e:	f7f9 fb3f 	bl	80002e0 <strcmp>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d035      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createDigitalPin();
            }
            else if (!strcmp(type,"PWM"))
 8006c68:	493b      	ldr	r1, [pc, #236]	@ (8006d58 <_Z11loadModulesv+0x21c>)
 8006c6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c6c:	f7f9 fb38 	bl	80002e0 <strcmp>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02e      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createPWM();
            }
            else if (!strcmp(type,"Temperature"))
 8006c76:	4939      	ldr	r1, [pc, #228]	@ (8006d5c <_Z11loadModulesv+0x220>)
 8006c78:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c7a:	f7f9 fb31 	bl	80002e0 <strcmp>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d027      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createTemperature();
            }
            else if (!strcmp(type,"Switch"))
 8006c84:	4936      	ldr	r1, [pc, #216]	@ (8006d60 <_Z11loadModulesv+0x224>)
 8006c86:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c88:	f7f9 fb2a 	bl	80002e0 <strcmp>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d020      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createSwitch();
            }
            else if (!strcmp(type,"QEI"))
 8006c92:	4934      	ldr	r1, [pc, #208]	@ (8006d64 <_Z11loadModulesv+0x228>)
 8006c94:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006c96:	f7f9 fb23 	bl	80002e0 <strcmp>
 8006c9a:	e01b      	b.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createQEI();
            }
        }
        else if (!strcmp(thread,"On load"))
 8006c9c:	4932      	ldr	r1, [pc, #200]	@ (8006d68 <_Z11loadModulesv+0x22c>)
 8006c9e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006ca0:	f7f9 fb1e 	bl	80002e0 <strcmp>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d114      	bne.n	8006cd4 <_Z11loadModulesv+0x198>
        {
            printf("\nOn load - run once module\n");
 8006caa:	4830      	ldr	r0, [pc, #192]	@ (8006d6c <_Z11loadModulesv+0x230>)
 8006cac:	f014 f9f0 	bl	801b090 <puts>

            if (!strcmp(type,"Motor Power"))
 8006cb0:	492f      	ldr	r1, [pc, #188]	@ (8006d70 <_Z11loadModulesv+0x234>)
 8006cb2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006cb4:	f7f9 fb14 	bl	80002e0 <strcmp>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createMotorPower();
            }
            else if (!strcmp(type,"TMC2208"))
 8006cbe:	492d      	ldr	r1, [pc, #180]	@ (8006d74 <_Z11loadModulesv+0x238>)
 8006cc0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006cc2:	f7f9 fb0d 	bl	80002e0 <strcmp>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <_Z11loadModulesv+0x198>
            {
                //createTMC2208();
            }
            else if (!strcmp(type,"TMC2209"))
 8006ccc:	492a      	ldr	r1, [pc, #168]	@ (8006d78 <_Z11loadModulesv+0x23c>)
 8006cce:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006cd0:	f7f9 fb06 	bl	80002e0 <strcmp>
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fa feb3 	bl	8001a44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8006cde:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006ce2:	f107 0214 	add.w	r2, r7, #20
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fa ff02 	bl	8001af2 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8006cee:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fa fe93 	bl	8001a24 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f47f af3e 	bne.w	8006b82 <_Z11loadModulesv+0x46>
 8006d06:	e000      	b.n	8006d0a <_Z11loadModulesv+0x1ce>
    if (configError) return;
 8006d08:	bf00      	nop
            {
                //createTMC2209();
            }
        }
    }
}
 8006d0a:	377c      	adds	r7, #124	@ 0x7c
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	2400030f 	.word	0x2400030f
 8006d14:	0801c440 	.word	0x0801c440
 8006d18:	0801c36c 	.word	0x0801c36c
 8006d1c:	24000378 	.word	0x24000378
 8006d20:	240003c0 	.word	0x240003c0
 8006d24:	0801c374 	.word	0x0801c374
 8006d28:	0801c454 	.word	0x0801c454
 8006d2c:	0801c37c 	.word	0x0801c37c
 8006d30:	0801c45c 	.word	0x0801c45c
 8006d34:	0801c470 	.word	0x0801c470
 8006d38:	0801c478 	.word	0x0801c478
 8006d3c:	0801c480 	.word	0x0801c480
 8006d40:	0801c384 	.word	0x0801c384
 8006d44:	0801c488 	.word	0x0801c488
 8006d48:	0801c4a0 	.word	0x0801c4a0
 8006d4c:	0801c4a8 	.word	0x0801c4a8
 8006d50:	0801c4b4 	.word	0x0801c4b4
 8006d54:	0801c4bc 	.word	0x0801c4bc
 8006d58:	0801c4c8 	.word	0x0801c4c8
 8006d5c:	0801c4cc 	.word	0x0801c4cc
 8006d60:	0801c4d8 	.word	0x0801c4d8
 8006d64:	0801c4e0 	.word	0x0801c4e0
 8006d68:	0801c4e4 	.word	0x0801c4e4
 8006d6c:	0801c4ec 	.word	0x0801c4ec
 8006d70:	0801c508 	.word	0x0801c508
 8006d74:	0801c514 	.word	0x0801c514
 8006d78:	0801c51c 	.word	0x0801c51c

08006d7c <_Z15debugThreadHighv>:


void debugThreadHigh()
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b091      	sub	sp, #68	@ 0x44
 8006d80:	af00      	add	r7, sp, #0
    Module* debugOnB = new Debug(BASE_PIN, 1);
 8006d82:	201c      	movs	r0, #28
 8006d84:	f013 fd94 	bl	801a8b0 <_Znwj>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461c      	mov	r4, r3
 8006d8c:	f107 0318 	add.w	r3, r7, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f013 fd9e 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8006d96:	f107 0218 	add.w	r2, r7, #24
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	491d      	ldr	r1, [pc, #116]	@ (8006e14 <_Z15debugThreadHighv+0x98>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fc fd64 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006da4:	463b      	mov	r3, r7
 8006da6:	2201      	movs	r2, #1
 8006da8:	4619      	mov	r1, r3
 8006daa:	4620      	mov	r0, r4
 8006dac:	f003 fe4c 	bl	800aa48 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8006db0:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8006db2:	463b      	mov	r3, r7
 8006db4:	4618      	mov	r0, r3
 8006db6:	f013 fe24 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006dba:	f107 0318 	add.w	r3, r7, #24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f013 fd88 	bl	801a8d4 <_ZNSaIcED1Ev>
    //baseThread->registerModule(debugOnB);

    Module* debugOnS = new Debug(SERVO_PIN, 1);
 8006dc4:	201c      	movs	r0, #28
 8006dc6:	f013 fd73 	bl	801a8b0 <_Znwj>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	461c      	mov	r4, r3
 8006dce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f013 fd7d 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8006dd8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006ddc:	f107 031c 	add.w	r3, r7, #28
 8006de0:	490d      	ldr	r1, [pc, #52]	@ (8006e18 <_Z15debugThreadHighv+0x9c>)
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fc fd42 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006de8:	f107 031c 	add.w	r3, r7, #28
 8006dec:	2201      	movs	r2, #1
 8006dee:	4619      	mov	r1, r3
 8006df0:	4620      	mov	r0, r4
 8006df2:	f003 fe29 	bl	800aa48 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8006df6:	63bc      	str	r4, [r7, #56]	@ 0x38
 8006df8:	f107 031c 	add.w	r3, r7, #28
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f013 fe00 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e06:	4618      	mov	r0, r3
 8006e08:	f013 fd64 	bl	801a8d4 <_ZNSaIcED1Ev>
    //servoThread->registerModule(debugOnS);

    //Module* debugOnC = new Debug("PE_6", 1);
    //commsThread->registerModule(debugOnC);
}
 8006e0c:	bf00      	nop
 8006e0e:	3744      	adds	r7, #68	@ 0x44
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd90      	pop	{r4, r7, pc}
 8006e14:	0801c524 	.word	0x0801c524
 8006e18:	0801c52c 	.word	0x0801c52c

08006e1c <_Z14debugThreadLowv>:

void debugThreadLow()
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b091      	sub	sp, #68	@ 0x44
 8006e20:	af00      	add	r7, sp, #0
    Module* debugOffB = new Debug("PE_9", 0);
 8006e22:	201c      	movs	r0, #28
 8006e24:	f013 fd44 	bl	801a8b0 <_Znwj>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461c      	mov	r4, r3
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f013 fd4e 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8006e36:	f107 0218 	add.w	r2, r7, #24
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	491d      	ldr	r1, [pc, #116]	@ (8006eb4 <_Z14debugThreadLowv+0x98>)
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fc fd14 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006e44:	463b      	mov	r3, r7
 8006e46:	2200      	movs	r2, #0
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f003 fdfc 	bl	800aa48 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8006e50:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8006e52:	463b      	mov	r3, r7
 8006e54:	4618      	mov	r0, r3
 8006e56:	f013 fdd4 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e5a:	f107 0318 	add.w	r3, r7, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f013 fd38 	bl	801a8d4 <_ZNSaIcED1Ev>
    //baseThread->registerModule(debugOffB);

    Module* debugOffS = new Debug("PE_10", 0);
 8006e64:	201c      	movs	r0, #28
 8006e66:	f013 fd23 	bl	801a8b0 <_Znwj>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461c      	mov	r4, r3
 8006e6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e72:	4618      	mov	r0, r3
 8006e74:	f013 fd2d 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8006e78:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006e7c:	f107 031c 	add.w	r3, r7, #28
 8006e80:	490d      	ldr	r1, [pc, #52]	@ (8006eb8 <_Z14debugThreadLowv+0x9c>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fc fcf2 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4620      	mov	r0, r4
 8006e92:	f003 fdd9 	bl	800aa48 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8006e96:	63bc      	str	r4, [r7, #56]	@ 0x38
 8006e98:	f107 031c 	add.w	r3, r7, #28
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f013 fdb0 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ea2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f013 fd14 	bl	801a8d4 <_ZNSaIcED1Ev>
    //servoThread->registerModule(debugOffS);

    //commsThread->startThread();
    //Module* debugOffC = new Debug("PE_6", 0);
    //commsThread->registerModule(debugOffC);
}
 8006eac:	bf00      	nop
 8006eae:	3744      	adds	r7, #68	@ 0x44
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}
 8006eb4:	0801c524 	.word	0x0801c524
 8006eb8:	0801c52c 	.word	0x0801c52c

08006ebc <main>:

int main(void)
{
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af02      	add	r7, sp, #8
	MPU_Config();
 8006ec2:	f000 fb45 	bl	8007550 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8006ec6:	4b9a      	ldr	r3, [pc, #616]	@ (8007130 <main+0x274>)
 8006ec8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006ecc:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8006ece:	f006 ff53 	bl	800dd78 <HAL_Init>
	SystemClock_Config();
 8006ed2:	f000 f953 	bl	800717c <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8006ed6:	f000 fa1b 	bl	8007310 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006eda:	f3bf 8f4f 	dsb	sy
}
 8006ede:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ee0:	f3bf 8f6f 	isb	sy
}
 8006ee4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8006ee6:	4b92      	ldr	r3, [pc, #584]	@ (8007130 <main+0x274>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006eee:	f3bf 8f4f 	dsb	sy
}
 8006ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8006efa:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006efc:	4b8c      	ldr	r3, [pc, #560]	@ (8007130 <main+0x274>)
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d11b      	bne.n	8006f4a <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f12:	f3bf 8f4f 	dsb	sy
}
 8006f16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f18:	f3bf 8f6f 	isb	sy
}
 8006f1c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006f1e:	4b84      	ldr	r3, [pc, #528]	@ (8007130 <main+0x274>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006f26:	f3bf 8f4f 	dsb	sy
}
 8006f2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f2c:	f3bf 8f6f 	isb	sy
}
 8006f30:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006f32:	4b7f      	ldr	r3, [pc, #508]	@ (8007130 <main+0x274>)
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	4a7e      	ldr	r2, [pc, #504]	@ (8007130 <main+0x274>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f3e:	f3bf 8f4f 	dsb	sy
}
 8006f42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f44:	f3bf 8f6f 	isb	sy
}
 8006f48:	e000      	b.n	8006f4c <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006f4a:	bf00      	nop
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006f4c:	4b79      	ldr	r3, [pc, #484]	@ (8007134 <main+0x278>)
 8006f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f52:	4a78      	ldr	r2, [pc, #480]	@ (8007134 <main+0x278>)
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f5c:	4b75      	ldr	r3, [pc, #468]	@ (8007134 <main+0x278>)
 8006f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 8006f6a:	f000 fa95 	bl	8007498 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8006f6e:	f000 fa33 	bl	80073d8 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8006f72:	f000 fa05 	bl	8007380 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8006f76:	f011 f86d 	bl	8018054 <MX_FATFS_Init>

	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
	prevState = ST_RESET;
 8006f7e:	2305      	movs	r3, #5
 8006f80:	73bb      	strb	r3, [r7, #14]

	Remora *remora = new Remora();
 8006f82:	2018      	movs	r0, #24
 8006f84:	f013 fc94 	bl	801a8b0 <_Znwj>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 fe15 	bl	8007bbc <_ZN6RemoraC1Ev>
 8006f92:	607c      	str	r4, [r7, #4]

	initComms();
 8006f94:	f7ff fb34 	bl	8006600 <_Z9initCommsv>

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8006f98:	4b67      	ldr	r3, [pc, #412]	@ (8007138 <main+0x27c>)
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4866      	ldr	r0, [pc, #408]	@ (800713c <main+0x280>)
 8006fa4:	f014 f804 	bl	801afb0 <iprintf>

	while (1)
	{
		switch(currentState){
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b06      	cmp	r3, #6
 8006fac:	f200 80bc 	bhi.w	8007128 <main+0x26c>
 8006fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <main+0xfc>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fd5 	.word	0x08006fd5
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	08007059 	.word	0x08007059
 8006fc4:	08007081 	.word	0x08007081
 8006fc8:	080070c1 	.word	0x080070c1
 8006fcc:	080070d9 	.word	0x080070d9
 8006fd0:	0800711d 	.word	0x0800711d
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8006fd4:	7bfa      	ldrb	r2, [r7, #15]
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d002      	beq.n	8006fe2 <main+0x126>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8006fdc:	4858      	ldr	r0, [pc, #352]	@ (8007140 <main+0x284>)
 8006fde:	f014 f857 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	73bb      	strb	r3, [r7, #14]

			              readJsonConfig();
 8006fe6:	f7ff fb2d 	bl	8006644 <_Z14readJsonConfigv>
			              deserialiseJSON();
 8006fea:	f7ff fbf3 	bl	80067d4 <_Z15deserialiseJSONv>
			              countModules();
 8006fee:	f7ff fc4d 	bl	800688c <_Z12countModulesv>
			              configThreads();
 8006ff2:	f7ff fcf7 	bl	80069e4 <_Z13configThreadsv>
			              createThreads();
 8006ff6:	f7ff fad5 	bl	80065a4 <_Z13createThreadsv>
			              if (DEBUG_THREADS) debugThreadHigh();
 8006ffa:	f7ff febf 	bl	8006d7c <_Z15debugThreadHighv>
			              loadModules();
 8006ffe:	f7ff fd9d 	bl	8006b3c <_Z11loadModulesv>
			              if (DEBUG_THREADS) debugThreadLow();
 8007002:	f7ff ff0b 	bl	8006e1c <_Z14debugThreadLowv>

			              currentState = ST_START;
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
			              break;
 800700a:	e08d      	b.n	8007128 <main+0x26c>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 800700c:	7bfa      	ldrb	r2, [r7, #15]
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	429a      	cmp	r2, r3
 8007012:	d002      	beq.n	800701a <main+0x15e>
			              {
			                  printf("\n## Entering START state\n");
 8007014:	484b      	ldr	r0, [pc, #300]	@ (8007144 <main+0x288>)
 8007016:	f014 f83b 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	73bb      	strb	r3, [r7, #14]

			              if (!threadsRunning)
 800701e:	4b4a      	ldr	r3, [pc, #296]	@ (8007148 <main+0x28c>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f083 0301 	eor.w	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d012      	beq.n	8007052 <main+0x196>
			              {
			                  // Start the threads
			                  printf("\nStarting the SERVO thread\n");
 800702c:	4847      	ldr	r0, [pc, #284]	@ (800714c <main+0x290>)
 800702e:	f014 f82f 	bl	801b090 <puts>
			                  servoThread->startThread();
 8007032:	4b47      	ldr	r3, [pc, #284]	@ (8007150 <main+0x294>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f006 f8e8 	bl	800d20c <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the BASE thread\n");
 800703c:	4845      	ldr	r0, [pc, #276]	@ (8007154 <main+0x298>)
 800703e:	f014 f827 	bl	801b090 <puts>
			                  baseThread->startThread();
 8007042:	4b45      	ldr	r3, [pc, #276]	@ (8007158 <main+0x29c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f006 f8e0 	bl	800d20c <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 800704c:	4b3e      	ldr	r3, [pc, #248]	@ (8007148 <main+0x28c>)
 800704e:	2201      	movs	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 8007052:	2302      	movs	r3, #2
 8007054:	73fb      	strb	r3, [r7, #15]

			              break;
 8007056:	e067      	b.n	8007128 <main+0x26c>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <main+0x1aa>
			              {
			                  printf("\n## Entering IDLE state\n");
 8007060:	483e      	ldr	r0, [pc, #248]	@ (800715c <main+0x2a0>)
 8007062:	f014 f815 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	73bb      	strb	r3, [r7, #14]

			              //wait for data before changing to running state
			              if (comms->getStatus())
 800706a:	4b3d      	ldr	r3, [pc, #244]	@ (8007160 <main+0x2a4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f004 fff6 	bl	800c060 <_ZN11RemoraComms9getStatusEv>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d053      	beq.n	8007122 <main+0x266>
			              {
			                  currentState = ST_RUNNING;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
			              }

			              break;
 800707e:	e050      	b.n	8007122 <main+0x266>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 8007080:	7bfa      	ldrb	r2, [r7, #15]
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	429a      	cmp	r2, r3
 8007086:	d002      	beq.n	800708e <main+0x1d2>
			              {
			                  printf("\n## Entering RUNNING state\n");
 8007088:	4836      	ldr	r0, [pc, #216]	@ (8007164 <main+0x2a8>)
 800708a:	f014 f801 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	73bb      	strb	r3, [r7, #14]

			              if (comms->getStatus() == false)
 8007092:	4b33      	ldr	r3, [pc, #204]	@ (8007160 <main+0x2a4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f004 ffe2 	bl	800c060 <_ZN11RemoraComms9getStatusEv>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <main+0x1f4>
			              {
			                  currentState = ST_RESET;
 80070ac:	2305      	movs	r3, #5
 80070ae:	73fb      	strb	r3, [r7, #15]
			              }

			              if (PRUreset)
 80070b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007168 <main+0x2ac>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d035      	beq.n	8007126 <main+0x26a>
			              {
			                  currentState = ST_WDRESET;
 80070ba:	2306      	movs	r3, #6
 80070bc:	73fb      	strb	r3, [r7, #15]
			              }

			              break;
 80070be:	e032      	b.n	8007126 <main+0x26a>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d002      	beq.n	80070ce <main+0x212>
			              {
			                  printf("\n## Entering STOP state\n");
 80070c8:	4828      	ldr	r0, [pc, #160]	@ (800716c <main+0x2b0>)
 80070ca:	f013 ffe1 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	73bb      	strb	r3, [r7, #14]


			              currentState = ST_STOP;
 80070d2:	2304      	movs	r3, #4
 80070d4:	73fb      	strb	r3, [r7, #15]
			              break;
 80070d6:	e027      	b.n	8007128 <main+0x26c>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d002      	beq.n	80070e6 <main+0x22a>
			              {
			                  printf("\n## Entering RESET state\n");
 80070e0:	4823      	ldr	r0, [pc, #140]	@ (8007170 <main+0x2b4>)
 80070e2:	f013 ffd5 	bl	801b090 <puts>
			              }
			              prevState = currentState;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	73bb      	strb	r3, [r7, #14]

			              // set all of the rxData buffer to 0
			              printf("   Resetting rxBuffer\n");
 80070ea:	4822      	ldr	r0, [pc, #136]	@ (8007174 <main+0x2b8>)
 80070ec:	f013 ffd0 	bl	801b090 <puts>
			              {
							  int n = Config::DATA_BUFF_SIZE;
 80070f0:	2340      	movs	r3, #64	@ 0x40
 80070f2:	60bb      	str	r3, [r7, #8]
							  while(n-- > 0)
 80070f4:	e005      	b.n	8007102 <main+0x246>
							  {
								  ptrRxData->rxBuffer[n] = 0;
 80070f6:	4b20      	ldr	r3, [pc, #128]	@ (8007178 <main+0x2bc>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
							  while(n-- > 0)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	1e5a      	subs	r2, r3, #1
 8007106:	60ba      	str	r2, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	bfcc      	ite	gt
 800710c:	2301      	movgt	r3, #1
 800710e:	2300      	movle	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ef      	bne.n	80070f6 <main+0x23a>
							  }
			              }

			              currentState = ST_IDLE;
 8007116:	2302      	movs	r3, #2
 8007118:	73fb      	strb	r3, [r7, #15]
			              break;
 800711a:	e005      	b.n	8007128 <main+0x26c>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 800711c:	f007 f807 	bl	800e12e <HAL_NVIC_SystemReset>
			              break;
 8007120:	e002      	b.n	8007128 <main+0x26c>
			              break;
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <main+0x26c>
			              break;
 8007126:	bf00      	nop
			  }
		commsTasks();
 8007128:	f7ff fa80 	bl	800662c <_Z10commsTasksv>
	}
 800712c:	e73c      	b.n	8006fa8 <main+0xec>
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00
 8007134:	58024400 	.word	0x58024400
 8007138:	0801c560 	.word	0x0801c560
 800713c:	0801c534 	.word	0x0801c534
 8007140:	0801c56c 	.word	0x0801c56c
 8007144:	0801c588 	.word	0x0801c588
 8007148:	24000310 	.word	0x24000310
 800714c:	0801c5a4 	.word	0x0801c5a4
 8007150:	24000314 	.word	0x24000314
 8007154:	0801c5c0 	.word	0x0801c5c0
 8007158:	24000318 	.word	0x24000318
 800715c:	0801c5dc 	.word	0x0801c5dc
 8007160:	240003c8 	.word	0x240003c8
 8007164:	0801c5f4 	.word	0x0801c5f4
 8007168:	2400030c 	.word	0x2400030c
 800716c:	0801c610 	.word	0x0801c610
 8007170:	0801c628 	.word	0x0801c628
 8007174:	0801c644 	.word	0x0801c644
 8007178:	24000028 	.word	0x24000028

0800717c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b09e      	sub	sp, #120	@ 0x78
 8007180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007186:	224c      	movs	r2, #76	@ 0x4c
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f014 f87a 	bl	801b284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	2220      	movs	r2, #32
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f014 f873 	bl	801b284 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800719e:	2002      	movs	r0, #2
 80071a0:	f009 fd58 	bl	8010c54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	4b56      	ldr	r3, [pc, #344]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a55      	ldr	r2, [pc, #340]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071b4:	4b53      	ldr	r3, [pc, #332]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	4b52      	ldr	r3, [pc, #328]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	4a51      	ldr	r2, [pc, #324]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 80071c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071c8:	6193      	str	r3, [r2, #24]
 80071ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80071d6:	bf00      	nop
 80071d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e4:	bf14      	ite	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	2300      	moveq	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f3      	bne.n	80071d8 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f0:	4b46      	ldr	r3, [pc, #280]	@ (800730c <_Z18SystemClock_Configv+0x190>)
 80071f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071f6:	4a45      	ldr	r2, [pc, #276]	@ (800730c <_Z18SystemClock_Configv+0x190>)
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007200:	4b42      	ldr	r3, [pc, #264]	@ (800730c <_Z18SystemClock_Configv+0x190>)
 8007202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800720e:	2300      	movs	r3, #0
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4b3d      	ldr	r3, [pc, #244]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	4a3c      	ldr	r2, [pc, #240]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 8007218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800721c:	6193      	str	r3, [r2, #24]
 800721e:	4b3a      	ldr	r3, [pc, #232]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4b36      	ldr	r3, [pc, #216]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	4a35      	ldr	r2, [pc, #212]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007234:	4b33      	ldr	r3, [pc, #204]	@ (8007304 <_Z18SystemClock_Configv+0x188>)
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007240:	bf00      	nop
 8007242:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <_Z18SystemClock_Configv+0x18c>)
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800724a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f3      	bne.n	8007242 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800725a:	4b2c      	ldr	r3, [pc, #176]	@ (800730c <_Z18SystemClock_Configv+0x190>)
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	4a2a      	ldr	r2, [pc, #168]	@ (800730c <_Z18SystemClock_Configv+0x190>)
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800726a:	2301      	movs	r3, #1
 800726c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800726e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007274:	2302      	movs	r3, #2
 8007276:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007278:	2302      	movs	r3, #2
 800727a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800727c:	2305      	movs	r3, #5
 800727e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007280:	23c0      	movs	r3, #192	@ 0xc0
 8007282:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007284:	2302      	movs	r3, #2
 8007286:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007288:	2304      	movs	r3, #4
 800728a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800728c:	2302      	movs	r3, #2
 800728e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007290:	2308      	movs	r3, #8
 8007292:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007294:	2300      	movs	r3, #0
 8007296:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800729c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80072a0:	4618      	mov	r0, r3
 80072a2:	f009 fd11 	bl	8010cc8 <HAL_RCC_OscConfig>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80072b6:	f000 f993 	bl	80075e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072ba:	233f      	movs	r3, #63	@ 0x3f
 80072bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072be:	2303      	movs	r3, #3
 80072c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80072c6:	2308      	movs	r3, #8
 80072c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80072ca:	2340      	movs	r3, #64	@ 0x40
 80072cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80072ce:	2340      	movs	r3, #64	@ 0x40
 80072d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80072d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80072d8:	2340      	movs	r3, #64	@ 0x40
 80072da:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	2104      	movs	r1, #4
 80072e2:	4618      	mov	r0, r3
 80072e4:	f00a f94a 	bl	801157c <HAL_RCC_ClockConfig>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bf14      	ite	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	2300      	moveq	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 80072f8:	f000 f972 	bl	80075e0 <Error_Handler>
  }
}
 80072fc:	bf00      	nop
 80072fe:	3778      	adds	r7, #120	@ 0x78
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	58000400 	.word	0x58000400
 8007308:	58024800 	.word	0x58024800
 800730c:	58024400 	.word	0x58024400

08007310 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b0b0      	sub	sp, #192	@ 0xc0
 8007314:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007316:	463b      	mov	r3, r7
 8007318:	22c0      	movs	r2, #192	@ 0xc0
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f013 ffb1 	bl	801b284 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8007322:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800732e:	2302      	movs	r3, #2
 8007330:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8007332:	230c      	movs	r3, #12
 8007334:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800733a:	230a      	movs	r3, #10
 800733c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800733e:	2302      	movs	r3, #2
 8007340:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8007342:	23c0      	movs	r3, #192	@ 0xc0
 8007344:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007346:	2320      	movs	r3, #32
 8007348:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800734e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007352:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8007354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007358:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800735a:	463b      	mov	r3, r7
 800735c:	4618      	mov	r0, r3
 800735e:	f00a fc99 	bl	8011c94 <HAL_RCCEx_PeriphCLKConfig>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf14      	ite	ne
 8007368:	2301      	movne	r3, #1
 800736a:	2300      	moveq	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8007372:	f000 f935 	bl	80075e0 <Error_Handler>
  }
}
 8007376:	bf00      	nop
 8007378:	37c0      	adds	r7, #192	@ 0xc0
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007384:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007386:	4a12      	ldr	r2, [pc, #72]	@ (80073d0 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8007388:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800738a:	4b10      	ldr	r3, [pc, #64]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800738c:	2200      	movs	r2, #0
 800738e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8007390:	4b0e      	ldr	r3, [pc, #56]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007392:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007396:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007398:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800739a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800739e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80073a0:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80073a6:	4b09      	ldr	r3, [pc, #36]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80073a8:	2208      	movs	r2, #8
 80073aa:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80073ac:	4807      	ldr	r0, [pc, #28]	@ (80073cc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80073ae:	f00d f96f 	bl	8014690 <HAL_SD_Init>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80073c2:	4804      	ldr	r0, [pc, #16]	@ (80073d4 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80073c4:	f013 fe64 	bl	801b090 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80073c8:	bf00      	nop
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	240003cc 	.word	0x240003cc
 80073d0:	52007000 	.word	0x52007000
 80073d4:	0801c65c 	.word	0x0801c65c

080073d8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80073dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073de:	4a2d      	ldr	r2, [pc, #180]	@ (8007494 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80073e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::PC_BAUD;
 80073e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80073e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80073ea:	4b29      	ldr	r3, [pc, #164]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80073f0:	4b27      	ldr	r3, [pc, #156]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80073f6:	4b26      	ldr	r3, [pc, #152]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80073fc:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80073fe:	220c      	movs	r2, #12
 8007400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007402:	4b23      	ldr	r3, [pc, #140]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007404:	2200      	movs	r2, #0
 8007406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007408:	4b21      	ldr	r3, [pc, #132]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800740a:	2200      	movs	r2, #0
 800740c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800740e:	4b20      	ldr	r3, [pc, #128]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007410:	2200      	movs	r2, #0
 8007412:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007414:	4b1e      	ldr	r3, [pc, #120]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007416:	2200      	movs	r2, #0
 8007418:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800741a:	4b1d      	ldr	r3, [pc, #116]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800741c:	2200      	movs	r2, #0
 800741e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007420:	481b      	ldr	r0, [pc, #108]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007422:	f00e fee2 	bl	80161ea <HAL_UART_Init>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2301      	movne	r3, #1
 800742e:	2300      	moveq	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8007436:	f000 f8d3 	bl	80075e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800743a:	2100      	movs	r1, #0
 800743c:	4814      	ldr	r0, [pc, #80]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800743e:	f00f ff74 	bl	801732a <HAL_UARTEx_SetTxFifoThreshold>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8007452:	f000 f8c5 	bl	80075e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007456:	2100      	movs	r1, #0
 8007458:	480d      	ldr	r0, [pc, #52]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800745a:	f00f ffa4 	bl	80173a6 <HAL_UARTEx_SetRxFifoThreshold>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800746e:	f000 f8b7 	bl	80075e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007472:	4807      	ldr	r0, [pc, #28]	@ (8007490 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007474:	f00f ff20 	bl	80172b8 <HAL_UARTEx_DisableFifoMode>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8007488:	f000 f8aa 	bl	80075e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	24000448 	.word	0x24000448
 8007494:	40011000 	.word	0x40011000

08007498 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	@ 0x28
 800749c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	609a      	str	r2, [r3, #8]
 80074aa:	60da      	str	r2, [r3, #12]
 80074ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074ae:	4b26      	ldr	r3, [pc, #152]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074b4:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074be:	4b22      	ldr	r3, [pc, #136]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074d4:	f043 0304 	orr.w	r3, r3, #4
 80074d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ea:	4b17      	ldr	r3, [pc, #92]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f0:	4a15      	ldr	r2, [pc, #84]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074fa:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 80074fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	60bb      	str	r3, [r7, #8]
 8007506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007508:	4b0f      	ldr	r3, [pc, #60]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 800750a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800750e:	4a0e      	ldr	r2, [pc, #56]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007518:	4b0b      	ldr	r3, [pc, #44]	@ (8007548 <_ZL12MX_GPIO_Initv+0xb0>)
 800751a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007526:	2310      	movs	r3, #16
 8007528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007532:	f107 0314 	add.w	r3, r7, #20
 8007536:	4619      	mov	r1, r3
 8007538:	4804      	ldr	r0, [pc, #16]	@ (800754c <_ZL12MX_GPIO_Initv+0xb4>)
 800753a:	f009 f9c1 	bl	80108c0 <HAL_GPIO_Init>

}
 800753e:	bf00      	nop
 8007540:	3728      	adds	r7, #40	@ 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
 800754c:	58020800 	.word	0x58020800

08007550 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007556:	463b      	mov	r3, r7
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007562:	f006 fdf5 	bl	800e150 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007566:	2301      	movs	r3, #1
 8007568:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800756a:	2300      	movs	r3, #0
 800756c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007572:	231f      	movs	r3, #31
 8007574:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007576:	2387      	movs	r3, #135	@ 0x87
 8007578:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800757a:	2300      	movs	r3, #0
 800757c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800757e:	2300      	movs	r3, #0
 8007580:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007582:	2301      	movs	r3, #1
 8007584:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007586:	2301      	movs	r3, #1
 8007588:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800758a:	2300      	movs	r3, #0
 800758c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007592:	463b      	mov	r3, r7
 8007594:	4618      	mov	r0, r3
 8007596:	f006 fe13 	bl	800e1c0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800759a:	2301      	movs	r3, #1
 800759c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800759e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80075a2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80075a4:	2307      	movs	r3, #7
 80075a6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80075a8:	2303      	movs	r3, #3
 80075aa:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80075b8:	2301      	movs	r3, #1
 80075ba:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80075bc:	2300      	movs	r3, #0
 80075be:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80075c0:	2300      	movs	r3, #0
 80075c2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80075c8:	463b      	mov	r3, r7
 80075ca:	4618      	mov	r0, r3
 80075cc:	f006 fdf8 	bl	800e1c0 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80075d0:	2004      	movs	r0, #4
 80075d2:	f006 fdd5 	bl	800e180 <HAL_MPU_Enable>

}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 80075e4:	4803      	ldr	r0, [pc, #12]	@ (80075f4 <Error_Handler+0x14>)
 80075e6:	f013 fce3 	bl	801afb0 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80075ea:	b672      	cpsid	i
}
 80075ec:	bf00      	nop

  __disable_irq();
  while (1)
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <Error_Handler+0xe>
 80075f2:	bf00      	nop
 80075f4:	0801c66c 	.word	0x0801c66c

080075f8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  }
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800760e:	b580      	push	{r7, lr}
 8007610:	b08c      	sub	sp, #48	@ 0x30
 8007612:	af02      	add	r7, sp, #8
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007624:	e883 0003 	stmia.w	r3, {r0, r1}
 8007628:	f107 031c 	add.w	r3, r7, #28
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f812 	bl	8007658 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007634:	466a      	mov	r2, sp
 8007636:	f107 0320 	add.w	r3, r7, #32
 800763a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800763e:	e882 0003 	stmia.w	r2, {r0, r1}
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f107 0214 	add.w	r2, r7, #20
 8007648:	ca06      	ldmia	r2, {r1, r2}
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7fc fb03 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8007662:	6838      	ldr	r0, [r7, #0]
 8007664:	f000 f80b 	bl	800767e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8007668:	4602      	mov	r2, r0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f810 	bl	8007694 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 8007674:	bf00      	nop
}
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007686:	687b      	ldr	r3, [r7, #4]
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800769e:	2301      	movs	r3, #1
 80076a0:	2204      	movs	r2, #4
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7f9 fd41 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d130      	bne.n	8007726 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d12b      	bne.n	8007726 <_Z41__static_initialization_and_destruction_0ii+0x72>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 80076ce:	481f      	ldr	r0, [pc, #124]	@ (800774c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80076d0:	f7fe fe87 	bl	80063e2 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 80076d4:	481e      	ldr	r0, [pc, #120]	@ (8007750 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80076d6:	f7fe fe4a 	bl	800636e <_ZN8rxData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;	// DMA SPI double buffers
 80076da:	481e      	ldr	r0, [pc, #120]	@ (8007754 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80076dc:	f7fe ff69 	bl	80065b2 <_ZN14DMA_RxBuffer_tC1Ev>
std::string 		strJson;
 80076e0:	481d      	ldr	r0, [pc, #116]	@ (8007758 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80076e2:	f013 f987 	bl	801a9f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
JsonDocument 		doc;
 80076e6:	f7f9 fca1 	bl	800102c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 80076ea:	4603      	mov	r3, r0
 80076ec:	4619      	mov	r1, r3
 80076ee:	481b      	ldr	r0, [pc, #108]	@ (800775c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80076f0:	f7fa fa49 	bl	8001b86 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
JsonObject 			thread;
 80076f4:	481a      	ldr	r0, [pc, #104]	@ (8007760 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80076f6:	f7fa fa08 	bl	8001b0a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
JsonObject 			module;
 80076fa:	481a      	ldr	r0, [pc, #104]	@ (8007764 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80076fc:	f7fa fa05 	bl	8001b0a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, ptrRxDMABuffer, SPI1);
 8007700:	f44f 700f 	mov.w	r0, #572	@ 0x23c
 8007704:	f013 f8d4 	bl	801a8b0 <_Znwj>
 8007708:	4603      	mov	r3, r0
 800770a:	461c      	mov	r4, r3
 800770c:	4b16      	ldr	r3, [pc, #88]	@ (8007768 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	4b16      	ldr	r3, [pc, #88]	@ (800776c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4b16      	ldr	r3, [pc, #88]	@ (8007770 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4816      	ldr	r0, [pc, #88]	@ (8007774 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800771a:	9000      	str	r0, [sp, #0]
 800771c:	4620      	mov	r0, r4
 800771e:	f003 fc3d 	bl	800af9c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef>
 8007722:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007724:	601c      	str	r4, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007732:	4293      	cmp	r3, r2
 8007734:	d105      	bne.n	8007742 <_Z41__static_initialization_and_destruction_0ii+0x8e>
JsonDocument 		doc;
 8007736:	4809      	ldr	r0, [pc, #36]	@ (800775c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007738:	f7fe feb5 	bl	80064a6 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
std::string 		strJson;
 800773c:	4806      	ldr	r0, [pc, #24]	@ (8007758 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800773e:	f013 f960 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	bd90      	pop	{r4, r7, pc}
 800774a:	bf00      	nop
 800774c:	30000000 	.word	0x30000000
 8007750:	30000040 	.word	0x30000040
 8007754:	30000080 	.word	0x30000080
 8007758:	24000360 	.word	0x24000360
 800775c:	24000378 	.word	0x24000378
 8007760:	240003b8 	.word	0x240003b8
 8007764:	240003c0 	.word	0x240003c0
 8007768:	24000028 	.word	0x24000028
 800776c:	24000024 	.word	0x24000024
 8007770:	2400002c 	.word	0x2400002c
 8007774:	40013000 	.word	0x40013000
 8007778:	240003c8 	.word	0x240003c8

0800777c <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
 8007780:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007784:	2001      	movs	r0, #1
 8007786:	f7ff ff95 	bl	80076b4 <_Z41__static_initialization_and_destruction_0ii>
 800778a:	bd80      	pop	{r7, pc}

0800778c <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
 8007790:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007794:	2000      	movs	r0, #0
 8007796:	f7ff ff8d 	bl	80076b4 <_Z41__static_initialization_and_destruction_0ii>
 800779a:	bd80      	pop	{r7, pc}

0800779c <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
    return static_;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7a1b      	ldrb	r3, [r3, #8]
  }
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e006      	b.n	80077d8 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f979 	bl	8007ac6 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 80077d4:	4603      	mov	r3, r0
 80077d6:	bf00      	nop
  }
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fe60 	bl	80014ae <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80077ee:	4603      	mov	r3, r0
  }
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff ffeb 	bl	80077e0 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800780a:	4603      	mov	r3, r0
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff ffcf 	bl	80077b4 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8007816:	4603      	mov	r3, r0
  }
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff ffde 	bl	80077f8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800783c:	4603      	mov	r3, r0
 800783e:	e000      	b.n	8007842 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 8007840:	2300      	movs	r3, #0
  }
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f81d 	bl	8007896 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7f9 ff28 	bl	80016b8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8007868:	4603      	mov	r3, r0
 800786a:	e003      	b.n	8007874 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7f9 fe1e 	bl	80014ae <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8007872:	4603      	mov	r3, r0
 8007874:	617b      	str	r3, [r7, #20]
    if (!array)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800787c:	2300      	movs	r3, #0
 800787e:	e006      	b.n	800788e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	6978      	ldr	r0, [r7, #20]
 8007886:	f000 f8cd 	bl	8007a24 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800788a:	4603      	mov	r3, r0
 800788c:	bf00      	nop
  }
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	791b      	ldrb	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bf0c      	ite	eq
 80078a6:	2301      	moveq	r3, #1
 80078a8:	2300      	movne	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
  }
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	791b      	ldrb	r3, [r3, #4]
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d003      	beq.n	80078d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d101      	bne.n	80078d4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 80078d4:	2300      	movs	r3, #0
  }
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2204      	movs	r2, #4
 80078f0:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	601a      	str	r2, [r3, #0]
  }
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	1d3b      	adds	r3, r7, #4
 800790e:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	461a      	mov	r2, r3
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800791c:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf0c      	ite	eq
 800793c:	2301      	moveq	r3, #1
 800793e:	2300      	movne	r3, #0
 8007940:	b2db      	uxtb	r3, r3
  }
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f000 f8c2 	bl	8007af4 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 8007970:	4603      	mov	r3, r0
 8007972:	e000      	b.n	8007976 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 8007974:	2300      	movs	r3, #0
  }
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
    return resources_;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
  }
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7f9 fd19 	bl	80013da <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 80079a8:	4603      	mov	r3, r0
  }
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f9 fd0b 	bl	80013da <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 80079c4:	4603      	mov	r3, r0
  }
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
 80079da:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fa f992 	bl	8001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 80079e8:	e006      	b.n	80079f8 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7fa f96a 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7f9 fca5 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f083 0301 	eor.w	r3, r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8007a14:	2300      	movs	r3, #0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e7      	bne.n	80079ea <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 8007a1a:	bf00      	nop
}
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	f107 0314 	add.w	r3, r7, #20
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fa f967 	bl	8001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 8007a3e:	e008      	b.n	8007a52 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fa f93d 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f9 fc76 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f083 0301 	eor.w	r3, r3, #1
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e3      	bne.n	8007a40 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 8007a78:	f107 0314 	add.w	r3, r7, #20
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7f9 fc63 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7f9 fc89 	bl	80013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8007a98:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 8007a9a:	e00c      	b.n	8007ab6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7fa f8c5 	bl	8001c2e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8007aa4:	61f8      	str	r0, [r7, #28]
    if (!element)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e006      	b.n	8007abe <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1ef      	bne.n	8007a9c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 8007abc:	69fb      	ldr	r3, [r7, #28]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8007ad2:	f107 0010 	add.w	r0, r7, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	f7ff ff77 	bl	80079ce <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7f9 fc60 	bl	80013aa <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa f8fe 	bl	8001d0c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8007b10:	e008      	b.n	8007b24 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	3301      	adds	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fa f8d1 	bl	8001cc6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f9 fc0d 	bl	8001348 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f083 0301 	eor.w	r3, r3, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1eb      	bne.n	8007b12 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 8007b3a:	697b      	ldr	r3, [r7, #20]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8007b50:	463b      	mov	r3, r7
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb fc40 	bl	80033d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8007b58:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7ff fea9 	bl	80078b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8007b70:	2300      	movs	r3, #0
  }
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fb71 	bl	8008272 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff ffe5 	bl	8007b7a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <_ZN6RemoraC1Ev>:
#include "remora.h"
#include "json/jsonConfigHandler.h"


Remora::Remora()
 8007bbc:	b590      	push	{r4, r7, lr}
 8007bbe:	b08b      	sub	sp, #44	@ 0x2c
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
	: baseFreq(Config::PRU_BASEFREQ),
	  servoFreq(Config::PRU_SERVOFREQ),
	  commsFreq(Config::PRU_COMMSFREQ)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 facf 	bl	800816c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 faca 	bl	800816c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	: baseFreq(Config::PRU_BASEFREQ),
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8007bde:	60da      	str	r2, [r3, #12]
	  servoFreq(Config::PRU_SERVOFREQ),
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007be6:	611a      	str	r2, [r3, #16]
	  commsFreq(Config::PRU_COMMSFREQ)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8007bee:	615a      	str	r2, [r3, #20]
{

	this->configHandler = new JsonConfigHandler(this);
 8007bf0:	206c      	movs	r0, #108	@ 0x6c
 8007bf2:	f012 fe5d 	bl	801a8b0 <_Znwj>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461c      	mov	r4, r3
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f7fb f8af 	bl	8002d60 <_ZN17JsonConfigHandlerC1EP6Remora>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601c      	str	r4, [r3, #0]
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 8007c06:	4b23      	ldr	r3, [pc, #140]	@ (8007c94 <_ZN6RemoraC1Ev+0xd8>)
 8007c08:	60fb      	str	r3, [r7, #12]
										TIM3_IRQn,
 8007c0a:	231d      	movs	r3, #29
 8007c0c:	827b      	strh	r3, [r7, #18]
										baseFreq,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	330c      	adds	r3, #12
    baseThread = make_unique<pruThread>(
 8007c12:	f107 0008 	add.w	r0, r7, #8
 8007c16:	f107 0112 	add.w	r1, r7, #18
 8007c1a:	f107 020c 	add.w	r2, r7, #12
 8007c1e:	4c1e      	ldr	r4, [pc, #120]	@ (8007c98 <_ZN6RemoraC1Ev+0xdc>)
 8007c20:	9401      	str	r4, [sp, #4]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	460b      	mov	r3, r1
 8007c26:	491d      	ldr	r1, [pc, #116]	@ (8007c9c <_ZN6RemoraC1Ev+0xe0>)
 8007c28:	f000 fad2 	bl	80081d0 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::BASE_THREAD_IRQ_PRIORITY
										);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	f107 0208 	add.w	r2, r7, #8
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff ffaf 	bl	8007b9a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 8007c3c:	f107 0308 	add.w	r3, r7, #8
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 faa3 	bl	800818c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 8007c46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c4a:	61bb      	str	r3, [r7, #24]
										TIM2_IRQn,
 8007c4c:	231c      	movs	r3, #28
 8007c4e:	83fb      	strh	r3, [r7, #30]
										servoFreq,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3310      	adds	r3, #16
    servoThread = make_unique<pruThread>(
 8007c54:	f107 0014 	add.w	r0, r7, #20
 8007c58:	f107 011e 	add.w	r1, r7, #30
 8007c5c:	f107 0218 	add.w	r2, r7, #24
 8007c60:	4c0f      	ldr	r4, [pc, #60]	@ (8007ca0 <_ZN6RemoraC1Ev+0xe4>)
 8007c62:	9401      	str	r4, [sp, #4]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	460b      	mov	r3, r1
 8007c68:	490e      	ldr	r1, [pc, #56]	@ (8007ca4 <_ZN6RemoraC1Ev+0xe8>)
 8007c6a:	f000 fb1e 	bl	80082aa <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::SERVO_THREAD_IRQ_PRIORITY
										);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3308      	adds	r3, #8
 8007c72:	f107 0214 	add.w	r2, r7, #20
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff ff8e 	bl	8007b9a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 8007c7e:	f107 0314 	add.w	r3, r7, #20
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fa82 	bl	800818c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    loadModules();
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f82d 	bl	8007ce8 <_ZN6Remora11loadModulesEv>
    while (1);
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <_ZN6RemoraC1Ev+0xd2>
 8007c92:	bf00      	nop
 8007c94:	40000400 	.word	0x40000400
 8007c98:	0801cb4c 	.word	0x0801cb4c
 8007c9c:	0801c6c4 	.word	0x0801c6c4
 8007ca0:	0801cb50 	.word	0x0801cb50
 8007ca4:	0801c6cc 	.word	0x0801c6cc

08007ca8 <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EEC1EOS3_>:
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fbdb 	bl	8008474 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1EOS3_>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1EOS3_>:
      unique_ptr(unique_ptr&&) = default;
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ffe5 	bl	8007ca8 <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EEC1EOS3_>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <_ZN6Remora11loadModulesEv>:
}

void Remora::loadModules() {
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b0fc      	sub	sp, #496	@ 0x1f0
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007cf2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007cf6:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 8007cf8:	f003 f84e 	bl	800ad98 <_ZN13ModuleFactory11getInstanceEv>
 8007cfc:	f8c7 01e0 	str.w	r0, [r7, #480]	@ 0x1e0
    JsonArray modules = configHandler->getModules();
 8007d00:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007d04:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007d10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fb f930 	bl	8002f7c <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fe03 	bl	800792c <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 8007d26:	2300      	movs	r3, #0
 8007d28:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8007d2c:	e1eb      	b.n	8008106 <_ZN6Remora11loadModulesEv+0x41e>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8007d2e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007d32:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007d36:	f107 0114 	add.w	r1, r7, #20
 8007d3a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fb04 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8007d44:	f107 041c 	add.w	r4, r7, #28

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 8007d48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fd04 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8007d52:	4602      	mov	r2, r0
 8007d54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fd08 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8007d60:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8007d64:	49c9      	ldr	r1, [pc, #804]	@ (800808c <_ZN6Remora11loadModulesEv+0x3a4>)
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc f99b 	bl	80040a2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007d6c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007d70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8007d7a:	cb0c      	ldmia	r3, {r2, r3}
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 fd0f 	bl	80087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8007d82:	f107 031c 	add.w	r3, r7, #28
 8007d86:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8007d8a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8007d8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8007d92:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8007d96:	f000 ff62 	bl	8008c5e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8007da0:	f000 ff6d 	bl	8008c7e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8007daa:	4621      	mov	r1, r4
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f9 fd94 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8007db2:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8007db4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8007db8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007dbc:	f7ff fec2 	bl	8007b44 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	bf00      	nop
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d04e      	beq.n	8007e66 <_ZN6Remora11loadModulesEv+0x17e>
 8007dc8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007dcc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8007dd0:	f107 0114 	add.w	r1, r7, #20
 8007dd4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fab7 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8007dde:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
  return {derived(), adaptString(key)};
 8007de2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fcb7 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8007dec:	4602      	mov	r2, r0
 8007dee:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fcbb 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8007dfa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007dfe:	49a4      	ldr	r1, [pc, #656]	@ (8008090 <_ZN6Remora11loadModulesEv+0x3a8>)
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff fc29 	bl	8007658 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007e06:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8007e0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007e14:	cb0c      	ldmia	r3, {r2, r3}
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fcc2 	bl	80087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8007e1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007e20:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8007e24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8007e28:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8007e2c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8007e30:	f000 ff15 	bl	8008c5e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8007e34:	4604      	mov	r4, r0
 8007e36:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8007e3a:	f000 ff20 	bl	8008c7e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e44:	4621      	mov	r1, r4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7f9 fd47 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8007e4c:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8007e4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e56:	f7ff fe75 	bl	8007b44 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	bf00      	nop
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <_ZN6Remora11loadModulesEv+0x17e>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <_ZN6Remora11loadModulesEv+0x180>
 8007e66:	2300      	movs	r3, #0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8147 	beq.w	80080fc <_ZN6Remora11loadModulesEv+0x414>
            const char* threadName = modules[i]["Thread"];
 8007e6e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007e72:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8007e76:	f107 0114 	add.w	r1, r7, #20
 8007e7a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fa64 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8007e84:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
  return {derived(), adaptString(key)};
 8007e88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fc64 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8007e92:	4602      	mov	r2, r0
 8007e94:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fc68 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8007ea0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8007ea4:	4979      	ldr	r1, [pc, #484]	@ (800808c <_ZN6Remora11loadModulesEv+0x3a4>)
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fc f8fb 	bl	80040a2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007eac:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8007eb0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8007eba:	cb0c      	ldmia	r3, {r2, r3}
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fc6f 	bl	80087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8007ec2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fa50 	bl	800836c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007ecc:	f8c7 01dc 	str.w	r0, [r7, #476]	@ 0x1dc
            const char* moduleType = modules[i]["Type"];
 8007ed0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007ed4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007ed8:	f107 0114 	add.w	r1, r7, #20
 8007edc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fa33 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8007ee6:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8007eea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fc33 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fc37 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8007f02:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8007f06:	4962      	ldr	r1, [pc, #392]	@ (8008090 <_ZN6Remora11loadModulesEv+0x3a8>)
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fba5 	bl	8007658 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007f0e:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007f12:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8007f1c:	cb0c      	ldmia	r3, {r2, r3}
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fc3e 	bl	80087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8007f24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fa1f 	bl	800836c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007f2e:	f8c7 01d8 	str.w	r0, [r7, #472]	@ 0x1d8
            uint32_t threadFreq = 0;
 8007f32:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007f36:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 8007f3e:	4955      	ldr	r1, [pc, #340]	@ (8008094 <_ZN6Remora11loadModulesEv+0x3ac>)
 8007f40:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 8007f44:	f7f8 f9cc 	bl	80002e0 <strcmp>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <_ZN6Remora11loadModulesEv+0x27e>
                threadFreq = servoFreq;
 8007f4e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007f52:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007f5e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e012      	b.n	8007f8c <_ZN6Remora11loadModulesEv+0x2a4>
            } else if (strcmp(threadName, "Base") == 0) {
 8007f66:	494c      	ldr	r1, [pc, #304]	@ (8008098 <_ZN6Remora11loadModulesEv+0x3b0>)
 8007f68:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 8007f6c:	f7f8 f9b8 	bl	80002e0 <strcmp>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <_ZN6Remora11loadModulesEv+0x2a4>
                threadFreq = baseFreq;
 8007f76:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007f7a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8007f86:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007f8a:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 8007f8c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8007f90:	f107 0114 	add.w	r1, r7, #20
 8007f94:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f9d7 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8007f9e:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8007fa2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fbd7 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8007fac:	4602      	mov	r2, r0
 8007fae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fbdb 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8007fba:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8007fbe:	4937      	ldr	r1, [pc, #220]	@ (800809c <_ZN6Remora11loadModulesEv+0x3b4>)
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fc2e 	bl	8008822 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007fc6:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8007fca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8007fd4:	cb0c      	ldmia	r3, {r2, r3}
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fbe2 	bl	80087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8007fdc:	f107 0210 	add.w	r2, r7, #16
 8007fe0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f9cc 	bl	8008384 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::unique_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i]);
 8007fec:	f8d7 51e0 	ldr.w	r5, [r7, #480]	@ 0x1e0
 8007ff0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8007ff4:	f107 0114 	add.w	r1, r7, #20
 8007ff8:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f9a5 	bl	800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008002:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8008006:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f9c7 	bl	80083a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 8008012:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8008016:	f5a3 74ee 	sub.w	r4, r3, #476	@ 0x1dc
 800801a:	466a      	mov	r2, sp
 800801c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8008020:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008024:	e882 0003 	stmia.w	r2, {r0, r1}
 8008028:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800802c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8008030:	4629      	mov	r1, r5
 8008032:	4620      	mov	r0, r4
 8008034:	f002 fe4c 	bl	800acd0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>
            if (strcmp(threadName, "Servo") == 0)
 8008038:	4916      	ldr	r1, [pc, #88]	@ (8008094 <_ZN6Remora11loadModulesEv+0x3ac>)
 800803a:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 800803e:	f7f8 f94f 	bl	80002e0 <strcmp>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d12b      	bne.n	80080a0 <_ZN6Remora11loadModulesEv+0x3b8>
                servoThread->registerModule(move(_mod));
 8008048:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800804c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	4618      	mov	r0, r3
 8008056:	f000 f9d4 	bl	8008402 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800805a:	4604      	mov	r4, r0
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f9da 	bl	800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008066:	4602      	mov	r2, r0
 8008068:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fe2a 	bl	8007cc8 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1EOS3_>
 8008074:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8008078:	4619      	mov	r1, r3
 800807a:	4620      	mov	r0, r4
 800807c:	f005 f8a6 	bl	800d1cc <_ZN9pruThread14registerModuleESt10unique_ptrI6ModuleSt14default_deleteIS1_EE>
 8008080:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f99a 	bl	80083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>
 800808a:	e032      	b.n	80080f2 <_ZN6Remora11loadModulesEv+0x40a>
 800808c:	0801c6d4 	.word	0x0801c6d4
 8008090:	0801c6dc 	.word	0x0801c6dc
 8008094:	0801c6cc 	.word	0x0801c6cc
 8008098:	0801c6c4 	.word	0x0801c6c4
 800809c:	0801c6e4 	.word	0x0801c6e4
            else if (strcmp(threadName, "Base") == 0)
 80080a0:	4924      	ldr	r1, [pc, #144]	@ (8008134 <_ZN6Remora11loadModulesEv+0x44c>)
 80080a2:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 80080a6:	f7f8 f91b 	bl	80002e0 <strcmp>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d120      	bne.n	80080f2 <_ZN6Remora11loadModulesEv+0x40a>
                baseThread->registerModule(move(_mod));
 80080b0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80080b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f9a0 	bl	8008402 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80080c2:	4604      	mov	r4, r0
 80080c4:	f107 030c 	add.w	r3, r7, #12
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f9a6 	bl	800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80080ce:	4602      	mov	r2, r0
 80080d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80080d4:	4611      	mov	r1, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fdf6 	bl	8007cc8 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1EOS3_>
 80080dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80080e0:	4619      	mov	r1, r3
 80080e2:	4620      	mov	r0, r4
 80080e4:	f005 f872 	bl	800d1cc <_ZN9pruThread14registerModuleESt10unique_ptrI6ModuleSt14default_deleteIS1_EE>
 80080e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 f966 	bl	80083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f961 	bl	80083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>
    for (size_t i = 0; i < modules.size(); i++) {
 80080fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8008100:	3301      	adds	r3, #1
 8008102:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8008106:	f107 0314 	add.w	r3, r7, #20
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fc1f 	bl	800794e <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 8008110:	4602      	mov	r2, r0
 8008112:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8008116:	4293      	cmp	r3, r2
 8008118:	bf34      	ite	cc
 800811a:	2301      	movcc	r3, #1
 800811c:	2300      	movcs	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	f47f ae04 	bne.w	8007d2e <_ZN6Remora11loadModulesEv+0x46>
    }

}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 800812e:	46bd      	mov	sp, r7
 8008130:	bdb0      	pop	{r4, r5, r7, pc}
 8008132:	bf00      	nop
 8008134:	0801c6c4 	.word	0x0801c6c4

08008138 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f9e6 	bl	8008514 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff ffeb 	bl	8008138 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	: _M_t()
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ffe8 	bl	8008152 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f9c9 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800819c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f9ce 	bl	8008548 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 80081ac:	4604      	mov	r4, r0
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f9d7 	bl	8008562 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 80081b4:	4603      	mov	r3, r0
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4619      	mov	r1, r3
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f9f3 	bl	80085a6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
      }
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd90      	pop	{r4, r7, pc}

080081d0 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	b08e      	sub	sp, #56	@ 0x38
 80081d6:	af02      	add	r7, sp, #8
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80081e0:	2044      	movs	r0, #68	@ 0x44
 80081e2:	f012 fb65 	bl	801a8b0 <_Znwj>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4698      	mov	r8, r3
 80081ea:	68b8      	ldr	r0, [r7, #8]
 80081ec:	f000 f9ee 	bl	80085cc <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80081f0:	4604      	mov	r4, r0
 80081f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80081f6:	4618      	mov	r0, r3
 80081f8:	f012 fb6b 	bl	801a8d2 <_ZNSaIcEC1Ev>
 80081fc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008200:	f107 0314 	add.w	r3, r7, #20
 8008204:	4621      	mov	r1, r4
 8008206:	4618      	mov	r0, r3
 8008208:	f7fb fb30 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9e8 	bl	80085e2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008212:	4603      	mov	r3, r0
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6838      	ldr	r0, [r7, #0]
 8008218:	f000 f9ee 	bl	80085f8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800821c:	4603      	mov	r3, r0
 800821e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008222:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008224:	f000 f9f3 	bl	800860e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8008228:	4603      	mov	r3, r0
 800822a:	681c      	ldr	r4, [r3, #0]
 800822c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800822e:	f000 f9f9 	bl	8008624 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8008232:	4603      	mov	r3, r0
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f107 0114 	add.w	r1, r7, #20
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	9400      	str	r4, [sp, #0]
 8008240:	4633      	mov	r3, r6
 8008242:	462a      	mov	r2, r5
 8008244:	4640      	mov	r0, r8
 8008246:	f004 fefd 	bl	800d044 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800824a:	4641      	mov	r1, r8
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fa04 	bl	800865a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8008252:	f107 0314 	add.w	r3, r7, #20
 8008256:	4618      	mov	r0, r3
 8008258:	f012 fbd3 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800825c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008260:	4618      	mov	r0, r3
 8008262:	f012 fb37 	bl	801a8d4 <_ZNSaIcED1Ev>
 8008266:	bf00      	nop
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	3730      	adds	r7, #48	@ 0x30
 800826c:	46bd      	mov	sp, r7
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008272 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800827c:	6838      	ldr	r0, [r7, #0]
 800827e:	f000 fa1b 	bl	80086b8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 8008282:	4603      	mov	r3, r0
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9f6 	bl	8008678 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800828c:	6838      	ldr	r0, [r7, #0]
 800828e:	f000 fa28 	bl	80086e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8008292:	4603      	mov	r3, r0
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fa31 	bl	80086fc <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa21 	bl	80086e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80082a0:	687b      	ldr	r3, [r7, #4]
      }
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80082aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	b08e      	sub	sp, #56	@ 0x38
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80082ba:	2044      	movs	r0, #68	@ 0x44
 80082bc:	f012 faf8 	bl	801a8b0 <_Znwj>
 80082c0:	4603      	mov	r3, r0
 80082c2:	4698      	mov	r8, r3
 80082c4:	68b8      	ldr	r0, [r7, #8]
 80082c6:	f000 fa24 	bl	8008712 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80082ca:	4604      	mov	r4, r0
 80082cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80082d0:	4618      	mov	r0, r3
 80082d2:	f012 fafe 	bl	801a8d2 <_ZNSaIcEC1Ev>
 80082d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	4621      	mov	r1, r4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fb fac3 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f97b 	bl	80085e2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80082ec:	4603      	mov	r3, r0
 80082ee:	681d      	ldr	r5, [r3, #0]
 80082f0:	6838      	ldr	r0, [r7, #0]
 80082f2:	f000 f981 	bl	80085f8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80082fc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80082fe:	f000 f986 	bl	800860e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8008302:	4603      	mov	r3, r0
 8008304:	681c      	ldr	r4, [r3, #0]
 8008306:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008308:	f000 f98c 	bl	8008624 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800830c:	4603      	mov	r3, r0
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	f107 0114 	add.w	r1, r7, #20
 8008316:	9301      	str	r3, [sp, #4]
 8008318:	9400      	str	r4, [sp, #0]
 800831a:	4633      	mov	r3, r6
 800831c:	462a      	mov	r2, r5
 800831e:	4640      	mov	r0, r8
 8008320:	f004 fe90 	bl	800d044 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8008324:	4641      	mov	r1, r8
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f997 	bl	800865a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800832c:	f107 0314 	add.w	r3, r7, #20
 8008330:	4618      	mov	r0, r3
 8008332:	f012 fb66 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800833a:	4618      	mov	r0, r3
 800833c:	f012 faca 	bl	801a8d4 <_ZNSaIcED1Ev>
 8008340:	bf00      	nop
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	3730      	adds	r7, #48	@ 0x30
 8008346:	46bd      	mov	sp, r7
 8008348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800834c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	ca06      	ldmia	r2, {r1, r2}
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f9e2 	bl	8008728 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
    return as<T>();
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa32 	bl	80087de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800837a:	4603      	mov	r3, r0
  }
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
    this->set(src);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa59 	bl	8008848 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 8008396:	687b      	ldr	r3, [r7, #4]
  }
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
    return as<T>();
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa58 	bl	8008864 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 80083b4:	bf00      	nop
  }
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80083be:	b590      	push	{r4, r7, lr}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fa6f 	bl	80088ac <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE6_M_ptrEv>
 80083ce:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa74 	bl	80088c6 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EE11get_deleterEv>
 80083de:	4604      	mov	r4, r0
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 fa7d 	bl	80088e0 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 80083e6:	4603      	mov	r3, r0
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4619      	mov	r1, r3
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fa82 	bl	80088f6 <_ZNKSt14default_deleteI6ModuleEclEPS0_>
	__ptr = pointer();
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
      }
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd90      	pop	{r4, r7, pc}

08008402 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
	return get();
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa84 	bl	8008918 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8008410:	4603      	mov	r3, r0
      }
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1EOS4_>:

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2729. Missing SFINAE on std::pair::operator=
      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa83 	bl	8008948 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1EOS3_>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1EOS4_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff ffe3 	bl	8008430 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1EOS4_>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1EOS3_>:
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
      : _M_t(std::move(__u._M_t))
 800847e:	687c      	ldr	r4, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fa55 	bl	8008932 <_ZSt4moveIRSt5tupleIJP6ModuleSt14default_deleteIS1_EEEEONSt16remove_referenceIT_E4typeEOS8_>
 8008488:	4603      	mov	r3, r0
 800848a:	4619      	mov	r1, r3
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff ffe1 	bl	8008454 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1EOS4_>
      { __u._M_ptr() = nullptr; }
 8008492:	6838      	ldr	r0, [r7, #0]
 8008494:	f000 fa0a 	bl	80088ac <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE6_M_ptrEv>
 8008498:	4603      	mov	r3, r0
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd90      	pop	{r4, r7, pc}

080084a8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	4638      	mov	r0, r7
 80084b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 80084b6:	463b      	mov	r3, r7
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7f8 fe4e 	bl	800115a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e021      	b.n	800850c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 80084c8:	463b      	mov	r3, r7
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff f966 	bl	800779c <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 80084d6:	463b      	mov	r3, r7
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f8 fe6b 	bl	80011b4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	4619      	mov	r1, r3
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff f9fd 	bl	80078e2 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e00f      	b.n	800850c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 80084ec:	6a38      	ldr	r0, [r7, #32]
 80084ee:	463b      	mov	r3, r7
 80084f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084f2:	f000 fa35 	bl	8008960 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 80084f6:	6178      	str	r0, [r7, #20]
  if (dup) {
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 80084fe:	6979      	ldr	r1, [r7, #20]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7f9 f8a8 	bl	8001656 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fa44 	bl	80089ac <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fa47 	bl	80089cc <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800853e:	4603      	mov	r3, r0
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f8c5 	bl	80086e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8008558:	4603      	mov	r3, r0
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	332c      	adds	r3, #44	@ 0x2c
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fa2e 	bl	80089e6 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EED1Ev>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3320      	adds	r3, #32
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fa29 	bl	80089e6 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EED1Ev>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4618      	mov	r0, r3
 8008598:	f012 fa33 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 80085a6:	b590      	push	{r4, r7, lr}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80085b0:	683c      	ldr	r4, [r7, #0]
 80085b2:	2c00      	cmp	r4, #0
 80085b4:	d006      	beq.n	80085c4 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff ffde 	bl	8008578 <_ZN9pruThreadD1Ev>
 80085bc:	2144      	movs	r1, #68	@ 0x44
 80085be:	4620      	mov	r0, r4
 80085c0:	f012 f965 	bl	801a88e <_ZdlPvj>
      }
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd90      	pop	{r4, r7, pc}

080085cc <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4618      	mov	r0, r3
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f9e6 	bl	8008a1c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff ffe6 	bl	800863a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff ff53 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8008688:	4603      	mov	r3, r0
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800868e:	683c      	ldr	r4, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ff4c 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8008696:	4603      	mov	r3, r0
 8008698:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f81e 	bl	80086e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 80086a6:	4603      	mov	r3, r0
 80086a8:	68f9      	ldr	r1, [r7, #12]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff ff7b 	bl	80085a6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd90      	pop	{r4, r7, pc}

080086b8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff34 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 80086c6:	4603      	mov	r3, r0
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff2e 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
	return __p;
 80086d8:	68fb      	ldr	r3, [r7, #12]
      }
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f9a9 	bl	8008a44 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80086f2:	4603      	mov	r3, r0
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	1d38      	adds	r0, r7, #4
 8008732:	e880 0006 	stmia.w	r0, {r1, r2}
 8008736:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3304      	adds	r3, #4
 800873c:	1d3a      	adds	r2, r7, #4
 800873e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008742:	e883 0003 	stmia.w	r3, {r0, r1}
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008762:	687b      	ldr	r3, [r7, #4]
  }
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	3304      	adds	r3, #4
 8008780:	3204      	adds	r2, #4
 8008782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008786:	e883 0003 	stmia.w	r3, {r0, r1}
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80087a0:	b082      	sub	sp, #8
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
 80087ac:	f107 0110 	add.w	r1, r7, #16
 80087b0:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff ffd8 	bl	8008770 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3314      	adds	r3, #20
 80087c4:	f107 0210 	add.w	r2, r7, #16
 80087c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80087ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087da:	b002      	add	sp, #8
 80087dc:	4770      	bx	lr

080087de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80087de:	b590      	push	{r4, r7, lr}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80087ee:	6938      	ldr	r0, [r7, #16]
 80087f0:	f000 fa35 	bl	8008c5e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 80087f4:	4604      	mov	r4, r0
 80087f6:	6938      	ldr	r0, [r7, #16]
 80087f8:	f000 fa41 	bl	8008c7e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 80087fc:	4602      	mov	r2, r0
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	4621      	mov	r1, r4
 8008804:	4618      	mov	r0, r3
 8008806:	f7f9 f868 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800880a:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800880c:	f107 0308 	add.w	r3, r7, #8
 8008810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008814:	f7f9 fd5a 	bl	80022cc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8008818:	4603      	mov	r3, r0
}
 800881a:	4618      	mov	r0, r3
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd90      	pop	{r4, r7, pc}

08008822 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800882c:	6838      	ldr	r0, [r7, #0]
 800882e:	f000 f915 	bl	8008a5c <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f000 f91a 	bl	8008a72 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800883e:	bf00      	nop
}
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f91b 	bl	8008a90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800885a:	4603      	mov	r3, r0
  }
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8008876:	6938      	ldr	r0, [r7, #16]
 8008878:	f000 fb1e 	bl	8008eb8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800887c:	4604      	mov	r4, r0
 800887e:	6938      	ldr	r0, [r7, #16]
 8008880:	f000 fb2a 	bl	8008ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 8008884:	4602      	mov	r2, r0
 8008886:	f107 0308 	add.w	r3, r7, #8
 800888a:	4621      	mov	r1, r4
 800888c:	4618      	mov	r0, r3
 800888e:	f7f9 f84f 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8008892:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f107 0308 	add.w	r3, r7, #8
 800889a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800889e:	f7ff f831 	bl	8007904 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 80088a2:	bf00      	nop
}
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd90      	pop	{r4, r7, pc}

080088ac <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f8f9 	bl	8008aae <_ZSt3getILj0EJP6ModuleSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80088bc:	4603      	mov	r3, r0
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f8f9 	bl	8008ac8 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE10_M_deleterEv>
 80088d6:	4603      	mov	r3, r0
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <_ZNKSt14default_deleteI6ModuleEclEPS0_>:
      operator()(_Tp* __ptr) const
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <_ZNKSt14default_deleteI6ModuleEclEPS0_+0x1a>
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	3204      	adds	r2, #4
 800890a:	6812      	ldr	r2, [r2, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	4790      	blx	r2
      }
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 f8dd 	bl	8008ae2 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8008928:	4603      	mov	r3, r0
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <_ZSt4moveIRSt5tupleIJP6ModuleSt14default_deleteIS1_EEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
      { }
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af02      	add	r7, sp, #8
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	4638      	mov	r0, r7
 800896a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800896e:	463b      	mov	r3, r7
 8008970:	4618      	mov	r0, r3
 8008972:	f7f8 fbf2 	bl	800115a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800897c:	2300      	movs	r3, #0
 800897e:	e011      	b.n	80089a4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f103 0008 	add.w	r0, r3, #8
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	463b      	mov	r3, r7
 800898e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008990:	f000 f8b5 	bl	8008afe <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 8008994:	6178      	str	r0, [r7, #20]
    if (!node)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	711a      	strb	r2, [r3, #4]
    return node;
 80089a2:	697b      	ldr	r3, [r7, #20]
  }
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8e2 	bl	8008b7e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f8ea 	bl	8008b96 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f8eb 	bl	8008bb2 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80089dc:	4603      	mov	r3, r0
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 80089e6:	b5b0      	push	{r4, r5, r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681c      	ldr	r4, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f90b 	bl	8008c14 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>
 80089fe:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a00:	461a      	mov	r2, r3
 8008a02:	4629      	mov	r1, r5
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 f910 	bl	8008c2a <_ZSt8_DestroyIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES4_EvT_S6_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f8e8 	bl	8008be2 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EED1Ev>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bdb0      	pop	{r4, r5, r7, pc}

08008a1c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008a1c:	b590      	push	{r4, r7, lr}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff fd73 	bl	8008514 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008a2e:	683c      	ldr	r4, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff fd7c 	bl	800852e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8008a36:	4603      	mov	r3, r0
 8008a38:	601c      	str	r4, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd90      	pop	{r4, r7, pc}

08008a44 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f8fa 	bl	8008c46 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008a52:	4603      	mov	r3, r0
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	220a      	movs	r2, #10
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7f8 fb52 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f8fd 	bl	8008c9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 8008aa4:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <_ZSt3getILj0EJP6ModuleSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f90a 	bl	8008cd2 <_ZSt12__get_helperILj0EP6ModuleJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f909 	bl	8008cea <_ZSt3getILj1EJP6ModuleSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f908 	bl	8008d02 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008af2:	4603      	mov	r3, r0
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af02      	add	r7, sp, #8
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	4638      	mov	r0, r7
 8008b08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 8008b0c:	463b      	mov	r3, r7
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7fb f9c9 	bl	8003ea8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8008b16:	6178      	str	r0, [r7, #20]
    if (node) {
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	889b      	ldrh	r3, [r3, #4]
 8008b22:	3301      	adds	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	809a      	strh	r2, [r3, #4]
      return node;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	e023      	b.n	8008b76 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 8008b2e:	463b      	mov	r3, r7
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f8 fb23 	bl	800117c <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8008b36:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 8008b38:	6a39      	ldr	r1, [r7, #32]
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f7f8 fa8c 	bl	8001058 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8008b40:	6178      	str	r0, [r7, #20]
    if (!node)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e014      	b.n	8008b76 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f103 0208 	add.w	r2, r3, #8
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	4613      	mov	r3, r2
 8008b58:	463a      	mov	r2, r7
 8008b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b5c:	f000 f8de 	bl	8008d1c <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	4413      	add	r3, r2
 8008b66:	3308      	adds	r3, #8
 8008b68:	2200      	movs	r2, #0
 8008b6a:	701a      	strb	r2, [r3, #0]
    add(node);
 8008b6c:	6979      	ldr	r1, [r7, #20]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7f8 fb46 	bl	8001200 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 8008b74:	697b      	ldr	r3, [r7, #20]
  }
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f8e8 	bl	8008d5c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f8d9 	bl	8008d72 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f8da 	bl	8008d8c <_ZNSaISt10unique_ptrI6ModuleSt14default_deleteIS0_EEED1Ev>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8d1 	bl	8008da4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE13_M_deallocateEPS4_j>
      }
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ffe0 	bl	8008bca <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_Vector_implD1Ev>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <_ZSt8_DestroyIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES4_EvT_S6_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f8c6 	bl	8008dca <_ZSt8_DestroyIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEvT_S6_>
    }
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8c8 	bl	8008de4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f8c8 	bl	8008dfc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f8cf 	bl	8008e12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008c74:	4603      	mov	r3, r0
  }
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8b8 	bl	8008dfc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f8cb 	bl	8008e2a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008c94:	4603      	mov	r3, r0
  }
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 8008c9e:	b590      	push	{r4, r7, lr}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	681c      	ldr	r4, [r3, #0]
 8008cae:	f107 0310 	add.w	r3, r7, #16
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f8c4 	bl	8008e42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f8d3 	bl	8008e6e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd90      	pop	{r4, r7, pc}

08008cd2 <_ZSt12__get_helperILj0EP6ModuleJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f90c 	bl	8008ef8 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEE7_M_headERS4_>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <_ZSt3getILj1EJP6ModuleSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f90d 	bl	8008f12 <_ZSt12__get_helperILj1ESt14default_deleteI6ModuleEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f90c 	bl	8008f2a <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 8008d1c:	b590      	push	{r4, r7, lr}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	1d3c      	adds	r4, r7, #4
 8008d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d28:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	e00c      	b.n	8008d4a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	18d4      	adds	r4, r2, r3
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	6979      	ldr	r1, [r7, #20]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f8 fa2a 	bl	8001194 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8008d40:	4603      	mov	r3, r0
 8008d42:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	3301      	adds	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d3ee      	bcc.n	8008d30 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd90      	pop	{r4, r7, pc}

08008d5c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8e0 	bl	8008f42 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 8008d82:	4603      	mov	r3, r0
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <_ZNSaISt10unique_ptrI6ModuleSt14default_deleteIS0_EEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8df 	bl	8008f58 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEED1Ev>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE13_M_deallocateEPS4_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
	if (__p)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE13_M_deallocateEPS4_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f8d6 	bl	8008f6e <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE10deallocateERS5_PS4_j>
      }
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZSt8_DestroyIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEvT_S6_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f8d8 	bl	8008f8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10unique_ptrI6ModuleSt14default_deleteIS3_EEEEvT_S8_>
    }
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8e6 	bl	8008fbe <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008e04:	687b      	ldr	r3, [r7, #4]
  }
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8da 	bl	8008fd4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 8008e20:	4603      	mov	r3, r0
  }
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8ea 	bl	800900c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 8008e38:	4603      	mov	r3, r0
  }
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 8008e42:	b590      	push	{r4, r7, lr}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 8008e4c:	6838      	ldr	r0, [r7, #0]
 8008e4e:	f000 f8eb 	bl	8009028 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 8008e52:	4604      	mov	r4, r0
 8008e54:	6838      	ldr	r0, [r7, #0]
 8008e56:	f7ff ff12 	bl	8008c7e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4621      	mov	r1, r4
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7f8 fd65 	bl	8001930 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}

08008e6e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b086      	sub	sp, #24
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	1d3b      	adds	r3, r7, #4
 8008e78:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fa9e 	bl	80033c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8008e84:	6178      	str	r0, [r7, #20]
    if (!data)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e00f      	b.n	8008eb0 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa fc39 	bl	800370a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8008e98:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 8008e9a:	6939      	ldr	r1, [r7, #16]
 8008e9c:	6978      	ldr	r0, [r7, #20]
 8008e9e:	f7f9 fa7b 	bl	8002398 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	68f9      	ldr	r1, [r7, #12]
 8008ea6:	6978      	ldr	r0, [r7, #20]
 8008ea8:	f000 f8ce 	bl	8009048 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8008eac:	4603      	mov	r3, r0
 8008eae:	bf00      	nop
  }
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff fc4a 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 f900 	bl	80090ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 8008ece:	4603      	mov	r3, r0
  }
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fc3a 	bl	800875a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f90f 	bl	800910c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008eee:	4603      	mov	r3, r0
  }
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f90e 	bl	8009124 <_ZNSt10_Head_baseILj0EP6ModuleLb0EE7_M_headERS2_>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12__get_helperILj1ESt14default_deleteI6ModuleEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f90d 	bl	800913a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEE7_M_headERS3_>
 8008f20:	4603      	mov	r3, r0
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f90d 	bl	8009152 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f8f4 	bl	800916c <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE10deallocateEPS4_j>
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10unique_ptrI6ModuleSt14default_deleteIS3_EEEEvT_S8_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8008f96:	e009      	b.n	8008fac <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10unique_ptrI6ModuleSt14default_deleteIS3_EEEEvT_S8_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8f6 	bl	800918a <_ZSt11__addressofISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEPT_RS5_>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f8fd 	bl	80091a0 <_ZSt8_DestroyISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEvPT_>
	  for (; __first != __last; ++__first)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	607b      	str	r3, [r7, #4]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d1f1      	bne.n	8008f98 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10unique_ptrI6ModuleSt14default_deleteIS3_EEEEvT_S8_+0xc>
	}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8008fd4:	b590      	push	{r4, r7, lr}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af02      	add	r7, sp, #8
 8008fda:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f874 	bl	80090ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 8008fe6:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f88d 	bl	800910c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008ff2:	4602      	mov	r2, r0
    return VariantData::getMember(
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	9200      	str	r2, [sp, #0]
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7fc fc63 	bl	80058c8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8009002:	4603      	mov	r3, r0
  }
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bd90      	pop	{r4, r7, pc}

0800900c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3304      	adds	r3, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f000 f877 	bl	800910c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800901e:	4603      	mov	r3, r0
  }
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fee3 	bl	8008dfc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 8009036:	4603      	mov	r3, r0
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f8bc 	bl	80091b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800903e:	4603      	mov	r3, r0
  }
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8009048:	b5b0      	push	{r4, r5, r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8009054:	68b8      	ldr	r0, [r7, #8]
 8009056:	f7fb ff00 	bl	8004e5a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	220a      	movs	r2, #10
 8009064:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	e02a      	b.n	80090c4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800906e:	f107 0310 	add.w	r3, r7, #16
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	f7f8 ffa8 	bl	8001fca <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800907a:	f107 0310 	add.w	r3, r7, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd f8c5 	bl	800620e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009084:	4603      	mov	r3, r0
 8009086:	f083 0301 	eor.w	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 8009090:	2300      	movs	r3, #0
 8009092:	e018      	b.n	80090c6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	221a      	movs	r2, #26
 8009098:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800909a:	f107 0310 	add.w	r3, r7, #16
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd f8c6 	bl	8006230 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2200      	movs	r2, #0
 80090b0:	461c      	mov	r4, r3
 80090b2:	4615      	mov	r5, r2
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fd f8c5 	bl	8006248 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80090be:	4603      	mov	r3, r0
 80090c0:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 80090c4:	2301      	movs	r3, #1
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bdb0      	pop	{r4, r5, r7, pc}

080090ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80090ce:	b5b0      	push	{r4, r5, r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3304      	adds	r3, #4
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f8ee 	bl	80092c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 80090e4:	4605      	mov	r5, r0
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f8f2 	bl	80092d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 80090f4:	4603      	mov	r3, r0
    return VariantData::getElement(
 80090f6:	461a      	mov	r2, r3
 80090f8:	4621      	mov	r1, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7fe fb90 	bl	8007820 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8009100:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 8009102:	bf00      	nop
  }
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bdb0      	pop	{r4, r5, r7, pc}

0800910c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f85a 	bl	80091ce <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800911a:	4603      	mov	r3, r0
  }
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZNSt10_Head_baseILj0EP6ModuleLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f851 	bl	80091ea <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EE7_M_headERS3_>
 8009148:	4603      	mov	r3, r0
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4618      	mov	r0, r3
 800915e:	f000 f84f 	bl	8009200 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 8009162:	4603      	mov	r3, r0
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE10deallocateEPS4_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4619      	mov	r1, r3
 800917e:	68b8      	ldr	r0, [r7, #8]
 8009180:	f011 fb85 	bl	801a88e <_ZdlPvj>
      }
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <_ZSt11__addressofISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <_ZSt8_DestroyISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEvPT_>:
    _Destroy(_Tp* __pointer)
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff f908 	bl	80083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>
    }
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f85b 	bl	800927a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 80091c4:	4603      	mov	r3, r0
  }
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f87c 	bl	80092d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 80091e0:	4603      	mov	r3, r0
  }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 8009216:	b580      	push	{r7, lr}
 8009218:	b088      	sub	sp, #32
 800921a:	af02      	add	r7, sp, #8
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	4638      	mov	r0, r7
 8009220:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 8009224:	463b      	mov	r3, r7
 8009226:	4618      	mov	r0, r3
 8009228:	f7f7 ff97 	bl	800115a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 8009232:	2300      	movs	r3, #0
 8009234:	e01d      	b.n	8009272 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7fe fb2d 	bl	8007896 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7f8 fa60 	bl	8001708 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8009248:	4603      	mov	r3, r0
 800924a:	e003      	b.n	8009254 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7f8 f950 	bl	80014f2 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8009252:	4603      	mov	r3, r0
 8009254:	617b      	str	r3, [r7, #20]
    if (!obj)
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800925c:	2300      	movs	r3, #0
 800925e:	e008      	b.n	8009272 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 8009260:	6978      	ldr	r0, [r7, #20]
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	463b      	mov	r3, r7
 8009268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800926a:	f000 f841 	bl	80092f0 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800926e:	4603      	mov	r3, r0
 8009270:	bf00      	nop
  }
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800927a:	b590      	push	{r4, r7, lr}
 800927c:	b087      	sub	sp, #28
 800927e:	af02      	add	r7, sp, #8
 8009280:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3304      	adds	r3, #4
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f853 	bl	8009332 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800928c:	60f8      	str	r0, [r7, #12]
    if (!data)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 8009294:	2300      	movs	r3, #0
 8009296:	e00f      	b.n	80092b8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 8009298:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff ff34 	bl	800910c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 80092a4:	4602      	mov	r2, r0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	9200      	str	r2, [sp, #0]
 80092aa:	3314      	adds	r3, #20
 80092ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff ffb1 	bl	8009216 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 80092b4:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 80092b6:	bf00      	nop
  }
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}

080092c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7fe fb64 	bl	8007996 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 80092ce:	4603      	mov	r3, r0
  }
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fe fb4c 	bl	800797e <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 80092e6:	4603      	mov	r3, r0
  }
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	4638      	mov	r0, r7
 80092fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	463b      	mov	r3, r7
 8009304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7fa ff75 	bl	80041f6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800930c:	6178      	str	r0, [r7, #20]
  if (data)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	e008      	b.n	800932a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	463b      	mov	r3, r7
 800931e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 f812 	bl	800934a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8009326:	4603      	mov	r3, r0
 8009328:	bf00      	nop
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f85b 	bl	80093f6 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 8009340:	4603      	mov	r3, r0
  }
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800934a:	b580      	push	{r7, lr}
 800934c:	b08a      	sub	sp, #40	@ 0x28
 800934e:	af02      	add	r7, sp, #8
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	4638      	mov	r0, r7
 8009354:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8009358:	f107 0318 	add.w	r3, r7, #24
 800935c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935e:	4618      	mov	r0, r3
 8009360:	f7f8 fdae 	bl	8001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8009364:	f107 0318 	add.w	r3, r7, #24
 8009368:	4618      	mov	r0, r3
 800936a:	f7fa f84d 	bl	8003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800936e:	4603      	mov	r3, r0
 8009370:	f083 0301 	eor.w	r3, r3, #1
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800937a:	2300      	movs	r3, #0
 800937c:	e037      	b.n	80093ee <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800937e:	f107 0310 	add.w	r3, r7, #16
 8009382:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009384:	4618      	mov	r0, r3
 8009386:	f7f8 fd9b 	bl	8001ec0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800938a:	f107 0310 	add.w	r3, r7, #16
 800938e:	4618      	mov	r0, r3
 8009390:	f7fa f83a 	bl	8003408 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009394:	4603      	mov	r3, r0
 8009396:	f083 0301 	eor.w	r3, r3, #1
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e024      	b.n	80093ee <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa f856 	bl	800345a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	463b      	mov	r3, r7
 80093b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093b6:	f7ff f877 	bl	80084a8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f083 0301 	eor.w	r3, r3, #1
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e011      	b.n	80093ee <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f107 0218 	add.w	r2, r7, #24
 80093da:	ca06      	ldmia	r2, {r1, r2}
 80093dc:	f7f8 fce9 	bl	8001db2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 80093e0:	f107 0310 	add.w	r3, r7, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fa f820 	bl	800342a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80093ea:	4603      	mov	r3, r0
 80093ec:	bf00      	nop
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3720      	adds	r7, #32
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 80093f6:	b5b0      	push	{r4, r5, r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f81a 	bl	800943c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 8009408:	60f8      	str	r0, [r7, #12]
    if (!data)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 8009410:	2300      	movs	r3, #0
 8009412:	e00f      	b.n	8009434 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 8009414:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68dd      	ldr	r5, [r3, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ff5a 	bl	80092d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	4629      	mov	r1, r5
 800942a:	4620      	mov	r0, r4
 800942c:	f7fe fa0d 	bl	800784a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 8009430:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 8009432:	bf00      	nop
  }
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bdb0      	pop	{r4, r5, r7, pc}

0800943c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fe fab4 	bl	80079b2 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800944a:	4603      	mov	r3, r0
  }
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800945a:	4b0a      	ldr	r3, [pc, #40]	@ (8009484 <HAL_MspInit+0x30>)
 800945c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009460:	4a08      	ldr	r2, [pc, #32]	@ (8009484 <HAL_MspInit+0x30>)
 8009462:	f043 0302 	orr.w	r3, r3, #2
 8009466:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800946a:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <HAL_MspInit+0x30>)
 800946c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	58024400 	.word	0x58024400

08009488 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b0bc      	sub	sp, #240	@ 0xf0
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009490:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	609a      	str	r2, [r3, #8]
 800949c:	60da      	str	r2, [r3, #12]
 800949e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094a0:	f107 0318 	add.w	r3, r7, #24
 80094a4:	22c0      	movs	r2, #192	@ 0xc0
 80094a6:	2100      	movs	r1, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f011 feeb 	bl	801b284 <memset>
  if(hsd->Instance==SDMMC1)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a3c      	ldr	r2, [pc, #240]	@ (80095a4 <HAL_SD_MspInit+0x11c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d171      	bne.n	800959c <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80094b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094c8:	f107 0318 	add.w	r3, r7, #24
 80094cc:	4618      	mov	r0, r3
 80094ce:	f008 fbe1 	bl	8011c94 <HAL_RCCEx_PeriphCLKConfig>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80094d8:	f7fe f882 	bl	80075e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80094dc:	4b32      	ldr	r3, [pc, #200]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 80094de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80094e2:	4a31      	ldr	r2, [pc, #196]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 80094e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80094ec:	4b2e      	ldr	r3, [pc, #184]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 80094ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80094f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094fa:	4b2b      	ldr	r3, [pc, #172]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 80094fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009500:	4a29      	ldr	r2, [pc, #164]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 8009502:	f043 0304 	orr.w	r3, r3, #4
 8009506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800950a:	4b27      	ldr	r3, [pc, #156]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 800950c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009518:	4b23      	ldr	r3, [pc, #140]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 800951a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800951e:	4a22      	ldr	r2, [pc, #136]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 8009520:	f043 0308 	orr.w	r3, r3, #8
 8009524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009528:	4b1f      	ldr	r3, [pc, #124]	@ (80095a8 <HAL_SD_MspInit+0x120>)
 800952a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800952e:	f003 0308 	and.w	r3, r3, #8
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8009536:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800953a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800953e:	2302      	movs	r3, #2
 8009540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009544:	2300      	movs	r3, #0
 8009546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800954a:	2303      	movs	r3, #3
 800954c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009550:	230c      	movs	r3, #12
 8009552:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009556:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800955a:	4619      	mov	r1, r3
 800955c:	4813      	ldr	r0, [pc, #76]	@ (80095ac <HAL_SD_MspInit+0x124>)
 800955e:	f007 f9af 	bl	80108c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009562:	2304      	movs	r3, #4
 8009564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009574:	2303      	movs	r3, #3
 8009576:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800957a:	230c      	movs	r3, #12
 800957c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009580:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009584:	4619      	mov	r1, r3
 8009586:	480a      	ldr	r0, [pc, #40]	@ (80095b0 <HAL_SD_MspInit+0x128>)
 8009588:	f007 f99a 	bl	80108c0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800958c:	2200      	movs	r2, #0
 800958e:	2100      	movs	r1, #0
 8009590:	2031      	movs	r0, #49	@ 0x31
 8009592:	f004 fda4 	bl	800e0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009596:	2031      	movs	r0, #49	@ 0x31
 8009598:	f004 fdbb 	bl	800e112 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800959c:	bf00      	nop
 800959e:	37f0      	adds	r7, #240	@ 0xf0
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	52007000 	.word	0x52007000
 80095a8:	58024400 	.word	0x58024400
 80095ac:	58020800 	.word	0x58020800
 80095b0:	58020c00 	.word	0x58020c00

080095b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b0ba      	sub	sp, #232	@ 0xe8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095cc:	f107 0310 	add.w	r3, r7, #16
 80095d0:	22c0      	movs	r2, #192	@ 0xc0
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f011 fe55 	bl	801b284 <memset>
  if(huart->Instance==USART1)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a27      	ldr	r2, [pc, #156]	@ (800967c <HAL_UART_MspInit+0xc8>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d146      	bne.n	8009672 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80095e4:	f04f 0201 	mov.w	r2, #1
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095f6:	f107 0310 	add.w	r3, r7, #16
 80095fa:	4618      	mov	r0, r3
 80095fc:	f008 fb4a 	bl	8011c94 <HAL_RCCEx_PeriphCLKConfig>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8009606:	f7fd ffeb 	bl	80075e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800960a:	4b1d      	ldr	r3, [pc, #116]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 800960c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009610:	4a1b      	ldr	r2, [pc, #108]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 8009612:	f043 0310 	orr.w	r3, r3, #16
 8009616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800961a:	4b19      	ldr	r3, [pc, #100]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 800961c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009628:	4b15      	ldr	r3, [pc, #84]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 800962a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800962e:	4a14      	ldr	r2, [pc, #80]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <HAL_UART_MspInit+0xcc>)
 800963a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
 8009644:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009646:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800964a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800964e:	2302      	movs	r3, #2
 8009650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800965a:	2300      	movs	r3, #0
 800965c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009660:	2307      	movs	r3, #7
 8009662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009666:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800966a:	4619      	mov	r1, r3
 800966c:	4805      	ldr	r0, [pc, #20]	@ (8009684 <HAL_UART_MspInit+0xd0>)
 800966e:	f007 f927 	bl	80108c0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009672:	bf00      	nop
 8009674:	37e8      	adds	r7, #232	@ 0xe8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	40011000 	.word	0x40011000
 8009680:	58024400 	.word	0x58024400
 8009684:	58020000 	.word	0x58020000

08009688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800968c:	bf00      	nop
 800968e:	e7fd      	b.n	800968c <NMI_Handler+0x4>

08009690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009694:	bf00      	nop
 8009696:	e7fd      	b.n	8009694 <HardFault_Handler+0x4>

08009698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800969c:	bf00      	nop
 800969e:	e7fd      	b.n	800969c <MemManage_Handler+0x4>

080096a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <BusFault_Handler+0x4>

080096a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <UsageFault_Handler+0x4>

080096b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096be:	b480      	push	{r7}
 80096c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80096c2:	bf00      	nop
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80096d0:	bf00      	nop
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096de:	f004 fbbd 	bl	800de5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80096e2:	bf00      	nop
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80096ec:	4802      	ldr	r0, [pc, #8]	@ (80096f8 <SDMMC1_IRQHandler+0x10>)
 80096ee:	f00b fa3f 	bl	8014b70 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80096f2:	bf00      	nop
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	240003cc 	.word	0x240003cc

080096fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
	return 1;
 8009700:	2301      	movs	r3, #1
}
 8009702:	4618      	mov	r0, r3
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <_kill>:

int _kill(int pid, int sig)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009716:	f011 fe57 	bl	801b3c8 <__errno>
 800971a:	4603      	mov	r3, r0
 800971c:	2216      	movs	r2, #22
 800971e:	601a      	str	r2, [r3, #0]
	return -1;
 8009720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_exit>:

void _exit (int status)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009734:	f04f 31ff 	mov.w	r1, #4294967295
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ffe7 	bl	800970c <_kill>
	while (1) {}		/* Make sure we hang here */
 800973e:	bf00      	nop
 8009740:	e7fd      	b.n	800973e <_exit+0x12>

08009742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e00a      	b.n	800976a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009754:	f3af 8000 	nop.w
 8009758:	4601      	mov	r1, r0
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	60ba      	str	r2, [r7, #8]
 8009760:	b2ca      	uxtb	r2, r1
 8009762:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	3301      	adds	r3, #1
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	429a      	cmp	r2, r3
 8009770:	dbf0      	blt.n	8009754 <_read+0x12>
	}

return len;
 8009772:	687b      	ldr	r3, [r7, #4]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e009      	b.n	80097a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	60ba      	str	r2, [r7, #8]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f7fc ff20 	bl	80065dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	3301      	adds	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	dbf1      	blt.n	800978e <_write+0x12>
	}
	return len;
 80097aa:	687b      	ldr	r3, [r7, #4]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_close>:

int _close(int file)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	return -1;
 80097bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097dc:	605a      	str	r2, [r3, #4]
	return 0;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <_isatty>:

int _isatty(int file)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	return 1;
 80097f4:	2301      	movs	r3, #1
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
	return 0;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009824:	4a14      	ldr	r2, [pc, #80]	@ (8009878 <_sbrk+0x5c>)
 8009826:	4b15      	ldr	r3, [pc, #84]	@ (800987c <_sbrk+0x60>)
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009830:	4b13      	ldr	r3, [pc, #76]	@ (8009880 <_sbrk+0x64>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <_sbrk+0x64>)
 800983a:	4a12      	ldr	r2, [pc, #72]	@ (8009884 <_sbrk+0x68>)
 800983c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800983e:	4b10      	ldr	r3, [pc, #64]	@ (8009880 <_sbrk+0x64>)
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4413      	add	r3, r2
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	d207      	bcs.n	800985c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800984c:	f011 fdbc 	bl	801b3c8 <__errno>
 8009850:	4603      	mov	r3, r0
 8009852:	220c      	movs	r2, #12
 8009854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009856:	f04f 33ff 	mov.w	r3, #4294967295
 800985a:	e009      	b.n	8009870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800985c:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <_sbrk+0x64>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <_sbrk+0x64>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	4a05      	ldr	r2, [pc, #20]	@ (8009880 <_sbrk+0x64>)
 800986c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800986e:	68fb      	ldr	r3, [r7, #12]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	24080000 	.word	0x24080000
 800987c:	00000400 	.word	0x00000400
 8009880:	240004dc 	.word	0x240004dc
 8009884:	24000ce0 	.word	0x24000ce0

08009888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800988c:	4b37      	ldr	r3, [pc, #220]	@ (800996c <SystemInit+0xe4>)
 800988e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009892:	4a36      	ldr	r2, [pc, #216]	@ (800996c <SystemInit+0xe4>)
 8009894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800989c:	4b34      	ldr	r3, [pc, #208]	@ (8009970 <SystemInit+0xe8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	2b06      	cmp	r3, #6
 80098a6:	d807      	bhi.n	80098b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80098a8:	4b31      	ldr	r3, [pc, #196]	@ (8009970 <SystemInit+0xe8>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 030f 	bic.w	r3, r3, #15
 80098b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009970 <SystemInit+0xe8>)
 80098b2:	f043 0307 	orr.w	r3, r3, #7
 80098b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80098b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009974 <SystemInit+0xec>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009974 <SystemInit+0xec>)
 80098be:	f043 0301 	orr.w	r3, r3, #1
 80098c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80098c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009974 <SystemInit+0xec>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80098ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009974 <SystemInit+0xec>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4929      	ldr	r1, [pc, #164]	@ (8009974 <SystemInit+0xec>)
 80098d0:	4b29      	ldr	r3, [pc, #164]	@ (8009978 <SystemInit+0xf0>)
 80098d2:	4013      	ands	r3, r2
 80098d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80098d6:	4b26      	ldr	r3, [pc, #152]	@ (8009970 <SystemInit+0xe8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80098e2:	4b23      	ldr	r3, [pc, #140]	@ (8009970 <SystemInit+0xe8>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f023 030f 	bic.w	r3, r3, #15
 80098ea:	4a21      	ldr	r2, [pc, #132]	@ (8009970 <SystemInit+0xe8>)
 80098ec:	f043 0307 	orr.w	r3, r3, #7
 80098f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80098f2:	4b20      	ldr	r3, [pc, #128]	@ (8009974 <SystemInit+0xec>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80098f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009974 <SystemInit+0xec>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <SystemInit+0xec>)
 8009900:	2200      	movs	r2, #0
 8009902:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009904:	4b1b      	ldr	r3, [pc, #108]	@ (8009974 <SystemInit+0xec>)
 8009906:	4a1d      	ldr	r2, [pc, #116]	@ (800997c <SystemInit+0xf4>)
 8009908:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800990a:	4b1a      	ldr	r3, [pc, #104]	@ (8009974 <SystemInit+0xec>)
 800990c:	4a1c      	ldr	r2, [pc, #112]	@ (8009980 <SystemInit+0xf8>)
 800990e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009910:	4b18      	ldr	r3, [pc, #96]	@ (8009974 <SystemInit+0xec>)
 8009912:	4a1c      	ldr	r2, [pc, #112]	@ (8009984 <SystemInit+0xfc>)
 8009914:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009916:	4b17      	ldr	r3, [pc, #92]	@ (8009974 <SystemInit+0xec>)
 8009918:	2200      	movs	r2, #0
 800991a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800991c:	4b15      	ldr	r3, [pc, #84]	@ (8009974 <SystemInit+0xec>)
 800991e:	4a19      	ldr	r2, [pc, #100]	@ (8009984 <SystemInit+0xfc>)
 8009920:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <SystemInit+0xec>)
 8009924:	2200      	movs	r2, #0
 8009926:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009928:	4b12      	ldr	r3, [pc, #72]	@ (8009974 <SystemInit+0xec>)
 800992a:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <SystemInit+0xfc>)
 800992c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800992e:	4b11      	ldr	r3, [pc, #68]	@ (8009974 <SystemInit+0xec>)
 8009930:	2200      	movs	r2, #0
 8009932:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009934:	4b0f      	ldr	r3, [pc, #60]	@ (8009974 <SystemInit+0xec>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a0e      	ldr	r2, [pc, #56]	@ (8009974 <SystemInit+0xec>)
 800993a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800993e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009940:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <SystemInit+0xec>)
 8009942:	2200      	movs	r2, #0
 8009944:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009946:	4b10      	ldr	r3, [pc, #64]	@ (8009988 <SystemInit+0x100>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b10      	ldr	r3, [pc, #64]	@ (800998c <SystemInit+0x104>)
 800994c:	4013      	ands	r3, r2
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009952:	d202      	bcs.n	800995a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009954:	4b0e      	ldr	r3, [pc, #56]	@ (8009990 <SystemInit+0x108>)
 8009956:	2201      	movs	r2, #1
 8009958:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800995a:	4b0e      	ldr	r3, [pc, #56]	@ (8009994 <SystemInit+0x10c>)
 800995c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8009960:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009962:	bf00      	nop
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	e000ed00 	.word	0xe000ed00
 8009970:	52002000 	.word	0x52002000
 8009974:	58024400 	.word	0x58024400
 8009978:	eaf6ed7f 	.word	0xeaf6ed7f
 800997c:	02020200 	.word	0x02020200
 8009980:	01ff0000 	.word	0x01ff0000
 8009984:	01010280 	.word	0x01010280
 8009988:	5c001000 	.word	0x5c001000
 800998c:	ffff0000 	.word	0xffff0000
 8009990:	51008108 	.word	0x51008108
 8009994:	52004000 	.word	0x52004000

08009998 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	8bdb      	ldrh	r3, [r3, #30]
 80099b2:	2201      	movs	r2, #1
 80099b4:	4619      	mov	r1, r3
 80099b6:	f007 f933 	bl	8010c20 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 80099ba:	e007      	b.n	80099cc <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8bdb      	ldrh	r3, [r3, #30]
 80099c4:	2200      	movs	r2, #0
 80099c6:	4619      	mov	r1, r3
 80099c8:	f007 f92a 	bl	8010c20 <HAL_GPIO_WritePin>
        }
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE>:

/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

unique_ptr<Module> createBlink(const JsonObject& config) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b098      	sub	sp, #96	@ 0x60
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
    const char* pin = config["Pin"];
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	4a24      	ldr	r2, [pc, #144]	@ (8009a74 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa0>)
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f8b8 	bl	8009b5c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80099ec:	f107 0314 	add.w	r3, r7, #20
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f9 ffc1 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80099f6:	4603      	mov	r3, r0
 80099f8:	613b      	str	r3, [r7, #16]
    int frequency = config["Frequency"];
 80099fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009a78 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa4>)
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f9 ffc4 	bl	8003990 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8009a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f8ca 	bl	8009ba6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8009a12:	4603      	mov	r3, r0
 8009a14:	60fb      	str	r3, [r7, #12]
    uint32_t threadFreq = config["ThreadFreq"];
 8009a16:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009a1a:	4a18      	ldr	r2, [pc, #96]	@ (8009a7c <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa8>)
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f8cd 	bl	8009bbe <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8009a24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f9 ffd6 	bl	80039da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	60bb      	str	r3, [r7, #8]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4811      	ldr	r0, [pc, #68]	@ (8009a80 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xac>)
 8009a3a:	f011 fab9 	bl	801afb0 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 8009a3e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8009a42:	f107 030c 	add.w	r3, r7, #12
 8009a46:	f107 0208 	add.w	r2, r7, #8
 8009a4a:	f107 0110 	add.w	r1, r7, #16
 8009a4e:	f000 f8db 	bl	8009c08 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009a52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f949 	bl	8009cf0 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1I5BlinkS1_IS5_EvEEOS_IT_T0_E>
 8009a5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f911 	bl	8009c8a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 8009a68:	bf00      	nop
}
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	3760      	adds	r7, #96	@ 0x60
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	0801c724 	.word	0x0801c724
 8009a78:	0801c728 	.word	0x0801c728
 8009a7c:	0801c734 	.word	0x0801c734
 8009a80:	0801c740 	.word	0x0801c740

08009a84 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 f845 	bl	800ab24 <_ZN6ModuleC1Ev>
 8009a9a:	4a15      	ldr	r2, [pc, #84]	@ (8009af0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	601a      	str	r2, [r3, #0]
	bState(false),
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	751a      	strb	r2, [r3, #20]
    periodCount(_threadFreq / _freq),
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3320      	adds	r3, #32
 8009ac0:	f107 0214 	add.w	r2, r7, #20
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f92e 	bl	8009d28 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3320      	adds	r3, #32
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 f979 	bl	8009dc8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	7d1b      	ldrb	r3, [r3, #20]
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7ff ff5a 	bl	8009998 <_ZN3Pin3setEb>
}
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	0801cb6c 	.word	0x0801cb6c

08009af4 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	++blinkCount;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69da      	ldr	r2, [r3, #28]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d315      	bcc.n	8009b40 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7d1b      	ldrb	r3, [r3, #20]
 8009b18:	f083 0301 	eor.w	r3, r3, #1
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	751a      	strb	r2, [r3, #20]
        blinkPin->set(bState);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3320      	adds	r3, #32
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f94e 	bl	8009dc8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	7d1b      	ldrb	r3, [r3, #20]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7ff ff2f 	bl	8009998 <_ZN3Pin3setEb>
        blinkCount = 0;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	61da      	str	r2, [r3, #28]
	}
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	return;
 8009b50:	bf00      	nop
}
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08c      	sub	sp, #48	@ 0x30
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	f107 0314 	add.w	r3, r7, #20
 8009b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b72:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b76:	f107 031c 	add.w	r3, r7, #28
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f93a 	bl	8009df6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8009b82:	466a      	mov	r2, sp
 8009b84:	f107 0320 	add.w	r3, r7, #32
 8009b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f107 0214 	add.w	r2, r7, #20
 8009b96:	ca06      	ldmia	r2, {r1, r2}
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7fa f85c 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	3728      	adds	r7, #40	@ 0x28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
    return as<T>();
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f934 	bl	8009e1c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 8009bb4:	4603      	mov	r3, r0
  }
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b08c      	sub	sp, #48	@ 0x30
 8009bc2:	af02      	add	r7, sp, #8
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8009bd8:	f107 031c 	add.w	r3, r7, #28
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fe1f 	bl	8008822 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8009be4:	466a      	mov	r2, sp
 8009be6:	f107 0320 	add.w	r3, r7, #32
 8009bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bee:	e882 0003 	stmia.w	r2, {r0, r1}
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	f107 0214 	add.w	r2, r7, #20
 8009bf8:	ca06      	ldmia	r2, {r1, r2}
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f7fa f82b 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	3728      	adds	r7, #40	@ 0x28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b08c      	sub	sp, #48	@ 0x30
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009c16:	2024      	movs	r0, #36	@ 0x24
 8009c18:	f010 fe4a 	bl	801a8b0 <_Znwj>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461d      	mov	r5, r3
 8009c20:	68b8      	ldr	r0, [r7, #8]
 8009c22:	f000 f91d 	bl	8009e60 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009c26:	4603      	mov	r3, r0
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f010 fe4f 	bl	801a8d2 <_ZNSaIcEC1Ev>
 8009c34:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009c38:	f107 0314 	add.w	r3, r7, #20
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f9 fe14 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7fe fce2 	bl	800860e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	681c      	ldr	r4, [r3, #0]
 8009c4e:	6838      	ldr	r0, [r7, #0]
 8009c50:	f000 f911 	bl	8009e76 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8009c54:	4603      	mov	r3, r0
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f107 0114 	add.w	r1, r7, #20
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7ff ff10 	bl	8009a84 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 8009c64:	4629      	mov	r1, r5
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f920 	bl	8009eac <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4618      	mov	r0, r3
 8009c72:	f010 fec6 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f010 fe2a 	bl	801a8d4 <_ZNSaIcED1Ev>
 8009c80:	bf00      	nop
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	3730      	adds	r7, #48	@ 0x30
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bdb0      	pop	{r4, r5, r7, pc}

08009c8a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f918 	bl	8009eca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 8009c9a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00c      	beq.n	8009cbe <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f91d 	bl	8009ee4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 8009caa:	4604      	mov	r4, r0
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f926 	bl	8009efe <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 f953 	bl	8009f64 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
      }
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd90      	pop	{r4, r7, pc}

08009cce <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I5BlinkEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f968 	bl	8009fb6 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1IS1_I5BlinkEEEPS0_OT_>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1I5BlinkS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 8009cf0:	b5b0      	push	{r4, r5, r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009cfa:	687c      	ldr	r4, [r7, #4]
 8009cfc:	6838      	ldr	r0, [r7, #0]
 8009cfe:	f000 f942 	bl	8009f86 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 8009d02:	4605      	mov	r5, r0
 8009d04:	6838      	ldr	r0, [r7, #0]
 8009d06:	f000 f8ed 	bl	8009ee4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f947 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	4629      	mov	r1, r5
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f7ff ffd8 	bl	8009cce <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I5BlinkEEEPS0_OT_>
	{ }
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bdb0      	pop	{r4, r5, r7, pc}

08009d28 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b08b      	sub	sp, #44	@ 0x2c
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009d34:	2044      	movs	r0, #68	@ 0x44
 8009d36:	f010 fdbb 	bl	801a8b0 <_Znwj>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	461c      	mov	r4, r3
 8009d3e:	68b8      	ldr	r0, [r7, #8]
 8009d40:	f000 f94f 	bl	8009fe2 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8009d44:	4602      	mov	r2, r0
 8009d46:	f107 0310 	add.w	r3, r7, #16
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f010 ff58 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f844 	bl	8009de0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	f107 0310 	add.w	r3, r7, #16
 8009d60:	4619      	mov	r1, r3
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7f6 ff66 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f954 	bl	800a018 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009d70:	f107 0310 	add.w	r3, r7, #16
 8009d74:	4618      	mov	r0, r3
 8009d76:	f010 fe44 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d7a:	bf00      	nop
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	372c      	adds	r7, #44	@ 0x2c
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd90      	pop	{r4, r7, pc}

08009d84 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f951 	bl	800a036 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 8009d94:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00c      	beq.n	8009db8 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f956 	bl	800a050 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 8009da4:	4604      	mov	r4, r0
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f95f 	bl	800a06a <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 8009dac:	4603      	mov	r3, r0
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f971 	bl	800a09a <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
      }
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd90      	pop	{r4, r7, pc}

08009dc8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	return get();
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f975 	bl	800a0c0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 8009dd6:	4603      	mov	r3, r0
      }
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8009e00:	6838      	ldr	r0, [r7, #0]
 8009e02:	f000 f96a 	bl	800a0da <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009e06:	4602      	mov	r2, r0
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f96f 	bl	800a0f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 8009e12:	bf00      	nop
}
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8009e2c:	6938      	ldr	r0, [r7, #16]
 8009e2e:	f7fa fe24 	bl	8004a7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8009e32:	4604      	mov	r4, r0
 8009e34:	6938      	ldr	r0, [r7, #16]
 8009e36:	f7fa fcae 	bl	8004796 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	f107 0308 	add.w	r3, r7, #8
 8009e40:	4621      	mov	r1, r4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f7 fd49 	bl	80018da <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8009e48:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e52:	f000 f95c 	bl	800a10e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	371c      	adds	r7, #28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}

08009e60 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f954 	bl	800a14a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff ffe6 	bl	8009e8c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f94c 	bl	800a172 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f94c 	bl	800a18c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	4a08      	ldr	r2, [pc, #32]	@ (8009f40 <_ZN5BlinkD1Ev+0x2c>)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3320      	adds	r3, #32
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ff2c 	bl	8009d84 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fe12 	bl	800ab58 <_ZN6ModuleD1Ev>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	0801cb6c 	.word	0x0801cb6c

08009f44 <_ZN5BlinkD0Ev>:
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ffe1 	bl	8009f14 <_ZN5BlinkD1Ev>
 8009f52:	2124      	movs	r1, #36	@ 0x24
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f010 fc9a 	bl	801a88e <_ZdlPvj>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	3204      	adds	r2, #4
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	4790      	blx	r2
      }
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 f908 	bl	800a1a6 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 8009f96:	4603      	mov	r3, r0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1IS1_I5BlinkEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8009fb6:	b590      	push	{r4, r7, lr}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009fc2:	68fc      	ldr	r4, [r7, #12]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff ffeb 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	f107 0308 	add.w	r3, r7, #8
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f8fc 	bl	800a1d0 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1IRS1_S2_I5BlinkELb1EEEOT_OT0_>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd90      	pop	{r4, r7, pc}

08009fe2 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4611      	mov	r1, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f8fa 	bl	800a202 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff ffe6 	bl	8009ff8 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	f000 f8f2 	bl	800a22a <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a046:	4603      	mov	r3, r0
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 f8f2 	bl	800a244 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800a060:	4603      	mov	r3, r0
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4618      	mov	r0, r3
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <_ZN3PinD1Ev>:
class Pin
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f010 fcb9 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800a09a:	b590      	push	{r4, r7, lr}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a0a4:	683c      	ldr	r4, [r7, #0]
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	d006      	beq.n	800a0b8 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff ffe8 	bl	800a080 <_ZN3PinD1Ev>
 800a0b0:	2144      	movs	r1, #68	@ 0x44
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f010 fbeb 	bl	801a88e <_ZdlPvj>
      }
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd90      	pop	{r4, r7, pc}

0800a0c0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f8c7 	bl	800a25e <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a0e2:	687b      	ldr	r3, [r7, #4]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7f7 f813 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	463b      	mov	r3, r7
 800a116:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800a11a:	463b      	mov	r3, r7
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f9 f95b 	bl	80033d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800a122:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800a124:	463b      	mov	r3, r7
 800a126:	4618      	mov	r0, r3
 800a128:	f7f9 f962 	bl	80033f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800a12c:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 f8a0 	bl	800a27c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800a13c:	4603      	mov	r3, r0
 800a13e:	e000      	b.n	800a142 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800a140:	2300      	movs	r3, #0
  }
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a14a:	b590      	push	{r4, r7, lr}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f922 	bl	800a3a0 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a15c:	683c      	ldr	r4, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff feb3 	bl	8009eca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800a164:	4603      	mov	r3, r0
 800a166:	601c      	str	r4, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd90      	pop	{r4, r7, pc}

0800a172 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f91c 	bl	800a3ba <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a182:	4603      	mov	r3, r0
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f91b 	bl	800a3d2 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a19c:	4603      	mov	r3, r0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fe8b 	bl	8009eca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fe85 	bl	8009eca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
	return __p;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
      }
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1IRS1_S2_I5BlinkELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800a1d0:	b5b0      	push	{r4, r5, r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a1dc:	68fc      	ldr	r4, [r7, #12]
 800a1de:	68b8      	ldr	r0, [r7, #8]
 800a1e0:	f000 f903 	bl	800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff feda 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 f904 	bl	800a400 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1IRS1_JS2_I5BlinkEEvEEOT_DpOT0_>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bdb0      	pop	{r4, r5, r7, pc}

0800a202 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a202:	b590      	push	{r4, r7, lr}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f912 	bl	800a438 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a214:	683c      	ldr	r4, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff ff0d 	bl	800a036 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800a21c:	4603      	mov	r3, r0
 800a21e:	601c      	str	r4, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	bd90      	pop	{r4, r7, pc}

0800a22a <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f90c 	bl	800a452 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a23a:	4603      	mov	r3, r0
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f90b 	bl	800a46a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a254:	4603      	mov	r3, r0
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f90a 	bl	800a482 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a26e:	4603      	mov	r3, r0
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7f8 f8bb 	bl	8002404 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800a28e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	791b      	ldrb	r3, [r3, #4]
 800a294:	3b04      	subs	r3, #4
 800a296:	2b1a      	cmp	r3, #26
 800a298:	d87c      	bhi.n	800a394 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a353 	.word	0x0800a353
 800a2a4:	0800a361 	.word	0x0800a361
 800a2a8:	0800a30d 	.word	0x0800a30d
 800a2ac:	0800a395 	.word	0x0800a395
 800a2b0:	0800a395 	.word	0x0800a395
 800a2b4:	0800a395 	.word	0x0800a395
 800a2b8:	0800a313 	.word	0x0800a313
 800a2bc:	0800a395 	.word	0x0800a395
 800a2c0:	0800a321 	.word	0x0800a321
 800a2c4:	0800a395 	.word	0x0800a395
 800a2c8:	0800a371 	.word	0x0800a371
 800a2cc:	0800a395 	.word	0x0800a395
 800a2d0:	0800a395 	.word	0x0800a395
 800a2d4:	0800a395 	.word	0x0800a395
 800a2d8:	0800a395 	.word	0x0800a395
 800a2dc:	0800a395 	.word	0x0800a395
 800a2e0:	0800a395 	.word	0x0800a395
 800a2e4:	0800a395 	.word	0x0800a395
 800a2e8:	0800a395 	.word	0x0800a395
 800a2ec:	0800a395 	.word	0x0800a395
 800a2f0:	0800a395 	.word	0x0800a395
 800a2f4:	0800a395 	.word	0x0800a395
 800a2f8:	0800a32f 	.word	0x0800a32f
 800a2fc:	0800a395 	.word	0x0800a395
 800a300:	0800a341 	.word	0x0800a341
 800a304:	0800a395 	.word	0x0800a395
 800a308:	0800a383 	.word	0x0800a383
        return content_.asBoolean;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	e041      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f8c0 	bl	800a49c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800a31c:	4603      	mov	r3, r0
 800a31e:	e03a      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f8ca 	bl	800a4be <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800a32a:	4603      	mov	r3, r0
 800a32c:	e033      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	4610      	mov	r0, r2
 800a336:	4619      	mov	r1, r3
 800a338:	f000 f8d2 	bl	800a4e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800a33c:	4603      	mov	r3, r0
 800a33e:	e02a      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	f000 f8dc 	bl	800a506 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800a34e:	4603      	mov	r3, r0
 800a350:	e021      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4618      	mov	r0, r3
 800a358:	f000 f8e8 	bl	800a52c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800a35c:	4603      	mov	r3, r0
 800a35e:	e01a      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3308      	adds	r3, #8
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f8e0 	bl	800a52c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800a36c:	4603      	mov	r3, r0
 800a36e:	e012      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	edd3 7a00 	vldr	s15, [r3]
 800a376:	eeb0 0a67 	vmov.f32	s0, s15
 800a37a:	f000 f8eb 	bl	800a554 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800a37e:	4603      	mov	r3, r0
 800a380:	e009      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	ed93 7b00 	vldr	d7, [r3]
 800a388:	eeb0 0b47 	vmov.f64	d0, d7
 800a38c:	f000 f8fa 	bl	800a584 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800a390:	4603      	mov	r3, r0
 800a392:	e000      	b.n	800a396 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800a394:	2300      	movs	r3, #0
  }
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop

0800a3a0 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 f902 	bl	800a5b4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f906 	bl	800a5d4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f907 	bl	800a5ee <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1IRS1_JS2_I5BlinkEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff fdc7 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a412:	4603      	mov	r3, r0
 800a414:	4619      	mov	r1, r3
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 f8f5 	bl	800a606 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1IS0_I5BlinkEEEOT_>
 800a41c:	68fc      	ldr	r4, [r7, #12]
 800a41e:	68b8      	ldr	r0, [r7, #8]
 800a420:	f7ff ffe3 	bl	800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>
 800a424:	4603      	mov	r3, r0
 800a426:	4619      	mov	r1, r3
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 f8fe 	bl	800a62a <_ZNSt10_Head_baseILj0EP6ModuleLb0EEC1IRS1_EEOT_>
	{ }
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	bd90      	pop	{r4, r7, pc}

0800a438 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f902 	bl	800a64c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f906 	bl	800a66c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800a460:	4603      	mov	r3, r0
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b082      	sub	sp, #8
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f907 	bl	800a686 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a478:	4603      	mov	r3, r0
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 f906 	bl	800a69e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a492:	4603      	mov	r3, r0
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f906 	bl	800a6b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	e000      	b.n	800a4b6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f907 	bl	800a6da <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	e000      	b.n	800a4d8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a4ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4ee:	f000 f8ff 	bl	800a6f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	e000      	b.n	800a4fe <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a514:	f000 f904 	bl	800a720 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	e000      	b.n	800a524 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800a534:	f107 0308 	add.w	r3, r7, #8
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f8 f9c6 	bl	80028cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800a540:	f107 0308 	add.w	r3, r7, #8
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f911 	bl	800a76c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a55e:	ed97 0a01 	vldr	s0, [r7, #4]
 800a562:	f000 f94a 	bl	800a7fa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d006      	beq.n	800a57a <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800a56c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a574:	ee17 3a90 	vmov	r3, s15
 800a578:	e000      	b.n	800a57c <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800a58e:	ed97 0b00 	vldr	d0, [r7]
 800a592:	f000 f95f 	bl	800a854 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d006      	beq.n	800a5aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800a59c:	ed97 7b00 	vldr	d7, [r7]
 800a5a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a5a4:	ee17 3a90 	vmov	r3, s15
 800a5a8:	e000      	b.n	800a5ac <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f96f 	bl	800a8a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f977 	bl	800a8b8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f978 	bl	800a8d4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f977 	bl	800a8ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1IS0_I5BlinkEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800a610:	6838      	ldr	r0, [r7, #0]
 800a612:	f7ff fcc5 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a616:	4603      	mov	r3, r0
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f971 	bl	800a902 <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1IS0_I5BlinkEEEOT_>
	{ }
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZNSt10_Head_baseILj0EP6ModuleLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f7ff fed8 	bl	800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>
 800a63a:	4603      	mov	r3, r0
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f967 	bl	800a928 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 f96f 	bl	800a940 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f970 	bl	800a95c <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800a67c:	4603      	mov	r3, r0
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f96f 	bl	800a972 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800a694:	4603      	mov	r3, r0
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f96f 	bl	800a98a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800a6be:	f000 f8c1 	bl	800a844 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bf94      	ite	ls
 800a6cc:	2301      	movls	r3, #1
 800a6ce:	2300      	movhi	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  return true;
 800a6e2:	2301      	movs	r3, #1
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a6f0:	b5b0      	push	{r4, r5, r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800a6fa:	f000 f8a3 	bl	800a844 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800a6fe:	4603      	mov	r3, r0
 800a700:	17da      	asrs	r2, r3, #31
 800a702:	461c      	mov	r4, r3
 800a704:	4615      	mov	r5, r2
 800a706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70a:	4294      	cmp	r4, r2
 800a70c:	eb75 0303 	sbcs.w	r3, r5, r3
 800a710:	bf2c      	ite	cs
 800a712:	2301      	movcs	r3, #1
 800a714:	2300      	movcc	r3, #0
 800a716:	b2db      	uxtb	r3, r3
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bdb0      	pop	{r4, r5, r7, pc}

0800a720 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a72c:	f000 f85c 	bl	800a7e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800a730:	4603      	mov	r3, r0
 800a732:	17da      	asrs	r2, r3, #31
 800a734:	4698      	mov	r8, r3
 800a736:	4691      	mov	r9, r2
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	4542      	cmp	r2, r8
 800a73e:	eb73 0309 	sbcs.w	r3, r3, r9
 800a742:	db0d      	blt.n	800a760 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800a744:	f000 f87e 	bl	800a844 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800a748:	4603      	mov	r3, r0
 800a74a:	17da      	asrs	r2, r3, #31
 800a74c:	461c      	mov	r4, r3
 800a74e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a754:	4294      	cmp	r4, r2
 800a756:	eb75 0303 	sbcs.w	r3, r5, r3
 800a75a:	db01      	blt.n	800a760 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a76c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d82e      	bhi.n	800a7dc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800a77e:	a201      	add	r2, pc, #4	@ (adr r2, 800a784 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a795 	.word	0x0800a795
 800a788:	0800a7a7 	.word	0x0800a7a7
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	0800a7cb 	.word	0x0800a7cb
        return convertNumber<T>(value_.asFloat);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	edd3 7a02 	vldr	s15, [r3, #8]
 800a79a:	eeb0 0a67 	vmov.f32	s0, s15
 800a79e:	f7ff fed9 	bl	800a554 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	e01b      	b.n	800a7de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f7ff fea9 	bl	800a506 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	e012      	b.n	800a7de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f7ff fe8d 	bl	800a4e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	e009      	b.n	800a7de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a7d0:	eeb0 0b47 	vmov.f64	d0, d7
 800a7d4:	f7ff fed6 	bl	800a584 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	e000      	b.n	800a7de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800a7dc:	2300      	movs	r3, #0
  }
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop

0800a7e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a7ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800a804:	f7ff fff0 	bl	800a7e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800a808:	ee07 0a90 	vmov	s15, r0
 800a80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a810:	ed97 7a01 	vldr	s14, [r7, #4]
 800a814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	db0d      	blt.n	800a83a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800a81e:	2000      	movs	r0, #0
 800a820:	f000 f8c0 	bl	800a9a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800a824:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800a828:	edd7 7a01 	vldr	s15, [r7, #4]
 800a82c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a834:	d801      	bhi.n	800a83a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800a836:	2301      	movs	r3, #1
 800a838:	e000      	b.n	800a83c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a848:	f7ff ffce 	bl	800a7e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800a84c:	4603      	mov	r3, r0
 800a84e:	43db      	mvns	r3, r3
  }
 800a850:	4618      	mov	r0, r3
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800a85e:	f7ff ffc3 	bl	800a7e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800a862:	ee07 0a90 	vmov	s15, r0
 800a866:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a86a:	ed97 6b00 	vldr	d6, [r7]
 800a86e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	db0e      	blt.n	800a896 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800a878:	f7ff ffe4 	bl	800a844 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800a87c:	ee07 0a90 	vmov	s15, r0
 800a880:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800a884:	ed97 6b00 	vldr	d6, [r7]
 800a888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a890:	d801      	bhi.n	800a896 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f88a 	bl	800a9c2 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f870 	bl	800a9d8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1IS0_I5BlinkEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800a902:	b590      	push	{r4, r7, lr}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800a90c:	687c      	ldr	r4, [r7, #4]
 800a90e:	6838      	ldr	r0, [r7, #0]
 800a910:	f7ff fb46 	bl	8009fa0 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a914:	4603      	mov	r3, r0
 800a916:	4619      	mov	r1, r3
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 f868 	bl	800a9ee <_ZNSt14default_deleteI6ModuleEC1I5BlinkvEERKS_IT_E>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	bd90      	pop	{r4, r7, pc}

0800a928 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f868 	bl	800aa06 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f84e 	bl	800aa1c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800a980:	4603      	mov	r3, r0
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f84c 	bl	800aa32 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800a99a:	4603      	mov	r3, r0
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800a9ac:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800a9b0:	f7fa ff44 	bl	800583c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800a9b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a9b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <_ZNSt14default_deleteI6ModuleEC1I5BlinkvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
#include "debug.h"


Debug::Debug(std::string portAndPin, bool bstate) :
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b08b      	sub	sp, #44	@ 0x2c
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
    bState(bstate)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 f863 	bl	800ab24 <_ZN6ModuleC1Ev>
 800aa5e:	4a12      	ldr	r2, [pc, #72]	@ (800aaa8 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x60>)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	79fa      	ldrb	r2, [r7, #7]
 800aa68:	751a      	strb	r2, [r3, #20]
{
	this->debugPin = new Pin(portAndPin, OUTPUT);
 800aa6a:	2044      	movs	r0, #68	@ 0x44
 800aa6c:	f00f ff20 	bl	801a8b0 <_Znwj>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461c      	mov	r4, r3
 800aa74:	f107 0310 	add.w	r3, r7, #16
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f010 f8c1 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	2201      	movs	r2, #1
 800aa86:	4619      	mov	r1, r3
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f7f6 f8d3 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	619c      	str	r4, [r3, #24]
 800aa92:	f107 0310 	add.w	r3, r7, #16
 800aa96:	4618      	mov	r0, r3
 800aa98:	f00f ffb3 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	372c      	adds	r7, #44	@ 0x2c
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd90      	pop	{r4, r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0801cb90 	.word	0x0801cb90

0800aaac <_ZN5Debug6updateEv>:

void Debug::update(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	this->debugPin->set(bState);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7d1b      	ldrb	r3, [r3, #20]
 800aabc:	4619      	mov	r1, r3
 800aabe:	4610      	mov	r0, r2
 800aac0:	f7fe ff6a 	bl	8009998 <_ZN3Pin3setEb>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <_ZN5Debug10slowUpdateEv>:

void Debug::slowUpdate(void)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	return;
 800aad4:	bf00      	nop
}
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <_ZN5DebugD1Ev>:
#include <string>

#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class Debug : public Module
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	4a05      	ldr	r2, [pc, #20]	@ (800ab00 <_ZN5DebugD1Ev+0x20>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f831 	bl	800ab58 <_ZN6ModuleD1Ev>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	0801cb90 	.word	0x0801cb90

0800ab04 <_ZN5DebugD0Ev>:
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff ffe7 	bl	800aae0 <_ZN5DebugD1Ev>
 800ab12:	211c      	movs	r1, #28
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f00f feba 	bl	801a88e <_ZdlPvj>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	4a08      	ldr	r2, [pc, #32]	@ (800ab50 <_ZN6ModuleC1Ev+0x2c>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800ab3e:	4805      	ldr	r0, [pc, #20]	@ (800ab54 <_ZN6ModuleC1Ev+0x30>)
 800ab40:	f010 faa6 	bl	801b090 <puts>
}
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	0801cbb4 	.word	0x0801cbb4
 800ab54:	0801c7ac 	.word	0x0801c7ac

0800ab58 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4a04      	ldr	r2, [pc, #16]	@ (800ab74 <_ZN6ModuleD1Ev+0x1c>)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	0801cbb4 	.word	0x0801cbb4

0800ab78 <_ZN6ModuleD0Ev>:
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff ffe9 	bl	800ab58 <_ZN6ModuleD1Ev>
 800ab86:	2114      	movs	r1, #20
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f00f fe80 	bl	801a88e <_ZdlPvj>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	++this->counter;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	db08      	blt.n	800abc8 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3310      	adds	r3, #16
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	4798      	blx	r3
		this->counter = 0;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	4798      	blx	r3
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <_ZN6Module9configureEv>:
void Module::configure(){}
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <_ZN13ModuleFactoryC1Ev>:
    ModuleCreator createServoModule(const char* modN);
    ModuleCreator createBaseModule(const char* modN);
    //unordered_map<const char*, unordered_map<const char*, ModuleCreator>> moduleCreators;

    // Private constructor for singleton
    ModuleFactory() {};
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
	...

0800ac58 <_ZN13ModuleFactory16createBaseModuleEPKc>:

#include "moduleList.h"
#include "moduleFactory.h"


ModuleCreator ModuleFactory::createBaseModule(const char* modN) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Stepgen") == 0)
 800ac62:	4907      	ldr	r1, [pc, #28]	@ (800ac80 <_ZN13ModuleFactory16createBaseModuleEPKc+0x28>)
 800ac64:	6838      	ldr	r0, [r7, #0]
 800ac66:	f7f5 fb3b 	bl	80002e0 <strcmp>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <_ZN13ModuleFactory16createBaseModuleEPKc+0x1c>
        return createStepgen;
 800ac70:	4b04      	ldr	r3, [pc, #16]	@ (800ac84 <_ZN13ModuleFactory16createBaseModuleEPKc+0x2c>)
 800ac72:	e000      	b.n	800ac76 <_ZN13ModuleFactory16createBaseModuleEPKc+0x1e>

    if (strcmp(modN,"RCServo") == 0)
        return createRCServo;
*/

    return nullptr;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0801c804 	.word	0x0801c804
 800ac84:	0800c1d5 	.word	0x0800c1d5

0800ac88 <_ZN13ModuleFactory17createServoModuleEPKc>:

// Servo thread modules
ModuleCreator ModuleFactory::createServoModule(const char* modN) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Blink") == 0)
 800ac92:	4907      	ldr	r1, [pc, #28]	@ (800acb0 <_ZN13ModuleFactory17createServoModuleEPKc+0x28>)
 800ac94:	6838      	ldr	r0, [r7, #0]
 800ac96:	f7f5 fb23 	bl	80002e0 <strcmp>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <_ZN13ModuleFactory17createServoModuleEPKc+0x1c>
        return createBlink;
 800aca0:	4b04      	ldr	r3, [pc, #16]	@ (800acb4 <_ZN13ModuleFactory17createServoModuleEPKc+0x2c>)
 800aca2:	e000      	b.n	800aca6 <_ZN13ModuleFactory17createServoModuleEPKc+0x1e>
        return createQEI;

    if (strcmp(modN,"Reset Pin") == 0)
        return createResetPin;
*/
    return nullptr;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	0801c80c 	.word	0x0801c80c
 800acb4:	080099d5 	.word	0x080099d5

0800acb8 <_ZN13ModuleFactory18createOnLoadModuleEPKc>:

    // On load modules
ModuleCreator ModuleFactory::createOnLoadModule(const char* modN) {
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
        return createTMC2209;

    if (strcmp(modN,"TMC5160") == 0)
        return createTMC5160;
*/
    return nullptr;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>:

// Create module based on thread and type
std::unique_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config) {
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b08b      	sub	sp, #44	@ 0x2c
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname,"Base") == 0)
 800acde:	492b      	ldr	r1, [pc, #172]	@ (800ad8c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xbc>)
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7f5 fafd 	bl	80002e0 <strcmp>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d112      	bne.n	800ad12 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x42>
        return createBaseModule(_mtype)(config);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	68b8      	ldr	r0, [r7, #8]
 800acf0:	f7ff ffb2 	bl	800ac58 <_ZN13ModuleFactory16createBaseModuleEPKc>
 800acf4:	4604      	mov	r4, r0
 800acf6:	f107 0310 	add.w	r3, r7, #16
 800acfa:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f8 fe06 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f107 0210 	add.w	r2, r7, #16
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	47a0      	blx	r4
        return createServoModule(_mtype)(config);
    if (strcmp(_tname,"On load") == 0)
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules

    return nullptr;
}
 800ad10:	e037      	b.n	800ad82 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"Servo") == 0)
 800ad12:	491f      	ldr	r1, [pc, #124]	@ (800ad90 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc0>)
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7f5 fae3 	bl	80002e0 <strcmp>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d112      	bne.n	800ad46 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x76>
        return createServoModule(_mtype)(config);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	68b8      	ldr	r0, [r7, #8]
 800ad24:	f7ff ffb0 	bl	800ac88 <_ZN13ModuleFactory17createServoModuleEPKc>
 800ad28:	4604      	mov	r4, r0
 800ad2a:	f107 0318 	add.w	r3, r7, #24
 800ad2e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7f8 fdec 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f107 0218 	add.w	r2, r7, #24
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	47a0      	blx	r4
}
 800ad44:	e01d      	b.n	800ad82 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"On load") == 0)
 800ad46:	4913      	ldr	r1, [pc, #76]	@ (800ad94 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc4>)
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f5 fac9 	bl	80002e0 <strcmp>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d112      	bne.n	800ad7a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xaa>
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	68b8      	ldr	r0, [r7, #8]
 800ad58:	f7ff ffae 	bl	800acb8 <_ZN13ModuleFactory18createOnLoadModuleEPKc>
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	f107 0320 	add.w	r3, r7, #32
 800ad62:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f8 fdd2 	bl	8003910 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f107 0220 	add.w	r2, r7, #32
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	47a0      	blx	r4
}
 800ad78:	e003      	b.n	800ad82 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    return nullptr;
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 f855 	bl	800ae2c <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1IS2_vEEDn>
}
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	372c      	adds	r7, #44	@ 0x2c
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd90      	pop	{r4, r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0801c814 	.word	0x0801c814
 800ad90:	0801c81c 	.word	0x0801c81c
 800ad94:	0801c824 	.word	0x0801c824

0800ad98 <_ZN13ModuleFactory11getInstanceEv>:

// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800ad98:	b598      	push	{r3, r4, r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800ad9c:	4b14      	ldr	r3, [pc, #80]	@ (800adf0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f3bf 8f5b 	dmb	ish
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf0c      	ite	eq
 800adac:	2301      	moveq	r3, #1
 800adae:	2300      	movne	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d017      	beq.n	800ade6 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800adb6:	480e      	ldr	r0, [pc, #56]	@ (800adf0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800adb8:	f00f fd6b 	bl	801a892 <__cxa_guard_acquire>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00c      	beq.n	800ade6 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800adcc:	2001      	movs	r0, #1
 800adce:	f00f fd6f 	bl	801a8b0 <_Znwj>
 800add2:	4603      	mov	r3, r0
 800add4:	461c      	mov	r4, r3
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff ff32 	bl	800ac40 <_ZN13ModuleFactoryC1Ev>
 800addc:	4b05      	ldr	r3, [pc, #20]	@ (800adf4 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800adde:	601c      	str	r4, [r3, #0]
 800ade0:	4803      	ldr	r0, [pc, #12]	@ (800adf0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800ade2:	f00f fd62 	bl	801a8aa <__cxa_guard_release>
    return instance;
 800ade6:	4b03      	ldr	r3, [pc, #12]	@ (800adf4 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
}
 800adea:	4618      	mov	r0, r3
 800adec:	bd98      	pop	{r3, r4, r7, pc}
 800adee:	bf00      	nop
 800adf0:	240004e4 	.word	0x240004e4
 800adf4:	240004e0 	.word	0x240004e0

0800adf8 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f823 	bl	800ae4e <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ffeb 	bl	800adf8 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1Ev>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1IS2_vEEDn>:
	constexpr unique_ptr(nullptr_t) noexcept
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
	: _M_t()
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff ffe7 	bl	800ae12 <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f805 	bl	800ae68 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1Ev>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f809 	bl	800ae88 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1Ev>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 f811 	bl	800aea0 <_ZNSt10_Head_baseILj0EP6ModuleLb0EEC1Ev>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1Ev>:
      _Tuple_impl()
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f813 	bl	800aebc <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1Ev>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZNSt10_Head_baseILj0EP6ModuleLb0EEC1Ev>:
      constexpr _Head_base()
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1Ev>:
      constexpr _Head_base()
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4618      	mov	r0, r3
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 800aed4:	b082      	sub	sp, #8
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	460b      	mov	r3, r1
 800aee4:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f5 ffdd 	bl	8000ea8 <_ZN9InterruptC1Ev>
 800aeee:	4a0e      	ldr	r2, [pc, #56]	@ (800af28 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3308      	adds	r3, #8
 800aefe:	f107 021c 	add.w	r2, r7, #28
 800af02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af06:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 800af0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7f5 ffd8 	bl	8000ec8 <_ZN9Interrupt8RegisterEiPS_>
}
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af24:	b002      	add	sp, #8
 800af26:	4770      	bx	lr
 800af28:	0801cbd8 	.word	0x0801cbd8

0800af2c <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d02a      	beq.n	800af92 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d107      	bne.n	800af54 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 800af54:	2300      	movs	r3, #0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d01b      	beq.n	800af92 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d102      	bne.n	800af6c <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	e00a      	b.n	800af82 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	68d2      	ldr	r2, [r2, #12]
 800af74:	1052      	asrs	r2, r2, #1
 800af76:	4413      	add	r3, r2
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	6892      	ldr	r2, [r2, #8]
 800af7e:	4413      	add	r3, r2
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6852      	ldr	r2, [r2, #4]
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68c9      	ldr	r1, [r1, #12]
 800af8a:	1049      	asrs	r1, r1, #1
 800af8c:	440a      	add	r2, r1
 800af8e:	4610      	mov	r0, r2
 800af90:	4798      	blx	r3
    }
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef>:

/**
 * @brief Constructs a new RemoraComms object.
 * @param spiType Pointer to the SPI instance.
 */
RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, volatile DMA_RxBuffer_t* ptrRxDMABuffer, SPI_TypeDef* spiType) :
 800af9c:	b590      	push	{r4, r7, lr}
 800af9e:	b093      	sub	sp, #76	@ 0x4c
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
	ptrRxData(ptrRxData),
	ptrTxData(ptrTxData),
	ptrRxDMABuffer(ptrRxDMABuffer),
	spiType(spiType)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff fdb9 	bl	800ab24 <_ZN6ModuleC1Ev>
 800afb2:	4a38      	ldr	r2, [pc, #224]	@ (800b094 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0xf8>)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	601a      	str	r2, [r3, #0]
	ptrRxData(ptrRxData),
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	61da      	str	r2, [r3, #28]
	ptrTxData(ptrTxData),
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	621a      	str	r2, [r3, #32]
	ptrRxDMABuffer(ptrRxDMABuffer),
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	625a      	str	r2, [r3, #36]	@ 0x24
	spiType(spiType)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afce:	629a      	str	r2, [r3, #40]	@ 0x28
{
    this->spiHandle.Instance = this->spiType;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	645a      	str	r2, [r3, #68]	@ 0x44
    this->status = false;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238

    this->irqNss = 		EXTI4_IRQn;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	220a      	movs	r2, #10
 800afe4:	879a      	strh	r2, [r3, #60]	@ 0x3c
    this->irqDMAtx = 	DMA1_Stream0_IRQn;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	220b      	movs	r2, #11
 800afea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    this->irqDMArx = 	DMA1_Stream1_IRQn;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	220c      	movs	r2, #12
 800aff2:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // Note: Avoid performing complex initialisation here as this constructor is called before DMA and cache setup.

    pin1 = new Pin("PE_11", OUTPUT);
 800aff4:	2044      	movs	r0, #68	@ 0x44
 800aff6:	f00f fc5b 	bl	801a8b0 <_Znwj>
 800affa:	4603      	mov	r3, r0
 800affc:	461c      	mov	r4, r3
 800affe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b002:	4618      	mov	r0, r3
 800b004:	f00f fc65 	bl	801a8d2 <_ZNSaIcEC1Ev>
 800b008:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b00c:	f107 0310 	add.w	r3, r7, #16
 800b010:	4921      	ldr	r1, [pc, #132]	@ (800b098 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0xfc>)
 800b012:	4618      	mov	r0, r3
 800b014:	f7f8 fc2a 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b018:	f107 0310 	add.w	r3, r7, #16
 800b01c:	2201      	movs	r2, #1
 800b01e:	4619      	mov	r1, r3
 800b020:	4620      	mov	r0, r4
 800b022:	f7f5 fe07 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	615c      	str	r4, [r3, #20]
 800b02a:	f107 0310 	add.w	r3, r7, #16
 800b02e:	4618      	mov	r0, r3
 800b030:	f00f fce7 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b038:	4618      	mov	r0, r3
 800b03a:	f00f fc4b 	bl	801a8d4 <_ZNSaIcED1Ev>
    pin2 = new Pin("PE_12", OUTPUT);
 800b03e:	2044      	movs	r0, #68	@ 0x44
 800b040:	f00f fc36 	bl	801a8b0 <_Znwj>
 800b044:	4603      	mov	r3, r0
 800b046:	461c      	mov	r4, r3
 800b048:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b04c:	4618      	mov	r0, r3
 800b04e:	f00f fc40 	bl	801a8d2 <_ZNSaIcEC1Ev>
 800b052:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b05a:	4910      	ldr	r1, [pc, #64]	@ (800b09c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0x100>)
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f8 fc05 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b066:	2201      	movs	r2, #1
 800b068:	4619      	mov	r1, r3
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7f5 fde2 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	619c      	str	r4, [r3, #24]
 800b074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b078:	4618      	mov	r0, r3
 800b07a:	f00f fcc2 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b07e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b082:	4618      	mov	r0, r3
 800b084:	f00f fc26 	bl	801a8d4 <_ZNSaIcED1Ev>
}
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4618      	mov	r0, r3
 800b08c:	374c      	adds	r7, #76	@ 0x4c
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd90      	pop	{r4, r7, pc}
 800b092:	bf00      	nop
 800b094:	0801cbe4 	.word	0x0801cbe4
 800b098:	0801c82c 	.word	0x0801c82c
 800b09c:	0801c834 	.word	0x0801c834

0800b0a0 <_ZN11RemoraComms4initEv>:
 * @brief Initializes the SPI, GPIO, and DMA configurations.
 *
 * Configures SPI as a slave device with associated GPIO and DMA settings.
 */
void RemoraComms::init()
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	@ 0x28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0a8:	f107 0314 	add.w	r3, r7, #20
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	605a      	str	r2, [r3, #4]
 800b0b2:	609a      	str	r2, [r3, #8]
 800b0b4:	60da      	str	r2, [r3, #12]
 800b0b6:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0bc:	4ab0      	ldr	r2, [pc, #704]	@ (800b380 <_ZN11RemoraComms4initEv+0x2e0>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	f040 815a 	bne.w	800b378 <_ZN11RemoraComms4initEv+0x2d8>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0c4:	4baf      	ldr	r3, [pc, #700]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b0c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0ca:	4aae      	ldr	r2, [pc, #696]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b0cc:	f043 0304 	orr.w	r3, r3, #4
 800b0d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b0d4:	4bab      	ldr	r3, [pc, #684]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b0d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b0e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800b0ea:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0f0:	f107 0314 	add.w	r3, r7, #20
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	48a4      	ldr	r0, [pc, #656]	@ (800b388 <_ZN11RemoraComms4initEv+0x2e8>)
 800b0f8:	f005 fbe2 	bl	80108c0 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 800b0fc:	48a3      	ldr	r0, [pc, #652]	@ (800b38c <_ZN11RemoraComms4initEv+0x2ec>)
 800b0fe:	f00f ffc7 	bl	801b090 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2207      	movs	r2, #7
 800b112:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	659a      	str	r2, [r3, #88]	@ 0x58
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        HAL_SPI_Init(&this->spiHandle);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3344      	adds	r3, #68	@ 0x44
 800b18e:	4618      	mov	r0, r3
 800b190:	f00a fee2 	bl	8015f58 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 800b194:	4b7b      	ldr	r3, [pc, #492]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b19a:	4a7a      	ldr	r2, [pc, #488]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b19c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b1a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b1a4:	4b77      	ldr	r3, [pc, #476]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b1a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 800b1b2:	4877      	ldr	r0, [pc, #476]	@ (800b390 <_ZN11RemoraComms4initEv+0x2f0>)
 800b1b4:	f00f ff6c 	bl	801b090 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1b8:	4b72      	ldr	r3, [pc, #456]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b1ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1be:	4a71      	ldr	r2, [pc, #452]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b1c8:	4b6e      	ldr	r3, [pc, #440]	@ (800b384 <_ZN11RemoraComms4initEv+0x2e4>)
 800b1ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	60bb      	str	r3, [r7, #8]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 800b1d6:	f107 0314 	add.w	r3, r7, #20
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	605a      	str	r2, [r3, #4]
 800b1e0:	609a      	str	r2, [r3, #8]
 800b1e2:	60da      	str	r2, [r3, #12]
 800b1e4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b1e6:	23f0      	movs	r3, #240	@ 0xf0
 800b1e8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1f6:	2305      	movs	r3, #5
 800b1f8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1fa:	f107 0314 	add.w	r3, r7, #20
 800b1fe:	4619      	mov	r1, r3
 800b200:	4861      	ldr	r0, [pc, #388]	@ (800b388 <_ZN11RemoraComms4initEv+0x2e8>)
 800b202:	f005 fb5d 	bl	80108c0 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 800b206:	4863      	ldr	r0, [pc, #396]	@ (800b394 <_ZN11RemoraComms4initEv+0x2f4>)
 800b208:	f00f ff42 	bl	801b090 <puts>

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a62      	ldr	r2, [pc, #392]	@ (800b398 <_ZN11RemoraComms4initEv+0x2f8>)
 800b210:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2226      	movs	r2, #38	@ 0x26
 800b218:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2240      	movs	r2, #64	@ 0x40
 800b220:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b232:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b24c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

        HAL_DMA_Init(&this->hdma_spi_tx);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	33cc      	adds	r3, #204	@ 0xcc
 800b264:	4618      	mov	r0, r3
 800b266:	f002 ffeb 	bl	800e240 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a45      	ldr	r2, [pc, #276]	@ (800b39c <_ZN11RemoraComms4initEv+0x2fc>)
 800b286:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2225      	movs	r2, #37	@ 0x25
 800b28e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2a8:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2c2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

        HAL_DMA_Init(&this->hdma_spi_rx);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f002 ffaf 	bl	800e240 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

        printf("	Initialising DMA for Memory to Memory transfer\n");
 800b2fa:	4829      	ldr	r0, [pc, #164]	@ (800b3a0 <_ZN11RemoraComms4initEv+0x300>)
 800b2fc:	f00f fec8 	bl	801b090 <puts>

        this->hdma_memtomem.Instance 				= DMA1_Stream2;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a28      	ldr	r2, [pc, #160]	@ (800b3a4 <_ZN11RemoraComms4initEv+0x304>)
 800b304:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
        this->hdma_memtomem.Init.Request 			= DMA_REQUEST_MEM2MEM;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
        this->hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2280      	movs	r2, #128	@ 0x80
 800b314:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
        this->hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b31e:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        this->hdma_memtomem.Init.MemInc 			= DMA_MINC_ENABLE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b328:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        this->hdma_memtomem.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        this->hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        this->hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        this->hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        this->hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2204      	movs	r2, #4
 800b350:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        this->hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2203      	movs	r2, #3
 800b358:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        this->hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        this->hdma_memtomem.Init.PeriphBurst 		= DMA_PBURST_SINGLE;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec

        HAL_DMA_Init(&this->hdma_memtomem);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800b372:	4618      	mov	r0, r3
 800b374:	f002 ff64 	bl	800e240 <HAL_DMA_Init>
    }
}
 800b378:	bf00      	nop
 800b37a:	3728      	adds	r7, #40	@ 0x28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	40013000 	.word	0x40013000
 800b384:	58024400 	.word	0x58024400
 800b388:	58020000 	.word	0x58020000
 800b38c:	0801c83c 	.word	0x0801c83c
 800b390:	0801c858 	.word	0x0801c858
 800b394:	0801c874 	.word	0x0801c874
 800b398:	40020010 	.word	0x40020010
 800b39c:	40020028 	.word	0x40020028
 800b3a0:	0801c890 	.word	0x0801c890
 800b3a4:	40020040 	.word	0x40020040

0800b3a8 <_ZN11RemoraComms5startEv>:
 * This function sets up the SPI and DMA communication by registering interrupt handlers for
 * NSS (slave select), DMA Rx, and DMA Tx. It also initializes the data buffers and starts
 * the multi-buffer DMA SPI communication.
 */
void RemoraComms::start()
{
 800b3a8:	b590      	push	{r4, r7, lr}
 800b3aa:	b08b      	sub	sp, #44	@ 0x2c
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt(
        this->irqNss,
        this,
        static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt)
    );
 800b3b0:	2010      	movs	r0, #16
 800b3b2:	f00f fa7d 	bl	801a8b0 <_Znwj>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	461c      	mov	r4, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f9b3 103c 	ldrsh.w	r1, [r3, #60]	@ 0x3c
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	4b53      	ldr	r3, [pc, #332]	@ (800b510 <_ZN11RemoraComms5startEv+0x168>)
 800b3c4:	60bb      	str	r3, [r7, #8]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7ff fd7f 	bl	800aed4 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
    NssInterrupt = new ModuleInterrupt(
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	631c      	str	r4, [r3, #48]	@ 0x30
    HAL_NVIC_SetPriority(this->irqNss, Config::SPI_NSS_IRQ_PRIORITY, 0);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2106      	movs	r1, #6
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f002 fe7a 	bl	800e0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqNss);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f002 fe8e 	bl	800e112 <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt(
        this->irqDMArx,
        this,
        static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt)
    );
 800b3f6:	2010      	movs	r0, #16
 800b3f8:	f00f fa5a 	bl	801a8b0 <_Znwj>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461c      	mov	r4, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f9b3 103e 	ldrsh.w	r1, [r3, #62]	@ 0x3e
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	4b42      	ldr	r3, [pc, #264]	@ (800b514 <_ZN11RemoraComms5startEv+0x16c>)
 800b40a:	613b      	str	r3, [r7, #16]
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	4620      	mov	r0, r4
 800b418:	f7ff fd5c 	bl	800aed4 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
    dmaRxInterrupt = new ModuleInterrupt(
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(this->irqDMArx, Config::SPI_DMA_RX_IRQ_PRIORITY, 0);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b426:	2200      	movs	r2, #0
 800b428:	2105      	movs	r1, #5
 800b42a:	4618      	mov	r0, r3
 800b42c:	f002 fe57 	bl	800e0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b436:	4618      	mov	r0, r3
 800b438:	f002 fe6b 	bl	800e112 <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt(
        this->irqDMAtx,
        this,
        static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt)
    );
 800b43c:	2010      	movs	r0, #16
 800b43e:	f00f fa37 	bl	801a8b0 <_Znwj>
 800b442:	4603      	mov	r3, r0
 800b444:	461c      	mov	r4, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f9b3 1040 	ldrsh.w	r1, [r3, #64]	@ 0x40
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	4b32      	ldr	r3, [pc, #200]	@ (800b518 <_ZN11RemoraComms5startEv+0x170>)
 800b450:	61bb      	str	r3, [r7, #24]
 800b452:	2300      	movs	r3, #0
 800b454:	61fb      	str	r3, [r7, #28]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	4620      	mov	r0, r4
 800b45e:	f7ff fd39 	bl	800aed4 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
    dmaTxInterrupt = new ModuleInterrupt(
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	635c      	str	r4, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(this->irqDMAtx, Config::SPI_DMA_TX_IRQ_PRIORITY, 0); // TX needs higher priority than RX
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b46c:	2200      	movs	r2, #0
 800b46e:	2104      	movs	r1, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f002 fe34 	bl	800e0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b47c:	4618      	mov	r0, r3
 800b47e:	f002 fe48 	bl	800e112 <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    memset((void*)this->ptrTxData->txBuffer, 0, sizeof(this->ptrTxData->txBuffer));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	2240      	movs	r2, #64	@ 0x40
 800b488:	2100      	movs	r1, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f00f fefa 	bl	801b284 <memset>
    memset((void*)this->ptrRxData->rxBuffer, 0, sizeof(this->ptrRxData->rxBuffer));
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	2240      	movs	r2, #64	@ 0x40
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f00f fef3 	bl	801b284 <memset>
    memset((void*)this->ptrRxDMABuffer->buffer[0].rxBuffer, 0, sizeof(this->ptrRxDMABuffer->buffer[0].rxBuffer));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a2:	2240      	movs	r2, #64	@ 0x40
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f00f feec 	bl	801b284 <memset>
    memset((void*)this->ptrRxDMABuffer->buffer[1].rxBuffer, 0, sizeof(this->ptrRxDMABuffer->buffer[1].rxBuffer));
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b0:	3340      	adds	r3, #64	@ 0x40
 800b4b2:	2240      	movs	r2, #64	@ 0x40
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f00f fee4 	bl	801b284 <memset>
    this->ptrTxData->header = Config::PRU_DATA;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	4a16      	ldr	r2, [pc, #88]	@ (800b51c <_ZN11RemoraComms5startEv+0x174>)
 800b4c2:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    this->dmaStatus = this->startMultiBufferDMASPI(
        (uint8_t*)this->ptrTxData->txBuffer,
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	4619      	mov	r1, r3
        (uint8_t*)this->ptrTxData->txBuffer,
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	4618      	mov	r0, r3
        (uint8_t*)this->ptrRxDMABuffer->buffer[0].rxBuffer,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d4:	461c      	mov	r4, r3
        (uint8_t*)this->ptrRxDMABuffer->buffer[1].rxBuffer,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4da:	3340      	adds	r3, #64	@ 0x40
    this->dmaStatus = this->startMultiBufferDMASPI(
 800b4dc:	2240      	movs	r2, #64	@ 0x40
 800b4de:	9201      	str	r2, [sp, #4]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4623      	mov	r3, r4
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f81c 	bl	800b524 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		Config::DATA_BUFF_SIZE
    );

    // Check for DMA initialization errors
    if (this->dmaStatus != HAL_OK)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <_ZN11RemoraComms5startEv+0x15e>
    {
        printf("DMA SPI error\n");
 800b500:	4807      	ldr	r0, [pc, #28]	@ (800b520 <_ZN11RemoraComms5startEv+0x178>)
 800b502:	f00f fdc5 	bl	801b090 <puts>
    }
}
 800b506:	bf00      	nop
 800b508:	3724      	adds	r7, #36	@ 0x24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd90      	pop	{r4, r7, pc}
 800b50e:	bf00      	nop
 800b510:	0800bf47 	.word	0x0800bf47
 800b514:	0800bf9d 	.word	0x0800bf9d
 800b518:	0800bf75 	.word	0x0800bf75
 800b51c:	64617461 	.word	0x64617461
 800b520:	0801c8c0 	.word	0x0801c8c0

0800b524 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:
* @note  Circular mode is supported if the DMA is configured appropriately.
*/
HAL_StatusTypeDef RemoraComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                      uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                      uint16_t Size)
{
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b087      	sub	sp, #28
 800b528:	af02      	add	r7, sp, #8
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(this->spiHandle.Init.Direction));

    if (this->spiHandle.State != HAL_SPI_STATE_READY)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	bf14      	ite	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	2300      	moveq	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 800b548:	2302      	movs	r3, #2
 800b54a:	e13e      	b.n	800b7ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800b558:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e133      	b.n	800b7ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&this->spiHandle);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d101      	bne.n	800b584 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 800b580:	2302      	movs	r3, #2
 800b582:	e122      	b.n	800b7ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    /* Set the transaction information */
    this->spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2205      	movs	r2, #5
 800b590:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    this->spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    this->spiHandle.TxXferSize  = Size;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5a0:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    this->spiHandle.TxXferCount = Size;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5a8:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
    this->spiHandle.RxXferSize  = Size;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5b0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    this->spiHandle.RxXferCount = Size;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5b8:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

    /* Init unused fields in handle to zero */
    this->spiHandle.RxISR       = NULL;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    this->spiHandle.TxISR       = NULL;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    /* Set Full-Duplex mode */
    SPI_2LINES(&this->spiHandle);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5d6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b5da:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b5ea:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d820      	bhi.n	800b636 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5fe:	d109      	bne.n	800b614 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800b606:	b29b      	uxth	r3, r3
 800b608:	3301      	adds	r3, #1
 800b60a:	085b      	lsrs	r3, r3, #1
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800b61a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b61e:	d12e      	bne.n	800b67e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800b626:	b29b      	uxth	r3, r3
 800b628:	3301      	adds	r3, #1
 800b62a:	085b      	lsrs	r3, r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 800b634:	e023      	b.n	800b67e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b63a:	2b0f      	cmp	r3, #15
 800b63c:	d81f      	bhi.n	800b67e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b648:	d109      	bne.n	800b65e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800b650:	b29b      	uxth	r3, r3
 800b652:	3301      	adds	r3, #1
 800b654:	085b      	lsrs	r3, r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800b664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b668:	d109      	bne.n	800b67e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800b670:	b29b      	uxth	r3, r3
 800b672:	3301      	adds	r3, #1
 800b674:	085b      	lsrs	r3, r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    this->hdma_spi_tx.XferHalfCpltCallback = NULL;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    this->hdma_spi_tx.XferCpltCallback     = NULL;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    this->hdma_spi_tx.XferErrorCallback    = NULL;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 800b69c:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&this->spiHandle.Instance->TXDR,
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a2:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800b6a4:	461c      	mov	r4, r3
 800b6a6:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                this->spiHandle.TxXferCount))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800b6ae:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	f004 fcef 	bl	8010098 <HAL_DMAEx_MultiBufferStart_IT>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf14      	ite	ne
 800b6c0:	2301      	movne	r3, #1
 800b6c2:	2300      	moveq	r3, #0
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d005      	beq.n	800b6d6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&this->spiHandle);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
        return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e079      	b.n	800b7ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    this->hdma_spi_rx.XferHalfCpltCallback = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    this->hdma_spi_rx.XferCpltCallback     = NULL;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    this->hdma_spi_rx.XferErrorCallback    = NULL;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
                                                (uint32_t)&this->spiHandle.Instance->RXDR,
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6f8:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800b6fa:	461c      	mov	r4, r3
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                this->spiHandle.RxXferCount))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800b706:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	460b      	mov	r3, r1
 800b70c:	4621      	mov	r1, r4
 800b70e:	f004 fcc3 	bl	8010098 <HAL_DMAEx_MultiBufferStart_IT>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	bf14      	ite	ne
 800b718:	2301      	movne	r3, #1
 800b71a:	2300      	moveq	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&this->hdma_spi_tx);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	33cc      	adds	r3, #204	@ 0xcc
 800b726:	4618      	mov	r0, r3
 800b728:	f003 fa06 	bl	800eb38 <HAL_DMA_Abort>
        __HAL_UNLOCK(&this->spiHandle);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
        return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e048      	b.n	800b7ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (this->hdma_spi_rx.Init.Mode == DMA_CIRCULAR || this->hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800b73e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b742:	d005      	beq.n	800b750 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b74a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b74e:	d108      	bne.n	800b762 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b754:	6859      	ldr	r1, [r3, #4]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b75a:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800b75c:	400b      	ands	r3, r1
 800b75e:	6053      	str	r3, [r2, #4]
 800b760:	e009      	b.n	800b776 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	4b1a      	ldr	r3, [pc, #104]	@ (800b7d4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b772:	430b      	orrs	r3, r1
 800b774:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b780:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800b784:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&this->spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b78a:	691a      	ldr	r2, [r3, #16]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b790:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800b794:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&this->spiHandle);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7a0:	f042 0201 	orr.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]

    if (this->spiHandle.Init.Mode == SPI_MODE_MASTER)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7ae:	d107      	bne.n	800b7c0 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(this->spiHandle.Instance->CR1, SPI_CR1_CSTART);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7be:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&this->spiHandle);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd90      	pop	{r4, r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	ffff0000 	.word	0xffff0000

0800b7d8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:
  *             - 1: Half transfer complete.
  *             - 2: Full transfer complete.
  *             - 3: Otherwise.
  */
int RemoraComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7e6:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a5a      	ldr	r2, [pc, #360]	@ (800b95c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d04a      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a58      	ldr	r2, [pc, #352]	@ (800b960 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d045      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a57      	ldr	r2, [pc, #348]	@ (800b964 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d040      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a55      	ldr	r2, [pc, #340]	@ (800b968 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d03b      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a54      	ldr	r2, [pc, #336]	@ (800b96c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d036      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a52      	ldr	r2, [pc, #328]	@ (800b970 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d031      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a51      	ldr	r2, [pc, #324]	@ (800b974 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d02c      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a4f      	ldr	r2, [pc, #316]	@ (800b978 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d027      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a4e      	ldr	r2, [pc, #312]	@ (800b97c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d022      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a4c      	ldr	r2, [pc, #304]	@ (800b980 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d01d      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a4b      	ldr	r2, [pc, #300]	@ (800b984 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d018      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a49      	ldr	r2, [pc, #292]	@ (800b988 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d013      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a48      	ldr	r2, [pc, #288]	@ (800b98c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00e      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a46      	ldr	r2, [pc, #280]	@ (800b990 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d009      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a45      	ldr	r2, [pc, #276]	@ (800b994 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d004      	beq.n	800b88e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a43      	ldr	r2, [pc, #268]	@ (800b998 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d101      	bne.n	800b892 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 800b88e:	2301      	movs	r3, #1
 800b890:	e000      	b.n	800b894 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 800b892:	2300      	movs	r3, #0
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8338 	beq.w	800bf0a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b89e:	f003 031f 	and.w	r3, r3, #31
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	409a      	lsls	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 809a 	beq.w	800b9e4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a29      	ldr	r2, [pc, #164]	@ (800b95c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d04a      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a28      	ldr	r2, [pc, #160]	@ (800b960 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d045      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a26      	ldr	r2, [pc, #152]	@ (800b964 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d040      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a25      	ldr	r2, [pc, #148]	@ (800b968 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d03b      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a23      	ldr	r2, [pc, #140]	@ (800b96c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d036      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a22      	ldr	r2, [pc, #136]	@ (800b970 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d031      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a20      	ldr	r2, [pc, #128]	@ (800b974 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d02c      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a1f      	ldr	r2, [pc, #124]	@ (800b978 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d027      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a1d      	ldr	r2, [pc, #116]	@ (800b97c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d022      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d01d      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a1a      	ldr	r2, [pc, #104]	@ (800b984 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d018      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a19      	ldr	r2, [pc, #100]	@ (800b988 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a17      	ldr	r2, [pc, #92]	@ (800b98c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00e      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a16      	ldr	r2, [pc, #88]	@ (800b990 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d009      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a14      	ldr	r2, [pc, #80]	@ (800b994 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d004      	beq.n	800b950 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a13      	ldr	r2, [pc, #76]	@ (800b998 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d125      	bne.n	800b99c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	e024      	b.n	800b9a6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 800b95c:	40020010 	.word	0x40020010
 800b960:	40020028 	.word	0x40020028
 800b964:	40020040 	.word	0x40020040
 800b968:	40020058 	.word	0x40020058
 800b96c:	40020070 	.word	0x40020070
 800b970:	40020088 	.word	0x40020088
 800b974:	400200a0 	.word	0x400200a0
 800b978:	400200b8 	.word	0x400200b8
 800b97c:	40020410 	.word	0x40020410
 800b980:	40020428 	.word	0x40020428
 800b984:	40020440 	.word	0x40020440
 800b988:	40020458 	.word	0x40020458
 800b98c:	40020470 	.word	0x40020470
 800b990:	40020488 	.word	0x40020488
 800b994:	400204a0 	.word	0x400204a0
 800b998:	400204b8 	.word	0x400204b8
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0308 	and.w	r3, r3, #8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bf14      	ite	ne
 800b9aa:	2301      	movne	r3, #1
 800b9ac:	2300      	moveq	r3, #0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d017      	beq.n	800b9e4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 0204 	bic.w	r2, r2, #4
 800b9c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9c8:	f003 031f 	and.w	r3, r3, #31
 800b9cc:	2208      	movs	r2, #8
 800b9ce:	409a      	lsls	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d8:	f043 0201 	orr.w	r2, r3, #1
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e8:	f003 031f 	and.w	r3, r3, #31
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d070      	beq.n	800badc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a68      	ldr	r2, [pc, #416]	@ (800bba0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d04a      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a66      	ldr	r2, [pc, #408]	@ (800bba4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d045      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a65      	ldr	r2, [pc, #404]	@ (800bba8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d040      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a63      	ldr	r2, [pc, #396]	@ (800bbac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d03b      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a62      	ldr	r2, [pc, #392]	@ (800bbb0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d036      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a60      	ldr	r2, [pc, #384]	@ (800bbb4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d031      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a5f      	ldr	r2, [pc, #380]	@ (800bbb8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d02c      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a5d      	ldr	r2, [pc, #372]	@ (800bbbc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d027      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a5c      	ldr	r2, [pc, #368]	@ (800bbc0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d022      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a5a      	ldr	r2, [pc, #360]	@ (800bbc4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d01d      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a59      	ldr	r2, [pc, #356]	@ (800bbc8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d018      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a57      	ldr	r2, [pc, #348]	@ (800bbcc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d013      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a56      	ldr	r2, [pc, #344]	@ (800bbd0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d00e      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a54      	ldr	r2, [pc, #336]	@ (800bbd4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d009      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a53      	ldr	r2, [pc, #332]	@ (800bbd8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d004      	beq.n	800ba9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a51      	ldr	r2, [pc, #324]	@ (800bbdc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d105      	bne.n	800baa6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baa4:	e003      	b.n	800baae <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2300      	movs	r3, #0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	bf14      	ite	ne
 800bab2:	2301      	movne	r3, #1
 800bab4:	2300      	moveq	r3, #0
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00f      	beq.n	800badc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac0:	f003 031f 	and.w	r3, r3, #31
 800bac4:	2201      	movs	r2, #1
 800bac6:	409a      	lsls	r2, r3
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bad0:	f043 0202 	orr.w	r2, r3, #2
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800bad8:	2303      	movs	r3, #3
 800bada:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bae0:	f003 031f 	and.w	r3, r3, #31
 800bae4:	2204      	movs	r2, #4
 800bae6:	409a      	lsls	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4013      	ands	r3, r2
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8092 	beq.w	800bc16 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a2a      	ldr	r2, [pc, #168]	@ (800bba0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d04a      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a28      	ldr	r2, [pc, #160]	@ (800bba4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d045      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a27      	ldr	r2, [pc, #156]	@ (800bba8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d040      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a25      	ldr	r2, [pc, #148]	@ (800bbac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d03b      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a24      	ldr	r2, [pc, #144]	@ (800bbb0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d036      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a22      	ldr	r2, [pc, #136]	@ (800bbb4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d031      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a21      	ldr	r2, [pc, #132]	@ (800bbb8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d02c      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a1f      	ldr	r2, [pc, #124]	@ (800bbbc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d027      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d022      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d01d      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbc8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d018      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a19      	ldr	r2, [pc, #100]	@ (800bbcc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d013      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a18      	ldr	r2, [pc, #96]	@ (800bbd0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00e      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a16      	ldr	r2, [pc, #88]	@ (800bbd4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d009      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a15      	ldr	r2, [pc, #84]	@ (800bbd8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d004      	beq.n	800bb92 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a13      	ldr	r2, [pc, #76]	@ (800bbdc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d126      	bne.n	800bbe0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	e024      	b.n	800bbe8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 800bb9e:	bf00      	nop
 800bba0:	40020010 	.word	0x40020010
 800bba4:	40020028 	.word	0x40020028
 800bba8:	40020040 	.word	0x40020040
 800bbac:	40020058 	.word	0x40020058
 800bbb0:	40020070 	.word	0x40020070
 800bbb4:	40020088 	.word	0x40020088
 800bbb8:	400200a0 	.word	0x400200a0
 800bbbc:	400200b8 	.word	0x400200b8
 800bbc0:	40020410 	.word	0x40020410
 800bbc4:	40020428 	.word	0x40020428
 800bbc8:	40020440 	.word	0x40020440
 800bbcc:	40020458 	.word	0x40020458
 800bbd0:	40020470 	.word	0x40020470
 800bbd4:	40020488 	.word	0x40020488
 800bbd8:	400204a0 	.word	0x400204a0
 800bbdc:	400204b8 	.word	0x400204b8
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bf14      	ite	ne
 800bbec:	2301      	movne	r3, #1
 800bbee:	2300      	moveq	r3, #0
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00f      	beq.n	800bc16 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbfa:	f003 031f 	and.w	r3, r3, #31
 800bbfe:	2204      	movs	r2, #4
 800bc00:	409a      	lsls	r2, r3
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0a:	f043 0204 	orr.w	r2, r3, #4
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800bc12:	2303      	movs	r3, #3
 800bc14:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc1a:	f003 031f 	and.w	r3, r3, #31
 800bc1e:	2210      	movs	r2, #16
 800bc20:	409a      	lsls	r2, r3
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4013      	ands	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d07f      	beq.n	800bd2a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a6f      	ldr	r2, [pc, #444]	@ (800bdec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d04a      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a6d      	ldr	r2, [pc, #436]	@ (800bdf0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d045      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a6c      	ldr	r2, [pc, #432]	@ (800bdf4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d040      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a6a      	ldr	r2, [pc, #424]	@ (800bdf8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d03b      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a69      	ldr	r2, [pc, #420]	@ (800bdfc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d036      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a67      	ldr	r2, [pc, #412]	@ (800be00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d031      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a66      	ldr	r2, [pc, #408]	@ (800be04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d02c      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a64      	ldr	r2, [pc, #400]	@ (800be08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d027      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a63      	ldr	r2, [pc, #396]	@ (800be0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d022      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a61      	ldr	r2, [pc, #388]	@ (800be10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d01d      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a60      	ldr	r2, [pc, #384]	@ (800be14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d018      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a5e      	ldr	r2, [pc, #376]	@ (800be18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d013      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a5d      	ldr	r2, [pc, #372]	@ (800be1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d00e      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a5b      	ldr	r2, [pc, #364]	@ (800be20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d009      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a5a      	ldr	r2, [pc, #360]	@ (800be24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d004      	beq.n	800bcca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a58      	ldr	r2, [pc, #352]	@ (800be28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d105      	bne.n	800bcd6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	e004      	b.n	800bce0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bf14      	ite	ne
 800bce4:	2301      	movne	r3, #1
 800bce6:	2300      	moveq	r3, #0
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d01b      	beq.n	800bd26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf2:	f003 031f 	and.w	r3, r3, #31
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	409a      	lsls	r2, r3
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bf0c      	ite	eq
 800bd0c:	2301      	moveq	r3, #1
 800bd0e:	2300      	movne	r3, #0
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f022 0208 	bic.w	r2, r2, #8
 800bd24:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 800bd26:	2301      	movs	r3, #1
 800bd28:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd2e:	f003 031f 	and.w	r3, r3, #31
 800bd32:	2220      	movs	r2, #32
 800bd34:	409a      	lsls	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4013      	ands	r3, r2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80e5 	beq.w	800bf0a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a29      	ldr	r2, [pc, #164]	@ (800bdec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d04a      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a28      	ldr	r2, [pc, #160]	@ (800bdf0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d045      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a26      	ldr	r2, [pc, #152]	@ (800bdf4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d040      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a25      	ldr	r2, [pc, #148]	@ (800bdf8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d03b      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a23      	ldr	r2, [pc, #140]	@ (800bdfc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d036      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a22      	ldr	r2, [pc, #136]	@ (800be00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d031      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a20      	ldr	r2, [pc, #128]	@ (800be04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d02c      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a1f      	ldr	r2, [pc, #124]	@ (800be08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d027      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a1d      	ldr	r2, [pc, #116]	@ (800be0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d022      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a1c      	ldr	r2, [pc, #112]	@ (800be10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d01d      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a1a      	ldr	r2, [pc, #104]	@ (800be14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d018      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a19      	ldr	r2, [pc, #100]	@ (800be18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d013      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a17      	ldr	r2, [pc, #92]	@ (800be1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d00e      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a16      	ldr	r2, [pc, #88]	@ (800be20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d009      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a14      	ldr	r2, [pc, #80]	@ (800be24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d004      	beq.n	800bde0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a13      	ldr	r2, [pc, #76]	@ (800be28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d125      	bne.n	800be2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 0310 	and.w	r3, r3, #16
 800bdea:	e024      	b.n	800be36 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 800bdec:	40020010 	.word	0x40020010
 800bdf0:	40020028 	.word	0x40020028
 800bdf4:	40020040 	.word	0x40020040
 800bdf8:	40020058 	.word	0x40020058
 800bdfc:	40020070 	.word	0x40020070
 800be00:	40020088 	.word	0x40020088
 800be04:	400200a0 	.word	0x400200a0
 800be08:	400200b8 	.word	0x400200b8
 800be0c:	40020410 	.word	0x40020410
 800be10:	40020428 	.word	0x40020428
 800be14:	40020440 	.word	0x40020440
 800be18:	40020458 	.word	0x40020458
 800be1c:	40020470 	.word	0x40020470
 800be20:	40020488 	.word	0x40020488
 800be24:	400204a0 	.word	0x400204a0
 800be28:	400204b8 	.word	0x400204b8
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	bf14      	ite	ne
 800be3a:	2301      	movne	r3, #1
 800be3c:	2300      	moveq	r3, #0
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b00      	cmp	r3, #0
 800be42:	d062      	beq.n	800bf0a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be48:	f003 031f 	and.w	r3, r3, #31
 800be4c:	2220      	movs	r2, #32
 800be4e:	409a      	lsls	r2, r3
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	bf0c      	ite	eq
 800be60:	2301      	moveq	r3, #1
 800be62:	2300      	movne	r3, #0
 800be64:	b2db      	uxtb	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d031      	beq.n	800bece <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 0216 	bic.w	r2, r2, #22
 800be78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	695a      	ldr	r2, [r3, #20]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800be88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d103      	bne.n	800be9a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be96:	2b00      	cmp	r3, #0
 800be98:	d007      	beq.n	800beaa <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0208 	bic.w	r2, r2, #8
 800bea8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beae:	f003 031f 	and.w	r3, r3, #31
 800beb2:	223f      	movs	r2, #63	@ 0x3f
 800beb4:	409a      	lsls	r2, r3
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 800beca:	2302      	movs	r3, #2
 800becc:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bf0c      	ite	eq
 800bedc:	2301      	moveq	r3, #1
 800bede:	2300      	movne	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00f      	beq.n	800bf06 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 0210 	bic.w	r2, r2, #16
 800bef4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 800bf06:	2302      	movs	r3, #2
 800bf08:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 800bf0a:	697b      	ldr	r3, [r7, #20]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	371c      	adds	r7, #28
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:
 * @retval int Active buffer index:
 *             - 0: First buffer (Memory 0) is active.
 *             - 1: Second buffer (Memory 1) is active.
 */
int RemoraComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <_ZN11RemoraComms18handleNssInterruptEv>:
 * @details
 * - If the `newData` flag is set, the `copyRXbuffer` flag is marked as `true`.
 *   The actual DMA-based buffer copy operation is deferred to the servo thread update.
 */
void RemoraComms::handleNssInterrupt()
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (this->newWriteData)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d007      	beq.n	800bf68 <_ZN11RemoraComms18handleNssInterruptEv+0x22>
	{
		this->copyRXbuffer = true;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		this->newWriteData = false;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
	}
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <_ZN11RemoraComms17handleTxInterruptEv>:
 *
 * This function processes the DMA interrupt request for the SPI transmit stream
 * and re-enables the corresponding NVIC interrupt.
 */
void RemoraComms::handleTxInterrupt()
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&this->hdma_spi_tx);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	33cc      	adds	r3, #204	@ 0xcc
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fc28 	bl	800b7d8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 f8bf 	bl	800e112 <HAL_NVIC_EnableIRQ>
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <_ZN11RemoraComms17handleRxInterruptEv>:
 *
 * - **Other Interrupts:**
 *   - Prints an error message to indicate an unexpected DMA SPI Rx error.
 */
void RemoraComms::handleRxInterrupt()
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    this->interruptType = DMA_IRQHandler(&this->hdma_spi_rx);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff fc13 	bl	800b7d8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f883 2235 	strb.w	r2, [r3, #565]	@ 0x235

    this->RxDMAmemoryIdx = getActiveDMAmemory(&this->hdma_spi_rx);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ffa7 	bl	800bf18 <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    if (this->interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3235 	ldrb.w	r3, [r3, #565]	@ 0x235
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d127      	bne.n	800c02e <_ZN11RemoraComms17handleRxInterruptEv+0x92>
    {
        switch (this->ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bfe8:	019b      	lsls	r3, r3, #6
 800bfea:	4413      	add	r3, r2
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a19      	ldr	r2, [pc, #100]	@ (800c054 <_ZN11RemoraComms17handleRxInterruptEv+0xb8>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d003      	beq.n	800bffc <_ZN11RemoraComms17handleRxInterruptEv+0x60>
 800bff4:	4a18      	ldr	r2, [pc, #96]	@ (800c058 <_ZN11RemoraComms17handleRxInterruptEv+0xbc>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d005      	beq.n	800c006 <_ZN11RemoraComms17handleRxInterruptEv+0x6a>
 800bffa:	e013      	b.n	800c024 <_ZN11RemoraComms17handleRxInterruptEv+0x88>
        {
            case Config::PRU_READ:
                // No action needed for PRU_READ.
                this->data = true;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
                break;
 800c004:	e01b      	b.n	800c03e <_ZN11RemoraComms17handleRxInterruptEv+0xa2>

            case Config::PRU_WRITE:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	this->data = true;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
            	this->newWriteData = true;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
                RXbufferIdx = RxDMAmemoryIdx;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                break;
 800c022:	e00c      	b.n	800c03e <_ZN11RemoraComms17handleRxInterruptEv+0xa2>

            default:
                this->data = false;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236
                break;
 800c02c:	e007      	b.n	800c03e <_ZN11RemoraComms17handleRxInterruptEv+0xa2>
        }
    }
    else if (this->interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 3235 	ldrb.w	r3, [r3, #565]	@ 0x235
 800c034:	2b02      	cmp	r3, #2
 800c036:	d002      	beq.n	800c03e <_ZN11RemoraComms17handleRxInterruptEv+0xa2>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 800c038:	4808      	ldr	r0, [pc, #32]	@ (800c05c <_ZN11RemoraComms17handleRxInterruptEv+0xc0>)
 800c03a:	f00f f829 	bl	801b090 <puts>
    }

    HAL_NVIC_EnableIRQ(this->irqDMArx);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c044:	4618      	mov	r0, r3
 800c046:	f002 f864 	bl	800e112 <HAL_NVIC_EnableIRQ>
}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	72656164 	.word	0x72656164
 800c058:	77726974 	.word	0x77726974
 800c05c:	0801c8d0 	.word	0x0801c8d0

0800c060 <_ZN11RemoraComms9getStatusEv>:
 * @return The current status as a boolean value:
 *         - `true`: Communication is operating correctly.
 *         - `false`: Communication error detected.
 */
bool RemoraComms::getStatus(void)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
    return this->status;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
}
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <_ZN11RemoraComms13processPacketEv>:


void RemoraComms::processPacket()
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
	if (this->copyRXbuffer == true)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d140      	bne.n	800c10e <_ZN11RemoraComms13processPacketEv+0x94>
    {
		this->pin1->set(1);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	2101      	movs	r1, #1
 800c092:	4618      	mov	r0, r3
 800c094:	f7fd fc80 	bl	8009998 <_ZN3Pin3setEb>

	    uint8_t* srcBuffer = (uint8_t*)this->ptrRxDMABuffer->buffer[this->RXbufferIdx].rxBuffer;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0a2:	019b      	lsls	r3, r3, #6
 800c0a4:	4413      	add	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)this->ptrRxData->rxBuffer;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	69db      	ldr	r3, [r3, #28]
 800c0ac:	60bb      	str	r3, [r7, #8]

	    this->dmaStatus = HAL_DMA_Start(
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800c0b4:	68f9      	ldr	r1, [r7, #12]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	2340      	movs	r3, #64	@ 0x40
 800c0ba:	f002 fc1d 	bl	800e8f8 <HAL_DMA_Start>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
									(uint32_t)destBuffer,
									Config::DATA_BUFF_SIZE
	    							);

	    // Wait for transfer to complete
	    if (this->dmaStatus == HAL_OK) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10d      	bne.n	800c0ee <_ZN11RemoraComms13processPacketEv+0x74>
	        this->dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f003 f848 	bl	800f174 <HAL_DMA_PollForTransfer>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
	    }

	    // Stop the DMA if needed (optional for safety)
	    HAL_DMA_Abort(&this->hdma_memtomem);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f002 fd1f 	bl	800eb38 <HAL_DMA_Abort>

		this->copyRXbuffer = false;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

		this->pin1->set(0);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	2100      	movs	r1, #0
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fd fc45 	bl	8009998 <_ZN3Pin3setEb>
    }
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZN11RemoraComms6updateEv>:
 *   - If data is processed, `noDataCount` is reset, and the status is set to `true`.
 *   - If no data is processed for a defined maximum period (`DATA_ERR_MAX`),
 *     the status is set to `false`, and `noDataCount` is reset.
 */
void RemoraComms::update()
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
	this->pin2->set(1);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	2101      	movs	r1, #1
 800c124:	4618      	mov	r0, r3
 800c126:	f7fd fc37 	bl	8009998 <_ZN3Pin3setEb>

	if (this->data)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 3236 	ldrb.w	r3, [r3, #566]	@ 0x236
 800c130:	2b00      	cmp	r3, #0
 800c132:	d008      	beq.n	800c146 <_ZN11RemoraComms6updateEv+0x30>
	{
		this->noDataCount = 0;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
		this->status = true;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
 800c144:	e007      	b.n	800c156 <_ZN11RemoraComms6updateEv+0x40>
	}
	else
	{
		this->noDataCount++;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 800c14c:	3301      	adds	r3, #1
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
	}

	if (this->noDataCount > Config::DATA_ERR_MAX)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 800c15c:	2b64      	cmp	r3, #100	@ 0x64
 800c15e:	d907      	bls.n	800c170 <_ZN11RemoraComms6updateEv+0x5a>
	{
		this->noDataCount = 0;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
		this->status = false;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
	}

	this->data = false;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2236 	strb.w	r2, [r3, #566]	@ 0x236

	this->pin2->set(0);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2100      	movs	r1, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd fc0a 	bl	8009998 <_ZN3Pin3setEb>
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZN11RemoraCommsD1Ev>:
    DMA_TRANSFER_COMPLETE = 2, // Full transfer completed
    DMA_OTHER = 3        // Other or error status
} DMA_TransferStatus_t;


class RemoraComms : public Module
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	4a05      	ldr	r2, [pc, #20]	@ (800c1ac <_ZN11RemoraCommsD1Ev+0x20>)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fe fcdb 	bl	800ab58 <_ZN6ModuleD1Ev>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	0801cbe4 	.word	0x0801cbe4

0800c1b0 <_ZN11RemoraCommsD0Ev>:
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff ffe7 	bl	800c18c <_ZN11RemoraCommsD1Ev>
 800c1be:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f00e fb63 	bl	801a88e <_ZdlPvj>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE>:
 * 
 * @param config The JSON object containing the configuration for the Stepgen.
 * @return A unique pointer to the created Stepgen module.
 */
unique_ptr<Module> createStepgen(const JsonObject& config)
{
 800c1d4:	b5b0      	push	{r4, r5, r7, lr}
 800c1d6:	b0ac      	sub	sp, #176	@ 0xb0
 800c1d8:	af06      	add	r7, sp, #24
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
    const char* comment = config["Comment"];
 800c1de:	f107 0318 	add.w	r3, r7, #24
 800c1e2:	4a46      	ldr	r2, [pc, #280]	@ (800c2fc <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x128>)
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fa30 	bl	800c64c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c1ec:	f107 0318 	add.w	r3, r7, #24
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7f7 fbc1 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800c1f6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    printf("%s\n", comment);
 800c1fa:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800c1fe:	f00e ff47 	bl	801b090 <puts>

    int joint = config["Joint Number"];
 800c202:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c206:	4a3e      	ldr	r2, [pc, #248]	@ (800c300 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x12c>)
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fa43 	bl	800c696 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c214:	4618      	mov	r0, r3
 800c216:	f7fd fcc6 	bl	8009ba6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800c21a:	4603      	mov	r3, r0
 800c21c:	617b      	str	r3, [r7, #20]
    const char* enable = config["Enable Pin"];
 800c21e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c222:	4a38      	ldr	r2, [pc, #224]	@ (800c304 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x130>)
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fcc9 	bl	8009bbe <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c22c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c230:	4618      	mov	r0, r3
 800c232:	f7f7 fba1 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800c236:	4603      	mov	r3, r0
 800c238:	613b      	str	r3, [r7, #16]
    const char* step = config["Step Pin"];
 800c23a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c23e:	4a32      	ldr	r2, [pc, #200]	@ (800c308 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x134>)
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 fa4c 	bl	800c6e0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c248:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7f7 fb93 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800c252:	4603      	mov	r3, r0
 800c254:	60fb      	str	r3, [r7, #12]
    const char* dir = config["Direction Pin"];
 800c256:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800c25a:	4a2c      	ldr	r2, [pc, #176]	@ (800c30c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x138>)
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fa63 	bl	800c72a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c264:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f7 fb85 	bl	8003978 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800c26e:	4603      	mov	r3, r0
 800c270:	60bb      	str	r3, [r7, #8]

    // Configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	0092      	lsls	r2, r2, #2
 800c278:	4925      	ldr	r1, [pc, #148]	@ (800c310 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x13c>)
 800c27a:	440a      	add	r2, r1
 800c27c:	3204      	adds	r2, #4
 800c27e:	4925      	ldr	r1, [pc, #148]	@ (800c314 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x140>)
 800c280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	0092      	lsls	r2, r2, #2
 800c28a:	4923      	ldr	r1, [pc, #140]	@ (800c318 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x144>)
 800c28c:	440a      	add	r2, r1
 800c28e:	3204      	adds	r2, #4
 800c290:	4922      	ldr	r1, [pc, #136]	@ (800c31c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x148>)
 800c292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 800c296:	4b22      	ldr	r3, [pc, #136]	@ (800c320 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x14c>)
 800c298:	4a22      	ldr	r2, [pc, #136]	@ (800c324 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x150>)
 800c29a:	601a      	str	r2, [r3, #0]

    // Create the step generator and register it in the thread
    return make_unique<Stepgen>(baseFreq, joint, enable, step, dir, Config::STEPBIT, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	4a1d      	ldr	r2, [pc, #116]	@ (800c314 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x140>)
 800c2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	491d      	ldr	r1, [pc, #116]	@ (800c31c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x148>)
 800c2a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c2ac:	491c      	ldr	r1, [pc, #112]	@ (800c320 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x14c>)
 800c2ae:	6809      	ldr	r1, [r1, #0]
 800c2b0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800c2b4:	f107 0510 	add.w	r5, r7, #16
 800c2b8:	f107 0414 	add.w	r4, r7, #20
 800c2bc:	9105      	str	r1, [sp, #20]
 800c2be:	9204      	str	r2, [sp, #16]
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	4b19      	ldr	r3, [pc, #100]	@ (800c328 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x154>)
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	f107 0308 	add.w	r3, r7, #8
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	f107 030c 	add.w	r3, r7, #12
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4915      	ldr	r1, [pc, #84]	@ (800c32c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x158>)
 800c2d8:	f000 fa4c 	bl	800c774 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800c2dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 facc 	bl	800c880 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1I7StepgenS1_IS5_EvEEOS_IT_T0_E>
 800c2e8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fa94 	bl	800c81a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 800c2f2:	bf00      	nop
}
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	3798      	adds	r7, #152	@ 0x98
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fc:	0801c918 	.word	0x0801c918
 800c300:	0801c920 	.word	0x0801c920
 800c304:	0801c930 	.word	0x0801c930
 800c308:	0801c93c 	.word	0x0801c93c
 800c30c:	0801c948 	.word	0x0801c948
 800c310:	30000040 	.word	0x30000040
 800c314:	2400031c 	.word	0x2400031c
 800c318:	30000000 	.word	0x30000000
 800c31c:	2400033c 	.word	0x2400033c
 800c320:	2400035c 	.word	0x2400035c
 800c324:	3000007c 	.word	0x3000007c
 800c328:	0801cc00 	.word	0x0801cc00
 800c32c:	2400001c 	.word	0x2400001c

0800c330 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVh>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable)
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b09b      	sub	sp, #108	@ 0x6c
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe fbef 	bl	800ab24 <_ZN6ModuleC1Ev>
 800c346:	4a5a      	ldr	r2, [pc, #360]	@ (800c4b0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVh+0x180>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	615a      	str	r2, [r3, #20]
      enable(_enable),
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	619a      	str	r2, [r3, #24]
      step(_step),
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c35c:	61da      	str	r2, [r3, #28]
      direction(_direction),
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c362:	621a      	str	r2, [r3, #32]
      stepBit(_stepBit),
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c36a:	625a      	str	r2, [r3, #36]	@ 0x24
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c372:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFeedback(&_ptrFeedback),
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c37a:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrJointEnable(&_ptrJointEnable),
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c382:	631a      	str	r2, [r3, #48]	@ 0x30
      enablePin(_enable, OUTPUT),
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 800c38a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c38e:	4618      	mov	r0, r3
 800c390:	f00e fa9f 	bl	801a8d2 <_ZNSaIcEC1Ev>
 800c394:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c398:	f107 0314 	add.w	r3, r7, #20
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f7 fa64 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c3a4:	f107 0314 	add.w	r3, r7, #20
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f7f4 fc41 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c3b2:	f107 0314 	add.w	r3, r7, #20
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f00e fb23 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c3bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f00e fa87 	bl	801a8d4 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 800c3cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f00e fa7e 	bl	801a8d2 <_ZNSaIcEC1Ev>
 800c3d6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800c3da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c3de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f7 fa43 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c3e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7f4 fc20 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c3f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f00e fb02 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c3fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c402:	4618      	mov	r0, r3
 800c404:	f00e fa66 	bl	801a8d4 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f103 04bc 	add.w	r4, r3, #188	@ 0xbc
 800c40e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c412:	4618      	mov	r0, r3
 800c414:	f00e fa5d 	bl	801a8d2 <_ZNSaIcEC1Ev>
 800c418:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800c41c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c422:	4618      	mov	r0, r3
 800c424:	f7f7 fa22 	bl	800386c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c428:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c42c:	2201      	movs	r2, #1
 800c42e:	4619      	mov	r1, r3
 800c430:	4620      	mov	r0, r4
 800c432:	f7f4 fbff 	bl	8000c34 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c436:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c43a:	4618      	mov	r0, r3
 800c43c:	f00e fae1 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c440:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c444:	4618      	mov	r0, r3
 800c446:	f00e fa45 	bl	801a8d4 <_ZNSaIcED1Ev>
      rawCount(0),
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      DDSaccumulator(0),
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 800c45a:	2201      	movs	r2, #1
 800c45c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c460:	fa02 f303 	lsl.w	r3, r2, r3
 800c464:	ee07 3a90 	vmov	s15, r3
 800c468:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	ee07 3a90 	vmov	s15, r3
 800c472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
      mask(1 << _jointNumber),  // Mask for checking the joint number
 800c480:	2201      	movs	r2, #1
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	409a      	lsls	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
      isEnabled(false),
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
      isForward(false),
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
      isStepping(false)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
{
}
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	376c      	adds	r7, #108	@ 0x6c
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd90      	pop	{r4, r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0801cc0c 	.word	0x0801cc0c

0800c4b4 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f819 	bl	800c4f4 <_ZN7Stepgen10makePulsesEv>
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f8a8 	bl	800c628 <_ZN7Stepgen10stopPulsesEv>
}
 800c4d8:	bf00      	nop
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	461a      	mov	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c50c:	4013      	ands	r3, r2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bf14      	ite	ne
 800c512:	2301      	movne	r3, #1
 800c514:	2300      	moveq	r3, #0
 800c516:	b2da      	uxtb	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    if (!isEnabled)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c524:	f083 0301 	eor.w	r3, r3, #1
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d006      	beq.n	800c53c <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3334      	adds	r3, #52	@ 0x34
 800c532:	2101      	movs	r1, #1
 800c534:	4618      	mov	r0, r3
 800c536:	f7fd fa2f 	bl	8009998 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 800c53a:	e072      	b.n	800c622 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3334      	adds	r3, #52	@ 0x34
 800c540:	2100      	movs	r1, #0
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd fa28 	bl	8009998 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    DDSaddValue = frequencyCommand * frequencyScale;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 800c568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c570:	ee17 2a90 	vmov	r2, s15
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800c580:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c58e:	441a      	add	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	4053      	eors	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bfcc      	ite	gt
 800c5bc:	2301      	movgt	r3, #1
 800c5be:	2300      	movle	r3, #0
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d029      	beq.n	800c622 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7fd f9db 	bl	8009998 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3378      	adds	r3, #120	@ 0x78
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fd f9d5 	bl	8009998 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	d001      	beq.n	800c602 <_ZN7Stepgen10makePulsesEv+0x10e>
 800c5fe:	2201      	movs	r2, #1
 800c600:	e001      	b.n	800c606 <_ZN7Stepgen10makePulsesEv+0x112>
 800c602:	f04f 32ff 	mov.w	r2, #4294967295
 800c606:	441a      	add	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
 800c618:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    }
}
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3378      	adds	r3, #120	@ 0x78
 800c634:	2100      	movs	r1, #0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fd f9ae 	bl	8009998 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08c      	sub	sp, #48	@ 0x30
 800c650:	af02      	add	r7, sp, #8
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	f107 0314 	add.w	r3, r7, #20
 800c65e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c662:	e883 0003 	stmia.w	r3, {r0, r1}
 800c666:	f107 031c 	add.w	r3, r7, #28
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f7 fcc5 	bl	8003ffc <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c672:	466a      	mov	r2, sp
 800c674:	f107 0320 	add.w	r3, r7, #32
 800c678:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c67c:	e882 0003 	stmia.w	r2, {r0, r1}
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	f107 0214 	add.w	r2, r7, #20
 800c686:	ca06      	ldmia	r2, {r1, r2}
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7f7 fae4 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	3728      	adds	r7, #40	@ 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c696:	b580      	push	{r7, lr}
 800c698:	b08c      	sub	sp, #48	@ 0x30
 800c69a:	af02      	add	r7, sp, #8
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	f107 0314 	add.w	r3, r7, #20
 800c6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6b0:	f107 031c 	add.w	r3, r7, #28
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f8fe 	bl	800c8b8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c6bc:	466a      	mov	r2, sp
 800c6be:	f107 0320 	add.w	r3, r7, #32
 800c6c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c6c6:	e882 0003 	stmia.w	r2, {r0, r1}
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	f107 0214 	add.w	r2, r7, #20
 800c6d0:	ca06      	ldmia	r2, {r1, r2}
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f7f7 fabf 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	3728      	adds	r7, #40	@ 0x28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08c      	sub	sp, #48	@ 0x30
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	f107 0314 	add.w	r3, r7, #20
 800c6f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6fa:	f107 031c 	add.w	r3, r7, #28
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f000 f8ec 	bl	800c8de <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c706:	466a      	mov	r2, sp
 800c708:	f107 0320 	add.w	r3, r7, #32
 800c70c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c710:	e882 0003 	stmia.w	r2, {r0, r1}
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	f107 0214 	add.w	r2, r7, #20
 800c71a:	ca06      	ldmia	r2, {r1, r2}
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f7f7 fa9a 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	3728      	adds	r7, #40	@ 0x28
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b08c      	sub	sp, #48	@ 0x30
 800c72e:	af02      	add	r7, sp, #8
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c740:	e883 0003 	stmia.w	r3, {r0, r1}
 800c744:	f107 031c 	add.w	r3, r7, #28
 800c748:	6879      	ldr	r1, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f8da 	bl	800c904 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c750:	466a      	mov	r2, sp
 800c752:	f107 0320 	add.w	r3, r7, #32
 800c756:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c75a:	e882 0003 	stmia.w	r2, {r0, r1}
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	f107 0214 	add.w	r2, r7, #20
 800c764:	ca06      	ldmia	r2, {r1, r2}
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7f7 fa75 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	3728      	adds	r7, #40	@ 0x28
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c778:	b08f      	sub	sp, #60	@ 0x3c
 800c77a:	af06      	add	r7, sp, #24
 800c77c:	61f8      	str	r0, [r7, #28]
 800c77e:	61b9      	str	r1, [r7, #24]
 800c780:	617a      	str	r2, [r7, #20]
 800c782:	613b      	str	r3, [r7, #16]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c784:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800c788:	f00e f892 	bl	801a8b0 <_Znwj>
 800c78c:	4603      	mov	r3, r0
 800c78e:	4698      	mov	r8, r3
 800c790:	69b8      	ldr	r0, [r7, #24]
 800c792:	f7fb ff3c 	bl	800860e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c796:	4603      	mov	r3, r0
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4699      	mov	r9, r3
 800c79c:	6978      	ldr	r0, [r7, #20]
 800c79e:	f7fd fb6a 	bl	8009e76 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	681e      	ldr	r6, [r3, #0]
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f7fd fb5a 	bl	8009e60 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c7b4:	f7fd fb54 	bl	8009e60 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	681c      	ldr	r4, [r3, #0]
 800c7bc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c7be:	f7fd fb4f 	bl	8009e60 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	681d      	ldr	r5, [r3, #0]
 800c7c6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c7c8:	f7fb ff2c 	bl	8008624 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]
 800c7d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c7d4:	f000 f8a9 	bl	800c92a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c7dc:	f000 f8a5 	bl	800c92a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7e0:	6038      	str	r0, [r7, #0]
 800c7e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c7e4:	f000 f8ac 	bl	800c940 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	9305      	str	r3, [sp, #20]
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	9204      	str	r2, [sp, #16]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	9203      	str	r2, [sp, #12]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	9202      	str	r2, [sp, #8]
 800c7f8:	9501      	str	r5, [sp, #4]
 800c7fa:	9400      	str	r4, [sp, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4632      	mov	r2, r6
 800c800:	4649      	mov	r1, r9
 800c802:	4640      	mov	r0, r8
 800c804:	f7ff fd94 	bl	800c330 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVh>
 800c808:	4641      	mov	r1, r8
 800c80a:	69f8      	ldr	r0, [r7, #28]
 800c80c:	f000 f8b3 	bl	800c976 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c810:	69f8      	ldr	r0, [r7, #28]
 800c812:	3724      	adds	r7, #36	@ 0x24
 800c814:	46bd      	mov	sp, r7
 800c816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c81a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c81a:	b590      	push	{r4, r7, lr}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f000 f8b5 	bl	800c994 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800c82a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00c      	beq.n	800c84e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f8ba 	bl	800c9ae <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800c83a:	4604      	mov	r4, r0
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f000 f8c3 	bl	800c9c8 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 800c842:	4603      	mov	r3, r0
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4619      	mov	r1, r3
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 f8fc 	bl	800ca46 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
      }
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}

0800c85e <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I7StepgenEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	68b9      	ldr	r1, [r7, #8]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f911 	bl	800ca98 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1IS1_I7StepgenEEEPS0_OT_>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1I7StepgenS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800c880:	b5b0      	push	{r4, r5, r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800c88a:	687c      	ldr	r4, [r7, #4]
 800c88c:	6838      	ldr	r0, [r7, #0]
 800c88e:	f000 f8eb 	bl	800ca68 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800c892:	4605      	mov	r5, r0
 800c894:	6838      	ldr	r0, [r7, #0]
 800c896:	f000 f88a 	bl	800c9ae <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800c89a:	4603      	mov	r3, r0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 f8f0 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7ff ffd8 	bl	800c85e <_ZNSt15__uniq_ptr_dataI6ModuleSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I7StepgenEEEPS0_OT_>
	{ }
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c8b8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f000 f8fe 	bl	800cac4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 f903 	bl	800cada <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 800c8d4:	bf00      	nop
}
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c8e8:	6838      	ldr	r0, [r7, #0]
 800c8ea:	f000 f905 	bl	800caf8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 f90a 	bl	800cb0e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800c8fa:	bf00      	nop
}
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c90e:	6838      	ldr	r0, [r7, #0]
 800c910:	f000 f90c 	bl	800cb2c <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c914:	4602      	mov	r2, r0
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f911 	bl	800cb42 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 800c920:	bf00      	nop
}
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	6039      	str	r1, [r7, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	4611      	mov	r1, r2
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f8fa 	bl	800cb60 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff ffe6 	bl	800c956 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f8f2 	bl	800cb88 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f8f2 	bl	800cba2 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	4a0d      	ldr	r2, [pc, #52]	@ (800ca20 <_ZN7StepgenD1Ev+0x40>)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	33bc      	adds	r3, #188	@ 0xbc
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fd fb44 	bl	800a080 <_ZN3PinD1Ev>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3378      	adds	r3, #120	@ 0x78
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd fb3f 	bl	800a080 <_ZN3PinD1Ev>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3334      	adds	r3, #52	@ 0x34
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd fb3a 	bl	800a080 <_ZN3PinD1Ev>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f8a2 	bl	800ab58 <_ZN6ModuleD1Ev>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	0801cc0c 	.word	0x0801cc0c

0800ca24 <_ZN7StepgenD0Ev>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff ffd7 	bl	800c9e0 <_ZN7StepgenD1Ev>
 800ca32:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f00d ff29 	bl	801a88e <_ZdlPvj>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	3204      	adds	r2, #4
 800ca5a:	6812      	ldr	r2, [r2, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	4790      	blx	r2
      }
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 f8a2 	bl	800cbbc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <_ZNSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EEC1IS1_I7StepgenEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800ca98:	b590      	push	{r4, r7, lr}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800caa4:	68fc      	ldr	r4, [r7, #12]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff ffeb 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800caac:	4602      	mov	r2, r0
 800caae:	f107 0308 	add.w	r3, r7, #8
 800cab2:	4619      	mov	r1, r3
 800cab4:	4620      	mov	r0, r4
 800cab6:	f000 f896 	bl	800cbe6 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1IRS1_S2_I7StepgenELb1EEEOT_OT0_>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd90      	pop	{r4, r7, pc}

0800cac4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800cacc:	687b      	ldr	r3, [r7, #4]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800cae4:	2301      	movs	r3, #1
 800cae6:	220c      	movs	r2, #12
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f4 fb1e 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800cb00:	687b      	ldr	r3, [r7, #4]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b082      	sub	sp, #8
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800cb18:	2301      	movs	r3, #1
 800cb1a:	2208      	movs	r2, #8
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7f4 fb04 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800cb34:	687b      	ldr	r3, [r7, #4]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b082      	sub	sp, #8
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	220d      	movs	r2, #13
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7f4 faea 	bl	800112c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f853 	bl	800cc18 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800cb72:	683c      	ldr	r4, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ff0d 	bl	800c994 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	601c      	str	r4, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd90      	pop	{r4, r7, pc}

0800cb88 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f84d 	bl	800cc32 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f84c 	bl	800cc4a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff fee5 	bl	800c994 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fedf 	bl	800c994 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2200      	movs	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]
	return __p;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
      }
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <_ZNSt5tupleIJP6ModuleSt14default_deleteIS0_EEEC1IRS1_S2_I7StepgenELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800cbe6:	b5b0      	push	{r4, r5, r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	60f8      	str	r0, [r7, #12]
 800cbee:	60b9      	str	r1, [r7, #8]
 800cbf0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800cbf2:	68fc      	ldr	r4, [r7, #12]
 800cbf4:	68b8      	ldr	r0, [r7, #8]
 800cbf6:	f7fd fbf8 	bl	800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff ff40 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc02:	4603      	mov	r3, r0
 800cc04:	461a      	mov	r2, r3
 800cc06:	4629      	mov	r1, r5
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 f82a 	bl	800cc62 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1IRS1_JS2_I7StepgenEEvEEOT_DpOT0_>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bdb0      	pop	{r4, r5, r7, pc}

0800cc18 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 f839 	bl	800cc9a <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f83d 	bl	800ccba <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 800cc40:	4603      	mov	r3, r0
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f83e 	bl	800ccd4 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEEC1IRS1_JS2_I7StepgenEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800cc62:	b590      	push	{r4, r7, lr}
 800cc64:	b085      	sub	sp, #20
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff ff07 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc74:	4603      	mov	r3, r0
 800cc76:	4619      	mov	r1, r3
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f000 f837 	bl	800ccec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1IS0_I7StepgenEEEOT_>
 800cc7e:	68fc      	ldr	r4, [r7, #12]
 800cc80:	68b8      	ldr	r0, [r7, #8]
 800cc82:	f7fd fbb2 	bl	800a3ea <_ZSt7forwardIRP6ModuleEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc86:	4603      	mov	r3, r0
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7fd fccd 	bl	800a62a <_ZNSt10_Head_baseILj0EP6ModuleLb0EEC1IRS1_EEOT_>
	{ }
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd90      	pop	{r4, r7, pc}

0800cc9a <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f834 	bl	800cd10 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f83c 	bl	800cd28 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f83d 	bl	800cd44 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 800ccca:	4603      	mov	r3, r0
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f83c 	bl	800cd5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 800cce2:	4603      	mov	r3, r0
 800cce4:	4618      	mov	r0, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6ModuleEEEC1IS0_I7StepgenEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ccf6:	6838      	ldr	r0, [r7, #0]
 800ccf8:	f7ff fec3 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f836 	bl	800cd72 <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1IS0_I7StepgenEEEOT_>
	{ }
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f83d 	bl	800cd98 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b082      	sub	sp, #8
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f823 	bl	800cdae <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <_ZNSt10_Head_baseILj1ESt14default_deleteI6ModuleELb1EEC1IS0_I7StepgenEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800cd72:	b590      	push	{r4, r7, lr}
 800cd74:	b083      	sub	sp, #12
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800cd7c:	687c      	ldr	r4, [r7, #4]
 800cd7e:	6838      	ldr	r0, [r7, #0]
 800cd80:	f7ff fe7f 	bl	800ca82 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd84:	4603      	mov	r3, r0
 800cd86:	4619      	mov	r1, r3
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 f81b 	bl	800cdc4 <_ZNSt14default_deleteI6ModuleEC1I7StepgenvEERKS_IT_E>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd90      	pop	{r4, r7, pc}

0800cd98 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZNSt14default_deleteI6ModuleEC1I7StepgenvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <__NVIC_SetPriority>:
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	6039      	str	r1, [r7, #0]
 800cde6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cde8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	db0a      	blt.n	800ce06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	490c      	ldr	r1, [pc, #48]	@ (800ce28 <__NVIC_SetPriority+0x4c>)
 800cdf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfa:	0112      	lsls	r2, r2, #4
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	440b      	add	r3, r1
 800ce00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ce04:	e00a      	b.n	800ce1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4908      	ldr	r1, [pc, #32]	@ (800ce2c <__NVIC_SetPriority+0x50>)
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	f003 030f 	and.w	r3, r3, #15
 800ce12:	3b04      	subs	r3, #4
 800ce14:	0112      	lsls	r2, r2, #4
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	440b      	add	r3, r1
 800ce1a:	761a      	strb	r2, [r3, #24]
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	e000e100 	.word	0xe000e100
 800ce2c:	e000ed00 	.word	0xe000ed00

0800ce30 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	b25a      	sxtb	r2, r3
 800ce58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	b25b      	sxtb	r3, r3
 800ce60:	b2db      	uxtb	r3, r3
  }
 800ce62:	4618      	mov	r0, r3
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b082      	sub	sp, #8
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	70fb      	strb	r3, [r7, #3]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fa1a 	bl	800d2ba <_ZNSt13__atomic_baseIbEC1Eb>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	60fb      	str	r3, [r7, #12]
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	72fb      	strb	r3, [r7, #11]
 800cea8:	78bb      	ldrb	r3, [r7, #2]
 800ceaa:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800ceac:	7abb      	ldrb	r3, [r7, #10]
 800ceae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff ffc8 	bl	800ce48 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 800cebc:	f7f4 f86e 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d004      	beq.n	800ced0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800cec6:	7a7b      	ldrb	r3, [r7, #9]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d101      	bne.n	800ced0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800cecc:	2301      	movs	r3, #1
 800cece:	e000      	b.n	800ced2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 800ced0:	2300      	movs	r3, #0
 800ced2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800ced4:	f7f4 f862 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800cede:	7a7b      	ldrb	r3, [r7, #9]
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d101      	bne.n	800cee8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e000      	b.n	800ceea <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 800cee8:	2300      	movs	r3, #0
 800ceea:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 800ceec:	f7f4 f856 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d004      	beq.n	800cf00 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800cef6:	7a7b      	ldrb	r3, [r7, #9]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d101      	bne.n	800cf00 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 800cf00:	2300      	movs	r3, #0
 800cf02:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	7afa      	ldrb	r2, [r7, #11]
 800cf08:	f3bf 8f5b 	dmb	ish
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	f3bf 8f5b 	dmb	ish
      }
 800cf12:	bf00      	nop
 800cf14:	bf00      	nop
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800cf30:	7afb      	ldrb	r3, [r7, #11]
 800cf32:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff ff86 	bl	800ce48 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 800cf40:	f7f4 f82c 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800cf4a:	7abb      	ldrb	r3, [r7, #10]
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d101      	bne.n	800cf54 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 800cf54:	2300      	movs	r3, #0
 800cf56:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800cf58:	f7f4 f820 	bl	8000f9c <_ZSt23__is_constant_evaluatedv>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800cf62:	7abb      	ldrb	r3, [r7, #10]
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d101      	bne.n	800cf6c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e000      	b.n	800cf6e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f3bf 8f5b 	dmb	ish
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	f3bf 8f5b 	dmb	ish
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bf14      	ite	ne
 800cf82:	2301      	movne	r3, #1
 800cf84:	2300      	moveq	r3, #0
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <_ZN9pruThread16setThreadRunningEb>:
	TIM_TypeDef* timer;
	IRQn_Type irq;

	bool hasModulesPost;		// run updatePost()

    [[ nodiscard ]] void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	331c      	adds	r3, #28
 800cfa0:	78f9      	ldrb	r1, [r7, #3]
 800cfa2:	2203      	movs	r2, #3
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff ff73 	bl	800ce90 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <_ZN9pruThread15setThreadPausedEb>:
    [[ nodiscard ]] void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	70fb      	strb	r3, [r7, #3]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	331d      	adds	r3, #29
 800cfc2:	78f9      	ldrb	r1, [r7, #3]
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff ff62 	bl	800ce90 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(unique_ptr<Module> module);
	bool registerModulePost(unique_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	331c      	adds	r3, #28
 800cfe0:	2102      	movs	r1, #2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff ff9a 	bl	800cf1c <_ZNKSt6atomicIbE4loadESt12memory_order>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	331d      	adds	r3, #29
 800cffe:	2102      	movs	r1, #2
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff ff8b 	bl	800cf1c <_ZNKSt6atomicIbE4loadESt12memory_order>
 800d006:	4603      	mov	r3, r0
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EEC1Ev>:
      _Vector_base() = default;
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 f95d 	bl	800d2da <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_Vector_implC1Ev>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EEC1Ev>:
      vector() = default;
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	f7ff ffeb 	bl	800d010 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EEC1Ev>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 800d044:	b580      	push	{r7, lr}
 800d046:	b08a      	sub	sp, #40	@ 0x28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68b9      	ldr	r1, [r7, #8]
 800d056:	4618      	mov	r0, r3
 800d058:	f00d fdd3 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
      irq(_irq),
      frequency(_freq),
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d060:	619a      	str	r2, [r3, #24]
	  hasModulesPost(false)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	331c      	adds	r3, #28
 800d066:	2100      	movs	r1, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff ff00 	bl	800ce6e <_ZNSt6atomicIbEC1Eb>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	331d      	adds	r3, #29
 800d072:	2100      	movs	r1, #0
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fefa 	bl	800ce6e <_ZNSt6atomicIbEC1Eb>
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3320      	adds	r3, #32
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff ffd3 	bl	800d02a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EEC1Ev>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	332c      	adds	r3, #44	@ 0x2c
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff ffce 	bl	800d02a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EEC1Ev>
      timer(_timer),
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	63da      	str	r2, [r3, #60]	@ 0x3c
      irq(_irq),
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	887a      	ldrh	r2, [r7, #2]
 800d098:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	  hasModulesPost(false)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
{
	printf("Creating %s thread at %d hz\n", threadName, frequency);
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	f107 0310 	add.w	r3, r7, #16
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f00d fda8 	bl	801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	699a      	ldr	r2, [r3, #24]
 800d0b6:	f107 0310 	add.w	r3, r7, #16
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	480a      	ldr	r0, [pc, #40]	@ (800d0e8 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0xa4>)
 800d0be:	f00d ff77 	bl	801afb0 <iprintf>
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f00d fc9b 	bl	801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    NVIC_SetPriority(irq, _prio);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d0d2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff fe7f 	bl	800cddc <__NVIC_SetPriority>
}
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3728      	adds	r7, #40	@ 0x28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	0801c98c 	.word	0x0801c98c

0800d0ec <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3320      	adds	r3, #32
 800d0f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0fc:	f000 f8fd 	bl	800d2fa <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE5beginEv>
 800d100:	4603      	mov	r3, r0
 800d102:	617b      	str	r3, [r7, #20]
 800d104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d106:	f000 f908 	bl	800d31a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE3endEv>
 800d10a:	4603      	mov	r3, r0
 800d10c:	613b      	str	r3, [r7, #16]
 800d10e:	e017      	b.n	800d140 <_ZN9pruThread14executeModulesEv+0x54>
 800d110:	f107 0314 	add.w	r3, r7, #20
 800d114:	4618      	mov	r0, r3
 800d116:	f000 f939 	bl	800d38c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEdeEv>
 800d11a:	61b8      	str	r0, [r7, #24]
        if (module) {
 800d11c:	69b8      	ldr	r0, [r7, #24]
 800d11e:	f000 f941 	bl	800d3a4 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEcvbEv>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d006      	beq.n	800d136 <_ZN9pruThread14executeModulesEv+0x4a>
            module->runModule();
 800d128:	69b8      	ldr	r0, [r7, #24]
 800d12a:	f000 f94c 	bl	800d3c6 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEptEv>
 800d12e:	4603      	mov	r3, r0
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fd31 	bl	800ab98 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 800d136:	f107 0314 	add.w	r3, r7, #20
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f916 	bl	800d36c <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEppEv>
 800d140:	f107 0210 	add.w	r2, r7, #16
 800d144:	f107 0314 	add.w	r3, r7, #20
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f8f6 	bl	800d33c <_ZN9__gnu_cxxneIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1dc      	bne.n	800d110 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d030      	beq.n	800d1c2 <_ZN9pruThread14executeModulesEv+0xd6>
		for (const auto& module : modulesPost) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	332c      	adds	r3, #44	@ 0x2c
 800d164:	623b      	str	r3, [r7, #32]
 800d166:	6a38      	ldr	r0, [r7, #32]
 800d168:	f000 f8c7 	bl	800d2fa <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE5beginEv>
 800d16c:	4603      	mov	r3, r0
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	6a38      	ldr	r0, [r7, #32]
 800d172:	f000 f8d2 	bl	800d31a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE3endEv>
 800d176:	4603      	mov	r3, r0
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	e017      	b.n	800d1ac <_ZN9pruThread14executeModulesEv+0xc0>
 800d17c:	f107 030c 	add.w	r3, r7, #12
 800d180:	4618      	mov	r0, r3
 800d182:	f000 f903 	bl	800d38c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEdeEv>
 800d186:	61f8      	str	r0, [r7, #28]
			if (module) {
 800d188:	69f8      	ldr	r0, [r7, #28]
 800d18a:	f000 f90b 	bl	800d3a4 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEcvbEv>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <_ZN9pruThread14executeModulesEv+0xb6>
				module->runModule();
 800d194:	69f8      	ldr	r0, [r7, #28]
 800d196:	f000 f916 	bl	800d3c6 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEptEv>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fd fcfb 	bl	800ab98 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 800d1a2:	f107 030c 	add.w	r3, r7, #12
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 f8e0 	bl	800d36c <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEppEv>
 800d1ac:	f107 0208 	add.w	r2, r7, #8
 800d1b0:	f107 030c 	add.w	r3, r7, #12
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f8c0 	bl	800d33c <_ZN9__gnu_cxxneIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1dc      	bne.n	800d17c <_ZN9pruThread14executeModulesEv+0x90>
			}
		}
    }

    return true;
 800d1c2:	2301      	movs	r3, #1
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3728      	adds	r7, #40	@ 0x28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <_ZN9pruThread14registerModuleESt10unique_ptrI6ModuleSt14default_deleteIS1_EE>:

bool pruThread::registerModule(unique_ptr<Module> module) {
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
    if (!module) {
 800d1d6:	6838      	ldr	r0, [r7, #0]
 800d1d8:	f000 f8e4 	bl	800d3a4 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEcvbEv>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f083 0301 	eor.w	r3, r3, #1
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <_ZN9pruThread14registerModuleESt10unique_ptrI6ModuleSt14default_deleteIS1_EE+0x20>
        return false;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e00b      	b.n	800d204 <_ZN9pruThread14registerModuleESt10unique_ptrI6ModuleSt14default_deleteIS1_EE+0x38>
    }
    modules.push_back(move(module));
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0420 	add.w	r4, r3, #32
 800d1f2:	6838      	ldr	r0, [r7, #0]
 800d1f4:	f7fb f911 	bl	800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 f8ee 	bl	800d3de <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE9push_backEOS4_>
    return true;
 800d202:	2301      	movs	r3, #1
}
 800d204:	4618      	mov	r0, r3
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd90      	pop	{r4, r7, pc}

0800d20c <_ZN9pruThread11startThreadEv>:
    modulesPost.push_back(move(module));
    return true;
}

// For baremetal, this is just initialization
bool pruThread::startThread() {
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b085      	sub	sp, #20
 800d210:	af02      	add	r7, sp, #8
 800d212:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fedd 	bl	800cfd4 <_ZNK9pruThread9isRunningEv>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 800d220:	2301      	movs	r3, #1
 800d222:	e01c      	b.n	800d25e <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 800d224:	2101      	movs	r1, #1
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff feb2 	bl	800cf90 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 800d22c:	2100      	movs	r1, #0
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff febf 	bl	800cfb2 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 800d234:	2014      	movs	r0, #20
 800d236:	f00d fb3b 	bl	801a8b0 <_Znwj>
 800d23a:	4603      	mov	r3, r0
 800d23c:	461c      	mov	r4, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	@ 0x40
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6998      	ldr	r0, [r3, #24]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	4603      	mov	r3, r0
 800d252:	4620      	mov	r0, r4
 800d254:	f000 fc6c 	bl	800db30 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	639c      	str	r4, [r3, #56]	@ 0x38
    return true;
 800d25c:	2301      	movs	r3, #1
}
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	bd90      	pop	{r4, r7, pc}

0800d266 <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff feb0 	bl	800cfd4 <_ZNK9pruThread9isRunningEv>
 800d274:	4603      	mov	r3, r0
 800d276:	f083 0301 	eor.w	r3, r3, #1
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d105      	bne.n	800d28c <_ZN9pruThread6updateEv+0x26>
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff feb6 	bl	800cff2 <_ZNK9pruThread8isPausedEv>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <_ZN9pruThread6updateEv+0x2a>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <_ZN9pruThread6updateEv+0x2c>
 800d290:	2300      	movs	r3, #0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <_ZN9pruThread6updateEv+0x34>
        return true;
 800d296:	2301      	movs	r3, #1
 800d298:	e00b      	b.n	800d2b2 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff ff26 	bl	800d0ec <_ZN9pruThread14executeModulesEv>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f083 0301 	eor.w	r3, r3, #1
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <_ZN9pruThread6updateEv+0x4a>
        return false;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e000      	b.n	800d2b2 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 800d2b0:	2301      	movs	r3, #1
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800d2ba:	b480      	push	{r7}
 800d2bc:	b083      	sub	sp, #12
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	70fb      	strb	r3, [r7, #3]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	78fa      	ldrb	r2, [r7, #3]
 800d2ca:	701a      	strb	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b082      	sub	sp, #8
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f89c 	bl	800d420 <_ZNSaISt10unique_ptrI6ModuleSt14default_deleteIS0_EEEC1Ev>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 f8a4 	bl	800d438 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE17_Vector_impl_dataC1Ev>
	{ }
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	f107 030c 	add.w	r3, r7, #12
 800d308:	4611      	mov	r1, r2
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 f8a8 	bl	800d460 <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEC1ERKS6_>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	1d1a      	adds	r2, r3, #4
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	4611      	mov	r1, r2
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 f897 	bl	800d460 <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEC1ERKS6_>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZN9__gnu_cxxneIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f89a 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d34c:	4603      	mov	r3, r0
 800d34e:	681c      	ldr	r4, [r3, #0]
 800d350:	6838      	ldr	r0, [r7, #0]
 800d352:	f000 f895 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d356:	4603      	mov	r3, r0
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	429c      	cmp	r4, r3
 800d35c:	bf14      	ite	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	2300      	moveq	r3, #0
 800d362:	b2db      	uxtb	r3, r3
 800d364:	4618      	mov	r0, r3
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}

0800d36c <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	1d1a      	adds	r2, r3, #4
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	601a      	str	r2, [r3, #0]
	return *this;
 800d37e:	687b      	ldr	r3, [r7, #4]
      }
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEcvbEv>:
      explicit operator bool() const noexcept
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f872 	bl	800d496 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EE3getEv>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	bf14      	ite	ne
 800d3b8:	2301      	movne	r3, #1
 800d3ba:	2300      	moveq	r3, #0
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
	return get();
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f861 	bl	800d496 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EE3getEv>
 800d3d4:	4603      	mov	r3, r0
      }
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE9push_backEOS4_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b082      	sub	sp, #8
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800d3e8:	6838      	ldr	r0, [r7, #0]
 800d3ea:	f7fb f816 	bl	800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f85c 	bl	800d4b0 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12emplace_backIJS4_EEERS4_DpOT_>
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	109b      	asrs	r3, r3, #2
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <_ZNSaISt10unique_ptrI6ModuleSt14default_deleteIS0_EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f873 	bl	800d514 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEC1Ev>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	605a      	str	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	609a      	str	r2, [r3, #8]
	{ }
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <_ZNKSt10unique_ptrI6ModuleSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 f842 	bl	800d52a <_ZNKSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE6_M_ptrEv>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12emplace_backIJS4_EEERS4_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800d4b0:	b5b0      	push	{r4, r5, r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d011      	beq.n	800d4ea <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12emplace_backIJS4_EEERS4_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d4c6:	687c      	ldr	r4, [r7, #4]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685d      	ldr	r5, [r3, #4]
 800d4cc:	6838      	ldr	r0, [r7, #0]
 800d4ce:	f000 f83a 	bl	800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f000 f83f 	bl	800d55c <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	1d1a      	adds	r2, r3, #4
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	605a      	str	r2, [r3, #4]
 800d4e8:	e00c      	b.n	800d504 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12emplace_backIJS4_EEERS4_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff ff15 	bl	800d31a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE3endEv>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	6838      	ldr	r0, [r7, #0]
 800d4f4:	f000 f827 	bl	800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f840 	bl	800d584 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f8b9 	bl	800d67c <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4backEv>
 800d50a:	4603      	mov	r3, r0
#endif
      }
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bdb0      	pop	{r4, r5, r7, pc}

0800d514 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <_ZNKSt15__uniq_ptr_implI6ModuleSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	f000 f8bc 	bl	800d6b2 <_ZSt3getILj0EJP6ModuleSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d53a:	4603      	mov	r3, r0
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d546:	b480      	push	{r7}
 800d548:	b083      	sub	sp, #12
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7ff ffec 	bl	800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d56e:	4603      	mov	r3, r0
 800d570:	461a      	mov	r2, r3
 800d572:	68b9      	ldr	r1, [r7, #8]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f8a9 	bl	800d6cc <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE9constructIS4_JS4_EEEvPT_DpOT0_>
	}
 800d57a:	bf00      	nop
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
	...

0800d584 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800d584:	b5b0      	push	{r4, r5, r7, lr}
 800d586:	b08c      	sub	sp, #48	@ 0x30
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d590:	4a39      	ldr	r2, [pc, #228]	@ (800d678 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xf4>)
 800d592:	2101      	movs	r1, #1
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f000 f8b1 	bl	800d6fc <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc>
 800d59a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fea6 	bl	800d2fa <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE5beginEv>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	617b      	str	r3, [r7, #20]
 800d5b2:	f107 0214 	add.w	r2, r7, #20
 800d5b6:	f107 0308 	add.w	r3, r7, #8
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 f8e4 	bl	800d78a <_ZN9__gnu_cxxmiIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 f8f2 	bl	800d7b4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_M_allocateEj>
 800d5d0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800d5d6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d5dc:	69fa      	ldr	r2, [r7, #28]
 800d5de:	18d5      	adds	r5, r2, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff ffb0 	bl	800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff ffb5 	bl	800d55c <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff ff40 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d600:	4603      	mov	r3, r0
 800d602:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	4618      	mov	r0, r3
 800d608:	f7fb fb04 	bl	8008c14 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>
 800d60c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d60e:	69fa      	ldr	r2, [r7, #28]
 800d610:	4621      	mov	r1, r4
 800d612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d614:	f000 f8e2 	bl	800d7dc <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_S_relocateEPS4_S7_S7_RS5_>
 800d618:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	3304      	adds	r3, #4
 800d61e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d620:	f107 0308 	add.w	r3, r7, #8
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff ff2b 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d62a:	4603      	mov	r3, r0
 800d62c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fb faef 	bl	8008c14 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>
 800d636:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 f8cd 	bl	800d7dc <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_S_relocateEPS4_S7_S7_RS5_>
 800d642:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800d644:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	689a      	ldr	r2, [r3, #8]
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d650:	461a      	mov	r2, r3
 800d652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d654:	f7fb fba6 	bl	8008da4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE13_M_deallocateEPS4_j>
      this->_M_impl._M_start = __new_start;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	69fa      	ldr	r2, [r7, #28]
 800d66a:	441a      	add	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	609a      	str	r2, [r3, #8]
    }
 800d670:	bf00      	nop
 800d672:	3730      	adds	r7, #48	@ 0x30
 800d674:	46bd      	mov	sp, r7
 800d676:	bdb0      	pop	{r4, r5, r7, pc}
 800d678:	0801c9ac 	.word	0x0801c9ac

0800d67c <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff fe48 	bl	800d31a <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE3endEv>
 800d68a:	4603      	mov	r3, r0
 800d68c:	60fb      	str	r3, [r7, #12]
 800d68e:	f107 030c 	add.w	r3, r7, #12
 800d692:	2101      	movs	r1, #1
 800d694:	4618      	mov	r0, r3
 800d696:	f000 f8c0 	bl	800d81a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEmiEi>
 800d69a:	4603      	mov	r3, r0
 800d69c:	60bb      	str	r3, [r7, #8]
 800d69e:	f107 0308 	add.w	r3, r7, #8
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff fe72 	bl	800d38c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEdeEv>
 800d6a8:	4603      	mov	r3, r0
      }
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <_ZSt3getILj0EJP6ModuleSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b082      	sub	sp, #8
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 f8c5 	bl	800d84c <_ZSt12__get_helperILj0EP6ModuleJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE9constructIS4_JS4_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	2004      	movs	r0, #4
 800d6de:	f7ff fba7 	bl	800ce30 <_ZnwjPv>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff ff2e 	bl	800d546 <_ZSt7forwardISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7fa faea 	bl	8007cc8 <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EEC1EOS3_>
 800d6f4:	bf00      	nop
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd90      	pop	{r4, r7, pc}

0800d6fc <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800d6fc:	b590      	push	{r4, r7, lr}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 f8ab 	bl	800d864 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE8max_sizeEv>
 800d70e:	4604      	mov	r4, r0
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f7ff fe75 	bl	800d400 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4sizeEv>
 800d716:	4603      	mov	r3, r0
 800d718:	1ae2      	subs	r2, r4, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	bf34      	ite	cc
 800d720:	2301      	movcc	r3, #1
 800d722:	2300      	movcs	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f00d f8dc 	bl	801a8e8 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fe65 	bl	800d400 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4sizeEv>
 800d736:	4604      	mov	r4, r0
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff fe61 	bl	800d400 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4sizeEv>
 800d73e:	4603      	mov	r3, r0
 800d740:	613b      	str	r3, [r7, #16]
 800d742:	f107 0208 	add.w	r2, r7, #8
 800d746:	f107 0310 	add.w	r3, r7, #16
 800d74a:	4611      	mov	r1, r2
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 f89a 	bl	800d886 <_ZSt3maxIjERKT_S2_S2_>
 800d752:	4603      	mov	r3, r0
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4423      	add	r3, r4
 800d758:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7ff fe50 	bl	800d400 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE4sizeEv>
 800d760:	4602      	mov	r2, r0
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	4293      	cmp	r3, r2
 800d766:	d306      	bcc.n	800d776 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc+0x7a>
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 f87b 	bl	800d864 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE8max_sizeEv>
 800d76e:	4602      	mov	r2, r0
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	4293      	cmp	r3, r2
 800d774:	d904      	bls.n	800d780 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc+0x84>
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 f874 	bl	800d864 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE8max_sizeEv>
 800d77c:	4603      	mov	r3, r0
 800d77e:	e000      	b.n	800d782 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE12_M_check_lenEjPKc+0x86>
 800d780:	697b      	ldr	r3, [r7, #20]
      }
 800d782:	4618      	mov	r0, r3
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	bd90      	pop	{r4, r7, pc}

0800d78a <_ZN9__gnu_cxxmiIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d78a:	b590      	push	{r4, r7, lr}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff fe73 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d79a:	4603      	mov	r3, r0
 800d79c:	681c      	ldr	r4, [r3, #0]
 800d79e:	6838      	ldr	r0, [r7, #0]
 800d7a0:	f7ff fe6e 	bl	800d480 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEE4baseEv>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	1ae3      	subs	r3, r4, r3
 800d7aa:	109b      	asrs	r3, r3, #2
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd90      	pop	{r4, r7, pc}

0800d7b4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_M_allocateEj+0x1e>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 f870 	bl	800d8ae <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE8allocateERS5_j>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	e000      	b.n	800d7d4 <_ZNSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_M_allocateEj+0x20>
 800d7d2:	2300      	movs	r3, #0
      }
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_S_relocateEPS4_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f000 f86b 	bl	800d8cc <_ZSt12__relocate_aIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_>
 800d7f6:	4603      	mov	r3, r0
      }
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE7destroyIS4_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f87a 	bl	800d906 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE7destroyIS4_EEvPT_>
	}
 800d812:	bf00      	nop
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	425b      	negs	r3, r3
 800d82e:	4413      	add	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	f107 020c 	add.w	r2, r7, #12
 800d836:	f107 0308 	add.w	r3, r7, #8
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fe0f 	bl	800d460 <_ZN9__gnu_cxx17__normal_iteratorIPSt10unique_ptrI6ModuleSt14default_deleteIS2_EESt6vectorIS5_SaIS5_EEEC1ERKS6_>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	4618      	mov	r0, r3
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZSt12__get_helperILj0EP6ModuleJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f862 	bl	800d91e <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d85a:	4603      	mov	r3, r0
 800d85c:	4618      	mov	r0, r3
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <_ZNKSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f87c 	bl	800d96c <_ZNKSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>
 800d874:	4603      	mov	r3, r0
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f85e 	bl	800d938 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_S_max_sizeERKS5_>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800d886:	b480      	push	{r7}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d201      	bcs.n	800d8a0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	e000      	b.n	800d8a2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800d8a0:	687b      	ldr	r3, [r7, #4]
    }
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b082      	sub	sp, #8
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f860 	bl	800d982 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8allocateEjPKv>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_ZSt12__relocate_aIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d8cc:	b5b0      	push	{r4, r5, r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f000 f87b 	bl	800d9d6 <_ZSt12__niter_baseIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEET_S6_>
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	68b8      	ldr	r0, [r7, #8]
 800d8e4:	f000 f877 	bl	800d9d6 <_ZSt12__niter_baseIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEET_S6_>
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f873 	bl	800d9d6 <_ZSt12__niter_baseIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEET_S6_>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 f878 	bl	800d9ec <_ZSt14__relocate_a_1IPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_>
 800d8fc:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bdb0      	pop	{r4, r5, r7, pc}

0800d906 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE7destroyIS4_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800d906:	b580      	push	{r7, lr}
 800d908:	b082      	sub	sp, #8
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800d910:	6838      	ldr	r0, [r7, #0]
 800d912:	f7fa fd54 	bl	80083be <_ZNSt10unique_ptrI6ModuleSt14default_deleteIS0_EED1Ev>
 800d916:	bf00      	nop
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <_ZNSt11_Tuple_implILj0EJP6ModuleSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 f885 	bl	800da38 <_ZNSt10_Head_baseILj0EP6ModuleLb0EE7_M_headERKS2_>
 800d92e:	4603      	mov	r3, r0
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <_ZNSt6vectorISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800d940:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800d944:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f881 	bl	800da4e <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE8max_sizeERKS5_>
 800d94c:	4603      	mov	r3, r0
 800d94e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d950:	f107 0208 	add.w	r2, r7, #8
 800d954:	f107 030c 	add.w	r3, r7, #12
 800d958:	4611      	mov	r1, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 f883 	bl	800da66 <_ZSt3minIjERKT_S2_S2_>
 800d960:	4603      	mov	r3, r0
 800d962:	681b      	ldr	r3, [r3, #0]
      }
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <_ZNKSt12_Vector_baseISt10unique_ptrI6ModuleSt14default_deleteIS1_EESaIS4_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4618      	mov	r0, r3
 800d978:	370c      	adds	r7, #12
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	60f8      	str	r0, [r7, #12]
 800d98a:	60b9      	str	r1, [r7, #8]
 800d98c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f000 f87d 	bl	800da8e <_ZNKSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE11_M_max_sizeEv>
 800d994:	4602      	mov	r2, r0
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	4293      	cmp	r3, r2
 800d99a:	bf8c      	ite	hi
 800d99c:	2301      	movhi	r3, #1
 800d99e:	2300      	movls	r3, #0
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	bf14      	ite	ne
 800d9a6:	2301      	movne	r3, #1
 800d9a8:	2300      	moveq	r3, #0
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9b6:	d301      	bcc.n	800d9bc <_ZNSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d9b8:	f00c ff90 	bl	801a8dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d9bc:	f00c ff8b 	bl	801a8d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f00c ff73 	bl	801a8b0 <_Znwj>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	bf00      	nop
      }
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <_ZSt12__niter_baseIPSt10unique_ptrI6ModuleSt14default_deleteIS1_EEET_S6_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800d9d6:	b480      	push	{r7}
 800d9d8:	b083      	sub	sp, #12
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <_ZSt14__relocate_a_1IPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800d9ec:	b590      	push	{r4, r7, lr}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800d9fe:	e012      	b.n	800da26 <_ZSt14__relocate_a_1IPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800da00:	6978      	ldr	r0, [r7, #20]
 800da02:	f7fb fbc2 	bl	800918a <_ZSt11__addressofISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEPT_RS5_>
 800da06:	4604      	mov	r4, r0
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f7fb fbbe 	bl	800918a <_ZSt11__addressofISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEPT_RS5_>
 800da0e:	4603      	mov	r3, r0
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	4619      	mov	r1, r3
 800da14:	4620      	mov	r0, r4
 800da16:	f000 f846 	bl	800daa6 <_ZSt19__relocate_object_aISt10unique_ptrI6ModuleSt14default_deleteIS1_EES4_SaIS4_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3304      	adds	r3, #4
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	3304      	adds	r3, #4
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d1e8      	bne.n	800da00 <_ZSt14__relocate_a_1IPSt10unique_ptrI6ModuleSt14default_deleteIS1_EES5_SaIS4_EET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800da2e:	697b      	ldr	r3, [r7, #20]
    }
 800da30:	4618      	mov	r0, r3
 800da32:	371c      	adds	r7, #28
 800da34:	46bd      	mov	sp, r7
 800da36:	bd90      	pop	{r4, r7, pc}

0800da38 <_ZNSt10_Head_baseILj0EP6ModuleLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4618      	mov	r0, r3
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE8max_sizeERKS5_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f840 	bl	800dadc <_ZNKSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8max_sizeEv>
 800da5c:	4603      	mov	r3, r0
      }
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
 800da6e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d201      	bcs.n	800da80 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	e000      	b.n	800da82 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800da80:	687b      	ldr	r3, [r7, #4]
    }
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <_ZNKSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800da96:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr

0800daa6 <_ZSt19__relocate_object_aISt10unique_ptrI6ModuleSt14default_deleteIS1_EES4_SaIS4_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800dab2:	68b8      	ldr	r0, [r7, #8]
 800dab4:	f7fa fcb1 	bl	800841a <_ZSt4moveIRSt10unique_ptrI6ModuleSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	68f9      	ldr	r1, [r7, #12]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fd4c 	bl	800d55c <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE9constructIS4_JS4_EEEvRS5_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800dac4:	68b8      	ldr	r0, [r7, #8]
 800dac6:	f7fb fb60 	bl	800918a <_ZSt11__addressofISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEPT_RS5_>
 800daca:	4603      	mov	r3, r0
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fe96 	bl	800d800 <_ZNSt16allocator_traitsISaISt10unique_ptrI6ModuleSt14default_deleteIS1_EEEE7destroyIS4_EEvRS5_PT_>
    }
 800dad4:	bf00      	nop
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <_ZNKSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff ffd2 	bl	800da8e <_ZNKSt15__new_allocatorISt10unique_ptrI6ModuleSt14default_deleteIS1_EEE11_M_max_sizeEv>
 800daea:	4603      	mov	r3, r0
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <__NVIC_EnableIRQ>:
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	4603      	mov	r3, r0
 800dafc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dafe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db02:	2b00      	cmp	r3, #0
 800db04:	db0b      	blt.n	800db1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db06:	88fb      	ldrh	r3, [r7, #6]
 800db08:	f003 021f 	and.w	r2, r3, #31
 800db0c:	4907      	ldr	r1, [pc, #28]	@ (800db2c <__NVIC_EnableIRQ+0x38>)
 800db0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db12:	095b      	lsrs	r3, r3, #5
 800db14:	2001      	movs	r0, #1
 800db16:	fa00 f202 	lsl.w	r2, r0, r2
 800db1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800db1e:	bf00      	nop
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	e000e100 	.word	0xe000e100

0800db30 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 800db30:	b590      	push	{r4, r7, lr}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	4613      	mov	r3, r2
 800db3e:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	605a      	str	r2, [r3, #4]
	irq(irq),
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	88fa      	ldrh	r2, [r7, #6]
 800db4a:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6a3a      	ldr	r2, [r7, #32]
 800db56:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 800db58:	2008      	movs	r0, #8
 800db5a:	f00c fea9 	bl	801a8b0 <_Znwj>
 800db5e:	4603      	mov	r3, r0
 800db60:	461c      	mov	r4, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4619      	mov	r1, r3
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 f8af 	bl	800dcd0 <_ZN14TimerInterruptC1EiP8pruTimer>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	601c      	str	r4, [r3, #0]

	this->startTimer();
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 f812 	bl	800dba0 <_ZN8pruTimer10startTimerEv>
}
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	4618      	mov	r0, r3
 800db80:	3714      	adds	r7, #20
 800db82:	46bd      	mov	sp, r7
 800db84:	bd90      	pop	{r4, r7, pc}

0800db86 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->update();
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	4618      	mov	r0, r3
 800db94:	f7ff fb67 	bl	800d266 <_ZN9pruThread6updateEv>
}
 800db98:	bf00      	nop
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbb0:	d116      	bne.n	800dbe0 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 800dbb2:	483f      	ldr	r0, [pc, #252]	@ (800dcb0 <_ZN8pruTimer10startTimerEv+0x110>)
 800dbb4:	f00d f9fc 	bl	801afb0 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 800dbb8:	4b3e      	ldr	r3, [pc, #248]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dbba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dbbe:	4a3d      	ldr	r2, [pc, #244]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dbc0:	f043 0301 	orr.w	r3, r3, #1
 800dbc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dbc8:	4b3a      	ldr	r3, [pc, #232]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dbca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	613b      	str	r3, [r7, #16]
 800dbd4:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 800dbd6:	4b38      	ldr	r3, [pc, #224]	@ (800dcb8 <_ZN8pruTimer10startTimerEv+0x118>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	085b      	lsrs	r3, r3, #1
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e036      	b.n	800dc4e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM3)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	4a35      	ldr	r2, [pc, #212]	@ (800dcbc <_ZN8pruTimer10startTimerEv+0x11c>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d116      	bne.n	800dc18 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 800dbea:	4835      	ldr	r0, [pc, #212]	@ (800dcc0 <_ZN8pruTimer10startTimerEv+0x120>)
 800dbec:	f00d f9e0 	bl	801afb0 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800dbf0:	4b30      	ldr	r3, [pc, #192]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dbf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dbf6:	4a2f      	ldr	r2, [pc, #188]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dbf8:	f043 0302 	orr.w	r3, r3, #2
 800dbfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dc00:	4b2c      	ldr	r3, [pc, #176]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dc02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	60fb      	str	r3, [r7, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 800dc0e:	4b2a      	ldr	r3, [pc, #168]	@ (800dcb8 <_ZN8pruTimer10startTimerEv+0x118>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	085b      	lsrs	r3, r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
 800dc16:	e01a      	b.n	800dc4e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM4)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	4a29      	ldr	r2, [pc, #164]	@ (800dcc4 <_ZN8pruTimer10startTimerEv+0x124>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d115      	bne.n	800dc4e <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 800dc22:	4829      	ldr	r0, [pc, #164]	@ (800dcc8 <_ZN8pruTimer10startTimerEv+0x128>)
 800dc24:	f00d f9c4 	bl	801afb0 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800dc28:	4b22      	ldr	r3, [pc, #136]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dc2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc2e:	4a21      	ldr	r2, [pc, #132]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dc30:	f043 0304 	orr.w	r3, r3, #4
 800dc34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dc38:	4b1e      	ldr	r3, [pc, #120]	@ (800dcb4 <_ZN8pruTimer10startTimerEv+0x114>)
 800dc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc3e:	f003 0304 	and.w	r3, r3, #4
 800dc42:	60bb      	str	r3, [r7, #8]
 800dc44:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 800dc46:	4b1c      	ldr	r3, [pc, #112]	@ (800dcb8 <_ZN8pruTimer10startTimerEv+0x118>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	085b      	lsrs	r3, r3, #1
 800dc4c:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	3a01      	subs	r2, #1
 800dc74:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	f042 0201 	orr.w	r2, r2, #1
 800dc94:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff ff29 	bl	800daf4 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800dca2:	480a      	ldr	r0, [pc, #40]	@ (800dccc <_ZN8pruTimer10startTimerEv+0x12c>)
 800dca4:	f00d f9f4 	bl	801b090 <puts>
}
 800dca8:	bf00      	nop
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	0801c9c8 	.word	0x0801c9c8
 800dcb4:	58024400 	.word	0x58024400
 800dcb8:	24000030 	.word	0x24000030
 800dcbc:	40000400 	.word	0x40000400
 800dcc0:	0801c9dc 	.word	0x0801c9dc
 800dcc4:	40000800 	.word	0x40000800
 800dcc8:	0801c9f0 	.word	0x0801c9f0
 800dccc:	0801ca04 	.word	0x0801ca04

0800dcd0 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7f3 f8e2 	bl	8000ea8 <_ZN9InterruptC1Ev>
 800dce4:	4a07      	ldr	r2, [pc, #28]	@ (800dd04 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	68b8      	ldr	r0, [r7, #8]
 800dcf6:	f7f3 f8e7 	bl	8000ec8 <_ZN9Interrupt8RegisterEiPS_>
}
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0801cc30 	.word	0x0801cc30

0800dd08 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7ff ff36 	bl	800db86 <_ZN8pruTimer9timerTickEv>
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800dd24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800dd5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800dd28:	f7fb fdae 	bl	8009888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dd2c:	480c      	ldr	r0, [pc, #48]	@ (800dd60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800dd2e:	490d      	ldr	r1, [pc, #52]	@ (800dd64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800dd30:	4a0d      	ldr	r2, [pc, #52]	@ (800dd68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800dd32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dd34:	e002      	b.n	800dd3c <LoopCopyDataInit>

0800dd36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dd36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dd38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dd3a:	3304      	adds	r3, #4

0800dd3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dd3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dd3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dd40:	d3f9      	bcc.n	800dd36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dd42:	4a0a      	ldr	r2, [pc, #40]	@ (800dd6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800dd44:	4c0a      	ldr	r4, [pc, #40]	@ (800dd70 <LoopFillZerobss+0x22>)
  movs r3, #0
 800dd46:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dd48:	e001      	b.n	800dd4e <LoopFillZerobss>

0800dd4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dd4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dd4c:	3204      	adds	r2, #4

0800dd4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dd4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dd50:	d3fb      	bcc.n	800dd4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800dd52:	f00d fb3f 	bl	801b3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dd56:	f7f9 f8b1 	bl	8006ebc <main>
  bx  lr
 800dd5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dd5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800dd60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800dd64:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 800dd68:	0801cd78 	.word	0x0801cd78
  ldr r2, =_sbss
 800dd6c:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 800dd70:	24000ce0 	.word	0x24000ce0

0800dd74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dd74:	e7fe      	b.n	800dd74 <ADC3_IRQHandler>
	...

0800dd78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dd7e:	2003      	movs	r0, #3
 800dd80:	f000 f9a2 	bl	800e0c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dd84:	f003 fdb0 	bl	80118e8 <HAL_RCC_GetSysClockFreq>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4b15      	ldr	r3, [pc, #84]	@ (800dde0 <HAL_Init+0x68>)
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	0a1b      	lsrs	r3, r3, #8
 800dd90:	f003 030f 	and.w	r3, r3, #15
 800dd94:	4913      	ldr	r1, [pc, #76]	@ (800dde4 <HAL_Init+0x6c>)
 800dd96:	5ccb      	ldrb	r3, [r1, r3]
 800dd98:	f003 031f 	and.w	r3, r3, #31
 800dd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800dda0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dda2:	4b0f      	ldr	r3, [pc, #60]	@ (800dde0 <HAL_Init+0x68>)
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	f003 030f 	and.w	r3, r3, #15
 800ddaa:	4a0e      	ldr	r2, [pc, #56]	@ (800dde4 <HAL_Init+0x6c>)
 800ddac:	5cd3      	ldrb	r3, [r2, r3]
 800ddae:	f003 031f 	and.w	r3, r3, #31
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ddb8:	4a0b      	ldr	r2, [pc, #44]	@ (800dde8 <HAL_Init+0x70>)
 800ddba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ddbc:	4a0b      	ldr	r2, [pc, #44]	@ (800ddec <HAL_Init+0x74>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ddc2:	200f      	movs	r0, #15
 800ddc4:	f000 f814 	bl	800ddf0 <HAL_InitTick>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e002      	b.n	800ddd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800ddd2:	f7fb fb3f 	bl	8009454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	58024400 	.word	0x58024400
 800dde4:	0801cb54 	.word	0x0801cb54
 800dde8:	24000034 	.word	0x24000034
 800ddec:	24000030 	.word	0x24000030

0800ddf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800ddf8:	4b15      	ldr	r3, [pc, #84]	@ (800de50 <HAL_InitTick+0x60>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	e021      	b.n	800de48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800de04:	4b13      	ldr	r3, [pc, #76]	@ (800de54 <HAL_InitTick+0x64>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	4b11      	ldr	r3, [pc, #68]	@ (800de50 <HAL_InitTick+0x60>)
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	4619      	mov	r1, r3
 800de0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de12:	fbb3 f3f1 	udiv	r3, r3, r1
 800de16:	fbb2 f3f3 	udiv	r3, r2, r3
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 f98b 	bl	800e136 <HAL_SYSTICK_Config>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e00e      	b.n	800de48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b0f      	cmp	r3, #15
 800de2e:	d80a      	bhi.n	800de46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800de30:	2200      	movs	r2, #0
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	f04f 30ff 	mov.w	r0, #4294967295
 800de38:	f000 f951 	bl	800e0de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800de3c:	4a06      	ldr	r2, [pc, #24]	@ (800de58 <HAL_InitTick+0x68>)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800de42:	2300      	movs	r3, #0
 800de44:	e000      	b.n	800de48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2400003c 	.word	0x2400003c
 800de54:	24000030 	.word	0x24000030
 800de58:	24000038 	.word	0x24000038

0800de5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800de5c:	b480      	push	{r7}
 800de5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800de60:	4b06      	ldr	r3, [pc, #24]	@ (800de7c <HAL_IncTick+0x20>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <HAL_IncTick+0x24>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4413      	add	r3, r2
 800de6c:	4a04      	ldr	r2, [pc, #16]	@ (800de80 <HAL_IncTick+0x24>)
 800de6e:	6013      	str	r3, [r2, #0]
}
 800de70:	bf00      	nop
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	2400003c 	.word	0x2400003c
 800de80:	240004e8 	.word	0x240004e8

0800de84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
  return uwTick;
 800de88:	4b03      	ldr	r3, [pc, #12]	@ (800de98 <HAL_GetTick+0x14>)
 800de8a:	681b      	ldr	r3, [r3, #0]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	240004e8 	.word	0x240004e8

0800de9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dea4:	f7ff ffee 	bl	800de84 <HAL_GetTick>
 800dea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb4:	d005      	beq.n	800dec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800deb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dee0 <HAL_Delay+0x44>)
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	461a      	mov	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800dec2:	bf00      	nop
 800dec4:	f7ff ffde 	bl	800de84 <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d8f7      	bhi.n	800dec4 <HAL_Delay+0x28>
  {
  }
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	2400003c 	.word	0x2400003c

0800dee4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800dee4:	b480      	push	{r7}
 800dee6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800dee8:	4b03      	ldr	r3, [pc, #12]	@ (800def8 <HAL_GetREVID+0x14>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	0c1b      	lsrs	r3, r3, #16
}
 800deee:	4618      	mov	r0, r3
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	5c001000 	.word	0x5c001000

0800defc <__NVIC_SetPriorityGrouping>:
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f003 0307 	and.w	r3, r3, #7
 800df0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df0c:	4b0b      	ldr	r3, [pc, #44]	@ (800df3c <__NVIC_SetPriorityGrouping+0x40>)
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800df18:	4013      	ands	r3, r2
 800df1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800df24:	4b06      	ldr	r3, [pc, #24]	@ (800df40 <__NVIC_SetPriorityGrouping+0x44>)
 800df26:	4313      	orrs	r3, r2
 800df28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800df2a:	4a04      	ldr	r2, [pc, #16]	@ (800df3c <__NVIC_SetPriorityGrouping+0x40>)
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	60d3      	str	r3, [r2, #12]
}
 800df30:	bf00      	nop
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	e000ed00 	.word	0xe000ed00
 800df40:	05fa0000 	.word	0x05fa0000

0800df44 <__NVIC_GetPriorityGrouping>:
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800df48:	4b04      	ldr	r3, [pc, #16]	@ (800df5c <__NVIC_GetPriorityGrouping+0x18>)
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	0a1b      	lsrs	r3, r3, #8
 800df4e:	f003 0307 	and.w	r3, r3, #7
}
 800df52:	4618      	mov	r0, r3
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	e000ed00 	.word	0xe000ed00

0800df60 <__NVIC_EnableIRQ>:
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	4603      	mov	r3, r0
 800df68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800df6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	db0b      	blt.n	800df8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800df72:	88fb      	ldrh	r3, [r7, #6]
 800df74:	f003 021f 	and.w	r2, r3, #31
 800df78:	4907      	ldr	r1, [pc, #28]	@ (800df98 <__NVIC_EnableIRQ+0x38>)
 800df7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df7e:	095b      	lsrs	r3, r3, #5
 800df80:	2001      	movs	r0, #1
 800df82:	fa00 f202 	lsl.w	r2, r0, r2
 800df86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800df8a:	bf00      	nop
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	e000e100 	.word	0xe000e100

0800df9c <__NVIC_SetPriority>:
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	6039      	str	r1, [r7, #0]
 800dfa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dfa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	db0a      	blt.n	800dfc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	490c      	ldr	r1, [pc, #48]	@ (800dfe8 <__NVIC_SetPriority+0x4c>)
 800dfb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfba:	0112      	lsls	r2, r2, #4
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	440b      	add	r3, r1
 800dfc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800dfc4:	e00a      	b.n	800dfdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	4908      	ldr	r1, [pc, #32]	@ (800dfec <__NVIC_SetPriority+0x50>)
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	f003 030f 	and.w	r3, r3, #15
 800dfd2:	3b04      	subs	r3, #4
 800dfd4:	0112      	lsls	r2, r2, #4
 800dfd6:	b2d2      	uxtb	r2, r2
 800dfd8:	440b      	add	r3, r1
 800dfda:	761a      	strb	r2, [r3, #24]
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	e000e100 	.word	0xe000e100
 800dfec:	e000ed00 	.word	0xe000ed00

0800dff0 <NVIC_EncodePriority>:
{
 800dff0:	b480      	push	{r7}
 800dff2:	b089      	sub	sp, #36	@ 0x24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f003 0307 	and.w	r3, r3, #7
 800e002:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	f1c3 0307 	rsb	r3, r3, #7
 800e00a:	2b04      	cmp	r3, #4
 800e00c:	bf28      	it	cs
 800e00e:	2304      	movcs	r3, #4
 800e010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	3304      	adds	r3, #4
 800e016:	2b06      	cmp	r3, #6
 800e018:	d902      	bls.n	800e020 <NVIC_EncodePriority+0x30>
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	3b03      	subs	r3, #3
 800e01e:	e000      	b.n	800e022 <NVIC_EncodePriority+0x32>
 800e020:	2300      	movs	r3, #0
 800e022:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	fa02 f303 	lsl.w	r3, r2, r3
 800e02e:	43da      	mvns	r2, r3
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	401a      	ands	r2, r3
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e038:	f04f 31ff 	mov.w	r1, #4294967295
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	fa01 f303 	lsl.w	r3, r1, r3
 800e042:	43d9      	mvns	r1, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e048:	4313      	orrs	r3, r2
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3724      	adds	r7, #36	@ 0x24
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
	...

0800e058 <__NVIC_SystemReset>:
{
 800e058:	b480      	push	{r7}
 800e05a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e05c:	f3bf 8f4f 	dsb	sy
}
 800e060:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e062:	4b06      	ldr	r3, [pc, #24]	@ (800e07c <__NVIC_SystemReset+0x24>)
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e06a:	4904      	ldr	r1, [pc, #16]	@ (800e07c <__NVIC_SystemReset+0x24>)
 800e06c:	4b04      	ldr	r3, [pc, #16]	@ (800e080 <__NVIC_SystemReset+0x28>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e072:	f3bf 8f4f 	dsb	sy
}
 800e076:	bf00      	nop
    __NOP();
 800e078:	bf00      	nop
 800e07a:	e7fd      	b.n	800e078 <__NVIC_SystemReset+0x20>
 800e07c:	e000ed00 	.word	0xe000ed00
 800e080:	05fa0004 	.word	0x05fa0004

0800e084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3b01      	subs	r3, #1
 800e090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e094:	d301      	bcc.n	800e09a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e096:	2301      	movs	r3, #1
 800e098:	e00f      	b.n	800e0ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e09a:	4a0a      	ldr	r2, [pc, #40]	@ (800e0c4 <SysTick_Config+0x40>)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e0a2:	210f      	movs	r1, #15
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	f7ff ff78 	bl	800df9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e0ac:	4b05      	ldr	r3, [pc, #20]	@ (800e0c4 <SysTick_Config+0x40>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e0b2:	4b04      	ldr	r3, [pc, #16]	@ (800e0c4 <SysTick_Config+0x40>)
 800e0b4:	2207      	movs	r2, #7
 800e0b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	e000e010 	.word	0xe000e010

0800e0c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff ff13 	bl	800defc <__NVIC_SetPriorityGrouping>
}
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b086      	sub	sp, #24
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	60b9      	str	r1, [r7, #8]
 800e0e8:	607a      	str	r2, [r7, #4]
 800e0ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e0ec:	f7ff ff2a 	bl	800df44 <__NVIC_GetPriorityGrouping>
 800e0f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	68b9      	ldr	r1, [r7, #8]
 800e0f6:	6978      	ldr	r0, [r7, #20]
 800e0f8:	f7ff ff7a 	bl	800dff0 <NVIC_EncodePriority>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e102:	4611      	mov	r1, r2
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff ff49 	bl	800df9c <__NVIC_SetPriority>
}
 800e10a:	bf00      	nop
 800e10c:	3718      	adds	r7, #24
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	4603      	mov	r3, r0
 800e11a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e11c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff ff1d 	bl	800df60 <__NVIC_EnableIRQ>
}
 800e126:	bf00      	nop
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800e132:	f7ff ff91 	bl	800e058 <__NVIC_SystemReset>

0800e136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff ffa0 	bl	800e084 <SysTick_Config>
 800e144:	4603      	mov	r3, r0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
	...

0800e150 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800e150:	b480      	push	{r7}
 800e152:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800e154:	f3bf 8f5f 	dmb	sy
}
 800e158:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800e15a:	4b07      	ldr	r3, [pc, #28]	@ (800e178 <HAL_MPU_Disable+0x28>)
 800e15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e15e:	4a06      	ldr	r2, [pc, #24]	@ (800e178 <HAL_MPU_Disable+0x28>)
 800e160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e164:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800e166:	4b05      	ldr	r3, [pc, #20]	@ (800e17c <HAL_MPU_Disable+0x2c>)
 800e168:	2200      	movs	r2, #0
 800e16a:	605a      	str	r2, [r3, #4]
}
 800e16c:	bf00      	nop
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	e000ed00 	.word	0xe000ed00
 800e17c:	e000ed90 	.word	0xe000ed90

0800e180 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800e188:	4a0b      	ldr	r2, [pc, #44]	@ (800e1b8 <HAL_MPU_Enable+0x38>)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f043 0301 	orr.w	r3, r3, #1
 800e190:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800e192:	4b0a      	ldr	r3, [pc, #40]	@ (800e1bc <HAL_MPU_Enable+0x3c>)
 800e194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e196:	4a09      	ldr	r2, [pc, #36]	@ (800e1bc <HAL_MPU_Enable+0x3c>)
 800e198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e19c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800e19e:	f3bf 8f4f 	dsb	sy
}
 800e1a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e1a4:	f3bf 8f6f 	isb	sy
}
 800e1a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800e1aa:	bf00      	nop
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	e000ed90 	.word	0xe000ed90
 800e1bc:	e000ed00 	.word	0xe000ed00

0800e1c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	785a      	ldrb	r2, [r3, #1]
 800e1cc:	4b1b      	ldr	r3, [pc, #108]	@ (800e23c <HAL_MPU_ConfigRegion+0x7c>)
 800e1ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800e1d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e23c <HAL_MPU_ConfigRegion+0x7c>)
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	4a19      	ldr	r2, [pc, #100]	@ (800e23c <HAL_MPU_ConfigRegion+0x7c>)
 800e1d6:	f023 0301 	bic.w	r3, r3, #1
 800e1da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800e1dc:	4a17      	ldr	r2, [pc, #92]	@ (800e23c <HAL_MPU_ConfigRegion+0x7c>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7b1b      	ldrb	r3, [r3, #12]
 800e1e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7adb      	ldrb	r3, [r3, #11]
 800e1ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800e1f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7a9b      	ldrb	r3, [r3, #10]
 800e1f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800e1f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7b5b      	ldrb	r3, [r3, #13]
 800e1fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800e200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7b9b      	ldrb	r3, [r3, #14]
 800e206:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800e208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	7bdb      	ldrb	r3, [r3, #15]
 800e20e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800e210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7a5b      	ldrb	r3, [r3, #9]
 800e216:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800e218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	7a1b      	ldrb	r3, [r3, #8]
 800e21e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800e220:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	7812      	ldrb	r2, [r2, #0]
 800e226:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800e228:	4a04      	ldr	r2, [pc, #16]	@ (800e23c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800e22a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800e22c:	6113      	str	r3, [r2, #16]
}
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	e000ed90 	.word	0xe000ed90

0800e240 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800e248:	f7ff fe1c 	bl	800de84 <HAL_GetTick>
 800e24c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	e316      	b.n	800e886 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a66      	ldr	r2, [pc, #408]	@ (800e3f8 <HAL_DMA_Init+0x1b8>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d04a      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a65      	ldr	r2, [pc, #404]	@ (800e3fc <HAL_DMA_Init+0x1bc>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d045      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a63      	ldr	r2, [pc, #396]	@ (800e400 <HAL_DMA_Init+0x1c0>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d040      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a62      	ldr	r2, [pc, #392]	@ (800e404 <HAL_DMA_Init+0x1c4>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d03b      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a60      	ldr	r2, [pc, #384]	@ (800e408 <HAL_DMA_Init+0x1c8>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d036      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a5f      	ldr	r2, [pc, #380]	@ (800e40c <HAL_DMA_Init+0x1cc>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d031      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a5d      	ldr	r2, [pc, #372]	@ (800e410 <HAL_DMA_Init+0x1d0>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d02c      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a5c      	ldr	r2, [pc, #368]	@ (800e414 <HAL_DMA_Init+0x1d4>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d027      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a5a      	ldr	r2, [pc, #360]	@ (800e418 <HAL_DMA_Init+0x1d8>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d022      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a59      	ldr	r2, [pc, #356]	@ (800e41c <HAL_DMA_Init+0x1dc>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d01d      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a57      	ldr	r2, [pc, #348]	@ (800e420 <HAL_DMA_Init+0x1e0>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d018      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a56      	ldr	r2, [pc, #344]	@ (800e424 <HAL_DMA_Init+0x1e4>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d013      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a54      	ldr	r2, [pc, #336]	@ (800e428 <HAL_DMA_Init+0x1e8>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d00e      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a53      	ldr	r2, [pc, #332]	@ (800e42c <HAL_DMA_Init+0x1ec>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d009      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a51      	ldr	r2, [pc, #324]	@ (800e430 <HAL_DMA_Init+0x1f0>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d004      	beq.n	800e2f8 <HAL_DMA_Init+0xb8>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a50      	ldr	r2, [pc, #320]	@ (800e434 <HAL_DMA_Init+0x1f4>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d101      	bne.n	800e2fc <HAL_DMA_Init+0xbc>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <HAL_DMA_Init+0xbe>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 813b 	beq.w	800e57a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2202      	movs	r2, #2
 800e308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a37      	ldr	r2, [pc, #220]	@ (800e3f8 <HAL_DMA_Init+0x1b8>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d04a      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a36      	ldr	r2, [pc, #216]	@ (800e3fc <HAL_DMA_Init+0x1bc>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d045      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a34      	ldr	r2, [pc, #208]	@ (800e400 <HAL_DMA_Init+0x1c0>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d040      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a33      	ldr	r2, [pc, #204]	@ (800e404 <HAL_DMA_Init+0x1c4>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d03b      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a31      	ldr	r2, [pc, #196]	@ (800e408 <HAL_DMA_Init+0x1c8>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d036      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a30      	ldr	r2, [pc, #192]	@ (800e40c <HAL_DMA_Init+0x1cc>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d031      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a2e      	ldr	r2, [pc, #184]	@ (800e410 <HAL_DMA_Init+0x1d0>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d02c      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a2d      	ldr	r2, [pc, #180]	@ (800e414 <HAL_DMA_Init+0x1d4>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d027      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a2b      	ldr	r2, [pc, #172]	@ (800e418 <HAL_DMA_Init+0x1d8>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d022      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a2a      	ldr	r2, [pc, #168]	@ (800e41c <HAL_DMA_Init+0x1dc>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d01d      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a28      	ldr	r2, [pc, #160]	@ (800e420 <HAL_DMA_Init+0x1e0>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d018      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a27      	ldr	r2, [pc, #156]	@ (800e424 <HAL_DMA_Init+0x1e4>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d013      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a25      	ldr	r2, [pc, #148]	@ (800e428 <HAL_DMA_Init+0x1e8>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d00e      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a24      	ldr	r2, [pc, #144]	@ (800e42c <HAL_DMA_Init+0x1ec>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d009      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a22      	ldr	r2, [pc, #136]	@ (800e430 <HAL_DMA_Init+0x1f0>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d004      	beq.n	800e3b4 <HAL_DMA_Init+0x174>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a21      	ldr	r2, [pc, #132]	@ (800e434 <HAL_DMA_Init+0x1f4>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d108      	bne.n	800e3c6 <HAL_DMA_Init+0x186>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f022 0201 	bic.w	r2, r2, #1
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e007      	b.n	800e3d6 <HAL_DMA_Init+0x196>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f022 0201 	bic.w	r2, r2, #1
 800e3d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e3d6:	e02f      	b.n	800e438 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e3d8:	f7ff fd54 	bl	800de84 <HAL_GetTick>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	1ad3      	subs	r3, r2, r3
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d928      	bls.n	800e438 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2203      	movs	r2, #3
 800e3f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e246      	b.n	800e886 <HAL_DMA_Init+0x646>
 800e3f8:	40020010 	.word	0x40020010
 800e3fc:	40020028 	.word	0x40020028
 800e400:	40020040 	.word	0x40020040
 800e404:	40020058 	.word	0x40020058
 800e408:	40020070 	.word	0x40020070
 800e40c:	40020088 	.word	0x40020088
 800e410:	400200a0 	.word	0x400200a0
 800e414:	400200b8 	.word	0x400200b8
 800e418:	40020410 	.word	0x40020410
 800e41c:	40020428 	.word	0x40020428
 800e420:	40020440 	.word	0x40020440
 800e424:	40020458 	.word	0x40020458
 800e428:	40020470 	.word	0x40020470
 800e42c:	40020488 	.word	0x40020488
 800e430:	400204a0 	.word	0x400204a0
 800e434:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f003 0301 	and.w	r3, r3, #1
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1c8      	bne.n	800e3d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	4b83      	ldr	r3, [pc, #524]	@ (800e660 <HAL_DMA_Init+0x420>)
 800e452:	4013      	ands	r3, r2
 800e454:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800e45e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e46a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e476:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a1b      	ldr	r3, [r3, #32]
 800e47c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	4313      	orrs	r3, r2
 800e482:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e488:	2b04      	cmp	r3, #4
 800e48a:	d107      	bne.n	800e49c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e494:	4313      	orrs	r3, r2
 800e496:	697a      	ldr	r2, [r7, #20]
 800e498:	4313      	orrs	r3, r2
 800e49a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e49c:	4b71      	ldr	r3, [pc, #452]	@ (800e664 <HAL_DMA_Init+0x424>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	4b71      	ldr	r3, [pc, #452]	@ (800e668 <HAL_DMA_Init+0x428>)
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4a8:	d328      	bcc.n	800e4fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	2b28      	cmp	r3, #40	@ 0x28
 800e4b0:	d903      	bls.n	800e4ba <HAL_DMA_Init+0x27a>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4b8:	d917      	bls.n	800e4ea <HAL_DMA_Init+0x2aa>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4c0:	d903      	bls.n	800e4ca <HAL_DMA_Init+0x28a>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	2b42      	cmp	r3, #66	@ 0x42
 800e4c8:	d90f      	bls.n	800e4ea <HAL_DMA_Init+0x2aa>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	2b46      	cmp	r3, #70	@ 0x46
 800e4d0:	d903      	bls.n	800e4da <HAL_DMA_Init+0x29a>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	2b48      	cmp	r3, #72	@ 0x48
 800e4d8:	d907      	bls.n	800e4ea <HAL_DMA_Init+0x2aa>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	2b4e      	cmp	r3, #78	@ 0x4e
 800e4e0:	d905      	bls.n	800e4ee <HAL_DMA_Init+0x2ae>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	2b52      	cmp	r3, #82	@ 0x52
 800e4e8:	d801      	bhi.n	800e4ee <HAL_DMA_Init+0x2ae>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e000      	b.n	800e4f0 <HAL_DMA_Init+0x2b0>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	f023 0307 	bic.w	r3, r3, #7
 800e512:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e518:	697a      	ldr	r2, [r7, #20]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e522:	2b04      	cmp	r3, #4
 800e524:	d117      	bne.n	800e556 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	4313      	orrs	r3, r2
 800e52e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00e      	beq.n	800e556 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f001 fc23 	bl	800fd84 <DMA_CheckFifoParam>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d008      	beq.n	800e556 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2240      	movs	r2, #64	@ 0x40
 800e548:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e197      	b.n	800e886 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f001 fb5e 	bl	800fc20 <DMA_CalcBaseAndBitshift>
 800e564:	4603      	mov	r3, r0
 800e566:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e56c:	f003 031f 	and.w	r3, r3, #31
 800e570:	223f      	movs	r2, #63	@ 0x3f
 800e572:	409a      	lsls	r2, r3
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	609a      	str	r2, [r3, #8]
 800e578:	e0cd      	b.n	800e716 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a3b      	ldr	r2, [pc, #236]	@ (800e66c <HAL_DMA_Init+0x42c>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d022      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a39      	ldr	r2, [pc, #228]	@ (800e670 <HAL_DMA_Init+0x430>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d01d      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a38      	ldr	r2, [pc, #224]	@ (800e674 <HAL_DMA_Init+0x434>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d018      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a36      	ldr	r2, [pc, #216]	@ (800e678 <HAL_DMA_Init+0x438>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d013      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a35      	ldr	r2, [pc, #212]	@ (800e67c <HAL_DMA_Init+0x43c>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d00e      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a33      	ldr	r2, [pc, #204]	@ (800e680 <HAL_DMA_Init+0x440>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d009      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a32      	ldr	r2, [pc, #200]	@ (800e684 <HAL_DMA_Init+0x444>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d004      	beq.n	800e5ca <HAL_DMA_Init+0x38a>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a30      	ldr	r2, [pc, #192]	@ (800e688 <HAL_DMA_Init+0x448>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d101      	bne.n	800e5ce <HAL_DMA_Init+0x38e>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <HAL_DMA_Init+0x390>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 8097 	beq.w	800e704 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a24      	ldr	r2, [pc, #144]	@ (800e66c <HAL_DMA_Init+0x42c>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d021      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a22      	ldr	r2, [pc, #136]	@ (800e670 <HAL_DMA_Init+0x430>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d01c      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a21      	ldr	r2, [pc, #132]	@ (800e674 <HAL_DMA_Init+0x434>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d017      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1f      	ldr	r2, [pc, #124]	@ (800e678 <HAL_DMA_Init+0x438>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d012      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a1e      	ldr	r2, [pc, #120]	@ (800e67c <HAL_DMA_Init+0x43c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00d      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a1c      	ldr	r2, [pc, #112]	@ (800e680 <HAL_DMA_Init+0x440>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d008      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a1b      	ldr	r2, [pc, #108]	@ (800e684 <HAL_DMA_Init+0x444>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d003      	beq.n	800e624 <HAL_DMA_Init+0x3e4>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a19      	ldr	r2, [pc, #100]	@ (800e688 <HAL_DMA_Init+0x448>)
 800e622:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2202      	movs	r2, #2
 800e628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	4b13      	ldr	r3, [pc, #76]	@ (800e68c <HAL_DMA_Init+0x44c>)
 800e640:	4013      	ands	r3, r2
 800e642:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	2b40      	cmp	r3, #64	@ 0x40
 800e64a:	d021      	beq.n	800e690 <HAL_DMA_Init+0x450>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	2b80      	cmp	r3, #128	@ 0x80
 800e652:	d102      	bne.n	800e65a <HAL_DMA_Init+0x41a>
 800e654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e658:	e01b      	b.n	800e692 <HAL_DMA_Init+0x452>
 800e65a:	2300      	movs	r3, #0
 800e65c:	e019      	b.n	800e692 <HAL_DMA_Init+0x452>
 800e65e:	bf00      	nop
 800e660:	fe10803f 	.word	0xfe10803f
 800e664:	5c001000 	.word	0x5c001000
 800e668:	ffff0000 	.word	0xffff0000
 800e66c:	58025408 	.word	0x58025408
 800e670:	5802541c 	.word	0x5802541c
 800e674:	58025430 	.word	0x58025430
 800e678:	58025444 	.word	0x58025444
 800e67c:	58025458 	.word	0x58025458
 800e680:	5802546c 	.word	0x5802546c
 800e684:	58025480 	.word	0x58025480
 800e688:	58025494 	.word	0x58025494
 800e68c:	fffe000f 	.word	0xfffe000f
 800e690:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	68d2      	ldr	r2, [r2, #12]
 800e696:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800e6a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e6a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e6b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800e6b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800e6c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4b6e      	ldr	r3, [pc, #440]	@ (800e890 <HAL_DMA_Init+0x650>)
 800e6d8:	4413      	add	r3, r2
 800e6da:	4a6e      	ldr	r2, [pc, #440]	@ (800e894 <HAL_DMA_Init+0x654>)
 800e6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e0:	091b      	lsrs	r3, r3, #4
 800e6e2:	009a      	lsls	r2, r3, #2
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f001 fa99 	bl	800fc20 <DMA_CalcBaseAndBitshift>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6f6:	f003 031f 	and.w	r3, r3, #31
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	409a      	lsls	r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	605a      	str	r2, [r3, #4]
 800e702:	e008      	b.n	800e716 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2240      	movs	r2, #64	@ 0x40
 800e708:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2203      	movs	r2, #3
 800e70e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	e0b7      	b.n	800e886 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a5f      	ldr	r2, [pc, #380]	@ (800e898 <HAL_DMA_Init+0x658>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d072      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a5d      	ldr	r2, [pc, #372]	@ (800e89c <HAL_DMA_Init+0x65c>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d06d      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a5c      	ldr	r2, [pc, #368]	@ (800e8a0 <HAL_DMA_Init+0x660>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d068      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a5a      	ldr	r2, [pc, #360]	@ (800e8a4 <HAL_DMA_Init+0x664>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d063      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a59      	ldr	r2, [pc, #356]	@ (800e8a8 <HAL_DMA_Init+0x668>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d05e      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a57      	ldr	r2, [pc, #348]	@ (800e8ac <HAL_DMA_Init+0x66c>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d059      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a56      	ldr	r2, [pc, #344]	@ (800e8b0 <HAL_DMA_Init+0x670>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d054      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a54      	ldr	r2, [pc, #336]	@ (800e8b4 <HAL_DMA_Init+0x674>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d04f      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a53      	ldr	r2, [pc, #332]	@ (800e8b8 <HAL_DMA_Init+0x678>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d04a      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a51      	ldr	r2, [pc, #324]	@ (800e8bc <HAL_DMA_Init+0x67c>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d045      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a50      	ldr	r2, [pc, #320]	@ (800e8c0 <HAL_DMA_Init+0x680>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d040      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a4e      	ldr	r2, [pc, #312]	@ (800e8c4 <HAL_DMA_Init+0x684>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d03b      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a4d      	ldr	r2, [pc, #308]	@ (800e8c8 <HAL_DMA_Init+0x688>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d036      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a4b      	ldr	r2, [pc, #300]	@ (800e8cc <HAL_DMA_Init+0x68c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d031      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a4a      	ldr	r2, [pc, #296]	@ (800e8d0 <HAL_DMA_Init+0x690>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d02c      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a48      	ldr	r2, [pc, #288]	@ (800e8d4 <HAL_DMA_Init+0x694>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d027      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a47      	ldr	r2, [pc, #284]	@ (800e8d8 <HAL_DMA_Init+0x698>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d022      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a45      	ldr	r2, [pc, #276]	@ (800e8dc <HAL_DMA_Init+0x69c>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d01d      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a44      	ldr	r2, [pc, #272]	@ (800e8e0 <HAL_DMA_Init+0x6a0>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d018      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a42      	ldr	r2, [pc, #264]	@ (800e8e4 <HAL_DMA_Init+0x6a4>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d013      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a41      	ldr	r2, [pc, #260]	@ (800e8e8 <HAL_DMA_Init+0x6a8>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d00e      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800e8ec <HAL_DMA_Init+0x6ac>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d009      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a3e      	ldr	r2, [pc, #248]	@ (800e8f0 <HAL_DMA_Init+0x6b0>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d004      	beq.n	800e806 <HAL_DMA_Init+0x5c6>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a3c      	ldr	r2, [pc, #240]	@ (800e8f4 <HAL_DMA_Init+0x6b4>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d101      	bne.n	800e80a <HAL_DMA_Init+0x5ca>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <HAL_DMA_Init+0x5cc>
 800e80a:	2300      	movs	r3, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d032      	beq.n	800e876 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f001 fb33 	bl	800fe7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	2b80      	cmp	r3, #128	@ 0x80
 800e81c:	d102      	bne.n	800e824 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e82c:	b2d2      	uxtb	r2, r2
 800e82e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e838:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d010      	beq.n	800e864 <HAL_DMA_Init+0x624>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	2b08      	cmp	r3, #8
 800e848:	d80c      	bhi.n	800e864 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f001 fbb0 	bl	800ffb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e860:	605a      	str	r2, [r3, #4]
 800e862:	e008      	b.n	800e876 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	a7fdabf8 	.word	0xa7fdabf8
 800e894:	cccccccd 	.word	0xcccccccd
 800e898:	40020010 	.word	0x40020010
 800e89c:	40020028 	.word	0x40020028
 800e8a0:	40020040 	.word	0x40020040
 800e8a4:	40020058 	.word	0x40020058
 800e8a8:	40020070 	.word	0x40020070
 800e8ac:	40020088 	.word	0x40020088
 800e8b0:	400200a0 	.word	0x400200a0
 800e8b4:	400200b8 	.word	0x400200b8
 800e8b8:	40020410 	.word	0x40020410
 800e8bc:	40020428 	.word	0x40020428
 800e8c0:	40020440 	.word	0x40020440
 800e8c4:	40020458 	.word	0x40020458
 800e8c8:	40020470 	.word	0x40020470
 800e8cc:	40020488 	.word	0x40020488
 800e8d0:	400204a0 	.word	0x400204a0
 800e8d4:	400204b8 	.word	0x400204b8
 800e8d8:	58025408 	.word	0x58025408
 800e8dc:	5802541c 	.word	0x5802541c
 800e8e0:	58025430 	.word	0x58025430
 800e8e4:	58025444 	.word	0x58025444
 800e8e8:	58025458 	.word	0x58025458
 800e8ec:	5802546c 	.word	0x5802546c
 800e8f0:	58025480 	.word	0x58025480
 800e8f4:	58025494 	.word	0x58025494

0800e8f8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	e0ec      	b.n	800eaee <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d101      	bne.n	800e922 <HAL_DMA_Start+0x2a>
 800e91e:	2302      	movs	r3, #2
 800e920:	e0e5      	b.n	800eaee <HAL_DMA_Start+0x1f6>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b01      	cmp	r3, #1
 800e934:	f040 80d0 	bne.w	800ead8 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2202      	movs	r2, #2
 800e93c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2200      	movs	r2, #0
 800e944:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a6b      	ldr	r2, [pc, #428]	@ (800eaf8 <HAL_DMA_Start+0x200>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d04a      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a69      	ldr	r2, [pc, #420]	@ (800eafc <HAL_DMA_Start+0x204>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d045      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a68      	ldr	r2, [pc, #416]	@ (800eb00 <HAL_DMA_Start+0x208>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d040      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a66      	ldr	r2, [pc, #408]	@ (800eb04 <HAL_DMA_Start+0x20c>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d03b      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a65      	ldr	r2, [pc, #404]	@ (800eb08 <HAL_DMA_Start+0x210>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d036      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a63      	ldr	r2, [pc, #396]	@ (800eb0c <HAL_DMA_Start+0x214>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d031      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a62      	ldr	r2, [pc, #392]	@ (800eb10 <HAL_DMA_Start+0x218>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d02c      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a60      	ldr	r2, [pc, #384]	@ (800eb14 <HAL_DMA_Start+0x21c>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d027      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a5f      	ldr	r2, [pc, #380]	@ (800eb18 <HAL_DMA_Start+0x220>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d022      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a5d      	ldr	r2, [pc, #372]	@ (800eb1c <HAL_DMA_Start+0x224>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d01d      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a5c      	ldr	r2, [pc, #368]	@ (800eb20 <HAL_DMA_Start+0x228>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d018      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a5a      	ldr	r2, [pc, #360]	@ (800eb24 <HAL_DMA_Start+0x22c>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d013      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a59      	ldr	r2, [pc, #356]	@ (800eb28 <HAL_DMA_Start+0x230>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d00e      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a57      	ldr	r2, [pc, #348]	@ (800eb2c <HAL_DMA_Start+0x234>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d009      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a56      	ldr	r2, [pc, #344]	@ (800eb30 <HAL_DMA_Start+0x238>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d004      	beq.n	800e9e6 <HAL_DMA_Start+0xee>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a54      	ldr	r2, [pc, #336]	@ (800eb34 <HAL_DMA_Start+0x23c>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d108      	bne.n	800e9f8 <HAL_DMA_Start+0x100>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 0201 	bic.w	r2, r2, #1
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	e007      	b.n	800ea08 <HAL_DMA_Start+0x110>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f022 0201 	bic.w	r2, r2, #1
 800ea06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 ff5a 	bl	800f8c8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a37      	ldr	r2, [pc, #220]	@ (800eaf8 <HAL_DMA_Start+0x200>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d04a      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a36      	ldr	r2, [pc, #216]	@ (800eafc <HAL_DMA_Start+0x204>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d045      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a34      	ldr	r2, [pc, #208]	@ (800eb00 <HAL_DMA_Start+0x208>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d040      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a33      	ldr	r2, [pc, #204]	@ (800eb04 <HAL_DMA_Start+0x20c>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d03b      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a31      	ldr	r2, [pc, #196]	@ (800eb08 <HAL_DMA_Start+0x210>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d036      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a30      	ldr	r2, [pc, #192]	@ (800eb0c <HAL_DMA_Start+0x214>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d031      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a2e      	ldr	r2, [pc, #184]	@ (800eb10 <HAL_DMA_Start+0x218>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d02c      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a2d      	ldr	r2, [pc, #180]	@ (800eb14 <HAL_DMA_Start+0x21c>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d027      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a2b      	ldr	r2, [pc, #172]	@ (800eb18 <HAL_DMA_Start+0x220>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d022      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a2a      	ldr	r2, [pc, #168]	@ (800eb1c <HAL_DMA_Start+0x224>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d01d      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a28      	ldr	r2, [pc, #160]	@ (800eb20 <HAL_DMA_Start+0x228>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d018      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a27      	ldr	r2, [pc, #156]	@ (800eb24 <HAL_DMA_Start+0x22c>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d013      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a25      	ldr	r2, [pc, #148]	@ (800eb28 <HAL_DMA_Start+0x230>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d00e      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a24      	ldr	r2, [pc, #144]	@ (800eb2c <HAL_DMA_Start+0x234>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d009      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a22      	ldr	r2, [pc, #136]	@ (800eb30 <HAL_DMA_Start+0x238>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d004      	beq.n	800eab4 <HAL_DMA_Start+0x1bc>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a21      	ldr	r2, [pc, #132]	@ (800eb34 <HAL_DMA_Start+0x23c>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d108      	bne.n	800eac6 <HAL_DMA_Start+0x1ce>
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f042 0201 	orr.w	r2, r2, #1
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	e012      	b.n	800eaec <HAL_DMA_Start+0x1f4>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f042 0201 	orr.w	r2, r2, #1
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	e009      	b.n	800eaec <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eade:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800eae8:	2301      	movs	r3, #1
 800eaea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3718      	adds	r7, #24
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	40020010 	.word	0x40020010
 800eafc:	40020028 	.word	0x40020028
 800eb00:	40020040 	.word	0x40020040
 800eb04:	40020058 	.word	0x40020058
 800eb08:	40020070 	.word	0x40020070
 800eb0c:	40020088 	.word	0x40020088
 800eb10:	400200a0 	.word	0x400200a0
 800eb14:	400200b8 	.word	0x400200b8
 800eb18:	40020410 	.word	0x40020410
 800eb1c:	40020428 	.word	0x40020428
 800eb20:	40020440 	.word	0x40020440
 800eb24:	40020458 	.word	0x40020458
 800eb28:	40020470 	.word	0x40020470
 800eb2c:	40020488 	.word	0x40020488
 800eb30:	400204a0 	.word	0x400204a0
 800eb34:	400204b8 	.word	0x400204b8

0800eb38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800eb40:	f7ff f9a0 	bl	800de84 <HAL_GetTick>
 800eb44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e2dc      	b.n	800f10a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d008      	beq.n	800eb6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2280      	movs	r2, #128	@ 0x80
 800eb60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e2cd      	b.n	800f10a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a76      	ldr	r2, [pc, #472]	@ (800ed4c <HAL_DMA_Abort+0x214>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d04a      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a74      	ldr	r2, [pc, #464]	@ (800ed50 <HAL_DMA_Abort+0x218>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d045      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a73      	ldr	r2, [pc, #460]	@ (800ed54 <HAL_DMA_Abort+0x21c>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d040      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a71      	ldr	r2, [pc, #452]	@ (800ed58 <HAL_DMA_Abort+0x220>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d03b      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a70      	ldr	r2, [pc, #448]	@ (800ed5c <HAL_DMA_Abort+0x224>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d036      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a6e      	ldr	r2, [pc, #440]	@ (800ed60 <HAL_DMA_Abort+0x228>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d031      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a6d      	ldr	r2, [pc, #436]	@ (800ed64 <HAL_DMA_Abort+0x22c>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d02c      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a6b      	ldr	r2, [pc, #428]	@ (800ed68 <HAL_DMA_Abort+0x230>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d027      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a6a      	ldr	r2, [pc, #424]	@ (800ed6c <HAL_DMA_Abort+0x234>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d022      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a68      	ldr	r2, [pc, #416]	@ (800ed70 <HAL_DMA_Abort+0x238>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d01d      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a67      	ldr	r2, [pc, #412]	@ (800ed74 <HAL_DMA_Abort+0x23c>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d018      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a65      	ldr	r2, [pc, #404]	@ (800ed78 <HAL_DMA_Abort+0x240>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d013      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a64      	ldr	r2, [pc, #400]	@ (800ed7c <HAL_DMA_Abort+0x244>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d00e      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a62      	ldr	r2, [pc, #392]	@ (800ed80 <HAL_DMA_Abort+0x248>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d009      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a61      	ldr	r2, [pc, #388]	@ (800ed84 <HAL_DMA_Abort+0x24c>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d004      	beq.n	800ec0e <HAL_DMA_Abort+0xd6>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a5f      	ldr	r2, [pc, #380]	@ (800ed88 <HAL_DMA_Abort+0x250>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d101      	bne.n	800ec12 <HAL_DMA_Abort+0xda>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e000      	b.n	800ec14 <HAL_DMA_Abort+0xdc>
 800ec12:	2300      	movs	r3, #0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d013      	beq.n	800ec40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f022 021e 	bic.w	r2, r2, #30
 800ec26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	695a      	ldr	r2, [r3, #20]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ec36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	617b      	str	r3, [r7, #20]
 800ec3e:	e00a      	b.n	800ec56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f022 020e 	bic.w	r2, r2, #14
 800ec4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a3c      	ldr	r2, [pc, #240]	@ (800ed4c <HAL_DMA_Abort+0x214>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d072      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a3a      	ldr	r2, [pc, #232]	@ (800ed50 <HAL_DMA_Abort+0x218>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d06d      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a39      	ldr	r2, [pc, #228]	@ (800ed54 <HAL_DMA_Abort+0x21c>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d068      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a37      	ldr	r2, [pc, #220]	@ (800ed58 <HAL_DMA_Abort+0x220>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d063      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a36      	ldr	r2, [pc, #216]	@ (800ed5c <HAL_DMA_Abort+0x224>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d05e      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a34      	ldr	r2, [pc, #208]	@ (800ed60 <HAL_DMA_Abort+0x228>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d059      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a33      	ldr	r2, [pc, #204]	@ (800ed64 <HAL_DMA_Abort+0x22c>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d054      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a31      	ldr	r2, [pc, #196]	@ (800ed68 <HAL_DMA_Abort+0x230>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d04f      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a30      	ldr	r2, [pc, #192]	@ (800ed6c <HAL_DMA_Abort+0x234>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d04a      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a2e      	ldr	r2, [pc, #184]	@ (800ed70 <HAL_DMA_Abort+0x238>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d045      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a2d      	ldr	r2, [pc, #180]	@ (800ed74 <HAL_DMA_Abort+0x23c>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d040      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a2b      	ldr	r2, [pc, #172]	@ (800ed78 <HAL_DMA_Abort+0x240>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d03b      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a2a      	ldr	r2, [pc, #168]	@ (800ed7c <HAL_DMA_Abort+0x244>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d036      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a28      	ldr	r2, [pc, #160]	@ (800ed80 <HAL_DMA_Abort+0x248>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d031      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a27      	ldr	r2, [pc, #156]	@ (800ed84 <HAL_DMA_Abort+0x24c>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d02c      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a25      	ldr	r2, [pc, #148]	@ (800ed88 <HAL_DMA_Abort+0x250>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d027      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a24      	ldr	r2, [pc, #144]	@ (800ed8c <HAL_DMA_Abort+0x254>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d022      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a22      	ldr	r2, [pc, #136]	@ (800ed90 <HAL_DMA_Abort+0x258>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d01d      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a21      	ldr	r2, [pc, #132]	@ (800ed94 <HAL_DMA_Abort+0x25c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d018      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a1f      	ldr	r2, [pc, #124]	@ (800ed98 <HAL_DMA_Abort+0x260>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d013      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a1e      	ldr	r2, [pc, #120]	@ (800ed9c <HAL_DMA_Abort+0x264>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d00e      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a1c      	ldr	r2, [pc, #112]	@ (800eda0 <HAL_DMA_Abort+0x268>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d009      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a1b      	ldr	r2, [pc, #108]	@ (800eda4 <HAL_DMA_Abort+0x26c>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d004      	beq.n	800ed46 <HAL_DMA_Abort+0x20e>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a19      	ldr	r2, [pc, #100]	@ (800eda8 <HAL_DMA_Abort+0x270>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d132      	bne.n	800edac <HAL_DMA_Abort+0x274>
 800ed46:	2301      	movs	r3, #1
 800ed48:	e031      	b.n	800edae <HAL_DMA_Abort+0x276>
 800ed4a:	bf00      	nop
 800ed4c:	40020010 	.word	0x40020010
 800ed50:	40020028 	.word	0x40020028
 800ed54:	40020040 	.word	0x40020040
 800ed58:	40020058 	.word	0x40020058
 800ed5c:	40020070 	.word	0x40020070
 800ed60:	40020088 	.word	0x40020088
 800ed64:	400200a0 	.word	0x400200a0
 800ed68:	400200b8 	.word	0x400200b8
 800ed6c:	40020410 	.word	0x40020410
 800ed70:	40020428 	.word	0x40020428
 800ed74:	40020440 	.word	0x40020440
 800ed78:	40020458 	.word	0x40020458
 800ed7c:	40020470 	.word	0x40020470
 800ed80:	40020488 	.word	0x40020488
 800ed84:	400204a0 	.word	0x400204a0
 800ed88:	400204b8 	.word	0x400204b8
 800ed8c:	58025408 	.word	0x58025408
 800ed90:	5802541c 	.word	0x5802541c
 800ed94:	58025430 	.word	0x58025430
 800ed98:	58025444 	.word	0x58025444
 800ed9c:	58025458 	.word	0x58025458
 800eda0:	5802546c 	.word	0x5802546c
 800eda4:	58025480 	.word	0x58025480
 800eda8:	58025494 	.word	0x58025494
 800edac:	2300      	movs	r3, #0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d007      	beq.n	800edc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800edc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a6d      	ldr	r2, [pc, #436]	@ (800ef7c <HAL_DMA_Abort+0x444>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d04a      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a6b      	ldr	r2, [pc, #428]	@ (800ef80 <HAL_DMA_Abort+0x448>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d045      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a6a      	ldr	r2, [pc, #424]	@ (800ef84 <HAL_DMA_Abort+0x44c>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d040      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a68      	ldr	r2, [pc, #416]	@ (800ef88 <HAL_DMA_Abort+0x450>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d03b      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a67      	ldr	r2, [pc, #412]	@ (800ef8c <HAL_DMA_Abort+0x454>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d036      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a65      	ldr	r2, [pc, #404]	@ (800ef90 <HAL_DMA_Abort+0x458>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d031      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a64      	ldr	r2, [pc, #400]	@ (800ef94 <HAL_DMA_Abort+0x45c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d02c      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a62      	ldr	r2, [pc, #392]	@ (800ef98 <HAL_DMA_Abort+0x460>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d027      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a61      	ldr	r2, [pc, #388]	@ (800ef9c <HAL_DMA_Abort+0x464>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d022      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a5f      	ldr	r2, [pc, #380]	@ (800efa0 <HAL_DMA_Abort+0x468>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d01d      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a5e      	ldr	r2, [pc, #376]	@ (800efa4 <HAL_DMA_Abort+0x46c>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d018      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a5c      	ldr	r2, [pc, #368]	@ (800efa8 <HAL_DMA_Abort+0x470>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d013      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a5b      	ldr	r2, [pc, #364]	@ (800efac <HAL_DMA_Abort+0x474>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d00e      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a59      	ldr	r2, [pc, #356]	@ (800efb0 <HAL_DMA_Abort+0x478>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d009      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a58      	ldr	r2, [pc, #352]	@ (800efb4 <HAL_DMA_Abort+0x47c>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d004      	beq.n	800ee62 <HAL_DMA_Abort+0x32a>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a56      	ldr	r2, [pc, #344]	@ (800efb8 <HAL_DMA_Abort+0x480>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d108      	bne.n	800ee74 <HAL_DMA_Abort+0x33c>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f022 0201 	bic.w	r2, r2, #1
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	e007      	b.n	800ee84 <HAL_DMA_Abort+0x34c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f022 0201 	bic.w	r2, r2, #1
 800ee82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ee84:	e013      	b.n	800eeae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ee86:	f7fe fffd 	bl	800de84 <HAL_GetTick>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	2b05      	cmp	r3, #5
 800ee92:	d90c      	bls.n	800eeae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2220      	movs	r2, #32
 800ee98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2203      	movs	r2, #3
 800ee9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e12d      	b.n	800f10a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1e5      	bne.n	800ee86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a2f      	ldr	r2, [pc, #188]	@ (800ef7c <HAL_DMA_Abort+0x444>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d04a      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a2d      	ldr	r2, [pc, #180]	@ (800ef80 <HAL_DMA_Abort+0x448>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d045      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a2c      	ldr	r2, [pc, #176]	@ (800ef84 <HAL_DMA_Abort+0x44c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d040      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a2a      	ldr	r2, [pc, #168]	@ (800ef88 <HAL_DMA_Abort+0x450>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d03b      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a29      	ldr	r2, [pc, #164]	@ (800ef8c <HAL_DMA_Abort+0x454>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d036      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a27      	ldr	r2, [pc, #156]	@ (800ef90 <HAL_DMA_Abort+0x458>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d031      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a26      	ldr	r2, [pc, #152]	@ (800ef94 <HAL_DMA_Abort+0x45c>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d02c      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a24      	ldr	r2, [pc, #144]	@ (800ef98 <HAL_DMA_Abort+0x460>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d027      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a23      	ldr	r2, [pc, #140]	@ (800ef9c <HAL_DMA_Abort+0x464>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d022      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a21      	ldr	r2, [pc, #132]	@ (800efa0 <HAL_DMA_Abort+0x468>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d01d      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a20      	ldr	r2, [pc, #128]	@ (800efa4 <HAL_DMA_Abort+0x46c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d018      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a1e      	ldr	r2, [pc, #120]	@ (800efa8 <HAL_DMA_Abort+0x470>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d013      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a1d      	ldr	r2, [pc, #116]	@ (800efac <HAL_DMA_Abort+0x474>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d00e      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a1b      	ldr	r2, [pc, #108]	@ (800efb0 <HAL_DMA_Abort+0x478>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d009      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a1a      	ldr	r2, [pc, #104]	@ (800efb4 <HAL_DMA_Abort+0x47c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d004      	beq.n	800ef5a <HAL_DMA_Abort+0x422>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a18      	ldr	r2, [pc, #96]	@ (800efb8 <HAL_DMA_Abort+0x480>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d101      	bne.n	800ef5e <HAL_DMA_Abort+0x426>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e000      	b.n	800ef60 <HAL_DMA_Abort+0x428>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d02b      	beq.n	800efbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef6e:	f003 031f 	and.w	r3, r3, #31
 800ef72:	223f      	movs	r2, #63	@ 0x3f
 800ef74:	409a      	lsls	r2, r3
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	609a      	str	r2, [r3, #8]
 800ef7a:	e02a      	b.n	800efd2 <HAL_DMA_Abort+0x49a>
 800ef7c:	40020010 	.word	0x40020010
 800ef80:	40020028 	.word	0x40020028
 800ef84:	40020040 	.word	0x40020040
 800ef88:	40020058 	.word	0x40020058
 800ef8c:	40020070 	.word	0x40020070
 800ef90:	40020088 	.word	0x40020088
 800ef94:	400200a0 	.word	0x400200a0
 800ef98:	400200b8 	.word	0x400200b8
 800ef9c:	40020410 	.word	0x40020410
 800efa0:	40020428 	.word	0x40020428
 800efa4:	40020440 	.word	0x40020440
 800efa8:	40020458 	.word	0x40020458
 800efac:	40020470 	.word	0x40020470
 800efb0:	40020488 	.word	0x40020488
 800efb4:	400204a0 	.word	0x400204a0
 800efb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efc6:	f003 031f 	and.w	r3, r3, #31
 800efca:	2201      	movs	r2, #1
 800efcc:	409a      	lsls	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a4f      	ldr	r2, [pc, #316]	@ (800f114 <HAL_DMA_Abort+0x5dc>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d072      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a4d      	ldr	r2, [pc, #308]	@ (800f118 <HAL_DMA_Abort+0x5e0>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d06d      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a4c      	ldr	r2, [pc, #304]	@ (800f11c <HAL_DMA_Abort+0x5e4>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d068      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a4a      	ldr	r2, [pc, #296]	@ (800f120 <HAL_DMA_Abort+0x5e8>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d063      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a49      	ldr	r2, [pc, #292]	@ (800f124 <HAL_DMA_Abort+0x5ec>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d05e      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a47      	ldr	r2, [pc, #284]	@ (800f128 <HAL_DMA_Abort+0x5f0>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d059      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a46      	ldr	r2, [pc, #280]	@ (800f12c <HAL_DMA_Abort+0x5f4>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d054      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a44      	ldr	r2, [pc, #272]	@ (800f130 <HAL_DMA_Abort+0x5f8>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d04f      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a43      	ldr	r2, [pc, #268]	@ (800f134 <HAL_DMA_Abort+0x5fc>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d04a      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a41      	ldr	r2, [pc, #260]	@ (800f138 <HAL_DMA_Abort+0x600>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d045      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a40      	ldr	r2, [pc, #256]	@ (800f13c <HAL_DMA_Abort+0x604>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d040      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a3e      	ldr	r2, [pc, #248]	@ (800f140 <HAL_DMA_Abort+0x608>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d03b      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a3d      	ldr	r2, [pc, #244]	@ (800f144 <HAL_DMA_Abort+0x60c>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d036      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a3b      	ldr	r2, [pc, #236]	@ (800f148 <HAL_DMA_Abort+0x610>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d031      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4a3a      	ldr	r2, [pc, #232]	@ (800f14c <HAL_DMA_Abort+0x614>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d02c      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a38      	ldr	r2, [pc, #224]	@ (800f150 <HAL_DMA_Abort+0x618>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d027      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a37      	ldr	r2, [pc, #220]	@ (800f154 <HAL_DMA_Abort+0x61c>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d022      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a35      	ldr	r2, [pc, #212]	@ (800f158 <HAL_DMA_Abort+0x620>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d01d      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a34      	ldr	r2, [pc, #208]	@ (800f15c <HAL_DMA_Abort+0x624>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d018      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a32      	ldr	r2, [pc, #200]	@ (800f160 <HAL_DMA_Abort+0x628>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d013      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a31      	ldr	r2, [pc, #196]	@ (800f164 <HAL_DMA_Abort+0x62c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d00e      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a2f      	ldr	r2, [pc, #188]	@ (800f168 <HAL_DMA_Abort+0x630>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d009      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4a2e      	ldr	r2, [pc, #184]	@ (800f16c <HAL_DMA_Abort+0x634>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d004      	beq.n	800f0c2 <HAL_DMA_Abort+0x58a>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a2c      	ldr	r2, [pc, #176]	@ (800f170 <HAL_DMA_Abort+0x638>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d101      	bne.n	800f0c6 <HAL_DMA_Abort+0x58e>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e000      	b.n	800f0c8 <HAL_DMA_Abort+0x590>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d015      	beq.n	800f0f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f0d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00c      	beq.n	800f0f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f0ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f0f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	40020010 	.word	0x40020010
 800f118:	40020028 	.word	0x40020028
 800f11c:	40020040 	.word	0x40020040
 800f120:	40020058 	.word	0x40020058
 800f124:	40020070 	.word	0x40020070
 800f128:	40020088 	.word	0x40020088
 800f12c:	400200a0 	.word	0x400200a0
 800f130:	400200b8 	.word	0x400200b8
 800f134:	40020410 	.word	0x40020410
 800f138:	40020428 	.word	0x40020428
 800f13c:	40020440 	.word	0x40020440
 800f140:	40020458 	.word	0x40020458
 800f144:	40020470 	.word	0x40020470
 800f148:	40020488 	.word	0x40020488
 800f14c:	400204a0 	.word	0x400204a0
 800f150:	400204b8 	.word	0x400204b8
 800f154:	58025408 	.word	0x58025408
 800f158:	5802541c 	.word	0x5802541c
 800f15c:	58025430 	.word	0x58025430
 800f160:	58025444 	.word	0x58025444
 800f164:	58025458 	.word	0x58025458
 800f168:	5802546c 	.word	0x5802546c
 800f16c:	58025480 	.word	0x58025480
 800f170:	58025494 	.word	0x58025494

0800f174 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b08a      	sub	sp, #40	@ 0x28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	460b      	mov	r3, r1
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f182:	2300      	movs	r3, #0
 800f184:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 800f186:	f7fe fe7d 	bl	800de84 <HAL_GetTick>
 800f18a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	e374      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d008      	beq.n	800f1b4 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2280      	movs	r2, #128	@ 0x80
 800f1a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	e365      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a7b      	ldr	r2, [pc, #492]	@ (800f3a8 <HAL_DMA_PollForTransfer+0x234>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d04a      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a7a      	ldr	r2, [pc, #488]	@ (800f3ac <HAL_DMA_PollForTransfer+0x238>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d045      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a78      	ldr	r2, [pc, #480]	@ (800f3b0 <HAL_DMA_PollForTransfer+0x23c>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d040      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a77      	ldr	r2, [pc, #476]	@ (800f3b4 <HAL_DMA_PollForTransfer+0x240>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d03b      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a75      	ldr	r2, [pc, #468]	@ (800f3b8 <HAL_DMA_PollForTransfer+0x244>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d036      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a74      	ldr	r2, [pc, #464]	@ (800f3bc <HAL_DMA_PollForTransfer+0x248>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d031      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a72      	ldr	r2, [pc, #456]	@ (800f3c0 <HAL_DMA_PollForTransfer+0x24c>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d02c      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a71      	ldr	r2, [pc, #452]	@ (800f3c4 <HAL_DMA_PollForTransfer+0x250>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d027      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a6f      	ldr	r2, [pc, #444]	@ (800f3c8 <HAL_DMA_PollForTransfer+0x254>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d022      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4a6e      	ldr	r2, [pc, #440]	@ (800f3cc <HAL_DMA_PollForTransfer+0x258>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d01d      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a6c      	ldr	r2, [pc, #432]	@ (800f3d0 <HAL_DMA_PollForTransfer+0x25c>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d018      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a6b      	ldr	r2, [pc, #428]	@ (800f3d4 <HAL_DMA_PollForTransfer+0x260>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d013      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a69      	ldr	r2, [pc, #420]	@ (800f3d8 <HAL_DMA_PollForTransfer+0x264>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d00e      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a68      	ldr	r2, [pc, #416]	@ (800f3dc <HAL_DMA_PollForTransfer+0x268>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d009      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a66      	ldr	r2, [pc, #408]	@ (800f3e0 <HAL_DMA_PollForTransfer+0x26c>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d004      	beq.n	800f254 <HAL_DMA_PollForTransfer+0xe0>
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a65      	ldr	r2, [pc, #404]	@ (800f3e4 <HAL_DMA_PollForTransfer+0x270>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d101      	bne.n	800f258 <HAL_DMA_PollForTransfer+0xe4>
 800f254:	2301      	movs	r3, #1
 800f256:	e000      	b.n	800f25a <HAL_DMA_PollForTransfer+0xe6>
 800f258:	2300      	movs	r3, #0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d028      	beq.n	800f2b0 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d005      	beq.n	800f278 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f272:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	e303      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800f278:	7afb      	ldrb	r3, [r7, #11]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d108      	bne.n	800f290 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f282:	f003 031f 	and.w	r3, r3, #31
 800f286:	2220      	movs	r2, #32
 800f288:	fa02 f303 	lsl.w	r3, r2, r3
 800f28c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f28e:	e007      	b.n	800f2a0 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f294:	f003 031f 	and.w	r3, r3, #31
 800f298:	2210      	movs	r2, #16
 800f29a:	fa02 f303 	lsl.w	r3, r2, r3
 800f29e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2a4:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	61fb      	str	r3, [r7, #28]
 800f2ae:	e1d5      	b.n	800f65c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f003 0320 	and.w	r3, r3, #32
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d005      	beq.n	800f2ca <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e2da      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800f2ca:	7afb      	ldrb	r3, [r7, #11]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d108      	bne.n	800f2e2 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2d4:	f003 031f 	and.w	r3, r3, #31
 800f2d8:	2202      	movs	r2, #2
 800f2da:	fa02 f303 	lsl.w	r3, r2, r3
 800f2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2e0:	e007      	b.n	800f2f2 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2e6:	f003 031f 	and.w	r3, r3, #31
 800f2ea:	2204      	movs	r2, #4
 800f2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2f6:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 800f300:	e1ac      	b.n	800f65c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a28      	ldr	r2, [pc, #160]	@ (800f3a8 <HAL_DMA_PollForTransfer+0x234>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d04a      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a26      	ldr	r2, [pc, #152]	@ (800f3ac <HAL_DMA_PollForTransfer+0x238>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d045      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a25      	ldr	r2, [pc, #148]	@ (800f3b0 <HAL_DMA_PollForTransfer+0x23c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d040      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a23      	ldr	r2, [pc, #140]	@ (800f3b4 <HAL_DMA_PollForTransfer+0x240>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d03b      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a22      	ldr	r2, [pc, #136]	@ (800f3b8 <HAL_DMA_PollForTransfer+0x244>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d036      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a20      	ldr	r2, [pc, #128]	@ (800f3bc <HAL_DMA_PollForTransfer+0x248>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d031      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a1f      	ldr	r2, [pc, #124]	@ (800f3c0 <HAL_DMA_PollForTransfer+0x24c>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d02c      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a1d      	ldr	r2, [pc, #116]	@ (800f3c4 <HAL_DMA_PollForTransfer+0x250>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d027      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a1c      	ldr	r2, [pc, #112]	@ (800f3c8 <HAL_DMA_PollForTransfer+0x254>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d022      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a1a      	ldr	r2, [pc, #104]	@ (800f3cc <HAL_DMA_PollForTransfer+0x258>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d01d      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a19      	ldr	r2, [pc, #100]	@ (800f3d0 <HAL_DMA_PollForTransfer+0x25c>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d018      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a17      	ldr	r2, [pc, #92]	@ (800f3d4 <HAL_DMA_PollForTransfer+0x260>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d013      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a16      	ldr	r2, [pc, #88]	@ (800f3d8 <HAL_DMA_PollForTransfer+0x264>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d00e      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a14      	ldr	r2, [pc, #80]	@ (800f3dc <HAL_DMA_PollForTransfer+0x268>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d009      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a13      	ldr	r2, [pc, #76]	@ (800f3e0 <HAL_DMA_PollForTransfer+0x26c>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d004      	beq.n	800f3a2 <HAL_DMA_PollForTransfer+0x22e>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a11      	ldr	r2, [pc, #68]	@ (800f3e4 <HAL_DMA_PollForTransfer+0x270>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d122      	bne.n	800f3e8 <HAL_DMA_PollForTransfer+0x274>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e021      	b.n	800f3ea <HAL_DMA_PollForTransfer+0x276>
 800f3a6:	bf00      	nop
 800f3a8:	40020010 	.word	0x40020010
 800f3ac:	40020028 	.word	0x40020028
 800f3b0:	40020040 	.word	0x40020040
 800f3b4:	40020058 	.word	0x40020058
 800f3b8:	40020070 	.word	0x40020070
 800f3bc:	40020088 	.word	0x40020088
 800f3c0:	400200a0 	.word	0x400200a0
 800f3c4:	400200b8 	.word	0x400200b8
 800f3c8:	40020410 	.word	0x40020410
 800f3cc:	40020428 	.word	0x40020428
 800f3d0:	40020440 	.word	0x40020440
 800f3d4:	40020458 	.word	0x40020458
 800f3d8:	40020470 	.word	0x40020470
 800f3dc:	40020488 	.word	0x40020488
 800f3e0:	400204a0 	.word	0x400204a0
 800f3e4:	400204b8 	.word	0x400204b8
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d057      	beq.n	800f49e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3f6:	f003 031f 	and.w	r3, r3, #31
 800f3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f3fe:	f003 0301 	and.w	r3, r3, #1
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00d      	beq.n	800f422 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f40a:	f043 0202 	orr.w	r2, r3, #2
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f416:	f003 031f 	and.w	r3, r3, #31
 800f41a:	2201      	movs	r2, #1
 800f41c:	409a      	lsls	r2, r3
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f42a:	f003 031f 	and.w	r3, r3, #31
 800f42e:	2104      	movs	r1, #4
 800f430:	fa01 f303 	lsl.w	r3, r1, r3
 800f434:	4013      	ands	r3, r2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00d      	beq.n	800f456 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f43e:	f043 0204 	orr.w	r2, r3, #4
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f44a:	f003 031f 	and.w	r3, r3, #31
 800f44e:	2204      	movs	r2, #4
 800f450:	409a      	lsls	r2, r3
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f456:	6a3b      	ldr	r3, [r7, #32]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f45e:	f003 031f 	and.w	r3, r3, #31
 800f462:	2108      	movs	r1, #8
 800f464:	fa01 f303 	lsl.w	r3, r1, r3
 800f468:	4013      	ands	r3, r2
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d038      	beq.n	800f4e0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f472:	f043 0201 	orr.w	r2, r3, #1
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f47e:	f003 031f 	and.w	r3, r3, #31
 800f482:	2208      	movs	r2, #8
 800f484:	409a      	lsls	r2, r3
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800f49a:	2301      	movs	r3, #1
 800f49c:	e1f0      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f49e:	6a3b      	ldr	r3, [r7, #32]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f4a6:	f003 031f 	and.w	r3, r3, #31
 800f4aa:	2108      	movs	r1, #8
 800f4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d014      	beq.n	800f4e0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f4ba:	f003 031f 	and.w	r3, r3, #31
 800f4be:	2201      	movs	r2, #1
 800f4c0:	409a      	lsls	r2, r3
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e1cf      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e6:	d012      	beq.n	800f50e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800f4e8:	f7fe fccc 	bl	800de84 <HAL_GetTick>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d302      	bcc.n	800f4fe <HAL_DMA_PollForTransfer+0x38a>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d107      	bne.n	800f50e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2220      	movs	r2, #32
 800f502:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f7ff fb17 	bl	800eb38 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	e1b8      	b.n	800f880 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a81      	ldr	r2, [pc, #516]	@ (800f718 <HAL_DMA_PollForTransfer+0x5a4>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d072      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a7f      	ldr	r2, [pc, #508]	@ (800f71c <HAL_DMA_PollForTransfer+0x5a8>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d06d      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4a7e      	ldr	r2, [pc, #504]	@ (800f720 <HAL_DMA_PollForTransfer+0x5ac>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d068      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a7c      	ldr	r2, [pc, #496]	@ (800f724 <HAL_DMA_PollForTransfer+0x5b0>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d063      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4a7b      	ldr	r2, [pc, #492]	@ (800f728 <HAL_DMA_PollForTransfer+0x5b4>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d05e      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a79      	ldr	r2, [pc, #484]	@ (800f72c <HAL_DMA_PollForTransfer+0x5b8>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d059      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4a78      	ldr	r2, [pc, #480]	@ (800f730 <HAL_DMA_PollForTransfer+0x5bc>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d054      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a76      	ldr	r2, [pc, #472]	@ (800f734 <HAL_DMA_PollForTransfer+0x5c0>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d04f      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a75      	ldr	r2, [pc, #468]	@ (800f738 <HAL_DMA_PollForTransfer+0x5c4>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d04a      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a73      	ldr	r2, [pc, #460]	@ (800f73c <HAL_DMA_PollForTransfer+0x5c8>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d045      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a72      	ldr	r2, [pc, #456]	@ (800f740 <HAL_DMA_PollForTransfer+0x5cc>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d040      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a70      	ldr	r2, [pc, #448]	@ (800f744 <HAL_DMA_PollForTransfer+0x5d0>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d03b      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a6f      	ldr	r2, [pc, #444]	@ (800f748 <HAL_DMA_PollForTransfer+0x5d4>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d036      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a6d      	ldr	r2, [pc, #436]	@ (800f74c <HAL_DMA_PollForTransfer+0x5d8>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d031      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a6c      	ldr	r2, [pc, #432]	@ (800f750 <HAL_DMA_PollForTransfer+0x5dc>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d02c      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a6a      	ldr	r2, [pc, #424]	@ (800f754 <HAL_DMA_PollForTransfer+0x5e0>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d027      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a69      	ldr	r2, [pc, #420]	@ (800f758 <HAL_DMA_PollForTransfer+0x5e4>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d022      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a67      	ldr	r2, [pc, #412]	@ (800f75c <HAL_DMA_PollForTransfer+0x5e8>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d01d      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a66      	ldr	r2, [pc, #408]	@ (800f760 <HAL_DMA_PollForTransfer+0x5ec>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d018      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4a64      	ldr	r2, [pc, #400]	@ (800f764 <HAL_DMA_PollForTransfer+0x5f0>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d013      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a63      	ldr	r2, [pc, #396]	@ (800f768 <HAL_DMA_PollForTransfer+0x5f4>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d00e      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a61      	ldr	r2, [pc, #388]	@ (800f76c <HAL_DMA_PollForTransfer+0x5f8>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d009      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4a60      	ldr	r2, [pc, #384]	@ (800f770 <HAL_DMA_PollForTransfer+0x5fc>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d004      	beq.n	800f5fe <HAL_DMA_PollForTransfer+0x48a>
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a5e      	ldr	r2, [pc, #376]	@ (800f774 <HAL_DMA_PollForTransfer+0x600>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d101      	bne.n	800f602 <HAL_DMA_PollForTransfer+0x48e>
 800f5fe:	2301      	movs	r3, #1
 800f600:	e000      	b.n	800f604 <HAL_DMA_PollForTransfer+0x490>
 800f602:	2300      	movs	r3, #0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d029      	beq.n	800f65c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d012      	beq.n	800f636 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f61a:	4013      	ands	r3, r2
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00a      	beq.n	800f636 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f628:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f62e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f640:	4013      	ands	r3, r2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00a      	beq.n	800f65c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f64e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f654:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 800f65c:	6a3b      	ldr	r3, [r7, #32]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f662:	4013      	ands	r3, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	f43f ae4c 	beq.w	800f302 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800f66a:	7afb      	ldrb	r3, [r7, #11]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f040 80a0 	bne.w	800f7b2 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a28      	ldr	r2, [pc, #160]	@ (800f718 <HAL_DMA_PollForTransfer+0x5a4>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d04a      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a26      	ldr	r2, [pc, #152]	@ (800f71c <HAL_DMA_PollForTransfer+0x5a8>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d045      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a25      	ldr	r2, [pc, #148]	@ (800f720 <HAL_DMA_PollForTransfer+0x5ac>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d040      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a23      	ldr	r2, [pc, #140]	@ (800f724 <HAL_DMA_PollForTransfer+0x5b0>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d03b      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4a22      	ldr	r2, [pc, #136]	@ (800f728 <HAL_DMA_PollForTransfer+0x5b4>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d036      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a20      	ldr	r2, [pc, #128]	@ (800f72c <HAL_DMA_PollForTransfer+0x5b8>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d031      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800f730 <HAL_DMA_PollForTransfer+0x5bc>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d02c      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f734 <HAL_DMA_PollForTransfer+0x5c0>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d027      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a1c      	ldr	r2, [pc, #112]	@ (800f738 <HAL_DMA_PollForTransfer+0x5c4>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d022      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a1a      	ldr	r2, [pc, #104]	@ (800f73c <HAL_DMA_PollForTransfer+0x5c8>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d01d      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a19      	ldr	r2, [pc, #100]	@ (800f740 <HAL_DMA_PollForTransfer+0x5cc>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d018      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a17      	ldr	r2, [pc, #92]	@ (800f744 <HAL_DMA_PollForTransfer+0x5d0>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d013      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a16      	ldr	r2, [pc, #88]	@ (800f748 <HAL_DMA_PollForTransfer+0x5d4>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d00e      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a14      	ldr	r2, [pc, #80]	@ (800f74c <HAL_DMA_PollForTransfer+0x5d8>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d009      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a13      	ldr	r2, [pc, #76]	@ (800f750 <HAL_DMA_PollForTransfer+0x5dc>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d004      	beq.n	800f712 <HAL_DMA_PollForTransfer+0x59e>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a11      	ldr	r2, [pc, #68]	@ (800f754 <HAL_DMA_PollForTransfer+0x5e0>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d132      	bne.n	800f778 <HAL_DMA_PollForTransfer+0x604>
 800f712:	2301      	movs	r3, #1
 800f714:	e031      	b.n	800f77a <HAL_DMA_PollForTransfer+0x606>
 800f716:	bf00      	nop
 800f718:	40020010 	.word	0x40020010
 800f71c:	40020028 	.word	0x40020028
 800f720:	40020040 	.word	0x40020040
 800f724:	40020058 	.word	0x40020058
 800f728:	40020070 	.word	0x40020070
 800f72c:	40020088 	.word	0x40020088
 800f730:	400200a0 	.word	0x400200a0
 800f734:	400200b8 	.word	0x400200b8
 800f738:	40020410 	.word	0x40020410
 800f73c:	40020428 	.word	0x40020428
 800f740:	40020440 	.word	0x40020440
 800f744:	40020458 	.word	0x40020458
 800f748:	40020470 	.word	0x40020470
 800f74c:	40020488 	.word	0x40020488
 800f750:	400204a0 	.word	0x400204a0
 800f754:	400204b8 	.word	0x400204b8
 800f758:	58025408 	.word	0x58025408
 800f75c:	5802541c 	.word	0x5802541c
 800f760:	58025430 	.word	0x58025430
 800f764:	58025444 	.word	0x58025444
 800f768:	58025458 	.word	0x58025458
 800f76c:	5802546c 	.word	0x5802546c
 800f770:	58025480 	.word	0x58025480
 800f774:	58025494 	.word	0x58025494
 800f778:	2300      	movs	r3, #0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d008      	beq.n	800f790 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f782:	f003 031f 	and.w	r3, r3, #31
 800f786:	2230      	movs	r2, #48	@ 0x30
 800f788:	409a      	lsls	r2, r3
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	e007      	b.n	800f7a0 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f794:	f003 031f 	and.w	r3, r3, #31
 800f798:	2202      	movs	r2, #2
 800f79a:	409a      	lsls	r2, r3
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800f7b0:	e065      	b.n	800f87e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a34      	ldr	r2, [pc, #208]	@ (800f888 <HAL_DMA_PollForTransfer+0x714>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d04a      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a32      	ldr	r2, [pc, #200]	@ (800f88c <HAL_DMA_PollForTransfer+0x718>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d045      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a31      	ldr	r2, [pc, #196]	@ (800f890 <HAL_DMA_PollForTransfer+0x71c>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d040      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a2f      	ldr	r2, [pc, #188]	@ (800f894 <HAL_DMA_PollForTransfer+0x720>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d03b      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a2e      	ldr	r2, [pc, #184]	@ (800f898 <HAL_DMA_PollForTransfer+0x724>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d036      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a2c      	ldr	r2, [pc, #176]	@ (800f89c <HAL_DMA_PollForTransfer+0x728>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d031      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a2b      	ldr	r2, [pc, #172]	@ (800f8a0 <HAL_DMA_PollForTransfer+0x72c>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d02c      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a29      	ldr	r2, [pc, #164]	@ (800f8a4 <HAL_DMA_PollForTransfer+0x730>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d027      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a28      	ldr	r2, [pc, #160]	@ (800f8a8 <HAL_DMA_PollForTransfer+0x734>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d022      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a26      	ldr	r2, [pc, #152]	@ (800f8ac <HAL_DMA_PollForTransfer+0x738>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d01d      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a25      	ldr	r2, [pc, #148]	@ (800f8b0 <HAL_DMA_PollForTransfer+0x73c>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d018      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a23      	ldr	r2, [pc, #140]	@ (800f8b4 <HAL_DMA_PollForTransfer+0x740>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d013      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a22      	ldr	r2, [pc, #136]	@ (800f8b8 <HAL_DMA_PollForTransfer+0x744>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d00e      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a20      	ldr	r2, [pc, #128]	@ (800f8bc <HAL_DMA_PollForTransfer+0x748>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d009      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a1f      	ldr	r2, [pc, #124]	@ (800f8c0 <HAL_DMA_PollForTransfer+0x74c>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d004      	beq.n	800f852 <HAL_DMA_PollForTransfer+0x6de>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c4 <HAL_DMA_PollForTransfer+0x750>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d101      	bne.n	800f856 <HAL_DMA_PollForTransfer+0x6e2>
 800f852:	2301      	movs	r3, #1
 800f854:	e000      	b.n	800f858 <HAL_DMA_PollForTransfer+0x6e4>
 800f856:	2300      	movs	r3, #0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d008      	beq.n	800f86e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f860:	f003 031f 	and.w	r3, r3, #31
 800f864:	2210      	movs	r2, #16
 800f866:	409a      	lsls	r2, r3
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	e007      	b.n	800f87e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f872:	f003 031f 	and.w	r3, r3, #31
 800f876:	2204      	movs	r2, #4
 800f878:	409a      	lsls	r2, r3
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800f87e:	7efb      	ldrb	r3, [r7, #27]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3728      	adds	r7, #40	@ 0x28
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	40020010 	.word	0x40020010
 800f88c:	40020028 	.word	0x40020028
 800f890:	40020040 	.word	0x40020040
 800f894:	40020058 	.word	0x40020058
 800f898:	40020070 	.word	0x40020070
 800f89c:	40020088 	.word	0x40020088
 800f8a0:	400200a0 	.word	0x400200a0
 800f8a4:	400200b8 	.word	0x400200b8
 800f8a8:	40020410 	.word	0x40020410
 800f8ac:	40020428 	.word	0x40020428
 800f8b0:	40020440 	.word	0x40020440
 800f8b4:	40020458 	.word	0x40020458
 800f8b8:	40020470 	.word	0x40020470
 800f8bc:	40020488 	.word	0x40020488
 800f8c0:	400204a0 	.word	0x400204a0
 800f8c4:	400204b8 	.word	0x400204b8

0800f8c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
 800f8d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a7f      	ldr	r2, [pc, #508]	@ (800fae4 <DMA_SetConfig+0x21c>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d072      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a7d      	ldr	r2, [pc, #500]	@ (800fae8 <DMA_SetConfig+0x220>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d06d      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a7c      	ldr	r2, [pc, #496]	@ (800faec <DMA_SetConfig+0x224>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d068      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4a7a      	ldr	r2, [pc, #488]	@ (800faf0 <DMA_SetConfig+0x228>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d063      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a79      	ldr	r2, [pc, #484]	@ (800faf4 <DMA_SetConfig+0x22c>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d05e      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a77      	ldr	r2, [pc, #476]	@ (800faf8 <DMA_SetConfig+0x230>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d059      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4a76      	ldr	r2, [pc, #472]	@ (800fafc <DMA_SetConfig+0x234>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d054      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a74      	ldr	r2, [pc, #464]	@ (800fb00 <DMA_SetConfig+0x238>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d04f      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a73      	ldr	r2, [pc, #460]	@ (800fb04 <DMA_SetConfig+0x23c>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d04a      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a71      	ldr	r2, [pc, #452]	@ (800fb08 <DMA_SetConfig+0x240>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d045      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a70      	ldr	r2, [pc, #448]	@ (800fb0c <DMA_SetConfig+0x244>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d040      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a6e      	ldr	r2, [pc, #440]	@ (800fb10 <DMA_SetConfig+0x248>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d03b      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a6d      	ldr	r2, [pc, #436]	@ (800fb14 <DMA_SetConfig+0x24c>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d036      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a6b      	ldr	r2, [pc, #428]	@ (800fb18 <DMA_SetConfig+0x250>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d031      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4a6a      	ldr	r2, [pc, #424]	@ (800fb1c <DMA_SetConfig+0x254>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d02c      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a68      	ldr	r2, [pc, #416]	@ (800fb20 <DMA_SetConfig+0x258>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d027      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a67      	ldr	r2, [pc, #412]	@ (800fb24 <DMA_SetConfig+0x25c>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d022      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a65      	ldr	r2, [pc, #404]	@ (800fb28 <DMA_SetConfig+0x260>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d01d      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a64      	ldr	r2, [pc, #400]	@ (800fb2c <DMA_SetConfig+0x264>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d018      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a62      	ldr	r2, [pc, #392]	@ (800fb30 <DMA_SetConfig+0x268>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d013      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a61      	ldr	r2, [pc, #388]	@ (800fb34 <DMA_SetConfig+0x26c>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d00e      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a5f      	ldr	r2, [pc, #380]	@ (800fb38 <DMA_SetConfig+0x270>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d009      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a5e      	ldr	r2, [pc, #376]	@ (800fb3c <DMA_SetConfig+0x274>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d004      	beq.n	800f9d2 <DMA_SetConfig+0x10a>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a5c      	ldr	r2, [pc, #368]	@ (800fb40 <DMA_SetConfig+0x278>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d101      	bne.n	800f9d6 <DMA_SetConfig+0x10e>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e000      	b.n	800f9d8 <DMA_SetConfig+0x110>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00d      	beq.n	800f9f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f9e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d004      	beq.n	800f9f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f9f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a39      	ldr	r2, [pc, #228]	@ (800fae4 <DMA_SetConfig+0x21c>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d04a      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a38      	ldr	r2, [pc, #224]	@ (800fae8 <DMA_SetConfig+0x220>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d045      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a36      	ldr	r2, [pc, #216]	@ (800faec <DMA_SetConfig+0x224>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d040      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a35      	ldr	r2, [pc, #212]	@ (800faf0 <DMA_SetConfig+0x228>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d03b      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a33      	ldr	r2, [pc, #204]	@ (800faf4 <DMA_SetConfig+0x22c>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d036      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a32      	ldr	r2, [pc, #200]	@ (800faf8 <DMA_SetConfig+0x230>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d031      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a30      	ldr	r2, [pc, #192]	@ (800fafc <DMA_SetConfig+0x234>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d02c      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a2f      	ldr	r2, [pc, #188]	@ (800fb00 <DMA_SetConfig+0x238>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d027      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a2d      	ldr	r2, [pc, #180]	@ (800fb04 <DMA_SetConfig+0x23c>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d022      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a2c      	ldr	r2, [pc, #176]	@ (800fb08 <DMA_SetConfig+0x240>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d01d      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a2a      	ldr	r2, [pc, #168]	@ (800fb0c <DMA_SetConfig+0x244>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d018      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a29      	ldr	r2, [pc, #164]	@ (800fb10 <DMA_SetConfig+0x248>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d013      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a27      	ldr	r2, [pc, #156]	@ (800fb14 <DMA_SetConfig+0x24c>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d00e      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a26      	ldr	r2, [pc, #152]	@ (800fb18 <DMA_SetConfig+0x250>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d009      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a24      	ldr	r2, [pc, #144]	@ (800fb1c <DMA_SetConfig+0x254>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d004      	beq.n	800fa98 <DMA_SetConfig+0x1d0>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4a23      	ldr	r2, [pc, #140]	@ (800fb20 <DMA_SetConfig+0x258>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d101      	bne.n	800fa9c <DMA_SetConfig+0x1d4>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e000      	b.n	800fa9e <DMA_SetConfig+0x1d6>
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d059      	beq.n	800fb56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800faa6:	f003 031f 	and.w	r3, r3, #31
 800faaa:	223f      	movs	r2, #63	@ 0x3f
 800faac:	409a      	lsls	r2, r3
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800fac0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	683a      	ldr	r2, [r7, #0]
 800fac8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	2b40      	cmp	r3, #64	@ 0x40
 800fad0:	d138      	bne.n	800fb44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	687a      	ldr	r2, [r7, #4]
 800fad8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800fae2:	e086      	b.n	800fbf2 <DMA_SetConfig+0x32a>
 800fae4:	40020010 	.word	0x40020010
 800fae8:	40020028 	.word	0x40020028
 800faec:	40020040 	.word	0x40020040
 800faf0:	40020058 	.word	0x40020058
 800faf4:	40020070 	.word	0x40020070
 800faf8:	40020088 	.word	0x40020088
 800fafc:	400200a0 	.word	0x400200a0
 800fb00:	400200b8 	.word	0x400200b8
 800fb04:	40020410 	.word	0x40020410
 800fb08:	40020428 	.word	0x40020428
 800fb0c:	40020440 	.word	0x40020440
 800fb10:	40020458 	.word	0x40020458
 800fb14:	40020470 	.word	0x40020470
 800fb18:	40020488 	.word	0x40020488
 800fb1c:	400204a0 	.word	0x400204a0
 800fb20:	400204b8 	.word	0x400204b8
 800fb24:	58025408 	.word	0x58025408
 800fb28:	5802541c 	.word	0x5802541c
 800fb2c:	58025430 	.word	0x58025430
 800fb30:	58025444 	.word	0x58025444
 800fb34:	58025458 	.word	0x58025458
 800fb38:	5802546c 	.word	0x5802546c
 800fb3c:	58025480 	.word	0x58025480
 800fb40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	60da      	str	r2, [r3, #12]
}
 800fb54:	e04d      	b.n	800fbf2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a29      	ldr	r2, [pc, #164]	@ (800fc00 <DMA_SetConfig+0x338>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d022      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a27      	ldr	r2, [pc, #156]	@ (800fc04 <DMA_SetConfig+0x33c>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d01d      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4a26      	ldr	r2, [pc, #152]	@ (800fc08 <DMA_SetConfig+0x340>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d018      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a24      	ldr	r2, [pc, #144]	@ (800fc0c <DMA_SetConfig+0x344>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d013      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4a23      	ldr	r2, [pc, #140]	@ (800fc10 <DMA_SetConfig+0x348>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d00e      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a21      	ldr	r2, [pc, #132]	@ (800fc14 <DMA_SetConfig+0x34c>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d009      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a20      	ldr	r2, [pc, #128]	@ (800fc18 <DMA_SetConfig+0x350>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d004      	beq.n	800fba6 <DMA_SetConfig+0x2de>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a1e      	ldr	r2, [pc, #120]	@ (800fc1c <DMA_SetConfig+0x354>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d101      	bne.n	800fbaa <DMA_SetConfig+0x2e2>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e000      	b.n	800fbac <DMA_SetConfig+0x2e4>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d020      	beq.n	800fbf2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fbb4:	f003 031f 	and.w	r3, r3, #31
 800fbb8:	2201      	movs	r2, #1
 800fbba:	409a      	lsls	r2, r3
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	2b40      	cmp	r3, #64	@ 0x40
 800fbce:	d108      	bne.n	800fbe2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	60da      	str	r2, [r3, #12]
}
 800fbe0:	e007      	b.n	800fbf2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68ba      	ldr	r2, [r7, #8]
 800fbe8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	60da      	str	r2, [r3, #12]
}
 800fbf2:	bf00      	nop
 800fbf4:	371c      	adds	r7, #28
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	58025408 	.word	0x58025408
 800fc04:	5802541c 	.word	0x5802541c
 800fc08:	58025430 	.word	0x58025430
 800fc0c:	58025444 	.word	0x58025444
 800fc10:	58025458 	.word	0x58025458
 800fc14:	5802546c 	.word	0x5802546c
 800fc18:	58025480 	.word	0x58025480
 800fc1c:	58025494 	.word	0x58025494

0800fc20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a42      	ldr	r2, [pc, #264]	@ (800fd38 <DMA_CalcBaseAndBitshift+0x118>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d04a      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	4a41      	ldr	r2, [pc, #260]	@ (800fd3c <DMA_CalcBaseAndBitshift+0x11c>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d045      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a3f      	ldr	r2, [pc, #252]	@ (800fd40 <DMA_CalcBaseAndBitshift+0x120>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d040      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a3e      	ldr	r2, [pc, #248]	@ (800fd44 <DMA_CalcBaseAndBitshift+0x124>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d03b      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a3c      	ldr	r2, [pc, #240]	@ (800fd48 <DMA_CalcBaseAndBitshift+0x128>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d036      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4a3b      	ldr	r2, [pc, #236]	@ (800fd4c <DMA_CalcBaseAndBitshift+0x12c>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d031      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a39      	ldr	r2, [pc, #228]	@ (800fd50 <DMA_CalcBaseAndBitshift+0x130>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d02c      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a38      	ldr	r2, [pc, #224]	@ (800fd54 <DMA_CalcBaseAndBitshift+0x134>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d027      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a36      	ldr	r2, [pc, #216]	@ (800fd58 <DMA_CalcBaseAndBitshift+0x138>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d022      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a35      	ldr	r2, [pc, #212]	@ (800fd5c <DMA_CalcBaseAndBitshift+0x13c>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d01d      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a33      	ldr	r2, [pc, #204]	@ (800fd60 <DMA_CalcBaseAndBitshift+0x140>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d018      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a32      	ldr	r2, [pc, #200]	@ (800fd64 <DMA_CalcBaseAndBitshift+0x144>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d013      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a30      	ldr	r2, [pc, #192]	@ (800fd68 <DMA_CalcBaseAndBitshift+0x148>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d00e      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a2f      	ldr	r2, [pc, #188]	@ (800fd6c <DMA_CalcBaseAndBitshift+0x14c>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d009      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a2d      	ldr	r2, [pc, #180]	@ (800fd70 <DMA_CalcBaseAndBitshift+0x150>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d004      	beq.n	800fcc8 <DMA_CalcBaseAndBitshift+0xa8>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a2c      	ldr	r2, [pc, #176]	@ (800fd74 <DMA_CalcBaseAndBitshift+0x154>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d101      	bne.n	800fccc <DMA_CalcBaseAndBitshift+0xac>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e000      	b.n	800fcce <DMA_CalcBaseAndBitshift+0xae>
 800fccc:	2300      	movs	r3, #0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d024      	beq.n	800fd1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	3b10      	subs	r3, #16
 800fcda:	4a27      	ldr	r2, [pc, #156]	@ (800fd78 <DMA_CalcBaseAndBitshift+0x158>)
 800fcdc:	fba2 2303 	umull	r2, r3, r2, r3
 800fce0:	091b      	lsrs	r3, r3, #4
 800fce2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f003 0307 	and.w	r3, r3, #7
 800fcea:	4a24      	ldr	r2, [pc, #144]	@ (800fd7c <DMA_CalcBaseAndBitshift+0x15c>)
 800fcec:	5cd3      	ldrb	r3, [r2, r3]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d908      	bls.n	800fd0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4b1f      	ldr	r3, [pc, #124]	@ (800fd80 <DMA_CalcBaseAndBitshift+0x160>)
 800fd02:	4013      	ands	r3, r2
 800fd04:	1d1a      	adds	r2, r3, #4
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	659a      	str	r2, [r3, #88]	@ 0x58
 800fd0a:	e00d      	b.n	800fd28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b1b      	ldr	r3, [pc, #108]	@ (800fd80 <DMA_CalcBaseAndBitshift+0x160>)
 800fd14:	4013      	ands	r3, r2
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	6593      	str	r3, [r2, #88]	@ 0x58
 800fd1a:	e005      	b.n	800fd28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	40020010 	.word	0x40020010
 800fd3c:	40020028 	.word	0x40020028
 800fd40:	40020040 	.word	0x40020040
 800fd44:	40020058 	.word	0x40020058
 800fd48:	40020070 	.word	0x40020070
 800fd4c:	40020088 	.word	0x40020088
 800fd50:	400200a0 	.word	0x400200a0
 800fd54:	400200b8 	.word	0x400200b8
 800fd58:	40020410 	.word	0x40020410
 800fd5c:	40020428 	.word	0x40020428
 800fd60:	40020440 	.word	0x40020440
 800fd64:	40020458 	.word	0x40020458
 800fd68:	40020470 	.word	0x40020470
 800fd6c:	40020488 	.word	0x40020488
 800fd70:	400204a0 	.word	0x400204a0
 800fd74:	400204b8 	.word	0x400204b8
 800fd78:	aaaaaaab 	.word	0xaaaaaaab
 800fd7c:	0801cc34 	.word	0x0801cc34
 800fd80:	fffffc00 	.word	0xfffffc00

0800fd84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d120      	bne.n	800fdda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd9c:	2b03      	cmp	r3, #3
 800fd9e:	d858      	bhi.n	800fe52 <DMA_CheckFifoParam+0xce>
 800fda0:	a201      	add	r2, pc, #4	@ (adr r2, 800fda8 <DMA_CheckFifoParam+0x24>)
 800fda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda6:	bf00      	nop
 800fda8:	0800fdb9 	.word	0x0800fdb9
 800fdac:	0800fdcb 	.word	0x0800fdcb
 800fdb0:	0800fdb9 	.word	0x0800fdb9
 800fdb4:	0800fe53 	.word	0x0800fe53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d048      	beq.n	800fe56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fdc8:	e045      	b.n	800fe56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800fdd2:	d142      	bne.n	800fe5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fdd8:	e03f      	b.n	800fe5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fde2:	d123      	bne.n	800fe2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d838      	bhi.n	800fe5e <DMA_CheckFifoParam+0xda>
 800fdec:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf4 <DMA_CheckFifoParam+0x70>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe05 	.word	0x0800fe05
 800fdf8:	0800fe0b 	.word	0x0800fe0b
 800fdfc:	0800fe05 	.word	0x0800fe05
 800fe00:	0800fe1d 	.word	0x0800fe1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	73fb      	strb	r3, [r7, #15]
        break;
 800fe08:	e030      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d025      	beq.n	800fe62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fe1a:	e022      	b.n	800fe62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800fe24:	d11f      	bne.n	800fe66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800fe26:	2301      	movs	r3, #1
 800fe28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fe2a:	e01c      	b.n	800fe66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe30:	2b02      	cmp	r3, #2
 800fe32:	d902      	bls.n	800fe3a <DMA_CheckFifoParam+0xb6>
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d003      	beq.n	800fe40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800fe38:	e018      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	73fb      	strb	r3, [r7, #15]
        break;
 800fe3e:	e015      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00e      	beq.n	800fe6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe50:	e00b      	b.n	800fe6a <DMA_CheckFifoParam+0xe6>
        break;
 800fe52:	bf00      	nop
 800fe54:	e00a      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        break;
 800fe56:	bf00      	nop
 800fe58:	e008      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        break;
 800fe5a:	bf00      	nop
 800fe5c:	e006      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        break;
 800fe5e:	bf00      	nop
 800fe60:	e004      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        break;
 800fe62:	bf00      	nop
 800fe64:	e002      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
        break;
 800fe66:	bf00      	nop
 800fe68:	e000      	b.n	800fe6c <DMA_CheckFifoParam+0xe8>
    break;
 800fe6a:	bf00      	nop
    }
  }

  return status;
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3714      	adds	r7, #20
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop

0800fe7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a38      	ldr	r2, [pc, #224]	@ (800ff70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d022      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a36      	ldr	r2, [pc, #216]	@ (800ff74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d01d      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a35      	ldr	r2, [pc, #212]	@ (800ff78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d018      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a33      	ldr	r2, [pc, #204]	@ (800ff7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d013      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a32      	ldr	r2, [pc, #200]	@ (800ff80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d00e      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a30      	ldr	r2, [pc, #192]	@ (800ff84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d009      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a2f      	ldr	r2, [pc, #188]	@ (800ff88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d004      	beq.n	800feda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a2d      	ldr	r2, [pc, #180]	@ (800ff8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d101      	bne.n	800fede <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800fede:	2300      	movs	r3, #0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01a      	beq.n	800ff1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	3b08      	subs	r3, #8
 800feec:	4a28      	ldr	r2, [pc, #160]	@ (800ff90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800feee:	fba2 2303 	umull	r2, r3, r2, r3
 800fef2:	091b      	lsrs	r3, r3, #4
 800fef4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	4b26      	ldr	r3, [pc, #152]	@ (800ff94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800fefa:	4413      	add	r3, r2
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	461a      	mov	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a24      	ldr	r2, [pc, #144]	@ (800ff98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ff08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f003 031f 	and.w	r3, r3, #31
 800ff10:	2201      	movs	r2, #1
 800ff12:	409a      	lsls	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ff18:	e024      	b.n	800ff64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	3b10      	subs	r3, #16
 800ff22:	4a1e      	ldr	r2, [pc, #120]	@ (800ff9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ff24:	fba2 2303 	umull	r2, r3, r2, r3
 800ff28:	091b      	lsrs	r3, r3, #4
 800ff2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	4a1c      	ldr	r2, [pc, #112]	@ (800ffa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d806      	bhi.n	800ff42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	4a1b      	ldr	r2, [pc, #108]	@ (800ffa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d902      	bls.n	800ff42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	3308      	adds	r3, #8
 800ff40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	4b18      	ldr	r3, [pc, #96]	@ (800ffa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ff46:	4413      	add	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4a16      	ldr	r2, [pc, #88]	@ (800ffac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ff54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f003 031f 	and.w	r3, r3, #31
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	409a      	lsls	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ff64:	bf00      	nop
 800ff66:	3714      	adds	r7, #20
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	58025408 	.word	0x58025408
 800ff74:	5802541c 	.word	0x5802541c
 800ff78:	58025430 	.word	0x58025430
 800ff7c:	58025444 	.word	0x58025444
 800ff80:	58025458 	.word	0x58025458
 800ff84:	5802546c 	.word	0x5802546c
 800ff88:	58025480 	.word	0x58025480
 800ff8c:	58025494 	.word	0x58025494
 800ff90:	cccccccd 	.word	0xcccccccd
 800ff94:	16009600 	.word	0x16009600
 800ff98:	58025880 	.word	0x58025880
 800ff9c:	aaaaaaab 	.word	0xaaaaaaab
 800ffa0:	400204b8 	.word	0x400204b8
 800ffa4:	4002040f 	.word	0x4002040f
 800ffa8:	10008200 	.word	0x10008200
 800ffac:	40020880 	.word	0x40020880

0800ffb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d04a      	beq.n	801005c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b08      	cmp	r3, #8
 800ffca:	d847      	bhi.n	801005c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a25      	ldr	r2, [pc, #148]	@ (8010068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d022      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a24      	ldr	r2, [pc, #144]	@ (801006c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d01d      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a22      	ldr	r2, [pc, #136]	@ (8010070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d018      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a21      	ldr	r2, [pc, #132]	@ (8010074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d013      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a1f      	ldr	r2, [pc, #124]	@ (8010078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d00e      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a1e      	ldr	r2, [pc, #120]	@ (801007c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d009      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a1c      	ldr	r2, [pc, #112]	@ (8010080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d004      	beq.n	801001c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a1b      	ldr	r2, [pc, #108]	@ (8010084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d101      	bne.n	8010020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801001c:	2301      	movs	r3, #1
 801001e:	e000      	b.n	8010022 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8010020:	2300      	movs	r3, #0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00a      	beq.n	801003c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	4b17      	ldr	r3, [pc, #92]	@ (8010088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a15      	ldr	r2, [pc, #84]	@ (801008c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8010038:	671a      	str	r2, [r3, #112]	@ 0x70
 801003a:	e009      	b.n	8010050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4b14      	ldr	r3, [pc, #80]	@ (8010090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8010040:	4413      	add	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	461a      	mov	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a11      	ldr	r2, [pc, #68]	@ (8010094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801004e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	3b01      	subs	r3, #1
 8010054:	2201      	movs	r2, #1
 8010056:	409a      	lsls	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801005c:	bf00      	nop
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	58025408 	.word	0x58025408
 801006c:	5802541c 	.word	0x5802541c
 8010070:	58025430 	.word	0x58025430
 8010074:	58025444 	.word	0x58025444
 8010078:	58025458 	.word	0x58025458
 801007c:	5802546c 	.word	0x5802546c
 8010080:	58025480 	.word	0x58025480
 8010084:	58025494 	.word	0x58025494
 8010088:	1600963f 	.word	0x1600963f
 801008c:	58025940 	.word	0x58025940
 8010090:	1000823f 	.word	0x1000823f
 8010094:	40020940 	.word	0x40020940

08010098 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b086      	sub	sp, #24
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	2b80      	cmp	r3, #128	@ 0x80
 80100b0:	d105      	bne.n	80100be <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80100b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	e315      	b.n	80106ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d101      	bne.n	80100cc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80100c8:	2302      	movs	r3, #2
 80100ca:	e30e      	b.n	80106ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b01      	cmp	r3, #1
 80100de:	f040 82fd 	bne.w	80106dc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2202      	movs	r2, #2
 80100e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a82      	ldr	r2, [pc, #520]	@ (8010300 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d04a      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a81      	ldr	r2, [pc, #516]	@ (8010304 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d045      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a7f      	ldr	r2, [pc, #508]	@ (8010308 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d040      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a7e      	ldr	r2, [pc, #504]	@ (801030c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d03b      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a7c      	ldr	r2, [pc, #496]	@ (8010310 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d036      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a7b      	ldr	r2, [pc, #492]	@ (8010314 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d031      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a79      	ldr	r2, [pc, #484]	@ (8010318 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d02c      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a78      	ldr	r2, [pc, #480]	@ (801031c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d027      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a76      	ldr	r2, [pc, #472]	@ (8010320 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d022      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a75      	ldr	r2, [pc, #468]	@ (8010324 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d01d      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a73      	ldr	r2, [pc, #460]	@ (8010328 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d018      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a72      	ldr	r2, [pc, #456]	@ (801032c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d013      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a70      	ldr	r2, [pc, #448]	@ (8010330 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d00e      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a6f      	ldr	r2, [pc, #444]	@ (8010334 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d009      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4a6d      	ldr	r2, [pc, #436]	@ (8010338 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d004      	beq.n	8010190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a6c      	ldr	r2, [pc, #432]	@ (801033c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d101      	bne.n	8010194 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8010190:	2301      	movs	r3, #1
 8010192:	e000      	b.n	8010196 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8010194:	2300      	movs	r3, #0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d018      	beq.n	80101cc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80101a8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101b6:	3308      	adds	r3, #8
 80101b8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101be:	f003 031f 	and.w	r3, r3, #31
 80101c2:	223f      	movs	r2, #63	@ 0x3f
 80101c4:	409a      	lsls	r2, r3
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	e018      	b.n	80101fe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	6819      	ldr	r1, [r3, #0]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80101da:	430b      	orrs	r3, r1
 80101dc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101ea:	3304      	adds	r3, #4
 80101ec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101f2:	f003 031f 	and.w	r3, r3, #31
 80101f6:	2201      	movs	r2, #1
 80101f8:	409a      	lsls	r2, r3
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	68b9      	ldr	r1, [r7, #8]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f000 faa5 	bl	8010754 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4a3c      	ldr	r2, [pc, #240]	@ (8010300 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d072      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	4a3a      	ldr	r2, [pc, #232]	@ (8010304 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d06d      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a39      	ldr	r2, [pc, #228]	@ (8010308 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d068      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a37      	ldr	r2, [pc, #220]	@ (801030c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d063      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a36      	ldr	r2, [pc, #216]	@ (8010310 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d05e      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a34      	ldr	r2, [pc, #208]	@ (8010314 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d059      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a33      	ldr	r2, [pc, #204]	@ (8010318 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d054      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a31      	ldr	r2, [pc, #196]	@ (801031c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d04f      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a30      	ldr	r2, [pc, #192]	@ (8010320 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d04a      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a2e      	ldr	r2, [pc, #184]	@ (8010324 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d045      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4a2d      	ldr	r2, [pc, #180]	@ (8010328 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d040      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4a2b      	ldr	r2, [pc, #172]	@ (801032c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d03b      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a2a      	ldr	r2, [pc, #168]	@ (8010330 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d036      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a28      	ldr	r2, [pc, #160]	@ (8010334 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d031      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a27      	ldr	r2, [pc, #156]	@ (8010338 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d02c      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a25      	ldr	r2, [pc, #148]	@ (801033c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d027      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a24      	ldr	r2, [pc, #144]	@ (8010340 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d022      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a22      	ldr	r2, [pc, #136]	@ (8010344 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d01d      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4a21      	ldr	r2, [pc, #132]	@ (8010348 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d018      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a1f      	ldr	r2, [pc, #124]	@ (801034c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d013      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a1e      	ldr	r2, [pc, #120]	@ (8010350 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d00e      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a1c      	ldr	r2, [pc, #112]	@ (8010354 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d009      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010358 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d004      	beq.n	80102fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a19      	ldr	r2, [pc, #100]	@ (801035c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d132      	bne.n	8010360 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80102fa:	2301      	movs	r3, #1
 80102fc:	e031      	b.n	8010362 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80102fe:	bf00      	nop
 8010300:	40020010 	.word	0x40020010
 8010304:	40020028 	.word	0x40020028
 8010308:	40020040 	.word	0x40020040
 801030c:	40020058 	.word	0x40020058
 8010310:	40020070 	.word	0x40020070
 8010314:	40020088 	.word	0x40020088
 8010318:	400200a0 	.word	0x400200a0
 801031c:	400200b8 	.word	0x400200b8
 8010320:	40020410 	.word	0x40020410
 8010324:	40020428 	.word	0x40020428
 8010328:	40020440 	.word	0x40020440
 801032c:	40020458 	.word	0x40020458
 8010330:	40020470 	.word	0x40020470
 8010334:	40020488 	.word	0x40020488
 8010338:	400204a0 	.word	0x400204a0
 801033c:	400204b8 	.word	0x400204b8
 8010340:	58025408 	.word	0x58025408
 8010344:	5802541c 	.word	0x5802541c
 8010348:	58025430 	.word	0x58025430
 801034c:	58025444 	.word	0x58025444
 8010350:	58025458 	.word	0x58025458
 8010354:	5802546c 	.word	0x5802546c
 8010358:	58025480 	.word	0x58025480
 801035c:	58025494 	.word	0x58025494
 8010360:	2300      	movs	r3, #0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00d      	beq.n	8010382 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801036e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010374:	2b00      	cmp	r3, #0
 8010376:	d004      	beq.n	8010382 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8010380:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a3b      	ldr	r2, [pc, #236]	@ (8010474 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d04a      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a39      	ldr	r2, [pc, #228]	@ (8010478 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d045      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a38      	ldr	r2, [pc, #224]	@ (801047c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d040      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a36      	ldr	r2, [pc, #216]	@ (8010480 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d03b      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4a35      	ldr	r2, [pc, #212]	@ (8010484 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d036      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a33      	ldr	r2, [pc, #204]	@ (8010488 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d031      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4a32      	ldr	r2, [pc, #200]	@ (801048c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d02c      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a30      	ldr	r2, [pc, #192]	@ (8010490 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d027      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4a2f      	ldr	r2, [pc, #188]	@ (8010494 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d022      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a2d      	ldr	r2, [pc, #180]	@ (8010498 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d01d      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a2c      	ldr	r2, [pc, #176]	@ (801049c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d018      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4a2a      	ldr	r2, [pc, #168]	@ (80104a0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d013      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4a29      	ldr	r2, [pc, #164]	@ (80104a4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d00e      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a27      	ldr	r2, [pc, #156]	@ (80104a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d009      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4a26      	ldr	r2, [pc, #152]	@ (80104ac <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d004      	beq.n	8010422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a24      	ldr	r2, [pc, #144]	@ (80104b0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d101      	bne.n	8010426 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8010422:	2301      	movs	r3, #1
 8010424:	e000      	b.n	8010428 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8010426:	2300      	movs	r3, #0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d043      	beq.n	80104b4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f023 021e 	bic.w	r2, r3, #30
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f042 0216 	orr.w	r2, r2, #22
 801043e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	695a      	ldr	r2, [r3, #20]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801044e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010454:	2b00      	cmp	r3, #0
 8010456:	d103      	bne.n	8010460 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801045c:	2b00      	cmp	r3, #0
 801045e:	d043      	beq.n	80104e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f042 0208 	orr.w	r2, r2, #8
 801046e:	601a      	str	r2, [r3, #0]
 8010470:	e03a      	b.n	80104e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8010472:	bf00      	nop
 8010474:	40020010 	.word	0x40020010
 8010478:	40020028 	.word	0x40020028
 801047c:	40020040 	.word	0x40020040
 8010480:	40020058 	.word	0x40020058
 8010484:	40020070 	.word	0x40020070
 8010488:	40020088 	.word	0x40020088
 801048c:	400200a0 	.word	0x400200a0
 8010490:	400200b8 	.word	0x400200b8
 8010494:	40020410 	.word	0x40020410
 8010498:	40020428 	.word	0x40020428
 801049c:	40020440 	.word	0x40020440
 80104a0:	40020458 	.word	0x40020458
 80104a4:	40020470 	.word	0x40020470
 80104a8:	40020488 	.word	0x40020488
 80104ac:	400204a0 	.word	0x400204a0
 80104b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f023 020e 	bic.w	r2, r3, #14
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f042 020a 	orr.w	r2, r2, #10
 80104c6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d007      	beq.n	80104e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f042 0204 	orr.w	r2, r2, #4
 80104e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a81      	ldr	r2, [pc, #516]	@ (80106f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d072      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a80      	ldr	r2, [pc, #512]	@ (80106f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d06d      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a7e      	ldr	r2, [pc, #504]	@ (80106fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d068      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a7d      	ldr	r2, [pc, #500]	@ (8010700 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d063      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a7b      	ldr	r2, [pc, #492]	@ (8010704 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d05e      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a7a      	ldr	r2, [pc, #488]	@ (8010708 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d059      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a78      	ldr	r2, [pc, #480]	@ (801070c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d054      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a77      	ldr	r2, [pc, #476]	@ (8010710 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d04f      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a75      	ldr	r2, [pc, #468]	@ (8010714 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d04a      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a74      	ldr	r2, [pc, #464]	@ (8010718 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d045      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a72      	ldr	r2, [pc, #456]	@ (801071c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d040      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a71      	ldr	r2, [pc, #452]	@ (8010720 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d03b      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a6f      	ldr	r2, [pc, #444]	@ (8010724 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d036      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a6e      	ldr	r2, [pc, #440]	@ (8010728 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d031      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a6c      	ldr	r2, [pc, #432]	@ (801072c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d02c      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	4a6b      	ldr	r2, [pc, #428]	@ (8010730 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d027      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a69      	ldr	r2, [pc, #420]	@ (8010734 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d022      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4a68      	ldr	r2, [pc, #416]	@ (8010738 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d01d      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a66      	ldr	r2, [pc, #408]	@ (801073c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d018      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a65      	ldr	r2, [pc, #404]	@ (8010740 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d013      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a63      	ldr	r2, [pc, #396]	@ (8010744 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d00e      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a62      	ldr	r2, [pc, #392]	@ (8010748 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d009      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a60      	ldr	r2, [pc, #384]	@ (801074c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d004      	beq.n	80105d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4a5f      	ldr	r2, [pc, #380]	@ (8010750 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d101      	bne.n	80105dc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80105d8:	2301      	movs	r3, #1
 80105da:	e000      	b.n	80105de <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80105dc:	2300      	movs	r3, #0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d01a      	beq.n	8010618 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d007      	beq.n	8010600 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80105fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010604:	2b00      	cmp	r3, #0
 8010606:	d007      	beq.n	8010618 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010616:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a35      	ldr	r2, [pc, #212]	@ (80106f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d04a      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a34      	ldr	r2, [pc, #208]	@ (80106f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d045      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a32      	ldr	r2, [pc, #200]	@ (80106fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d040      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a31      	ldr	r2, [pc, #196]	@ (8010700 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d03b      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a2f      	ldr	r2, [pc, #188]	@ (8010704 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d036      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a2e      	ldr	r2, [pc, #184]	@ (8010708 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d031      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a2c      	ldr	r2, [pc, #176]	@ (801070c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d02c      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a2b      	ldr	r2, [pc, #172]	@ (8010710 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d027      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a29      	ldr	r2, [pc, #164]	@ (8010714 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d022      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a28      	ldr	r2, [pc, #160]	@ (8010718 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d01d      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a26      	ldr	r2, [pc, #152]	@ (801071c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d018      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a25      	ldr	r2, [pc, #148]	@ (8010720 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d013      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a23      	ldr	r2, [pc, #140]	@ (8010724 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d00e      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4a22      	ldr	r2, [pc, #136]	@ (8010728 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d009      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a20      	ldr	r2, [pc, #128]	@ (801072c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d004      	beq.n	80106b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a1f      	ldr	r2, [pc, #124]	@ (8010730 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d108      	bne.n	80106ca <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f042 0201 	orr.w	r2, r2, #1
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	e00e      	b.n	80106e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f042 0201 	orr.w	r2, r2, #1
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	e005      	b.n	80106e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80106e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80106e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	40020010 	.word	0x40020010
 80106f8:	40020028 	.word	0x40020028
 80106fc:	40020040 	.word	0x40020040
 8010700:	40020058 	.word	0x40020058
 8010704:	40020070 	.word	0x40020070
 8010708:	40020088 	.word	0x40020088
 801070c:	400200a0 	.word	0x400200a0
 8010710:	400200b8 	.word	0x400200b8
 8010714:	40020410 	.word	0x40020410
 8010718:	40020428 	.word	0x40020428
 801071c:	40020440 	.word	0x40020440
 8010720:	40020458 	.word	0x40020458
 8010724:	40020470 	.word	0x40020470
 8010728:	40020488 	.word	0x40020488
 801072c:	400204a0 	.word	0x400204a0
 8010730:	400204b8 	.word	0x400204b8
 8010734:	58025408 	.word	0x58025408
 8010738:	5802541c 	.word	0x5802541c
 801073c:	58025430 	.word	0x58025430
 8010740:	58025444 	.word	0x58025444
 8010744:	58025458 	.word	0x58025458
 8010748:	5802546c 	.word	0x5802546c
 801074c:	58025480 	.word	0x58025480
 8010750:	58025494 	.word	0x58025494

08010754 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010754:	b480      	push	{r7}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a46      	ldr	r2, [pc, #280]	@ (8010880 <DMA_MultiBufferSetConfig+0x12c>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d04a      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4a44      	ldr	r2, [pc, #272]	@ (8010884 <DMA_MultiBufferSetConfig+0x130>)
 8010772:	4293      	cmp	r3, r2
 8010774:	d045      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4a43      	ldr	r2, [pc, #268]	@ (8010888 <DMA_MultiBufferSetConfig+0x134>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d040      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a41      	ldr	r2, [pc, #260]	@ (801088c <DMA_MultiBufferSetConfig+0x138>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d03b      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a40      	ldr	r2, [pc, #256]	@ (8010890 <DMA_MultiBufferSetConfig+0x13c>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d036      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a3e      	ldr	r2, [pc, #248]	@ (8010894 <DMA_MultiBufferSetConfig+0x140>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d031      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a3d      	ldr	r2, [pc, #244]	@ (8010898 <DMA_MultiBufferSetConfig+0x144>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d02c      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a3b      	ldr	r2, [pc, #236]	@ (801089c <DMA_MultiBufferSetConfig+0x148>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d027      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a3a      	ldr	r2, [pc, #232]	@ (80108a0 <DMA_MultiBufferSetConfig+0x14c>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d022      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a38      	ldr	r2, [pc, #224]	@ (80108a4 <DMA_MultiBufferSetConfig+0x150>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d01d      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a37      	ldr	r2, [pc, #220]	@ (80108a8 <DMA_MultiBufferSetConfig+0x154>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d018      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a35      	ldr	r2, [pc, #212]	@ (80108ac <DMA_MultiBufferSetConfig+0x158>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d013      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a34      	ldr	r2, [pc, #208]	@ (80108b0 <DMA_MultiBufferSetConfig+0x15c>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d00e      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4a32      	ldr	r2, [pc, #200]	@ (80108b4 <DMA_MultiBufferSetConfig+0x160>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d009      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a31      	ldr	r2, [pc, #196]	@ (80108b8 <DMA_MultiBufferSetConfig+0x164>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d004      	beq.n	8010802 <DMA_MultiBufferSetConfig+0xae>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4a2f      	ldr	r2, [pc, #188]	@ (80108bc <DMA_MultiBufferSetConfig+0x168>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d101      	bne.n	8010806 <DMA_MultiBufferSetConfig+0xb2>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <DMA_MultiBufferSetConfig+0xb4>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d019      	beq.n	8010840 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	2b40      	cmp	r3, #64	@ 0x40
 801081a:	d108      	bne.n	801082e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68ba      	ldr	r2, [r7, #8]
 801082a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801082c:	e021      	b.n	8010872 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	60da      	str	r2, [r3, #12]
}
 801083e:	e018      	b.n	8010872 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	2b40      	cmp	r3, #64	@ 0x40
 801084e:	d108      	bne.n	8010862 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	60da      	str	r2, [r3, #12]
}
 8010860:	e007      	b.n	8010872 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	60da      	str	r2, [r3, #12]
}
 8010872:	bf00      	nop
 8010874:	3714      	adds	r7, #20
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	40020010 	.word	0x40020010
 8010884:	40020028 	.word	0x40020028
 8010888:	40020040 	.word	0x40020040
 801088c:	40020058 	.word	0x40020058
 8010890:	40020070 	.word	0x40020070
 8010894:	40020088 	.word	0x40020088
 8010898:	400200a0 	.word	0x400200a0
 801089c:	400200b8 	.word	0x400200b8
 80108a0:	40020410 	.word	0x40020410
 80108a4:	40020428 	.word	0x40020428
 80108a8:	40020440 	.word	0x40020440
 80108ac:	40020458 	.word	0x40020458
 80108b0:	40020470 	.word	0x40020470
 80108b4:	40020488 	.word	0x40020488
 80108b8:	400204a0 	.word	0x400204a0
 80108bc:	400204b8 	.word	0x400204b8

080108c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b089      	sub	sp, #36	@ 0x24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80108ca:	2300      	movs	r3, #0
 80108cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80108ce:	4b89      	ldr	r3, [pc, #548]	@ (8010af4 <HAL_GPIO_Init+0x234>)
 80108d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80108d2:	e194      	b.n	8010bfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	2101      	movs	r1, #1
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	fa01 f303 	lsl.w	r3, r1, r3
 80108e0:	4013      	ands	r3, r2
 80108e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f000 8186 	beq.w	8010bf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	f003 0303 	and.w	r3, r3, #3
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d005      	beq.n	8010904 <HAL_GPIO_Init+0x44>
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	f003 0303 	and.w	r3, r3, #3
 8010900:	2b02      	cmp	r3, #2
 8010902:	d130      	bne.n	8010966 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	2203      	movs	r2, #3
 8010910:	fa02 f303 	lsl.w	r3, r2, r3
 8010914:	43db      	mvns	r3, r3
 8010916:	69ba      	ldr	r2, [r7, #24]
 8010918:	4013      	ands	r3, r2
 801091a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	68da      	ldr	r2, [r3, #12]
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	fa02 f303 	lsl.w	r3, r2, r3
 8010928:	69ba      	ldr	r2, [r7, #24]
 801092a:	4313      	orrs	r3, r2
 801092c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	69ba      	ldr	r2, [r7, #24]
 8010932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801093a:	2201      	movs	r2, #1
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	fa02 f303 	lsl.w	r3, r2, r3
 8010942:	43db      	mvns	r3, r3
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	4013      	ands	r3, r2
 8010948:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	091b      	lsrs	r3, r3, #4
 8010950:	f003 0201 	and.w	r2, r3, #1
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	fa02 f303 	lsl.w	r3, r2, r3
 801095a:	69ba      	ldr	r2, [r7, #24]
 801095c:	4313      	orrs	r3, r2
 801095e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f003 0303 	and.w	r3, r3, #3
 801096e:	2b03      	cmp	r3, #3
 8010970:	d017      	beq.n	80109a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	2203      	movs	r2, #3
 801097e:	fa02 f303 	lsl.w	r3, r2, r3
 8010982:	43db      	mvns	r3, r3
 8010984:	69ba      	ldr	r2, [r7, #24]
 8010986:	4013      	ands	r3, r2
 8010988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	689a      	ldr	r2, [r3, #8]
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	fa02 f303 	lsl.w	r3, r2, r3
 8010996:	69ba      	ldr	r2, [r7, #24]
 8010998:	4313      	orrs	r3, r2
 801099a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	69ba      	ldr	r2, [r7, #24]
 80109a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	f003 0303 	and.w	r3, r3, #3
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d123      	bne.n	80109f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	08da      	lsrs	r2, r3, #3
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3208      	adds	r2, #8
 80109b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	f003 0307 	and.w	r3, r3, #7
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	220f      	movs	r2, #15
 80109c6:	fa02 f303 	lsl.w	r3, r2, r3
 80109ca:	43db      	mvns	r3, r3
 80109cc:	69ba      	ldr	r2, [r7, #24]
 80109ce:	4013      	ands	r3, r2
 80109d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	691a      	ldr	r2, [r3, #16]
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	f003 0307 	and.w	r3, r3, #7
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	fa02 f303 	lsl.w	r3, r2, r3
 80109e2:	69ba      	ldr	r2, [r7, #24]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	08da      	lsrs	r2, r3, #3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3208      	adds	r2, #8
 80109f0:	69b9      	ldr	r1, [r7, #24]
 80109f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	005b      	lsls	r3, r3, #1
 8010a00:	2203      	movs	r2, #3
 8010a02:	fa02 f303 	lsl.w	r3, r2, r3
 8010a06:	43db      	mvns	r3, r3
 8010a08:	69ba      	ldr	r2, [r7, #24]
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	f003 0203 	and.w	r2, r3, #3
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a1e:	69ba      	ldr	r2, [r7, #24]
 8010a20:	4313      	orrs	r3, r2
 8010a22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	69ba      	ldr	r2, [r7, #24]
 8010a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 80e0 	beq.w	8010bf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010a38:	4b2f      	ldr	r3, [pc, #188]	@ (8010af8 <HAL_GPIO_Init+0x238>)
 8010a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8010af8 <HAL_GPIO_Init+0x238>)
 8010a40:	f043 0302 	orr.w	r3, r3, #2
 8010a44:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010a48:	4b2b      	ldr	r3, [pc, #172]	@ (8010af8 <HAL_GPIO_Init+0x238>)
 8010a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010a4e:	f003 0302 	and.w	r3, r3, #2
 8010a52:	60fb      	str	r3, [r7, #12]
 8010a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010a56:	4a29      	ldr	r2, [pc, #164]	@ (8010afc <HAL_GPIO_Init+0x23c>)
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	089b      	lsrs	r3, r3, #2
 8010a5c:	3302      	adds	r3, #2
 8010a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	f003 0303 	and.w	r3, r3, #3
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	220f      	movs	r2, #15
 8010a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010a72:	43db      	mvns	r3, r3
 8010a74:	69ba      	ldr	r2, [r7, #24]
 8010a76:	4013      	ands	r3, r2
 8010a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a20      	ldr	r2, [pc, #128]	@ (8010b00 <HAL_GPIO_Init+0x240>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d052      	beq.n	8010b28 <HAL_GPIO_Init+0x268>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4a1f      	ldr	r2, [pc, #124]	@ (8010b04 <HAL_GPIO_Init+0x244>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d031      	beq.n	8010aee <HAL_GPIO_Init+0x22e>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8010b08 <HAL_GPIO_Init+0x248>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d02b      	beq.n	8010aea <HAL_GPIO_Init+0x22a>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a1d      	ldr	r2, [pc, #116]	@ (8010b0c <HAL_GPIO_Init+0x24c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d025      	beq.n	8010ae6 <HAL_GPIO_Init+0x226>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8010b10 <HAL_GPIO_Init+0x250>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d01f      	beq.n	8010ae2 <HAL_GPIO_Init+0x222>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8010b14 <HAL_GPIO_Init+0x254>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d019      	beq.n	8010ade <HAL_GPIO_Init+0x21e>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a1a      	ldr	r2, [pc, #104]	@ (8010b18 <HAL_GPIO_Init+0x258>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d013      	beq.n	8010ada <HAL_GPIO_Init+0x21a>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4a19      	ldr	r2, [pc, #100]	@ (8010b1c <HAL_GPIO_Init+0x25c>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d00d      	beq.n	8010ad6 <HAL_GPIO_Init+0x216>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4a18      	ldr	r2, [pc, #96]	@ (8010b20 <HAL_GPIO_Init+0x260>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d007      	beq.n	8010ad2 <HAL_GPIO_Init+0x212>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4a17      	ldr	r2, [pc, #92]	@ (8010b24 <HAL_GPIO_Init+0x264>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d101      	bne.n	8010ace <HAL_GPIO_Init+0x20e>
 8010aca:	2309      	movs	r3, #9
 8010acc:	e02d      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ace:	230a      	movs	r3, #10
 8010ad0:	e02b      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ad2:	2308      	movs	r3, #8
 8010ad4:	e029      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ad6:	2307      	movs	r3, #7
 8010ad8:	e027      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ada:	2306      	movs	r3, #6
 8010adc:	e025      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ade:	2305      	movs	r3, #5
 8010ae0:	e023      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ae2:	2304      	movs	r3, #4
 8010ae4:	e021      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	e01f      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010aea:	2302      	movs	r3, #2
 8010aec:	e01d      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010aee:	2301      	movs	r3, #1
 8010af0:	e01b      	b.n	8010b2a <HAL_GPIO_Init+0x26a>
 8010af2:	bf00      	nop
 8010af4:	58000080 	.word	0x58000080
 8010af8:	58024400 	.word	0x58024400
 8010afc:	58000400 	.word	0x58000400
 8010b00:	58020000 	.word	0x58020000
 8010b04:	58020400 	.word	0x58020400
 8010b08:	58020800 	.word	0x58020800
 8010b0c:	58020c00 	.word	0x58020c00
 8010b10:	58021000 	.word	0x58021000
 8010b14:	58021400 	.word	0x58021400
 8010b18:	58021800 	.word	0x58021800
 8010b1c:	58021c00 	.word	0x58021c00
 8010b20:	58022000 	.word	0x58022000
 8010b24:	58022400 	.word	0x58022400
 8010b28:	2300      	movs	r3, #0
 8010b2a:	69fa      	ldr	r2, [r7, #28]
 8010b2c:	f002 0203 	and.w	r2, r2, #3
 8010b30:	0092      	lsls	r2, r2, #2
 8010b32:	4093      	lsls	r3, r2
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	4313      	orrs	r3, r2
 8010b38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010b3a:	4938      	ldr	r1, [pc, #224]	@ (8010c1c <HAL_GPIO_Init+0x35c>)
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	089b      	lsrs	r3, r3, #2
 8010b40:	3302      	adds	r3, #2
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	43db      	mvns	r3, r3
 8010b54:	69ba      	ldr	r2, [r7, #24]
 8010b56:	4013      	ands	r3, r2
 8010b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8010b66:	69ba      	ldr	r2, [r7, #24]
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8010b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	43db      	mvns	r3, r3
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	4013      	ands	r3, r2
 8010b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d003      	beq.n	8010b9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8010b94:	69ba      	ldr	r2, [r7, #24]
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	4313      	orrs	r3, r2
 8010b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8010b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	43db      	mvns	r3, r3
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	4013      	ands	r3, r2
 8010bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d003      	beq.n	8010bc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8010bc0:	69ba      	ldr	r2, [r7, #24]
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	69ba      	ldr	r2, [r7, #24]
 8010bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	43db      	mvns	r3, r3
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	4013      	ands	r3, r2
 8010bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d003      	beq.n	8010bf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8010bea:	69ba      	ldr	r2, [r7, #24]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	69ba      	ldr	r2, [r7, #24]
 8010bf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	fa22 f303 	lsr.w	r3, r2, r3
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f47f ae63 	bne.w	80108d4 <HAL_GPIO_Init+0x14>
  }
}
 8010c0e:	bf00      	nop
 8010c10:	bf00      	nop
 8010c12:	3724      	adds	r7, #36	@ 0x24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	58000400 	.word	0x58000400

08010c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	807b      	strh	r3, [r7, #2]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010c30:	787b      	ldrb	r3, [r7, #1]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d003      	beq.n	8010c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010c36:	887a      	ldrh	r2, [r7, #2]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8010c3c:	e003      	b.n	8010c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8010c3e:	887b      	ldrh	r3, [r7, #2]
 8010c40:	041a      	lsls	r2, r3, #16
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	619a      	str	r2, [r3, #24]
}
 8010c46:	bf00      	nop
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
	...

08010c54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010c5c:	4b19      	ldr	r3, [pc, #100]	@ (8010cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	f003 0304 	and.w	r3, r3, #4
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	d00a      	beq.n	8010c7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010c68:	4b16      	ldr	r3, [pc, #88]	@ (8010cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	f003 0307 	and.w	r3, r3, #7
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d001      	beq.n	8010c7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	e01f      	b.n	8010cba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	e01d      	b.n	8010cba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010c7e:	4b11      	ldr	r3, [pc, #68]	@ (8010cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	f023 0207 	bic.w	r2, r3, #7
 8010c86:	490f      	ldr	r1, [pc, #60]	@ (8010cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010c8e:	f7fd f8f9 	bl	800de84 <HAL_GetTick>
 8010c92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010c94:	e009      	b.n	8010caa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010c96:	f7fd f8f5 	bl	800de84 <HAL_GetTick>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010ca4:	d901      	bls.n	8010caa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e007      	b.n	8010cba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010caa:	4b06      	ldr	r3, [pc, #24]	@ (8010cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010cb6:	d1ee      	bne.n	8010c96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	58024800 	.word	0x58024800

08010cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b08c      	sub	sp, #48	@ 0x30
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d102      	bne.n	8010cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	f000 bc48 	b.w	801156c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 0301 	and.w	r3, r3, #1
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 8088 	beq.w	8010dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010cea:	4b99      	ldr	r3, [pc, #612]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010cf4:	4b96      	ldr	r3, [pc, #600]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfc:	2b10      	cmp	r3, #16
 8010cfe:	d007      	beq.n	8010d10 <HAL_RCC_OscConfig+0x48>
 8010d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d02:	2b18      	cmp	r3, #24
 8010d04:	d111      	bne.n	8010d2a <HAL_RCC_OscConfig+0x62>
 8010d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d08:	f003 0303 	and.w	r3, r3, #3
 8010d0c:	2b02      	cmp	r3, #2
 8010d0e:	d10c      	bne.n	8010d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d10:	4b8f      	ldr	r3, [pc, #572]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d06d      	beq.n	8010df8 <HAL_RCC_OscConfig+0x130>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d169      	bne.n	8010df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010d24:	2301      	movs	r3, #1
 8010d26:	f000 bc21 	b.w	801156c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d32:	d106      	bne.n	8010d42 <HAL_RCC_OscConfig+0x7a>
 8010d34:	4b86      	ldr	r3, [pc, #536]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a85      	ldr	r2, [pc, #532]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d3e:	6013      	str	r3, [r2, #0]
 8010d40:	e02e      	b.n	8010da0 <HAL_RCC_OscConfig+0xd8>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10c      	bne.n	8010d64 <HAL_RCC_OscConfig+0x9c>
 8010d4a:	4b81      	ldr	r3, [pc, #516]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4a80      	ldr	r2, [pc, #512]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d54:	6013      	str	r3, [r2, #0]
 8010d56:	4b7e      	ldr	r3, [pc, #504]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	e01d      	b.n	8010da0 <HAL_RCC_OscConfig+0xd8>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010d6c:	d10c      	bne.n	8010d88 <HAL_RCC_OscConfig+0xc0>
 8010d6e:	4b78      	ldr	r3, [pc, #480]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a77      	ldr	r2, [pc, #476]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010d78:	6013      	str	r3, [r2, #0]
 8010d7a:	4b75      	ldr	r3, [pc, #468]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4a74      	ldr	r2, [pc, #464]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d84:	6013      	str	r3, [r2, #0]
 8010d86:	e00b      	b.n	8010da0 <HAL_RCC_OscConfig+0xd8>
 8010d88:	4b71      	ldr	r3, [pc, #452]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a70      	ldr	r2, [pc, #448]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	4b6e      	ldr	r3, [pc, #440]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a6d      	ldr	r2, [pc, #436]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d013      	beq.n	8010dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010da8:	f7fd f86c 	bl	800de84 <HAL_GetTick>
 8010dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010dae:	e008      	b.n	8010dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010db0:	f7fd f868 	bl	800de84 <HAL_GetTick>
 8010db4:	4602      	mov	r2, r0
 8010db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b64      	cmp	r3, #100	@ 0x64
 8010dbc:	d901      	bls.n	8010dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010dbe:	2303      	movs	r3, #3
 8010dc0:	e3d4      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010dc2:	4b63      	ldr	r3, [pc, #396]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d0f0      	beq.n	8010db0 <HAL_RCC_OscConfig+0xe8>
 8010dce:	e014      	b.n	8010dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dd0:	f7fd f858 	bl	800de84 <HAL_GetTick>
 8010dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010dd6:	e008      	b.n	8010dea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010dd8:	f7fd f854 	bl	800de84 <HAL_GetTick>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	2b64      	cmp	r3, #100	@ 0x64
 8010de4:	d901      	bls.n	8010dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010de6:	2303      	movs	r3, #3
 8010de8:	e3c0      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010dea:	4b59      	ldr	r3, [pc, #356]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1f0      	bne.n	8010dd8 <HAL_RCC_OscConfig+0x110>
 8010df6:	e000      	b.n	8010dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f003 0302 	and.w	r3, r3, #2
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80ca 	beq.w	8010f9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010e08:	4b51      	ldr	r3, [pc, #324]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010e12:	4b4f      	ldr	r3, [pc, #316]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010e18:	6a3b      	ldr	r3, [r7, #32]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d007      	beq.n	8010e2e <HAL_RCC_OscConfig+0x166>
 8010e1e:	6a3b      	ldr	r3, [r7, #32]
 8010e20:	2b18      	cmp	r3, #24
 8010e22:	d156      	bne.n	8010ed2 <HAL_RCC_OscConfig+0x20a>
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	f003 0303 	and.w	r3, r3, #3
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d151      	bne.n	8010ed2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010e2e:	4b48      	ldr	r3, [pc, #288]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f003 0304 	and.w	r3, r3, #4
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d005      	beq.n	8010e46 <HAL_RCC_OscConfig+0x17e>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8010e42:	2301      	movs	r3, #1
 8010e44:	e392      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010e46:	4b42      	ldr	r3, [pc, #264]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f023 0219 	bic.w	r2, r3, #25
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	493f      	ldr	r1, [pc, #252]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e54:	4313      	orrs	r3, r2
 8010e56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e58:	f7fd f814 	bl	800de84 <HAL_GetTick>
 8010e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010e5e:	e008      	b.n	8010e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e60:	f7fd f810 	bl	800de84 <HAL_GetTick>
 8010e64:	4602      	mov	r2, r0
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	2b02      	cmp	r3, #2
 8010e6c:	d901      	bls.n	8010e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8010e6e:	2303      	movs	r3, #3
 8010e70:	e37c      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010e72:	4b37      	ldr	r3, [pc, #220]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f003 0304 	and.w	r3, r3, #4
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d0f0      	beq.n	8010e60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e7e:	f7fd f831 	bl	800dee4 <HAL_GetREVID>
 8010e82:	4603      	mov	r3, r0
 8010e84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d817      	bhi.n	8010ebc <HAL_RCC_OscConfig+0x1f4>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	2b40      	cmp	r3, #64	@ 0x40
 8010e92:	d108      	bne.n	8010ea6 <HAL_RCC_OscConfig+0x1de>
 8010e94:	4b2e      	ldr	r3, [pc, #184]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8010e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010ea2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ea4:	e07a      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	031b      	lsls	r3, r3, #12
 8010eb4:	4926      	ldr	r1, [pc, #152]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010eba:	e06f      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ebc:	4b24      	ldr	r3, [pc, #144]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	061b      	lsls	r3, r3, #24
 8010eca:	4921      	ldr	r1, [pc, #132]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010ecc:	4313      	orrs	r3, r2
 8010ece:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ed0:	e064      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d047      	beq.n	8010f6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010eda:	4b1d      	ldr	r3, [pc, #116]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f023 0219 	bic.w	r2, r3, #25
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	491a      	ldr	r1, [pc, #104]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eec:	f7fc ffca 	bl	800de84 <HAL_GetTick>
 8010ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010ef2:	e008      	b.n	8010f06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010ef4:	f7fc ffc6 	bl	800de84 <HAL_GetTick>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d901      	bls.n	8010f06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8010f02:	2303      	movs	r3, #3
 8010f04:	e332      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f06:	4b12      	ldr	r3, [pc, #72]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 0304 	and.w	r3, r3, #4
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d0f0      	beq.n	8010ef4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f12:	f7fc ffe7 	bl	800dee4 <HAL_GetREVID>
 8010f16:	4603      	mov	r3, r0
 8010f18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d819      	bhi.n	8010f54 <HAL_RCC_OscConfig+0x28c>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	691b      	ldr	r3, [r3, #16]
 8010f24:	2b40      	cmp	r3, #64	@ 0x40
 8010f26:	d108      	bne.n	8010f3a <HAL_RCC_OscConfig+0x272>
 8010f28:	4b09      	ldr	r3, [pc, #36]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8010f30:	4a07      	ldr	r2, [pc, #28]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010f36:	6053      	str	r3, [r2, #4]
 8010f38:	e030      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
 8010f3a:	4b05      	ldr	r3, [pc, #20]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	031b      	lsls	r3, r3, #12
 8010f48:	4901      	ldr	r1, [pc, #4]	@ (8010f50 <HAL_RCC_OscConfig+0x288>)
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	604b      	str	r3, [r1, #4]
 8010f4e:	e025      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
 8010f50:	58024400 	.word	0x58024400
 8010f54:	4b9a      	ldr	r3, [pc, #616]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	061b      	lsls	r3, r3, #24
 8010f62:	4997      	ldr	r1, [pc, #604]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010f64:	4313      	orrs	r3, r2
 8010f66:	604b      	str	r3, [r1, #4]
 8010f68:	e018      	b.n	8010f9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f6a:	4b95      	ldr	r3, [pc, #596]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a94      	ldr	r2, [pc, #592]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010f70:	f023 0301 	bic.w	r3, r3, #1
 8010f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f76:	f7fc ff85 	bl	800de84 <HAL_GetTick>
 8010f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f7c:	e008      	b.n	8010f90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f7e:	f7fc ff81 	bl	800de84 <HAL_GetTick>
 8010f82:	4602      	mov	r2, r0
 8010f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	2b02      	cmp	r3, #2
 8010f8a:	d901      	bls.n	8010f90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	e2ed      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f90:	4b8b      	ldr	r3, [pc, #556]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f003 0304 	and.w	r3, r3, #4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1f0      	bne.n	8010f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f003 0310 	and.w	r3, r3, #16
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 80a9 	beq.w	80110fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010faa:	4b85      	ldr	r3, [pc, #532]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010fac:	691b      	ldr	r3, [r3, #16]
 8010fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010fb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010fb4:	4b82      	ldr	r3, [pc, #520]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	2b08      	cmp	r3, #8
 8010fbe:	d007      	beq.n	8010fd0 <HAL_RCC_OscConfig+0x308>
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	2b18      	cmp	r3, #24
 8010fc4:	d13a      	bne.n	801103c <HAL_RCC_OscConfig+0x374>
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	f003 0303 	and.w	r3, r3, #3
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d135      	bne.n	801103c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d005      	beq.n	8010fe8 <HAL_RCC_OscConfig+0x320>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	69db      	ldr	r3, [r3, #28]
 8010fe0:	2b80      	cmp	r3, #128	@ 0x80
 8010fe2:	d001      	beq.n	8010fe8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	e2c1      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010fe8:	f7fc ff7c 	bl	800dee4 <HAL_GetREVID>
 8010fec:	4603      	mov	r3, r0
 8010fee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d817      	bhi.n	8011026 <HAL_RCC_OscConfig+0x35e>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6a1b      	ldr	r3, [r3, #32]
 8010ffa:	2b20      	cmp	r3, #32
 8010ffc:	d108      	bne.n	8011010 <HAL_RCC_OscConfig+0x348>
 8010ffe:	4b70      	ldr	r3, [pc, #448]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8011006:	4a6e      	ldr	r2, [pc, #440]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011008:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801100c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801100e:	e075      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011010:	4b6b      	ldr	r3, [pc, #428]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a1b      	ldr	r3, [r3, #32]
 801101c:	069b      	lsls	r3, r3, #26
 801101e:	4968      	ldr	r1, [pc, #416]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011020:	4313      	orrs	r3, r2
 8011022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011024:	e06a      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011026:	4b66      	ldr	r3, [pc, #408]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a1b      	ldr	r3, [r3, #32]
 8011032:	061b      	lsls	r3, r3, #24
 8011034:	4962      	ldr	r1, [pc, #392]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011036:	4313      	orrs	r3, r2
 8011038:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801103a:	e05f      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	69db      	ldr	r3, [r3, #28]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d042      	beq.n	80110ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011044:	4b5e      	ldr	r3, [pc, #376]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a5d      	ldr	r2, [pc, #372]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801104a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801104e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011050:	f7fc ff18 	bl	800de84 <HAL_GetTick>
 8011054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011056:	e008      	b.n	801106a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011058:	f7fc ff14 	bl	800de84 <HAL_GetTick>
 801105c:	4602      	mov	r2, r0
 801105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	2b02      	cmp	r3, #2
 8011064:	d901      	bls.n	801106a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8011066:	2303      	movs	r3, #3
 8011068:	e280      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801106a:	4b55      	ldr	r3, [pc, #340]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011072:	2b00      	cmp	r3, #0
 8011074:	d0f0      	beq.n	8011058 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011076:	f7fc ff35 	bl	800dee4 <HAL_GetREVID>
 801107a:	4603      	mov	r3, r0
 801107c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8011080:	4293      	cmp	r3, r2
 8011082:	d817      	bhi.n	80110b4 <HAL_RCC_OscConfig+0x3ec>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a1b      	ldr	r3, [r3, #32]
 8011088:	2b20      	cmp	r3, #32
 801108a:	d108      	bne.n	801109e <HAL_RCC_OscConfig+0x3d6>
 801108c:	4b4c      	ldr	r3, [pc, #304]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8011094:	4a4a      	ldr	r2, [pc, #296]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011096:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801109a:	6053      	str	r3, [r2, #4]
 801109c:	e02e      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
 801109e:	4b48      	ldr	r3, [pc, #288]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	069b      	lsls	r3, r3, #26
 80110ac:	4944      	ldr	r1, [pc, #272]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110ae:	4313      	orrs	r3, r2
 80110b0:	604b      	str	r3, [r1, #4]
 80110b2:	e023      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
 80110b4:	4b42      	ldr	r3, [pc, #264]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6a1b      	ldr	r3, [r3, #32]
 80110c0:	061b      	lsls	r3, r3, #24
 80110c2:	493f      	ldr	r1, [pc, #252]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110c4:	4313      	orrs	r3, r2
 80110c6:	60cb      	str	r3, [r1, #12]
 80110c8:	e018      	b.n	80110fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80110ca:	4b3d      	ldr	r3, [pc, #244]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4a3c      	ldr	r2, [pc, #240]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80110d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110d6:	f7fc fed5 	bl	800de84 <HAL_GetTick>
 80110da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80110dc:	e008      	b.n	80110f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80110de:	f7fc fed1 	bl	800de84 <HAL_GetTick>
 80110e2:	4602      	mov	r2, r0
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	1ad3      	subs	r3, r2, r3
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d901      	bls.n	80110f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80110ec:	2303      	movs	r3, #3
 80110ee:	e23d      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80110f0:	4b33      	ldr	r3, [pc, #204]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1f0      	bne.n	80110de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f003 0308 	and.w	r3, r3, #8
 8011104:	2b00      	cmp	r3, #0
 8011106:	d036      	beq.n	8011176 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d019      	beq.n	8011144 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011110:	4b2b      	ldr	r3, [pc, #172]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011114:	4a2a      	ldr	r2, [pc, #168]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011116:	f043 0301 	orr.w	r3, r3, #1
 801111a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801111c:	f7fc feb2 	bl	800de84 <HAL_GetTick>
 8011120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011122:	e008      	b.n	8011136 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011124:	f7fc feae 	bl	800de84 <HAL_GetTick>
 8011128:	4602      	mov	r2, r0
 801112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	2b02      	cmp	r3, #2
 8011130:	d901      	bls.n	8011136 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8011132:	2303      	movs	r3, #3
 8011134:	e21a      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011136:	4b22      	ldr	r3, [pc, #136]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d0f0      	beq.n	8011124 <HAL_RCC_OscConfig+0x45c>
 8011142:	e018      	b.n	8011176 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011144:	4b1e      	ldr	r3, [pc, #120]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011148:	4a1d      	ldr	r2, [pc, #116]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801114a:	f023 0301 	bic.w	r3, r3, #1
 801114e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011150:	f7fc fe98 	bl	800de84 <HAL_GetTick>
 8011154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011156:	e008      	b.n	801116a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011158:	f7fc fe94 	bl	800de84 <HAL_GetTick>
 801115c:	4602      	mov	r2, r0
 801115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	2b02      	cmp	r3, #2
 8011164:	d901      	bls.n	801116a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8011166:	2303      	movs	r3, #3
 8011168:	e200      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801116a:	4b15      	ldr	r3, [pc, #84]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801116c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801116e:	f003 0302 	and.w	r3, r3, #2
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1f0      	bne.n	8011158 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f003 0320 	and.w	r3, r3, #32
 801117e:	2b00      	cmp	r3, #0
 8011180:	d039      	beq.n	80111f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d01c      	beq.n	80111c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801118a:	4b0d      	ldr	r3, [pc, #52]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4a0c      	ldr	r2, [pc, #48]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 8011190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011196:	f7fc fe75 	bl	800de84 <HAL_GetTick>
 801119a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801119c:	e008      	b.n	80111b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801119e:	f7fc fe71 	bl	800de84 <HAL_GetTick>
 80111a2:	4602      	mov	r2, r0
 80111a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d901      	bls.n	80111b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80111ac:	2303      	movs	r3, #3
 80111ae:	e1dd      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80111b0:	4b03      	ldr	r3, [pc, #12]	@ (80111c0 <HAL_RCC_OscConfig+0x4f8>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d0f0      	beq.n	801119e <HAL_RCC_OscConfig+0x4d6>
 80111bc:	e01b      	b.n	80111f6 <HAL_RCC_OscConfig+0x52e>
 80111be:	bf00      	nop
 80111c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80111c4:	4b9b      	ldr	r3, [pc, #620]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4a9a      	ldr	r2, [pc, #616]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80111ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80111ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80111d0:	f7fc fe58 	bl	800de84 <HAL_GetTick>
 80111d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80111d6:	e008      	b.n	80111ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80111d8:	f7fc fe54 	bl	800de84 <HAL_GetTick>
 80111dc:	4602      	mov	r2, r0
 80111de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	2b02      	cmp	r3, #2
 80111e4:	d901      	bls.n	80111ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80111e6:	2303      	movs	r3, #3
 80111e8:	e1c0      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80111ea:	4b92      	ldr	r3, [pc, #584]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1f0      	bne.n	80111d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f003 0304 	and.w	r3, r3, #4
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f000 8081 	beq.w	8011306 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011204:	4b8c      	ldr	r3, [pc, #560]	@ (8011438 <HAL_RCC_OscConfig+0x770>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a8b      	ldr	r2, [pc, #556]	@ (8011438 <HAL_RCC_OscConfig+0x770>)
 801120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801120e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011210:	f7fc fe38 	bl	800de84 <HAL_GetTick>
 8011214:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011216:	e008      	b.n	801122a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011218:	f7fc fe34 	bl	800de84 <HAL_GetTick>
 801121c:	4602      	mov	r2, r0
 801121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	2b64      	cmp	r3, #100	@ 0x64
 8011224:	d901      	bls.n	801122a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8011226:	2303      	movs	r3, #3
 8011228:	e1a0      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801122a:	4b83      	ldr	r3, [pc, #524]	@ (8011438 <HAL_RCC_OscConfig+0x770>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011232:	2b00      	cmp	r3, #0
 8011234:	d0f0      	beq.n	8011218 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d106      	bne.n	801124c <HAL_RCC_OscConfig+0x584>
 801123e:	4b7d      	ldr	r3, [pc, #500]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011242:	4a7c      	ldr	r2, [pc, #496]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011244:	f043 0301 	orr.w	r3, r3, #1
 8011248:	6713      	str	r3, [r2, #112]	@ 0x70
 801124a:	e02d      	b.n	80112a8 <HAL_RCC_OscConfig+0x5e0>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d10c      	bne.n	801126e <HAL_RCC_OscConfig+0x5a6>
 8011254:	4b77      	ldr	r3, [pc, #476]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011258:	4a76      	ldr	r2, [pc, #472]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801125a:	f023 0301 	bic.w	r3, r3, #1
 801125e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011260:	4b74      	ldr	r3, [pc, #464]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011264:	4a73      	ldr	r2, [pc, #460]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011266:	f023 0304 	bic.w	r3, r3, #4
 801126a:	6713      	str	r3, [r2, #112]	@ 0x70
 801126c:	e01c      	b.n	80112a8 <HAL_RCC_OscConfig+0x5e0>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	2b05      	cmp	r3, #5
 8011274:	d10c      	bne.n	8011290 <HAL_RCC_OscConfig+0x5c8>
 8011276:	4b6f      	ldr	r3, [pc, #444]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801127a:	4a6e      	ldr	r2, [pc, #440]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801127c:	f043 0304 	orr.w	r3, r3, #4
 8011280:	6713      	str	r3, [r2, #112]	@ 0x70
 8011282:	4b6c      	ldr	r3, [pc, #432]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011286:	4a6b      	ldr	r2, [pc, #428]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011288:	f043 0301 	orr.w	r3, r3, #1
 801128c:	6713      	str	r3, [r2, #112]	@ 0x70
 801128e:	e00b      	b.n	80112a8 <HAL_RCC_OscConfig+0x5e0>
 8011290:	4b68      	ldr	r3, [pc, #416]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011294:	4a67      	ldr	r2, [pc, #412]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011296:	f023 0301 	bic.w	r3, r3, #1
 801129a:	6713      	str	r3, [r2, #112]	@ 0x70
 801129c:	4b65      	ldr	r3, [pc, #404]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801129e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112a0:	4a64      	ldr	r2, [pc, #400]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80112a2:	f023 0304 	bic.w	r3, r3, #4
 80112a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d015      	beq.n	80112dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80112b0:	f7fc fde8 	bl	800de84 <HAL_GetTick>
 80112b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80112b6:	e00a      	b.n	80112ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80112b8:	f7fc fde4 	bl	800de84 <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d901      	bls.n	80112ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80112ca:	2303      	movs	r3, #3
 80112cc:	e14e      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80112ce:	4b59      	ldr	r3, [pc, #356]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80112d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112d2:	f003 0302 	and.w	r3, r3, #2
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0ee      	beq.n	80112b8 <HAL_RCC_OscConfig+0x5f0>
 80112da:	e014      	b.n	8011306 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80112dc:	f7fc fdd2 	bl	800de84 <HAL_GetTick>
 80112e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80112e2:	e00a      	b.n	80112fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80112e4:	f7fc fdce 	bl	800de84 <HAL_GetTick>
 80112e8:	4602      	mov	r2, r0
 80112ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d901      	bls.n	80112fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80112f6:	2303      	movs	r3, #3
 80112f8:	e138      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80112fa:	4b4e      	ldr	r3, [pc, #312]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80112fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112fe:	f003 0302 	and.w	r3, r3, #2
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1ee      	bne.n	80112e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 812d 	beq.w	801156a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011310:	4b48      	ldr	r3, [pc, #288]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011312:	691b      	ldr	r3, [r3, #16]
 8011314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011318:	2b18      	cmp	r3, #24
 801131a:	f000 80bd 	beq.w	8011498 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011322:	2b02      	cmp	r3, #2
 8011324:	f040 809e 	bne.w	8011464 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011328:	4b42      	ldr	r3, [pc, #264]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a41      	ldr	r2, [pc, #260]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801132e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011334:	f7fc fda6 	bl	800de84 <HAL_GetTick>
 8011338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801133a:	e008      	b.n	801134e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801133c:	f7fc fda2 	bl	800de84 <HAL_GetTick>
 8011340:	4602      	mov	r2, r0
 8011342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	2b02      	cmp	r3, #2
 8011348:	d901      	bls.n	801134e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	e10e      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801134e:	4b39      	ldr	r3, [pc, #228]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1f0      	bne.n	801133c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801135a:	4b36      	ldr	r3, [pc, #216]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801135c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801135e:	4b37      	ldr	r3, [pc, #220]	@ (801143c <HAL_RCC_OscConfig+0x774>)
 8011360:	4013      	ands	r3, r2
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801136a:	0112      	lsls	r2, r2, #4
 801136c:	430a      	orrs	r2, r1
 801136e:	4931      	ldr	r1, [pc, #196]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011370:	4313      	orrs	r3, r2
 8011372:	628b      	str	r3, [r1, #40]	@ 0x28
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011378:	3b01      	subs	r3, #1
 801137a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011382:	3b01      	subs	r3, #1
 8011384:	025b      	lsls	r3, r3, #9
 8011386:	b29b      	uxth	r3, r3
 8011388:	431a      	orrs	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801138e:	3b01      	subs	r3, #1
 8011390:	041b      	lsls	r3, r3, #16
 8011392:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011396:	431a      	orrs	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801139c:	3b01      	subs	r3, #1
 801139e:	061b      	lsls	r3, r3, #24
 80113a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80113a4:	4923      	ldr	r1, [pc, #140]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113a6:	4313      	orrs	r3, r2
 80113a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80113aa:	4b22      	ldr	r3, [pc, #136]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ae:	4a21      	ldr	r2, [pc, #132]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113b0:	f023 0301 	bic.w	r3, r3, #1
 80113b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80113b6:	4b1f      	ldr	r3, [pc, #124]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113ba:	4b21      	ldr	r3, [pc, #132]	@ (8011440 <HAL_RCC_OscConfig+0x778>)
 80113bc:	4013      	ands	r3, r2
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80113c2:	00d2      	lsls	r2, r2, #3
 80113c4:	491b      	ldr	r1, [pc, #108]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113c6:	4313      	orrs	r3, r2
 80113c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80113ca:	4b1a      	ldr	r3, [pc, #104]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ce:	f023 020c 	bic.w	r2, r3, #12
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113d6:	4917      	ldr	r1, [pc, #92]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113d8:	4313      	orrs	r3, r2
 80113da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80113dc:	4b15      	ldr	r3, [pc, #84]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113e0:	f023 0202 	bic.w	r2, r3, #2
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113e8:	4912      	ldr	r1, [pc, #72]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113ea:	4313      	orrs	r3, r2
 80113ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80113ee:	4b11      	ldr	r3, [pc, #68]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f2:	4a10      	ldr	r2, [pc, #64]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80113f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 80113fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113fe:	4a0d      	ldr	r2, [pc, #52]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011406:	4b0b      	ldr	r3, [pc, #44]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801140a:	4a0a      	ldr	r2, [pc, #40]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 801140c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011412:	4b08      	ldr	r3, [pc, #32]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011416:	4a07      	ldr	r2, [pc, #28]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011418:	f043 0301 	orr.w	r3, r3, #1
 801141c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801141e:	4b05      	ldr	r3, [pc, #20]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4a04      	ldr	r2, [pc, #16]	@ (8011434 <HAL_RCC_OscConfig+0x76c>)
 8011424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801142a:	f7fc fd2b 	bl	800de84 <HAL_GetTick>
 801142e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011430:	e011      	b.n	8011456 <HAL_RCC_OscConfig+0x78e>
 8011432:	bf00      	nop
 8011434:	58024400 	.word	0x58024400
 8011438:	58024800 	.word	0x58024800
 801143c:	fffffc0c 	.word	0xfffffc0c
 8011440:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011444:	f7fc fd1e 	bl	800de84 <HAL_GetTick>
 8011448:	4602      	mov	r2, r0
 801144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801144c:	1ad3      	subs	r3, r2, r3
 801144e:	2b02      	cmp	r3, #2
 8011450:	d901      	bls.n	8011456 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8011452:	2303      	movs	r3, #3
 8011454:	e08a      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011456:	4b47      	ldr	r3, [pc, #284]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801145e:	2b00      	cmp	r3, #0
 8011460:	d0f0      	beq.n	8011444 <HAL_RCC_OscConfig+0x77c>
 8011462:	e082      	b.n	801156a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011464:	4b43      	ldr	r3, [pc, #268]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a42      	ldr	r2, [pc, #264]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801146a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801146e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011470:	f7fc fd08 	bl	800de84 <HAL_GetTick>
 8011474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011476:	e008      	b.n	801148a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011478:	f7fc fd04 	bl	800de84 <HAL_GetTick>
 801147c:	4602      	mov	r2, r0
 801147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	2b02      	cmp	r3, #2
 8011484:	d901      	bls.n	801148a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8011486:	2303      	movs	r3, #3
 8011488:	e070      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801148a:	4b3a      	ldr	r3, [pc, #232]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1f0      	bne.n	8011478 <HAL_RCC_OscConfig+0x7b0>
 8011496:	e068      	b.n	801156a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011498:	4b36      	ldr	r3, [pc, #216]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801149c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801149e:	4b35      	ldr	r3, [pc, #212]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 80114a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d031      	beq.n	8011510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	f003 0203 	and.w	r2, r3, #3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d12a      	bne.n	8011510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	091b      	lsrs	r3, r3, #4
 80114be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d122      	bne.n	8011510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d11a      	bne.n	8011510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	0a5b      	lsrs	r3, r3, #9
 80114de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d111      	bne.n	8011510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	0c1b      	lsrs	r3, r3, #16
 80114f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d108      	bne.n	8011510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	0e1b      	lsrs	r3, r3, #24
 8011502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801150a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801150c:	429a      	cmp	r2, r3
 801150e:	d001      	beq.n	8011514 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	e02b      	b.n	801156c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011514:	4b17      	ldr	r3, [pc, #92]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011518:	08db      	lsrs	r3, r3, #3
 801151a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801151e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011524:	693a      	ldr	r2, [r7, #16]
 8011526:	429a      	cmp	r2, r3
 8011528:	d01f      	beq.n	801156a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801152a:	4b12      	ldr	r3, [pc, #72]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801152c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801152e:	4a11      	ldr	r2, [pc, #68]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011530:	f023 0301 	bic.w	r3, r3, #1
 8011534:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011536:	f7fc fca5 	bl	800de84 <HAL_GetTick>
 801153a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801153c:	bf00      	nop
 801153e:	f7fc fca1 	bl	800de84 <HAL_GetTick>
 8011542:	4602      	mov	r2, r0
 8011544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011546:	4293      	cmp	r3, r2
 8011548:	d0f9      	beq.n	801153e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801154a:	4b0a      	ldr	r3, [pc, #40]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801154c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801154e:	4b0a      	ldr	r3, [pc, #40]	@ (8011578 <HAL_RCC_OscConfig+0x8b0>)
 8011550:	4013      	ands	r3, r2
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011556:	00d2      	lsls	r2, r2, #3
 8011558:	4906      	ldr	r1, [pc, #24]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 801155a:	4313      	orrs	r3, r2
 801155c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801155e:	4b05      	ldr	r3, [pc, #20]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011562:	4a04      	ldr	r2, [pc, #16]	@ (8011574 <HAL_RCC_OscConfig+0x8ac>)
 8011564:	f043 0301 	orr.w	r3, r3, #1
 8011568:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801156a:	2300      	movs	r3, #0
}
 801156c:	4618      	mov	r0, r3
 801156e:	3730      	adds	r7, #48	@ 0x30
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	58024400 	.word	0x58024400
 8011578:	ffff0007 	.word	0xffff0007

0801157c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b086      	sub	sp, #24
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d101      	bne.n	8011590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	e19c      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011590:	4b8a      	ldr	r3, [pc, #552]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f003 030f 	and.w	r3, r3, #15
 8011598:	683a      	ldr	r2, [r7, #0]
 801159a:	429a      	cmp	r2, r3
 801159c:	d910      	bls.n	80115c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801159e:	4b87      	ldr	r3, [pc, #540]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f023 020f 	bic.w	r2, r3, #15
 80115a6:	4985      	ldr	r1, [pc, #532]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	4313      	orrs	r3, r2
 80115ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80115ae:	4b83      	ldr	r3, [pc, #524]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f003 030f 	and.w	r3, r3, #15
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d001      	beq.n	80115c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	e184      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f003 0304 	and.w	r3, r3, #4
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d010      	beq.n	80115ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	691a      	ldr	r2, [r3, #16]
 80115d0:	4b7b      	ldr	r3, [pc, #492]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80115d2:	699b      	ldr	r3, [r3, #24]
 80115d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80115d8:	429a      	cmp	r2, r3
 80115da:	d908      	bls.n	80115ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80115dc:	4b78      	ldr	r3, [pc, #480]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	4975      	ldr	r1, [pc, #468]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80115ea:	4313      	orrs	r3, r2
 80115ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f003 0308 	and.w	r3, r3, #8
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d010      	beq.n	801161c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	695a      	ldr	r2, [r3, #20]
 80115fe:	4b70      	ldr	r3, [pc, #448]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011600:	69db      	ldr	r3, [r3, #28]
 8011602:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011606:	429a      	cmp	r2, r3
 8011608:	d908      	bls.n	801161c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801160a:	4b6d      	ldr	r3, [pc, #436]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801160c:	69db      	ldr	r3, [r3, #28]
 801160e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	695b      	ldr	r3, [r3, #20]
 8011616:	496a      	ldr	r1, [pc, #424]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011618:	4313      	orrs	r3, r2
 801161a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f003 0310 	and.w	r3, r3, #16
 8011624:	2b00      	cmp	r3, #0
 8011626:	d010      	beq.n	801164a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	699a      	ldr	r2, [r3, #24]
 801162c:	4b64      	ldr	r3, [pc, #400]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801162e:	69db      	ldr	r3, [r3, #28]
 8011630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011634:	429a      	cmp	r2, r3
 8011636:	d908      	bls.n	801164a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011638:	4b61      	ldr	r3, [pc, #388]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	495e      	ldr	r1, [pc, #376]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011646:	4313      	orrs	r3, r2
 8011648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f003 0320 	and.w	r3, r3, #32
 8011652:	2b00      	cmp	r3, #0
 8011654:	d010      	beq.n	8011678 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	69da      	ldr	r2, [r3, #28]
 801165a:	4b59      	ldr	r3, [pc, #356]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801165c:	6a1b      	ldr	r3, [r3, #32]
 801165e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011662:	429a      	cmp	r2, r3
 8011664:	d908      	bls.n	8011678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011666:	4b56      	ldr	r3, [pc, #344]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	69db      	ldr	r3, [r3, #28]
 8011672:	4953      	ldr	r1, [pc, #332]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011674:	4313      	orrs	r3, r2
 8011676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f003 0302 	and.w	r3, r3, #2
 8011680:	2b00      	cmp	r3, #0
 8011682:	d010      	beq.n	80116a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68da      	ldr	r2, [r3, #12]
 8011688:	4b4d      	ldr	r3, [pc, #308]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801168a:	699b      	ldr	r3, [r3, #24]
 801168c:	f003 030f 	and.w	r3, r3, #15
 8011690:	429a      	cmp	r2, r3
 8011692:	d908      	bls.n	80116a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011694:	4b4a      	ldr	r3, [pc, #296]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011696:	699b      	ldr	r3, [r3, #24]
 8011698:	f023 020f 	bic.w	r2, r3, #15
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	4947      	ldr	r1, [pc, #284]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116a2:	4313      	orrs	r3, r2
 80116a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d055      	beq.n	801175e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80116b2:	4b43      	ldr	r3, [pc, #268]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116b4:	699b      	ldr	r3, [r3, #24]
 80116b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	689b      	ldr	r3, [r3, #8]
 80116be:	4940      	ldr	r1, [pc, #256]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116c0:	4313      	orrs	r3, r2
 80116c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	d107      	bne.n	80116dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80116cc:	4b3c      	ldr	r3, [pc, #240]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d121      	bne.n	801171c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80116d8:	2301      	movs	r3, #1
 80116da:	e0f6      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	2b03      	cmp	r3, #3
 80116e2:	d107      	bne.n	80116f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80116e4:	4b36      	ldr	r3, [pc, #216]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d115      	bne.n	801171c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80116f0:	2301      	movs	r3, #1
 80116f2:	e0ea      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d107      	bne.n	801170c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80116fc:	4b30      	ldr	r3, [pc, #192]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011704:	2b00      	cmp	r3, #0
 8011706:	d109      	bne.n	801171c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011708:	2301      	movs	r3, #1
 801170a:	e0de      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801170c:	4b2c      	ldr	r3, [pc, #176]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011718:	2301      	movs	r3, #1
 801171a:	e0d6      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801171c:	4b28      	ldr	r3, [pc, #160]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	f023 0207 	bic.w	r2, r3, #7
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	4925      	ldr	r1, [pc, #148]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801172a:	4313      	orrs	r3, r2
 801172c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801172e:	f7fc fba9 	bl	800de84 <HAL_GetTick>
 8011732:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011734:	e00a      	b.n	801174c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011736:	f7fc fba5 	bl	800de84 <HAL_GetTick>
 801173a:	4602      	mov	r2, r0
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011744:	4293      	cmp	r3, r2
 8011746:	d901      	bls.n	801174c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011748:	2303      	movs	r3, #3
 801174a:	e0be      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801174c:	4b1c      	ldr	r3, [pc, #112]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	429a      	cmp	r2, r3
 801175c:	d1eb      	bne.n	8011736 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f003 0302 	and.w	r3, r3, #2
 8011766:	2b00      	cmp	r3, #0
 8011768:	d010      	beq.n	801178c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	68da      	ldr	r2, [r3, #12]
 801176e:	4b14      	ldr	r3, [pc, #80]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011770:	699b      	ldr	r3, [r3, #24]
 8011772:	f003 030f 	and.w	r3, r3, #15
 8011776:	429a      	cmp	r2, r3
 8011778:	d208      	bcs.n	801178c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801177a:	4b11      	ldr	r3, [pc, #68]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	f023 020f 	bic.w	r2, r3, #15
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	490e      	ldr	r1, [pc, #56]	@ (80117c0 <HAL_RCC_ClockConfig+0x244>)
 8011788:	4313      	orrs	r3, r2
 801178a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801178c:	4b0b      	ldr	r3, [pc, #44]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f003 030f 	and.w	r3, r3, #15
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	429a      	cmp	r2, r3
 8011798:	d214      	bcs.n	80117c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801179a:	4b08      	ldr	r3, [pc, #32]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f023 020f 	bic.w	r2, r3, #15
 80117a2:	4906      	ldr	r1, [pc, #24]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	4313      	orrs	r3, r2
 80117a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80117aa:	4b04      	ldr	r3, [pc, #16]	@ (80117bc <HAL_RCC_ClockConfig+0x240>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 030f 	and.w	r3, r3, #15
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d005      	beq.n	80117c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80117b8:	2301      	movs	r3, #1
 80117ba:	e086      	b.n	80118ca <HAL_RCC_ClockConfig+0x34e>
 80117bc:	52002000 	.word	0x52002000
 80117c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f003 0304 	and.w	r3, r3, #4
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d010      	beq.n	80117f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	691a      	ldr	r2, [r3, #16]
 80117d4:	4b3f      	ldr	r3, [pc, #252]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 80117d6:	699b      	ldr	r3, [r3, #24]
 80117d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80117dc:	429a      	cmp	r2, r3
 80117de:	d208      	bcs.n	80117f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80117e0:	4b3c      	ldr	r3, [pc, #240]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	691b      	ldr	r3, [r3, #16]
 80117ec:	4939      	ldr	r1, [pc, #228]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 80117ee:	4313      	orrs	r3, r2
 80117f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f003 0308 	and.w	r3, r3, #8
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d010      	beq.n	8011820 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	695a      	ldr	r2, [r3, #20]
 8011802:	4b34      	ldr	r3, [pc, #208]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011804:	69db      	ldr	r3, [r3, #28]
 8011806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801180a:	429a      	cmp	r2, r3
 801180c:	d208      	bcs.n	8011820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801180e:	4b31      	ldr	r3, [pc, #196]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011810:	69db      	ldr	r3, [r3, #28]
 8011812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	492e      	ldr	r1, [pc, #184]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 801181c:	4313      	orrs	r3, r2
 801181e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f003 0310 	and.w	r3, r3, #16
 8011828:	2b00      	cmp	r3, #0
 801182a:	d010      	beq.n	801184e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	699a      	ldr	r2, [r3, #24]
 8011830:	4b28      	ldr	r3, [pc, #160]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011832:	69db      	ldr	r3, [r3, #28]
 8011834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011838:	429a      	cmp	r2, r3
 801183a:	d208      	bcs.n	801184e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801183c:	4b25      	ldr	r3, [pc, #148]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 801183e:	69db      	ldr	r3, [r3, #28]
 8011840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	699b      	ldr	r3, [r3, #24]
 8011848:	4922      	ldr	r1, [pc, #136]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 801184a:	4313      	orrs	r3, r2
 801184c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f003 0320 	and.w	r3, r3, #32
 8011856:	2b00      	cmp	r3, #0
 8011858:	d010      	beq.n	801187c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	69da      	ldr	r2, [r3, #28]
 801185e:	4b1d      	ldr	r3, [pc, #116]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011860:	6a1b      	ldr	r3, [r3, #32]
 8011862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011866:	429a      	cmp	r2, r3
 8011868:	d208      	bcs.n	801187c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801186a:	4b1a      	ldr	r3, [pc, #104]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 801186c:	6a1b      	ldr	r3, [r3, #32]
 801186e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	69db      	ldr	r3, [r3, #28]
 8011876:	4917      	ldr	r1, [pc, #92]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011878:	4313      	orrs	r3, r2
 801187a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801187c:	f000 f834 	bl	80118e8 <HAL_RCC_GetSysClockFreq>
 8011880:	4602      	mov	r2, r0
 8011882:	4b14      	ldr	r3, [pc, #80]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 8011884:	699b      	ldr	r3, [r3, #24]
 8011886:	0a1b      	lsrs	r3, r3, #8
 8011888:	f003 030f 	and.w	r3, r3, #15
 801188c:	4912      	ldr	r1, [pc, #72]	@ (80118d8 <HAL_RCC_ClockConfig+0x35c>)
 801188e:	5ccb      	ldrb	r3, [r1, r3]
 8011890:	f003 031f 	and.w	r3, r3, #31
 8011894:	fa22 f303 	lsr.w	r3, r2, r3
 8011898:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801189a:	4b0e      	ldr	r3, [pc, #56]	@ (80118d4 <HAL_RCC_ClockConfig+0x358>)
 801189c:	699b      	ldr	r3, [r3, #24]
 801189e:	f003 030f 	and.w	r3, r3, #15
 80118a2:	4a0d      	ldr	r2, [pc, #52]	@ (80118d8 <HAL_RCC_ClockConfig+0x35c>)
 80118a4:	5cd3      	ldrb	r3, [r2, r3]
 80118a6:	f003 031f 	and.w	r3, r3, #31
 80118aa:	693a      	ldr	r2, [r7, #16]
 80118ac:	fa22 f303 	lsr.w	r3, r2, r3
 80118b0:	4a0a      	ldr	r2, [pc, #40]	@ (80118dc <HAL_RCC_ClockConfig+0x360>)
 80118b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80118b4:	4a0a      	ldr	r2, [pc, #40]	@ (80118e0 <HAL_RCC_ClockConfig+0x364>)
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80118ba:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <HAL_RCC_ClockConfig+0x368>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fc fa96 	bl	800ddf0 <HAL_InitTick>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3718      	adds	r7, #24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	58024400 	.word	0x58024400
 80118d8:	0801cb54 	.word	0x0801cb54
 80118dc:	24000034 	.word	0x24000034
 80118e0:	24000030 	.word	0x24000030
 80118e4:	24000038 	.word	0x24000038

080118e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b089      	sub	sp, #36	@ 0x24
 80118ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80118ee:	4bb3      	ldr	r3, [pc, #716]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118f0:	691b      	ldr	r3, [r3, #16]
 80118f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118f6:	2b18      	cmp	r3, #24
 80118f8:	f200 8155 	bhi.w	8011ba6 <HAL_RCC_GetSysClockFreq+0x2be>
 80118fc:	a201      	add	r2, pc, #4	@ (adr r2, 8011904 <HAL_RCC_GetSysClockFreq+0x1c>)
 80118fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011902:	bf00      	nop
 8011904:	08011969 	.word	0x08011969
 8011908:	08011ba7 	.word	0x08011ba7
 801190c:	08011ba7 	.word	0x08011ba7
 8011910:	08011ba7 	.word	0x08011ba7
 8011914:	08011ba7 	.word	0x08011ba7
 8011918:	08011ba7 	.word	0x08011ba7
 801191c:	08011ba7 	.word	0x08011ba7
 8011920:	08011ba7 	.word	0x08011ba7
 8011924:	0801198f 	.word	0x0801198f
 8011928:	08011ba7 	.word	0x08011ba7
 801192c:	08011ba7 	.word	0x08011ba7
 8011930:	08011ba7 	.word	0x08011ba7
 8011934:	08011ba7 	.word	0x08011ba7
 8011938:	08011ba7 	.word	0x08011ba7
 801193c:	08011ba7 	.word	0x08011ba7
 8011940:	08011ba7 	.word	0x08011ba7
 8011944:	08011995 	.word	0x08011995
 8011948:	08011ba7 	.word	0x08011ba7
 801194c:	08011ba7 	.word	0x08011ba7
 8011950:	08011ba7 	.word	0x08011ba7
 8011954:	08011ba7 	.word	0x08011ba7
 8011958:	08011ba7 	.word	0x08011ba7
 801195c:	08011ba7 	.word	0x08011ba7
 8011960:	08011ba7 	.word	0x08011ba7
 8011964:	0801199b 	.word	0x0801199b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011968:	4b94      	ldr	r3, [pc, #592]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f003 0320 	and.w	r3, r3, #32
 8011970:	2b00      	cmp	r3, #0
 8011972:	d009      	beq.n	8011988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011974:	4b91      	ldr	r3, [pc, #580]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	08db      	lsrs	r3, r3, #3
 801197a:	f003 0303 	and.w	r3, r3, #3
 801197e:	4a90      	ldr	r2, [pc, #576]	@ (8011bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011980:	fa22 f303 	lsr.w	r3, r2, r3
 8011984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011986:	e111      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011988:	4b8d      	ldr	r3, [pc, #564]	@ (8011bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801198a:	61bb      	str	r3, [r7, #24]
      break;
 801198c:	e10e      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801198e:	4b8d      	ldr	r3, [pc, #564]	@ (8011bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011990:	61bb      	str	r3, [r7, #24]
      break;
 8011992:	e10b      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011994:	4b8c      	ldr	r3, [pc, #560]	@ (8011bc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011996:	61bb      	str	r3, [r7, #24]
      break;
 8011998:	e108      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801199a:	4b88      	ldr	r3, [pc, #544]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801199e:	f003 0303 	and.w	r3, r3, #3
 80119a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80119a4:	4b85      	ldr	r3, [pc, #532]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119a8:	091b      	lsrs	r3, r3, #4
 80119aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80119ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80119b0:	4b82      	ldr	r3, [pc, #520]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b4:	f003 0301 	and.w	r3, r3, #1
 80119b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80119ba:	4b80      	ldr	r3, [pc, #512]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119be:	08db      	lsrs	r3, r3, #3
 80119c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	fb02 f303 	mul.w	r3, r2, r3
 80119ca:	ee07 3a90 	vmov	s15, r3
 80119ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 80e1 	beq.w	8011ba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	2b02      	cmp	r3, #2
 80119e2:	f000 8083 	beq.w	8011aec <HAL_RCC_GetSysClockFreq+0x204>
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	f200 80a1 	bhi.w	8011b30 <HAL_RCC_GetSysClockFreq+0x248>
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d003      	beq.n	80119fc <HAL_RCC_GetSysClockFreq+0x114>
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d056      	beq.n	8011aa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80119fa:	e099      	b.n	8011b30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119fc:	4b6f      	ldr	r3, [pc, #444]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f003 0320 	and.w	r3, r3, #32
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d02d      	beq.n	8011a64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a08:	4b6c      	ldr	r3, [pc, #432]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	08db      	lsrs	r3, r3, #3
 8011a0e:	f003 0303 	and.w	r3, r3, #3
 8011a12:	4a6b      	ldr	r2, [pc, #428]	@ (8011bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011a14:	fa22 f303 	lsr.w	r3, r2, r3
 8011a18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	ee07 3a90 	vmov	s15, r3
 8011a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	ee07 3a90 	vmov	s15, r3
 8011a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a32:	4b62      	ldr	r3, [pc, #392]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a3a:	ee07 3a90 	vmov	s15, r3
 8011a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011a62:	e087      	b.n	8011b74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	ee07 3a90 	vmov	s15, r3
 8011a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011bd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a76:	4b51      	ldr	r3, [pc, #324]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a7e:	ee07 3a90 	vmov	s15, r3
 8011a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011aa6:	e065      	b.n	8011b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	ee07 3a90 	vmov	s15, r3
 8011aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ab2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011aba:	4b40      	ldr	r3, [pc, #256]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ac2:	ee07 3a90 	vmov	s15, r3
 8011ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ace:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011aea:	e043      	b.n	8011b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	ee07 3a90 	vmov	s15, r3
 8011af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011af6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011bd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011afe:	4b2f      	ldr	r3, [pc, #188]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b06:	ee07 3a90 	vmov	s15, r3
 8011b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b2e:	e021      	b.n	8011b74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	ee07 3a90 	vmov	s15, r3
 8011b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b42:	4b1e      	ldr	r3, [pc, #120]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b4a:	ee07 3a90 	vmov	s15, r3
 8011b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011b74:	4b11      	ldr	r3, [pc, #68]	@ (8011bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b78:	0a5b      	lsrs	r3, r3, #9
 8011b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b7e:	3301      	adds	r3, #1
 8011b80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	ee07 3a90 	vmov	s15, r3
 8011b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b98:	ee17 3a90 	vmov	r3, s15
 8011b9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011b9e:	e005      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	61bb      	str	r3, [r7, #24]
      break;
 8011ba4:	e002      	b.n	8011bac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011ba6:	4b07      	ldr	r3, [pc, #28]	@ (8011bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011ba8:	61bb      	str	r3, [r7, #24]
      break;
 8011baa:	bf00      	nop
  }

  return sysclockfreq;
 8011bac:	69bb      	ldr	r3, [r7, #24]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3724      	adds	r7, #36	@ 0x24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	58024400 	.word	0x58024400
 8011bc0:	03d09000 	.word	0x03d09000
 8011bc4:	003d0900 	.word	0x003d0900
 8011bc8:	017d7840 	.word	0x017d7840
 8011bcc:	46000000 	.word	0x46000000
 8011bd0:	4c742400 	.word	0x4c742400
 8011bd4:	4a742400 	.word	0x4a742400
 8011bd8:	4bbebc20 	.word	0x4bbebc20

08011bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011be2:	f7ff fe81 	bl	80118e8 <HAL_RCC_GetSysClockFreq>
 8011be6:	4602      	mov	r2, r0
 8011be8:	4b10      	ldr	r3, [pc, #64]	@ (8011c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8011bea:	699b      	ldr	r3, [r3, #24]
 8011bec:	0a1b      	lsrs	r3, r3, #8
 8011bee:	f003 030f 	and.w	r3, r3, #15
 8011bf2:	490f      	ldr	r1, [pc, #60]	@ (8011c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8011bf4:	5ccb      	ldrb	r3, [r1, r3]
 8011bf6:	f003 031f 	and.w	r3, r3, #31
 8011bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8011bfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011c00:	4b0a      	ldr	r3, [pc, #40]	@ (8011c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8011c02:	699b      	ldr	r3, [r3, #24]
 8011c04:	f003 030f 	and.w	r3, r3, #15
 8011c08:	4a09      	ldr	r2, [pc, #36]	@ (8011c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8011c0a:	5cd3      	ldrb	r3, [r2, r3]
 8011c0c:	f003 031f 	and.w	r3, r3, #31
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	fa22 f303 	lsr.w	r3, r2, r3
 8011c16:	4a07      	ldr	r2, [pc, #28]	@ (8011c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8011c18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011c1a:	4a07      	ldr	r2, [pc, #28]	@ (8011c38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011c20:	4b04      	ldr	r3, [pc, #16]	@ (8011c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8011c22:	681b      	ldr	r3, [r3, #0]
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	58024400 	.word	0x58024400
 8011c30:	0801cb54 	.word	0x0801cb54
 8011c34:	24000034 	.word	0x24000034
 8011c38:	24000030 	.word	0x24000030

08011c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011c40:	f7ff ffcc 	bl	8011bdc <HAL_RCC_GetHCLKFreq>
 8011c44:	4602      	mov	r2, r0
 8011c46:	4b06      	ldr	r3, [pc, #24]	@ (8011c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011c48:	69db      	ldr	r3, [r3, #28]
 8011c4a:	091b      	lsrs	r3, r3, #4
 8011c4c:	f003 0307 	and.w	r3, r3, #7
 8011c50:	4904      	ldr	r1, [pc, #16]	@ (8011c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011c52:	5ccb      	ldrb	r3, [r1, r3]
 8011c54:	f003 031f 	and.w	r3, r3, #31
 8011c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	58024400 	.word	0x58024400
 8011c64:	0801cb54 	.word	0x0801cb54

08011c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011c6c:	f7ff ffb6 	bl	8011bdc <HAL_RCC_GetHCLKFreq>
 8011c70:	4602      	mov	r2, r0
 8011c72:	4b06      	ldr	r3, [pc, #24]	@ (8011c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011c74:	69db      	ldr	r3, [r3, #28]
 8011c76:	0a1b      	lsrs	r3, r3, #8
 8011c78:	f003 0307 	and.w	r3, r3, #7
 8011c7c:	4904      	ldr	r1, [pc, #16]	@ (8011c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011c7e:	5ccb      	ldrb	r3, [r1, r3]
 8011c80:	f003 031f 	and.w	r3, r3, #31
 8011c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	58024400 	.word	0x58024400
 8011c90:	0801cb54 	.word	0x0801cb54

08011c94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c98:	b0ca      	sub	sp, #296	@ 0x128
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011cb8:	2500      	movs	r5, #0
 8011cba:	ea54 0305 	orrs.w	r3, r4, r5
 8011cbe:	d049      	beq.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011cc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011cca:	d02f      	beq.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011ccc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011cd0:	d828      	bhi.n	8011d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011cd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011cd6:	d01a      	beq.n	8011d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011cd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011cdc:	d822      	bhi.n	8011d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d003      	beq.n	8011cea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ce6:	d007      	beq.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011ce8:	e01c      	b.n	8011d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011cea:	4bb8      	ldr	r3, [pc, #736]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cee:	4ab7      	ldr	r2, [pc, #732]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011cf6:	e01a      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	2102      	movs	r1, #2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f002 fb61 	bl	80143c8 <RCCEx_PLL2_Config>
 8011d06:	4603      	mov	r3, r0
 8011d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011d0c:	e00f      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011d12:	3328      	adds	r3, #40	@ 0x28
 8011d14:	2102      	movs	r1, #2
 8011d16:	4618      	mov	r0, r3
 8011d18:	f002 fc08 	bl	801452c <RCCEx_PLL3_Config>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011d22:	e004      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d24:	2301      	movs	r3, #1
 8011d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011d2a:	e000      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10a      	bne.n	8011d4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011d36:	4ba5      	ldr	r3, [pc, #660]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d44:	4aa1      	ldr	r2, [pc, #644]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011d46:	430b      	orrs	r3, r1
 8011d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8011d4a:	e003      	b.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011d60:	f04f 0900 	mov.w	r9, #0
 8011d64:	ea58 0309 	orrs.w	r3, r8, r9
 8011d68:	d047      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d70:	2b04      	cmp	r3, #4
 8011d72:	d82a      	bhi.n	8011dca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011d74:	a201      	add	r2, pc, #4	@ (adr r2, 8011d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d7a:	bf00      	nop
 8011d7c:	08011d91 	.word	0x08011d91
 8011d80:	08011d9f 	.word	0x08011d9f
 8011d84:	08011db5 	.word	0x08011db5
 8011d88:	08011dd3 	.word	0x08011dd3
 8011d8c:	08011dd3 	.word	0x08011dd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d90:	4b8e      	ldr	r3, [pc, #568]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d94:	4a8d      	ldr	r2, [pc, #564]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d9c:	e01a      	b.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011da2:	3308      	adds	r3, #8
 8011da4:	2100      	movs	r1, #0
 8011da6:	4618      	mov	r0, r3
 8011da8:	f002 fb0e 	bl	80143c8 <RCCEx_PLL2_Config>
 8011dac:	4603      	mov	r3, r0
 8011dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011db2:	e00f      	b.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011db8:	3328      	adds	r3, #40	@ 0x28
 8011dba:	2100      	movs	r1, #0
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f002 fbb5 	bl	801452c <RCCEx_PLL3_Config>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011dc8:	e004      	b.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011dd0:	e000      	b.n	8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d10a      	bne.n	8011df2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011de0:	f023 0107 	bic.w	r1, r3, #7
 8011de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dea:	4a78      	ldr	r2, [pc, #480]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011dec:	430b      	orrs	r3, r1
 8011dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8011df0:	e003      	b.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8011e06:	f04f 0b00 	mov.w	fp, #0
 8011e0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8011e0e:	d04c      	beq.n	8011eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8011e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e1a:	d030      	beq.n	8011e7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8011e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e20:	d829      	bhi.n	8011e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8011e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8011e24:	d02d      	beq.n	8011e82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8011e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8011e28:	d825      	bhi.n	8011e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8011e2a:	2b80      	cmp	r3, #128	@ 0x80
 8011e2c:	d018      	beq.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8011e2e:	2b80      	cmp	r3, #128	@ 0x80
 8011e30:	d821      	bhi.n	8011e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d002      	beq.n	8011e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8011e36:	2b40      	cmp	r3, #64	@ 0x40
 8011e38:	d007      	beq.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8011e3a:	e01c      	b.n	8011e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e3c:	4b63      	ldr	r3, [pc, #396]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e40:	4a62      	ldr	r2, [pc, #392]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8011e48:	e01c      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011e4e:	3308      	adds	r3, #8
 8011e50:	2100      	movs	r1, #0
 8011e52:	4618      	mov	r0, r3
 8011e54:	f002 fab8 	bl	80143c8 <RCCEx_PLL2_Config>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8011e5e:	e011      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011e64:	3328      	adds	r3, #40	@ 0x28
 8011e66:	2100      	movs	r1, #0
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f002 fb5f 	bl	801452c <RCCEx_PLL3_Config>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8011e74:	e006      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011e76:	2301      	movs	r3, #1
 8011e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011e7c:	e002      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8011e7e:	bf00      	nop
 8011e80:	e000      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8011e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d10a      	bne.n	8011ea2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e90:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8011e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011e9c:	430b      	orrs	r3, r1
 8011e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8011ea0:	e003      	b.n	8011eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8011eb6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8011ec0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4313      	orrs	r3, r2
 8011ec8:	d053      	beq.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011ed2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011ed6:	d035      	beq.n	8011f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8011ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011edc:	d82e      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8011ede:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011ee2:	d031      	beq.n	8011f48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8011ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011ee8:	d828      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8011eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011eee:	d01a      	beq.n	8011f26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8011ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011ef4:	d822      	bhi.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d003      	beq.n	8011f02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8011efa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011efe:	d007      	beq.n	8011f10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8011f00:	e01c      	b.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f02:	4b32      	ldr	r3, [pc, #200]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f06:	4a31      	ldr	r2, [pc, #196]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f0e:	e01c      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011f14:	3308      	adds	r3, #8
 8011f16:	2100      	movs	r1, #0
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f002 fa55 	bl	80143c8 <RCCEx_PLL2_Config>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011f24:	e011      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011f2a:	3328      	adds	r3, #40	@ 0x28
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f002 fafc 	bl	801452c <RCCEx_PLL3_Config>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f3a:	e006      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8011f42:	e002      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8011f44:	bf00      	nop
 8011f46:	e000      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8011f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d10b      	bne.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011f52:	4b1e      	ldr	r3, [pc, #120]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011f62:	4a1a      	ldr	r2, [pc, #104]	@ (8011fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8011f64:	430b      	orrs	r3, r1
 8011f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f68:	e003      	b.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8011f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011f7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011f82:	2300      	movs	r3, #0
 8011f84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011f88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	d056      	beq.n	8012040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011f9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011f9e:	d038      	beq.n	8012012 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011fa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011fa4:	d831      	bhi.n	801200a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8011fa6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011faa:	d034      	beq.n	8012016 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8011fac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011fb0:	d82b      	bhi.n	801200a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8011fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011fb6:	d01d      	beq.n	8011ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8011fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011fbc:	d825      	bhi.n	801200a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d006      	beq.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8011fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011fc6:	d00a      	beq.n	8011fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8011fc8:	e01f      	b.n	801200a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8011fca:	bf00      	nop
 8011fcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011fd0:	4ba2      	ldr	r3, [pc, #648]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8011fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fd4:	4aa1      	ldr	r2, [pc, #644]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8011fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011fdc:	e01c      	b.n	8012018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f002 f9ee 	bl	80143c8 <RCCEx_PLL2_Config>
 8011fec:	4603      	mov	r3, r0
 8011fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011ff2:	e011      	b.n	8012018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011ff8:	3328      	adds	r3, #40	@ 0x28
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f002 fa95 	bl	801452c <RCCEx_PLL3_Config>
 8012002:	4603      	mov	r3, r0
 8012004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012008:	e006      	b.n	8012018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801200a:	2301      	movs	r3, #1
 801200c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012010:	e002      	b.n	8012018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8012012:	bf00      	nop
 8012014:	e000      	b.n	8012018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8012016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10b      	bne.n	8012038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012020:	4b8e      	ldr	r3, [pc, #568]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012024:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8012028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801202c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012030:	4a8a      	ldr	r2, [pc, #552]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012032:	430b      	orrs	r3, r1
 8012034:	6593      	str	r3, [r2, #88]	@ 0x58
 8012036:	e003      	b.n	8012040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801203c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801204c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012050:	2300      	movs	r3, #0
 8012052:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012056:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801205a:	460b      	mov	r3, r1
 801205c:	4313      	orrs	r3, r2
 801205e:	d03a      	beq.n	80120d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8012060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012066:	2b30      	cmp	r3, #48	@ 0x30
 8012068:	d01f      	beq.n	80120aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 801206a:	2b30      	cmp	r3, #48	@ 0x30
 801206c:	d819      	bhi.n	80120a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801206e:	2b20      	cmp	r3, #32
 8012070:	d00c      	beq.n	801208c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8012072:	2b20      	cmp	r3, #32
 8012074:	d815      	bhi.n	80120a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8012076:	2b00      	cmp	r3, #0
 8012078:	d019      	beq.n	80120ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801207a:	2b10      	cmp	r3, #16
 801207c:	d111      	bne.n	80120a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801207e:	4b77      	ldr	r3, [pc, #476]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012082:	4a76      	ldr	r2, [pc, #472]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801208a:	e011      	b.n	80120b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801208c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012090:	3308      	adds	r3, #8
 8012092:	2102      	movs	r1, #2
 8012094:	4618      	mov	r0, r3
 8012096:	f002 f997 	bl	80143c8 <RCCEx_PLL2_Config>
 801209a:	4603      	mov	r3, r0
 801209c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80120a0:	e006      	b.n	80120b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80120a2:	2301      	movs	r3, #1
 80120a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80120a8:	e002      	b.n	80120b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80120aa:	bf00      	nop
 80120ac:	e000      	b.n	80120b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80120ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d10a      	bne.n	80120ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80120b8:	4b68      	ldr	r3, [pc, #416]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80120ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80120c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80120c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120c6:	4a65      	ldr	r2, [pc, #404]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80120c8:	430b      	orrs	r3, r1
 80120ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80120cc:	e003      	b.n	80120d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80120d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80120d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80120e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80120e6:	2300      	movs	r3, #0
 80120e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80120ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4313      	orrs	r3, r2
 80120f4:	d051      	beq.n	801219a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80120f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80120fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80120fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012100:	d035      	beq.n	801216e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8012102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012106:	d82e      	bhi.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8012108:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801210c:	d031      	beq.n	8012172 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801210e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012112:	d828      	bhi.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8012114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012118:	d01a      	beq.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801211a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801211e:	d822      	bhi.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8012120:	2b00      	cmp	r3, #0
 8012122:	d003      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8012124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012128:	d007      	beq.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801212a:	e01c      	b.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801212c:	4b4b      	ldr	r3, [pc, #300]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012130:	4a4a      	ldr	r2, [pc, #296]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012138:	e01c      	b.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801213a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801213e:	3308      	adds	r3, #8
 8012140:	2100      	movs	r1, #0
 8012142:	4618      	mov	r0, r3
 8012144:	f002 f940 	bl	80143c8 <RCCEx_PLL2_Config>
 8012148:	4603      	mov	r3, r0
 801214a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801214e:	e011      	b.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012154:	3328      	adds	r3, #40	@ 0x28
 8012156:	2100      	movs	r1, #0
 8012158:	4618      	mov	r0, r3
 801215a:	f002 f9e7 	bl	801452c <RCCEx_PLL3_Config>
 801215e:	4603      	mov	r3, r0
 8012160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012164:	e006      	b.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801216c:	e002      	b.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801216e:	bf00      	nop
 8012170:	e000      	b.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8012172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10a      	bne.n	8012192 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801217c:	4b37      	ldr	r3, [pc, #220]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801217e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012180:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801218a:	4a34      	ldr	r2, [pc, #208]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801218c:	430b      	orrs	r3, r1
 801218e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012190:	e003      	b.n	801219a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801219a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80121a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80121aa:	2300      	movs	r3, #0
 80121ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80121b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80121b4:	460b      	mov	r3, r1
 80121b6:	4313      	orrs	r3, r2
 80121b8:	d056      	beq.n	8012268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80121ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80121be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80121c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80121c4:	d033      	beq.n	801222e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80121c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80121ca:	d82c      	bhi.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80121cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80121d0:	d02f      	beq.n	8012232 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80121d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80121d6:	d826      	bhi.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80121d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80121dc:	d02b      	beq.n	8012236 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80121de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80121e2:	d820      	bhi.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80121e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80121e8:	d012      	beq.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80121ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80121ee:	d81a      	bhi.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d022      	beq.n	801223a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80121f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121f8:	d115      	bne.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80121fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80121fe:	3308      	adds	r3, #8
 8012200:	2101      	movs	r1, #1
 8012202:	4618      	mov	r0, r3
 8012204:	f002 f8e0 	bl	80143c8 <RCCEx_PLL2_Config>
 8012208:	4603      	mov	r3, r0
 801220a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801220e:	e015      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012214:	3328      	adds	r3, #40	@ 0x28
 8012216:	2101      	movs	r1, #1
 8012218:	4618      	mov	r0, r3
 801221a:	f002 f987 	bl	801452c <RCCEx_PLL3_Config>
 801221e:	4603      	mov	r3, r0
 8012220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012224:	e00a      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012226:	2301      	movs	r3, #1
 8012228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801222c:	e006      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801222e:	bf00      	nop
 8012230:	e004      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8012232:	bf00      	nop
 8012234:	e002      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8012236:	bf00      	nop
 8012238:	e000      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801223a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801223c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10d      	bne.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012244:	4b05      	ldr	r3, [pc, #20]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012248:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801224c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012252:	4a02      	ldr	r2, [pc, #8]	@ (801225c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012254:	430b      	orrs	r3, r1
 8012256:	6513      	str	r3, [r2, #80]	@ 0x50
 8012258:	e006      	b.n	8012268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801225a:	bf00      	nop
 801225c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012278:	2300      	movs	r3, #0
 801227a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801227e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012282:	460b      	mov	r3, r1
 8012284:	4313      	orrs	r3, r2
 8012286:	d055      	beq.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801228c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012290:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012294:	d033      	beq.n	80122fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8012296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801229a:	d82c      	bhi.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801229c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122a0:	d02f      	beq.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80122a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122a6:	d826      	bhi.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80122a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80122ac:	d02b      	beq.n	8012306 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80122ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80122b2:	d820      	bhi.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80122b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80122b8:	d012      	beq.n	80122e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80122ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80122be:	d81a      	bhi.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d022      	beq.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80122c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122c8:	d115      	bne.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80122ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80122ce:	3308      	adds	r3, #8
 80122d0:	2101      	movs	r1, #1
 80122d2:	4618      	mov	r0, r3
 80122d4:	f002 f878 	bl	80143c8 <RCCEx_PLL2_Config>
 80122d8:	4603      	mov	r3, r0
 80122da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80122de:	e015      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80122e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80122e4:	3328      	adds	r3, #40	@ 0x28
 80122e6:	2101      	movs	r1, #1
 80122e8:	4618      	mov	r0, r3
 80122ea:	f002 f91f 	bl	801452c <RCCEx_PLL3_Config>
 80122ee:	4603      	mov	r3, r0
 80122f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80122f4:	e00a      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80122f6:	2301      	movs	r3, #1
 80122f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80122fc:	e006      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80122fe:	bf00      	nop
 8012300:	e004      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012302:	bf00      	nop
 8012304:	e002      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012306:	bf00      	nop
 8012308:	e000      	b.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801230a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801230c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10b      	bne.n	801232c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012314:	4ba3      	ldr	r3, [pc, #652]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012318:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801231c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012324:	4a9f      	ldr	r2, [pc, #636]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012326:	430b      	orrs	r3, r1
 8012328:	6593      	str	r3, [r2, #88]	@ 0x58
 801232a:	e003      	b.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801232c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012344:	2300      	movs	r3, #0
 8012346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801234a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801234e:	460b      	mov	r3, r1
 8012350:	4313      	orrs	r3, r2
 8012352:	d037      	beq.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801235a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801235e:	d00e      	beq.n	801237e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8012360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012364:	d816      	bhi.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8012366:	2b00      	cmp	r3, #0
 8012368:	d018      	beq.n	801239c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801236a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801236e:	d111      	bne.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012370:	4b8c      	ldr	r3, [pc, #560]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012374:	4a8b      	ldr	r2, [pc, #556]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801237a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801237c:	e00f      	b.n	801239e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801237e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012382:	3308      	adds	r3, #8
 8012384:	2101      	movs	r1, #1
 8012386:	4618      	mov	r0, r3
 8012388:	f002 f81e 	bl	80143c8 <RCCEx_PLL2_Config>
 801238c:	4603      	mov	r3, r0
 801238e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012392:	e004      	b.n	801239e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012394:	2301      	movs	r3, #1
 8012396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801239a:	e000      	b.n	801239e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801239c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801239e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10a      	bne.n	80123bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80123a6:	4b7f      	ldr	r3, [pc, #508]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80123a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80123ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80123b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123b4:	4a7b      	ldr	r2, [pc, #492]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80123b6:	430b      	orrs	r3, r1
 80123b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80123ba:	e003      	b.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80123c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80123c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80123d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80123d4:	2300      	movs	r3, #0
 80123d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80123da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80123de:	460b      	mov	r3, r1
 80123e0:	4313      	orrs	r3, r2
 80123e2:	d039      	beq.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80123e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80123e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d81c      	bhi.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80123ee:	a201      	add	r2, pc, #4	@ (adr r2, 80123f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80123f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123f4:	08012431 	.word	0x08012431
 80123f8:	08012405 	.word	0x08012405
 80123fc:	08012413 	.word	0x08012413
 8012400:	08012431 	.word	0x08012431
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012404:	4b67      	ldr	r3, [pc, #412]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012408:	4a66      	ldr	r2, [pc, #408]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801240a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801240e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012410:	e00f      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012416:	3308      	adds	r3, #8
 8012418:	2102      	movs	r1, #2
 801241a:	4618      	mov	r0, r3
 801241c:	f001 ffd4 	bl	80143c8 <RCCEx_PLL2_Config>
 8012420:	4603      	mov	r3, r0
 8012422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012426:	e004      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012428:	2301      	movs	r3, #1
 801242a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801242e:	e000      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8012430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012436:	2b00      	cmp	r3, #0
 8012438:	d10a      	bne.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801243a:	4b5a      	ldr	r3, [pc, #360]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801243e:	f023 0103 	bic.w	r1, r3, #3
 8012442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012448:	4a56      	ldr	r2, [pc, #344]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801244a:	430b      	orrs	r3, r1
 801244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801244e:	e003      	b.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012460:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012468:	2300      	movs	r3, #0
 801246a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801246e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012472:	460b      	mov	r3, r1
 8012474:	4313      	orrs	r3, r2
 8012476:	f000 809f 	beq.w	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801247a:	4b4b      	ldr	r3, [pc, #300]	@ (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a4a      	ldr	r2, [pc, #296]	@ (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8012480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012486:	f7fb fcfd 	bl	800de84 <HAL_GetTick>
 801248a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801248e:	e00b      	b.n	80124a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012490:	f7fb fcf8 	bl	800de84 <HAL_GetTick>
 8012494:	4602      	mov	r2, r0
 8012496:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	2b64      	cmp	r3, #100	@ 0x64
 801249e:	d903      	bls.n	80124a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80124a0:	2303      	movs	r3, #3
 80124a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80124a6:	e005      	b.n	80124b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80124a8:	4b3f      	ldr	r3, [pc, #252]	@ (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d0ed      	beq.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80124b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d179      	bne.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80124bc:	4b39      	ldr	r3, [pc, #228]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80124c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80124c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80124c8:	4053      	eors	r3, r2
 80124ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d015      	beq.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80124d2:	4b34      	ldr	r3, [pc, #208]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80124da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80124de:	4b31      	ldr	r3, [pc, #196]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124e2:	4a30      	ldr	r2, [pc, #192]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80124e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80124ea:	4b2e      	ldr	r3, [pc, #184]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124ee:	4a2d      	ldr	r2, [pc, #180]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80124f6:	4a2b      	ldr	r2, [pc, #172]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80124f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80124fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80124fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801250a:	d118      	bne.n	801253e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801250c:	f7fb fcba 	bl	800de84 <HAL_GetTick>
 8012510:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012514:	e00d      	b.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012516:	f7fb fcb5 	bl	800de84 <HAL_GetTick>
 801251a:	4602      	mov	r2, r0
 801251c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012520:	1ad2      	subs	r2, r2, r3
 8012522:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012526:	429a      	cmp	r2, r3
 8012528:	d903      	bls.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801252a:	2303      	movs	r3, #3
 801252c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8012530:	e005      	b.n	801253e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012532:	4b1c      	ldr	r3, [pc, #112]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012536:	f003 0302 	and.w	r3, r3, #2
 801253a:	2b00      	cmp	r3, #0
 801253c:	d0eb      	beq.n	8012516 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801253e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012542:	2b00      	cmp	r3, #0
 8012544:	d129      	bne.n	801259a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801254a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801254e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012556:	d10e      	bne.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8012558:	4b12      	ldr	r3, [pc, #72]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801255a:	691b      	ldr	r3, [r3, #16]
 801255c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012568:	091a      	lsrs	r2, r3, #4
 801256a:	4b10      	ldr	r3, [pc, #64]	@ (80125ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801256c:	4013      	ands	r3, r2
 801256e:	4a0d      	ldr	r2, [pc, #52]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012570:	430b      	orrs	r3, r1
 8012572:	6113      	str	r3, [r2, #16]
 8012574:	e005      	b.n	8012582 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8012576:	4b0b      	ldr	r3, [pc, #44]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	4a0a      	ldr	r2, [pc, #40]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801257c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012580:	6113      	str	r3, [r2, #16]
 8012582:	4b08      	ldr	r3, [pc, #32]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012584:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801258a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801258e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012592:	4a04      	ldr	r2, [pc, #16]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012594:	430b      	orrs	r3, r1
 8012596:	6713      	str	r3, [r2, #112]	@ 0x70
 8012598:	e00e      	b.n	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801259a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801259e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80125a2:	e009      	b.n	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80125a4:	58024400 	.word	0x58024400
 80125a8:	58024800 	.word	0x58024800
 80125ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80125b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80125b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	f002 0301 	and.w	r3, r2, #1
 80125c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80125c8:	2300      	movs	r3, #0
 80125ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80125ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80125d2:	460b      	mov	r3, r1
 80125d4:	4313      	orrs	r3, r2
 80125d6:	f000 8089 	beq.w	80126ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80125da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80125de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80125e0:	2b28      	cmp	r3, #40	@ 0x28
 80125e2:	d86b      	bhi.n	80126bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80125e4:	a201      	add	r2, pc, #4	@ (adr r2, 80125ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80125e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ea:	bf00      	nop
 80125ec:	080126c5 	.word	0x080126c5
 80125f0:	080126bd 	.word	0x080126bd
 80125f4:	080126bd 	.word	0x080126bd
 80125f8:	080126bd 	.word	0x080126bd
 80125fc:	080126bd 	.word	0x080126bd
 8012600:	080126bd 	.word	0x080126bd
 8012604:	080126bd 	.word	0x080126bd
 8012608:	080126bd 	.word	0x080126bd
 801260c:	08012691 	.word	0x08012691
 8012610:	080126bd 	.word	0x080126bd
 8012614:	080126bd 	.word	0x080126bd
 8012618:	080126bd 	.word	0x080126bd
 801261c:	080126bd 	.word	0x080126bd
 8012620:	080126bd 	.word	0x080126bd
 8012624:	080126bd 	.word	0x080126bd
 8012628:	080126bd 	.word	0x080126bd
 801262c:	080126a7 	.word	0x080126a7
 8012630:	080126bd 	.word	0x080126bd
 8012634:	080126bd 	.word	0x080126bd
 8012638:	080126bd 	.word	0x080126bd
 801263c:	080126bd 	.word	0x080126bd
 8012640:	080126bd 	.word	0x080126bd
 8012644:	080126bd 	.word	0x080126bd
 8012648:	080126bd 	.word	0x080126bd
 801264c:	080126c5 	.word	0x080126c5
 8012650:	080126bd 	.word	0x080126bd
 8012654:	080126bd 	.word	0x080126bd
 8012658:	080126bd 	.word	0x080126bd
 801265c:	080126bd 	.word	0x080126bd
 8012660:	080126bd 	.word	0x080126bd
 8012664:	080126bd 	.word	0x080126bd
 8012668:	080126bd 	.word	0x080126bd
 801266c:	080126c5 	.word	0x080126c5
 8012670:	080126bd 	.word	0x080126bd
 8012674:	080126bd 	.word	0x080126bd
 8012678:	080126bd 	.word	0x080126bd
 801267c:	080126bd 	.word	0x080126bd
 8012680:	080126bd 	.word	0x080126bd
 8012684:	080126bd 	.word	0x080126bd
 8012688:	080126bd 	.word	0x080126bd
 801268c:	080126c5 	.word	0x080126c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012694:	3308      	adds	r3, #8
 8012696:	2101      	movs	r1, #1
 8012698:	4618      	mov	r0, r3
 801269a:	f001 fe95 	bl	80143c8 <RCCEx_PLL2_Config>
 801269e:	4603      	mov	r3, r0
 80126a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80126a4:	e00f      	b.n	80126c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80126a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80126aa:	3328      	adds	r3, #40	@ 0x28
 80126ac:	2101      	movs	r1, #1
 80126ae:	4618      	mov	r0, r3
 80126b0:	f001 ff3c 	bl	801452c <RCCEx_PLL3_Config>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80126ba:	e004      	b.n	80126c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126bc:	2301      	movs	r3, #1
 80126be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80126c2:	e000      	b.n	80126c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80126c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d10a      	bne.n	80126e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80126ce:	4bbf      	ldr	r3, [pc, #764]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80126d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80126d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80126da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80126dc:	4abb      	ldr	r2, [pc, #748]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80126de:	430b      	orrs	r3, r1
 80126e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80126e2:	e003      	b.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80126e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80126ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80126f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f4:	f002 0302 	and.w	r3, r2, #2
 80126f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80126fc:	2300      	movs	r3, #0
 80126fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012702:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012706:	460b      	mov	r3, r1
 8012708:	4313      	orrs	r3, r2
 801270a:	d041      	beq.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801270c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012712:	2b05      	cmp	r3, #5
 8012714:	d824      	bhi.n	8012760 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8012716:	a201      	add	r2, pc, #4	@ (adr r2, 801271c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8012718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801271c:	08012769 	.word	0x08012769
 8012720:	08012735 	.word	0x08012735
 8012724:	0801274b 	.word	0x0801274b
 8012728:	08012769 	.word	0x08012769
 801272c:	08012769 	.word	0x08012769
 8012730:	08012769 	.word	0x08012769
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012738:	3308      	adds	r3, #8
 801273a:	2101      	movs	r1, #1
 801273c:	4618      	mov	r0, r3
 801273e:	f001 fe43 	bl	80143c8 <RCCEx_PLL2_Config>
 8012742:	4603      	mov	r3, r0
 8012744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012748:	e00f      	b.n	801276a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801274a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801274e:	3328      	adds	r3, #40	@ 0x28
 8012750:	2101      	movs	r1, #1
 8012752:	4618      	mov	r0, r3
 8012754:	f001 feea 	bl	801452c <RCCEx_PLL3_Config>
 8012758:	4603      	mov	r3, r0
 801275a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801275e:	e004      	b.n	801276a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012760:	2301      	movs	r3, #1
 8012762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012766:	e000      	b.n	801276a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8012768:	bf00      	nop
    }

    if (ret == HAL_OK)
 801276a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801276e:	2b00      	cmp	r3, #0
 8012770:	d10a      	bne.n	8012788 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012772:	4b96      	ldr	r3, [pc, #600]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012776:	f023 0107 	bic.w	r1, r3, #7
 801277a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801277e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012780:	4a92      	ldr	r2, [pc, #584]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012782:	430b      	orrs	r3, r1
 8012784:	6553      	str	r3, [r2, #84]	@ 0x54
 8012786:	e003      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801278c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	f002 0304 	and.w	r3, r2, #4
 801279c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80127a0:	2300      	movs	r3, #0
 80127a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80127a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80127aa:	460b      	mov	r3, r1
 80127ac:	4313      	orrs	r3, r2
 80127ae:	d044      	beq.n	801283a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80127b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80127b8:	2b05      	cmp	r3, #5
 80127ba:	d825      	bhi.n	8012808 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80127bc:	a201      	add	r2, pc, #4	@ (adr r2, 80127c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80127be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c2:	bf00      	nop
 80127c4:	08012811 	.word	0x08012811
 80127c8:	080127dd 	.word	0x080127dd
 80127cc:	080127f3 	.word	0x080127f3
 80127d0:	08012811 	.word	0x08012811
 80127d4:	08012811 	.word	0x08012811
 80127d8:	08012811 	.word	0x08012811
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80127dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127e0:	3308      	adds	r3, #8
 80127e2:	2101      	movs	r1, #1
 80127e4:	4618      	mov	r0, r3
 80127e6:	f001 fdef 	bl	80143c8 <RCCEx_PLL2_Config>
 80127ea:	4603      	mov	r3, r0
 80127ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80127f0:	e00f      	b.n	8012812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80127f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127f6:	3328      	adds	r3, #40	@ 0x28
 80127f8:	2101      	movs	r1, #1
 80127fa:	4618      	mov	r0, r3
 80127fc:	f001 fe96 	bl	801452c <RCCEx_PLL3_Config>
 8012800:	4603      	mov	r3, r0
 8012802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012806:	e004      	b.n	8012812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012808:	2301      	movs	r3, #1
 801280a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801280e:	e000      	b.n	8012812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8012810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10b      	bne.n	8012832 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801281a:	4b6c      	ldr	r3, [pc, #432]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801281e:	f023 0107 	bic.w	r1, r3, #7
 8012822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801282a:	4a68      	ldr	r2, [pc, #416]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801282c:	430b      	orrs	r3, r1
 801282e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012830:	e003      	b.n	801283a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801283a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012842:	f002 0320 	and.w	r3, r2, #32
 8012846:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801284a:	2300      	movs	r3, #0
 801284c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012854:	460b      	mov	r3, r1
 8012856:	4313      	orrs	r3, r2
 8012858:	d055      	beq.n	8012906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801285a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012866:	d033      	beq.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8012868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801286c:	d82c      	bhi.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012872:	d02f      	beq.n	80128d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8012874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012878:	d826      	bhi.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801287a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801287e:	d02b      	beq.n	80128d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8012880:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012884:	d820      	bhi.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8012886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801288a:	d012      	beq.n	80128b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801288c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012890:	d81a      	bhi.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8012892:	2b00      	cmp	r3, #0
 8012894:	d022      	beq.n	80128dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8012896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801289a:	d115      	bne.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801289c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128a0:	3308      	adds	r3, #8
 80128a2:	2100      	movs	r1, #0
 80128a4:	4618      	mov	r0, r3
 80128a6:	f001 fd8f 	bl	80143c8 <RCCEx_PLL2_Config>
 80128aa:	4603      	mov	r3, r0
 80128ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80128b0:	e015      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80128b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128b6:	3328      	adds	r3, #40	@ 0x28
 80128b8:	2102      	movs	r1, #2
 80128ba:	4618      	mov	r0, r3
 80128bc:	f001 fe36 	bl	801452c <RCCEx_PLL3_Config>
 80128c0:	4603      	mov	r3, r0
 80128c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80128c6:	e00a      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80128c8:	2301      	movs	r3, #1
 80128ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80128ce:	e006      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80128d0:	bf00      	nop
 80128d2:	e004      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80128d4:	bf00      	nop
 80128d6:	e002      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80128d8:	bf00      	nop
 80128da:	e000      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80128dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d10b      	bne.n	80128fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80128e6:	4b39      	ldr	r3, [pc, #228]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80128e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80128ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128f6:	4a35      	ldr	r2, [pc, #212]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80128f8:	430b      	orrs	r3, r1
 80128fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80128fc:	e003      	b.n	8012906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012916:	2300      	movs	r3, #0
 8012918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801291c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012920:	460b      	mov	r3, r1
 8012922:	4313      	orrs	r3, r2
 8012924:	d058      	beq.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801292a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801292e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012932:	d033      	beq.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8012934:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012938:	d82c      	bhi.n	8012994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801293a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801293e:	d02f      	beq.n	80129a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8012940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012944:	d826      	bhi.n	8012994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8012946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801294a:	d02b      	beq.n	80129a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801294c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012950:	d820      	bhi.n	8012994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8012952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012956:	d012      	beq.n	801297e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8012958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801295c:	d81a      	bhi.n	8012994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801295e:	2b00      	cmp	r3, #0
 8012960:	d022      	beq.n	80129a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8012962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012966:	d115      	bne.n	8012994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801296c:	3308      	adds	r3, #8
 801296e:	2100      	movs	r1, #0
 8012970:	4618      	mov	r0, r3
 8012972:	f001 fd29 	bl	80143c8 <RCCEx_PLL2_Config>
 8012976:	4603      	mov	r3, r0
 8012978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801297c:	e015      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801297e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012982:	3328      	adds	r3, #40	@ 0x28
 8012984:	2102      	movs	r1, #2
 8012986:	4618      	mov	r0, r3
 8012988:	f001 fdd0 	bl	801452c <RCCEx_PLL3_Config>
 801298c:	4603      	mov	r3, r0
 801298e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012992:	e00a      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012994:	2301      	movs	r3, #1
 8012996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801299a:	e006      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801299c:	bf00      	nop
 801299e:	e004      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80129a0:	bf00      	nop
 80129a2:	e002      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80129a4:	bf00      	nop
 80129a6:	e000      	b.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80129a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10e      	bne.n	80129d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80129b2:	4b06      	ldr	r3, [pc, #24]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80129b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80129ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80129c2:	4a02      	ldr	r2, [pc, #8]	@ (80129cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80129c4:	430b      	orrs	r3, r1
 80129c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80129c8:	e006      	b.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80129ca:	bf00      	nop
 80129cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80129d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80129d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80129e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80129e8:	2300      	movs	r3, #0
 80129ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80129ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80129f2:	460b      	mov	r3, r1
 80129f4:	4313      	orrs	r3, r2
 80129f6:	d055      	beq.n	8012aa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80129f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a04:	d033      	beq.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8012a06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a0a:	d82c      	bhi.n	8012a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8012a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a10:	d02f      	beq.n	8012a72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8012a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a16:	d826      	bhi.n	8012a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8012a18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012a1c:	d02b      	beq.n	8012a76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8012a1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012a22:	d820      	bhi.n	8012a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8012a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a28:	d012      	beq.n	8012a50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8012a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a2e:	d81a      	bhi.n	8012a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d022      	beq.n	8012a7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8012a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a38:	d115      	bne.n	8012a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a3e:	3308      	adds	r3, #8
 8012a40:	2100      	movs	r1, #0
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 fcc0 	bl	80143c8 <RCCEx_PLL2_Config>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a4e:	e015      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a54:	3328      	adds	r3, #40	@ 0x28
 8012a56:	2102      	movs	r1, #2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f001 fd67 	bl	801452c <RCCEx_PLL3_Config>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a64:	e00a      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a66:	2301      	movs	r3, #1
 8012a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012a6c:	e006      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8012a6e:	bf00      	nop
 8012a70:	e004      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8012a72:	bf00      	nop
 8012a74:	e002      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8012a76:	bf00      	nop
 8012a78:	e000      	b.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8012a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10b      	bne.n	8012a9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012a84:	4ba1      	ldr	r3, [pc, #644]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a94:	4a9d      	ldr	r2, [pc, #628]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012a96:	430b      	orrs	r3, r1
 8012a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8012a9a:	e003      	b.n	8012aa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aac:	f002 0308 	and.w	r3, r2, #8
 8012ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012aba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012abe:	460b      	mov	r3, r1
 8012ac0:	4313      	orrs	r3, r2
 8012ac2:	d01e      	beq.n	8012b02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8012ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ad0:	d10c      	bne.n	8012aec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ad6:	3328      	adds	r3, #40	@ 0x28
 8012ad8:	2102      	movs	r1, #2
 8012ada:	4618      	mov	r0, r3
 8012adc:	f001 fd26 	bl	801452c <RCCEx_PLL3_Config>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8012aec:	4b87      	ldr	r3, [pc, #540]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012af0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012afc:	4a83      	ldr	r2, [pc, #524]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012afe:	430b      	orrs	r3, r1
 8012b00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0a:	f002 0310 	and.w	r3, r2, #16
 8012b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012b12:	2300      	movs	r3, #0
 8012b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	d01e      	beq.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b2e:	d10c      	bne.n	8012b4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b34:	3328      	adds	r3, #40	@ 0x28
 8012b36:	2102      	movs	r1, #2
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f001 fcf7 	bl	801452c <RCCEx_PLL3_Config>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8012b44:	2301      	movs	r3, #1
 8012b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012b4a:	4b70      	ldr	r3, [pc, #448]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012b5c:	430b      	orrs	r3, r1
 8012b5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b70:	2300      	movs	r3, #0
 8012b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	d03e      	beq.n	8012bfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b8c:	d022      	beq.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8012b8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b92:	d81b      	bhi.n	8012bcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d003      	beq.n	8012ba0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8012b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b9c:	d00b      	beq.n	8012bb6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8012b9e:	e015      	b.n	8012bcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f001 fc0d 	bl	80143c8 <RCCEx_PLL2_Config>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012bb4:	e00f      	b.n	8012bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bba:	3328      	adds	r3, #40	@ 0x28
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f001 fcb4 	bl	801452c <RCCEx_PLL3_Config>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012bca:	e004      	b.n	8012bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012bd2:	e000      	b.n	8012bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8012bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d10b      	bne.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012bde:	4b4b      	ldr	r3, [pc, #300]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012be2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012bee:	4a47      	ldr	r2, [pc, #284]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012bf0:	430b      	orrs	r3, r1
 8012bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8012bf4:	e003      	b.n	8012bfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012c10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012c14:	460b      	mov	r3, r1
 8012c16:	4313      	orrs	r3, r2
 8012c18:	d03b      	beq.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012c26:	d01f      	beq.n	8012c68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8012c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012c2c:	d818      	bhi.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8012c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c32:	d003      	beq.n	8012c3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8012c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012c38:	d007      	beq.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8012c3a:	e011      	b.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c3c:	4b33      	ldr	r3, [pc, #204]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c40:	4a32      	ldr	r2, [pc, #200]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c48:	e00f      	b.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c4e:	3328      	adds	r3, #40	@ 0x28
 8012c50:	2101      	movs	r1, #1
 8012c52:	4618      	mov	r0, r3
 8012c54:	f001 fc6a 	bl	801452c <RCCEx_PLL3_Config>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c5e:	e004      	b.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012c66:	e000      	b.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8012c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d10b      	bne.n	8012c8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012c72:	4b26      	ldr	r3, [pc, #152]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012c82:	4a22      	ldr	r2, [pc, #136]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012c84:	430b      	orrs	r3, r1
 8012c86:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c88:	e003      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012c9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	677b      	str	r3, [r7, #116]	@ 0x74
 8012ca4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4313      	orrs	r3, r2
 8012cac:	d034      	beq.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d003      	beq.n	8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8012cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cbc:	d007      	beq.n	8012cce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8012cbe:	e011      	b.n	8012ce4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cc0:	4b12      	ldr	r3, [pc, #72]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cc4:	4a11      	ldr	r2, [pc, #68]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012ccc:	e00e      	b.n	8012cec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012cd2:	3308      	adds	r3, #8
 8012cd4:	2102      	movs	r1, #2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f001 fb76 	bl	80143c8 <RCCEx_PLL2_Config>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012ce2:	e003      	b.n	8012cec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d10d      	bne.n	8012d10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012cf4:	4b05      	ldr	r3, [pc, #20]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cf8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d02:	4a02      	ldr	r2, [pc, #8]	@ (8012d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8012d04:	430b      	orrs	r3, r1
 8012d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012d08:	e006      	b.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8012d0a:	bf00      	nop
 8012d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d26:	2300      	movs	r3, #0
 8012d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012d2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4313      	orrs	r3, r2
 8012d32:	d00c      	beq.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d38:	3328      	adds	r3, #40	@ 0x28
 8012d3a:	2102      	movs	r1, #2
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f001 fbf5 	bl	801452c <RCCEx_PLL3_Config>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d002      	beq.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012d5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8012d60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012d64:	460b      	mov	r3, r1
 8012d66:	4313      	orrs	r3, r2
 8012d68:	d038      	beq.n	8012ddc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d76:	d018      	beq.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8012d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d7c:	d811      	bhi.n	8012da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8012d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d82:	d014      	beq.n	8012dae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8012d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d88:	d80b      	bhi.n	8012da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d011      	beq.n	8012db2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8012d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d92:	d106      	bne.n	8012da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d94:	4bc3      	ldr	r3, [pc, #780]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d98:	4ac2      	ldr	r2, [pc, #776]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012da0:	e008      	b.n	8012db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012da2:	2301      	movs	r3, #1
 8012da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012da8:	e004      	b.n	8012db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8012daa:	bf00      	nop
 8012dac:	e002      	b.n	8012db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8012dae:	bf00      	nop
 8012db0:	e000      	b.n	8012db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8012db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d10b      	bne.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012dc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012dcc:	4ab5      	ldr	r2, [pc, #724]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012dce:	430b      	orrs	r3, r1
 8012dd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8012dd2:	e003      	b.n	8012ddc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012de8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012dea:	2300      	movs	r3, #0
 8012dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012dee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012df2:	460b      	mov	r3, r1
 8012df4:	4313      	orrs	r3, r2
 8012df6:	d009      	beq.n	8012e0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012df8:	4baa      	ldr	r3, [pc, #680]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e06:	4aa7      	ldr	r2, [pc, #668]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e08:	430b      	orrs	r3, r1
 8012e0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8012e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8012e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012e22:	460b      	mov	r3, r1
 8012e24:	4313      	orrs	r3, r2
 8012e26:	d00a      	beq.n	8012e3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8012e28:	4b9e      	ldr	r3, [pc, #632]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e2a:	691b      	ldr	r3, [r3, #16]
 8012e2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8012e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012e38:	4a9a      	ldr	r2, [pc, #616]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e3a:	430b      	orrs	r3, r1
 8012e3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012e54:	460b      	mov	r3, r1
 8012e56:	4313      	orrs	r3, r2
 8012e58:	d009      	beq.n	8012e6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012e5a:	4b92      	ldr	r3, [pc, #584]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e68:	4a8e      	ldr	r2, [pc, #568]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e6a:	430b      	orrs	r3, r1
 8012e6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012e84:	460b      	mov	r3, r1
 8012e86:	4313      	orrs	r3, r2
 8012e88:	d00e      	beq.n	8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012e8a:	4b86      	ldr	r3, [pc, #536]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e8c:	691b      	ldr	r3, [r3, #16]
 8012e8e:	4a85      	ldr	r2, [pc, #532]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012e94:	6113      	str	r3, [r2, #16]
 8012e96:	4b83      	ldr	r3, [pc, #524]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012e98:	6919      	ldr	r1, [r3, #16]
 8012e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8012ea2:	4a80      	ldr	r2, [pc, #512]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012ea4:	430b      	orrs	r3, r1
 8012ea6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012eba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	d009      	beq.n	8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012ec4:	4b77      	ldr	r3, [pc, #476]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ec8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ed2:	4a74      	ldr	r2, [pc, #464]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8012eea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012eee:	460b      	mov	r3, r1
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	d00a      	beq.n	8012f0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ef8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012f04:	4a67      	ldr	r2, [pc, #412]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8012f06:	430b      	orrs	r3, r1
 8012f08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f12:	2100      	movs	r1, #0
 8012f14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012f16:	f003 0301 	and.w	r3, r3, #1
 8012f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012f20:	460b      	mov	r3, r1
 8012f22:	4313      	orrs	r3, r2
 8012f24:	d011      	beq.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f2a:	3308      	adds	r3, #8
 8012f2c:	2100      	movs	r1, #0
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f001 fa4a 	bl	80143c8 <RCCEx_PLL2_Config>
 8012f34:	4603      	mov	r3, r0
 8012f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8012f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d003      	beq.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f52:	2100      	movs	r1, #0
 8012f54:	6239      	str	r1, [r7, #32]
 8012f56:	f003 0302 	and.w	r3, r3, #2
 8012f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012f60:	460b      	mov	r3, r1
 8012f62:	4313      	orrs	r3, r2
 8012f64:	d011      	beq.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f6a:	3308      	adds	r3, #8
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f001 fa2a 	bl	80143c8 <RCCEx_PLL2_Config>
 8012f74:	4603      	mov	r3, r0
 8012f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8012f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d003      	beq.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	2100      	movs	r1, #0
 8012f94:	61b9      	str	r1, [r7, #24]
 8012f96:	f003 0304 	and.w	r3, r3, #4
 8012f9a:	61fb      	str	r3, [r7, #28]
 8012f9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	d011      	beq.n	8012fca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012faa:	3308      	adds	r3, #8
 8012fac:	2102      	movs	r1, #2
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f001 fa0a 	bl	80143c8 <RCCEx_PLL2_Config>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8012fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d003      	beq.n	8012fca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd2:	2100      	movs	r1, #0
 8012fd4:	6139      	str	r1, [r7, #16]
 8012fd6:	f003 0308 	and.w	r3, r3, #8
 8012fda:	617b      	str	r3, [r7, #20]
 8012fdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	d011      	beq.n	801300a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fea:	3328      	adds	r3, #40	@ 0x28
 8012fec:	2100      	movs	r1, #0
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f001 fa9c 	bl	801452c <RCCEx_PLL3_Config>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8012ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d003      	beq.n	801300a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	2100      	movs	r1, #0
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	f003 0310 	and.w	r3, r3, #16
 801301a:	60fb      	str	r3, [r7, #12]
 801301c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013020:	460b      	mov	r3, r1
 8013022:	4313      	orrs	r3, r2
 8013024:	d011      	beq.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801302a:	3328      	adds	r3, #40	@ 0x28
 801302c:	2101      	movs	r1, #1
 801302e:	4618      	mov	r0, r3
 8013030:	f001 fa7c 	bl	801452c <RCCEx_PLL3_Config>
 8013034:	4603      	mov	r3, r0
 8013036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801303a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801303e:	2b00      	cmp	r3, #0
 8013040:	d003      	beq.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	2100      	movs	r1, #0
 8013054:	6039      	str	r1, [r7, #0]
 8013056:	f003 0320 	and.w	r3, r3, #32
 801305a:	607b      	str	r3, [r7, #4]
 801305c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013060:	460b      	mov	r3, r1
 8013062:	4313      	orrs	r3, r2
 8013064:	d011      	beq.n	801308a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801306a:	3328      	adds	r3, #40	@ 0x28
 801306c:	2102      	movs	r1, #2
 801306e:	4618      	mov	r0, r3
 8013070:	f001 fa5c 	bl	801452c <RCCEx_PLL3_Config>
 8013074:	4603      	mov	r3, r0
 8013076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801307a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801307e:	2b00      	cmp	r3, #0
 8013080:	d003      	beq.n	801308a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801308a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	e000      	b.n	8013098 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8013096:	2301      	movs	r3, #1
}
 8013098:	4618      	mov	r0, r3
 801309a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801309e:	46bd      	mov	sp, r7
 80130a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130a4:	58024400 	.word	0x58024400

080130a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b090      	sub	sp, #64	@ 0x40
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80130b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130b6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80130ba:	430b      	orrs	r3, r1
 80130bc:	f040 8094 	bne.w	80131e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80130c0:	4b9e      	ldr	r3, [pc, #632]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80130c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130c4:	f003 0307 	and.w	r3, r3, #7
 80130c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80130ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130cc:	2b04      	cmp	r3, #4
 80130ce:	f200 8087 	bhi.w	80131e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80130d2:	a201      	add	r2, pc, #4	@ (adr r2, 80130d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80130d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d8:	080130ed 	.word	0x080130ed
 80130dc:	08013115 	.word	0x08013115
 80130e0:	0801313d 	.word	0x0801313d
 80130e4:	080131d9 	.word	0x080131d9
 80130e8:	08013165 	.word	0x08013165
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80130ec:	4b93      	ldr	r3, [pc, #588]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80130f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130f8:	d108      	bne.n	801310c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80130fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80130fe:	4618      	mov	r0, r3
 8013100:	f001 f810 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013108:	f000 bd45 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801310c:	2300      	movs	r3, #0
 801310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013110:	f000 bd41 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013114:	4b89      	ldr	r3, [pc, #548]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801311c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013120:	d108      	bne.n	8013134 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013122:	f107 0318 	add.w	r3, r7, #24
 8013126:	4618      	mov	r0, r3
 8013128:	f000 fd54 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013130:	f000 bd31 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013134:	2300      	movs	r3, #0
 8013136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013138:	f000 bd2d 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801313c:	4b7f      	ldr	r3, [pc, #508]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013148:	d108      	bne.n	801315c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	4618      	mov	r0, r3
 8013150:	f000 fe94 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013158:	f000 bd1d 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013160:	f000 bd19 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013164:	4b75      	ldr	r3, [pc, #468]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801316c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801316e:	4b73      	ldr	r3, [pc, #460]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f003 0304 	and.w	r3, r3, #4
 8013176:	2b04      	cmp	r3, #4
 8013178:	d10c      	bne.n	8013194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013180:	4b6e      	ldr	r3, [pc, #440]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	08db      	lsrs	r3, r3, #3
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	4a6d      	ldr	r2, [pc, #436]	@ (8013340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801318c:	fa22 f303 	lsr.w	r3, r2, r3
 8013190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013192:	e01f      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013194:	4b69      	ldr	r3, [pc, #420]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801319c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131a0:	d106      	bne.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80131a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80131a8:	d102      	bne.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80131aa:	4b66      	ldr	r3, [pc, #408]	@ (8013344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80131ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ae:	e011      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80131b0:	4b62      	ldr	r3, [pc, #392]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80131bc:	d106      	bne.n	80131cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80131be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80131c4:	d102      	bne.n	80131cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80131c6:	4b60      	ldr	r3, [pc, #384]	@ (8013348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80131c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ca:	e003      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80131cc:	2300      	movs	r3, #0
 80131ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80131d0:	f000 bce1 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80131d4:	f000 bcdf 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80131d8:	4b5c      	ldr	r3, [pc, #368]	@ (801334c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80131da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131dc:	f000 bcdb 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131e4:	f000 bcd7 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80131e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131ec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80131f0:	430b      	orrs	r3, r1
 80131f2:	f040 80ad 	bne.w	8013350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80131f6:	4b51      	ldr	r3, [pc, #324]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80131f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131fa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80131fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013206:	d056      	beq.n	80132b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8013208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801320a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801320e:	f200 8090 	bhi.w	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013214:	2bc0      	cmp	r3, #192	@ 0xc0
 8013216:	f000 8088 	beq.w	801332a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321c:	2bc0      	cmp	r3, #192	@ 0xc0
 801321e:	f200 8088 	bhi.w	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013224:	2b80      	cmp	r3, #128	@ 0x80
 8013226:	d032      	beq.n	801328e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8013228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801322a:	2b80      	cmp	r3, #128	@ 0x80
 801322c:	f200 8081 	bhi.w	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013232:	2b00      	cmp	r3, #0
 8013234:	d003      	beq.n	801323e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8013236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013238:	2b40      	cmp	r3, #64	@ 0x40
 801323a:	d014      	beq.n	8013266 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801323c:	e079      	b.n	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801323e:	4b3f      	ldr	r3, [pc, #252]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801324a:	d108      	bne.n	801325e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801324c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013250:	4618      	mov	r0, r3
 8013252:	f000 ff67 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801325a:	f000 bc9c 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013262:	f000 bc98 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013266:	4b35      	ldr	r3, [pc, #212]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013272:	d108      	bne.n	8013286 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013274:	f107 0318 	add.w	r3, r7, #24
 8013278:	4618      	mov	r0, r3
 801327a:	f000 fcab 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013282:	f000 bc88 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013286:	2300      	movs	r3, #0
 8013288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801328a:	f000 bc84 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801328e:	4b2b      	ldr	r3, [pc, #172]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801329a:	d108      	bne.n	80132ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801329c:	f107 030c 	add.w	r3, r7, #12
 80132a0:	4618      	mov	r0, r3
 80132a2:	f000 fdeb 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80132aa:	f000 bc74 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132b2:	f000 bc70 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80132b6:	4b21      	ldr	r3, [pc, #132]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80132b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80132be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80132c0:	4b1e      	ldr	r3, [pc, #120]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f003 0304 	and.w	r3, r3, #4
 80132c8:	2b04      	cmp	r3, #4
 80132ca:	d10c      	bne.n	80132e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80132cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d109      	bne.n	80132e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80132d2:	4b1a      	ldr	r3, [pc, #104]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	08db      	lsrs	r3, r3, #3
 80132d8:	f003 0303 	and.w	r3, r3, #3
 80132dc:	4a18      	ldr	r2, [pc, #96]	@ (8013340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80132de:	fa22 f303 	lsr.w	r3, r2, r3
 80132e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e4:	e01f      	b.n	8013326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80132e6:	4b15      	ldr	r3, [pc, #84]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132f2:	d106      	bne.n	8013302 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80132f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132fa:	d102      	bne.n	8013302 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80132fc:	4b11      	ldr	r3, [pc, #68]	@ (8013344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80132fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013300:	e011      	b.n	8013326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013302:	4b0e      	ldr	r3, [pc, #56]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801330a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801330e:	d106      	bne.n	801331e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8013310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013316:	d102      	bne.n	801331e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013318:	4b0b      	ldr	r3, [pc, #44]	@ (8013348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801331c:	e003      	b.n	8013326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013322:	f000 bc38 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013326:	f000 bc36 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801332a:	4b08      	ldr	r3, [pc, #32]	@ (801334c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801332c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801332e:	f000 bc32 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8013332:	2300      	movs	r3, #0
 8013334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013336:	f000 bc2e 	b.w	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801333a:	bf00      	nop
 801333c:	58024400 	.word	0x58024400
 8013340:	03d09000 	.word	0x03d09000
 8013344:	003d0900 	.word	0x003d0900
 8013348:	017d7840 	.word	0x017d7840
 801334c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013354:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013358:	430b      	orrs	r3, r1
 801335a:	f040 809c 	bne.w	8013496 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801335e:	4b9e      	ldr	r3, [pc, #632]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013362:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8013366:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801336e:	d054      	beq.n	801341a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8013370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013372:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013376:	f200 808b 	bhi.w	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013380:	f000 8083 	beq.w	801348a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8013384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013386:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801338a:	f200 8081 	bhi.w	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013394:	d02f      	beq.n	80133f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8013396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801339c:	d878      	bhi.n	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80133a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80133aa:	d012      	beq.n	80133d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80133ac:	e070      	b.n	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80133ae:	4b8a      	ldr	r3, [pc, #552]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133ba:	d107      	bne.n	80133cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80133bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 feaf 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80133c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133ca:	e3e4      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133d0:	e3e1      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80133d2:	4b81      	ldr	r3, [pc, #516]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133de:	d107      	bne.n	80133f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133e0:	f107 0318 	add.w	r3, r7, #24
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 fbf5 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133ee:	e3d2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80133f0:	2300      	movs	r3, #0
 80133f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133f4:	e3cf      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80133f6:	4b78      	ldr	r3, [pc, #480]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013402:	d107      	bne.n	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013404:	f107 030c 	add.w	r3, r7, #12
 8013408:	4618      	mov	r0, r3
 801340a:	f000 fd37 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013412:	e3c0      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013418:	e3bd      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801341a:	4b6f      	ldr	r3, [pc, #444]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801341e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013422:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013424:	4b6c      	ldr	r3, [pc, #432]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	f003 0304 	and.w	r3, r3, #4
 801342c:	2b04      	cmp	r3, #4
 801342e:	d10c      	bne.n	801344a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8013430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013432:	2b00      	cmp	r3, #0
 8013434:	d109      	bne.n	801344a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013436:	4b68      	ldr	r3, [pc, #416]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	08db      	lsrs	r3, r3, #3
 801343c:	f003 0303 	and.w	r3, r3, #3
 8013440:	4a66      	ldr	r2, [pc, #408]	@ (80135dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013442:	fa22 f303 	lsr.w	r3, r2, r3
 8013446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013448:	e01e      	b.n	8013488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801344a:	4b63      	ldr	r3, [pc, #396]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013456:	d106      	bne.n	8013466 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8013458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801345a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801345e:	d102      	bne.n	8013466 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013460:	4b5f      	ldr	r3, [pc, #380]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8013462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013464:	e010      	b.n	8013488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013466:	4b5c      	ldr	r3, [pc, #368]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801346e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013472:	d106      	bne.n	8013482 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8013474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801347a:	d102      	bne.n	8013482 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801347c:	4b59      	ldr	r3, [pc, #356]	@ (80135e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013480:	e002      	b.n	8013488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013482:	2300      	movs	r3, #0
 8013484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013486:	e386      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013488:	e385      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801348a:	4b57      	ldr	r3, [pc, #348]	@ (80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801348e:	e382      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8013490:	2300      	movs	r3, #0
 8013492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013494:	e37f      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013496:	e9d7 2300 	ldrd	r2, r3, [r7]
 801349a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801349e:	430b      	orrs	r3, r1
 80134a0:	f040 80a7 	bne.w	80135f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80134a4:	4b4c      	ldr	r3, [pc, #304]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80134a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134a8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80134ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80134ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80134b4:	d055      	beq.n	8013562 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80134b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80134bc:	f200 8096 	bhi.w	80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80134c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80134c6:	f000 8084 	beq.w	80135d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80134ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80134d0:	f200 808c 	bhi.w	80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80134d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80134da:	d030      	beq.n	801353e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80134dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80134e2:	f200 8083 	bhi.w	80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80134e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d004      	beq.n	80134f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80134ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80134f2:	d012      	beq.n	801351a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80134f4:	e07a      	b.n	80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80134f6:	4b38      	ldr	r3, [pc, #224]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013502:	d107      	bne.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013508:	4618      	mov	r0, r3
 801350a:	f000 fe0b 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013512:	e340      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013518:	e33d      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801351a:	4b2f      	ldr	r3, [pc, #188]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013526:	d107      	bne.n	8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013528:	f107 0318 	add.w	r3, r7, #24
 801352c:	4618      	mov	r0, r3
 801352e:	f000 fb51 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013536:	e32e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013538:	2300      	movs	r3, #0
 801353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801353c:	e32b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801353e:	4b26      	ldr	r3, [pc, #152]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801354a:	d107      	bne.n	801355c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801354c:	f107 030c 	add.w	r3, r7, #12
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fc93 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801355a:	e31c      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801355c:	2300      	movs	r3, #0
 801355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013560:	e319      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013562:	4b1d      	ldr	r3, [pc, #116]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801356a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801356c:	4b1a      	ldr	r3, [pc, #104]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f003 0304 	and.w	r3, r3, #4
 8013574:	2b04      	cmp	r3, #4
 8013576:	d10c      	bne.n	8013592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8013578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801357a:	2b00      	cmp	r3, #0
 801357c:	d109      	bne.n	8013592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801357e:	4b16      	ldr	r3, [pc, #88]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	08db      	lsrs	r3, r3, #3
 8013584:	f003 0303 	and.w	r3, r3, #3
 8013588:	4a14      	ldr	r2, [pc, #80]	@ (80135dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801358a:	fa22 f303 	lsr.w	r3, r2, r3
 801358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013590:	e01e      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013592:	4b11      	ldr	r3, [pc, #68]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801359a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801359e:	d106      	bne.n	80135ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80135a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80135a6:	d102      	bne.n	80135ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80135a8:	4b0d      	ldr	r3, [pc, #52]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80135aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ac:	e010      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80135ae:	4b0a      	ldr	r3, [pc, #40]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135ba:	d106      	bne.n	80135ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80135bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135c2:	d102      	bne.n	80135ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80135c4:	4b07      	ldr	r3, [pc, #28]	@ (80135e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80135c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135c8:	e002      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80135ce:	e2e2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80135d0:	e2e1      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80135d2:	4b05      	ldr	r3, [pc, #20]	@ (80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80135d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135d6:	e2de      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80135d8:	58024400 	.word	0x58024400
 80135dc:	03d09000 	.word	0x03d09000
 80135e0:	003d0900 	.word	0x003d0900
 80135e4:	017d7840 	.word	0x017d7840
 80135e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135f0:	e2d1      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80135f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135f6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80135fa:	430b      	orrs	r3, r1
 80135fc:	f040 809c 	bne.w	8013738 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013600:	4b93      	ldr	r3, [pc, #588]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013604:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013608:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013610:	d054      	beq.n	80136bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8013612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013618:	f200 808b 	bhi.w	8013732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801361c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801361e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013622:	f000 8083 	beq.w	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8013626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013628:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801362c:	f200 8081 	bhi.w	8013732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8013630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013636:	d02f      	beq.n	8013698 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8013638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801363a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801363e:	d878      	bhi.n	8013732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8013640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013642:	2b00      	cmp	r3, #0
 8013644:	d004      	beq.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8013646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801364c:	d012      	beq.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801364e:	e070      	b.n	8013732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013650:	4b7f      	ldr	r3, [pc, #508]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801365c:	d107      	bne.n	801366e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801365e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013662:	4618      	mov	r0, r3
 8013664:	f000 fd5e 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801366c:	e293      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013672:	e290      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013674:	4b76      	ldr	r3, [pc, #472]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801367c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013680:	d107      	bne.n	8013692 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013682:	f107 0318 	add.w	r3, r7, #24
 8013686:	4618      	mov	r0, r3
 8013688:	f000 faa4 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013690:	e281      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013696:	e27e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013698:	4b6d      	ldr	r3, [pc, #436]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80136a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136a4:	d107      	bne.n	80136b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136a6:	f107 030c 	add.w	r3, r7, #12
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 fbe6 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136b4:	e26f      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80136b6:	2300      	movs	r3, #0
 80136b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136ba:	e26c      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80136bc:	4b64      	ldr	r3, [pc, #400]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80136be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80136c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80136c6:	4b62      	ldr	r3, [pc, #392]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f003 0304 	and.w	r3, r3, #4
 80136ce:	2b04      	cmp	r3, #4
 80136d0:	d10c      	bne.n	80136ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80136d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d109      	bne.n	80136ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136d8:	4b5d      	ldr	r3, [pc, #372]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	08db      	lsrs	r3, r3, #3
 80136de:	f003 0303 	and.w	r3, r3, #3
 80136e2:	4a5c      	ldr	r2, [pc, #368]	@ (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80136e4:	fa22 f303 	lsr.w	r3, r2, r3
 80136e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136ea:	e01e      	b.n	801372a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80136ec:	4b58      	ldr	r3, [pc, #352]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136f8:	d106      	bne.n	8013708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80136fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013700:	d102      	bne.n	8013708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013702:	4b55      	ldr	r3, [pc, #340]	@ (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8013704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013706:	e010      	b.n	801372a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013708:	4b51      	ldr	r3, [pc, #324]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013714:	d106      	bne.n	8013724 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8013716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801371c:	d102      	bne.n	8013724 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801371e:	4b4f      	ldr	r3, [pc, #316]	@ (801385c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8013720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013722:	e002      	b.n	801372a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013724:	2300      	movs	r3, #0
 8013726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013728:	e235      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801372a:	e234      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801372c:	4b4c      	ldr	r3, [pc, #304]	@ (8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013730:	e231      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8013732:	2300      	movs	r3, #0
 8013734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013736:	e22e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013738:	e9d7 2300 	ldrd	r2, r3, [r7]
 801373c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013740:	430b      	orrs	r3, r1
 8013742:	f040 808f 	bne.w	8013864 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013746:	4b42      	ldr	r3, [pc, #264]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801374a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801374e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013756:	d06b      	beq.n	8013830 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8013758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801375e:	d874      	bhi.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013766:	d056      	beq.n	8013816 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8013768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801376e:	d86c      	bhi.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013772:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013776:	d03b      	beq.n	80137f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8013778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801377e:	d864      	bhi.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013786:	d021      	beq.n	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8013788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801378a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801378e:	d85c      	bhi.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	2b00      	cmp	r3, #0
 8013794:	d004      	beq.n	80137a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8013796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801379c:	d004      	beq.n	80137a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801379e:	e054      	b.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80137a0:	f7fe fa4c 	bl	8011c3c <HAL_RCC_GetPCLK1Freq>
 80137a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80137a6:	e1f6      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80137a8:	4b29      	ldr	r3, [pc, #164]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137b4:	d107      	bne.n	80137c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137b6:	f107 0318 	add.w	r3, r7, #24
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 fa0a 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137c4:	e1e7      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137ca:	e1e4      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80137cc:	4b20      	ldr	r3, [pc, #128]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137d8:	d107      	bne.n	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137da:	f107 030c 	add.w	r3, r7, #12
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 fb4c 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137e8:	e1d5      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137ee:	e1d2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80137f0:	4b17      	ldr	r3, [pc, #92]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	f003 0304 	and.w	r3, r3, #4
 80137f8:	2b04      	cmp	r3, #4
 80137fa:	d109      	bne.n	8013810 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80137fc:	4b14      	ldr	r3, [pc, #80]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	08db      	lsrs	r3, r3, #3
 8013802:	f003 0303 	and.w	r3, r3, #3
 8013806:	4a13      	ldr	r2, [pc, #76]	@ (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8013808:	fa22 f303 	lsr.w	r3, r2, r3
 801380c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801380e:	e1c2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013810:	2300      	movs	r3, #0
 8013812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013814:	e1bf      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013816:	4b0e      	ldr	r3, [pc, #56]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801381e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013822:	d102      	bne.n	801382a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8013824:	4b0c      	ldr	r3, [pc, #48]	@ (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8013826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013828:	e1b5      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801382a:	2300      	movs	r3, #0
 801382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801382e:	e1b2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013830:	4b07      	ldr	r3, [pc, #28]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801383c:	d102      	bne.n	8013844 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801383e:	4b07      	ldr	r3, [pc, #28]	@ (801385c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8013840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013842:	e1a8      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013844:	2300      	movs	r3, #0
 8013846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013848:	e1a5      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801384a:	2300      	movs	r3, #0
 801384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801384e:	e1a2      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013850:	58024400 	.word	0x58024400
 8013854:	03d09000 	.word	0x03d09000
 8013858:	003d0900 	.word	0x003d0900
 801385c:	017d7840 	.word	0x017d7840
 8013860:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013868:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801386c:	430b      	orrs	r3, r1
 801386e:	d173      	bne.n	8013958 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013870:	4b9c      	ldr	r3, [pc, #624]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013878:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801387c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013880:	d02f      	beq.n	80138e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8013882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013888:	d863      	bhi.n	8013952 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801388c:	2b00      	cmp	r3, #0
 801388e:	d004      	beq.n	801389a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8013890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013896:	d012      	beq.n	80138be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8013898:	e05b      	b.n	8013952 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801389a:	4b92      	ldr	r3, [pc, #584]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80138a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80138a6:	d107      	bne.n	80138b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138a8:	f107 0318 	add.w	r3, r7, #24
 80138ac:	4618      	mov	r0, r3
 80138ae:	f000 f991 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138b6:	e16e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80138b8:	2300      	movs	r3, #0
 80138ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138bc:	e16b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80138be:	4b89      	ldr	r3, [pc, #548]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80138c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138ca:	d107      	bne.n	80138dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138cc:	f107 030c 	add.w	r3, r7, #12
 80138d0:	4618      	mov	r0, r3
 80138d2:	f000 fad3 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138da:	e15c      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80138dc:	2300      	movs	r3, #0
 80138de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138e0:	e159      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80138e2:	4b80      	ldr	r3, [pc, #512]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80138e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80138ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80138ec:	4b7d      	ldr	r3, [pc, #500]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f003 0304 	and.w	r3, r3, #4
 80138f4:	2b04      	cmp	r3, #4
 80138f6:	d10c      	bne.n	8013912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80138f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d109      	bne.n	8013912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138fe:	4b79      	ldr	r3, [pc, #484]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	08db      	lsrs	r3, r3, #3
 8013904:	f003 0303 	and.w	r3, r3, #3
 8013908:	4a77      	ldr	r2, [pc, #476]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801390a:	fa22 f303 	lsr.w	r3, r2, r3
 801390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013910:	e01e      	b.n	8013950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013912:	4b74      	ldr	r3, [pc, #464]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801391a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801391e:	d106      	bne.n	801392e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8013920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013926:	d102      	bne.n	801392e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013928:	4b70      	ldr	r3, [pc, #448]	@ (8013aec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801392c:	e010      	b.n	8013950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801392e:	4b6d      	ldr	r3, [pc, #436]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801393a:	d106      	bne.n	801394a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801393e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013942:	d102      	bne.n	801394a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013944:	4b6a      	ldr	r3, [pc, #424]	@ (8013af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8013946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013948:	e002      	b.n	8013950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801394e:	e122      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013950:	e121      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8013952:	2300      	movs	r3, #0
 8013954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013956:	e11e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013958:	e9d7 2300 	ldrd	r2, r3, [r7]
 801395c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013960:	430b      	orrs	r3, r1
 8013962:	d133      	bne.n	80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013964:	4b5f      	ldr	r3, [pc, #380]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801396c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013970:	2b00      	cmp	r3, #0
 8013972:	d004      	beq.n	801397e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8013974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801397a:	d012      	beq.n	80139a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801397c:	e023      	b.n	80139c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801397e:	4b59      	ldr	r3, [pc, #356]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801398a:	d107      	bne.n	801399c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801398c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013990:	4618      	mov	r0, r3
 8013992:	f000 fbc7 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801399a:	e0fc      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801399c:	2300      	movs	r3, #0
 801399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139a0:	e0f9      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80139a2:	4b50      	ldr	r3, [pc, #320]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139ae:	d107      	bne.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139b0:	f107 0318 	add.w	r3, r7, #24
 80139b4:	4618      	mov	r0, r3
 80139b6:	f000 f90d 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80139ba:	6a3b      	ldr	r3, [r7, #32]
 80139bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139be:	e0ea      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80139c0:	2300      	movs	r3, #0
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139c4:	e0e7      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139ca:	e0e4      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80139cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80139d4:	430b      	orrs	r3, r1
 80139d6:	f040 808d 	bne.w	8013af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80139da:	4b42      	ldr	r3, [pc, #264]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80139dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80139de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80139e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80139e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80139ea:	d06b      	beq.n	8013ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80139ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80139f2:	d874      	bhi.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80139f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80139fa:	d056      	beq.n	8013aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80139fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a02:	d86c      	bhi.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8013a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013a0a:	d03b      	beq.n	8013a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8013a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013a12:	d864      	bhi.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8013a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a1a:	d021      	beq.n	8013a60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8013a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a22:	d85c      	bhi.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8013a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d004      	beq.n	8013a34 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a30:	d004      	beq.n	8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8013a32:	e054      	b.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013a34:	f000 f8b8 	bl	8013ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8013a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013a3a:	e0ac      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a3c:	4b29      	ldr	r3, [pc, #164]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a48:	d107      	bne.n	8013a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a4a:	f107 0318 	add.w	r3, r7, #24
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f000 f8c0 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013a54:	69fb      	ldr	r3, [r7, #28]
 8013a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a58:	e09d      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a5e:	e09a      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a60:	4b20      	ldr	r3, [pc, #128]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a6c:	d107      	bne.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a6e:	f107 030c 	add.w	r3, r7, #12
 8013a72:	4618      	mov	r0, r3
 8013a74:	f000 fa02 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a7c:	e08b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a82:	e088      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013a84:	4b17      	ldr	r3, [pc, #92]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f003 0304 	and.w	r3, r3, #4
 8013a8c:	2b04      	cmp	r3, #4
 8013a8e:	d109      	bne.n	8013aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a90:	4b14      	ldr	r3, [pc, #80]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	08db      	lsrs	r3, r3, #3
 8013a96:	f003 0303 	and.w	r3, r3, #3
 8013a9a:	4a13      	ldr	r2, [pc, #76]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8013a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8013aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013aa2:	e078      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aa8:	e075      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ab6:	d102      	bne.n	8013abe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8013ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8013aec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8013aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013abc:	e06b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ac2:	e068      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013ac4:	4b07      	ldr	r3, [pc, #28]	@ (8013ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013ad0:	d102      	bne.n	8013ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8013ad2:	4b07      	ldr	r3, [pc, #28]	@ (8013af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8013ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ad6:	e05e      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013adc:	e05b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ae2:	e058      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013ae4:	58024400 	.word	0x58024400
 8013ae8:	03d09000 	.word	0x03d09000
 8013aec:	003d0900 	.word	0x003d0900
 8013af0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013af8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013afc:	430b      	orrs	r3, r1
 8013afe:	d148      	bne.n	8013b92 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013b00:	4b27      	ldr	r3, [pc, #156]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8013b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013b08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b10:	d02a      	beq.n	8013b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8013b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b18:	d838      	bhi.n	8013b8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d004      	beq.n	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8013b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b26:	d00d      	beq.n	8013b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8013b28:	e030      	b.n	8013b8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b36:	d102      	bne.n	8013b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8013b38:	4b1a      	ldr	r3, [pc, #104]	@ (8013ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8013b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b3c:	e02b      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b42:	e028      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013b44:	4b16      	ldr	r3, [pc, #88]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013b50:	d107      	bne.n	8013b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b56:	4618      	mov	r0, r3
 8013b58:	f000 fae4 	bl	8014124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b60:	e019      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b66:	e016      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b68:	4b0d      	ldr	r3, [pc, #52]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b74:	d107      	bne.n	8013b86 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b76:	f107 0318 	add.w	r3, r7, #24
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 f82a 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b84:	e007      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013b86:	2300      	movs	r3, #0
 8013b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b8a:	e004      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b90:	e001      	b.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3740      	adds	r7, #64	@ 0x40
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	58024400 	.word	0x58024400
 8013ba4:	017d7840 	.word	0x017d7840

08013ba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013bac:	f7fe f816 	bl	8011bdc <HAL_RCC_GetHCLKFreq>
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	4b06      	ldr	r3, [pc, #24]	@ (8013bcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013bb4:	6a1b      	ldr	r3, [r3, #32]
 8013bb6:	091b      	lsrs	r3, r3, #4
 8013bb8:	f003 0307 	and.w	r3, r3, #7
 8013bbc:	4904      	ldr	r1, [pc, #16]	@ (8013bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013bbe:	5ccb      	ldrb	r3, [r1, r3]
 8013bc0:	f003 031f 	and.w	r3, r3, #31
 8013bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	58024400 	.word	0x58024400
 8013bd0:	0801cb54 	.word	0x0801cb54

08013bd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b089      	sub	sp, #36	@ 0x24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013be0:	f003 0303 	and.w	r3, r3, #3
 8013be4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013be6:	4b9f      	ldr	r3, [pc, #636]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bea:	0b1b      	lsrs	r3, r3, #12
 8013bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013bf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bf6:	091b      	lsrs	r3, r3, #4
 8013bf8:	f003 0301 	and.w	r3, r3, #1
 8013bfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013bfe:	4b99      	ldr	r3, [pc, #612]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c02:	08db      	lsrs	r3, r3, #3
 8013c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c08:	693a      	ldr	r2, [r7, #16]
 8013c0a:	fb02 f303 	mul.w	r3, r2, r3
 8013c0e:	ee07 3a90 	vmov	s15, r3
 8013c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f000 8111 	beq.w	8013e44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	2b02      	cmp	r3, #2
 8013c26:	f000 8083 	beq.w	8013d30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013c2a:	69bb      	ldr	r3, [r7, #24]
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	f200 80a1 	bhi.w	8013d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d003      	beq.n	8013c40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d056      	beq.n	8013cec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013c3e:	e099      	b.n	8013d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c40:	4b88      	ldr	r3, [pc, #544]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f003 0320 	and.w	r3, r3, #32
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d02d      	beq.n	8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c4c:	4b85      	ldr	r3, [pc, #532]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	08db      	lsrs	r3, r3, #3
 8013c52:	f003 0303 	and.w	r3, r3, #3
 8013c56:	4a84      	ldr	r2, [pc, #528]	@ (8013e68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013c58:	fa22 f303 	lsr.w	r3, r2, r3
 8013c5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	ee07 3a90 	vmov	s15, r3
 8013c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	ee07 3a90 	vmov	s15, r3
 8013c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c76:	4b7b      	ldr	r3, [pc, #492]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c7e:	ee07 3a90 	vmov	s15, r3
 8013c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013ca6:	e087      	b.n	8013db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	ee07 3a90 	vmov	s15, r3
 8013cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013e70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013cba:	4b6a      	ldr	r3, [pc, #424]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cc2:	ee07 3a90 	vmov	s15, r3
 8013cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013cea:	e065      	b.n	8013db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	ee07 3a90 	vmov	s15, r3
 8013cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013cfe:	4b59      	ldr	r3, [pc, #356]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d06:	ee07 3a90 	vmov	s15, r3
 8013d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d2e:	e043      	b.n	8013db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	ee07 3a90 	vmov	s15, r3
 8013d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d42:	4b48      	ldr	r3, [pc, #288]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d4a:	ee07 3a90 	vmov	s15, r3
 8013d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d72:	e021      	b.n	8013db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	ee07 3a90 	vmov	s15, r3
 8013d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d86:	4b37      	ldr	r3, [pc, #220]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d8e:	ee07 3a90 	vmov	s15, r3
 8013d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013db6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013db8:	4b2a      	ldr	r3, [pc, #168]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dbc:	0a5b      	lsrs	r3, r3, #9
 8013dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dc2:	ee07 3a90 	vmov	s15, r3
 8013dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8013dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013dde:	ee17 2a90 	vmov	r2, s15
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013de6:	4b1f      	ldr	r3, [pc, #124]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dea:	0c1b      	lsrs	r3, r3, #16
 8013dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013df0:	ee07 3a90 	vmov	s15, r3
 8013df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013df8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e0c:	ee17 2a90 	vmov	r2, s15
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013e14:	4b13      	ldr	r3, [pc, #76]	@ (8013e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e18:	0e1b      	lsrs	r3, r3, #24
 8013e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e1e:	ee07 3a90 	vmov	s15, r3
 8013e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e3a:	ee17 2a90 	vmov	r2, s15
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013e42:	e008      	b.n	8013e56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	609a      	str	r2, [r3, #8]
}
 8013e56:	bf00      	nop
 8013e58:	3724      	adds	r7, #36	@ 0x24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr
 8013e62:	bf00      	nop
 8013e64:	58024400 	.word	0x58024400
 8013e68:	03d09000 	.word	0x03d09000
 8013e6c:	46000000 	.word	0x46000000
 8013e70:	4c742400 	.word	0x4c742400
 8013e74:	4a742400 	.word	0x4a742400
 8013e78:	4bbebc20 	.word	0x4bbebc20

08013e7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b089      	sub	sp, #36	@ 0x24
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013e84:	4ba1      	ldr	r3, [pc, #644]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e88:	f003 0303 	and.w	r3, r3, #3
 8013e8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013e8e:	4b9f      	ldr	r3, [pc, #636]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e92:	0d1b      	lsrs	r3, r3, #20
 8013e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013e98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013e9a:	4b9c      	ldr	r3, [pc, #624]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e9e:	0a1b      	lsrs	r3, r3, #8
 8013ea0:	f003 0301 	and.w	r3, r3, #1
 8013ea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013ea6:	4b99      	ldr	r3, [pc, #612]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eaa:	08db      	lsrs	r3, r3, #3
 8013eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013eb0:	693a      	ldr	r2, [r7, #16]
 8013eb2:	fb02 f303 	mul.w	r3, r2, r3
 8013eb6:	ee07 3a90 	vmov	s15, r3
 8013eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f000 8111 	beq.w	80140ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	2b02      	cmp	r3, #2
 8013ece:	f000 8083 	beq.w	8013fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	f200 80a1 	bhi.w	801401c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d003      	beq.n	8013ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d056      	beq.n	8013f94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013ee6:	e099      	b.n	801401c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013ee8:	4b88      	ldr	r3, [pc, #544]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f003 0320 	and.w	r3, r3, #32
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d02d      	beq.n	8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ef4:	4b85      	ldr	r3, [pc, #532]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	08db      	lsrs	r3, r3, #3
 8013efa:	f003 0303 	and.w	r3, r3, #3
 8013efe:	4a84      	ldr	r2, [pc, #528]	@ (8014110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013f00:	fa22 f303 	lsr.w	r3, r2, r3
 8013f04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	ee07 3a90 	vmov	s15, r3
 8013f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	ee07 3a90 	vmov	s15, r3
 8013f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f1e:	4b7b      	ldr	r3, [pc, #492]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f26:	ee07 3a90 	vmov	s15, r3
 8013f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013f4e:	e087      	b.n	8014060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	ee07 3a90 	vmov	s15, r3
 8013f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f62:	4b6a      	ldr	r3, [pc, #424]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f6a:	ee07 3a90 	vmov	s15, r3
 8013f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f92:	e065      	b.n	8014060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	ee07 3a90 	vmov	s15, r3
 8013f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801411c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fa6:	4b59      	ldr	r3, [pc, #356]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fae:	ee07 3a90 	vmov	s15, r3
 8013fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013fba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013fd6:	e043      	b.n	8014060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	ee07 3a90 	vmov	s15, r3
 8013fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fea:	4b48      	ldr	r3, [pc, #288]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff2:	ee07 3a90 	vmov	s15, r3
 8013ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ffe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801400a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801401a:	e021      	b.n	8014060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	ee07 3a90 	vmov	s15, r3
 8014022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014026:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801411c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801402e:	4b37      	ldr	r3, [pc, #220]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014036:	ee07 3a90 	vmov	s15, r3
 801403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014042:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801404e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014056:	ee67 7a27 	vmul.f32	s15, s14, s15
 801405a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801405e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014060:	4b2a      	ldr	r3, [pc, #168]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014064:	0a5b      	lsrs	r3, r3, #9
 8014066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801406a:	ee07 3a90 	vmov	s15, r3
 801406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014076:	ee37 7a87 	vadd.f32	s14, s15, s14
 801407a:	edd7 6a07 	vldr	s13, [r7, #28]
 801407e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014086:	ee17 2a90 	vmov	r2, s15
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801408e:	4b1f      	ldr	r3, [pc, #124]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014092:	0c1b      	lsrs	r3, r3, #16
 8014094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014098:	ee07 3a90 	vmov	s15, r3
 801409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80140ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140b4:	ee17 2a90 	vmov	r2, s15
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80140bc:	4b13      	ldr	r3, [pc, #76]	@ (801410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140c0:	0e1b      	lsrs	r3, r3, #24
 80140c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140c6:	ee07 3a90 	vmov	s15, r3
 80140ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80140da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140e2:	ee17 2a90 	vmov	r2, s15
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80140ea:	e008      	b.n	80140fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	609a      	str	r2, [r3, #8]
}
 80140fe:	bf00      	nop
 8014100:	3724      	adds	r7, #36	@ 0x24
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	58024400 	.word	0x58024400
 8014110:	03d09000 	.word	0x03d09000
 8014114:	46000000 	.word	0x46000000
 8014118:	4c742400 	.word	0x4c742400
 801411c:	4a742400 	.word	0x4a742400
 8014120:	4bbebc20 	.word	0x4bbebc20

08014124 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014124:	b480      	push	{r7}
 8014126:	b089      	sub	sp, #36	@ 0x24
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801412c:	4ba0      	ldr	r3, [pc, #640]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014130:	f003 0303 	and.w	r3, r3, #3
 8014134:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8014136:	4b9e      	ldr	r3, [pc, #632]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801413a:	091b      	lsrs	r3, r3, #4
 801413c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014140:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014142:	4b9b      	ldr	r3, [pc, #620]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014146:	f003 0301 	and.w	r3, r3, #1
 801414a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801414c:	4b98      	ldr	r3, [pc, #608]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801414e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014150:	08db      	lsrs	r3, r3, #3
 8014152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014156:	693a      	ldr	r2, [r7, #16]
 8014158:	fb02 f303 	mul.w	r3, r2, r3
 801415c:	ee07 3a90 	vmov	s15, r3
 8014160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 8111 	beq.w	8014392 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	2b02      	cmp	r3, #2
 8014174:	f000 8083 	beq.w	801427e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	2b02      	cmp	r3, #2
 801417c:	f200 80a1 	bhi.w	80142c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d003      	beq.n	801418e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d056      	beq.n	801423a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801418c:	e099      	b.n	80142c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801418e:	4b88      	ldr	r3, [pc, #544]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f003 0320 	and.w	r3, r3, #32
 8014196:	2b00      	cmp	r3, #0
 8014198:	d02d      	beq.n	80141f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801419a:	4b85      	ldr	r3, [pc, #532]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	08db      	lsrs	r3, r3, #3
 80141a0:	f003 0303 	and.w	r3, r3, #3
 80141a4:	4a83      	ldr	r2, [pc, #524]	@ (80143b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80141a6:	fa22 f303 	lsr.w	r3, r2, r3
 80141aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	ee07 3a90 	vmov	s15, r3
 80141b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	ee07 3a90 	vmov	s15, r3
 80141bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141c4:	4b7a      	ldr	r3, [pc, #488]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80141c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141cc:	ee07 3a90 	vmov	s15, r3
 80141d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80141d8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80143b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80141dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80141f4:	e087      	b.n	8014306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	ee07 3a90 	vmov	s15, r3
 80141fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014200:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80143bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014208:	4b69      	ldr	r3, [pc, #420]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014210:	ee07 3a90 	vmov	s15, r3
 8014214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014218:	ed97 6a03 	vldr	s12, [r7, #12]
 801421c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80143b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801422c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014238:	e065      	b.n	8014306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	ee07 3a90 	vmov	s15, r3
 8014240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014244:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80143c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8014248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801424c:	4b58      	ldr	r3, [pc, #352]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014254:	ee07 3a90 	vmov	s15, r3
 8014258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801425c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014260:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80143b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801426c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801427c:	e043      	b.n	8014306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	ee07 3a90 	vmov	s15, r3
 8014284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014288:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80143c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801428c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014290:	4b47      	ldr	r3, [pc, #284]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014298:	ee07 3a90 	vmov	s15, r3
 801429c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80142a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80142a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80143b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80142a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80142ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80142b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80142b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80142c0:	e021      	b.n	8014306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	ee07 3a90 	vmov	s15, r3
 80142c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80143bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80142d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80142d4:	4b36      	ldr	r3, [pc, #216]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142dc:	ee07 3a90 	vmov	s15, r3
 80142e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80142e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80142e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80143b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80142ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80142f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80142f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80142f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014304:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8014306:	4b2a      	ldr	r3, [pc, #168]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801430a:	0a5b      	lsrs	r3, r3, #9
 801430c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014310:	ee07 3a90 	vmov	s15, r3
 8014314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801431c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014320:	edd7 6a07 	vldr	s13, [r7, #28]
 8014324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801432c:	ee17 2a90 	vmov	r2, s15
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014334:	4b1e      	ldr	r3, [pc, #120]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014338:	0c1b      	lsrs	r3, r3, #16
 801433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801433e:	ee07 3a90 	vmov	s15, r3
 8014342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801434a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801434e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801435a:	ee17 2a90 	vmov	r2, s15
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014362:	4b13      	ldr	r3, [pc, #76]	@ (80143b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014366:	0e1b      	lsrs	r3, r3, #24
 8014368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801436c:	ee07 3a90 	vmov	s15, r3
 8014370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014378:	ee37 7a87 	vadd.f32	s14, s15, s14
 801437c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014388:	ee17 2a90 	vmov	r2, s15
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014390:	e008      	b.n	80143a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	609a      	str	r2, [r3, #8]
}
 80143a4:	bf00      	nop
 80143a6:	3724      	adds	r7, #36	@ 0x24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr
 80143b0:	58024400 	.word	0x58024400
 80143b4:	03d09000 	.word	0x03d09000
 80143b8:	46000000 	.word	0x46000000
 80143bc:	4c742400 	.word	0x4c742400
 80143c0:	4a742400 	.word	0x4a742400
 80143c4:	4bbebc20 	.word	0x4bbebc20

080143c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80143d2:	2300      	movs	r3, #0
 80143d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80143d6:	4b53      	ldr	r3, [pc, #332]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80143d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143da:	f003 0303 	and.w	r3, r3, #3
 80143de:	2b03      	cmp	r3, #3
 80143e0:	d101      	bne.n	80143e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80143e2:	2301      	movs	r3, #1
 80143e4:	e099      	b.n	801451a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80143e6:	4b4f      	ldr	r3, [pc, #316]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	4a4e      	ldr	r2, [pc, #312]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80143ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80143f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80143f2:	f7f9 fd47 	bl	800de84 <HAL_GetTick>
 80143f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80143f8:	e008      	b.n	801440c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80143fa:	f7f9 fd43 	bl	800de84 <HAL_GetTick>
 80143fe:	4602      	mov	r2, r0
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	1ad3      	subs	r3, r2, r3
 8014404:	2b02      	cmp	r3, #2
 8014406:	d901      	bls.n	801440c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014408:	2303      	movs	r3, #3
 801440a:	e086      	b.n	801451a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801440c:	4b45      	ldr	r3, [pc, #276]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1f0      	bne.n	80143fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014418:	4b42      	ldr	r3, [pc, #264]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 801441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801441c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	031b      	lsls	r3, r3, #12
 8014426:	493f      	ldr	r1, [pc, #252]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014428:	4313      	orrs	r3, r2
 801442a:	628b      	str	r3, [r1, #40]	@ 0x28
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	3b01      	subs	r3, #1
 8014432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	689b      	ldr	r3, [r3, #8]
 801443a:	3b01      	subs	r3, #1
 801443c:	025b      	lsls	r3, r3, #9
 801443e:	b29b      	uxth	r3, r3
 8014440:	431a      	orrs	r2, r3
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	68db      	ldr	r3, [r3, #12]
 8014446:	3b01      	subs	r3, #1
 8014448:	041b      	lsls	r3, r3, #16
 801444a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801444e:	431a      	orrs	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	691b      	ldr	r3, [r3, #16]
 8014454:	3b01      	subs	r3, #1
 8014456:	061b      	lsls	r3, r3, #24
 8014458:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801445c:	4931      	ldr	r1, [pc, #196]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 801445e:	4313      	orrs	r3, r2
 8014460:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014462:	4b30      	ldr	r3, [pc, #192]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	695b      	ldr	r3, [r3, #20]
 801446e:	492d      	ldr	r1, [pc, #180]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014470:	4313      	orrs	r3, r2
 8014472:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014474:	4b2b      	ldr	r3, [pc, #172]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014478:	f023 0220 	bic.w	r2, r3, #32
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	699b      	ldr	r3, [r3, #24]
 8014480:	4928      	ldr	r1, [pc, #160]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014482:	4313      	orrs	r3, r2
 8014484:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014486:	4b27      	ldr	r3, [pc, #156]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801448a:	4a26      	ldr	r2, [pc, #152]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 801448c:	f023 0310 	bic.w	r3, r3, #16
 8014490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014492:	4b24      	ldr	r3, [pc, #144]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 8014494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014496:	4b24      	ldr	r3, [pc, #144]	@ (8014528 <RCCEx_PLL2_Config+0x160>)
 8014498:	4013      	ands	r3, r2
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	69d2      	ldr	r2, [r2, #28]
 801449e:	00d2      	lsls	r2, r2, #3
 80144a0:	4920      	ldr	r1, [pc, #128]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144a2:	4313      	orrs	r3, r2
 80144a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80144a6:	4b1f      	ldr	r3, [pc, #124]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144aa:	4a1e      	ldr	r2, [pc, #120]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144ac:	f043 0310 	orr.w	r3, r3, #16
 80144b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d106      	bne.n	80144c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80144b8:	4b1a      	ldr	r3, [pc, #104]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144bc:	4a19      	ldr	r2, [pc, #100]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80144c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80144c4:	e00f      	b.n	80144e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d106      	bne.n	80144da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80144cc:	4b15      	ldr	r3, [pc, #84]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144d0:	4a14      	ldr	r2, [pc, #80]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80144d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80144d8:	e005      	b.n	80144e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80144da:	4b12      	ldr	r3, [pc, #72]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144de:	4a11      	ldr	r2, [pc, #68]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80144e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80144e6:	4b0f      	ldr	r3, [pc, #60]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a0e      	ldr	r2, [pc, #56]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 80144ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80144f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80144f2:	f7f9 fcc7 	bl	800de84 <HAL_GetTick>
 80144f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80144f8:	e008      	b.n	801450c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80144fa:	f7f9 fcc3 	bl	800de84 <HAL_GetTick>
 80144fe:	4602      	mov	r2, r0
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	1ad3      	subs	r3, r2, r3
 8014504:	2b02      	cmp	r3, #2
 8014506:	d901      	bls.n	801450c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014508:	2303      	movs	r3, #3
 801450a:	e006      	b.n	801451a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801450c:	4b05      	ldr	r3, [pc, #20]	@ (8014524 <RCCEx_PLL2_Config+0x15c>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014514:	2b00      	cmp	r3, #0
 8014516:	d0f0      	beq.n	80144fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014518:	7bfb      	ldrb	r3, [r7, #15]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3710      	adds	r7, #16
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	58024400 	.word	0x58024400
 8014528:	ffff0007 	.word	0xffff0007

0801452c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014536:	2300      	movs	r3, #0
 8014538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801453a:	4b53      	ldr	r3, [pc, #332]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801453e:	f003 0303 	and.w	r3, r3, #3
 8014542:	2b03      	cmp	r3, #3
 8014544:	d101      	bne.n	801454a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014546:	2301      	movs	r3, #1
 8014548:	e099      	b.n	801467e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801454a:	4b4f      	ldr	r3, [pc, #316]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4a4e      	ldr	r2, [pc, #312]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014556:	f7f9 fc95 	bl	800de84 <HAL_GetTick>
 801455a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801455c:	e008      	b.n	8014570 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801455e:	f7f9 fc91 	bl	800de84 <HAL_GetTick>
 8014562:	4602      	mov	r2, r0
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	2b02      	cmp	r3, #2
 801456a:	d901      	bls.n	8014570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801456c:	2303      	movs	r3, #3
 801456e:	e086      	b.n	801467e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014570:	4b45      	ldr	r3, [pc, #276]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014578:	2b00      	cmp	r3, #0
 801457a:	d1f0      	bne.n	801455e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801457c:	4b42      	ldr	r3, [pc, #264]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014580:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	051b      	lsls	r3, r3, #20
 801458a:	493f      	ldr	r1, [pc, #252]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801458c:	4313      	orrs	r3, r2
 801458e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	3b01      	subs	r3, #1
 8014596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	689b      	ldr	r3, [r3, #8]
 801459e:	3b01      	subs	r3, #1
 80145a0:	025b      	lsls	r3, r3, #9
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	431a      	orrs	r2, r3
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	3b01      	subs	r3, #1
 80145ac:	041b      	lsls	r3, r3, #16
 80145ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80145b2:	431a      	orrs	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	691b      	ldr	r3, [r3, #16]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	061b      	lsls	r3, r3, #24
 80145bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80145c0:	4931      	ldr	r1, [pc, #196]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145c2:	4313      	orrs	r3, r2
 80145c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80145c6:	4b30      	ldr	r3, [pc, #192]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	695b      	ldr	r3, [r3, #20]
 80145d2:	492d      	ldr	r1, [pc, #180]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145d4:	4313      	orrs	r3, r2
 80145d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80145d8:	4b2b      	ldr	r3, [pc, #172]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	699b      	ldr	r3, [r3, #24]
 80145e4:	4928      	ldr	r1, [pc, #160]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145e6:	4313      	orrs	r3, r2
 80145e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80145ea:	4b27      	ldr	r3, [pc, #156]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ee:	4a26      	ldr	r2, [pc, #152]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80145f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80145f6:	4b24      	ldr	r3, [pc, #144]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 80145f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80145fa:	4b24      	ldr	r3, [pc, #144]	@ (801468c <RCCEx_PLL3_Config+0x160>)
 80145fc:	4013      	ands	r3, r2
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	69d2      	ldr	r2, [r2, #28]
 8014602:	00d2      	lsls	r2, r2, #3
 8014604:	4920      	ldr	r1, [pc, #128]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014606:	4313      	orrs	r3, r2
 8014608:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801460a:	4b1f      	ldr	r3, [pc, #124]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801460e:	4a1e      	ldr	r2, [pc, #120]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014614:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d106      	bne.n	801462a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801461c:	4b1a      	ldr	r3, [pc, #104]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014620:	4a19      	ldr	r2, [pc, #100]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014622:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014628:	e00f      	b.n	801464a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	2b01      	cmp	r3, #1
 801462e:	d106      	bne.n	801463e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014630:	4b15      	ldr	r3, [pc, #84]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014634:	4a14      	ldr	r2, [pc, #80]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014636:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801463a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801463c:	e005      	b.n	801464a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801463e:	4b12      	ldr	r3, [pc, #72]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014642:	4a11      	ldr	r2, [pc, #68]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014644:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014648:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801464a:	4b0f      	ldr	r3, [pc, #60]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4a0e      	ldr	r2, [pc, #56]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014656:	f7f9 fc15 	bl	800de84 <HAL_GetTick>
 801465a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801465c:	e008      	b.n	8014670 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801465e:	f7f9 fc11 	bl	800de84 <HAL_GetTick>
 8014662:	4602      	mov	r2, r0
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	2b02      	cmp	r3, #2
 801466a:	d901      	bls.n	8014670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801466c:	2303      	movs	r3, #3
 801466e:	e006      	b.n	801467e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014670:	4b05      	ldr	r3, [pc, #20]	@ (8014688 <RCCEx_PLL3_Config+0x15c>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014678:	2b00      	cmp	r3, #0
 801467a:	d0f0      	beq.n	801465e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801467c:	7bfb      	ldrb	r3, [r7, #15]
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	58024400 	.word	0x58024400
 801468c:	ffff0007 	.word	0xffff0007

08014690 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b08a      	sub	sp, #40	@ 0x28
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d101      	bne.n	80146a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801469e:	2301      	movs	r3, #1
 80146a0:	e075      	b.n	801478e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d105      	bne.n	80146ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7f4 fee7 	bl	8009488 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2204      	movs	r2, #4
 80146be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 f868 	bl	8014798 <HAL_SD_InitCard>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80146ce:	2301      	movs	r3, #1
 80146d0:	e05d      	b.n	801478e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80146d2:	f107 0308 	add.w	r3, r7, #8
 80146d6:	4619      	mov	r1, r3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 fdaf 	bl	801523c <HAL_SD_GetCardStatus>
 80146de:	4603      	mov	r3, r0
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d001      	beq.n	80146e8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80146e4:	2301      	movs	r3, #1
 80146e6:	e052      	b.n	801478e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80146e8:	7e3b      	ldrb	r3, [r7, #24]
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80146ee:	7e7b      	ldrb	r3, [r7, #25]
 80146f0:	b2db      	uxtb	r3, r3
 80146f2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	d10a      	bne.n	8014712 <HAL_SD_Init+0x82>
 80146fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d102      	bne.n	8014708 <HAL_SD_Init+0x78>
 8014702:	6a3b      	ldr	r3, [r7, #32]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d004      	beq.n	8014712 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801470e:	659a      	str	r2, [r3, #88]	@ 0x58
 8014710:	e00b      	b.n	801472a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014716:	2b01      	cmp	r3, #1
 8014718:	d104      	bne.n	8014724 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014720:	659a      	str	r2, [r3, #88]	@ 0x58
 8014722:	e002      	b.n	801472a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	68db      	ldr	r3, [r3, #12]
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f000 fe6d 	bl	8015410 <HAL_SD_ConfigWideBusOperation>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d001      	beq.n	8014740 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801473c:	2301      	movs	r3, #1
 801473e:	e026      	b.n	801478e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8014740:	f7f9 fba0 	bl	800de84 <HAL_GetTick>
 8014744:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8014746:	e011      	b.n	801476c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8014748:	f7f9 fb9c 	bl	800de84 <HAL_GetTick>
 801474c:	4602      	mov	r2, r0
 801474e:	69fb      	ldr	r3, [r7, #28]
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014756:	d109      	bne.n	801476c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801475e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2201      	movs	r2, #1
 8014764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8014768:	2303      	movs	r3, #3
 801476a:	e010      	b.n	801478e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 ff61 	bl	8015634 <HAL_SD_GetCardState>
 8014772:	4603      	mov	r3, r0
 8014774:	2b04      	cmp	r3, #4
 8014776:	d1e7      	bne.n	8014748 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2201      	movs	r2, #1
 8014788:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801478c:	2300      	movs	r3, #0
}
 801478e:	4618      	mov	r0, r3
 8014790:	3728      	adds	r7, #40	@ 0x28
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
	...

08014798 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8014798:	b590      	push	{r4, r7, lr}
 801479a:	b08d      	sub	sp, #52	@ 0x34
 801479c:	af02      	add	r7, sp, #8
 801479e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80147a0:	2300      	movs	r3, #0
 80147a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80147a4:	2300      	movs	r3, #0
 80147a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80147a8:	2300      	movs	r3, #0
 80147aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80147ac:	2300      	movs	r3, #0
 80147ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80147b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80147b4:	f04f 0100 	mov.w	r1, #0
 80147b8:	f7fe fc76 	bl	80130a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80147bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80147be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d109      	bne.n	80147d8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2201      	movs	r2, #1
 80147c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80147d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80147d4:	2301      	movs	r3, #1
 80147d6:	e070      	b.n	80148ba <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80147d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147da:	0a1b      	lsrs	r3, r3, #8
 80147dc:	4a39      	ldr	r2, [pc, #228]	@ (80148c4 <HAL_SD_InitCard+0x12c>)
 80147de:	fba2 2303 	umull	r2, r3, r2, r3
 80147e2:	091b      	lsrs	r3, r3, #4
 80147e4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681c      	ldr	r4, [r3, #0]
 80147ea:	466a      	mov	r2, sp
 80147ec:	f107 0318 	add.w	r3, r7, #24
 80147f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80147f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80147f8:	f107 030c 	add.w	r3, r7, #12
 80147fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80147fe:	4620      	mov	r0, r4
 8014800:	f002 fe5e 	bl	80174c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	4618      	mov	r0, r3
 801480a:	f002 fea1 	bl	8017550 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d005      	beq.n	8014820 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801481a:	fbb2 f3f3 	udiv	r3, r2, r3
 801481e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8014820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014822:	2b00      	cmp	r3, #0
 8014824:	d007      	beq.n	8014836 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8014826:	4a28      	ldr	r2, [pc, #160]	@ (80148c8 <HAL_SD_InitCard+0x130>)
 8014828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801482a:	fbb2 f3f3 	udiv	r3, r2, r3
 801482e:	3301      	adds	r3, #1
 8014830:	4618      	mov	r0, r3
 8014832:	f7f9 fb33 	bl	800de9c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 ffea 	bl	8015810 <SD_PowerON>
 801483c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801483e:	6a3b      	ldr	r3, [r7, #32]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00b      	beq.n	801485c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014850:	6a3b      	ldr	r3, [r7, #32]
 8014852:	431a      	orrs	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8014858:	2301      	movs	r3, #1
 801485a:	e02e      	b.n	80148ba <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 ff09 	bl	8015674 <SD_InitCard>
 8014862:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8014864:	6a3b      	ldr	r3, [r7, #32]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d00b      	beq.n	8014882 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2201      	movs	r2, #1
 801486e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	431a      	orrs	r2, r3
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801487e:	2301      	movs	r3, #1
 8014880:	e01b      	b.n	80148ba <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801488a:	4618      	mov	r0, r3
 801488c:	f002 fef6 	bl	801767c <SDMMC_CmdBlockLength>
 8014890:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8014892:	6a3b      	ldr	r3, [r7, #32]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00f      	beq.n	80148b8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4a0b      	ldr	r2, [pc, #44]	@ (80148cc <HAL_SD_InitCard+0x134>)
 801489e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80148a4:	6a3b      	ldr	r3, [r7, #32]
 80148a6:	431a      	orrs	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2201      	movs	r2, #1
 80148b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80148b4:	2301      	movs	r3, #1
 80148b6:	e000      	b.n	80148ba <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	372c      	adds	r7, #44	@ 0x2c
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd90      	pop	{r4, r7, pc}
 80148c2:	bf00      	nop
 80148c4:	014f8b59 	.word	0x014f8b59
 80148c8:	00012110 	.word	0x00012110
 80148cc:	1fe00fff 	.word	0x1fe00fff

080148d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b08c      	sub	sp, #48	@ 0x30
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
 80148dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d107      	bne.n	80148f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80148f4:	2301      	movs	r3, #1
 80148f6:	e08d      	b.n	8014a14 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	2b01      	cmp	r3, #1
 8014902:	f040 8086 	bne.w	8014a12 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2200      	movs	r2, #0
 801490a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801490c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	441a      	add	r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014916:	429a      	cmp	r2, r3
 8014918:	d907      	bls.n	801492a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801491e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8014926:	2301      	movs	r3, #1
 8014928:	e074      	b.n	8014a14 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	2203      	movs	r2, #3
 801492e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2200      	movs	r2, #0
 8014938:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	68ba      	ldr	r2, [r7, #8]
 801493e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	025a      	lsls	r2, r3, #9
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801494c:	2b01      	cmp	r3, #1
 801494e:	d002      	beq.n	8014956 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8014950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014952:	025b      	lsls	r3, r3, #9
 8014954:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014956:	f04f 33ff 	mov.w	r3, #4294967295
 801495a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	025b      	lsls	r3, r3, #9
 8014960:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014962:	2390      	movs	r3, #144	@ 0x90
 8014964:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8014966:	2302      	movs	r3, #2
 8014968:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801496a:	2300      	movs	r3, #0
 801496c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801496e:	2300      	movs	r3, #0
 8014970:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	f107 0210 	add.w	r2, r7, #16
 801497a:	4611      	mov	r1, r2
 801497c:	4618      	mov	r0, r3
 801497e:	f002 fe51 	bl	8017624 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	68da      	ldr	r2, [r3, #12]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014990:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2201      	movs	r2, #1
 80149a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	d90a      	bls.n	80149be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2282      	movs	r2, #130	@ 0x82
 80149ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80149b4:	4618      	mov	r0, r3
 80149b6:	f002 fea7 	bl	8017708 <SDMMC_CmdReadMultiBlock>
 80149ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80149bc:	e009      	b.n	80149d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2281      	movs	r2, #129	@ 0x81
 80149c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80149ca:	4618      	mov	r0, r3
 80149cc:	f002 fe79 	bl	80176c2 <SDMMC_CmdReadSingleBlock>
 80149d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80149d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d012      	beq.n	80149fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4a0f      	ldr	r2, [pc, #60]	@ (8014a1c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80149de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149e6:	431a      	orrs	r2, r3
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2201      	movs	r2, #1
 80149f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2200      	movs	r2, #0
 80149f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80149fa:	2301      	movs	r3, #1
 80149fc:	e00a      	b.n	8014a14 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8014a0c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e000      	b.n	8014a14 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8014a12:	2302      	movs	r3, #2
  }
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3730      	adds	r7, #48	@ 0x30
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	1fe00fff 	.word	0x1fe00fff

08014a20 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b08c      	sub	sp, #48	@ 0x30
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d107      	bne.n	8014a48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8014a44:	2301      	movs	r3, #1
 8014a46:	e08d      	b.n	8014b64 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	f040 8086 	bne.w	8014b62 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	441a      	add	r2, r3
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d907      	bls.n	8014a7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a6e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8014a76:	2301      	movs	r3, #1
 8014a78:	e074      	b.n	8014b64 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	2203      	movs	r2, #3
 8014a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	2200      	movs	r2, #0
 8014a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	68ba      	ldr	r2, [r7, #8]
 8014a8e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	025a      	lsls	r2, r3, #9
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d002      	beq.n	8014aa6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8014aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aa2:	025b      	lsls	r3, r3, #9
 8014aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8014aaa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	025b      	lsls	r3, r3, #9
 8014ab0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014ab2:	2390      	movs	r3, #144	@ 0x90
 8014ab4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8014aba:	2300      	movs	r3, #0
 8014abc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f107 0210 	add.w	r2, r7, #16
 8014aca:	4611      	mov	r1, r2
 8014acc:	4618      	mov	r0, r3
 8014ace:	f002 fda9 	bl	8017624 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	68da      	ldr	r2, [r3, #12]
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ae0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2201      	movs	r2, #1
 8014af0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d90a      	bls.n	8014b0e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	22a0      	movs	r2, #160	@ 0xa0
 8014afc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b04:	4618      	mov	r0, r3
 8014b06:	f002 fe45 	bl	8017794 <SDMMC_CmdWriteMultiBlock>
 8014b0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8014b0c:	e009      	b.n	8014b22 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2290      	movs	r2, #144	@ 0x90
 8014b12:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f002 fe17 	bl	801774e <SDMMC_CmdWriteSingleBlock>
 8014b20:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8014b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d012      	beq.n	8014b4e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8014b6c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8014b2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b36:	431a      	orrs	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2201      	movs	r2, #1
 8014b40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	e00a      	b.n	8014b64 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8014b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	e000      	b.n	8014b64 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8014b62:	2302      	movs	r3, #2
  }
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3730      	adds	r7, #48	@ 0x30
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	1fe00fff 	.word	0x1fe00fff

08014b70 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b084      	sub	sp, #16
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b7c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d008      	beq.n	8014b9e <HAL_SD_IRQHandler+0x2e>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	f003 0308 	and.w	r3, r3, #8
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d003      	beq.n	8014b9e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f001 f926 	bl	8015de8 <SD_Read_IT>
 8014b9c:	e19a      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f000 80ac 	beq.w	8014d06 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014bb6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	4b59      	ldr	r3, [pc, #356]	@ (8014d28 <HAL_SD_IRQHandler+0x1b8>)
 8014bc4:	400b      	ands	r3, r1
 8014bc6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8014bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	68da      	ldr	r2, [r3, #12]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014be6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f003 0308 	and.w	r3, r3, #8
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d038      	beq.n	8014c64 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f003 0302 	and.w	r3, r3, #2
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d104      	bne.n	8014c06 <HAL_SD_IRQHandler+0x96>
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f003 0320 	and.w	r3, r3, #32
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d011      	beq.n	8014c2a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f002 fde6 	bl	80177dc <SDMMC_CmdStopTransfer>
 8014c10:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d008      	beq.n	8014c2a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	431a      	orrs	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 f95b 	bl	8014ee0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8014d2c <HAL_SD_IRQHandler+0x1bc>)
 8014c30:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2201      	movs	r2, #1
 8014c36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f003 0301 	and.w	r3, r3, #1
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d104      	bne.n	8014c54 <HAL_SD_IRQHandler+0xe4>
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	f003 0302 	and.w	r3, r3, #2
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d003      	beq.n	8014c5c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f003 fa73 	bl	8018140 <HAL_SD_RxCpltCallback>
 8014c5a:	e13b      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f003 fa65 	bl	801812c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014c62:	e137      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	f000 8132 	beq.w	8014ed4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2200      	movs	r2, #0
 8014c76:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2200      	movs	r2, #0
 8014c86:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f003 0302 	and.w	r3, r3, #2
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d104      	bne.n	8014c9c <HAL_SD_IRQHandler+0x12c>
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f003 0320 	and.w	r3, r3, #32
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d011      	beq.n	8014cc0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f002 fd9b 	bl	80177dc <SDMMC_CmdStopTransfer>
 8014ca6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d008      	beq.n	8014cc0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	431a      	orrs	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f000 f910 	bl	8014ee0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	f003 0310 	and.w	r3, r3, #16
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d104      	bne.n	8014ce2 <HAL_SD_IRQHandler+0x172>
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f003 0320 	and.w	r3, r3, #32
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d002      	beq.n	8014ce8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f003 fa22 	bl	801812c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f003 0301 	and.w	r3, r3, #1
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d105      	bne.n	8014cfe <HAL_SD_IRQHandler+0x18e>
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f003 0302 	and.w	r3, r3, #2
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 80eb 	beq.w	8014ed4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f003 fa1e 	bl	8018140 <HAL_SD_RxCpltCallback>
}
 8014d04:	e0e6      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00d      	beq.n	8014d30 <HAL_SD_IRQHandler+0x1c0>
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f003 0308 	and.w	r3, r3, #8
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d008      	beq.n	8014d30 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f001 f8a8 	bl	8015e74 <SD_Write_IT>
 8014d24:	e0d6      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
 8014d26:	bf00      	nop
 8014d28:	ffff3ec5 	.word	0xffff3ec5
 8014d2c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d36:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f000 809d 	beq.w	8014e7a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d46:	f003 0302 	and.w	r3, r3, #2
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d005      	beq.n	8014d5a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d52:	f043 0202 	orr.w	r2, r3, #2
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d60:	f003 0308 	and.w	r3, r3, #8
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d005      	beq.n	8014d74 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d6c:	f043 0208 	orr.w	r2, r3, #8
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d7a:	f003 0320 	and.w	r3, r3, #32
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d005      	beq.n	8014d8e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d86:	f043 0220 	orr.w	r2, r3, #32
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d94:	f003 0310 	and.w	r3, r3, #16
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d005      	beq.n	8014da8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014da0:	f043 0210 	orr.w	r2, r3, #16
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a4b      	ldr	r2, [pc, #300]	@ (8014edc <HAL_SD_IRQHandler+0x36c>)
 8014dae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8014dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	68da      	ldr	r2, [r3, #12]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014dce:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014dde:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	68da      	ldr	r2, [r3, #12]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014dee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4618      	mov	r0, r3
 8014df6:	f002 fcf1 	bl	80177dc <SDMMC_CmdStopTransfer>
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e00:	431a      	orrs	r2, r3
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	68da      	ldr	r2, [r3, #12]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014e14:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f003 0308 	and.w	r3, r3, #8
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d00a      	beq.n	8014e40 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2200      	movs	r2, #0
 8014e36:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 f851 	bl	8014ee0 <HAL_SD_ErrorCallback>
}
 8014e3e:	e049      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d044      	beq.n	8014ed4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d040      	beq.n	8014ed4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8014e60:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	2200      	movs	r2, #0
 8014e68:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 f834 	bl	8014ee0 <HAL_SD_ErrorCallback>
}
 8014e78:	e02c      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d025      	beq.n	8014ed4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e90:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e98:	f003 0304 	and.w	r3, r3, #4
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d10c      	bne.n	8014eba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	f003 0320 	and.w	r3, r3, #32
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d003      	beq.n	8014eb2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f001 f84a 	bl	8015f44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8014eb0:	e010      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f001 f832 	bl	8015f1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8014eb8:	e00c      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f003 0320 	and.w	r3, r3, #32
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d003      	beq.n	8014ecc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f001 f833 	bl	8015f30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8014eca:	e003      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f001 f81b 	bl	8015f08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8014ed2:	e7ff      	b.n	8014ed4 <HAL_SD_IRQHandler+0x364>
 8014ed4:	bf00      	nop
 8014ed6:	3710      	adds	r7, #16
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	18000f3a 	.word	0x18000f3a

08014ee0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8014ee8:	bf00      	nop
 8014eea:	370c      	adds	r7, #12
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b083      	sub	sp, #12
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f02:	0f9b      	lsrs	r3, r3, #30
 8014f04:	b2da      	uxtb	r2, r3
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f0e:	0e9b      	lsrs	r3, r3, #26
 8014f10:	b2db      	uxtb	r3, r3
 8014f12:	f003 030f 	and.w	r3, r3, #15
 8014f16:	b2da      	uxtb	r2, r3
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f20:	0e1b      	lsrs	r3, r3, #24
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	f003 0303 	and.w	r3, r3, #3
 8014f28:	b2da      	uxtb	r2, r3
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f32:	0c1b      	lsrs	r3, r3, #16
 8014f34:	b2da      	uxtb	r2, r3
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f3e:	0a1b      	lsrs	r3, r3, #8
 8014f40:	b2da      	uxtb	r2, r3
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f54:	0d1b      	lsrs	r3, r3, #20
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f60:	0c1b      	lsrs	r3, r3, #16
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	f003 030f 	and.w	r3, r3, #15
 8014f68:	b2da      	uxtb	r2, r3
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f72:	0bdb      	lsrs	r3, r3, #15
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	f003 0301 	and.w	r3, r3, #1
 8014f7a:	b2da      	uxtb	r2, r3
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f84:	0b9b      	lsrs	r3, r3, #14
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	f003 0301 	and.w	r3, r3, #1
 8014f8c:	b2da      	uxtb	r2, r3
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f96:	0b5b      	lsrs	r3, r3, #13
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	f003 0301 	and.w	r3, r3, #1
 8014f9e:	b2da      	uxtb	r2, r3
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014fa8:	0b1b      	lsrs	r3, r3, #12
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	f003 0301 	and.w	r3, r3, #1
 8014fb0:	b2da      	uxtb	r2, r3
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d163      	bne.n	801508c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014fc8:	009a      	lsls	r2, r3, #2
 8014fca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8014fce:	4013      	ands	r3, r2
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8014fd4:	0f92      	lsrs	r2, r2, #30
 8014fd6:	431a      	orrs	r2, r3
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fe0:	0edb      	lsrs	r3, r3, #27
 8014fe2:	b2db      	uxtb	r3, r3
 8014fe4:	f003 0307 	and.w	r3, r3, #7
 8014fe8:	b2da      	uxtb	r2, r3
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ff2:	0e1b      	lsrs	r3, r3, #24
 8014ff4:	b2db      	uxtb	r3, r3
 8014ff6:	f003 0307 	and.w	r3, r3, #7
 8014ffa:	b2da      	uxtb	r2, r3
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015004:	0d5b      	lsrs	r3, r3, #21
 8015006:	b2db      	uxtb	r3, r3
 8015008:	f003 0307 	and.w	r3, r3, #7
 801500c:	b2da      	uxtb	r2, r3
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015016:	0c9b      	lsrs	r3, r3, #18
 8015018:	b2db      	uxtb	r3, r3
 801501a:	f003 0307 	and.w	r3, r3, #7
 801501e:	b2da      	uxtb	r2, r3
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015028:	0bdb      	lsrs	r3, r3, #15
 801502a:	b2db      	uxtb	r3, r3
 801502c:	f003 0307 	and.w	r3, r3, #7
 8015030:	b2da      	uxtb	r2, r3
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	691b      	ldr	r3, [r3, #16]
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	7e1b      	ldrb	r3, [r3, #24]
 8015044:	b2db      	uxtb	r3, r3
 8015046:	f003 0307 	and.w	r3, r3, #7
 801504a:	3302      	adds	r3, #2
 801504c:	2201      	movs	r2, #1
 801504e:	fa02 f303 	lsl.w	r3, r2, r3
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8015056:	fb03 f202 	mul.w	r2, r3, r2
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	7a1b      	ldrb	r3, [r3, #8]
 8015062:	b2db      	uxtb	r3, r3
 8015064:	f003 030f 	and.w	r3, r3, #15
 8015068:	2201      	movs	r2, #1
 801506a:	409a      	lsls	r2, r3
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8015078:	0a52      	lsrs	r2, r2, #9
 801507a:	fb03 f202 	mul.w	r2, r3, r2
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015088:	655a      	str	r2, [r3, #84]	@ 0x54
 801508a:	e031      	b.n	80150f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015090:	2b01      	cmp	r3, #1
 8015092:	d11d      	bne.n	80150d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015098:	041b      	lsls	r3, r3, #16
 801509a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150a2:	0c1b      	lsrs	r3, r3, #16
 80150a4:	431a      	orrs	r2, r3
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	691b      	ldr	r3, [r3, #16]
 80150ae:	3301      	adds	r3, #1
 80150b0:	029a      	lsls	r2, r3, #10
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80150ce:	e00f      	b.n	80150f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4a58      	ldr	r2, [pc, #352]	@ (8015238 <HAL_SD_GetCardCSD+0x344>)
 80150d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80150dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2201      	movs	r2, #1
 80150e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80150ec:	2301      	movs	r3, #1
 80150ee:	e09d      	b.n	801522c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150f4:	0b9b      	lsrs	r3, r3, #14
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	f003 0301 	and.w	r3, r3, #1
 80150fc:	b2da      	uxtb	r2, r3
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015106:	09db      	lsrs	r3, r3, #7
 8015108:	b2db      	uxtb	r3, r3
 801510a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801510e:	b2da      	uxtb	r2, r3
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015118:	b2db      	uxtb	r3, r3
 801511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801511e:	b2da      	uxtb	r2, r3
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015128:	0fdb      	lsrs	r3, r3, #31
 801512a:	b2da      	uxtb	r2, r3
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015134:	0f5b      	lsrs	r3, r3, #29
 8015136:	b2db      	uxtb	r3, r3
 8015138:	f003 0303 	and.w	r3, r3, #3
 801513c:	b2da      	uxtb	r2, r3
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015146:	0e9b      	lsrs	r3, r3, #26
 8015148:	b2db      	uxtb	r3, r3
 801514a:	f003 0307 	and.w	r3, r3, #7
 801514e:	b2da      	uxtb	r2, r3
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015158:	0d9b      	lsrs	r3, r3, #22
 801515a:	b2db      	uxtb	r3, r3
 801515c:	f003 030f 	and.w	r3, r3, #15
 8015160:	b2da      	uxtb	r2, r3
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801516a:	0d5b      	lsrs	r3, r3, #21
 801516c:	b2db      	uxtb	r3, r3
 801516e:	f003 0301 	and.w	r3, r3, #1
 8015172:	b2da      	uxtb	r2, r3
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	2200      	movs	r2, #0
 801517e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015186:	0c1b      	lsrs	r3, r3, #16
 8015188:	b2db      	uxtb	r3, r3
 801518a:	f003 0301 	and.w	r3, r3, #1
 801518e:	b2da      	uxtb	r2, r3
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801519a:	0bdb      	lsrs	r3, r3, #15
 801519c:	b2db      	uxtb	r3, r3
 801519e:	f003 0301 	and.w	r3, r3, #1
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151ae:	0b9b      	lsrs	r3, r3, #14
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151c2:	0b5b      	lsrs	r3, r3, #13
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	f003 0301 	and.w	r3, r3, #1
 80151ca:	b2da      	uxtb	r2, r3
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151d6:	0b1b      	lsrs	r3, r3, #12
 80151d8:	b2db      	uxtb	r3, r3
 80151da:	f003 0301 	and.w	r3, r3, #1
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151ea:	0a9b      	lsrs	r3, r3, #10
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	f003 0303 	and.w	r3, r3, #3
 80151f2:	b2da      	uxtb	r2, r3
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80151fe:	0a1b      	lsrs	r3, r3, #8
 8015200:	b2db      	uxtb	r3, r3
 8015202:	f003 0303 	and.w	r3, r3, #3
 8015206:	b2da      	uxtb	r2, r3
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015212:	085b      	lsrs	r3, r3, #1
 8015214:	b2db      	uxtb	r3, r3
 8015216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801521a:	b2da      	uxtb	r2, r3
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	2201      	movs	r2, #1
 8015226:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801522a:	2300      	movs	r3, #0
}
 801522c:	4618      	mov	r0, r3
 801522e:	370c      	adds	r7, #12
 8015230:	46bd      	mov	sp, r7
 8015232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015236:	4770      	bx	lr
 8015238:	1fe00fff 	.word	0x1fe00fff

0801523c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b094      	sub	sp, #80	@ 0x50
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8015246:	2300      	movs	r3, #0
 8015248:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015252:	b2db      	uxtb	r3, r3
 8015254:	2b03      	cmp	r3, #3
 8015256:	d101      	bne.n	801525c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8015258:	2301      	movs	r3, #1
 801525a:	e0a7      	b.n	80153ac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801525c:	f107 0308 	add.w	r3, r7, #8
 8015260:	4619      	mov	r1, r3
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 fb62 	bl	801592c <SD_SendSDStatus>
 8015268:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801526a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801526c:	2b00      	cmp	r3, #0
 801526e:	d011      	beq.n	8015294 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	4a4f      	ldr	r2, [pc, #316]	@ (80153b4 <HAL_SD_GetCardStatus+0x178>)
 8015276:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801527c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801527e:	431a      	orrs	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2201      	movs	r2, #1
 8015288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801528c:	2301      	movs	r3, #1
 801528e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8015292:	e070      	b.n	8015376 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	099b      	lsrs	r3, r3, #6
 8015298:	b2db      	uxtb	r3, r3
 801529a:	f003 0303 	and.w	r3, r3, #3
 801529e:	b2da      	uxtb	r2, r3
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	095b      	lsrs	r3, r3, #5
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	f003 0301 	and.w	r3, r3, #1
 80152ae:	b2da      	uxtb	r2, r3
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	0a1b      	lsrs	r3, r3, #8
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80152be:	b29a      	uxth	r2, r3
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	0e1b      	lsrs	r3, r3, #24
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	4313      	orrs	r3, r2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	061a      	lsls	r2, r3, #24
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	021b      	lsls	r3, r3, #8
 80152d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80152da:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	0a1b      	lsrs	r3, r3, #8
 80152e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80152e4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	0e1b      	lsrs	r3, r3, #24
 80152ea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	b2da      	uxtb	r2, r3
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	0a1b      	lsrs	r3, r3, #8
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	0d1b      	lsrs	r3, r3, #20
 8015306:	b2db      	uxtb	r3, r3
 8015308:	f003 030f 	and.w	r3, r3, #15
 801530c:	b2da      	uxtb	r2, r3
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	0c1b      	lsrs	r3, r3, #16
 8015316:	b29b      	uxth	r3, r3
 8015318:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801531c:	b29a      	uxth	r2, r3
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	b29b      	uxth	r3, r3
 8015322:	b2db      	uxtb	r3, r3
 8015324:	b29b      	uxth	r3, r3
 8015326:	4313      	orrs	r3, r2
 8015328:	b29a      	uxth	r2, r3
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	0a9b      	lsrs	r3, r3, #10
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015338:	b2da      	uxtb	r2, r3
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	0a1b      	lsrs	r3, r3, #8
 8015342:	b2db      	uxtb	r3, r3
 8015344:	f003 0303 	and.w	r3, r3, #3
 8015348:	b2da      	uxtb	r2, r3
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	091b      	lsrs	r3, r3, #4
 8015352:	b2db      	uxtb	r3, r3
 8015354:	f003 030f 	and.w	r3, r3, #15
 8015358:	b2da      	uxtb	r2, r3
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	b2db      	uxtb	r3, r3
 8015362:	f003 030f 	and.w	r3, r3, #15
 8015366:	b2da      	uxtb	r2, r3
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	0e1b      	lsrs	r3, r3, #24
 8015370:	b2da      	uxtb	r2, r3
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801537e:	4618      	mov	r0, r3
 8015380:	f002 f97c 	bl	801767c <SDMMC_CmdBlockLength>
 8015384:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8015386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00d      	beq.n	80153a8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	4a08      	ldr	r2, [pc, #32]	@ (80153b4 <HAL_SD_GetCardStatus+0x178>)
 8015392:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015398:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	2201      	movs	r2, #1
 801539e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80153a2:	2301      	movs	r3, #1
 80153a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80153a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3750      	adds	r7, #80	@ 0x50
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	1fe00fff 	.word	0x1fe00fff

080153b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	370c      	adds	r7, #12
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8015410:	b590      	push	{r4, r7, lr}
 8015412:	b08d      	sub	sp, #52	@ 0x34
 8015414:	af02      	add	r7, sp, #8
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801541a:	2300      	movs	r3, #0
 801541c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2203      	movs	r2, #3
 8015424:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801542c:	2b03      	cmp	r3, #3
 801542e:	d02e      	beq.n	801548e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015436:	d106      	bne.n	8015446 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801543c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	635a      	str	r2, [r3, #52]	@ 0x34
 8015444:	e029      	b.n	801549a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801544c:	d10a      	bne.n	8015464 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 fb64 	bl	8015b1c <SD_WideBus_Enable>
 8015454:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801545a:	6a3b      	ldr	r3, [r7, #32]
 801545c:	431a      	orrs	r2, r3
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	635a      	str	r2, [r3, #52]	@ 0x34
 8015462:	e01a      	b.n	801549a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d10a      	bne.n	8015480 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f000 fba1 	bl	8015bb2 <SD_WideBus_Disable>
 8015470:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	431a      	orrs	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	635a      	str	r2, [r3, #52]	@ 0x34
 801547e:	e00c      	b.n	801549a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015484:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	635a      	str	r2, [r3, #52]	@ 0x34
 801548c:	e005      	b.n	801549a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015492:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d007      	beq.n	80154b2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	4a5f      	ldr	r2, [pc, #380]	@ (8015624 <HAL_SD_ConfigWideBusOperation+0x214>)
 80154a8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80154aa:	2301      	movs	r3, #1
 80154ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80154b0:	e096      	b.n	80155e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80154b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80154b6:	f04f 0100 	mov.w	r1, #0
 80154ba:	f7fd fdf5 	bl	80130a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80154be:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f000 8083 	beq.w	80155ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	685b      	ldr	r3, [r3, #4]
 80154cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	689b      	ldr	r3, [r3, #8]
 80154d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	691b      	ldr	r3, [r3, #16]
 80154dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	695a      	ldr	r2, [r3, #20]
 80154e2:	69fb      	ldr	r3, [r7, #28]
 80154e4:	4950      	ldr	r1, [pc, #320]	@ (8015628 <HAL_SD_ConfigWideBusOperation+0x218>)
 80154e6:	fba1 1303 	umull	r1, r3, r1, r3
 80154ea:	0e1b      	lsrs	r3, r3, #24
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d303      	bcc.n	80154f8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	695b      	ldr	r3, [r3, #20]
 80154f4:	61bb      	str	r3, [r7, #24]
 80154f6:	e05a      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80154fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015500:	d103      	bne.n	801550a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	695b      	ldr	r3, [r3, #20]
 8015506:	61bb      	str	r3, [r7, #24]
 8015508:	e051      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801550e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015512:	d126      	bne.n	8015562 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	695b      	ldr	r3, [r3, #20]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d10e      	bne.n	801553a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	4a43      	ldr	r2, [pc, #268]	@ (801562c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8015520:	4293      	cmp	r3, r2
 8015522:	d906      	bls.n	8015532 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	4a40      	ldr	r2, [pc, #256]	@ (8015628 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015528:	fba2 2303 	umull	r2, r3, r2, r3
 801552c:	0e5b      	lsrs	r3, r3, #25
 801552e:	61bb      	str	r3, [r7, #24]
 8015530:	e03d      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	695b      	ldr	r3, [r3, #20]
 8015536:	61bb      	str	r3, [r7, #24]
 8015538:	e039      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	695b      	ldr	r3, [r3, #20]
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	69fa      	ldr	r2, [r7, #28]
 8015542:	fbb2 f3f3 	udiv	r3, r2, r3
 8015546:	4a39      	ldr	r2, [pc, #228]	@ (801562c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8015548:	4293      	cmp	r3, r2
 801554a:	d906      	bls.n	801555a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	4a36      	ldr	r2, [pc, #216]	@ (8015628 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015550:	fba2 2303 	umull	r2, r3, r2, r3
 8015554:	0e5b      	lsrs	r3, r3, #25
 8015556:	61bb      	str	r3, [r7, #24]
 8015558:	e029      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	695b      	ldr	r3, [r3, #20]
 801555e:	61bb      	str	r3, [r7, #24]
 8015560:	e025      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10e      	bne.n	8015588 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	4a30      	ldr	r2, [pc, #192]	@ (8015630 <HAL_SD_ConfigWideBusOperation+0x220>)
 801556e:	4293      	cmp	r3, r2
 8015570:	d906      	bls.n	8015580 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	4a2c      	ldr	r2, [pc, #176]	@ (8015628 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015576:	fba2 2303 	umull	r2, r3, r2, r3
 801557a:	0e1b      	lsrs	r3, r3, #24
 801557c:	61bb      	str	r3, [r7, #24]
 801557e:	e016      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	695b      	ldr	r3, [r3, #20]
 8015584:	61bb      	str	r3, [r7, #24]
 8015586:	e012      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	695b      	ldr	r3, [r3, #20]
 801558c:	005b      	lsls	r3, r3, #1
 801558e:	69fa      	ldr	r2, [r7, #28]
 8015590:	fbb2 f3f3 	udiv	r3, r2, r3
 8015594:	4a26      	ldr	r2, [pc, #152]	@ (8015630 <HAL_SD_ConfigWideBusOperation+0x220>)
 8015596:	4293      	cmp	r3, r2
 8015598:	d906      	bls.n	80155a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	4a22      	ldr	r2, [pc, #136]	@ (8015628 <HAL_SD_ConfigWideBusOperation+0x218>)
 801559e:	fba2 2303 	umull	r2, r3, r2, r3
 80155a2:	0e1b      	lsrs	r3, r3, #24
 80155a4:	61bb      	str	r3, [r7, #24]
 80155a6:	e002      	b.n	80155ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	695b      	ldr	r3, [r3, #20]
 80155ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681c      	ldr	r4, [r3, #0]
 80155b2:	466a      	mov	r2, sp
 80155b4:	f107 0314 	add.w	r3, r7, #20
 80155b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80155bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80155c0:	f107 0308 	add.w	r3, r7, #8
 80155c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80155c6:	4620      	mov	r0, r4
 80155c8:	f001 ff7a 	bl	80174c0 <SDMMC_Init>
 80155cc:	e008      	b.n	80155e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80155da:	2301      	movs	r3, #1
 80155dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80155e8:	4618      	mov	r0, r3
 80155ea:	f002 f847 	bl	801767c <SDMMC_CmdBlockLength>
 80155ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80155f0:	6a3b      	ldr	r3, [r7, #32]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d00c      	beq.n	8015610 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	4a0a      	ldr	r2, [pc, #40]	@ (8015624 <HAL_SD_ConfigWideBusOperation+0x214>)
 80155fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015602:	6a3b      	ldr	r3, [r7, #32]
 8015604:	431a      	orrs	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 801560a:	2301      	movs	r3, #1
 801560c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2201      	movs	r2, #1
 8015614:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8015618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801561c:	4618      	mov	r0, r3
 801561e:	372c      	adds	r7, #44	@ 0x2c
 8015620:	46bd      	mov	sp, r7
 8015622:	bd90      	pop	{r4, r7, pc}
 8015624:	1fe00fff 	.word	0x1fe00fff
 8015628:	55e63b89 	.word	0x55e63b89
 801562c:	02faf080 	.word	0x02faf080
 8015630:	017d7840 	.word	0x017d7840

08015634 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b086      	sub	sp, #24
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801563c:	2300      	movs	r3, #0
 801563e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8015640:	f107 030c 	add.w	r3, r7, #12
 8015644:	4619      	mov	r1, r3
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f000 fa40 	bl	8015acc <SD_SendStatus>
 801564c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d005      	beq.n	8015660 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	431a      	orrs	r2, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	0a5b      	lsrs	r3, r3, #9
 8015664:	f003 030f 	and.w	r3, r3, #15
 8015668:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801566a:	693b      	ldr	r3, [r7, #16]
}
 801566c:	4618      	mov	r0, r3
 801566e:	3718      	adds	r7, #24
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b090      	sub	sp, #64	@ 0x40
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 801567c:	2300      	movs	r3, #0
 801567e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8015680:	f7f8 fc00 	bl	800de84 <HAL_GetTick>
 8015684:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	4618      	mov	r0, r3
 801568c:	f001 ff71 	bl	8017572 <SDMMC_GetPowerState>
 8015690:	4603      	mov	r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	d102      	bne.n	801569c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015696:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801569a:	e0b5      	b.n	8015808 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156a0:	2b03      	cmp	r3, #3
 80156a2:	d02e      	beq.n	8015702 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f002 f9bc 	bl	8017a26 <SDMMC_CmdSendCID>
 80156ae:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80156b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d001      	beq.n	80156ba <SD_InitCard+0x46>
    {
      return errorstate;
 80156b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b8:	e0a6      	b.n	8015808 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2100      	movs	r1, #0
 80156c0:	4618      	mov	r0, r3
 80156c2:	f001 ff9c 	bl	80175fe <SDMMC_GetResponse>
 80156c6:	4602      	mov	r2, r0
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2104      	movs	r1, #4
 80156d2:	4618      	mov	r0, r3
 80156d4:	f001 ff93 	bl	80175fe <SDMMC_GetResponse>
 80156d8:	4602      	mov	r2, r0
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2108      	movs	r1, #8
 80156e4:	4618      	mov	r0, r3
 80156e6:	f001 ff8a 	bl	80175fe <SDMMC_GetResponse>
 80156ea:	4602      	mov	r2, r0
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	210c      	movs	r1, #12
 80156f6:	4618      	mov	r0, r3
 80156f8:	f001 ff81 	bl	80175fe <SDMMC_GetResponse>
 80156fc:	4602      	mov	r2, r0
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015706:	2b03      	cmp	r3, #3
 8015708:	d01d      	beq.n	8015746 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801570a:	e019      	b.n	8015740 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f107 020a 	add.w	r2, r7, #10
 8015714:	4611      	mov	r1, r2
 8015716:	4618      	mov	r0, r3
 8015718:	f002 f9c4 	bl	8017aa4 <SDMMC_CmdSetRelAdd>
 801571c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015720:	2b00      	cmp	r3, #0
 8015722:	d001      	beq.n	8015728 <SD_InitCard+0xb4>
      {
        return errorstate;
 8015724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015726:	e06f      	b.n	8015808 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8015728:	f7f8 fbac 	bl	800de84 <HAL_GetTick>
 801572c:	4602      	mov	r2, r0
 801572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015730:	1ad3      	subs	r3, r2, r3
 8015732:	f241 3287 	movw	r2, #4999	@ 0x1387
 8015736:	4293      	cmp	r3, r2
 8015738:	d902      	bls.n	8015740 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801573a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801573e:	e063      	b.n	8015808 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8015740:	897b      	ldrh	r3, [r7, #10]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d0e2      	beq.n	801570c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801574a:	2b03      	cmp	r3, #3
 801574c:	d036      	beq.n	80157bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801574e:	897b      	ldrh	r3, [r7, #10]
 8015750:	461a      	mov	r2, r3
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801575e:	041b      	lsls	r3, r3, #16
 8015760:	4619      	mov	r1, r3
 8015762:	4610      	mov	r0, r2
 8015764:	f002 f97e 	bl	8017a64 <SDMMC_CmdSendCSD>
 8015768:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576c:	2b00      	cmp	r3, #0
 801576e:	d001      	beq.n	8015774 <SD_InitCard+0x100>
    {
      return errorstate;
 8015770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015772:	e049      	b.n	8015808 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2100      	movs	r1, #0
 801577a:	4618      	mov	r0, r3
 801577c:	f001 ff3f 	bl	80175fe <SDMMC_GetResponse>
 8015780:	4602      	mov	r2, r0
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	2104      	movs	r1, #4
 801578c:	4618      	mov	r0, r3
 801578e:	f001 ff36 	bl	80175fe <SDMMC_GetResponse>
 8015792:	4602      	mov	r2, r0
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	2108      	movs	r1, #8
 801579e:	4618      	mov	r0, r3
 80157a0:	f001 ff2d 	bl	80175fe <SDMMC_GetResponse>
 80157a4:	4602      	mov	r2, r0
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	210c      	movs	r1, #12
 80157b0:	4618      	mov	r0, r3
 80157b2:	f001 ff24 	bl	80175fe <SDMMC_GetResponse>
 80157b6:	4602      	mov	r2, r0
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2104      	movs	r1, #4
 80157c2:	4618      	mov	r0, r3
 80157c4:	f001 ff1b 	bl	80175fe <SDMMC_GetResponse>
 80157c8:	4603      	mov	r3, r0
 80157ca:	0d1a      	lsrs	r2, r3, #20
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80157d0:	f107 030c 	add.w	r3, r7, #12
 80157d4:	4619      	mov	r1, r3
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f7ff fb8c 	bl	8014ef4 <HAL_SD_GetCardCSD>
 80157dc:	4603      	mov	r3, r0
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d002      	beq.n	80157e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80157e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80157e6:	e00f      	b.n	8015808 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157f0:	041b      	lsls	r3, r3, #16
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f002 f82d 	bl	8017854 <SDMMC_CmdSelDesel>
 80157fa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80157fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <SD_InitCard+0x192>
  {
    return errorstate;
 8015802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015804:	e000      	b.n	8015808 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8015806:	2300      	movs	r3, #0
}
 8015808:	4618      	mov	r0, r3
 801580a:	3740      	adds	r7, #64	@ 0x40
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015818:	2300      	movs	r3, #0
 801581a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801581c:	2300      	movs	r3, #0
 801581e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8015820:	2300      	movs	r3, #0
 8015822:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	4618      	mov	r0, r3
 801582a:	f002 f836 	bl	801789a <SDMMC_CmdGoIdleState>
 801582e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d001      	beq.n	801583a <SD_PowerON+0x2a>
  {
    return errorstate;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	e072      	b.n	8015920 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	4618      	mov	r0, r3
 8015840:	f002 f849 	bl	80178d6 <SDMMC_CmdOperCond>
 8015844:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801584c:	d10d      	bne.n	801586a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2200      	movs	r2, #0
 8015852:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	4618      	mov	r0, r3
 801585a:	f002 f81e 	bl	801789a <SDMMC_CmdGoIdleState>
 801585e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d004      	beq.n	8015870 <SD_PowerON+0x60>
    {
      return errorstate;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	e05a      	b.n	8015920 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2201      	movs	r2, #1
 801586e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015874:	2b01      	cmp	r3, #1
 8015876:	d137      	bne.n	80158e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2100      	movs	r1, #0
 801587e:	4618      	mov	r0, r3
 8015880:	f002 f849 	bl	8017916 <SDMMC_CmdAppCommand>
 8015884:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d02d      	beq.n	80158e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801588c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8015890:	e046      	b.n	8015920 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2100      	movs	r1, #0
 8015898:	4618      	mov	r0, r3
 801589a:	f002 f83c 	bl	8017916 <SDMMC_CmdAppCommand>
 801589e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <SD_PowerON+0x9a>
    {
      return errorstate;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	e03a      	b.n	8015920 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	491e      	ldr	r1, [pc, #120]	@ (8015928 <SD_PowerON+0x118>)
 80158b0:	4618      	mov	r0, r3
 80158b2:	f002 f853 	bl	801795c <SDMMC_CmdAppOperCommand>
 80158b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d002      	beq.n	80158c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80158be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80158c2:	e02d      	b.n	8015920 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2100      	movs	r1, #0
 80158ca:	4618      	mov	r0, r3
 80158cc:	f001 fe97 	bl	80175fe <SDMMC_GetResponse>
 80158d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	0fdb      	lsrs	r3, r3, #31
 80158d6:	2b01      	cmp	r3, #1
 80158d8:	d101      	bne.n	80158de <SD_PowerON+0xce>
 80158da:	2301      	movs	r3, #1
 80158dc:	e000      	b.n	80158e0 <SD_PowerON+0xd0>
 80158de:	2300      	movs	r3, #0
 80158e0:	613b      	str	r3, [r7, #16]

    count++;
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	3301      	adds	r3, #1
 80158e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d802      	bhi.n	80158f8 <SD_PowerON+0xe8>
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d0cc      	beq.n	8015892 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80158fe:	4293      	cmp	r3, r2
 8015900:	d902      	bls.n	8015908 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8015902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8015906:	e00b      	b.n	8015920 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2200      	movs	r2, #0
 801590c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8015914:	2b00      	cmp	r3, #0
 8015916:	d002      	beq.n	801591e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2201      	movs	r2, #1
 801591c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801591e:	2300      	movs	r3, #0
}
 8015920:	4618      	mov	r0, r3
 8015922:	3718      	adds	r7, #24
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	c1100000 	.word	0xc1100000

0801592c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b08c      	sub	sp, #48	@ 0x30
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8015936:	f7f8 faa5 	bl	800de84 <HAL_GetTick>
 801593a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2100      	movs	r1, #0
 8015946:	4618      	mov	r0, r3
 8015948:	f001 fe59 	bl	80175fe <SDMMC_GetResponse>
 801594c:	4603      	mov	r3, r0
 801594e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015952:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015956:	d102      	bne.n	801595e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801595c:	e0b0      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	2140      	movs	r1, #64	@ 0x40
 8015964:	4618      	mov	r0, r3
 8015966:	f001 fe89 	bl	801767c <SDMMC_CmdBlockLength>
 801596a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801596c:	6a3b      	ldr	r3, [r7, #32]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d005      	beq.n	801597e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801597a:	6a3b      	ldr	r3, [r7, #32]
 801597c:	e0a0      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681a      	ldr	r2, [r3, #0]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015986:	041b      	lsls	r3, r3, #16
 8015988:	4619      	mov	r1, r3
 801598a:	4610      	mov	r0, r2
 801598c:	f001 ffc3 	bl	8017916 <SDMMC_CmdAppCommand>
 8015990:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015992:	6a3b      	ldr	r3, [r7, #32]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d005      	beq.n	80159a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80159a0:	6a3b      	ldr	r3, [r7, #32]
 80159a2:	e08d      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80159a4:	f04f 33ff 	mov.w	r3, #4294967295
 80159a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80159aa:	2340      	movs	r3, #64	@ 0x40
 80159ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80159ae:	2360      	movs	r3, #96	@ 0x60
 80159b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80159b2:	2302      	movs	r3, #2
 80159b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80159b6:	2300      	movs	r3, #0
 80159b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80159ba:	2301      	movs	r3, #1
 80159bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	f107 0208 	add.w	r2, r7, #8
 80159c6:	4611      	mov	r1, r2
 80159c8:	4618      	mov	r0, r3
 80159ca:	f001 fe2b 	bl	8017624 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f002 f8ab 	bl	8017b2e <SDMMC_CmdStatusRegister>
 80159d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80159da:	6a3b      	ldr	r3, [r7, #32]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d02b      	beq.n	8015a38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80159e8:	6a3b      	ldr	r3, [r7, #32]
 80159ea:	e069      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80159f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d013      	beq.n	8015a22 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80159fa:	2300      	movs	r3, #0
 80159fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80159fe:	e00d      	b.n	8015a1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	4618      	mov	r0, r3
 8015a06:	f001 fd85 	bl	8017514 <SDMMC_ReadFIFO>
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a0e:	601a      	str	r2, [r3, #0]
        pData++;
 8015a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a12:	3304      	adds	r3, #4
 8015a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8015a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a18:	3301      	adds	r3, #1
 8015a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1e:	2b07      	cmp	r3, #7
 8015a20:	d9ee      	bls.n	8015a00 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015a22:	f7f8 fa2f 	bl	800de84 <HAL_GetTick>
 8015a26:	4602      	mov	r2, r0
 8015a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2a:	1ad3      	subs	r3, r2, r3
 8015a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a30:	d102      	bne.n	8015a38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015a32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015a36:	e043      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a3e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d0d2      	beq.n	80159ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a4c:	f003 0308 	and.w	r3, r3, #8
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d001      	beq.n	8015a58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015a54:	2308      	movs	r3, #8
 8015a56:	e033      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a5e:	f003 0302 	and.w	r3, r3, #2
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8015a66:	2302      	movs	r3, #2
 8015a68:	e02a      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a70:	f003 0320 	and.w	r3, r3, #32
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d017      	beq.n	8015aa8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8015a78:	2320      	movs	r3, #32
 8015a7a:	e021      	b.n	8015ac0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	4618      	mov	r0, r3
 8015a82:	f001 fd47 	bl	8017514 <SDMMC_ReadFIFO>
 8015a86:	4602      	mov	r2, r0
 8015a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8a:	601a      	str	r2, [r3, #0]
    pData++;
 8015a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8e:	3304      	adds	r3, #4
 8015a90:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015a92:	f7f8 f9f7 	bl	800de84 <HAL_GetTick>
 8015a96:	4602      	mov	r2, r0
 8015a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aa0:	d102      	bne.n	8015aa8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015aa2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015aa6:	e00b      	b.n	8015ac0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1e2      	bne.n	8015a7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	4a03      	ldr	r2, [pc, #12]	@ (8015ac8 <SD_SendSDStatus+0x19c>)
 8015abc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8015abe:	2300      	movs	r3, #0
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3730      	adds	r7, #48	@ 0x30
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	18000f3a 	.word	0x18000f3a

08015acc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d102      	bne.n	8015ae2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8015adc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015ae0:	e018      	b.n	8015b14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015aea:	041b      	lsls	r3, r3, #16
 8015aec:	4619      	mov	r1, r3
 8015aee:	4610      	mov	r0, r2
 8015af0:	f001 fffa 	bl	8017ae8 <SDMMC_CmdSendStatus>
 8015af4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d001      	beq.n	8015b00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	e009      	b.n	8015b14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2100      	movs	r1, #0
 8015b06:	4618      	mov	r0, r3
 8015b08:	f001 fd79 	bl	80175fe <SDMMC_GetResponse>
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8015b12:	2300      	movs	r3, #0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3710      	adds	r7, #16
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b086      	sub	sp, #24
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8015b24:	2300      	movs	r3, #0
 8015b26:	60fb      	str	r3, [r7, #12]
 8015b28:	2300      	movs	r3, #0
 8015b2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2100      	movs	r1, #0
 8015b32:	4618      	mov	r0, r3
 8015b34:	f001 fd63 	bl	80175fe <SDMMC_GetResponse>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b42:	d102      	bne.n	8015b4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015b44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015b48:	e02f      	b.n	8015baa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8015b4a:	f107 030c 	add.w	r3, r7, #12
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f000 f879 	bl	8015c48 <SD_FindSCR>
 8015b56:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d001      	beq.n	8015b62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	e023      	b.n	8015baa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d01c      	beq.n	8015ba6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b74:	041b      	lsls	r3, r3, #16
 8015b76:	4619      	mov	r1, r3
 8015b78:	4610      	mov	r0, r2
 8015b7a:	f001 fecc 	bl	8017916 <SDMMC_CmdAppCommand>
 8015b7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d001      	beq.n	8015b8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	e00f      	b.n	8015baa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	2102      	movs	r1, #2
 8015b90:	4618      	mov	r0, r3
 8015b92:	f001 ff03 	bl	801799c <SDMMC_CmdBusWidth>
 8015b96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d001      	beq.n	8015ba2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	e003      	b.n	8015baa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	e001      	b.n	8015baa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015ba6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3718      	adds	r7, #24
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8015bb2:	b580      	push	{r7, lr}
 8015bb4:	b086      	sub	sp, #24
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8015bba:	2300      	movs	r3, #0
 8015bbc:	60fb      	str	r3, [r7, #12]
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f001 fd18 	bl	80175fe <SDMMC_GetResponse>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015bd8:	d102      	bne.n	8015be0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015bda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015bde:	e02f      	b.n	8015c40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8015be0:	f107 030c 	add.w	r3, r7, #12
 8015be4:	4619      	mov	r1, r3
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f000 f82e 	bl	8015c48 <SD_FindSCR>
 8015bec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d001      	beq.n	8015bf8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	e023      	b.n	8015c40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d01c      	beq.n	8015c3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c0a:	041b      	lsls	r3, r3, #16
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	4610      	mov	r0, r2
 8015c10:	f001 fe81 	bl	8017916 <SDMMC_CmdAppCommand>
 8015c14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d001      	beq.n	8015c20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	e00f      	b.n	8015c40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2100      	movs	r1, #0
 8015c26:	4618      	mov	r0, r3
 8015c28:	f001 feb8 	bl	801799c <SDMMC_CmdBusWidth>
 8015c2c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d001      	beq.n	8015c38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	e003      	b.n	8015c40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e001      	b.n	8015c40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015c3c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3718      	adds	r7, #24
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b08e      	sub	sp, #56	@ 0x38
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8015c52:	f7f8 f917 	bl	800de84 <HAL_GetTick>
 8015c56:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	60bb      	str	r3, [r7, #8]
 8015c60:	2300      	movs	r3, #0
 8015c62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2108      	movs	r1, #8
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f001 fd04 	bl	801767c <SDMMC_CmdBlockLength>
 8015c74:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8015c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d001      	beq.n	8015c80 <SD_FindSCR+0x38>
  {
    return errorstate;
 8015c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c7e:	e0ad      	b.n	8015ddc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c88:	041b      	lsls	r3, r3, #16
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	f001 fe42 	bl	8017916 <SDMMC_CmdAppCommand>
 8015c92:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8015c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d001      	beq.n	8015c9e <SD_FindSCR+0x56>
  {
    return errorstate;
 8015c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c9c:	e09e      	b.n	8015ddc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8015ca4:	2308      	movs	r3, #8
 8015ca6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8015ca8:	2330      	movs	r3, #48	@ 0x30
 8015caa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8015cac:	2302      	movs	r3, #2
 8015cae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	f107 0210 	add.w	r2, r7, #16
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f001 fcae 	bl	8017624 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f001 fe88 	bl	80179e2 <SDMMC_CmdSendSCR>
 8015cd2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8015cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d027      	beq.n	8015d2a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8015cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cdc:	e07e      	b.n	8015ddc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ce4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d113      	bne.n	8015d14 <SD_FindSCR+0xcc>
 8015cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d110      	bne.n	8015d14 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f001 fc0c 	bl	8017514 <SDMMC_ReadFIFO>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f001 fc05 	bl	8017514 <SDMMC_ReadFIFO>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	60fb      	str	r3, [r7, #12]
      index++;
 8015d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d10:	3301      	adds	r3, #1
 8015d12:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015d14:	f7f8 f8b6 	bl	800de84 <HAL_GetTick>
 8015d18:	4602      	mov	r2, r0
 8015d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d1c:	1ad3      	subs	r3, r2, r3
 8015d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d22:	d102      	bne.n	8015d2a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015d24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015d28:	e058      	b.n	8015ddc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015d30:	f240 532a 	movw	r3, #1322	@ 0x52a
 8015d34:	4013      	ands	r3, r2
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d0d1      	beq.n	8015cde <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d40:	f003 0308 	and.w	r3, r3, #8
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d005      	beq.n	8015d54 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2208      	movs	r2, #8
 8015d4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015d50:	2308      	movs	r3, #8
 8015d52:	e043      	b.n	8015ddc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d5a:	f003 0302 	and.w	r3, r3, #2
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d005      	beq.n	8015d6e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2202      	movs	r2, #2
 8015d68:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8015d6a:	2302      	movs	r3, #2
 8015d6c:	e036      	b.n	8015ddc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d74:	f003 0320 	and.w	r3, r3, #32
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d005      	beq.n	8015d88 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2220      	movs	r2, #32
 8015d82:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8015d84:	2320      	movs	r3, #32
 8015d86:	e029      	b.n	8015ddc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	4a15      	ldr	r2, [pc, #84]	@ (8015de4 <SD_FindSCR+0x19c>)
 8015d8e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	061a      	lsls	r2, r3, #24
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	021b      	lsls	r3, r3, #8
 8015d98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015d9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	0a1b      	lsrs	r3, r3, #8
 8015da2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8015da6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	0e1b      	lsrs	r3, r3, #24
 8015dac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8015dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db0:	601a      	str	r2, [r3, #0]
    scr++;
 8015db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db4:	3304      	adds	r3, #4
 8015db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	061a      	lsls	r2, r3, #24
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	021b      	lsls	r3, r3, #8
 8015dc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015dc4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	0a1b      	lsrs	r3, r3, #8
 8015dca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8015dce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	0e1b      	lsrs	r3, r3, #24
 8015dd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8015dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3738      	adds	r7, #56	@ 0x38
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	18000f3a 	.word	0x18000f3a

08015de8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b086      	sub	sp, #24
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015dfa:	2b1f      	cmp	r3, #31
 8015dfc:	d936      	bls.n	8015e6c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8015dfe:	2300      	movs	r3, #0
 8015e00:	617b      	str	r3, [r7, #20]
 8015e02:	e027      	b.n	8015e54 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f001 fb83 	bl	8017514 <SDMMC_ReadFIFO>
 8015e0e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	b2da      	uxtb	r2, r3
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	0a1b      	lsrs	r3, r3, #8
 8015e22:	b2da      	uxtb	r2, r3
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	0c1b      	lsrs	r3, r3, #16
 8015e32:	b2da      	uxtb	r2, r3
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	0e1b      	lsrs	r3, r3, #24
 8015e42:	b2da      	uxtb	r2, r3
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	3301      	adds	r3, #1
 8015e52:	617b      	str	r3, [r7, #20]
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	2b07      	cmp	r3, #7
 8015e58:	d9d4      	bls.n	8015e04 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	693a      	ldr	r2, [r7, #16]
 8015e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e64:	f1a3 0220 	sub.w	r2, r3, #32
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8015e6c:	bf00      	nop
 8015e6e:	3718      	adds	r7, #24
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b086      	sub	sp, #24
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	69db      	ldr	r3, [r3, #28]
 8015e80:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	6a1b      	ldr	r3, [r3, #32]
 8015e86:	2b1f      	cmp	r3, #31
 8015e88:	d93a      	bls.n	8015f00 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	617b      	str	r3, [r7, #20]
 8015e8e:	e02b      	b.n	8015ee8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	021a      	lsls	r2, r3, #8
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	4313      	orrs	r3, r2
 8015ea6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	041a      	lsls	r2, r3, #16
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	4313      	orrs	r3, r2
 8015eb8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	061a      	lsls	r2, r3, #24
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	4313      	orrs	r3, r2
 8015eca:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f107 020c 	add.w	r2, r7, #12
 8015eda:	4611      	mov	r1, r2
 8015edc:	4618      	mov	r0, r3
 8015ede:	f001 fb26 	bl	801752e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	617b      	str	r3, [r7, #20]
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	2b07      	cmp	r3, #7
 8015eec:	d9d0      	bls.n	8015e90 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	693a      	ldr	r2, [r7, #16]
 8015ef2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	6a1b      	ldr	r3, [r3, #32]
 8015ef8:	f1a3 0220 	sub.w	r2, r3, #32
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	621a      	str	r2, [r3, #32]
  }
}
 8015f00:	bf00      	nop
 8015f02:	3718      	adds	r7, #24
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8015f08:	b480      	push	{r7}
 8015f0a:	b083      	sub	sp, #12
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8015f10:	bf00      	nop
 8015f12:	370c      	adds	r7, #12
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015f24:	bf00      	nop
 8015f26:	370c      	adds	r7, #12
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2e:	4770      	bx	lr

08015f30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8015f38:	bf00      	nop
 8015f3a:	370c      	adds	r7, #12
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f42:	4770      	bx	lr

08015f44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015f44:	b480      	push	{r7}
 8015f46:	b083      	sub	sp, #12
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015f4c:	bf00      	nop
 8015f4e:	370c      	adds	r7, #12
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr

08015f58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b084      	sub	sp, #16
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d101      	bne.n	8015f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8015f66:	2301      	movs	r3, #1
 8015f68:	e10f      	b.n	801618a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	4a87      	ldr	r2, [pc, #540]	@ (8016194 <HAL_SPI_Init+0x23c>)
 8015f76:	4293      	cmp	r3, r2
 8015f78:	d00f      	beq.n	8015f9a <HAL_SPI_Init+0x42>
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	4a86      	ldr	r2, [pc, #536]	@ (8016198 <HAL_SPI_Init+0x240>)
 8015f80:	4293      	cmp	r3, r2
 8015f82:	d00a      	beq.n	8015f9a <HAL_SPI_Init+0x42>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4a84      	ldr	r2, [pc, #528]	@ (801619c <HAL_SPI_Init+0x244>)
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d005      	beq.n	8015f9a <HAL_SPI_Init+0x42>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	68db      	ldr	r3, [r3, #12]
 8015f92:	2b0f      	cmp	r3, #15
 8015f94:	d901      	bls.n	8015f9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8015f96:	2301      	movs	r3, #1
 8015f98:	e0f7      	b.n	801618a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f000 f90a 	bl	80161b4 <SPI_GetPacketSize>
 8015fa0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8016194 <HAL_SPI_Init+0x23c>)
 8015fa8:	4293      	cmp	r3, r2
 8015faa:	d00c      	beq.n	8015fc6 <HAL_SPI_Init+0x6e>
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	4a79      	ldr	r2, [pc, #484]	@ (8016198 <HAL_SPI_Init+0x240>)
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	d007      	beq.n	8015fc6 <HAL_SPI_Init+0x6e>
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	4a78      	ldr	r2, [pc, #480]	@ (801619c <HAL_SPI_Init+0x244>)
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d002      	beq.n	8015fc6 <HAL_SPI_Init+0x6e>
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2b08      	cmp	r3, #8
 8015fc4:	d811      	bhi.n	8015fea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8015fca:	4a72      	ldr	r2, [pc, #456]	@ (8016194 <HAL_SPI_Init+0x23c>)
 8015fcc:	4293      	cmp	r3, r2
 8015fce:	d009      	beq.n	8015fe4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4a70      	ldr	r2, [pc, #448]	@ (8016198 <HAL_SPI_Init+0x240>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d004      	beq.n	8015fe4 <HAL_SPI_Init+0x8c>
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	4a6f      	ldr	r2, [pc, #444]	@ (801619c <HAL_SPI_Init+0x244>)
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	d104      	bne.n	8015fee <HAL_SPI_Init+0x96>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	2b10      	cmp	r3, #16
 8015fe8:	d901      	bls.n	8015fee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8015fea:	2301      	movs	r3, #1
 8015fec:	e0cd      	b.n	801618a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d106      	bne.n	8016008 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f000 f8cc 	bl	80161a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2202      	movs	r2, #2
 801600c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	f022 0201 	bic.w	r2, r2, #1
 801601e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	689b      	ldr	r3, [r3, #8]
 8016026:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801602a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	699b      	ldr	r3, [r3, #24]
 8016030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016034:	d119      	bne.n	801606a <HAL_SPI_Init+0x112>
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801603e:	d103      	bne.n	8016048 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8016044:	2b00      	cmp	r3, #0
 8016046:	d008      	beq.n	801605a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801604c:	2b00      	cmp	r3, #0
 801604e:	d10c      	bne.n	801606a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8016054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016058:	d107      	bne.n	801606a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	681a      	ldr	r2, [r3, #0]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8016068:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00f      	beq.n	8016096 <HAL_SPI_Init+0x13e>
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	68db      	ldr	r3, [r3, #12]
 801607a:	2b06      	cmp	r3, #6
 801607c:	d90b      	bls.n	8016096 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	430a      	orrs	r2, r1
 8016092:	601a      	str	r2, [r3, #0]
 8016094:	e007      	b.n	80160a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80160a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	69da      	ldr	r2, [r3, #28]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80160ae:	431a      	orrs	r2, r3
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	431a      	orrs	r2, r3
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160b8:	ea42 0103 	orr.w	r1, r2, r3
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	68da      	ldr	r2, [r3, #12]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	430a      	orrs	r2, r1
 80160c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160d0:	431a      	orrs	r2, r3
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160d6:	431a      	orrs	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	699b      	ldr	r3, [r3, #24]
 80160dc:	431a      	orrs	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	691b      	ldr	r3, [r3, #16]
 80160e2:	431a      	orrs	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	695b      	ldr	r3, [r3, #20]
 80160e8:	431a      	orrs	r2, r3
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6a1b      	ldr	r3, [r3, #32]
 80160ee:	431a      	orrs	r2, r3
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	431a      	orrs	r2, r3
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80160fa:	431a      	orrs	r2, r3
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	689b      	ldr	r3, [r3, #8]
 8016100:	431a      	orrs	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016106:	ea42 0103 	orr.w	r1, r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	430a      	orrs	r2, r1
 8016114:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d113      	bne.n	8016146 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	689b      	ldr	r3, [r3, #8]
 8016124:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016130:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016144:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	f022 0201 	bic.w	r2, r2, #1
 8016154:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00a      	beq.n	8016178 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	68db      	ldr	r3, [r3, #12]
 8016168:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	430a      	orrs	r2, r1
 8016176:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2200      	movs	r2, #0
 801617c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2201      	movs	r2, #1
 8016184:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8016188:	2300      	movs	r3, #0
}
 801618a:	4618      	mov	r0, r3
 801618c:	3710      	adds	r7, #16
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}
 8016192:	bf00      	nop
 8016194:	40013000 	.word	0x40013000
 8016198:	40003800 	.word	0x40003800
 801619c:	40003c00 	.word	0x40003c00

080161a0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b083      	sub	sp, #12
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80161a8:	bf00      	nop
 80161aa:	370c      	adds	r7, #12
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80161b4:	b480      	push	{r7}
 80161b6:	b085      	sub	sp, #20
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161c0:	095b      	lsrs	r3, r3, #5
 80161c2:	3301      	adds	r3, #1
 80161c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	3301      	adds	r3, #1
 80161cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	3307      	adds	r3, #7
 80161d2:	08db      	lsrs	r3, r3, #3
 80161d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	fb02 f303 	mul.w	r3, r2, r3
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3714      	adds	r7, #20
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr

080161ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80161ea:	b580      	push	{r7, lr}
 80161ec:	b082      	sub	sp, #8
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d101      	bne.n	80161fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80161f8:	2301      	movs	r3, #1
 80161fa:	e042      	b.n	8016282 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016202:	2b00      	cmp	r3, #0
 8016204:	d106      	bne.n	8016214 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2200      	movs	r2, #0
 801620a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f7f3 f9d0 	bl	80095b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2224      	movs	r2, #36	@ 0x24
 8016218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f022 0201 	bic.w	r2, r2, #1
 801622a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016230:	2b00      	cmp	r3, #0
 8016232:	d002      	beq.n	801623a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f000 fe1f 	bl	8016e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 f8b4 	bl	80163a8 <UART_SetConfig>
 8016240:	4603      	mov	r3, r0
 8016242:	2b01      	cmp	r3, #1
 8016244:	d101      	bne.n	801624a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8016246:	2301      	movs	r3, #1
 8016248:	e01b      	b.n	8016282 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	685a      	ldr	r2, [r3, #4]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8016258:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	689a      	ldr	r2, [r3, #8]
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8016268:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	681a      	ldr	r2, [r3, #0]
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	f042 0201 	orr.w	r2, r2, #1
 8016278:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 fe9e 	bl	8016fbc <UART_CheckIdleState>
 8016280:	4603      	mov	r3, r0
}
 8016282:	4618      	mov	r0, r3
 8016284:	3708      	adds	r7, #8
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b08a      	sub	sp, #40	@ 0x28
 801628e:	af02      	add	r7, sp, #8
 8016290:	60f8      	str	r0, [r7, #12]
 8016292:	60b9      	str	r1, [r7, #8]
 8016294:	603b      	str	r3, [r7, #0]
 8016296:	4613      	mov	r3, r2
 8016298:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80162a0:	2b20      	cmp	r3, #32
 80162a2:	d17b      	bne.n	801639c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d002      	beq.n	80162b0 <HAL_UART_Transmit+0x26>
 80162aa:	88fb      	ldrh	r3, [r7, #6]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d101      	bne.n	80162b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80162b0:	2301      	movs	r3, #1
 80162b2:	e074      	b.n	801639e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2200      	movs	r2, #0
 80162b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2221      	movs	r2, #33	@ 0x21
 80162c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80162c4:	f7f7 fdde 	bl	800de84 <HAL_GetTick>
 80162c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	88fa      	ldrh	r2, [r7, #6]
 80162ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	88fa      	ldrh	r2, [r7, #6]
 80162d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80162e2:	d108      	bne.n	80162f6 <HAL_UART_Transmit+0x6c>
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	691b      	ldr	r3, [r3, #16]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d104      	bne.n	80162f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80162ec:	2300      	movs	r3, #0
 80162ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	61bb      	str	r3, [r7, #24]
 80162f4:	e003      	b.n	80162fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80162fa:	2300      	movs	r3, #0
 80162fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80162fe:	e030      	b.n	8016362 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	9300      	str	r3, [sp, #0]
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	2200      	movs	r2, #0
 8016308:	2180      	movs	r1, #128	@ 0x80
 801630a:	68f8      	ldr	r0, [r7, #12]
 801630c:	f000 ff00 	bl	8017110 <UART_WaitOnFlagUntilTimeout>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	d005      	beq.n	8016322 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2220      	movs	r2, #32
 801631a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801631e:	2303      	movs	r3, #3
 8016320:	e03d      	b.n	801639e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8016322:	69fb      	ldr	r3, [r7, #28]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d10b      	bne.n	8016340 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	881b      	ldrh	r3, [r3, #0]
 801632c:	461a      	mov	r2, r3
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016336:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016338:	69bb      	ldr	r3, [r7, #24]
 801633a:	3302      	adds	r3, #2
 801633c:	61bb      	str	r3, [r7, #24]
 801633e:	e007      	b.n	8016350 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	781a      	ldrb	r2, [r3, #0]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	3301      	adds	r3, #1
 801634e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016356:	b29b      	uxth	r3, r3
 8016358:	3b01      	subs	r3, #1
 801635a:	b29a      	uxth	r2, r3
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016368:	b29b      	uxth	r3, r3
 801636a:	2b00      	cmp	r3, #0
 801636c:	d1c8      	bne.n	8016300 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	2200      	movs	r2, #0
 8016376:	2140      	movs	r1, #64	@ 0x40
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f000 fec9 	bl	8017110 <UART_WaitOnFlagUntilTimeout>
 801637e:	4603      	mov	r3, r0
 8016380:	2b00      	cmp	r3, #0
 8016382:	d005      	beq.n	8016390 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2220      	movs	r2, #32
 8016388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801638c:	2303      	movs	r3, #3
 801638e:	e006      	b.n	801639e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2220      	movs	r2, #32
 8016394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8016398:	2300      	movs	r3, #0
 801639a:	e000      	b.n	801639e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801639c:	2302      	movs	r3, #2
  }
}
 801639e:	4618      	mov	r0, r3
 80163a0:	3720      	adds	r7, #32
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
	...

080163a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80163a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80163ac:	b092      	sub	sp, #72	@ 0x48
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80163b2:	2300      	movs	r3, #0
 80163b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	689a      	ldr	r2, [r3, #8]
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	691b      	ldr	r3, [r3, #16]
 80163c0:	431a      	orrs	r2, r3
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	695b      	ldr	r3, [r3, #20]
 80163c6:	431a      	orrs	r2, r3
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	69db      	ldr	r3, [r3, #28]
 80163cc:	4313      	orrs	r3, r2
 80163ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	4bbe      	ldr	r3, [pc, #760]	@ (80166d0 <UART_SetConfig+0x328>)
 80163d8:	4013      	ands	r3, r2
 80163da:	697a      	ldr	r2, [r7, #20]
 80163dc:	6812      	ldr	r2, [r2, #0]
 80163de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80163e0:	430b      	orrs	r3, r1
 80163e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	68da      	ldr	r2, [r3, #12]
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	430a      	orrs	r2, r1
 80163f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80163fa:	697b      	ldr	r3, [r7, #20]
 80163fc:	699b      	ldr	r3, [r3, #24]
 80163fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	4ab3      	ldr	r2, [pc, #716]	@ (80166d4 <UART_SetConfig+0x32c>)
 8016406:	4293      	cmp	r3, r2
 8016408:	d004      	beq.n	8016414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	6a1b      	ldr	r3, [r3, #32]
 801640e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016410:	4313      	orrs	r3, r2
 8016412:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	689a      	ldr	r2, [r3, #8]
 801641a:	4baf      	ldr	r3, [pc, #700]	@ (80166d8 <UART_SetConfig+0x330>)
 801641c:	4013      	ands	r3, r2
 801641e:	697a      	ldr	r2, [r7, #20]
 8016420:	6812      	ldr	r2, [r2, #0]
 8016422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016424:	430b      	orrs	r3, r1
 8016426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801642e:	f023 010f 	bic.w	r1, r3, #15
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016436:	697b      	ldr	r3, [r7, #20]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	430a      	orrs	r2, r1
 801643c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4aa6      	ldr	r2, [pc, #664]	@ (80166dc <UART_SetConfig+0x334>)
 8016444:	4293      	cmp	r3, r2
 8016446:	d177      	bne.n	8016538 <UART_SetConfig+0x190>
 8016448:	4ba5      	ldr	r3, [pc, #660]	@ (80166e0 <UART_SetConfig+0x338>)
 801644a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801644c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016450:	2b28      	cmp	r3, #40	@ 0x28
 8016452:	d86d      	bhi.n	8016530 <UART_SetConfig+0x188>
 8016454:	a201      	add	r2, pc, #4	@ (adr r2, 801645c <UART_SetConfig+0xb4>)
 8016456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801645a:	bf00      	nop
 801645c:	08016501 	.word	0x08016501
 8016460:	08016531 	.word	0x08016531
 8016464:	08016531 	.word	0x08016531
 8016468:	08016531 	.word	0x08016531
 801646c:	08016531 	.word	0x08016531
 8016470:	08016531 	.word	0x08016531
 8016474:	08016531 	.word	0x08016531
 8016478:	08016531 	.word	0x08016531
 801647c:	08016509 	.word	0x08016509
 8016480:	08016531 	.word	0x08016531
 8016484:	08016531 	.word	0x08016531
 8016488:	08016531 	.word	0x08016531
 801648c:	08016531 	.word	0x08016531
 8016490:	08016531 	.word	0x08016531
 8016494:	08016531 	.word	0x08016531
 8016498:	08016531 	.word	0x08016531
 801649c:	08016511 	.word	0x08016511
 80164a0:	08016531 	.word	0x08016531
 80164a4:	08016531 	.word	0x08016531
 80164a8:	08016531 	.word	0x08016531
 80164ac:	08016531 	.word	0x08016531
 80164b0:	08016531 	.word	0x08016531
 80164b4:	08016531 	.word	0x08016531
 80164b8:	08016531 	.word	0x08016531
 80164bc:	08016519 	.word	0x08016519
 80164c0:	08016531 	.word	0x08016531
 80164c4:	08016531 	.word	0x08016531
 80164c8:	08016531 	.word	0x08016531
 80164cc:	08016531 	.word	0x08016531
 80164d0:	08016531 	.word	0x08016531
 80164d4:	08016531 	.word	0x08016531
 80164d8:	08016531 	.word	0x08016531
 80164dc:	08016521 	.word	0x08016521
 80164e0:	08016531 	.word	0x08016531
 80164e4:	08016531 	.word	0x08016531
 80164e8:	08016531 	.word	0x08016531
 80164ec:	08016531 	.word	0x08016531
 80164f0:	08016531 	.word	0x08016531
 80164f4:	08016531 	.word	0x08016531
 80164f8:	08016531 	.word	0x08016531
 80164fc:	08016529 	.word	0x08016529
 8016500:	2301      	movs	r3, #1
 8016502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016506:	e222      	b.n	801694e <UART_SetConfig+0x5a6>
 8016508:	2304      	movs	r3, #4
 801650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801650e:	e21e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016510:	2308      	movs	r3, #8
 8016512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016516:	e21a      	b.n	801694e <UART_SetConfig+0x5a6>
 8016518:	2310      	movs	r3, #16
 801651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801651e:	e216      	b.n	801694e <UART_SetConfig+0x5a6>
 8016520:	2320      	movs	r3, #32
 8016522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016526:	e212      	b.n	801694e <UART_SetConfig+0x5a6>
 8016528:	2340      	movs	r3, #64	@ 0x40
 801652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801652e:	e20e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016530:	2380      	movs	r3, #128	@ 0x80
 8016532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016536:	e20a      	b.n	801694e <UART_SetConfig+0x5a6>
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a69      	ldr	r2, [pc, #420]	@ (80166e4 <UART_SetConfig+0x33c>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d130      	bne.n	80165a4 <UART_SetConfig+0x1fc>
 8016542:	4b67      	ldr	r3, [pc, #412]	@ (80166e0 <UART_SetConfig+0x338>)
 8016544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016546:	f003 0307 	and.w	r3, r3, #7
 801654a:	2b05      	cmp	r3, #5
 801654c:	d826      	bhi.n	801659c <UART_SetConfig+0x1f4>
 801654e:	a201      	add	r2, pc, #4	@ (adr r2, 8016554 <UART_SetConfig+0x1ac>)
 8016550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016554:	0801656d 	.word	0x0801656d
 8016558:	08016575 	.word	0x08016575
 801655c:	0801657d 	.word	0x0801657d
 8016560:	08016585 	.word	0x08016585
 8016564:	0801658d 	.word	0x0801658d
 8016568:	08016595 	.word	0x08016595
 801656c:	2300      	movs	r3, #0
 801656e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016572:	e1ec      	b.n	801694e <UART_SetConfig+0x5a6>
 8016574:	2304      	movs	r3, #4
 8016576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801657a:	e1e8      	b.n	801694e <UART_SetConfig+0x5a6>
 801657c:	2308      	movs	r3, #8
 801657e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016582:	e1e4      	b.n	801694e <UART_SetConfig+0x5a6>
 8016584:	2310      	movs	r3, #16
 8016586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801658a:	e1e0      	b.n	801694e <UART_SetConfig+0x5a6>
 801658c:	2320      	movs	r3, #32
 801658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016592:	e1dc      	b.n	801694e <UART_SetConfig+0x5a6>
 8016594:	2340      	movs	r3, #64	@ 0x40
 8016596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801659a:	e1d8      	b.n	801694e <UART_SetConfig+0x5a6>
 801659c:	2380      	movs	r3, #128	@ 0x80
 801659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165a2:	e1d4      	b.n	801694e <UART_SetConfig+0x5a6>
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4a4f      	ldr	r2, [pc, #316]	@ (80166e8 <UART_SetConfig+0x340>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d130      	bne.n	8016610 <UART_SetConfig+0x268>
 80165ae:	4b4c      	ldr	r3, [pc, #304]	@ (80166e0 <UART_SetConfig+0x338>)
 80165b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80165b2:	f003 0307 	and.w	r3, r3, #7
 80165b6:	2b05      	cmp	r3, #5
 80165b8:	d826      	bhi.n	8016608 <UART_SetConfig+0x260>
 80165ba:	a201      	add	r2, pc, #4	@ (adr r2, 80165c0 <UART_SetConfig+0x218>)
 80165bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165c0:	080165d9 	.word	0x080165d9
 80165c4:	080165e1 	.word	0x080165e1
 80165c8:	080165e9 	.word	0x080165e9
 80165cc:	080165f1 	.word	0x080165f1
 80165d0:	080165f9 	.word	0x080165f9
 80165d4:	08016601 	.word	0x08016601
 80165d8:	2300      	movs	r3, #0
 80165da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165de:	e1b6      	b.n	801694e <UART_SetConfig+0x5a6>
 80165e0:	2304      	movs	r3, #4
 80165e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165e6:	e1b2      	b.n	801694e <UART_SetConfig+0x5a6>
 80165e8:	2308      	movs	r3, #8
 80165ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165ee:	e1ae      	b.n	801694e <UART_SetConfig+0x5a6>
 80165f0:	2310      	movs	r3, #16
 80165f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165f6:	e1aa      	b.n	801694e <UART_SetConfig+0x5a6>
 80165f8:	2320      	movs	r3, #32
 80165fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80165fe:	e1a6      	b.n	801694e <UART_SetConfig+0x5a6>
 8016600:	2340      	movs	r3, #64	@ 0x40
 8016602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016606:	e1a2      	b.n	801694e <UART_SetConfig+0x5a6>
 8016608:	2380      	movs	r3, #128	@ 0x80
 801660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801660e:	e19e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4a35      	ldr	r2, [pc, #212]	@ (80166ec <UART_SetConfig+0x344>)
 8016616:	4293      	cmp	r3, r2
 8016618:	d130      	bne.n	801667c <UART_SetConfig+0x2d4>
 801661a:	4b31      	ldr	r3, [pc, #196]	@ (80166e0 <UART_SetConfig+0x338>)
 801661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801661e:	f003 0307 	and.w	r3, r3, #7
 8016622:	2b05      	cmp	r3, #5
 8016624:	d826      	bhi.n	8016674 <UART_SetConfig+0x2cc>
 8016626:	a201      	add	r2, pc, #4	@ (adr r2, 801662c <UART_SetConfig+0x284>)
 8016628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801662c:	08016645 	.word	0x08016645
 8016630:	0801664d 	.word	0x0801664d
 8016634:	08016655 	.word	0x08016655
 8016638:	0801665d 	.word	0x0801665d
 801663c:	08016665 	.word	0x08016665
 8016640:	0801666d 	.word	0x0801666d
 8016644:	2300      	movs	r3, #0
 8016646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801664a:	e180      	b.n	801694e <UART_SetConfig+0x5a6>
 801664c:	2304      	movs	r3, #4
 801664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016652:	e17c      	b.n	801694e <UART_SetConfig+0x5a6>
 8016654:	2308      	movs	r3, #8
 8016656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801665a:	e178      	b.n	801694e <UART_SetConfig+0x5a6>
 801665c:	2310      	movs	r3, #16
 801665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016662:	e174      	b.n	801694e <UART_SetConfig+0x5a6>
 8016664:	2320      	movs	r3, #32
 8016666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801666a:	e170      	b.n	801694e <UART_SetConfig+0x5a6>
 801666c:	2340      	movs	r3, #64	@ 0x40
 801666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016672:	e16c      	b.n	801694e <UART_SetConfig+0x5a6>
 8016674:	2380      	movs	r3, #128	@ 0x80
 8016676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801667a:	e168      	b.n	801694e <UART_SetConfig+0x5a6>
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a1b      	ldr	r2, [pc, #108]	@ (80166f0 <UART_SetConfig+0x348>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d142      	bne.n	801670c <UART_SetConfig+0x364>
 8016686:	4b16      	ldr	r3, [pc, #88]	@ (80166e0 <UART_SetConfig+0x338>)
 8016688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801668a:	f003 0307 	and.w	r3, r3, #7
 801668e:	2b05      	cmp	r3, #5
 8016690:	d838      	bhi.n	8016704 <UART_SetConfig+0x35c>
 8016692:	a201      	add	r2, pc, #4	@ (adr r2, 8016698 <UART_SetConfig+0x2f0>)
 8016694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016698:	080166b1 	.word	0x080166b1
 801669c:	080166b9 	.word	0x080166b9
 80166a0:	080166c1 	.word	0x080166c1
 80166a4:	080166c9 	.word	0x080166c9
 80166a8:	080166f5 	.word	0x080166f5
 80166ac:	080166fd 	.word	0x080166fd
 80166b0:	2300      	movs	r3, #0
 80166b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80166b6:	e14a      	b.n	801694e <UART_SetConfig+0x5a6>
 80166b8:	2304      	movs	r3, #4
 80166ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80166be:	e146      	b.n	801694e <UART_SetConfig+0x5a6>
 80166c0:	2308      	movs	r3, #8
 80166c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80166c6:	e142      	b.n	801694e <UART_SetConfig+0x5a6>
 80166c8:	2310      	movs	r3, #16
 80166ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80166ce:	e13e      	b.n	801694e <UART_SetConfig+0x5a6>
 80166d0:	cfff69f3 	.word	0xcfff69f3
 80166d4:	58000c00 	.word	0x58000c00
 80166d8:	11fff4ff 	.word	0x11fff4ff
 80166dc:	40011000 	.word	0x40011000
 80166e0:	58024400 	.word	0x58024400
 80166e4:	40004400 	.word	0x40004400
 80166e8:	40004800 	.word	0x40004800
 80166ec:	40004c00 	.word	0x40004c00
 80166f0:	40005000 	.word	0x40005000
 80166f4:	2320      	movs	r3, #32
 80166f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80166fa:	e128      	b.n	801694e <UART_SetConfig+0x5a6>
 80166fc:	2340      	movs	r3, #64	@ 0x40
 80166fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016702:	e124      	b.n	801694e <UART_SetConfig+0x5a6>
 8016704:	2380      	movs	r3, #128	@ 0x80
 8016706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801670a:	e120      	b.n	801694e <UART_SetConfig+0x5a6>
 801670c:	697b      	ldr	r3, [r7, #20]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4acb      	ldr	r2, [pc, #812]	@ (8016a40 <UART_SetConfig+0x698>)
 8016712:	4293      	cmp	r3, r2
 8016714:	d176      	bne.n	8016804 <UART_SetConfig+0x45c>
 8016716:	4bcb      	ldr	r3, [pc, #812]	@ (8016a44 <UART_SetConfig+0x69c>)
 8016718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801671a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801671e:	2b28      	cmp	r3, #40	@ 0x28
 8016720:	d86c      	bhi.n	80167fc <UART_SetConfig+0x454>
 8016722:	a201      	add	r2, pc, #4	@ (adr r2, 8016728 <UART_SetConfig+0x380>)
 8016724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016728:	080167cd 	.word	0x080167cd
 801672c:	080167fd 	.word	0x080167fd
 8016730:	080167fd 	.word	0x080167fd
 8016734:	080167fd 	.word	0x080167fd
 8016738:	080167fd 	.word	0x080167fd
 801673c:	080167fd 	.word	0x080167fd
 8016740:	080167fd 	.word	0x080167fd
 8016744:	080167fd 	.word	0x080167fd
 8016748:	080167d5 	.word	0x080167d5
 801674c:	080167fd 	.word	0x080167fd
 8016750:	080167fd 	.word	0x080167fd
 8016754:	080167fd 	.word	0x080167fd
 8016758:	080167fd 	.word	0x080167fd
 801675c:	080167fd 	.word	0x080167fd
 8016760:	080167fd 	.word	0x080167fd
 8016764:	080167fd 	.word	0x080167fd
 8016768:	080167dd 	.word	0x080167dd
 801676c:	080167fd 	.word	0x080167fd
 8016770:	080167fd 	.word	0x080167fd
 8016774:	080167fd 	.word	0x080167fd
 8016778:	080167fd 	.word	0x080167fd
 801677c:	080167fd 	.word	0x080167fd
 8016780:	080167fd 	.word	0x080167fd
 8016784:	080167fd 	.word	0x080167fd
 8016788:	080167e5 	.word	0x080167e5
 801678c:	080167fd 	.word	0x080167fd
 8016790:	080167fd 	.word	0x080167fd
 8016794:	080167fd 	.word	0x080167fd
 8016798:	080167fd 	.word	0x080167fd
 801679c:	080167fd 	.word	0x080167fd
 80167a0:	080167fd 	.word	0x080167fd
 80167a4:	080167fd 	.word	0x080167fd
 80167a8:	080167ed 	.word	0x080167ed
 80167ac:	080167fd 	.word	0x080167fd
 80167b0:	080167fd 	.word	0x080167fd
 80167b4:	080167fd 	.word	0x080167fd
 80167b8:	080167fd 	.word	0x080167fd
 80167bc:	080167fd 	.word	0x080167fd
 80167c0:	080167fd 	.word	0x080167fd
 80167c4:	080167fd 	.word	0x080167fd
 80167c8:	080167f5 	.word	0x080167f5
 80167cc:	2301      	movs	r3, #1
 80167ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167d2:	e0bc      	b.n	801694e <UART_SetConfig+0x5a6>
 80167d4:	2304      	movs	r3, #4
 80167d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167da:	e0b8      	b.n	801694e <UART_SetConfig+0x5a6>
 80167dc:	2308      	movs	r3, #8
 80167de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167e2:	e0b4      	b.n	801694e <UART_SetConfig+0x5a6>
 80167e4:	2310      	movs	r3, #16
 80167e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167ea:	e0b0      	b.n	801694e <UART_SetConfig+0x5a6>
 80167ec:	2320      	movs	r3, #32
 80167ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167f2:	e0ac      	b.n	801694e <UART_SetConfig+0x5a6>
 80167f4:	2340      	movs	r3, #64	@ 0x40
 80167f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80167fa:	e0a8      	b.n	801694e <UART_SetConfig+0x5a6>
 80167fc:	2380      	movs	r3, #128	@ 0x80
 80167fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016802:	e0a4      	b.n	801694e <UART_SetConfig+0x5a6>
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4a8f      	ldr	r2, [pc, #572]	@ (8016a48 <UART_SetConfig+0x6a0>)
 801680a:	4293      	cmp	r3, r2
 801680c:	d130      	bne.n	8016870 <UART_SetConfig+0x4c8>
 801680e:	4b8d      	ldr	r3, [pc, #564]	@ (8016a44 <UART_SetConfig+0x69c>)
 8016810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016812:	f003 0307 	and.w	r3, r3, #7
 8016816:	2b05      	cmp	r3, #5
 8016818:	d826      	bhi.n	8016868 <UART_SetConfig+0x4c0>
 801681a:	a201      	add	r2, pc, #4	@ (adr r2, 8016820 <UART_SetConfig+0x478>)
 801681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016820:	08016839 	.word	0x08016839
 8016824:	08016841 	.word	0x08016841
 8016828:	08016849 	.word	0x08016849
 801682c:	08016851 	.word	0x08016851
 8016830:	08016859 	.word	0x08016859
 8016834:	08016861 	.word	0x08016861
 8016838:	2300      	movs	r3, #0
 801683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801683e:	e086      	b.n	801694e <UART_SetConfig+0x5a6>
 8016840:	2304      	movs	r3, #4
 8016842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016846:	e082      	b.n	801694e <UART_SetConfig+0x5a6>
 8016848:	2308      	movs	r3, #8
 801684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801684e:	e07e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016850:	2310      	movs	r3, #16
 8016852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016856:	e07a      	b.n	801694e <UART_SetConfig+0x5a6>
 8016858:	2320      	movs	r3, #32
 801685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801685e:	e076      	b.n	801694e <UART_SetConfig+0x5a6>
 8016860:	2340      	movs	r3, #64	@ 0x40
 8016862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016866:	e072      	b.n	801694e <UART_SetConfig+0x5a6>
 8016868:	2380      	movs	r3, #128	@ 0x80
 801686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801686e:	e06e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4a75      	ldr	r2, [pc, #468]	@ (8016a4c <UART_SetConfig+0x6a4>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d130      	bne.n	80168dc <UART_SetConfig+0x534>
 801687a:	4b72      	ldr	r3, [pc, #456]	@ (8016a44 <UART_SetConfig+0x69c>)
 801687c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801687e:	f003 0307 	and.w	r3, r3, #7
 8016882:	2b05      	cmp	r3, #5
 8016884:	d826      	bhi.n	80168d4 <UART_SetConfig+0x52c>
 8016886:	a201      	add	r2, pc, #4	@ (adr r2, 801688c <UART_SetConfig+0x4e4>)
 8016888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801688c:	080168a5 	.word	0x080168a5
 8016890:	080168ad 	.word	0x080168ad
 8016894:	080168b5 	.word	0x080168b5
 8016898:	080168bd 	.word	0x080168bd
 801689c:	080168c5 	.word	0x080168c5
 80168a0:	080168cd 	.word	0x080168cd
 80168a4:	2300      	movs	r3, #0
 80168a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168aa:	e050      	b.n	801694e <UART_SetConfig+0x5a6>
 80168ac:	2304      	movs	r3, #4
 80168ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168b2:	e04c      	b.n	801694e <UART_SetConfig+0x5a6>
 80168b4:	2308      	movs	r3, #8
 80168b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168ba:	e048      	b.n	801694e <UART_SetConfig+0x5a6>
 80168bc:	2310      	movs	r3, #16
 80168be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168c2:	e044      	b.n	801694e <UART_SetConfig+0x5a6>
 80168c4:	2320      	movs	r3, #32
 80168c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168ca:	e040      	b.n	801694e <UART_SetConfig+0x5a6>
 80168cc:	2340      	movs	r3, #64	@ 0x40
 80168ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168d2:	e03c      	b.n	801694e <UART_SetConfig+0x5a6>
 80168d4:	2380      	movs	r3, #128	@ 0x80
 80168d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80168da:	e038      	b.n	801694e <UART_SetConfig+0x5a6>
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	4a5b      	ldr	r2, [pc, #364]	@ (8016a50 <UART_SetConfig+0x6a8>)
 80168e2:	4293      	cmp	r3, r2
 80168e4:	d130      	bne.n	8016948 <UART_SetConfig+0x5a0>
 80168e6:	4b57      	ldr	r3, [pc, #348]	@ (8016a44 <UART_SetConfig+0x69c>)
 80168e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80168ea:	f003 0307 	and.w	r3, r3, #7
 80168ee:	2b05      	cmp	r3, #5
 80168f0:	d826      	bhi.n	8016940 <UART_SetConfig+0x598>
 80168f2:	a201      	add	r2, pc, #4	@ (adr r2, 80168f8 <UART_SetConfig+0x550>)
 80168f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168f8:	08016911 	.word	0x08016911
 80168fc:	08016919 	.word	0x08016919
 8016900:	08016921 	.word	0x08016921
 8016904:	08016929 	.word	0x08016929
 8016908:	08016931 	.word	0x08016931
 801690c:	08016939 	.word	0x08016939
 8016910:	2302      	movs	r3, #2
 8016912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016916:	e01a      	b.n	801694e <UART_SetConfig+0x5a6>
 8016918:	2304      	movs	r3, #4
 801691a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801691e:	e016      	b.n	801694e <UART_SetConfig+0x5a6>
 8016920:	2308      	movs	r3, #8
 8016922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016926:	e012      	b.n	801694e <UART_SetConfig+0x5a6>
 8016928:	2310      	movs	r3, #16
 801692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801692e:	e00e      	b.n	801694e <UART_SetConfig+0x5a6>
 8016930:	2320      	movs	r3, #32
 8016932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016936:	e00a      	b.n	801694e <UART_SetConfig+0x5a6>
 8016938:	2340      	movs	r3, #64	@ 0x40
 801693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801693e:	e006      	b.n	801694e <UART_SetConfig+0x5a6>
 8016940:	2380      	movs	r3, #128	@ 0x80
 8016942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016946:	e002      	b.n	801694e <UART_SetConfig+0x5a6>
 8016948:	2380      	movs	r3, #128	@ 0x80
 801694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4a3f      	ldr	r2, [pc, #252]	@ (8016a50 <UART_SetConfig+0x6a8>)
 8016954:	4293      	cmp	r3, r2
 8016956:	f040 80f8 	bne.w	8016b4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801695a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801695e:	2b20      	cmp	r3, #32
 8016960:	dc46      	bgt.n	80169f0 <UART_SetConfig+0x648>
 8016962:	2b02      	cmp	r3, #2
 8016964:	f2c0 8082 	blt.w	8016a6c <UART_SetConfig+0x6c4>
 8016968:	3b02      	subs	r3, #2
 801696a:	2b1e      	cmp	r3, #30
 801696c:	d87e      	bhi.n	8016a6c <UART_SetConfig+0x6c4>
 801696e:	a201      	add	r2, pc, #4	@ (adr r2, 8016974 <UART_SetConfig+0x5cc>)
 8016970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016974:	080169f7 	.word	0x080169f7
 8016978:	08016a6d 	.word	0x08016a6d
 801697c:	080169ff 	.word	0x080169ff
 8016980:	08016a6d 	.word	0x08016a6d
 8016984:	08016a6d 	.word	0x08016a6d
 8016988:	08016a6d 	.word	0x08016a6d
 801698c:	08016a0f 	.word	0x08016a0f
 8016990:	08016a6d 	.word	0x08016a6d
 8016994:	08016a6d 	.word	0x08016a6d
 8016998:	08016a6d 	.word	0x08016a6d
 801699c:	08016a6d 	.word	0x08016a6d
 80169a0:	08016a6d 	.word	0x08016a6d
 80169a4:	08016a6d 	.word	0x08016a6d
 80169a8:	08016a6d 	.word	0x08016a6d
 80169ac:	08016a1f 	.word	0x08016a1f
 80169b0:	08016a6d 	.word	0x08016a6d
 80169b4:	08016a6d 	.word	0x08016a6d
 80169b8:	08016a6d 	.word	0x08016a6d
 80169bc:	08016a6d 	.word	0x08016a6d
 80169c0:	08016a6d 	.word	0x08016a6d
 80169c4:	08016a6d 	.word	0x08016a6d
 80169c8:	08016a6d 	.word	0x08016a6d
 80169cc:	08016a6d 	.word	0x08016a6d
 80169d0:	08016a6d 	.word	0x08016a6d
 80169d4:	08016a6d 	.word	0x08016a6d
 80169d8:	08016a6d 	.word	0x08016a6d
 80169dc:	08016a6d 	.word	0x08016a6d
 80169e0:	08016a6d 	.word	0x08016a6d
 80169e4:	08016a6d 	.word	0x08016a6d
 80169e8:	08016a6d 	.word	0x08016a6d
 80169ec:	08016a5f 	.word	0x08016a5f
 80169f0:	2b40      	cmp	r3, #64	@ 0x40
 80169f2:	d037      	beq.n	8016a64 <UART_SetConfig+0x6bc>
 80169f4:	e03a      	b.n	8016a6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80169f6:	f7fd f8d7 	bl	8013ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 80169fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80169fc:	e03c      	b.n	8016a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80169fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7fd f8e6 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a0c:	e034      	b.n	8016a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016a0e:	f107 0318 	add.w	r3, r7, #24
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7fd fa32 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a1c:	e02c      	b.n	8016a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016a1e:	4b09      	ldr	r3, [pc, #36]	@ (8016a44 <UART_SetConfig+0x69c>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f003 0320 	and.w	r3, r3, #32
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d016      	beq.n	8016a58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016a2a:	4b06      	ldr	r3, [pc, #24]	@ (8016a44 <UART_SetConfig+0x69c>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	08db      	lsrs	r3, r3, #3
 8016a30:	f003 0303 	and.w	r3, r3, #3
 8016a34:	4a07      	ldr	r2, [pc, #28]	@ (8016a54 <UART_SetConfig+0x6ac>)
 8016a36:	fa22 f303 	lsr.w	r3, r2, r3
 8016a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016a3c:	e01c      	b.n	8016a78 <UART_SetConfig+0x6d0>
 8016a3e:	bf00      	nop
 8016a40:	40011400 	.word	0x40011400
 8016a44:	58024400 	.word	0x58024400
 8016a48:	40007800 	.word	0x40007800
 8016a4c:	40007c00 	.word	0x40007c00
 8016a50:	58000c00 	.word	0x58000c00
 8016a54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8016a58:	4b9d      	ldr	r3, [pc, #628]	@ (8016cd0 <UART_SetConfig+0x928>)
 8016a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a5c:	e00c      	b.n	8016a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8016cd4 <UART_SetConfig+0x92c>)
 8016a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a62:	e009      	b.n	8016a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a6a:	e005      	b.n	8016a78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8016a70:	2301      	movs	r3, #1
 8016a72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8016a76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f000 81de 	beq.w	8016e3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a84:	4a94      	ldr	r2, [pc, #592]	@ (8016cd8 <UART_SetConfig+0x930>)
 8016a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	685a      	ldr	r2, [r3, #4]
 8016a98:	4613      	mov	r3, r2
 8016a9a:	005b      	lsls	r3, r3, #1
 8016a9c:	4413      	add	r3, r2
 8016a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d305      	bcc.n	8016ab0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d903      	bls.n	8016ab8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8016ab6:	e1c1      	b.n	8016e3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016aba:	2200      	movs	r2, #0
 8016abc:	60bb      	str	r3, [r7, #8]
 8016abe:	60fa      	str	r2, [r7, #12]
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ac4:	4a84      	ldr	r2, [pc, #528]	@ (8016cd8 <UART_SetConfig+0x930>)
 8016ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	2200      	movs	r2, #0
 8016ace:	603b      	str	r3, [r7, #0]
 8016ad0:	607a      	str	r2, [r7, #4]
 8016ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016ada:	f7e9 ff33 	bl	8000944 <__aeabi_uldivmod>
 8016ade:	4602      	mov	r2, r0
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	4610      	mov	r0, r2
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	f04f 0200 	mov.w	r2, #0
 8016aea:	f04f 0300 	mov.w	r3, #0
 8016aee:	020b      	lsls	r3, r1, #8
 8016af0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016af4:	0202      	lsls	r2, r0, #8
 8016af6:	6979      	ldr	r1, [r7, #20]
 8016af8:	6849      	ldr	r1, [r1, #4]
 8016afa:	0849      	lsrs	r1, r1, #1
 8016afc:	2000      	movs	r0, #0
 8016afe:	460c      	mov	r4, r1
 8016b00:	4605      	mov	r5, r0
 8016b02:	eb12 0804 	adds.w	r8, r2, r4
 8016b06:	eb43 0905 	adc.w	r9, r3, r5
 8016b0a:	697b      	ldr	r3, [r7, #20]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	469a      	mov	sl, r3
 8016b12:	4693      	mov	fp, r2
 8016b14:	4652      	mov	r2, sl
 8016b16:	465b      	mov	r3, fp
 8016b18:	4640      	mov	r0, r8
 8016b1a:	4649      	mov	r1, r9
 8016b1c:	f7e9 ff12 	bl	8000944 <__aeabi_uldivmod>
 8016b20:	4602      	mov	r2, r0
 8016b22:	460b      	mov	r3, r1
 8016b24:	4613      	mov	r3, r2
 8016b26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b2e:	d308      	bcc.n	8016b42 <UART_SetConfig+0x79a>
 8016b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b36:	d204      	bcs.n	8016b42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016b3e:	60da      	str	r2, [r3, #12]
 8016b40:	e17c      	b.n	8016e3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8016b42:	2301      	movs	r3, #1
 8016b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8016b48:	e178      	b.n	8016e3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	69db      	ldr	r3, [r3, #28]
 8016b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016b52:	f040 80c5 	bne.w	8016ce0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8016b56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016b5a:	2b20      	cmp	r3, #32
 8016b5c:	dc48      	bgt.n	8016bf0 <UART_SetConfig+0x848>
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	db7b      	blt.n	8016c5a <UART_SetConfig+0x8b2>
 8016b62:	2b20      	cmp	r3, #32
 8016b64:	d879      	bhi.n	8016c5a <UART_SetConfig+0x8b2>
 8016b66:	a201      	add	r2, pc, #4	@ (adr r2, 8016b6c <UART_SetConfig+0x7c4>)
 8016b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6c:	08016bf7 	.word	0x08016bf7
 8016b70:	08016bff 	.word	0x08016bff
 8016b74:	08016c5b 	.word	0x08016c5b
 8016b78:	08016c5b 	.word	0x08016c5b
 8016b7c:	08016c07 	.word	0x08016c07
 8016b80:	08016c5b 	.word	0x08016c5b
 8016b84:	08016c5b 	.word	0x08016c5b
 8016b88:	08016c5b 	.word	0x08016c5b
 8016b8c:	08016c17 	.word	0x08016c17
 8016b90:	08016c5b 	.word	0x08016c5b
 8016b94:	08016c5b 	.word	0x08016c5b
 8016b98:	08016c5b 	.word	0x08016c5b
 8016b9c:	08016c5b 	.word	0x08016c5b
 8016ba0:	08016c5b 	.word	0x08016c5b
 8016ba4:	08016c5b 	.word	0x08016c5b
 8016ba8:	08016c5b 	.word	0x08016c5b
 8016bac:	08016c27 	.word	0x08016c27
 8016bb0:	08016c5b 	.word	0x08016c5b
 8016bb4:	08016c5b 	.word	0x08016c5b
 8016bb8:	08016c5b 	.word	0x08016c5b
 8016bbc:	08016c5b 	.word	0x08016c5b
 8016bc0:	08016c5b 	.word	0x08016c5b
 8016bc4:	08016c5b 	.word	0x08016c5b
 8016bc8:	08016c5b 	.word	0x08016c5b
 8016bcc:	08016c5b 	.word	0x08016c5b
 8016bd0:	08016c5b 	.word	0x08016c5b
 8016bd4:	08016c5b 	.word	0x08016c5b
 8016bd8:	08016c5b 	.word	0x08016c5b
 8016bdc:	08016c5b 	.word	0x08016c5b
 8016be0:	08016c5b 	.word	0x08016c5b
 8016be4:	08016c5b 	.word	0x08016c5b
 8016be8:	08016c5b 	.word	0x08016c5b
 8016bec:	08016c4d 	.word	0x08016c4d
 8016bf0:	2b40      	cmp	r3, #64	@ 0x40
 8016bf2:	d02e      	beq.n	8016c52 <UART_SetConfig+0x8aa>
 8016bf4:	e031      	b.n	8016c5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016bf6:	f7fb f821 	bl	8011c3c <HAL_RCC_GetPCLK1Freq>
 8016bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016bfc:	e033      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016bfe:	f7fb f833 	bl	8011c68 <HAL_RCC_GetPCLK2Freq>
 8016c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016c04:	e02f      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7fc ffe2 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c14:	e027      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016c16:	f107 0318 	add.w	r3, r7, #24
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7fd f92e 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016c20:	69fb      	ldr	r3, [r7, #28]
 8016c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c24:	e01f      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016c26:	4b2d      	ldr	r3, [pc, #180]	@ (8016cdc <UART_SetConfig+0x934>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f003 0320 	and.w	r3, r3, #32
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d009      	beq.n	8016c46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016c32:	4b2a      	ldr	r3, [pc, #168]	@ (8016cdc <UART_SetConfig+0x934>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	08db      	lsrs	r3, r3, #3
 8016c38:	f003 0303 	and.w	r3, r3, #3
 8016c3c:	4a24      	ldr	r2, [pc, #144]	@ (8016cd0 <UART_SetConfig+0x928>)
 8016c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8016c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016c44:	e00f      	b.n	8016c66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8016c46:	4b22      	ldr	r3, [pc, #136]	@ (8016cd0 <UART_SetConfig+0x928>)
 8016c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c4a:	e00c      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016c4c:	4b21      	ldr	r3, [pc, #132]	@ (8016cd4 <UART_SetConfig+0x92c>)
 8016c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c50:	e009      	b.n	8016c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c58:	e005      	b.n	8016c66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8016c5e:	2301      	movs	r3, #1
 8016c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8016c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f000 80e7 	beq.w	8016e3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c72:	4a19      	ldr	r2, [pc, #100]	@ (8016cd8 <UART_SetConfig+0x930>)
 8016c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016c78:	461a      	mov	r2, r3
 8016c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c80:	005a      	lsls	r2, r3, #1
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	085b      	lsrs	r3, r3, #1
 8016c88:	441a      	add	r2, r3
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c96:	2b0f      	cmp	r3, #15
 8016c98:	d916      	bls.n	8016cc8 <UART_SetConfig+0x920>
 8016c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016ca0:	d212      	bcs.n	8016cc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	f023 030f 	bic.w	r3, r3, #15
 8016caa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cae:	085b      	lsrs	r3, r3, #1
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016cba:	4313      	orrs	r3, r2
 8016cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8016cc4:	60da      	str	r2, [r3, #12]
 8016cc6:	e0b9      	b.n	8016e3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8016cce:	e0b5      	b.n	8016e3c <UART_SetConfig+0xa94>
 8016cd0:	03d09000 	.word	0x03d09000
 8016cd4:	003d0900 	.word	0x003d0900
 8016cd8:	0801cc3c 	.word	0x0801cc3c
 8016cdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8016ce0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016ce4:	2b20      	cmp	r3, #32
 8016ce6:	dc49      	bgt.n	8016d7c <UART_SetConfig+0x9d4>
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	db7c      	blt.n	8016de6 <UART_SetConfig+0xa3e>
 8016cec:	2b20      	cmp	r3, #32
 8016cee:	d87a      	bhi.n	8016de6 <UART_SetConfig+0xa3e>
 8016cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8016cf8 <UART_SetConfig+0x950>)
 8016cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cf6:	bf00      	nop
 8016cf8:	08016d83 	.word	0x08016d83
 8016cfc:	08016d8b 	.word	0x08016d8b
 8016d00:	08016de7 	.word	0x08016de7
 8016d04:	08016de7 	.word	0x08016de7
 8016d08:	08016d93 	.word	0x08016d93
 8016d0c:	08016de7 	.word	0x08016de7
 8016d10:	08016de7 	.word	0x08016de7
 8016d14:	08016de7 	.word	0x08016de7
 8016d18:	08016da3 	.word	0x08016da3
 8016d1c:	08016de7 	.word	0x08016de7
 8016d20:	08016de7 	.word	0x08016de7
 8016d24:	08016de7 	.word	0x08016de7
 8016d28:	08016de7 	.word	0x08016de7
 8016d2c:	08016de7 	.word	0x08016de7
 8016d30:	08016de7 	.word	0x08016de7
 8016d34:	08016de7 	.word	0x08016de7
 8016d38:	08016db3 	.word	0x08016db3
 8016d3c:	08016de7 	.word	0x08016de7
 8016d40:	08016de7 	.word	0x08016de7
 8016d44:	08016de7 	.word	0x08016de7
 8016d48:	08016de7 	.word	0x08016de7
 8016d4c:	08016de7 	.word	0x08016de7
 8016d50:	08016de7 	.word	0x08016de7
 8016d54:	08016de7 	.word	0x08016de7
 8016d58:	08016de7 	.word	0x08016de7
 8016d5c:	08016de7 	.word	0x08016de7
 8016d60:	08016de7 	.word	0x08016de7
 8016d64:	08016de7 	.word	0x08016de7
 8016d68:	08016de7 	.word	0x08016de7
 8016d6c:	08016de7 	.word	0x08016de7
 8016d70:	08016de7 	.word	0x08016de7
 8016d74:	08016de7 	.word	0x08016de7
 8016d78:	08016dd9 	.word	0x08016dd9
 8016d7c:	2b40      	cmp	r3, #64	@ 0x40
 8016d7e:	d02e      	beq.n	8016dde <UART_SetConfig+0xa36>
 8016d80:	e031      	b.n	8016de6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d82:	f7fa ff5b 	bl	8011c3c <HAL_RCC_GetPCLK1Freq>
 8016d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016d88:	e033      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016d8a:	f7fa ff6d 	bl	8011c68 <HAL_RCC_GetPCLK2Freq>
 8016d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016d90:	e02f      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7fc ff1c 	bl	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016da0:	e027      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016da2:	f107 0318 	add.w	r3, r7, #24
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7fd f868 	bl	8013e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016db0:	e01f      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016db2:	4b2d      	ldr	r3, [pc, #180]	@ (8016e68 <UART_SetConfig+0xac0>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	f003 0320 	and.w	r3, r3, #32
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d009      	beq.n	8016dd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8016e68 <UART_SetConfig+0xac0>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	08db      	lsrs	r3, r3, #3
 8016dc4:	f003 0303 	and.w	r3, r3, #3
 8016dc8:	4a28      	ldr	r2, [pc, #160]	@ (8016e6c <UART_SetConfig+0xac4>)
 8016dca:	fa22 f303 	lsr.w	r3, r2, r3
 8016dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016dd0:	e00f      	b.n	8016df2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8016dd2:	4b26      	ldr	r3, [pc, #152]	@ (8016e6c <UART_SetConfig+0xac4>)
 8016dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016dd6:	e00c      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016dd8:	4b25      	ldr	r3, [pc, #148]	@ (8016e70 <UART_SetConfig+0xac8>)
 8016dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016ddc:	e009      	b.n	8016df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016de4:	e005      	b.n	8016df2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8016de6:	2300      	movs	r3, #0
 8016de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8016dea:	2301      	movs	r3, #1
 8016dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8016df0:	bf00      	nop
    }

    if (pclk != 0U)
 8016df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d021      	beq.n	8016e3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8016e74 <UART_SetConfig+0xacc>)
 8016dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016e02:	461a      	mov	r2, r3
 8016e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	085b      	lsrs	r3, r3, #1
 8016e10:	441a      	add	r2, r3
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e1e:	2b0f      	cmp	r3, #15
 8016e20:	d909      	bls.n	8016e36 <UART_SetConfig+0xa8e>
 8016e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016e28:	d205      	bcs.n	8016e36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	60da      	str	r2, [r3, #12]
 8016e34:	e002      	b.n	8016e3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016e36:	2301      	movs	r3, #1
 8016e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	2201      	movs	r2, #1
 8016e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	2201      	movs	r2, #1
 8016e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	2200      	movs	r2, #0
 8016e50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	2200      	movs	r2, #0
 8016e56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016e58:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3748      	adds	r7, #72	@ 0x48
 8016e60:	46bd      	mov	sp, r7
 8016e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016e66:	bf00      	nop
 8016e68:	58024400 	.word	0x58024400
 8016e6c:	03d09000 	.word	0x03d09000
 8016e70:	003d0900 	.word	0x003d0900
 8016e74:	0801cc3c 	.word	0x0801cc3c

08016e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016e78:	b480      	push	{r7}
 8016e7a:	b083      	sub	sp, #12
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e84:	f003 0308 	and.w	r3, r3, #8
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d00a      	beq.n	8016ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	430a      	orrs	r2, r1
 8016ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ea6:	f003 0301 	and.w	r3, r3, #1
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00a      	beq.n	8016ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	430a      	orrs	r2, r1
 8016ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ec8:	f003 0302 	and.w	r3, r3, #2
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00a      	beq.n	8016ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	430a      	orrs	r2, r1
 8016ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eea:	f003 0304 	and.w	r3, r3, #4
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00a      	beq.n	8016f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	430a      	orrs	r2, r1
 8016f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f0c:	f003 0310 	and.w	r3, r3, #16
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00a      	beq.n	8016f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	689b      	ldr	r3, [r3, #8]
 8016f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	430a      	orrs	r2, r1
 8016f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f2e:	f003 0320 	and.w	r3, r3, #32
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d00a      	beq.n	8016f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	430a      	orrs	r2, r1
 8016f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d01a      	beq.n	8016f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	430a      	orrs	r2, r1
 8016f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f76:	d10a      	bne.n	8016f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	430a      	orrs	r2, r1
 8016f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d00a      	beq.n	8016fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	430a      	orrs	r2, r1
 8016fae:	605a      	str	r2, [r3, #4]
  }
}
 8016fb0:	bf00      	nop
 8016fb2:	370c      	adds	r7, #12
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fba:	4770      	bx	lr

08016fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b098      	sub	sp, #96	@ 0x60
 8016fc0:	af02      	add	r7, sp, #8
 8016fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016fcc:	f7f6 ff5a 	bl	800de84 <HAL_GetTick>
 8016fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	f003 0308 	and.w	r3, r3, #8
 8016fdc:	2b08      	cmp	r3, #8
 8016fde:	d12f      	bne.n	8017040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016fe4:	9300      	str	r3, [sp, #0]
 8016fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fe8:	2200      	movs	r2, #0
 8016fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 f88e 	bl	8017110 <UART_WaitOnFlagUntilTimeout>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d022      	beq.n	8017040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017002:	e853 3f00 	ldrex	r3, [r3]
 8017006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801700a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	461a      	mov	r2, r3
 8017016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017018:	647b      	str	r3, [r7, #68]	@ 0x44
 801701a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801701c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801701e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017020:	e841 2300 	strex	r3, r2, [r1]
 8017024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017028:	2b00      	cmp	r3, #0
 801702a:	d1e6      	bne.n	8016ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2220      	movs	r2, #32
 8017030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2200      	movs	r2, #0
 8017038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801703c:	2303      	movs	r3, #3
 801703e:	e063      	b.n	8017108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	f003 0304 	and.w	r3, r3, #4
 801704a:	2b04      	cmp	r3, #4
 801704c:	d149      	bne.n	80170e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801704e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017056:	2200      	movs	r2, #0
 8017058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801705c:	6878      	ldr	r0, [r7, #4]
 801705e:	f000 f857 	bl	8017110 <UART_WaitOnFlagUntilTimeout>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	d03c      	beq.n	80170e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017070:	e853 3f00 	ldrex	r3, [r3]
 8017074:	623b      	str	r3, [r7, #32]
   return(result);
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	461a      	mov	r2, r3
 8017084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017086:	633b      	str	r3, [r7, #48]	@ 0x30
 8017088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801708a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801708c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801708e:	e841 2300 	strex	r3, r2, [r1]
 8017092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017096:	2b00      	cmp	r3, #0
 8017098:	d1e6      	bne.n	8017068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	3308      	adds	r3, #8
 80170a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	e853 3f00 	ldrex	r3, [r3]
 80170a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	f023 0301 	bic.w	r3, r3, #1
 80170b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	3308      	adds	r3, #8
 80170b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80170ba:	61fa      	str	r2, [r7, #28]
 80170bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170be:	69b9      	ldr	r1, [r7, #24]
 80170c0:	69fa      	ldr	r2, [r7, #28]
 80170c2:	e841 2300 	strex	r3, r2, [r1]
 80170c6:	617b      	str	r3, [r7, #20]
   return(result);
 80170c8:	697b      	ldr	r3, [r7, #20]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d1e5      	bne.n	801709a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2220      	movs	r2, #32
 80170d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2200      	movs	r2, #0
 80170da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80170de:	2303      	movs	r3, #3
 80170e0:	e012      	b.n	8017108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2220      	movs	r2, #32
 80170e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2220      	movs	r2, #32
 80170ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2200      	movs	r2, #0
 80170f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2200      	movs	r2, #0
 80170fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	2200      	movs	r2, #0
 8017102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017106:	2300      	movs	r3, #0
}
 8017108:	4618      	mov	r0, r3
 801710a:	3758      	adds	r7, #88	@ 0x58
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b084      	sub	sp, #16
 8017114:	af00      	add	r7, sp, #0
 8017116:	60f8      	str	r0, [r7, #12]
 8017118:	60b9      	str	r1, [r7, #8]
 801711a:	603b      	str	r3, [r7, #0]
 801711c:	4613      	mov	r3, r2
 801711e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017120:	e04f      	b.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017122:	69bb      	ldr	r3, [r7, #24]
 8017124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017128:	d04b      	beq.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801712a:	f7f6 feab 	bl	800de84 <HAL_GetTick>
 801712e:	4602      	mov	r2, r0
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	1ad3      	subs	r3, r2, r3
 8017134:	69ba      	ldr	r2, [r7, #24]
 8017136:	429a      	cmp	r2, r3
 8017138:	d302      	bcc.n	8017140 <UART_WaitOnFlagUntilTimeout+0x30>
 801713a:	69bb      	ldr	r3, [r7, #24]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d101      	bne.n	8017144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8017140:	2303      	movs	r3, #3
 8017142:	e04e      	b.n	80171e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	f003 0304 	and.w	r3, r3, #4
 801714e:	2b00      	cmp	r3, #0
 8017150:	d037      	beq.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	2b80      	cmp	r3, #128	@ 0x80
 8017156:	d034      	beq.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	2b40      	cmp	r3, #64	@ 0x40
 801715c:	d031      	beq.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	69db      	ldr	r3, [r3, #28]
 8017164:	f003 0308 	and.w	r3, r3, #8
 8017168:	2b08      	cmp	r3, #8
 801716a:	d110      	bne.n	801718e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	2208      	movs	r2, #8
 8017172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017174:	68f8      	ldr	r0, [r7, #12]
 8017176:	f000 f839 	bl	80171ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	2208      	movs	r2, #8
 801717e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	2200      	movs	r2, #0
 8017186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801718a:	2301      	movs	r3, #1
 801718c:	e029      	b.n	80171e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	69db      	ldr	r3, [r3, #28]
 8017194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801719c:	d111      	bne.n	80171c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80171a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f000 f81f 	bl	80171ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	2220      	movs	r2, #32
 80171b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	2200      	movs	r2, #0
 80171ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80171be:	2303      	movs	r3, #3
 80171c0:	e00f      	b.n	80171e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	69da      	ldr	r2, [r3, #28]
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	4013      	ands	r3, r2
 80171cc:	68ba      	ldr	r2, [r7, #8]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	bf0c      	ite	eq
 80171d2:	2301      	moveq	r3, #1
 80171d4:	2300      	movne	r3, #0
 80171d6:	b2db      	uxtb	r3, r3
 80171d8:	461a      	mov	r2, r3
 80171da:	79fb      	ldrb	r3, [r7, #7]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d0a0      	beq.n	8017122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80171e0:	2300      	movs	r3, #0
}
 80171e2:	4618      	mov	r0, r3
 80171e4:	3710      	adds	r7, #16
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
	...

080171ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b095      	sub	sp, #84	@ 0x54
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171fc:	e853 3f00 	ldrex	r3, [r3]
 8017200:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	461a      	mov	r2, r3
 8017210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017212:	643b      	str	r3, [r7, #64]	@ 0x40
 8017214:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017216:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801721a:	e841 2300 	strex	r3, r2, [r1]
 801721e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017222:	2b00      	cmp	r3, #0
 8017224:	d1e6      	bne.n	80171f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	3308      	adds	r3, #8
 801722c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801722e:	6a3b      	ldr	r3, [r7, #32]
 8017230:	e853 3f00 	ldrex	r3, [r3]
 8017234:	61fb      	str	r3, [r7, #28]
   return(result);
 8017236:	69fa      	ldr	r2, [r7, #28]
 8017238:	4b1e      	ldr	r3, [pc, #120]	@ (80172b4 <UART_EndRxTransfer+0xc8>)
 801723a:	4013      	ands	r3, r2
 801723c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	3308      	adds	r3, #8
 8017244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801724a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801724c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801724e:	e841 2300 	strex	r3, r2, [r1]
 8017252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017256:	2b00      	cmp	r3, #0
 8017258:	d1e5      	bne.n	8017226 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801725e:	2b01      	cmp	r3, #1
 8017260:	d118      	bne.n	8017294 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	e853 3f00 	ldrex	r3, [r3]
 801726e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	f023 0310 	bic.w	r3, r3, #16
 8017276:	647b      	str	r3, [r7, #68]	@ 0x44
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	461a      	mov	r2, r3
 801727e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017280:	61bb      	str	r3, [r7, #24]
 8017282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017284:	6979      	ldr	r1, [r7, #20]
 8017286:	69ba      	ldr	r2, [r7, #24]
 8017288:	e841 2300 	strex	r3, r2, [r1]
 801728c:	613b      	str	r3, [r7, #16]
   return(result);
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d1e6      	bne.n	8017262 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2220      	movs	r2, #32
 8017298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2200      	movs	r2, #0
 80172a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2200      	movs	r2, #0
 80172a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80172a8:	bf00      	nop
 80172aa:	3754      	adds	r7, #84	@ 0x54
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr
 80172b4:	effffffe 	.word	0xeffffffe

080172b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80172b8:	b480      	push	{r7}
 80172ba:	b085      	sub	sp, #20
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d101      	bne.n	80172ce <HAL_UARTEx_DisableFifoMode+0x16>
 80172ca:	2302      	movs	r3, #2
 80172cc:	e027      	b.n	801731e <HAL_UARTEx_DisableFifoMode+0x66>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2201      	movs	r2, #1
 80172d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2224      	movs	r2, #36	@ 0x24
 80172da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	681a      	ldr	r2, [r3, #0]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f022 0201 	bic.w	r2, r2, #1
 80172f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80172fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2200      	movs	r2, #0
 8017302:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	68fa      	ldr	r2, [r7, #12]
 801730a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2220      	movs	r2, #32
 8017310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2200      	movs	r2, #0
 8017318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801731c:	2300      	movs	r3, #0
}
 801731e:	4618      	mov	r0, r3
 8017320:	3714      	adds	r7, #20
 8017322:	46bd      	mov	sp, r7
 8017324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017328:	4770      	bx	lr

0801732a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801732a:	b580      	push	{r7, lr}
 801732c:	b084      	sub	sp, #16
 801732e:	af00      	add	r7, sp, #0
 8017330:	6078      	str	r0, [r7, #4]
 8017332:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801733a:	2b01      	cmp	r3, #1
 801733c:	d101      	bne.n	8017342 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801733e:	2302      	movs	r3, #2
 8017340:	e02d      	b.n	801739e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2201      	movs	r2, #1
 8017346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2224      	movs	r2, #36	@ 0x24
 801734e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f022 0201 	bic.w	r2, r2, #1
 8017368:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	689b      	ldr	r3, [r3, #8]
 8017370:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	683a      	ldr	r2, [r7, #0]
 801737a:	430a      	orrs	r2, r1
 801737c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 f850 	bl	8017424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68fa      	ldr	r2, [r7, #12]
 801738a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2220      	movs	r2, #32
 8017390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2200      	movs	r2, #0
 8017398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801739c:	2300      	movs	r3, #0
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3710      	adds	r7, #16
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}

080173a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80173a6:	b580      	push	{r7, lr}
 80173a8:	b084      	sub	sp, #16
 80173aa:	af00      	add	r7, sp, #0
 80173ac:	6078      	str	r0, [r7, #4]
 80173ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d101      	bne.n	80173be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80173ba:	2302      	movs	r3, #2
 80173bc:	e02d      	b.n	801741a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2201      	movs	r2, #1
 80173c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2224      	movs	r2, #36	@ 0x24
 80173ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	f022 0201 	bic.w	r2, r2, #1
 80173e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	689b      	ldr	r3, [r3, #8]
 80173ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	683a      	ldr	r2, [r7, #0]
 80173f6:	430a      	orrs	r2, r1
 80173f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f000 f812 	bl	8017424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2220      	movs	r2, #32
 801740c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2200      	movs	r2, #0
 8017414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017418:	2300      	movs	r3, #0
}
 801741a:	4618      	mov	r0, r3
 801741c:	3710      	adds	r7, #16
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
	...

08017424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017424:	b480      	push	{r7}
 8017426:	b085      	sub	sp, #20
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017430:	2b00      	cmp	r3, #0
 8017432:	d108      	bne.n	8017446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2201      	movs	r2, #1
 8017438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2201      	movs	r2, #1
 8017440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017444:	e031      	b.n	80174aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8017446:	2310      	movs	r3, #16
 8017448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801744a:	2310      	movs	r3, #16
 801744c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	689b      	ldr	r3, [r3, #8]
 8017454:	0e5b      	lsrs	r3, r3, #25
 8017456:	b2db      	uxtb	r3, r3
 8017458:	f003 0307 	and.w	r3, r3, #7
 801745c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	689b      	ldr	r3, [r3, #8]
 8017464:	0f5b      	lsrs	r3, r3, #29
 8017466:	b2db      	uxtb	r3, r3
 8017468:	f003 0307 	and.w	r3, r3, #7
 801746c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801746e:	7bbb      	ldrb	r3, [r7, #14]
 8017470:	7b3a      	ldrb	r2, [r7, #12]
 8017472:	4911      	ldr	r1, [pc, #68]	@ (80174b8 <UARTEx_SetNbDataToProcess+0x94>)
 8017474:	5c8a      	ldrb	r2, [r1, r2]
 8017476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801747a:	7b3a      	ldrb	r2, [r7, #12]
 801747c:	490f      	ldr	r1, [pc, #60]	@ (80174bc <UARTEx_SetNbDataToProcess+0x98>)
 801747e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017480:	fb93 f3f2 	sdiv	r3, r3, r2
 8017484:	b29a      	uxth	r2, r3
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801748c:	7bfb      	ldrb	r3, [r7, #15]
 801748e:	7b7a      	ldrb	r2, [r7, #13]
 8017490:	4909      	ldr	r1, [pc, #36]	@ (80174b8 <UARTEx_SetNbDataToProcess+0x94>)
 8017492:	5c8a      	ldrb	r2, [r1, r2]
 8017494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017498:	7b7a      	ldrb	r2, [r7, #13]
 801749a:	4908      	ldr	r1, [pc, #32]	@ (80174bc <UARTEx_SetNbDataToProcess+0x98>)
 801749c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801749e:	fb93 f3f2 	sdiv	r3, r3, r2
 80174a2:	b29a      	uxth	r2, r3
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80174aa:	bf00      	nop
 80174ac:	3714      	adds	r7, #20
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop
 80174b8:	0801cc54 	.word	0x0801cc54
 80174bc:	0801cc5c 	.word	0x0801cc5c

080174c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80174c0:	b084      	sub	sp, #16
 80174c2:	b480      	push	{r7}
 80174c4:	b085      	sub	sp, #20
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	6078      	str	r0, [r7, #4]
 80174ca:	f107 001c 	add.w	r0, r7, #28
 80174ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80174d2:	2300      	movs	r3, #0
 80174d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80174d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80174d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80174da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80174dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80174de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80174e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80174e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80174e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80174e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	4313      	orrs	r3, r2
 80174ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	685a      	ldr	r2, [r3, #4]
 80174f2:	4b07      	ldr	r3, [pc, #28]	@ (8017510 <SDMMC_Init+0x50>)
 80174f4:	4013      	ands	r3, r2
 80174f6:	68fa      	ldr	r2, [r7, #12]
 80174f8:	431a      	orrs	r2, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80174fe:	2300      	movs	r3, #0
}
 8017500:	4618      	mov	r0, r3
 8017502:	3714      	adds	r7, #20
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	b004      	add	sp, #16
 801750c:	4770      	bx	lr
 801750e:	bf00      	nop
 8017510:	ffc02c00 	.word	0xffc02c00

08017514 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8017522:	4618      	mov	r0, r3
 8017524:	370c      	adds	r7, #12
 8017526:	46bd      	mov	sp, r7
 8017528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752c:	4770      	bx	lr

0801752e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801752e:	b480      	push	{r7}
 8017530:	b083      	sub	sp, #12
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
 8017536:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8017542:	2300      	movs	r3, #0
}
 8017544:	4618      	mov	r0, r3
 8017546:	370c      	adds	r7, #12
 8017548:	46bd      	mov	sp, r7
 801754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754e:	4770      	bx	lr

08017550 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	f043 0203 	orr.w	r2, r3, #3
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8017564:	2300      	movs	r3, #0
}
 8017566:	4618      	mov	r0, r3
 8017568:	370c      	adds	r7, #12
 801756a:	46bd      	mov	sp, r7
 801756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017570:	4770      	bx	lr

08017572 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8017572:	b480      	push	{r7}
 8017574:	b083      	sub	sp, #12
 8017576:	af00      	add	r7, sp, #0
 8017578:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	f003 0303 	and.w	r3, r3, #3
}
 8017582:	4618      	mov	r0, r3
 8017584:	370c      	adds	r7, #12
 8017586:	46bd      	mov	sp, r7
 8017588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758c:	4770      	bx	lr
	...

08017590 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8017590:	b480      	push	{r7}
 8017592:	b085      	sub	sp, #20
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801759a:	2300      	movs	r3, #0
 801759c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80175ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80175b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80175ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80175bc:	68fa      	ldr	r2, [r7, #12]
 80175be:	4313      	orrs	r3, r2
 80175c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	68da      	ldr	r2, [r3, #12]
 80175c6:	4b06      	ldr	r3, [pc, #24]	@ (80175e0 <SDMMC_SendCommand+0x50>)
 80175c8:	4013      	ands	r3, r2
 80175ca:	68fa      	ldr	r2, [r7, #12]
 80175cc:	431a      	orrs	r2, r3
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3714      	adds	r7, #20
 80175d8:	46bd      	mov	sp, r7
 80175da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175de:	4770      	bx	lr
 80175e0:	fffee0c0 	.word	0xfffee0c0

080175e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	691b      	ldr	r3, [r3, #16]
 80175f0:	b2db      	uxtb	r3, r3
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	370c      	adds	r7, #12
 80175f6:	46bd      	mov	sp, r7
 80175f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fc:	4770      	bx	lr

080175fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80175fe:	b480      	push	{r7}
 8017600:	b085      	sub	sp, #20
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
 8017606:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	3314      	adds	r3, #20
 801760c:	461a      	mov	r2, r3
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	4413      	add	r3, r2
 8017612:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	681b      	ldr	r3, [r3, #0]
}
 8017618:	4618      	mov	r0, r3
 801761a:	3714      	adds	r7, #20
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8017624:	b480      	push	{r7}
 8017626:	b085      	sub	sp, #20
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	685a      	ldr	r2, [r3, #4]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801764a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8017650:	431a      	orrs	r2, r3
                       Data->DPSM);
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8017656:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	4313      	orrs	r3, r2
 801765c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017662:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	431a      	orrs	r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801766e:	2300      	movs	r3, #0

}
 8017670:	4618      	mov	r0, r3
 8017672:	3714      	adds	r7, #20
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b088      	sub	sp, #32
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801768a:	2310      	movs	r3, #16
 801768c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801768e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017694:	2300      	movs	r3, #0
 8017696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801769c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801769e:	f107 0308 	add.w	r3, r7, #8
 80176a2:	4619      	mov	r1, r3
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7ff ff73 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80176aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80176ae:	2110      	movs	r1, #16
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f000 fa5f 	bl	8017b74 <SDMMC_GetCmdResp1>
 80176b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80176b8:	69fb      	ldr	r3, [r7, #28]
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3720      	adds	r7, #32
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b088      	sub	sp, #32
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
 80176ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80176d0:	2311      	movs	r3, #17
 80176d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80176d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80176d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80176da:	2300      	movs	r3, #0
 80176dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80176de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80176e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80176e4:	f107 0308 	add.w	r3, r7, #8
 80176e8:	4619      	mov	r1, r3
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f7ff ff50 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80176f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80176f4:	2111      	movs	r1, #17
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 fa3c 	bl	8017b74 <SDMMC_GetCmdResp1>
 80176fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80176fe:	69fb      	ldr	r3, [r7, #28]
}
 8017700:	4618      	mov	r0, r3
 8017702:	3720      	adds	r7, #32
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b088      	sub	sp, #32
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8017716:	2312      	movs	r3, #18
 8017718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801771a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801771e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017720:	2300      	movs	r3, #0
 8017722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017728:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801772a:	f107 0308 	add.w	r3, r7, #8
 801772e:	4619      	mov	r1, r3
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7ff ff2d 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8017736:	f241 3288 	movw	r2, #5000	@ 0x1388
 801773a:	2112      	movs	r1, #18
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f000 fa19 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017744:	69fb      	ldr	r3, [r7, #28]
}
 8017746:	4618      	mov	r0, r3
 8017748:	3720      	adds	r7, #32
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}

0801774e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801774e:	b580      	push	{r7, lr}
 8017750:	b088      	sub	sp, #32
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
 8017756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801775c:	2318      	movs	r3, #24
 801775e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017766:	2300      	movs	r3, #0
 8017768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801776a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801776e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017770:	f107 0308 	add.w	r3, r7, #8
 8017774:	4619      	mov	r1, r3
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7ff ff0a 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801777c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017780:	2118      	movs	r1, #24
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f000 f9f6 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801778a:	69fb      	ldr	r3, [r7, #28]
}
 801778c:	4618      	mov	r0, r3
 801778e:	3720      	adds	r7, #32
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b088      	sub	sp, #32
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80177a2:	2319      	movs	r3, #25
 80177a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80177a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80177aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80177ac:	2300      	movs	r3, #0
 80177ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80177b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80177b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80177b6:	f107 0308 	add.w	r3, r7, #8
 80177ba:	4619      	mov	r1, r3
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f7ff fee7 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80177c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80177c6:	2119      	movs	r1, #25
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f000 f9d3 	bl	8017b74 <SDMMC_GetCmdResp1>
 80177ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80177d0:	69fb      	ldr	r3, [r7, #28]
}
 80177d2:	4618      	mov	r0, r3
 80177d4:	3720      	adds	r7, #32
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
	...

080177dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b088      	sub	sp, #32
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80177e4:	2300      	movs	r3, #0
 80177e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80177e8:	230c      	movs	r3, #12
 80177ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80177ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80177f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80177f2:	2300      	movs	r3, #0
 80177f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80177f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80177fa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	68db      	ldr	r3, [r3, #12]
 801780c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017814:	f107 0308 	add.w	r3, r7, #8
 8017818:	4619      	mov	r1, r3
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f7ff feb8 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8017820:	4a0b      	ldr	r2, [pc, #44]	@ (8017850 <SDMMC_CmdStopTransfer+0x74>)
 8017822:	210c      	movs	r1, #12
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f000 f9a5 	bl	8017b74 <SDMMC_GetCmdResp1>
 801782a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8017838:	69fb      	ldr	r3, [r7, #28]
 801783a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801783e:	d101      	bne.n	8017844 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8017840:	2300      	movs	r3, #0
 8017842:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8017844:	69fb      	ldr	r3, [r7, #28]
}
 8017846:	4618      	mov	r0, r3
 8017848:	3720      	adds	r7, #32
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
 801784e:	bf00      	nop
 8017850:	05f5e100 	.word	0x05f5e100

08017854 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b088      	sub	sp, #32
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8017862:	2307      	movs	r3, #7
 8017864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801786a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801786c:	2300      	movs	r3, #0
 801786e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017876:	f107 0308 	add.w	r3, r7, #8
 801787a:	4619      	mov	r1, r3
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7ff fe87 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8017882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017886:	2107      	movs	r1, #7
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f000 f973 	bl	8017b74 <SDMMC_GetCmdResp1>
 801788e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017890:	69fb      	ldr	r3, [r7, #28]
}
 8017892:	4618      	mov	r0, r3
 8017894:	3720      	adds	r7, #32
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801789a:	b580      	push	{r7, lr}
 801789c:	b088      	sub	sp, #32
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80178a2:	2300      	movs	r3, #0
 80178a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80178a6:	2300      	movs	r3, #0
 80178a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80178aa:	2300      	movs	r3, #0
 80178ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80178ae:	2300      	movs	r3, #0
 80178b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80178b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80178b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80178b8:	f107 0308 	add.w	r3, r7, #8
 80178bc:	4619      	mov	r1, r3
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7ff fe66 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f000 fb97 	bl	8017ff8 <SDMMC_GetCmdError>
 80178ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80178cc:	69fb      	ldr	r3, [r7, #28]
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3720      	adds	r7, #32
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b088      	sub	sp, #32
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80178de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80178e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80178e4:	2308      	movs	r3, #8
 80178e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80178e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80178ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80178ee:	2300      	movs	r3, #0
 80178f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80178f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80178f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80178f8:	f107 0308 	add.w	r3, r7, #8
 80178fc:	4619      	mov	r1, r3
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f7ff fe46 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f000 fb29 	bl	8017f5c <SDMMC_GetCmdResp7>
 801790a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801790c:	69fb      	ldr	r3, [r7, #28]
}
 801790e:	4618      	mov	r0, r3
 8017910:	3720      	adds	r7, #32
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}

08017916 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8017916:	b580      	push	{r7, lr}
 8017918:	b088      	sub	sp, #32
 801791a:	af00      	add	r7, sp, #0
 801791c:	6078      	str	r0, [r7, #4]
 801791e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8017924:	2337      	movs	r3, #55	@ 0x37
 8017926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801792c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801792e:	2300      	movs	r3, #0
 8017930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017938:	f107 0308 	add.w	r3, r7, #8
 801793c:	4619      	mov	r1, r3
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7ff fe26 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8017944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017948:	2137      	movs	r1, #55	@ 0x37
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 f912 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017952:	69fb      	ldr	r3, [r7, #28]
}
 8017954:	4618      	mov	r0, r3
 8017956:	3720      	adds	r7, #32
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b088      	sub	sp, #32
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801796a:	2329      	movs	r3, #41	@ 0x29
 801796c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801796e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017974:	2300      	movs	r3, #0
 8017976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801797c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801797e:	f107 0308 	add.w	r3, r7, #8
 8017982:	4619      	mov	r1, r3
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f7ff fe03 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f000 fa2e 	bl	8017dec <SDMMC_GetCmdResp3>
 8017990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017992:	69fb      	ldr	r3, [r7, #28]
}
 8017994:	4618      	mov	r0, r3
 8017996:	3720      	adds	r7, #32
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b088      	sub	sp, #32
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
 80179a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80179aa:	2306      	movs	r3, #6
 80179ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80179ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80179b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80179b4:	2300      	movs	r3, #0
 80179b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80179b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80179bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80179be:	f107 0308 	add.w	r3, r7, #8
 80179c2:	4619      	mov	r1, r3
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f7ff fde3 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80179ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80179ce:	2106      	movs	r1, #6
 80179d0:	6878      	ldr	r0, [r7, #4]
 80179d2:	f000 f8cf 	bl	8017b74 <SDMMC_GetCmdResp1>
 80179d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80179d8:	69fb      	ldr	r3, [r7, #28]
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3720      	adds	r7, #32
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}

080179e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b088      	sub	sp, #32
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80179ea:	2300      	movs	r3, #0
 80179ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80179ee:	2333      	movs	r3, #51	@ 0x33
 80179f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80179f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80179f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80179f8:	2300      	movs	r3, #0
 80179fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80179fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017a02:	f107 0308 	add.w	r3, r7, #8
 8017a06:	4619      	mov	r1, r3
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7ff fdc1 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8017a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017a12:	2133      	movs	r1, #51	@ 0x33
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f000 f8ad 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017a1c:	69fb      	ldr	r3, [r7, #28]
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3720      	adds	r7, #32
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}

08017a26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b088      	sub	sp, #32
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8017a32:	2302      	movs	r3, #2
 8017a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8017a36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8017a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017a46:	f107 0308 	add.w	r3, r7, #8
 8017a4a:	4619      	mov	r1, r3
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f7ff fd9f 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f000 f980 	bl	8017d58 <SDMMC_GetCmdResp2>
 8017a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017a5a:	69fb      	ldr	r3, [r7, #28]
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3720      	adds	r7, #32
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b088      	sub	sp, #32
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8017a72:	2309      	movs	r3, #9
 8017a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8017a76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8017a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017a84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017a86:	f107 0308 	add.w	r3, r7, #8
 8017a8a:	4619      	mov	r1, r3
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f7ff fd7f 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 f960 	bl	8017d58 <SDMMC_GetCmdResp2>
 8017a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017a9a:	69fb      	ldr	r3, [r7, #28]
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3720      	adds	r7, #32
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b088      	sub	sp, #32
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8017ab2:	2303      	movs	r3, #3
 8017ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017abc:	2300      	movs	r3, #0
 8017abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017ac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017ac6:	f107 0308 	add.w	r3, r7, #8
 8017aca:	4619      	mov	r1, r3
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7ff fd5f 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8017ad2:	683a      	ldr	r2, [r7, #0]
 8017ad4:	2103      	movs	r1, #3
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f000 f9c8 	bl	8017e6c <SDMMC_GetCmdResp6>
 8017adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017ade:	69fb      	ldr	r3, [r7, #28]
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3720      	adds	r7, #32
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}

08017ae8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b088      	sub	sp, #32
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8017af6:	230d      	movs	r3, #13
 8017af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017b00:	2300      	movs	r3, #0
 8017b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017b08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017b0a:	f107 0308 	add.w	r3, r7, #8
 8017b0e:	4619      	mov	r1, r3
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f7ff fd3d 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8017b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017b1a:	210d      	movs	r1, #13
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f000 f829 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017b24:	69fb      	ldr	r3, [r7, #28]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3720      	adds	r7, #32
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}

08017b2e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8017b2e:	b580      	push	{r7, lr}
 8017b30:	b088      	sub	sp, #32
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8017b36:	2300      	movs	r3, #0
 8017b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8017b3a:	230d      	movs	r3, #13
 8017b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017b44:	2300      	movs	r3, #0
 8017b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017b4e:	f107 0308 	add.w	r3, r7, #8
 8017b52:	4619      	mov	r1, r3
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f7ff fd1b 	bl	8017590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8017b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017b5e:	210d      	movs	r1, #13
 8017b60:	6878      	ldr	r0, [r7, #4]
 8017b62:	f000 f807 	bl	8017b74 <SDMMC_GetCmdResp1>
 8017b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017b68:	69fb      	ldr	r3, [r7, #28]
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3720      	adds	r7, #32
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
	...

08017b74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b088      	sub	sp, #32
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	460b      	mov	r3, r1
 8017b7e:	607a      	str	r2, [r7, #4]
 8017b80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8017b82:	4b70      	ldr	r3, [pc, #448]	@ (8017d44 <SDMMC_GetCmdResp1+0x1d0>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	4a70      	ldr	r2, [pc, #448]	@ (8017d48 <SDMMC_GetCmdResp1+0x1d4>)
 8017b88:	fba2 2303 	umull	r2, r3, r2, r3
 8017b8c:	0a5a      	lsrs	r2, r3, #9
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	fb02 f303 	mul.w	r3, r2, r3
 8017b94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	1e5a      	subs	r2, r3, #1
 8017b9a:	61fa      	str	r2, [r7, #28]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d102      	bne.n	8017ba6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8017ba0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017ba4:	e0c9      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017baa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8017bac:	69ba      	ldr	r2, [r7, #24]
 8017bae:	4b67      	ldr	r3, [pc, #412]	@ (8017d4c <SDMMC_GetCmdResp1+0x1d8>)
 8017bb0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d0ef      	beq.n	8017b96 <SDMMC_GetCmdResp1+0x22>
 8017bb6:	69bb      	ldr	r3, [r7, #24]
 8017bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1ea      	bne.n	8017b96 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017bc4:	f003 0304 	and.w	r3, r3, #4
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d004      	beq.n	8017bd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2204      	movs	r2, #4
 8017bd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017bd2:	2304      	movs	r3, #4
 8017bd4:	e0b1      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017bda:	f003 0301 	and.w	r3, r3, #1
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d004      	beq.n	8017bec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	2201      	movs	r2, #1
 8017be6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017be8:	2301      	movs	r3, #1
 8017bea:	e0a6      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	4a58      	ldr	r2, [pc, #352]	@ (8017d50 <SDMMC_GetCmdResp1+0x1dc>)
 8017bf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017bf2:	68f8      	ldr	r0, [r7, #12]
 8017bf4:	f7ff fcf6 	bl	80175e4 <SDMMC_GetCommandResponse>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	7afb      	ldrb	r3, [r7, #11]
 8017bfe:	4293      	cmp	r3, r2
 8017c00:	d001      	beq.n	8017c06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017c02:	2301      	movs	r3, #1
 8017c04:	e099      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8017c06:	2100      	movs	r1, #0
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f7ff fcf8 	bl	80175fe <SDMMC_GetResponse>
 8017c0e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017c10:	697a      	ldr	r2, [r7, #20]
 8017c12:	4b50      	ldr	r3, [pc, #320]	@ (8017d54 <SDMMC_GetCmdResp1+0x1e0>)
 8017c14:	4013      	ands	r3, r2
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d101      	bne.n	8017c1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	e08d      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	da02      	bge.n	8017c2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8017c24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8017c28:	e087      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d001      	beq.n	8017c38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8017c34:	2340      	movs	r3, #64	@ 0x40
 8017c36:	e080      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017c38:	697b      	ldr	r3, [r7, #20]
 8017c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d001      	beq.n	8017c46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8017c42:	2380      	movs	r3, #128	@ 0x80
 8017c44:	e079      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8017c46:	697b      	ldr	r3, [r7, #20]
 8017c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d002      	beq.n	8017c56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8017c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017c54:	e071      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d002      	beq.n	8017c66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8017c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017c64:	e069      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d002      	beq.n	8017c76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8017c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017c74:	e061      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d002      	beq.n	8017c86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8017c80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017c84:	e059      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d002      	beq.n	8017c96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017c94:	e051      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017c96:	697b      	ldr	r3, [r7, #20]
 8017c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d002      	beq.n	8017ca6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017ca0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017ca4:	e049      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d002      	beq.n	8017cb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8017cb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017cb4:	e041      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017cb6:	697b      	ldr	r3, [r7, #20]
 8017cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d002      	beq.n	8017cc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8017cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017cc4:	e039      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d002      	beq.n	8017cd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8017cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8017cd4:	e031      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d002      	beq.n	8017ce6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8017ce0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8017ce4:	e029      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d002      	beq.n	8017cf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8017cf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017cf4:	e021      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017cf6:	697b      	ldr	r3, [r7, #20]
 8017cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d002      	beq.n	8017d06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8017d00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017d04:	e019      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8017d10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8017d14:	e011      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017d16:	697b      	ldr	r3, [r7, #20]
 8017d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d002      	beq.n	8017d26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8017d20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8017d24:	e009      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	f003 0308 	and.w	r3, r3, #8
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d002      	beq.n	8017d36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8017d30:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8017d34:	e001      	b.n	8017d3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017d36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3720      	adds	r7, #32
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	24000030 	.word	0x24000030
 8017d48:	10624dd3 	.word	0x10624dd3
 8017d4c:	00200045 	.word	0x00200045
 8017d50:	002000c5 	.word	0x002000c5
 8017d54:	fdffe008 	.word	0xfdffe008

08017d58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8017d60:	4b1f      	ldr	r3, [pc, #124]	@ (8017de0 <SDMMC_GetCmdResp2+0x88>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	4a1f      	ldr	r2, [pc, #124]	@ (8017de4 <SDMMC_GetCmdResp2+0x8c>)
 8017d66:	fba2 2303 	umull	r2, r3, r2, r3
 8017d6a:	0a5b      	lsrs	r3, r3, #9
 8017d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017d70:	fb02 f303 	mul.w	r3, r2, r3
 8017d74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	1e5a      	subs	r2, r3, #1
 8017d7a:	60fa      	str	r2, [r7, #12]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d102      	bne.n	8017d86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8017d80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017d84:	e026      	b.n	8017dd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d0ef      	beq.n	8017d76 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d1ea      	bne.n	8017d76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017da4:	f003 0304 	and.w	r3, r3, #4
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d004      	beq.n	8017db6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	2204      	movs	r2, #4
 8017db0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017db2:	2304      	movs	r3, #4
 8017db4:	e00e      	b.n	8017dd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017dba:	f003 0301 	and.w	r3, r3, #1
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d004      	beq.n	8017dcc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2201      	movs	r2, #1
 8017dc6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017dc8:	2301      	movs	r3, #1
 8017dca:	e003      	b.n	8017dd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	4a06      	ldr	r2, [pc, #24]	@ (8017de8 <SDMMC_GetCmdResp2+0x90>)
 8017dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3714      	adds	r7, #20
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr
 8017de0:	24000030 	.word	0x24000030
 8017de4:	10624dd3 	.word	0x10624dd3
 8017de8:	002000c5 	.word	0x002000c5

08017dec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8017dec:	b480      	push	{r7}
 8017dee:	b085      	sub	sp, #20
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8017df4:	4b1a      	ldr	r3, [pc, #104]	@ (8017e60 <SDMMC_GetCmdResp3+0x74>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a1a      	ldr	r2, [pc, #104]	@ (8017e64 <SDMMC_GetCmdResp3+0x78>)
 8017dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8017dfe:	0a5b      	lsrs	r3, r3, #9
 8017e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017e04:	fb02 f303 	mul.w	r3, r2, r3
 8017e08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	1e5a      	subs	r2, r3, #1
 8017e0e:	60fa      	str	r2, [r7, #12]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8017e14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017e18:	e01b      	b.n	8017e52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d0ef      	beq.n	8017e0a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d1ea      	bne.n	8017e0a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e38:	f003 0304 	and.w	r3, r3, #4
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d004      	beq.n	8017e4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	2204      	movs	r2, #4
 8017e44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017e46:	2304      	movs	r3, #4
 8017e48:	e003      	b.n	8017e52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	4a06      	ldr	r2, [pc, #24]	@ (8017e68 <SDMMC_GetCmdResp3+0x7c>)
 8017e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8017e50:	2300      	movs	r3, #0
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3714      	adds	r7, #20
 8017e56:	46bd      	mov	sp, r7
 8017e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5c:	4770      	bx	lr
 8017e5e:	bf00      	nop
 8017e60:	24000030 	.word	0x24000030
 8017e64:	10624dd3 	.word	0x10624dd3
 8017e68:	002000c5 	.word	0x002000c5

08017e6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b088      	sub	sp, #32
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	460b      	mov	r3, r1
 8017e76:	607a      	str	r2, [r7, #4]
 8017e78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8017e7a:	4b35      	ldr	r3, [pc, #212]	@ (8017f50 <SDMMC_GetCmdResp6+0xe4>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	4a35      	ldr	r2, [pc, #212]	@ (8017f54 <SDMMC_GetCmdResp6+0xe8>)
 8017e80:	fba2 2303 	umull	r2, r3, r2, r3
 8017e84:	0a5b      	lsrs	r3, r3, #9
 8017e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017e8a:	fb02 f303 	mul.w	r3, r2, r3
 8017e8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8017e90:	69fb      	ldr	r3, [r7, #28]
 8017e92:	1e5a      	subs	r2, r3, #1
 8017e94:	61fa      	str	r2, [r7, #28]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d102      	bne.n	8017ea0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8017e9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017e9e:	e052      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ea4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d0ef      	beq.n	8017e90 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d1ea      	bne.n	8017e90 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ebe:	f003 0304 	and.w	r3, r3, #4
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d004      	beq.n	8017ed0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2204      	movs	r2, #4
 8017eca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017ecc:	2304      	movs	r3, #4
 8017ece:	e03a      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ed4:	f003 0301 	and.w	r3, r3, #1
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d004      	beq.n	8017ee6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	2201      	movs	r2, #1
 8017ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	e02f      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017ee6:	68f8      	ldr	r0, [r7, #12]
 8017ee8:	f7ff fb7c 	bl	80175e4 <SDMMC_GetCommandResponse>
 8017eec:	4603      	mov	r3, r0
 8017eee:	461a      	mov	r2, r3
 8017ef0:	7afb      	ldrb	r3, [r7, #11]
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	d001      	beq.n	8017efa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	e025      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	4a16      	ldr	r2, [pc, #88]	@ (8017f58 <SDMMC_GetCmdResp6+0xec>)
 8017efe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8017f00:	2100      	movs	r1, #0
 8017f02:	68f8      	ldr	r0, [r7, #12]
 8017f04:	f7ff fb7b 	bl	80175fe <SDMMC_GetResponse>
 8017f08:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d106      	bne.n	8017f22 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	0c1b      	lsrs	r3, r3, #16
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	e011      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8017f22:	697b      	ldr	r3, [r7, #20]
 8017f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d002      	beq.n	8017f32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017f30:	e009      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8017f32:	697b      	ldr	r3, [r7, #20]
 8017f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d002      	beq.n	8017f42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017f40:	e001      	b.n	8017f46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017f42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3720      	adds	r7, #32
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	24000030 	.word	0x24000030
 8017f54:	10624dd3 	.word	0x10624dd3
 8017f58:	002000c5 	.word	0x002000c5

08017f5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b085      	sub	sp, #20
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8017f64:	4b22      	ldr	r3, [pc, #136]	@ (8017ff0 <SDMMC_GetCmdResp7+0x94>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	4a22      	ldr	r2, [pc, #136]	@ (8017ff4 <SDMMC_GetCmdResp7+0x98>)
 8017f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8017f6e:	0a5b      	lsrs	r3, r3, #9
 8017f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017f74:	fb02 f303 	mul.w	r3, r2, r3
 8017f78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	1e5a      	subs	r2, r3, #1
 8017f7e:	60fa      	str	r2, [r7, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d102      	bne.n	8017f8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8017f84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017f88:	e02c      	b.n	8017fe4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017f8e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d0ef      	beq.n	8017f7a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d1ea      	bne.n	8017f7a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017fa8:	f003 0304 	and.w	r3, r3, #4
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d004      	beq.n	8017fba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2204      	movs	r2, #4
 8017fb4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017fb6:	2304      	movs	r3, #4
 8017fb8:	e014      	b.n	8017fe4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017fbe:	f003 0301 	and.w	r3, r3, #1
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d004      	beq.n	8017fd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2201      	movs	r2, #1
 8017fca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017fcc:	2301      	movs	r3, #1
 8017fce:	e009      	b.n	8017fe4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d002      	beq.n	8017fe2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2240      	movs	r2, #64	@ 0x40
 8017fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8017fe2:	2300      	movs	r3, #0

}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3714      	adds	r7, #20
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fee:	4770      	bx	lr
 8017ff0:	24000030 	.word	0x24000030
 8017ff4:	10624dd3 	.word	0x10624dd3

08017ff8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b085      	sub	sp, #20
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8018000:	4b11      	ldr	r3, [pc, #68]	@ (8018048 <SDMMC_GetCmdError+0x50>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4a11      	ldr	r2, [pc, #68]	@ (801804c <SDMMC_GetCmdError+0x54>)
 8018006:	fba2 2303 	umull	r2, r3, r2, r3
 801800a:	0a5b      	lsrs	r3, r3, #9
 801800c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018010:	fb02 f303 	mul.w	r3, r2, r3
 8018014:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	1e5a      	subs	r2, r3, #1
 801801a:	60fa      	str	r2, [r7, #12]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d102      	bne.n	8018026 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8018020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018024:	e009      	b.n	801803a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801802e:	2b00      	cmp	r3, #0
 8018030:	d0f1      	beq.n	8018016 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4a06      	ldr	r2, [pc, #24]	@ (8018050 <SDMMC_GetCmdError+0x58>)
 8018036:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8018038:	2300      	movs	r3, #0
}
 801803a:	4618      	mov	r0, r3
 801803c:	3714      	adds	r7, #20
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr
 8018046:	bf00      	nop
 8018048:	24000030 	.word	0x24000030
 801804c:	10624dd3 	.word	0x10624dd3
 8018050:	002000c5 	.word	0x002000c5

08018054 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8018054:	b580      	push	{r7, lr}
 8018056:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8018058:	4904      	ldr	r1, [pc, #16]	@ (801806c <MX_FATFS_Init+0x18>)
 801805a:	4805      	ldr	r0, [pc, #20]	@ (8018070 <MX_FATFS_Init+0x1c>)
 801805c:	f002 fc08 	bl	801a870 <FATFS_LinkDriver>
 8018060:	4603      	mov	r3, r0
 8018062:	461a      	mov	r2, r3
 8018064:	4b03      	ldr	r3, [pc, #12]	@ (8018074 <MX_FATFS_Init+0x20>)
 8018066:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8018068:	bf00      	nop
 801806a:	bd80      	pop	{r7, pc}
 801806c:	240004f0 	.word	0x240004f0
 8018070:	0801cc64 	.word	0x0801cc64
 8018074:	240004ec 	.word	0x240004ec

08018078 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8018078:	b480      	push	{r7}
 801807a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801807c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801807e:	4618      	mov	r0, r3
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr

08018088 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b086      	sub	sp, #24
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	60b9      	str	r1, [r7, #8]
 8018092:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8018094:	2300      	movs	r3, #0
 8018096:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	68ba      	ldr	r2, [r7, #8]
 801809c:	68f9      	ldr	r1, [r7, #12]
 801809e:	4806      	ldr	r0, [pc, #24]	@ (80180b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80180a0:	f7fc fc16 	bl	80148d0 <HAL_SD_ReadBlocks_DMA>
 80180a4:	4603      	mov	r3, r0
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d001      	beq.n	80180ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80180aa:	2301      	movs	r3, #1
 80180ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80180ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	3718      	adds	r7, #24
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	240003cc 	.word	0x240003cc

080180bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b086      	sub	sp, #24
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	60f8      	str	r0, [r7, #12]
 80180c4:	60b9      	str	r1, [r7, #8]
 80180c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80180c8:	2300      	movs	r3, #0
 80180ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	68ba      	ldr	r2, [r7, #8]
 80180d0:	68f9      	ldr	r1, [r7, #12]
 80180d2:	4806      	ldr	r0, [pc, #24]	@ (80180ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80180d4:	f7fc fca4 	bl	8014a20 <HAL_SD_WriteBlocks_DMA>
 80180d8:	4603      	mov	r3, r0
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d001      	beq.n	80180e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80180de:	2301      	movs	r3, #1
 80180e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80180e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80180e4:	4618      	mov	r0, r3
 80180e6:	3718      	adds	r7, #24
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	240003cc 	.word	0x240003cc

080180f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80180f4:	4805      	ldr	r0, [pc, #20]	@ (801810c <BSP_SD_GetCardState+0x1c>)
 80180f6:	f7fd fa9d 	bl	8015634 <HAL_SD_GetCardState>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	bf14      	ite	ne
 8018100:	2301      	movne	r3, #1
 8018102:	2300      	moveq	r3, #0
 8018104:	b2db      	uxtb	r3, r3
}
 8018106:	4618      	mov	r0, r3
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	240003cc 	.word	0x240003cc

08018110 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8018118:	6879      	ldr	r1, [r7, #4]
 801811a:	4803      	ldr	r0, [pc, #12]	@ (8018128 <BSP_SD_GetCardInfo+0x18>)
 801811c:	f7fd f94c 	bl	80153b8 <HAL_SD_GetCardInfo>
}
 8018120:	bf00      	nop
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	240003cc 	.word	0x240003cc

0801812c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8018134:	f000 fa14 	bl	8018560 <BSP_SD_WriteCpltCallback>
}
 8018138:	bf00      	nop
 801813a:	3708      	adds	r7, #8
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}

08018140 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b082      	sub	sp, #8
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8018148:	f000 fa16 	bl	8018578 <BSP_SD_ReadCpltCallback>
}
 801814c:	bf00      	nop
 801814e:	3708      	adds	r7, #8
 8018150:	46bd      	mov	sp, r7
 8018152:	bd80      	pop	{r7, pc}

08018154 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801815c:	f7f5 fe92 	bl	800de84 <HAL_GetTick>
 8018160:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8018162:	e006      	b.n	8018172 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018164:	f7ff ffc4 	bl	80180f0 <BSP_SD_GetCardState>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	d101      	bne.n	8018172 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801816e:	2300      	movs	r3, #0
 8018170:	e009      	b.n	8018186 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8018172:	f7f5 fe87 	bl	800de84 <HAL_GetTick>
 8018176:	4602      	mov	r2, r0
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	1ad3      	subs	r3, r2, r3
 801817c:	687a      	ldr	r2, [r7, #4]
 801817e:	429a      	cmp	r2, r3
 8018180:	d8f0      	bhi.n	8018164 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8018182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018186:	4618      	mov	r0, r3
 8018188:	3710      	adds	r7, #16
 801818a:	46bd      	mov	sp, r7
 801818c:	bd80      	pop	{r7, pc}
	...

08018190 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	4603      	mov	r3, r0
 8018198:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801819a:	4b0b      	ldr	r3, [pc, #44]	@ (80181c8 <SD_CheckStatus+0x38>)
 801819c:	2201      	movs	r2, #1
 801819e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80181a0:	f7ff ffa6 	bl	80180f0 <BSP_SD_GetCardState>
 80181a4:	4603      	mov	r3, r0
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d107      	bne.n	80181ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80181aa:	4b07      	ldr	r3, [pc, #28]	@ (80181c8 <SD_CheckStatus+0x38>)
 80181ac:	781b      	ldrb	r3, [r3, #0]
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	f023 0301 	bic.w	r3, r3, #1
 80181b4:	b2da      	uxtb	r2, r3
 80181b6:	4b04      	ldr	r3, [pc, #16]	@ (80181c8 <SD_CheckStatus+0x38>)
 80181b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80181ba:	4b03      	ldr	r3, [pc, #12]	@ (80181c8 <SD_CheckStatus+0x38>)
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	b2db      	uxtb	r3, r3
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	3708      	adds	r7, #8
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	2400003d 	.word	0x2400003d

080181cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	4603      	mov	r3, r0
 80181d4:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 80181d6:	79fb      	ldrb	r3, [r7, #7]
 80181d8:	4618      	mov	r0, r3
 80181da:	f7ff ffd9 	bl	8018190 <SD_CheckStatus>
 80181de:	4603      	mov	r3, r0
 80181e0:	461a      	mov	r2, r3
 80181e2:	4b04      	ldr	r3, [pc, #16]	@ (80181f4 <SD_initialize+0x28>)
 80181e4:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 80181e6:	4b03      	ldr	r3, [pc, #12]	@ (80181f4 <SD_initialize+0x28>)
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	b2db      	uxtb	r3, r3
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3708      	adds	r7, #8
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	2400003d 	.word	0x2400003d

080181f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b082      	sub	sp, #8
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	4603      	mov	r3, r0
 8018200:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8018202:	79fb      	ldrb	r3, [r7, #7]
 8018204:	4618      	mov	r0, r3
 8018206:	f7ff ffc3 	bl	8018190 <SD_CheckStatus>
 801820a:	4603      	mov	r3, r0
}
 801820c:	4618      	mov	r0, r3
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b088      	sub	sp, #32
 8018218:	af00      	add	r7, sp, #0
 801821a:	60b9      	str	r1, [r7, #8]
 801821c:	607a      	str	r2, [r7, #4]
 801821e:	603b      	str	r3, [r7, #0]
 8018220:	4603      	mov	r3, r0
 8018222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8018224:	2301      	movs	r3, #1
 8018226:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018228:	f247 5030 	movw	r0, #30000	@ 0x7530
 801822c:	f7ff ff92 	bl	8018154 <SD_CheckStatusWithTimeout>
 8018230:	4603      	mov	r3, r0
 8018232:	2b00      	cmp	r3, #0
 8018234:	da01      	bge.n	801823a <SD_read+0x26>
  {
    return res;
 8018236:	7ffb      	ldrb	r3, [r7, #31]
 8018238:	e08b      	b.n	8018352 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	f003 0303 	and.w	r3, r3, #3
 8018240:	2b00      	cmp	r3, #0
 8018242:	d13b      	bne.n	80182bc <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8018244:	683a      	ldr	r2, [r7, #0]
 8018246:	6879      	ldr	r1, [r7, #4]
 8018248:	68b8      	ldr	r0, [r7, #8]
 801824a:	f7ff ff1d 	bl	8018088 <BSP_SD_ReadBlocks_DMA>
 801824e:	4603      	mov	r3, r0
 8018250:	2b00      	cmp	r3, #0
 8018252:	d17d      	bne.n	8018350 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8018254:	4b41      	ldr	r3, [pc, #260]	@ (801835c <SD_read+0x148>)
 8018256:	2200      	movs	r2, #0
 8018258:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801825a:	f7f5 fe13 	bl	800de84 <HAL_GetTick>
 801825e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8018260:	bf00      	nop
 8018262:	4b3e      	ldr	r3, [pc, #248]	@ (801835c <SD_read+0x148>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d108      	bne.n	801827c <SD_read+0x68>
 801826a:	f7f5 fe0b 	bl	800de84 <HAL_GetTick>
 801826e:	4602      	mov	r2, r0
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018278:	4293      	cmp	r3, r2
 801827a:	d9f2      	bls.n	8018262 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801827c:	4b37      	ldr	r3, [pc, #220]	@ (801835c <SD_read+0x148>)
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d102      	bne.n	801828a <SD_read+0x76>
      {
        res = RES_ERROR;
 8018284:	2301      	movs	r3, #1
 8018286:	77fb      	strb	r3, [r7, #31]
 8018288:	e062      	b.n	8018350 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801828a:	4b34      	ldr	r3, [pc, #208]	@ (801835c <SD_read+0x148>)
 801828c:	2200      	movs	r2, #0
 801828e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8018290:	f7f5 fdf8 	bl	800de84 <HAL_GetTick>
 8018294:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8018296:	e007      	b.n	80182a8 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018298:	f7ff ff2a 	bl	80180f0 <BSP_SD_GetCardState>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d102      	bne.n	80182a8 <SD_read+0x94>
          {
            res = RES_OK;
 80182a2:	2300      	movs	r3, #0
 80182a4:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80182a6:	e053      	b.n	8018350 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80182a8:	f7f5 fdec 	bl	800de84 <HAL_GetTick>
 80182ac:	4602      	mov	r2, r0
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	1ad3      	subs	r3, r2, r3
 80182b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80182b6:	4293      	cmp	r3, r2
 80182b8:	d9ee      	bls.n	8018298 <SD_read+0x84>
 80182ba:	e049      	b.n	8018350 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80182bc:	2300      	movs	r3, #0
 80182be:	61bb      	str	r3, [r7, #24]
 80182c0:	e037      	b.n	8018332 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	1c5a      	adds	r2, r3, #1
 80182c6:	607a      	str	r2, [r7, #4]
 80182c8:	2201      	movs	r2, #1
 80182ca:	4619      	mov	r1, r3
 80182cc:	4824      	ldr	r0, [pc, #144]	@ (8018360 <SD_read+0x14c>)
 80182ce:	f7ff fedb 	bl	8018088 <BSP_SD_ReadBlocks_DMA>
 80182d2:	4603      	mov	r3, r0
 80182d4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80182d6:	7fbb      	ldrb	r3, [r7, #30]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d12f      	bne.n	801833c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 80182dc:	f7f5 fdd2 	bl	800de84 <HAL_GetTick>
 80182e0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80182e2:	bf00      	nop
 80182e4:	4b1d      	ldr	r3, [pc, #116]	@ (801835c <SD_read+0x148>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d108      	bne.n	80182fe <SD_read+0xea>
 80182ec:	f7f5 fdca 	bl	800de84 <HAL_GetTick>
 80182f0:	4602      	mov	r2, r0
 80182f2:	697b      	ldr	r3, [r7, #20]
 80182f4:	1ad3      	subs	r3, r2, r3
 80182f6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80182fa:	4293      	cmp	r3, r2
 80182fc:	d9f2      	bls.n	80182e4 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 80182fe:	4b17      	ldr	r3, [pc, #92]	@ (801835c <SD_read+0x148>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d102      	bne.n	801830c <SD_read+0xf8>
          {
            res = RES_ERROR;
 8018306:	2301      	movs	r3, #1
 8018308:	77fb      	strb	r3, [r7, #31]
            break;
 801830a:	e018      	b.n	801833e <SD_read+0x12a>
          }
          ReadStatus = 0;
 801830c:	4b13      	ldr	r3, [pc, #76]	@ (801835c <SD_read+0x148>)
 801830e:	2200      	movs	r2, #0
 8018310:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	4a12      	ldr	r2, [pc, #72]	@ (8018360 <SD_read+0x14c>)
 8018316:	4618      	mov	r0, r3
 8018318:	4611      	mov	r1, r2
 801831a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801831e:	461a      	mov	r2, r3
 8018320:	f003 f87f 	bl	801b422 <memcpy>
          buff += BLOCKSIZE;
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801832a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	3301      	adds	r3, #1
 8018330:	61bb      	str	r3, [r7, #24]
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	683a      	ldr	r2, [r7, #0]
 8018336:	429a      	cmp	r2, r3
 8018338:	d8c3      	bhi.n	80182c2 <SD_read+0xae>
 801833a:	e000      	b.n	801833e <SD_read+0x12a>
        }
        else
        {
          break;
 801833c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	683a      	ldr	r2, [r7, #0]
 8018342:	429a      	cmp	r2, r3
 8018344:	d104      	bne.n	8018350 <SD_read+0x13c>
 8018346:	7fbb      	ldrb	r3, [r7, #30]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d101      	bne.n	8018350 <SD_read+0x13c>
        res = RES_OK;
 801834c:	2300      	movs	r3, #0
 801834e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8018350:	7ffb      	ldrb	r3, [r7, #31]
}
 8018352:	4618      	mov	r0, r3
 8018354:	3720      	adds	r7, #32
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	24000b58 	.word	0x24000b58
 8018360:	24000954 	.word	0x24000954

08018364 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b088      	sub	sp, #32
 8018368:	af00      	add	r7, sp, #0
 801836a:	60b9      	str	r1, [r7, #8]
 801836c:	607a      	str	r2, [r7, #4]
 801836e:	603b      	str	r3, [r7, #0]
 8018370:	4603      	mov	r3, r0
 8018372:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8018374:	2301      	movs	r3, #1
 8018376:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8018378:	4b4b      	ldr	r3, [pc, #300]	@ (80184a8 <SD_write+0x144>)
 801837a:	2200      	movs	r2, #0
 801837c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801837e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8018382:	f7ff fee7 	bl	8018154 <SD_CheckStatusWithTimeout>
 8018386:	4603      	mov	r3, r0
 8018388:	2b00      	cmp	r3, #0
 801838a:	da01      	bge.n	8018390 <SD_write+0x2c>
  {
    return res;
 801838c:	7ffb      	ldrb	r3, [r7, #31]
 801838e:	e087      	b.n	80184a0 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	f003 0303 	and.w	r3, r3, #3
 8018396:	2b00      	cmp	r3, #0
 8018398:	d138      	bne.n	801840c <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	6879      	ldr	r1, [r7, #4]
 801839e:	68b8      	ldr	r0, [r7, #8]
 80183a0:	f7ff fe8c 	bl	80180bc <BSP_SD_WriteBlocks_DMA>
 80183a4:	4603      	mov	r3, r0
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d179      	bne.n	801849e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80183aa:	f7f5 fd6b 	bl	800de84 <HAL_GetTick>
 80183ae:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80183b0:	bf00      	nop
 80183b2:	4b3d      	ldr	r3, [pc, #244]	@ (80184a8 <SD_write+0x144>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d108      	bne.n	80183cc <SD_write+0x68>
 80183ba:	f7f5 fd63 	bl	800de84 <HAL_GetTick>
 80183be:	4602      	mov	r2, r0
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	1ad3      	subs	r3, r2, r3
 80183c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80183c8:	4293      	cmp	r3, r2
 80183ca:	d9f2      	bls.n	80183b2 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80183cc:	4b36      	ldr	r3, [pc, #216]	@ (80184a8 <SD_write+0x144>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d102      	bne.n	80183da <SD_write+0x76>
      {
        res = RES_ERROR;
 80183d4:	2301      	movs	r3, #1
 80183d6:	77fb      	strb	r3, [r7, #31]
 80183d8:	e061      	b.n	801849e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 80183da:	4b33      	ldr	r3, [pc, #204]	@ (80184a8 <SD_write+0x144>)
 80183dc:	2200      	movs	r2, #0
 80183de:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80183e0:	f7f5 fd50 	bl	800de84 <HAL_GetTick>
 80183e4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80183e6:	e007      	b.n	80183f8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80183e8:	f7ff fe82 	bl	80180f0 <BSP_SD_GetCardState>
 80183ec:	4603      	mov	r3, r0
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d102      	bne.n	80183f8 <SD_write+0x94>
          {
            res = RES_OK;
 80183f2:	2300      	movs	r3, #0
 80183f4:	77fb      	strb	r3, [r7, #31]
            break;
 80183f6:	e052      	b.n	801849e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80183f8:	f7f5 fd44 	bl	800de84 <HAL_GetTick>
 80183fc:	4602      	mov	r2, r0
 80183fe:	697b      	ldr	r3, [r7, #20]
 8018400:	1ad3      	subs	r3, r2, r3
 8018402:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018406:	4293      	cmp	r3, r2
 8018408:	d9ee      	bls.n	80183e8 <SD_write+0x84>
 801840a:	e048      	b.n	801849e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801840c:	2300      	movs	r3, #0
 801840e:	61bb      	str	r3, [r7, #24]
 8018410:	e034      	b.n	801847c <SD_write+0x118>
      {
        WriteStatus = 0;
 8018412:	4b25      	ldr	r3, [pc, #148]	@ (80184a8 <SD_write+0x144>)
 8018414:	2200      	movs	r2, #0
 8018416:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8018418:	4a24      	ldr	r2, [pc, #144]	@ (80184ac <SD_write+0x148>)
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	4610      	mov	r0, r2
 801841e:	4619      	mov	r1, r3
 8018420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018424:	461a      	mov	r2, r3
 8018426:	f002 fffc 	bl	801b422 <memcpy>
        buff += BLOCKSIZE;
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8018430:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	1c5a      	adds	r2, r3, #1
 8018436:	607a      	str	r2, [r7, #4]
 8018438:	2201      	movs	r2, #1
 801843a:	4619      	mov	r1, r3
 801843c:	481b      	ldr	r0, [pc, #108]	@ (80184ac <SD_write+0x148>)
 801843e:	f7ff fe3d 	bl	80180bc <BSP_SD_WriteBlocks_DMA>
 8018442:	4603      	mov	r3, r0
 8018444:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8018446:	7fbb      	ldrb	r3, [r7, #30]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d11c      	bne.n	8018486 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801844c:	f7f5 fd1a 	bl	800de84 <HAL_GetTick>
 8018450:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8018452:	bf00      	nop
 8018454:	4b14      	ldr	r3, [pc, #80]	@ (80184a8 <SD_write+0x144>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d108      	bne.n	801846e <SD_write+0x10a>
 801845c:	f7f5 fd12 	bl	800de84 <HAL_GetTick>
 8018460:	4602      	mov	r2, r0
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	1ad3      	subs	r3, r2, r3
 8018466:	f247 522f 	movw	r2, #29999	@ 0x752f
 801846a:	4293      	cmp	r3, r2
 801846c:	d9f2      	bls.n	8018454 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801846e:	4b0e      	ldr	r3, [pc, #56]	@ (80184a8 <SD_write+0x144>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d009      	beq.n	801848a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8018476:	69bb      	ldr	r3, [r7, #24]
 8018478:	3301      	adds	r3, #1
 801847a:	61bb      	str	r3, [r7, #24]
 801847c:	69bb      	ldr	r3, [r7, #24]
 801847e:	683a      	ldr	r2, [r7, #0]
 8018480:	429a      	cmp	r2, r3
 8018482:	d8c6      	bhi.n	8018412 <SD_write+0xae>
 8018484:	e002      	b.n	801848c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8018486:	bf00      	nop
 8018488:	e000      	b.n	801848c <SD_write+0x128>
            break;
 801848a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801848c:	69bb      	ldr	r3, [r7, #24]
 801848e:	683a      	ldr	r2, [r7, #0]
 8018490:	429a      	cmp	r2, r3
 8018492:	d104      	bne.n	801849e <SD_write+0x13a>
 8018494:	7fbb      	ldrb	r3, [r7, #30]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d101      	bne.n	801849e <SD_write+0x13a>
        res = RES_OK;
 801849a:	2300      	movs	r3, #0
 801849c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801849e:	7ffb      	ldrb	r3, [r7, #31]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3720      	adds	r7, #32
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	24000b54 	.word	0x24000b54
 80184ac:	24000954 	.word	0x24000954

080184b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b08c      	sub	sp, #48	@ 0x30
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	4603      	mov	r3, r0
 80184b8:	603a      	str	r2, [r7, #0]
 80184ba:	71fb      	strb	r3, [r7, #7]
 80184bc:	460b      	mov	r3, r1
 80184be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80184c0:	2301      	movs	r3, #1
 80184c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80184c6:	4b25      	ldr	r3, [pc, #148]	@ (801855c <SD_ioctl+0xac>)
 80184c8:	781b      	ldrb	r3, [r3, #0]
 80184ca:	b2db      	uxtb	r3, r3
 80184cc:	f003 0301 	and.w	r3, r3, #1
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d001      	beq.n	80184d8 <SD_ioctl+0x28>
 80184d4:	2303      	movs	r3, #3
 80184d6:	e03c      	b.n	8018552 <SD_ioctl+0xa2>

  switch (cmd)
 80184d8:	79bb      	ldrb	r3, [r7, #6]
 80184da:	2b03      	cmp	r3, #3
 80184dc:	d834      	bhi.n	8018548 <SD_ioctl+0x98>
 80184de:	a201      	add	r2, pc, #4	@ (adr r2, 80184e4 <SD_ioctl+0x34>)
 80184e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184e4:	080184f5 	.word	0x080184f5
 80184e8:	080184fd 	.word	0x080184fd
 80184ec:	08018515 	.word	0x08018515
 80184f0:	0801852f 	.word	0x0801852f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80184f4:	2300      	movs	r3, #0
 80184f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80184fa:	e028      	b.n	801854e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80184fc:	f107 0308 	add.w	r3, r7, #8
 8018500:	4618      	mov	r0, r3
 8018502:	f7ff fe05 	bl	8018110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8018506:	6a3a      	ldr	r2, [r7, #32]
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801850c:	2300      	movs	r3, #0
 801850e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8018512:	e01c      	b.n	801854e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8018514:	f107 0308 	add.w	r3, r7, #8
 8018518:	4618      	mov	r0, r3
 801851a:	f7ff fdf9 	bl	8018110 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018520:	b29a      	uxth	r2, r3
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8018526:	2300      	movs	r3, #0
 8018528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801852c:	e00f      	b.n	801854e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801852e:	f107 0308 	add.w	r3, r7, #8
 8018532:	4618      	mov	r0, r3
 8018534:	f7ff fdec 	bl	8018110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8018538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801853a:	0a5a      	lsrs	r2, r3, #9
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8018540:	2300      	movs	r3, #0
 8018542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8018546:	e002      	b.n	801854e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8018548:	2304      	movs	r3, #4
 801854a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801854e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8018552:	4618      	mov	r0, r3
 8018554:	3730      	adds	r7, #48	@ 0x30
 8018556:	46bd      	mov	sp, r7
 8018558:	bd80      	pop	{r7, pc}
 801855a:	bf00      	nop
 801855c:	2400003d 	.word	0x2400003d

08018560 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8018560:	b480      	push	{r7}
 8018562:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8018564:	4b03      	ldr	r3, [pc, #12]	@ (8018574 <BSP_SD_WriteCpltCallback+0x14>)
 8018566:	2201      	movs	r2, #1
 8018568:	601a      	str	r2, [r3, #0]
}
 801856a:	bf00      	nop
 801856c:	46bd      	mov	sp, r7
 801856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018572:	4770      	bx	lr
 8018574:	24000b54 	.word	0x24000b54

08018578 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8018578:	b480      	push	{r7}
 801857a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801857c:	4b03      	ldr	r3, [pc, #12]	@ (801858c <BSP_SD_ReadCpltCallback+0x14>)
 801857e:	2201      	movs	r2, #1
 8018580:	601a      	str	r2, [r3, #0]
}
 8018582:	bf00      	nop
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr
 801858c:	24000b58 	.word	0x24000b58

08018590 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	4603      	mov	r3, r0
 8018598:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801859a:	79fb      	ldrb	r3, [r7, #7]
 801859c:	4a08      	ldr	r2, [pc, #32]	@ (80185c0 <disk_status+0x30>)
 801859e:	009b      	lsls	r3, r3, #2
 80185a0:	4413      	add	r3, r2
 80185a2:	685b      	ldr	r3, [r3, #4]
 80185a4:	685b      	ldr	r3, [r3, #4]
 80185a6:	79fa      	ldrb	r2, [r7, #7]
 80185a8:	4905      	ldr	r1, [pc, #20]	@ (80185c0 <disk_status+0x30>)
 80185aa:	440a      	add	r2, r1
 80185ac:	7a12      	ldrb	r2, [r2, #8]
 80185ae:	4610      	mov	r0, r2
 80185b0:	4798      	blx	r3
 80185b2:	4603      	mov	r3, r0
 80185b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80185b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3710      	adds	r7, #16
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	24000b84 	.word	0x24000b84

080185c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	4603      	mov	r3, r0
 80185cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80185ce:	2300      	movs	r3, #0
 80185d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80185d2:	79fb      	ldrb	r3, [r7, #7]
 80185d4:	4a0e      	ldr	r2, [pc, #56]	@ (8018610 <disk_initialize+0x4c>)
 80185d6:	5cd3      	ldrb	r3, [r2, r3]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d114      	bne.n	8018606 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80185dc:	79fb      	ldrb	r3, [r7, #7]
 80185de:	4a0c      	ldr	r2, [pc, #48]	@ (8018610 <disk_initialize+0x4c>)
 80185e0:	009b      	lsls	r3, r3, #2
 80185e2:	4413      	add	r3, r2
 80185e4:	685b      	ldr	r3, [r3, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	79fa      	ldrb	r2, [r7, #7]
 80185ea:	4909      	ldr	r1, [pc, #36]	@ (8018610 <disk_initialize+0x4c>)
 80185ec:	440a      	add	r2, r1
 80185ee:	7a12      	ldrb	r2, [r2, #8]
 80185f0:	4610      	mov	r0, r2
 80185f2:	4798      	blx	r3
 80185f4:	4603      	mov	r3, r0
 80185f6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80185f8:	7bfb      	ldrb	r3, [r7, #15]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d103      	bne.n	8018606 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80185fe:	79fb      	ldrb	r3, [r7, #7]
 8018600:	4a03      	ldr	r2, [pc, #12]	@ (8018610 <disk_initialize+0x4c>)
 8018602:	2101      	movs	r1, #1
 8018604:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8018606:	7bfb      	ldrb	r3, [r7, #15]
}
 8018608:	4618      	mov	r0, r3
 801860a:	3710      	adds	r7, #16
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}
 8018610:	24000b84 	.word	0x24000b84

08018614 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018614:	b590      	push	{r4, r7, lr}
 8018616:	b087      	sub	sp, #28
 8018618:	af00      	add	r7, sp, #0
 801861a:	60b9      	str	r1, [r7, #8]
 801861c:	607a      	str	r2, [r7, #4]
 801861e:	603b      	str	r3, [r7, #0]
 8018620:	4603      	mov	r3, r0
 8018622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018624:	7bfb      	ldrb	r3, [r7, #15]
 8018626:	4a0a      	ldr	r2, [pc, #40]	@ (8018650 <disk_read+0x3c>)
 8018628:	009b      	lsls	r3, r3, #2
 801862a:	4413      	add	r3, r2
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	689c      	ldr	r4, [r3, #8]
 8018630:	7bfb      	ldrb	r3, [r7, #15]
 8018632:	4a07      	ldr	r2, [pc, #28]	@ (8018650 <disk_read+0x3c>)
 8018634:	4413      	add	r3, r2
 8018636:	7a18      	ldrb	r0, [r3, #8]
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	687a      	ldr	r2, [r7, #4]
 801863c:	68b9      	ldr	r1, [r7, #8]
 801863e:	47a0      	blx	r4
 8018640:	4603      	mov	r3, r0
 8018642:	75fb      	strb	r3, [r7, #23]
  return res;
 8018644:	7dfb      	ldrb	r3, [r7, #23]
}
 8018646:	4618      	mov	r0, r3
 8018648:	371c      	adds	r7, #28
 801864a:	46bd      	mov	sp, r7
 801864c:	bd90      	pop	{r4, r7, pc}
 801864e:	bf00      	nop
 8018650:	24000b84 	.word	0x24000b84

08018654 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018654:	b590      	push	{r4, r7, lr}
 8018656:	b087      	sub	sp, #28
 8018658:	af00      	add	r7, sp, #0
 801865a:	60b9      	str	r1, [r7, #8]
 801865c:	607a      	str	r2, [r7, #4]
 801865e:	603b      	str	r3, [r7, #0]
 8018660:	4603      	mov	r3, r0
 8018662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018664:	7bfb      	ldrb	r3, [r7, #15]
 8018666:	4a0a      	ldr	r2, [pc, #40]	@ (8018690 <disk_write+0x3c>)
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	4413      	add	r3, r2
 801866c:	685b      	ldr	r3, [r3, #4]
 801866e:	68dc      	ldr	r4, [r3, #12]
 8018670:	7bfb      	ldrb	r3, [r7, #15]
 8018672:	4a07      	ldr	r2, [pc, #28]	@ (8018690 <disk_write+0x3c>)
 8018674:	4413      	add	r3, r2
 8018676:	7a18      	ldrb	r0, [r3, #8]
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	68b9      	ldr	r1, [r7, #8]
 801867e:	47a0      	blx	r4
 8018680:	4603      	mov	r3, r0
 8018682:	75fb      	strb	r3, [r7, #23]
  return res;
 8018684:	7dfb      	ldrb	r3, [r7, #23]
}
 8018686:	4618      	mov	r0, r3
 8018688:	371c      	adds	r7, #28
 801868a:	46bd      	mov	sp, r7
 801868c:	bd90      	pop	{r4, r7, pc}
 801868e:	bf00      	nop
 8018690:	24000b84 	.word	0x24000b84

08018694 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	4603      	mov	r3, r0
 801869c:	603a      	str	r2, [r7, #0]
 801869e:	71fb      	strb	r3, [r7, #7]
 80186a0:	460b      	mov	r3, r1
 80186a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80186a4:	79fb      	ldrb	r3, [r7, #7]
 80186a6:	4a09      	ldr	r2, [pc, #36]	@ (80186cc <disk_ioctl+0x38>)
 80186a8:	009b      	lsls	r3, r3, #2
 80186aa:	4413      	add	r3, r2
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	691b      	ldr	r3, [r3, #16]
 80186b0:	79fa      	ldrb	r2, [r7, #7]
 80186b2:	4906      	ldr	r1, [pc, #24]	@ (80186cc <disk_ioctl+0x38>)
 80186b4:	440a      	add	r2, r1
 80186b6:	7a10      	ldrb	r0, [r2, #8]
 80186b8:	79b9      	ldrb	r1, [r7, #6]
 80186ba:	683a      	ldr	r2, [r7, #0]
 80186bc:	4798      	blx	r3
 80186be:	4603      	mov	r3, r0
 80186c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80186c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3710      	adds	r7, #16
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	24000b84 	.word	0x24000b84

080186d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80186d0:	b480      	push	{r7}
 80186d2:	b085      	sub	sp, #20
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	3301      	adds	r3, #1
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80186e0:	89fb      	ldrh	r3, [r7, #14]
 80186e2:	021b      	lsls	r3, r3, #8
 80186e4:	b21a      	sxth	r2, r3
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	b21b      	sxth	r3, r3
 80186ec:	4313      	orrs	r3, r2
 80186ee:	b21b      	sxth	r3, r3
 80186f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80186f2:	89fb      	ldrh	r3, [r7, #14]
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3714      	adds	r7, #20
 80186f8:	46bd      	mov	sp, r7
 80186fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fe:	4770      	bx	lr

08018700 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8018700:	b480      	push	{r7}
 8018702:	b085      	sub	sp, #20
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	3303      	adds	r3, #3
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	021b      	lsls	r3, r3, #8
 8018714:	687a      	ldr	r2, [r7, #4]
 8018716:	3202      	adds	r2, #2
 8018718:	7812      	ldrb	r2, [r2, #0]
 801871a:	4313      	orrs	r3, r2
 801871c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	021b      	lsls	r3, r3, #8
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	3201      	adds	r2, #1
 8018726:	7812      	ldrb	r2, [r2, #0]
 8018728:	4313      	orrs	r3, r2
 801872a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	021b      	lsls	r3, r3, #8
 8018730:	687a      	ldr	r2, [r7, #4]
 8018732:	7812      	ldrb	r2, [r2, #0]
 8018734:	4313      	orrs	r3, r2
 8018736:	60fb      	str	r3, [r7, #12]
	return rv;
 8018738:	68fb      	ldr	r3, [r7, #12]
}
 801873a:	4618      	mov	r0, r3
 801873c:	3714      	adds	r7, #20
 801873e:	46bd      	mov	sp, r7
 8018740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018744:	4770      	bx	lr

08018746 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8018746:	b480      	push	{r7}
 8018748:	b083      	sub	sp, #12
 801874a:	af00      	add	r7, sp, #0
 801874c:	6078      	str	r0, [r7, #4]
 801874e:	460b      	mov	r3, r1
 8018750:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	1c5a      	adds	r2, r3, #1
 8018756:	607a      	str	r2, [r7, #4]
 8018758:	887a      	ldrh	r2, [r7, #2]
 801875a:	b2d2      	uxtb	r2, r2
 801875c:	701a      	strb	r2, [r3, #0]
 801875e:	887b      	ldrh	r3, [r7, #2]
 8018760:	0a1b      	lsrs	r3, r3, #8
 8018762:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	1c5a      	adds	r2, r3, #1
 8018768:	607a      	str	r2, [r7, #4]
 801876a:	887a      	ldrh	r2, [r7, #2]
 801876c:	b2d2      	uxtb	r2, r2
 801876e:	701a      	strb	r2, [r3, #0]
}
 8018770:	bf00      	nop
 8018772:	370c      	adds	r7, #12
 8018774:	46bd      	mov	sp, r7
 8018776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877a:	4770      	bx	lr

0801877c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801877c:	b480      	push	{r7}
 801877e:	b083      	sub	sp, #12
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	1c5a      	adds	r2, r3, #1
 801878a:	607a      	str	r2, [r7, #4]
 801878c:	683a      	ldr	r2, [r7, #0]
 801878e:	b2d2      	uxtb	r2, r2
 8018790:	701a      	strb	r2, [r3, #0]
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	0a1b      	lsrs	r3, r3, #8
 8018796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	1c5a      	adds	r2, r3, #1
 801879c:	607a      	str	r2, [r7, #4]
 801879e:	683a      	ldr	r2, [r7, #0]
 80187a0:	b2d2      	uxtb	r2, r2
 80187a2:	701a      	strb	r2, [r3, #0]
 80187a4:	683b      	ldr	r3, [r7, #0]
 80187a6:	0a1b      	lsrs	r3, r3, #8
 80187a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	1c5a      	adds	r2, r3, #1
 80187ae:	607a      	str	r2, [r7, #4]
 80187b0:	683a      	ldr	r2, [r7, #0]
 80187b2:	b2d2      	uxtb	r2, r2
 80187b4:	701a      	strb	r2, [r3, #0]
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	0a1b      	lsrs	r3, r3, #8
 80187ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	1c5a      	adds	r2, r3, #1
 80187c0:	607a      	str	r2, [r7, #4]
 80187c2:	683a      	ldr	r2, [r7, #0]
 80187c4:	b2d2      	uxtb	r2, r2
 80187c6:	701a      	strb	r2, [r3, #0]
}
 80187c8:	bf00      	nop
 80187ca:	370c      	adds	r7, #12
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr

080187d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80187d4:	b480      	push	{r7}
 80187d6:	b087      	sub	sp, #28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	60f8      	str	r0, [r7, #12]
 80187dc:	60b9      	str	r1, [r7, #8]
 80187de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00d      	beq.n	801880a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80187ee:	693a      	ldr	r2, [r7, #16]
 80187f0:	1c53      	adds	r3, r2, #1
 80187f2:	613b      	str	r3, [r7, #16]
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	1c59      	adds	r1, r3, #1
 80187f8:	6179      	str	r1, [r7, #20]
 80187fa:	7812      	ldrb	r2, [r2, #0]
 80187fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	3b01      	subs	r3, #1
 8018802:	607b      	str	r3, [r7, #4]
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d1f1      	bne.n	80187ee <mem_cpy+0x1a>
	}
}
 801880a:	bf00      	nop
 801880c:	371c      	adds	r7, #28
 801880e:	46bd      	mov	sp, r7
 8018810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018814:	4770      	bx	lr

08018816 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018816:	b480      	push	{r7}
 8018818:	b087      	sub	sp, #28
 801881a:	af00      	add	r7, sp, #0
 801881c:	60f8      	str	r0, [r7, #12]
 801881e:	60b9      	str	r1, [r7, #8]
 8018820:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	1c5a      	adds	r2, r3, #1
 801882a:	617a      	str	r2, [r7, #20]
 801882c:	68ba      	ldr	r2, [r7, #8]
 801882e:	b2d2      	uxtb	r2, r2
 8018830:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	3b01      	subs	r3, #1
 8018836:	607b      	str	r3, [r7, #4]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d1f3      	bne.n	8018826 <mem_set+0x10>
}
 801883e:	bf00      	nop
 8018840:	bf00      	nop
 8018842:	371c      	adds	r7, #28
 8018844:	46bd      	mov	sp, r7
 8018846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884a:	4770      	bx	lr

0801884c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801884c:	b480      	push	{r7}
 801884e:	b089      	sub	sp, #36	@ 0x24
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	61fb      	str	r3, [r7, #28]
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8018860:	2300      	movs	r3, #0
 8018862:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	1c5a      	adds	r2, r3, #1
 8018868:	61fa      	str	r2, [r7, #28]
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	4619      	mov	r1, r3
 801886e:	69bb      	ldr	r3, [r7, #24]
 8018870:	1c5a      	adds	r2, r3, #1
 8018872:	61ba      	str	r2, [r7, #24]
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	1acb      	subs	r3, r1, r3
 8018878:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	3b01      	subs	r3, #1
 801887e:	607b      	str	r3, [r7, #4]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d002      	beq.n	801888c <mem_cmp+0x40>
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d0eb      	beq.n	8018864 <mem_cmp+0x18>

	return r;
 801888c:	697b      	ldr	r3, [r7, #20]
}
 801888e:	4618      	mov	r0, r3
 8018890:	3724      	adds	r7, #36	@ 0x24
 8018892:	46bd      	mov	sp, r7
 8018894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018898:	4770      	bx	lr

0801889a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801889a:	b480      	push	{r7}
 801889c:	b083      	sub	sp, #12
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80188a4:	e002      	b.n	80188ac <chk_chr+0x12>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	3301      	adds	r3, #1
 80188aa:	607b      	str	r3, [r7, #4]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	781b      	ldrb	r3, [r3, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d005      	beq.n	80188c0 <chk_chr+0x26>
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	461a      	mov	r2, r3
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	4293      	cmp	r3, r2
 80188be:	d1f2      	bne.n	80188a6 <chk_chr+0xc>
	return *str;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	781b      	ldrb	r3, [r3, #0]
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	370c      	adds	r7, #12
 80188c8:	46bd      	mov	sp, r7
 80188ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ce:	4770      	bx	lr

080188d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80188d0:	b480      	push	{r7}
 80188d2:	b085      	sub	sp, #20
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80188da:	2300      	movs	r3, #0
 80188dc:	60bb      	str	r3, [r7, #8]
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	60fb      	str	r3, [r7, #12]
 80188e2:	e029      	b.n	8018938 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80188e4:	4a27      	ldr	r2, [pc, #156]	@ (8018984 <chk_lock+0xb4>)
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	011b      	lsls	r3, r3, #4
 80188ea:	4413      	add	r3, r2
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d01d      	beq.n	801892e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80188f2:	4a24      	ldr	r2, [pc, #144]	@ (8018984 <chk_lock+0xb4>)
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	011b      	lsls	r3, r3, #4
 80188f8:	4413      	add	r3, r2
 80188fa:	681a      	ldr	r2, [r3, #0]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	429a      	cmp	r2, r3
 8018902:	d116      	bne.n	8018932 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8018904:	4a1f      	ldr	r2, [pc, #124]	@ (8018984 <chk_lock+0xb4>)
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	011b      	lsls	r3, r3, #4
 801890a:	4413      	add	r3, r2
 801890c:	3304      	adds	r3, #4
 801890e:	681a      	ldr	r2, [r3, #0]
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8018914:	429a      	cmp	r2, r3
 8018916:	d10c      	bne.n	8018932 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8018918:	4a1a      	ldr	r2, [pc, #104]	@ (8018984 <chk_lock+0xb4>)
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	011b      	lsls	r3, r3, #4
 801891e:	4413      	add	r3, r2
 8018920:	3308      	adds	r3, #8
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8018928:	429a      	cmp	r2, r3
 801892a:	d102      	bne.n	8018932 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801892c:	e007      	b.n	801893e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801892e:	2301      	movs	r3, #1
 8018930:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	3301      	adds	r3, #1
 8018936:	60fb      	str	r3, [r7, #12]
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	2b01      	cmp	r3, #1
 801893c:	d9d2      	bls.n	80188e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	2b02      	cmp	r3, #2
 8018942:	d109      	bne.n	8018958 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d102      	bne.n	8018950 <chk_lock+0x80>
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	2b02      	cmp	r3, #2
 801894e:	d101      	bne.n	8018954 <chk_lock+0x84>
 8018950:	2300      	movs	r3, #0
 8018952:	e010      	b.n	8018976 <chk_lock+0xa6>
 8018954:	2312      	movs	r3, #18
 8018956:	e00e      	b.n	8018976 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8018958:	683b      	ldr	r3, [r7, #0]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d108      	bne.n	8018970 <chk_lock+0xa0>
 801895e:	4a09      	ldr	r2, [pc, #36]	@ (8018984 <chk_lock+0xb4>)
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	011b      	lsls	r3, r3, #4
 8018964:	4413      	add	r3, r2
 8018966:	330c      	adds	r3, #12
 8018968:	881b      	ldrh	r3, [r3, #0]
 801896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801896e:	d101      	bne.n	8018974 <chk_lock+0xa4>
 8018970:	2310      	movs	r3, #16
 8018972:	e000      	b.n	8018976 <chk_lock+0xa6>
 8018974:	2300      	movs	r3, #0
}
 8018976:	4618      	mov	r0, r3
 8018978:	3714      	adds	r7, #20
 801897a:	46bd      	mov	sp, r7
 801897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018980:	4770      	bx	lr
 8018982:	bf00      	nop
 8018984:	24000b64 	.word	0x24000b64

08018988 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8018988:	b480      	push	{r7}
 801898a:	b083      	sub	sp, #12
 801898c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801898e:	2300      	movs	r3, #0
 8018990:	607b      	str	r3, [r7, #4]
 8018992:	e002      	b.n	801899a <enq_lock+0x12>
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	3301      	adds	r3, #1
 8018998:	607b      	str	r3, [r7, #4]
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2b01      	cmp	r3, #1
 801899e:	d806      	bhi.n	80189ae <enq_lock+0x26>
 80189a0:	4a09      	ldr	r2, [pc, #36]	@ (80189c8 <enq_lock+0x40>)
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	011b      	lsls	r3, r3, #4
 80189a6:	4413      	add	r3, r2
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d1f2      	bne.n	8018994 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2b02      	cmp	r3, #2
 80189b2:	bf14      	ite	ne
 80189b4:	2301      	movne	r3, #1
 80189b6:	2300      	moveq	r3, #0
 80189b8:	b2db      	uxtb	r3, r3
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	370c      	adds	r7, #12
 80189be:	46bd      	mov	sp, r7
 80189c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop
 80189c8:	24000b64 	.word	0x24000b64

080189cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b085      	sub	sp, #20
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80189d6:	2300      	movs	r3, #0
 80189d8:	60fb      	str	r3, [r7, #12]
 80189da:	e01f      	b.n	8018a1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80189dc:	4a41      	ldr	r2, [pc, #260]	@ (8018ae4 <inc_lock+0x118>)
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	011b      	lsls	r3, r3, #4
 80189e2:	4413      	add	r3, r2
 80189e4:	681a      	ldr	r2, [r3, #0]
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d113      	bne.n	8018a16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80189ee:	4a3d      	ldr	r2, [pc, #244]	@ (8018ae4 <inc_lock+0x118>)
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	011b      	lsls	r3, r3, #4
 80189f4:	4413      	add	r3, r2
 80189f6:	3304      	adds	r3, #4
 80189f8:	681a      	ldr	r2, [r3, #0]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d109      	bne.n	8018a16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8018a02:	4a38      	ldr	r2, [pc, #224]	@ (8018ae4 <inc_lock+0x118>)
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	011b      	lsls	r3, r3, #4
 8018a08:	4413      	add	r3, r2
 8018a0a:	3308      	adds	r3, #8
 8018a0c:	681a      	ldr	r2, [r3, #0]
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d006      	beq.n	8018a24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	3301      	adds	r3, #1
 8018a1a:	60fb      	str	r3, [r7, #12]
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d9dc      	bls.n	80189dc <inc_lock+0x10>
 8018a22:	e000      	b.n	8018a26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8018a24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	2b02      	cmp	r3, #2
 8018a2a:	d132      	bne.n	8018a92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	60fb      	str	r3, [r7, #12]
 8018a30:	e002      	b.n	8018a38 <inc_lock+0x6c>
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	3301      	adds	r3, #1
 8018a36:	60fb      	str	r3, [r7, #12]
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	2b01      	cmp	r3, #1
 8018a3c:	d806      	bhi.n	8018a4c <inc_lock+0x80>
 8018a3e:	4a29      	ldr	r2, [pc, #164]	@ (8018ae4 <inc_lock+0x118>)
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	011b      	lsls	r3, r3, #4
 8018a44:	4413      	add	r3, r2
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d1f2      	bne.n	8018a32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2b02      	cmp	r3, #2
 8018a50:	d101      	bne.n	8018a56 <inc_lock+0x8a>
 8018a52:	2300      	movs	r3, #0
 8018a54:	e040      	b.n	8018ad8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	4922      	ldr	r1, [pc, #136]	@ (8018ae4 <inc_lock+0x118>)
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	011b      	lsls	r3, r3, #4
 8018a60:	440b      	add	r3, r1
 8018a62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	689a      	ldr	r2, [r3, #8]
 8018a68:	491e      	ldr	r1, [pc, #120]	@ (8018ae4 <inc_lock+0x118>)
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	011b      	lsls	r3, r3, #4
 8018a6e:	440b      	add	r3, r1
 8018a70:	3304      	adds	r3, #4
 8018a72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	695a      	ldr	r2, [r3, #20]
 8018a78:	491a      	ldr	r1, [pc, #104]	@ (8018ae4 <inc_lock+0x118>)
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	011b      	lsls	r3, r3, #4
 8018a7e:	440b      	add	r3, r1
 8018a80:	3308      	adds	r3, #8
 8018a82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8018a84:	4a17      	ldr	r2, [pc, #92]	@ (8018ae4 <inc_lock+0x118>)
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	011b      	lsls	r3, r3, #4
 8018a8a:	4413      	add	r3, r2
 8018a8c:	330c      	adds	r3, #12
 8018a8e:	2200      	movs	r2, #0
 8018a90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d009      	beq.n	8018aac <inc_lock+0xe0>
 8018a98:	4a12      	ldr	r2, [pc, #72]	@ (8018ae4 <inc_lock+0x118>)
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	011b      	lsls	r3, r3, #4
 8018a9e:	4413      	add	r3, r2
 8018aa0:	330c      	adds	r3, #12
 8018aa2:	881b      	ldrh	r3, [r3, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d001      	beq.n	8018aac <inc_lock+0xe0>
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	e015      	b.n	8018ad8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d108      	bne.n	8018ac4 <inc_lock+0xf8>
 8018ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8018ae4 <inc_lock+0x118>)
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	011b      	lsls	r3, r3, #4
 8018ab8:	4413      	add	r3, r2
 8018aba:	330c      	adds	r3, #12
 8018abc:	881b      	ldrh	r3, [r3, #0]
 8018abe:	3301      	adds	r3, #1
 8018ac0:	b29a      	uxth	r2, r3
 8018ac2:	e001      	b.n	8018ac8 <inc_lock+0xfc>
 8018ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018ac8:	4906      	ldr	r1, [pc, #24]	@ (8018ae4 <inc_lock+0x118>)
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	011b      	lsls	r3, r3, #4
 8018ace:	440b      	add	r3, r1
 8018ad0:	330c      	adds	r3, #12
 8018ad2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	3301      	adds	r3, #1
}
 8018ad8:	4618      	mov	r0, r3
 8018ada:	3714      	adds	r7, #20
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr
 8018ae4:	24000b64 	.word	0x24000b64

08018ae8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8018ae8:	b480      	push	{r7}
 8018aea:	b085      	sub	sp, #20
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	3b01      	subs	r3, #1
 8018af4:	607b      	str	r3, [r7, #4]
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	d825      	bhi.n	8018b48 <dec_lock+0x60>
		n = Files[i].ctr;
 8018afc:	4a17      	ldr	r2, [pc, #92]	@ (8018b5c <dec_lock+0x74>)
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	011b      	lsls	r3, r3, #4
 8018b02:	4413      	add	r3, r2
 8018b04:	330c      	adds	r3, #12
 8018b06:	881b      	ldrh	r3, [r3, #0]
 8018b08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8018b0a:	89fb      	ldrh	r3, [r7, #14]
 8018b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018b10:	d101      	bne.n	8018b16 <dec_lock+0x2e>
 8018b12:	2300      	movs	r3, #0
 8018b14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8018b16:	89fb      	ldrh	r3, [r7, #14]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d002      	beq.n	8018b22 <dec_lock+0x3a>
 8018b1c:	89fb      	ldrh	r3, [r7, #14]
 8018b1e:	3b01      	subs	r3, #1
 8018b20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8018b22:	4a0e      	ldr	r2, [pc, #56]	@ (8018b5c <dec_lock+0x74>)
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	011b      	lsls	r3, r3, #4
 8018b28:	4413      	add	r3, r2
 8018b2a:	330c      	adds	r3, #12
 8018b2c:	89fa      	ldrh	r2, [r7, #14]
 8018b2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018b30:	89fb      	ldrh	r3, [r7, #14]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d105      	bne.n	8018b42 <dec_lock+0x5a>
 8018b36:	4a09      	ldr	r2, [pc, #36]	@ (8018b5c <dec_lock+0x74>)
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	011b      	lsls	r3, r3, #4
 8018b3c:	4413      	add	r3, r2
 8018b3e:	2200      	movs	r2, #0
 8018b40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8018b42:	2300      	movs	r3, #0
 8018b44:	737b      	strb	r3, [r7, #13]
 8018b46:	e001      	b.n	8018b4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8018b48:	2302      	movs	r3, #2
 8018b4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8018b4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8018b4e:	4618      	mov	r0, r3
 8018b50:	3714      	adds	r7, #20
 8018b52:	46bd      	mov	sp, r7
 8018b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b58:	4770      	bx	lr
 8018b5a:	bf00      	nop
 8018b5c:	24000b64 	.word	0x24000b64

08018b60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8018b60:	b480      	push	{r7}
 8018b62:	b085      	sub	sp, #20
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8018b68:	2300      	movs	r3, #0
 8018b6a:	60fb      	str	r3, [r7, #12]
 8018b6c:	e010      	b.n	8018b90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8018b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8018ba4 <clear_lock+0x44>)
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	011b      	lsls	r3, r3, #4
 8018b74:	4413      	add	r3, r2
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	687a      	ldr	r2, [r7, #4]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d105      	bne.n	8018b8a <clear_lock+0x2a>
 8018b7e:	4a09      	ldr	r2, [pc, #36]	@ (8018ba4 <clear_lock+0x44>)
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	011b      	lsls	r3, r3, #4
 8018b84:	4413      	add	r3, r2
 8018b86:	2200      	movs	r2, #0
 8018b88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	60fb      	str	r3, [r7, #12]
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	2b01      	cmp	r3, #1
 8018b94:	d9eb      	bls.n	8018b6e <clear_lock+0xe>
	}
}
 8018b96:	bf00      	nop
 8018b98:	bf00      	nop
 8018b9a:	3714      	adds	r7, #20
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba2:	4770      	bx	lr
 8018ba4:	24000b64 	.word	0x24000b64

08018ba8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b086      	sub	sp, #24
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	78db      	ldrb	r3, [r3, #3]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d034      	beq.n	8018c26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	7858      	ldrb	r0, [r3, #1]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018bcc:	2301      	movs	r3, #1
 8018bce:	697a      	ldr	r2, [r7, #20]
 8018bd0:	f7ff fd40 	bl	8018654 <disk_write>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d002      	beq.n	8018be0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8018bda:	2301      	movs	r3, #1
 8018bdc:	73fb      	strb	r3, [r7, #15]
 8018bde:	e022      	b.n	8018c26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2200      	movs	r2, #0
 8018be4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6a1b      	ldr	r3, [r3, #32]
 8018bea:	697a      	ldr	r2, [r7, #20]
 8018bec:	1ad2      	subs	r2, r2, r3
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	699b      	ldr	r3, [r3, #24]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d217      	bcs.n	8018c26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	789b      	ldrb	r3, [r3, #2]
 8018bfa:	613b      	str	r3, [r7, #16]
 8018bfc:	e010      	b.n	8018c20 <sync_window+0x78>
					wsect += fs->fsize;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	699b      	ldr	r3, [r3, #24]
 8018c02:	697a      	ldr	r2, [r7, #20]
 8018c04:	4413      	add	r3, r2
 8018c06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	7858      	ldrb	r0, [r3, #1]
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018c12:	2301      	movs	r3, #1
 8018c14:	697a      	ldr	r2, [r7, #20]
 8018c16:	f7ff fd1d 	bl	8018654 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018c1a:	693b      	ldr	r3, [r7, #16]
 8018c1c:	3b01      	subs	r3, #1
 8018c1e:	613b      	str	r3, [r7, #16]
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d8eb      	bhi.n	8018bfe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8018c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3718      	adds	r7, #24
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
 8018c38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c42:	683a      	ldr	r2, [r7, #0]
 8018c44:	429a      	cmp	r2, r3
 8018c46:	d01b      	beq.n	8018c80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f7ff ffad 	bl	8018ba8 <sync_window>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8018c52:	7bfb      	ldrb	r3, [r7, #15]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d113      	bne.n	8018c80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	7858      	ldrb	r0, [r3, #1]
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018c62:	2301      	movs	r3, #1
 8018c64:	683a      	ldr	r2, [r7, #0]
 8018c66:	f7ff fcd5 	bl	8018614 <disk_read>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d004      	beq.n	8018c7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8018c70:	f04f 33ff 	mov.w	r3, #4294967295
 8018c74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8018c76:	2301      	movs	r3, #1
 8018c78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	683a      	ldr	r2, [r7, #0]
 8018c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8018c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3710      	adds	r7, #16
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
	...

08018c8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b084      	sub	sp, #16
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f7ff ff87 	bl	8018ba8 <sync_window>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8018c9e:	7bfb      	ldrb	r3, [r7, #15]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d158      	bne.n	8018d56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	2b03      	cmp	r3, #3
 8018caa:	d148      	bne.n	8018d3e <sync_fs+0xb2>
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	791b      	ldrb	r3, [r3, #4]
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	d144      	bne.n	8018d3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	3330      	adds	r3, #48	@ 0x30
 8018cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018cbc:	2100      	movs	r1, #0
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7ff fda9 	bl	8018816 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	3330      	adds	r3, #48	@ 0x30
 8018cc8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8018ccc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7ff fd38 	bl	8018746 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	3330      	adds	r3, #48	@ 0x30
 8018cda:	4921      	ldr	r1, [pc, #132]	@ (8018d60 <sync_fs+0xd4>)
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7ff fd4d 	bl	801877c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	3330      	adds	r3, #48	@ 0x30
 8018ce6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8018cea:	491e      	ldr	r1, [pc, #120]	@ (8018d64 <sync_fs+0xd8>)
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7ff fd45 	bl	801877c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	3330      	adds	r3, #48	@ 0x30
 8018cf6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	691b      	ldr	r3, [r3, #16]
 8018cfe:	4619      	mov	r1, r3
 8018d00:	4610      	mov	r0, r2
 8018d02:	f7ff fd3b 	bl	801877c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	3330      	adds	r3, #48	@ 0x30
 8018d0a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	68db      	ldr	r3, [r3, #12]
 8018d12:	4619      	mov	r1, r3
 8018d14:	4610      	mov	r0, r2
 8018d16:	f7ff fd31 	bl	801877c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	69db      	ldr	r3, [r3, #28]
 8018d1e:	1c5a      	adds	r2, r3, #1
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	7858      	ldrb	r0, [r3, #1]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d32:	2301      	movs	r3, #1
 8018d34:	f7ff fc8e 	bl	8018654 <disk_write>
			fs->fsi_flag = 0;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	785b      	ldrb	r3, [r3, #1]
 8018d42:	2200      	movs	r2, #0
 8018d44:	2100      	movs	r1, #0
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7ff fca4 	bl	8018694 <disk_ioctl>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d001      	beq.n	8018d56 <sync_fs+0xca>
 8018d52:	2301      	movs	r3, #1
 8018d54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8018d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	41615252 	.word	0x41615252
 8018d64:	61417272 	.word	0x61417272

08018d68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8018d68:	b480      	push	{r7}
 8018d6a:	b083      	sub	sp, #12
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
 8018d70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	3b02      	subs	r3, #2
 8018d76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	695b      	ldr	r3, [r3, #20]
 8018d7c:	3b02      	subs	r3, #2
 8018d7e:	683a      	ldr	r2, [r7, #0]
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d301      	bcc.n	8018d88 <clust2sect+0x20>
 8018d84:	2300      	movs	r3, #0
 8018d86:	e008      	b.n	8018d9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	895b      	ldrh	r3, [r3, #10]
 8018d8c:	461a      	mov	r2, r3
 8018d8e:	683b      	ldr	r3, [r7, #0]
 8018d90:	fb03 f202 	mul.w	r2, r3, r2
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d98:	4413      	add	r3, r2
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	370c      	adds	r7, #12
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8018da6:	b580      	push	{r7, lr}
 8018da8:	b086      	sub	sp, #24
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
 8018dae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	2b01      	cmp	r3, #1
 8018dba:	d904      	bls.n	8018dc6 <get_fat+0x20>
 8018dbc:	693b      	ldr	r3, [r7, #16]
 8018dbe:	695b      	ldr	r3, [r3, #20]
 8018dc0:	683a      	ldr	r2, [r7, #0]
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d302      	bcc.n	8018dcc <get_fat+0x26>
		val = 1;	/* Internal error */
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	617b      	str	r3, [r7, #20]
 8018dca:	e08e      	b.n	8018eea <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8018dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	2b03      	cmp	r3, #3
 8018dd8:	d061      	beq.n	8018e9e <get_fat+0xf8>
 8018dda:	2b03      	cmp	r3, #3
 8018ddc:	dc7b      	bgt.n	8018ed6 <get_fat+0x130>
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d002      	beq.n	8018de8 <get_fat+0x42>
 8018de2:	2b02      	cmp	r3, #2
 8018de4:	d041      	beq.n	8018e6a <get_fat+0xc4>
 8018de6:	e076      	b.n	8018ed6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8018de8:	683b      	ldr	r3, [r7, #0]
 8018dea:	60fb      	str	r3, [r7, #12]
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	085b      	lsrs	r3, r3, #1
 8018df0:	68fa      	ldr	r2, [r7, #12]
 8018df2:	4413      	add	r3, r2
 8018df4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018df6:	693b      	ldr	r3, [r7, #16]
 8018df8:	6a1a      	ldr	r2, [r3, #32]
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	0a5b      	lsrs	r3, r3, #9
 8018dfe:	4413      	add	r3, r2
 8018e00:	4619      	mov	r1, r3
 8018e02:	6938      	ldr	r0, [r7, #16]
 8018e04:	f7ff ff14 	bl	8018c30 <move_window>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d166      	bne.n	8018edc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	1c5a      	adds	r2, r3, #1
 8018e12:	60fa      	str	r2, [r7, #12]
 8018e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018e18:	693a      	ldr	r2, [r7, #16]
 8018e1a:	4413      	add	r3, r2
 8018e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018e20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018e22:	693b      	ldr	r3, [r7, #16]
 8018e24:	6a1a      	ldr	r2, [r3, #32]
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	0a5b      	lsrs	r3, r3, #9
 8018e2a:	4413      	add	r3, r2
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	6938      	ldr	r0, [r7, #16]
 8018e30:	f7ff fefe 	bl	8018c30 <move_window>
 8018e34:	4603      	mov	r3, r0
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d152      	bne.n	8018ee0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018e40:	693a      	ldr	r2, [r7, #16]
 8018e42:	4413      	add	r3, r2
 8018e44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018e48:	021b      	lsls	r3, r3, #8
 8018e4a:	68ba      	ldr	r2, [r7, #8]
 8018e4c:	4313      	orrs	r3, r2
 8018e4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018e50:	683b      	ldr	r3, [r7, #0]
 8018e52:	f003 0301 	and.w	r3, r3, #1
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d002      	beq.n	8018e60 <get_fat+0xba>
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	091b      	lsrs	r3, r3, #4
 8018e5e:	e002      	b.n	8018e66 <get_fat+0xc0>
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018e66:	617b      	str	r3, [r7, #20]
			break;
 8018e68:	e03f      	b.n	8018eea <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018e6a:	693b      	ldr	r3, [r7, #16]
 8018e6c:	6a1a      	ldr	r2, [r3, #32]
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	0a1b      	lsrs	r3, r3, #8
 8018e72:	4413      	add	r3, r2
 8018e74:	4619      	mov	r1, r3
 8018e76:	6938      	ldr	r0, [r7, #16]
 8018e78:	f7ff feda 	bl	8018c30 <move_window>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d130      	bne.n	8018ee4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	005b      	lsls	r3, r3, #1
 8018e8c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018e90:	4413      	add	r3, r2
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7ff fc1c 	bl	80186d0 <ld_word>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	617b      	str	r3, [r7, #20]
			break;
 8018e9c:	e025      	b.n	8018eea <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	6a1a      	ldr	r2, [r3, #32]
 8018ea2:	683b      	ldr	r3, [r7, #0]
 8018ea4:	09db      	lsrs	r3, r3, #7
 8018ea6:	4413      	add	r3, r2
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	6938      	ldr	r0, [r7, #16]
 8018eac:	f7ff fec0 	bl	8018c30 <move_window>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d118      	bne.n	8018ee8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018eb6:	693b      	ldr	r3, [r7, #16]
 8018eb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	009b      	lsls	r3, r3, #2
 8018ec0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018ec4:	4413      	add	r3, r2
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7ff fc1a 	bl	8018700 <ld_dword>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8018ed2:	617b      	str	r3, [r7, #20]
			break;
 8018ed4:	e009      	b.n	8018eea <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018ed6:	2301      	movs	r3, #1
 8018ed8:	617b      	str	r3, [r7, #20]
 8018eda:	e006      	b.n	8018eea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018edc:	bf00      	nop
 8018ede:	e004      	b.n	8018eea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018ee0:	bf00      	nop
 8018ee2:	e002      	b.n	8018eea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018ee4:	bf00      	nop
 8018ee6:	e000      	b.n	8018eea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018ee8:	bf00      	nop
		}
	}

	return val;
 8018eea:	697b      	ldr	r3, [r7, #20]
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	3718      	adds	r7, #24
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018ef4:	b590      	push	{r4, r7, lr}
 8018ef6:	b089      	sub	sp, #36	@ 0x24
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	60f8      	str	r0, [r7, #12]
 8018efc:	60b9      	str	r1, [r7, #8]
 8018efe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8018f00:	2302      	movs	r3, #2
 8018f02:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018f04:	68bb      	ldr	r3, [r7, #8]
 8018f06:	2b01      	cmp	r3, #1
 8018f08:	f240 80d9 	bls.w	80190be <put_fat+0x1ca>
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	695b      	ldr	r3, [r3, #20]
 8018f10:	68ba      	ldr	r2, [r7, #8]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	f080 80d3 	bcs.w	80190be <put_fat+0x1ca>
		switch (fs->fs_type) {
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	2b03      	cmp	r3, #3
 8018f1e:	f000 8096 	beq.w	801904e <put_fat+0x15a>
 8018f22:	2b03      	cmp	r3, #3
 8018f24:	f300 80cb 	bgt.w	80190be <put_fat+0x1ca>
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d002      	beq.n	8018f32 <put_fat+0x3e>
 8018f2c:	2b02      	cmp	r3, #2
 8018f2e:	d06e      	beq.n	801900e <put_fat+0x11a>
 8018f30:	e0c5      	b.n	80190be <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018f32:	68bb      	ldr	r3, [r7, #8]
 8018f34:	61bb      	str	r3, [r7, #24]
 8018f36:	69bb      	ldr	r3, [r7, #24]
 8018f38:	085b      	lsrs	r3, r3, #1
 8018f3a:	69ba      	ldr	r2, [r7, #24]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	6a1a      	ldr	r2, [r3, #32]
 8018f44:	69bb      	ldr	r3, [r7, #24]
 8018f46:	0a5b      	lsrs	r3, r3, #9
 8018f48:	4413      	add	r3, r2
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	68f8      	ldr	r0, [r7, #12]
 8018f4e:	f7ff fe6f 	bl	8018c30 <move_window>
 8018f52:	4603      	mov	r3, r0
 8018f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018f56:	7ffb      	ldrb	r3, [r7, #31]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	f040 80a9 	bne.w	80190b0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018f64:	69bb      	ldr	r3, [r7, #24]
 8018f66:	1c59      	adds	r1, r3, #1
 8018f68:	61b9      	str	r1, [r7, #24]
 8018f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f6e:	4413      	add	r3, r2
 8018f70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	f003 0301 	and.w	r3, r3, #1
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d00d      	beq.n	8018f98 <put_fat+0xa4>
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	b25b      	sxtb	r3, r3
 8018f82:	f003 030f 	and.w	r3, r3, #15
 8018f86:	b25a      	sxtb	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	b2db      	uxtb	r3, r3
 8018f8c:	011b      	lsls	r3, r3, #4
 8018f8e:	b25b      	sxtb	r3, r3
 8018f90:	4313      	orrs	r3, r2
 8018f92:	b25b      	sxtb	r3, r3
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	e001      	b.n	8018f9c <put_fat+0xa8>
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	b2db      	uxtb	r3, r3
 8018f9c:	697a      	ldr	r2, [r7, #20]
 8018f9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2201      	movs	r2, #1
 8018fa4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	6a1a      	ldr	r2, [r3, #32]
 8018faa:	69bb      	ldr	r3, [r7, #24]
 8018fac:	0a5b      	lsrs	r3, r3, #9
 8018fae:	4413      	add	r3, r2
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	68f8      	ldr	r0, [r7, #12]
 8018fb4:	f7ff fe3c 	bl	8018c30 <move_window>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018fbc:	7ffb      	ldrb	r3, [r7, #31]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d178      	bne.n	80190b4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8018fc8:	69bb      	ldr	r3, [r7, #24]
 8018fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018fce:	4413      	add	r3, r2
 8018fd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018fd2:	68bb      	ldr	r3, [r7, #8]
 8018fd4:	f003 0301 	and.w	r3, r3, #1
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d003      	beq.n	8018fe4 <put_fat+0xf0>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	091b      	lsrs	r3, r3, #4
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	e00e      	b.n	8019002 <put_fat+0x10e>
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	b25b      	sxtb	r3, r3
 8018fea:	f023 030f 	bic.w	r3, r3, #15
 8018fee:	b25a      	sxtb	r2, r3
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	0a1b      	lsrs	r3, r3, #8
 8018ff4:	b25b      	sxtb	r3, r3
 8018ff6:	f003 030f 	and.w	r3, r3, #15
 8018ffa:	b25b      	sxtb	r3, r3
 8018ffc:	4313      	orrs	r3, r2
 8018ffe:	b25b      	sxtb	r3, r3
 8019000:	b2db      	uxtb	r3, r3
 8019002:	697a      	ldr	r2, [r7, #20]
 8019004:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	2201      	movs	r2, #1
 801900a:	70da      	strb	r2, [r3, #3]
			break;
 801900c:	e057      	b.n	80190be <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	6a1a      	ldr	r2, [r3, #32]
 8019012:	68bb      	ldr	r3, [r7, #8]
 8019014:	0a1b      	lsrs	r3, r3, #8
 8019016:	4413      	add	r3, r2
 8019018:	4619      	mov	r1, r3
 801901a:	68f8      	ldr	r0, [r7, #12]
 801901c:	f7ff fe08 	bl	8018c30 <move_window>
 8019020:	4603      	mov	r3, r0
 8019022:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019024:	7ffb      	ldrb	r3, [r7, #31]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d146      	bne.n	80190b8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	005b      	lsls	r3, r3, #1
 8019034:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019038:	4413      	add	r3, r2
 801903a:	687a      	ldr	r2, [r7, #4]
 801903c:	b292      	uxth	r2, r2
 801903e:	4611      	mov	r1, r2
 8019040:	4618      	mov	r0, r3
 8019042:	f7ff fb80 	bl	8018746 <st_word>
			fs->wflag = 1;
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	2201      	movs	r2, #1
 801904a:	70da      	strb	r2, [r3, #3]
			break;
 801904c:	e037      	b.n	80190be <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	6a1a      	ldr	r2, [r3, #32]
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	09db      	lsrs	r3, r3, #7
 8019056:	4413      	add	r3, r2
 8019058:	4619      	mov	r1, r3
 801905a:	68f8      	ldr	r0, [r7, #12]
 801905c:	f7ff fde8 	bl	8018c30 <move_window>
 8019060:	4603      	mov	r3, r0
 8019062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019064:	7ffb      	ldrb	r3, [r7, #31]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d128      	bne.n	80190bc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	009b      	lsls	r3, r3, #2
 801907a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801907e:	4413      	add	r3, r2
 8019080:	4618      	mov	r0, r3
 8019082:	f7ff fb3d 	bl	8018700 <ld_dword>
 8019086:	4603      	mov	r3, r0
 8019088:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801908c:	4323      	orrs	r3, r4
 801908e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	009b      	lsls	r3, r3, #2
 801909a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801909e:	4413      	add	r3, r2
 80190a0:	6879      	ldr	r1, [r7, #4]
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7ff fb6a 	bl	801877c <st_dword>
			fs->wflag = 1;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	2201      	movs	r2, #1
 80190ac:	70da      	strb	r2, [r3, #3]
			break;
 80190ae:	e006      	b.n	80190be <put_fat+0x1ca>
			if (res != FR_OK) break;
 80190b0:	bf00      	nop
 80190b2:	e004      	b.n	80190be <put_fat+0x1ca>
			if (res != FR_OK) break;
 80190b4:	bf00      	nop
 80190b6:	e002      	b.n	80190be <put_fat+0x1ca>
			if (res != FR_OK) break;
 80190b8:	bf00      	nop
 80190ba:	e000      	b.n	80190be <put_fat+0x1ca>
			if (res != FR_OK) break;
 80190bc:	bf00      	nop
		}
	}
	return res;
 80190be:	7ffb      	ldrb	r3, [r7, #31]
}
 80190c0:	4618      	mov	r0, r3
 80190c2:	3724      	adds	r7, #36	@ 0x24
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd90      	pop	{r4, r7, pc}

080190c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b088      	sub	sp, #32
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	60f8      	str	r0, [r7, #12]
 80190d0:	60b9      	str	r1, [r7, #8]
 80190d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80190d4:	2300      	movs	r3, #0
 80190d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	2b01      	cmp	r3, #1
 80190e2:	d904      	bls.n	80190ee <remove_chain+0x26>
 80190e4:	69bb      	ldr	r3, [r7, #24]
 80190e6:	695b      	ldr	r3, [r3, #20]
 80190e8:	68ba      	ldr	r2, [r7, #8]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d301      	bcc.n	80190f2 <remove_chain+0x2a>
 80190ee:	2302      	movs	r3, #2
 80190f0:	e04b      	b.n	801918a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d00c      	beq.n	8019112 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80190f8:	f04f 32ff 	mov.w	r2, #4294967295
 80190fc:	6879      	ldr	r1, [r7, #4]
 80190fe:	69b8      	ldr	r0, [r7, #24]
 8019100:	f7ff fef8 	bl	8018ef4 <put_fat>
 8019104:	4603      	mov	r3, r0
 8019106:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019108:	7ffb      	ldrb	r3, [r7, #31]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d001      	beq.n	8019112 <remove_chain+0x4a>
 801910e:	7ffb      	ldrb	r3, [r7, #31]
 8019110:	e03b      	b.n	801918a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019112:	68b9      	ldr	r1, [r7, #8]
 8019114:	68f8      	ldr	r0, [r7, #12]
 8019116:	f7ff fe46 	bl	8018da6 <get_fat>
 801911a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d031      	beq.n	8019186 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d101      	bne.n	801912c <remove_chain+0x64>
 8019128:	2302      	movs	r3, #2
 801912a:	e02e      	b.n	801918a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019132:	d101      	bne.n	8019138 <remove_chain+0x70>
 8019134:	2301      	movs	r3, #1
 8019136:	e028      	b.n	801918a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019138:	2200      	movs	r2, #0
 801913a:	68b9      	ldr	r1, [r7, #8]
 801913c:	69b8      	ldr	r0, [r7, #24]
 801913e:	f7ff fed9 	bl	8018ef4 <put_fat>
 8019142:	4603      	mov	r3, r0
 8019144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019146:	7ffb      	ldrb	r3, [r7, #31]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d001      	beq.n	8019150 <remove_chain+0x88>
 801914c:	7ffb      	ldrb	r3, [r7, #31]
 801914e:	e01c      	b.n	801918a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019150:	69bb      	ldr	r3, [r7, #24]
 8019152:	691a      	ldr	r2, [r3, #16]
 8019154:	69bb      	ldr	r3, [r7, #24]
 8019156:	695b      	ldr	r3, [r3, #20]
 8019158:	3b02      	subs	r3, #2
 801915a:	429a      	cmp	r2, r3
 801915c:	d20b      	bcs.n	8019176 <remove_chain+0xae>
			fs->free_clst++;
 801915e:	69bb      	ldr	r3, [r7, #24]
 8019160:	691b      	ldr	r3, [r3, #16]
 8019162:	1c5a      	adds	r2, r3, #1
 8019164:	69bb      	ldr	r3, [r7, #24]
 8019166:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	791b      	ldrb	r3, [r3, #4]
 801916c:	f043 0301 	orr.w	r3, r3, #1
 8019170:	b2da      	uxtb	r2, r3
 8019172:	69bb      	ldr	r3, [r7, #24]
 8019174:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801917a:	69bb      	ldr	r3, [r7, #24]
 801917c:	695b      	ldr	r3, [r3, #20]
 801917e:	68ba      	ldr	r2, [r7, #8]
 8019180:	429a      	cmp	r2, r3
 8019182:	d3c6      	bcc.n	8019112 <remove_chain+0x4a>
 8019184:	e000      	b.n	8019188 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019186:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019188:	2300      	movs	r3, #0
}
 801918a:	4618      	mov	r0, r3
 801918c:	3720      	adds	r7, #32
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}

08019192 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019192:	b580      	push	{r7, lr}
 8019194:	b088      	sub	sp, #32
 8019196:	af00      	add	r7, sp, #0
 8019198:	6078      	str	r0, [r7, #4]
 801919a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d10d      	bne.n	80191c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	68db      	ldr	r3, [r3, #12]
 80191ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80191ae:	69bb      	ldr	r3, [r7, #24]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d004      	beq.n	80191be <create_chain+0x2c>
 80191b4:	693b      	ldr	r3, [r7, #16]
 80191b6:	695b      	ldr	r3, [r3, #20]
 80191b8:	69ba      	ldr	r2, [r7, #24]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d31b      	bcc.n	80191f6 <create_chain+0x64>
 80191be:	2301      	movs	r3, #1
 80191c0:	61bb      	str	r3, [r7, #24]
 80191c2:	e018      	b.n	80191f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80191c4:	6839      	ldr	r1, [r7, #0]
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	f7ff fded 	bl	8018da6 <get_fat>
 80191cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	2b01      	cmp	r3, #1
 80191d2:	d801      	bhi.n	80191d8 <create_chain+0x46>
 80191d4:	2301      	movs	r3, #1
 80191d6:	e070      	b.n	80192ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191de:	d101      	bne.n	80191e4 <create_chain+0x52>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	e06a      	b.n	80192ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80191e4:	693b      	ldr	r3, [r7, #16]
 80191e6:	695b      	ldr	r3, [r3, #20]
 80191e8:	68fa      	ldr	r2, [r7, #12]
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d201      	bcs.n	80191f2 <create_chain+0x60>
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	e063      	b.n	80192ba <create_chain+0x128>
		scl = clst;
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80191f6:	69bb      	ldr	r3, [r7, #24]
 80191f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80191fa:	69fb      	ldr	r3, [r7, #28]
 80191fc:	3301      	adds	r3, #1
 80191fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019200:	693b      	ldr	r3, [r7, #16]
 8019202:	695b      	ldr	r3, [r3, #20]
 8019204:	69fa      	ldr	r2, [r7, #28]
 8019206:	429a      	cmp	r2, r3
 8019208:	d307      	bcc.n	801921a <create_chain+0x88>
				ncl = 2;
 801920a:	2302      	movs	r3, #2
 801920c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801920e:	69fa      	ldr	r2, [r7, #28]
 8019210:	69bb      	ldr	r3, [r7, #24]
 8019212:	429a      	cmp	r2, r3
 8019214:	d901      	bls.n	801921a <create_chain+0x88>
 8019216:	2300      	movs	r3, #0
 8019218:	e04f      	b.n	80192ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801921a:	69f9      	ldr	r1, [r7, #28]
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f7ff fdc2 	bl	8018da6 <get_fat>
 8019222:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d00e      	beq.n	8019248 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d003      	beq.n	8019238 <create_chain+0xa6>
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019236:	d101      	bne.n	801923c <create_chain+0xaa>
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	e03e      	b.n	80192ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801923c:	69fa      	ldr	r2, [r7, #28]
 801923e:	69bb      	ldr	r3, [r7, #24]
 8019240:	429a      	cmp	r2, r3
 8019242:	d1da      	bne.n	80191fa <create_chain+0x68>
 8019244:	2300      	movs	r3, #0
 8019246:	e038      	b.n	80192ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019248:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801924a:	f04f 32ff 	mov.w	r2, #4294967295
 801924e:	69f9      	ldr	r1, [r7, #28]
 8019250:	6938      	ldr	r0, [r7, #16]
 8019252:	f7ff fe4f 	bl	8018ef4 <put_fat>
 8019256:	4603      	mov	r3, r0
 8019258:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801925a:	7dfb      	ldrb	r3, [r7, #23]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d109      	bne.n	8019274 <create_chain+0xe2>
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d006      	beq.n	8019274 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019266:	69fa      	ldr	r2, [r7, #28]
 8019268:	6839      	ldr	r1, [r7, #0]
 801926a:	6938      	ldr	r0, [r7, #16]
 801926c:	f7ff fe42 	bl	8018ef4 <put_fat>
 8019270:	4603      	mov	r3, r0
 8019272:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019274:	7dfb      	ldrb	r3, [r7, #23]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d116      	bne.n	80192a8 <create_chain+0x116>
		fs->last_clst = ncl;
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	69fa      	ldr	r2, [r7, #28]
 801927e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019280:	693b      	ldr	r3, [r7, #16]
 8019282:	691a      	ldr	r2, [r3, #16]
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	695b      	ldr	r3, [r3, #20]
 8019288:	3b02      	subs	r3, #2
 801928a:	429a      	cmp	r2, r3
 801928c:	d804      	bhi.n	8019298 <create_chain+0x106>
 801928e:	693b      	ldr	r3, [r7, #16]
 8019290:	691b      	ldr	r3, [r3, #16]
 8019292:	1e5a      	subs	r2, r3, #1
 8019294:	693b      	ldr	r3, [r7, #16]
 8019296:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8019298:	693b      	ldr	r3, [r7, #16]
 801929a:	791b      	ldrb	r3, [r3, #4]
 801929c:	f043 0301 	orr.w	r3, r3, #1
 80192a0:	b2da      	uxtb	r2, r3
 80192a2:	693b      	ldr	r3, [r7, #16]
 80192a4:	711a      	strb	r2, [r3, #4]
 80192a6:	e007      	b.n	80192b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80192a8:	7dfb      	ldrb	r3, [r7, #23]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d102      	bne.n	80192b4 <create_chain+0x122>
 80192ae:	f04f 33ff 	mov.w	r3, #4294967295
 80192b2:	e000      	b.n	80192b6 <create_chain+0x124>
 80192b4:	2301      	movs	r3, #1
 80192b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80192b8:	69fb      	ldr	r3, [r7, #28]
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3720      	adds	r7, #32
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}

080192c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80192c2:	b480      	push	{r7}
 80192c4:	b087      	sub	sp, #28
 80192c6:	af00      	add	r7, sp, #0
 80192c8:	6078      	str	r0, [r7, #4]
 80192ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192d6:	3304      	adds	r3, #4
 80192d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	0a5b      	lsrs	r3, r3, #9
 80192de:	68fa      	ldr	r2, [r7, #12]
 80192e0:	8952      	ldrh	r2, [r2, #10]
 80192e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80192e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	1d1a      	adds	r2, r3, #4
 80192ec:	613a      	str	r2, [r7, #16]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d101      	bne.n	80192fc <clmt_clust+0x3a>
 80192f8:	2300      	movs	r3, #0
 80192fa:	e010      	b.n	801931e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80192fc:	697a      	ldr	r2, [r7, #20]
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	429a      	cmp	r2, r3
 8019302:	d307      	bcc.n	8019314 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019304:	697a      	ldr	r2, [r7, #20]
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	1ad3      	subs	r3, r2, r3
 801930a:	617b      	str	r3, [r7, #20]
 801930c:	693b      	ldr	r3, [r7, #16]
 801930e:	3304      	adds	r3, #4
 8019310:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019312:	e7e9      	b.n	80192e8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019314:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	681a      	ldr	r2, [r3, #0]
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	4413      	add	r3, r2
}
 801931e:	4618      	mov	r0, r3
 8019320:	371c      	adds	r7, #28
 8019322:	46bd      	mov	sp, r7
 8019324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019328:	4770      	bx	lr

0801932a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801932a:	b580      	push	{r7, lr}
 801932c:	b086      	sub	sp, #24
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
 8019332:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019340:	d204      	bcs.n	801934c <dir_sdi+0x22>
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	f003 031f 	and.w	r3, r3, #31
 8019348:	2b00      	cmp	r3, #0
 801934a:	d001      	beq.n	8019350 <dir_sdi+0x26>
		return FR_INT_ERR;
 801934c:	2302      	movs	r3, #2
 801934e:	e063      	b.n	8019418 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	683a      	ldr	r2, [r7, #0]
 8019354:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	689b      	ldr	r3, [r3, #8]
 801935a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d106      	bne.n	8019370 <dir_sdi+0x46>
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	2b02      	cmp	r3, #2
 8019368:	d902      	bls.n	8019370 <dir_sdi+0x46>
		clst = fs->dirbase;
 801936a:	693b      	ldr	r3, [r7, #16]
 801936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801936e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d10c      	bne.n	8019390 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	095b      	lsrs	r3, r3, #5
 801937a:	693a      	ldr	r2, [r7, #16]
 801937c:	8912      	ldrh	r2, [r2, #8]
 801937e:	4293      	cmp	r3, r2
 8019380:	d301      	bcc.n	8019386 <dir_sdi+0x5c>
 8019382:	2302      	movs	r3, #2
 8019384:	e048      	b.n	8019418 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	61da      	str	r2, [r3, #28]
 801938e:	e029      	b.n	80193e4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	895b      	ldrh	r3, [r3, #10]
 8019394:	025b      	lsls	r3, r3, #9
 8019396:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019398:	e019      	b.n	80193ce <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6979      	ldr	r1, [r7, #20]
 801939e:	4618      	mov	r0, r3
 80193a0:	f7ff fd01 	bl	8018da6 <get_fat>
 80193a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193ac:	d101      	bne.n	80193b2 <dir_sdi+0x88>
 80193ae:	2301      	movs	r3, #1
 80193b0:	e032      	b.n	8019418 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80193b2:	697b      	ldr	r3, [r7, #20]
 80193b4:	2b01      	cmp	r3, #1
 80193b6:	d904      	bls.n	80193c2 <dir_sdi+0x98>
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	695b      	ldr	r3, [r3, #20]
 80193bc:	697a      	ldr	r2, [r7, #20]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d301      	bcc.n	80193c6 <dir_sdi+0x9c>
 80193c2:	2302      	movs	r3, #2
 80193c4:	e028      	b.n	8019418 <dir_sdi+0xee>
			ofs -= csz;
 80193c6:	683a      	ldr	r2, [r7, #0]
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	1ad3      	subs	r3, r2, r3
 80193cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80193ce:	683a      	ldr	r2, [r7, #0]
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	429a      	cmp	r2, r3
 80193d4:	d2e1      	bcs.n	801939a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80193d6:	6979      	ldr	r1, [r7, #20]
 80193d8:	6938      	ldr	r0, [r7, #16]
 80193da:	f7ff fcc5 	bl	8018d68 <clust2sect>
 80193de:	4602      	mov	r2, r0
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	697a      	ldr	r2, [r7, #20]
 80193e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	69db      	ldr	r3, [r3, #28]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d101      	bne.n	80193f6 <dir_sdi+0xcc>
 80193f2:	2302      	movs	r3, #2
 80193f4:	e010      	b.n	8019418 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	69da      	ldr	r2, [r3, #28]
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	0a5b      	lsrs	r3, r3, #9
 80193fe:	441a      	add	r2, r3
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019404:	693b      	ldr	r3, [r7, #16]
 8019406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019410:	441a      	add	r2, r3
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019416:	2300      	movs	r3, #0
}
 8019418:	4618      	mov	r0, r3
 801941a:	3718      	adds	r7, #24
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}

08019420 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b086      	sub	sp, #24
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	695b      	ldr	r3, [r3, #20]
 8019434:	3320      	adds	r3, #32
 8019436:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	69db      	ldr	r3, [r3, #28]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d003      	beq.n	8019448 <dir_next+0x28>
 8019440:	68bb      	ldr	r3, [r7, #8]
 8019442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019446:	d301      	bcc.n	801944c <dir_next+0x2c>
 8019448:	2304      	movs	r3, #4
 801944a:	e0aa      	b.n	80195a2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801944c:	68bb      	ldr	r3, [r7, #8]
 801944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019452:	2b00      	cmp	r3, #0
 8019454:	f040 8098 	bne.w	8019588 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	69db      	ldr	r3, [r3, #28]
 801945c:	1c5a      	adds	r2, r3, #1
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	699b      	ldr	r3, [r3, #24]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d10b      	bne.n	8019482 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	095b      	lsrs	r3, r3, #5
 801946e:	68fa      	ldr	r2, [r7, #12]
 8019470:	8912      	ldrh	r2, [r2, #8]
 8019472:	4293      	cmp	r3, r2
 8019474:	f0c0 8088 	bcc.w	8019588 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	2200      	movs	r2, #0
 801947c:	61da      	str	r2, [r3, #28]
 801947e:	2304      	movs	r3, #4
 8019480:	e08f      	b.n	80195a2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	0a5b      	lsrs	r3, r3, #9
 8019486:	68fa      	ldr	r2, [r7, #12]
 8019488:	8952      	ldrh	r2, [r2, #10]
 801948a:	3a01      	subs	r2, #1
 801948c:	4013      	ands	r3, r2
 801948e:	2b00      	cmp	r3, #0
 8019490:	d17a      	bne.n	8019588 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	699b      	ldr	r3, [r3, #24]
 8019498:	4619      	mov	r1, r3
 801949a:	4610      	mov	r0, r2
 801949c:	f7ff fc83 	bl	8018da6 <get_fat>
 80194a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d801      	bhi.n	80194ac <dir_next+0x8c>
 80194a8:	2302      	movs	r3, #2
 80194aa:	e07a      	b.n	80195a2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194b2:	d101      	bne.n	80194b8 <dir_next+0x98>
 80194b4:	2301      	movs	r3, #1
 80194b6:	e074      	b.n	80195a2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	695b      	ldr	r3, [r3, #20]
 80194bc:	697a      	ldr	r2, [r7, #20]
 80194be:	429a      	cmp	r2, r3
 80194c0:	d358      	bcc.n	8019574 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d104      	bne.n	80194d2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2200      	movs	r2, #0
 80194cc:	61da      	str	r2, [r3, #28]
 80194ce:	2304      	movs	r3, #4
 80194d0:	e067      	b.n	80195a2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80194d2:	687a      	ldr	r2, [r7, #4]
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	699b      	ldr	r3, [r3, #24]
 80194d8:	4619      	mov	r1, r3
 80194da:	4610      	mov	r0, r2
 80194dc:	f7ff fe59 	bl	8019192 <create_chain>
 80194e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d101      	bne.n	80194ec <dir_next+0xcc>
 80194e8:	2307      	movs	r3, #7
 80194ea:	e05a      	b.n	80195a2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80194ec:	697b      	ldr	r3, [r7, #20]
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d101      	bne.n	80194f6 <dir_next+0xd6>
 80194f2:	2302      	movs	r3, #2
 80194f4:	e055      	b.n	80195a2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194fc:	d101      	bne.n	8019502 <dir_next+0xe2>
 80194fe:	2301      	movs	r3, #1
 8019500:	e04f      	b.n	80195a2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8019502:	68f8      	ldr	r0, [r7, #12]
 8019504:	f7ff fb50 	bl	8018ba8 <sync_window>
 8019508:	4603      	mov	r3, r0
 801950a:	2b00      	cmp	r3, #0
 801950c:	d001      	beq.n	8019512 <dir_next+0xf2>
 801950e:	2301      	movs	r3, #1
 8019510:	e047      	b.n	80195a2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	3330      	adds	r3, #48	@ 0x30
 8019516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801951a:	2100      	movs	r1, #0
 801951c:	4618      	mov	r0, r3
 801951e:	f7ff f97a 	bl	8018816 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019522:	2300      	movs	r3, #0
 8019524:	613b      	str	r3, [r7, #16]
 8019526:	6979      	ldr	r1, [r7, #20]
 8019528:	68f8      	ldr	r0, [r7, #12]
 801952a:	f7ff fc1d 	bl	8018d68 <clust2sect>
 801952e:	4602      	mov	r2, r0
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019534:	e012      	b.n	801955c <dir_next+0x13c>
						fs->wflag = 1;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2201      	movs	r2, #1
 801953a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801953c:	68f8      	ldr	r0, [r7, #12]
 801953e:	f7ff fb33 	bl	8018ba8 <sync_window>
 8019542:	4603      	mov	r3, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	d001      	beq.n	801954c <dir_next+0x12c>
 8019548:	2301      	movs	r3, #1
 801954a:	e02a      	b.n	80195a2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801954c:	693b      	ldr	r3, [r7, #16]
 801954e:	3301      	adds	r3, #1
 8019550:	613b      	str	r3, [r7, #16]
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019556:	1c5a      	adds	r2, r3, #1
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	895b      	ldrh	r3, [r3, #10]
 8019560:	461a      	mov	r2, r3
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	4293      	cmp	r3, r2
 8019566:	d3e6      	bcc.n	8019536 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801956c:	693b      	ldr	r3, [r7, #16]
 801956e:	1ad2      	subs	r2, r2, r3
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	697a      	ldr	r2, [r7, #20]
 8019578:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801957a:	6979      	ldr	r1, [r7, #20]
 801957c:	68f8      	ldr	r0, [r7, #12]
 801957e:	f7ff fbf3 	bl	8018d68 <clust2sect>
 8019582:	4602      	mov	r2, r0
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	68ba      	ldr	r2, [r7, #8]
 801958c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801959a:	441a      	add	r2, r3
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80195a0:	2300      	movs	r3, #0
}
 80195a2:	4618      	mov	r0, r3
 80195a4:	3718      	adds	r7, #24
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}

080195aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80195aa:	b580      	push	{r7, lr}
 80195ac:	b086      	sub	sp, #24
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80195ba:	2100      	movs	r1, #0
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7ff feb4 	bl	801932a <dir_sdi>
 80195c2:	4603      	mov	r3, r0
 80195c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80195c6:	7dfb      	ldrb	r3, [r7, #23]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d12b      	bne.n	8019624 <dir_alloc+0x7a>
		n = 0;
 80195cc:	2300      	movs	r3, #0
 80195ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	69db      	ldr	r3, [r3, #28]
 80195d4:	4619      	mov	r1, r3
 80195d6:	68f8      	ldr	r0, [r7, #12]
 80195d8:	f7ff fb2a 	bl	8018c30 <move_window>
 80195dc:	4603      	mov	r3, r0
 80195de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80195e0:	7dfb      	ldrb	r3, [r7, #23]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d11d      	bne.n	8019622 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	6a1b      	ldr	r3, [r3, #32]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	2be5      	cmp	r3, #229	@ 0xe5
 80195ee:	d004      	beq.n	80195fa <dir_alloc+0x50>
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	6a1b      	ldr	r3, [r3, #32]
 80195f4:	781b      	ldrb	r3, [r3, #0]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d107      	bne.n	801960a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	3301      	adds	r3, #1
 80195fe:	613b      	str	r3, [r7, #16]
 8019600:	693a      	ldr	r2, [r7, #16]
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	429a      	cmp	r2, r3
 8019606:	d102      	bne.n	801960e <dir_alloc+0x64>
 8019608:	e00c      	b.n	8019624 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801960a:	2300      	movs	r3, #0
 801960c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801960e:	2101      	movs	r1, #1
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	f7ff ff05 	bl	8019420 <dir_next>
 8019616:	4603      	mov	r3, r0
 8019618:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801961a:	7dfb      	ldrb	r3, [r7, #23]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d0d7      	beq.n	80195d0 <dir_alloc+0x26>
 8019620:	e000      	b.n	8019624 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8019622:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019624:	7dfb      	ldrb	r3, [r7, #23]
 8019626:	2b04      	cmp	r3, #4
 8019628:	d101      	bne.n	801962e <dir_alloc+0x84>
 801962a:	2307      	movs	r3, #7
 801962c:	75fb      	strb	r3, [r7, #23]
	return res;
 801962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019630:	4618      	mov	r0, r3
 8019632:	3718      	adds	r7, #24
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}

08019638 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	331a      	adds	r3, #26
 8019646:	4618      	mov	r0, r3
 8019648:	f7ff f842 	bl	80186d0 <ld_word>
 801964c:	4603      	mov	r3, r0
 801964e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	2b03      	cmp	r3, #3
 8019656:	d109      	bne.n	801966c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	3314      	adds	r3, #20
 801965c:	4618      	mov	r0, r3
 801965e:	f7ff f837 	bl	80186d0 <ld_word>
 8019662:	4603      	mov	r3, r0
 8019664:	041b      	lsls	r3, r3, #16
 8019666:	68fa      	ldr	r2, [r7, #12]
 8019668:	4313      	orrs	r3, r2
 801966a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801966c:	68fb      	ldr	r3, [r7, #12]
}
 801966e:	4618      	mov	r0, r3
 8019670:	3710      	adds	r7, #16
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}

08019676 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8019676:	b580      	push	{r7, lr}
 8019678:	b084      	sub	sp, #16
 801967a:	af00      	add	r7, sp, #0
 801967c:	60f8      	str	r0, [r7, #12]
 801967e:	60b9      	str	r1, [r7, #8]
 8019680:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	331a      	adds	r3, #26
 8019686:	687a      	ldr	r2, [r7, #4]
 8019688:	b292      	uxth	r2, r2
 801968a:	4611      	mov	r1, r2
 801968c:	4618      	mov	r0, r3
 801968e:	f7ff f85a 	bl	8018746 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	2b03      	cmp	r3, #3
 8019698:	d109      	bne.n	80196ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	f103 0214 	add.w	r2, r3, #20
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	0c1b      	lsrs	r3, r3, #16
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	4619      	mov	r1, r3
 80196a8:	4610      	mov	r0, r2
 80196aa:	f7ff f84c 	bl	8018746 <st_word>
	}
}
 80196ae:	bf00      	nop
 80196b0:	3710      	adds	r7, #16
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}

080196b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80196b6:	b580      	push	{r7, lr}
 80196b8:	b086      	sub	sp, #24
 80196ba:	af00      	add	r7, sp, #0
 80196bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80196c4:	2100      	movs	r1, #0
 80196c6:	6878      	ldr	r0, [r7, #4]
 80196c8:	f7ff fe2f 	bl	801932a <dir_sdi>
 80196cc:	4603      	mov	r3, r0
 80196ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80196d0:	7dfb      	ldrb	r3, [r7, #23]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d001      	beq.n	80196da <dir_find+0x24>
 80196d6:	7dfb      	ldrb	r3, [r7, #23]
 80196d8:	e03e      	b.n	8019758 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	69db      	ldr	r3, [r3, #28]
 80196de:	4619      	mov	r1, r3
 80196e0:	6938      	ldr	r0, [r7, #16]
 80196e2:	f7ff faa5 	bl	8018c30 <move_window>
 80196e6:	4603      	mov	r3, r0
 80196e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80196ea:	7dfb      	ldrb	r3, [r7, #23]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d12f      	bne.n	8019750 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6a1b      	ldr	r3, [r3, #32]
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80196f8:	7bfb      	ldrb	r3, [r7, #15]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d102      	bne.n	8019704 <dir_find+0x4e>
 80196fe:	2304      	movs	r3, #4
 8019700:	75fb      	strb	r3, [r7, #23]
 8019702:	e028      	b.n	8019756 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6a1b      	ldr	r3, [r3, #32]
 8019708:	330b      	adds	r3, #11
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019710:	b2da      	uxtb	r2, r3
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	6a1b      	ldr	r3, [r3, #32]
 801971a:	330b      	adds	r3, #11
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	f003 0308 	and.w	r3, r3, #8
 8019722:	2b00      	cmp	r3, #0
 8019724:	d10a      	bne.n	801973c <dir_find+0x86>
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6a18      	ldr	r0, [r3, #32]
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	3324      	adds	r3, #36	@ 0x24
 801972e:	220b      	movs	r2, #11
 8019730:	4619      	mov	r1, r3
 8019732:	f7ff f88b 	bl	801884c <mem_cmp>
 8019736:	4603      	mov	r3, r0
 8019738:	2b00      	cmp	r3, #0
 801973a:	d00b      	beq.n	8019754 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801973c:	2100      	movs	r1, #0
 801973e:	6878      	ldr	r0, [r7, #4]
 8019740:	f7ff fe6e 	bl	8019420 <dir_next>
 8019744:	4603      	mov	r3, r0
 8019746:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8019748:	7dfb      	ldrb	r3, [r7, #23]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d0c5      	beq.n	80196da <dir_find+0x24>
 801974e:	e002      	b.n	8019756 <dir_find+0xa0>
		if (res != FR_OK) break;
 8019750:	bf00      	nop
 8019752:	e000      	b.n	8019756 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8019754:	bf00      	nop

	return res;
 8019756:	7dfb      	ldrb	r3, [r7, #23]
}
 8019758:	4618      	mov	r0, r3
 801975a:	3718      	adds	r7, #24
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}

08019760 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801976e:	2101      	movs	r1, #1
 8019770:	6878      	ldr	r0, [r7, #4]
 8019772:	f7ff ff1a 	bl	80195aa <dir_alloc>
 8019776:	4603      	mov	r3, r0
 8019778:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801977a:	7bfb      	ldrb	r3, [r7, #15]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d11c      	bne.n	80197ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	69db      	ldr	r3, [r3, #28]
 8019784:	4619      	mov	r1, r3
 8019786:	68b8      	ldr	r0, [r7, #8]
 8019788:	f7ff fa52 	bl	8018c30 <move_window>
 801978c:	4603      	mov	r3, r0
 801978e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019790:	7bfb      	ldrb	r3, [r7, #15]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d111      	bne.n	80197ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	6a1b      	ldr	r3, [r3, #32]
 801979a:	2220      	movs	r2, #32
 801979c:	2100      	movs	r1, #0
 801979e:	4618      	mov	r0, r3
 80197a0:	f7ff f839 	bl	8018816 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6a18      	ldr	r0, [r3, #32]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	3324      	adds	r3, #36	@ 0x24
 80197ac:	220b      	movs	r2, #11
 80197ae:	4619      	mov	r1, r3
 80197b0:	f7ff f810 	bl	80187d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	2201      	movs	r2, #1
 80197b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80197ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80197bc:	4618      	mov	r0, r3
 80197be:	3710      	adds	r7, #16
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}

080197c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b088      	sub	sp, #32
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	60fb      	str	r3, [r7, #12]
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	3324      	adds	r3, #36	@ 0x24
 80197d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80197da:	220b      	movs	r2, #11
 80197dc:	2120      	movs	r1, #32
 80197de:	68b8      	ldr	r0, [r7, #8]
 80197e0:	f7ff f819 	bl	8018816 <mem_set>
	si = i = 0; ni = 8;
 80197e4:	2300      	movs	r3, #0
 80197e6:	613b      	str	r3, [r7, #16]
 80197e8:	693b      	ldr	r3, [r7, #16]
 80197ea:	61fb      	str	r3, [r7, #28]
 80197ec:	2308      	movs	r3, #8
 80197ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	1c5a      	adds	r2, r3, #1
 80197f4:	61fa      	str	r2, [r7, #28]
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	4413      	add	r3, r2
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80197fe:	7efb      	ldrb	r3, [r7, #27]
 8019800:	2b20      	cmp	r3, #32
 8019802:	d94e      	bls.n	80198a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8019804:	7efb      	ldrb	r3, [r7, #27]
 8019806:	2b2f      	cmp	r3, #47	@ 0x2f
 8019808:	d006      	beq.n	8019818 <create_name+0x54>
 801980a:	7efb      	ldrb	r3, [r7, #27]
 801980c:	2b5c      	cmp	r3, #92	@ 0x5c
 801980e:	d110      	bne.n	8019832 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8019810:	e002      	b.n	8019818 <create_name+0x54>
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	3301      	adds	r3, #1
 8019816:	61fb      	str	r3, [r7, #28]
 8019818:	68fa      	ldr	r2, [r7, #12]
 801981a:	69fb      	ldr	r3, [r7, #28]
 801981c:	4413      	add	r3, r2
 801981e:	781b      	ldrb	r3, [r3, #0]
 8019820:	2b2f      	cmp	r3, #47	@ 0x2f
 8019822:	d0f6      	beq.n	8019812 <create_name+0x4e>
 8019824:	68fa      	ldr	r2, [r7, #12]
 8019826:	69fb      	ldr	r3, [r7, #28]
 8019828:	4413      	add	r3, r2
 801982a:	781b      	ldrb	r3, [r3, #0]
 801982c:	2b5c      	cmp	r3, #92	@ 0x5c
 801982e:	d0f0      	beq.n	8019812 <create_name+0x4e>
			break;
 8019830:	e038      	b.n	80198a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8019832:	7efb      	ldrb	r3, [r7, #27]
 8019834:	2b2e      	cmp	r3, #46	@ 0x2e
 8019836:	d003      	beq.n	8019840 <create_name+0x7c>
 8019838:	693a      	ldr	r2, [r7, #16]
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	429a      	cmp	r2, r3
 801983e:	d30c      	bcc.n	801985a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	2b0b      	cmp	r3, #11
 8019844:	d002      	beq.n	801984c <create_name+0x88>
 8019846:	7efb      	ldrb	r3, [r7, #27]
 8019848:	2b2e      	cmp	r3, #46	@ 0x2e
 801984a:	d001      	beq.n	8019850 <create_name+0x8c>
 801984c:	2306      	movs	r3, #6
 801984e:	e044      	b.n	80198da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8019850:	2308      	movs	r3, #8
 8019852:	613b      	str	r3, [r7, #16]
 8019854:	230b      	movs	r3, #11
 8019856:	617b      	str	r3, [r7, #20]
			continue;
 8019858:	e022      	b.n	80198a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801985a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801985e:	2b00      	cmp	r3, #0
 8019860:	da04      	bge.n	801986c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8019862:	7efb      	ldrb	r3, [r7, #27]
 8019864:	3b80      	subs	r3, #128	@ 0x80
 8019866:	4a1f      	ldr	r2, [pc, #124]	@ (80198e4 <create_name+0x120>)
 8019868:	5cd3      	ldrb	r3, [r2, r3]
 801986a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801986c:	7efb      	ldrb	r3, [r7, #27]
 801986e:	4619      	mov	r1, r3
 8019870:	481d      	ldr	r0, [pc, #116]	@ (80198e8 <create_name+0x124>)
 8019872:	f7ff f812 	bl	801889a <chk_chr>
 8019876:	4603      	mov	r3, r0
 8019878:	2b00      	cmp	r3, #0
 801987a:	d001      	beq.n	8019880 <create_name+0xbc>
 801987c:	2306      	movs	r3, #6
 801987e:	e02c      	b.n	80198da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8019880:	7efb      	ldrb	r3, [r7, #27]
 8019882:	2b60      	cmp	r3, #96	@ 0x60
 8019884:	d905      	bls.n	8019892 <create_name+0xce>
 8019886:	7efb      	ldrb	r3, [r7, #27]
 8019888:	2b7a      	cmp	r3, #122	@ 0x7a
 801988a:	d802      	bhi.n	8019892 <create_name+0xce>
 801988c:	7efb      	ldrb	r3, [r7, #27]
 801988e:	3b20      	subs	r3, #32
 8019890:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	1c5a      	adds	r2, r3, #1
 8019896:	613a      	str	r2, [r7, #16]
 8019898:	68ba      	ldr	r2, [r7, #8]
 801989a:	4413      	add	r3, r2
 801989c:	7efa      	ldrb	r2, [r7, #27]
 801989e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80198a0:	e7a6      	b.n	80197f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80198a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80198a4:	68fa      	ldr	r2, [r7, #12]
 80198a6:	69fb      	ldr	r3, [r7, #28]
 80198a8:	441a      	add	r2, r3
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80198ae:	693b      	ldr	r3, [r7, #16]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d101      	bne.n	80198b8 <create_name+0xf4>
 80198b4:	2306      	movs	r3, #6
 80198b6:	e010      	b.n	80198da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80198b8:	68bb      	ldr	r3, [r7, #8]
 80198ba:	781b      	ldrb	r3, [r3, #0]
 80198bc:	2be5      	cmp	r3, #229	@ 0xe5
 80198be:	d102      	bne.n	80198c6 <create_name+0x102>
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	2205      	movs	r2, #5
 80198c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80198c6:	7efb      	ldrb	r3, [r7, #27]
 80198c8:	2b20      	cmp	r3, #32
 80198ca:	d801      	bhi.n	80198d0 <create_name+0x10c>
 80198cc:	2204      	movs	r2, #4
 80198ce:	e000      	b.n	80198d2 <create_name+0x10e>
 80198d0:	2200      	movs	r2, #0
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	330b      	adds	r3, #11
 80198d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80198d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80198da:	4618      	mov	r0, r3
 80198dc:	3720      	adds	r7, #32
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}
 80198e2:	bf00      	nop
 80198e4:	0801cc78 	.word	0x0801cc78
 80198e8:	0801ca24 	.word	0x0801ca24

080198ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b086      	sub	sp, #24
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019900:	e002      	b.n	8019908 <follow_path+0x1c>
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	3301      	adds	r3, #1
 8019906:	603b      	str	r3, [r7, #0]
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	781b      	ldrb	r3, [r3, #0]
 801990c:	2b2f      	cmp	r3, #47	@ 0x2f
 801990e:	d0f8      	beq.n	8019902 <follow_path+0x16>
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	781b      	ldrb	r3, [r3, #0]
 8019914:	2b5c      	cmp	r3, #92	@ 0x5c
 8019916:	d0f4      	beq.n	8019902 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019918:	693b      	ldr	r3, [r7, #16]
 801991a:	2200      	movs	r2, #0
 801991c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	2b1f      	cmp	r3, #31
 8019924:	d80a      	bhi.n	801993c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	2280      	movs	r2, #128	@ 0x80
 801992a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801992e:	2100      	movs	r1, #0
 8019930:	6878      	ldr	r0, [r7, #4]
 8019932:	f7ff fcfa 	bl	801932a <dir_sdi>
 8019936:	4603      	mov	r3, r0
 8019938:	75fb      	strb	r3, [r7, #23]
 801993a:	e043      	b.n	80199c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801993c:	463b      	mov	r3, r7
 801993e:	4619      	mov	r1, r3
 8019940:	6878      	ldr	r0, [r7, #4]
 8019942:	f7ff ff3f 	bl	80197c4 <create_name>
 8019946:	4603      	mov	r3, r0
 8019948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801994a:	7dfb      	ldrb	r3, [r7, #23]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d134      	bne.n	80199ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f7ff feb0 	bl	80196b6 <dir_find>
 8019956:	4603      	mov	r3, r0
 8019958:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8019960:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019962:	7dfb      	ldrb	r3, [r7, #23]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d00a      	beq.n	801997e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019968:	7dfb      	ldrb	r3, [r7, #23]
 801996a:	2b04      	cmp	r3, #4
 801996c:	d127      	bne.n	80199be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801996e:	7afb      	ldrb	r3, [r7, #11]
 8019970:	f003 0304 	and.w	r3, r3, #4
 8019974:	2b00      	cmp	r3, #0
 8019976:	d122      	bne.n	80199be <follow_path+0xd2>
 8019978:	2305      	movs	r3, #5
 801997a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801997c:	e01f      	b.n	80199be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801997e:	7afb      	ldrb	r3, [r7, #11]
 8019980:	f003 0304 	and.w	r3, r3, #4
 8019984:	2b00      	cmp	r3, #0
 8019986:	d11c      	bne.n	80199c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019988:	693b      	ldr	r3, [r7, #16]
 801998a:	799b      	ldrb	r3, [r3, #6]
 801998c:	f003 0310 	and.w	r3, r3, #16
 8019990:	2b00      	cmp	r3, #0
 8019992:	d102      	bne.n	801999a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019994:	2305      	movs	r3, #5
 8019996:	75fb      	strb	r3, [r7, #23]
 8019998:	e014      	b.n	80199c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	695b      	ldr	r3, [r3, #20]
 80199a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199a8:	4413      	add	r3, r2
 80199aa:	4619      	mov	r1, r3
 80199ac:	68f8      	ldr	r0, [r7, #12]
 80199ae:	f7ff fe43 	bl	8019638 <ld_clust>
 80199b2:	4602      	mov	r2, r0
 80199b4:	693b      	ldr	r3, [r7, #16]
 80199b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80199b8:	e7c0      	b.n	801993c <follow_path+0x50>
			if (res != FR_OK) break;
 80199ba:	bf00      	nop
 80199bc:	e002      	b.n	80199c4 <follow_path+0xd8>
				break;
 80199be:	bf00      	nop
 80199c0:	e000      	b.n	80199c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80199c2:	bf00      	nop
			}
		}
	}

	return res;
 80199c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80199c6:	4618      	mov	r0, r3
 80199c8:	3718      	adds	r7, #24
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}

080199ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80199ce:	b480      	push	{r7}
 80199d0:	b087      	sub	sp, #28
 80199d2:	af00      	add	r7, sp, #0
 80199d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80199d6:	f04f 33ff 	mov.w	r3, #4294967295
 80199da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d031      	beq.n	8019a48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	617b      	str	r3, [r7, #20]
 80199ea:	e002      	b.n	80199f2 <get_ldnumber+0x24>
 80199ec:	697b      	ldr	r3, [r7, #20]
 80199ee:	3301      	adds	r3, #1
 80199f0:	617b      	str	r3, [r7, #20]
 80199f2:	697b      	ldr	r3, [r7, #20]
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	2b20      	cmp	r3, #32
 80199f8:	d903      	bls.n	8019a02 <get_ldnumber+0x34>
 80199fa:	697b      	ldr	r3, [r7, #20]
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8019a00:	d1f4      	bne.n	80199ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019a02:	697b      	ldr	r3, [r7, #20]
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	2b3a      	cmp	r3, #58	@ 0x3a
 8019a08:	d11c      	bne.n	8019a44 <get_ldnumber+0x76>
			tp = *path;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	1c5a      	adds	r2, r3, #1
 8019a14:	60fa      	str	r2, [r7, #12]
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	3b30      	subs	r3, #48	@ 0x30
 8019a1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	2b09      	cmp	r3, #9
 8019a20:	d80e      	bhi.n	8019a40 <get_ldnumber+0x72>
 8019a22:	68fa      	ldr	r2, [r7, #12]
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d10a      	bne.n	8019a40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019a2a:	68bb      	ldr	r3, [r7, #8]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d107      	bne.n	8019a40 <get_ldnumber+0x72>
					vol = (int)i;
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	3301      	adds	r3, #1
 8019a38:	617b      	str	r3, [r7, #20]
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	697a      	ldr	r2, [r7, #20]
 8019a3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019a40:	693b      	ldr	r3, [r7, #16]
 8019a42:	e002      	b.n	8019a4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019a44:	2300      	movs	r3, #0
 8019a46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019a48:	693b      	ldr	r3, [r7, #16]
}
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	371c      	adds	r7, #28
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a54:	4770      	bx	lr
	...

08019a58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b082      	sub	sp, #8
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
 8019a60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2200      	movs	r2, #0
 8019a66:	70da      	strb	r2, [r3, #3]
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019a70:	6839      	ldr	r1, [r7, #0]
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f7ff f8dc 	bl	8018c30 <move_window>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d001      	beq.n	8019a82 <check_fs+0x2a>
 8019a7e:	2304      	movs	r3, #4
 8019a80:	e038      	b.n	8019af4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	3330      	adds	r3, #48	@ 0x30
 8019a86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7fe fe20 	bl	80186d0 <ld_word>
 8019a90:	4603      	mov	r3, r0
 8019a92:	461a      	mov	r2, r3
 8019a94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	d001      	beq.n	8019aa0 <check_fs+0x48>
 8019a9c:	2303      	movs	r3, #3
 8019a9e:	e029      	b.n	8019af4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019aa6:	2be9      	cmp	r3, #233	@ 0xe9
 8019aa8:	d009      	beq.n	8019abe <check_fs+0x66>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019ab0:	2beb      	cmp	r3, #235	@ 0xeb
 8019ab2:	d11e      	bne.n	8019af2 <check_fs+0x9a>
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019aba:	2b90      	cmp	r3, #144	@ 0x90
 8019abc:	d119      	bne.n	8019af2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	3330      	adds	r3, #48	@ 0x30
 8019ac2:	3336      	adds	r3, #54	@ 0x36
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7fe fe1b 	bl	8018700 <ld_dword>
 8019aca:	4603      	mov	r3, r0
 8019acc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8019ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8019afc <check_fs+0xa4>)
 8019ad2:	4293      	cmp	r3, r2
 8019ad4:	d101      	bne.n	8019ada <check_fs+0x82>
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	e00c      	b.n	8019af4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	3330      	adds	r3, #48	@ 0x30
 8019ade:	3352      	adds	r3, #82	@ 0x52
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f7fe fe0d 	bl	8018700 <ld_dword>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	4a05      	ldr	r2, [pc, #20]	@ (8019b00 <check_fs+0xa8>)
 8019aea:	4293      	cmp	r3, r2
 8019aec:	d101      	bne.n	8019af2 <check_fs+0x9a>
 8019aee:	2300      	movs	r3, #0
 8019af0:	e000      	b.n	8019af4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019af2:	2302      	movs	r3, #2
}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3708      	adds	r7, #8
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	00544146 	.word	0x00544146
 8019b00:	33544146 	.word	0x33544146

08019b04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b096      	sub	sp, #88	@ 0x58
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	60f8      	str	r0, [r7, #12]
 8019b0c:	60b9      	str	r1, [r7, #8]
 8019b0e:	4613      	mov	r3, r2
 8019b10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	2200      	movs	r2, #0
 8019b16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f7ff ff58 	bl	80199ce <get_ldnumber>
 8019b1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	da01      	bge.n	8019b2a <find_volume+0x26>
 8019b26:	230b      	movs	r3, #11
 8019b28:	e22d      	b.n	8019f86 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019b2a:	4aa1      	ldr	r2, [pc, #644]	@ (8019db0 <find_volume+0x2ac>)
 8019b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d101      	bne.n	8019b3e <find_volume+0x3a>
 8019b3a:	230c      	movs	r3, #12
 8019b3c:	e223      	b.n	8019f86 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019b42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019b44:	79fb      	ldrb	r3, [r7, #7]
 8019b46:	f023 0301 	bic.w	r3, r3, #1
 8019b4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d01a      	beq.n	8019b8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b56:	785b      	ldrb	r3, [r3, #1]
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7fe fd19 	bl	8018590 <disk_status>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019b64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019b68:	f003 0301 	and.w	r3, r3, #1
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d10c      	bne.n	8019b8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019b70:	79fb      	ldrb	r3, [r7, #7]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d007      	beq.n	8019b86 <find_volume+0x82>
 8019b76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019b7a:	f003 0304 	and.w	r3, r3, #4
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d001      	beq.n	8019b86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019b82:	230a      	movs	r3, #10
 8019b84:	e1ff      	b.n	8019f86 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8019b86:	2300      	movs	r3, #0
 8019b88:	e1fd      	b.n	8019f86 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8019b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b92:	b2da      	uxtb	r2, r3
 8019b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b9a:	785b      	ldrb	r3, [r3, #1]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7fe fd11 	bl	80185c4 <disk_initialize>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019bac:	f003 0301 	and.w	r3, r3, #1
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d001      	beq.n	8019bb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019bb4:	2303      	movs	r3, #3
 8019bb6:	e1e6      	b.n	8019f86 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019bb8:	79fb      	ldrb	r3, [r7, #7]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d007      	beq.n	8019bce <find_volume+0xca>
 8019bbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019bc2:	f003 0304 	and.w	r3, r3, #4
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d001      	beq.n	8019bce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019bca:	230a      	movs	r3, #10
 8019bcc:	e1db      	b.n	8019f86 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8019bd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019bd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019bd6:	f7ff ff3f 	bl	8019a58 <check_fs>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019be4:	2b02      	cmp	r3, #2
 8019be6:	d149      	bne.n	8019c7c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019be8:	2300      	movs	r3, #0
 8019bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8019bec:	e01e      	b.n	8019c2c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8019bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bf6:	011b      	lsls	r3, r3, #4
 8019bf8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8019bfc:	4413      	add	r3, r2
 8019bfe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c02:	3304      	adds	r3, #4
 8019c04:	781b      	ldrb	r3, [r3, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d006      	beq.n	8019c18 <find_volume+0x114>
 8019c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c0c:	3308      	adds	r3, #8
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7fe fd76 	bl	8018700 <ld_dword>
 8019c14:	4602      	mov	r2, r0
 8019c16:	e000      	b.n	8019c1a <find_volume+0x116>
 8019c18:	2200      	movs	r2, #0
 8019c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c1c:	009b      	lsls	r3, r3, #2
 8019c1e:	3358      	adds	r3, #88	@ 0x58
 8019c20:	443b      	add	r3, r7
 8019c22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c28:	3301      	adds	r3, #1
 8019c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c2e:	2b03      	cmp	r3, #3
 8019c30:	d9dd      	bls.n	8019bee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019c32:	2300      	movs	r3, #0
 8019c34:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8019c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d002      	beq.n	8019c42 <find_volume+0x13e>
 8019c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c3e:	3b01      	subs	r3, #1
 8019c40:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c44:	009b      	lsls	r3, r3, #2
 8019c46:	3358      	adds	r3, #88	@ 0x58
 8019c48:	443b      	add	r3, r7
 8019c4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019c4e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d005      	beq.n	8019c62 <find_volume+0x15e>
 8019c56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019c58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019c5a:	f7ff fefd 	bl	8019a58 <check_fs>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	e000      	b.n	8019c64 <find_volume+0x160>
 8019c62:	2303      	movs	r3, #3
 8019c64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019c68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c6c:	2b01      	cmp	r3, #1
 8019c6e:	d905      	bls.n	8019c7c <find_volume+0x178>
 8019c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c72:	3301      	adds	r3, #1
 8019c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c78:	2b03      	cmp	r3, #3
 8019c7a:	d9e2      	bls.n	8019c42 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c80:	2b04      	cmp	r3, #4
 8019c82:	d101      	bne.n	8019c88 <find_volume+0x184>
 8019c84:	2301      	movs	r3, #1
 8019c86:	e17e      	b.n	8019f86 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019c88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019c8c:	2b01      	cmp	r3, #1
 8019c8e:	d901      	bls.n	8019c94 <find_volume+0x190>
 8019c90:	230d      	movs	r3, #13
 8019c92:	e178      	b.n	8019f86 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c96:	3330      	adds	r3, #48	@ 0x30
 8019c98:	330b      	adds	r3, #11
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7fe fd18 	bl	80186d0 <ld_word>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019ca6:	d001      	beq.n	8019cac <find_volume+0x1a8>
 8019ca8:	230d      	movs	r3, #13
 8019caa:	e16c      	b.n	8019f86 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cae:	3330      	adds	r3, #48	@ 0x30
 8019cb0:	3316      	adds	r3, #22
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7fe fd0c 	bl	80186d0 <ld_word>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d106      	bne.n	8019cd0 <find_volume+0x1cc>
 8019cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cc4:	3330      	adds	r3, #48	@ 0x30
 8019cc6:	3324      	adds	r3, #36	@ 0x24
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7fe fd19 	bl	8018700 <ld_dword>
 8019cce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019cd4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8019cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ce2:	789b      	ldrb	r3, [r3, #2]
 8019ce4:	2b01      	cmp	r3, #1
 8019ce6:	d005      	beq.n	8019cf4 <find_volume+0x1f0>
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cea:	789b      	ldrb	r3, [r3, #2]
 8019cec:	2b02      	cmp	r3, #2
 8019cee:	d001      	beq.n	8019cf4 <find_volume+0x1f0>
 8019cf0:	230d      	movs	r3, #13
 8019cf2:	e148      	b.n	8019f86 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cf6:	789b      	ldrb	r3, [r3, #2]
 8019cf8:	461a      	mov	r2, r3
 8019cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cfc:	fb02 f303 	mul.w	r3, r2, r3
 8019d00:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019d08:	461a      	mov	r2, r3
 8019d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d10:	895b      	ldrh	r3, [r3, #10]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d008      	beq.n	8019d28 <find_volume+0x224>
 8019d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d18:	895b      	ldrh	r3, [r3, #10]
 8019d1a:	461a      	mov	r2, r3
 8019d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d1e:	895b      	ldrh	r3, [r3, #10]
 8019d20:	3b01      	subs	r3, #1
 8019d22:	4013      	ands	r3, r2
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d001      	beq.n	8019d2c <find_volume+0x228>
 8019d28:	230d      	movs	r3, #13
 8019d2a:	e12c      	b.n	8019f86 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d2e:	3330      	adds	r3, #48	@ 0x30
 8019d30:	3311      	adds	r3, #17
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fe fccc 	bl	80186d0 <ld_word>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d42:	891b      	ldrh	r3, [r3, #8]
 8019d44:	f003 030f 	and.w	r3, r3, #15
 8019d48:	b29b      	uxth	r3, r3
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d001      	beq.n	8019d52 <find_volume+0x24e>
 8019d4e:	230d      	movs	r3, #13
 8019d50:	e119      	b.n	8019f86 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d54:	3330      	adds	r3, #48	@ 0x30
 8019d56:	3313      	adds	r3, #19
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f7fe fcb9 	bl	80186d0 <ld_word>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d106      	bne.n	8019d76 <find_volume+0x272>
 8019d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d6a:	3330      	adds	r3, #48	@ 0x30
 8019d6c:	3320      	adds	r3, #32
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f7fe fcc6 	bl	8018700 <ld_dword>
 8019d74:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d78:	3330      	adds	r3, #48	@ 0x30
 8019d7a:	330e      	adds	r3, #14
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f7fe fca7 	bl	80186d0 <ld_word>
 8019d82:	4603      	mov	r3, r0
 8019d84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019d86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d101      	bne.n	8019d90 <find_volume+0x28c>
 8019d8c:	230d      	movs	r3, #13
 8019d8e:	e0fa      	b.n	8019f86 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8019d90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d94:	4413      	add	r3, r2
 8019d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019d98:	8912      	ldrh	r2, [r2, #8]
 8019d9a:	0912      	lsrs	r2, r2, #4
 8019d9c:	b292      	uxth	r2, r2
 8019d9e:	4413      	add	r3, r2
 8019da0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8019da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019da6:	429a      	cmp	r2, r3
 8019da8:	d204      	bcs.n	8019db4 <find_volume+0x2b0>
 8019daa:	230d      	movs	r3, #13
 8019dac:	e0eb      	b.n	8019f86 <find_volume+0x482>
 8019dae:	bf00      	nop
 8019db0:	24000b5c 	.word	0x24000b5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019dbc:	8952      	ldrh	r2, [r2, #10]
 8019dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8019dc2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d101      	bne.n	8019dce <find_volume+0x2ca>
 8019dca:	230d      	movs	r3, #13
 8019dcc:	e0db      	b.n	8019f86 <find_volume+0x482>
		fmt = FS_FAT32;
 8019dce:	2303      	movs	r3, #3
 8019dd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019dda:	4293      	cmp	r3, r2
 8019ddc:	d802      	bhi.n	8019de4 <find_volume+0x2e0>
 8019dde:	2302      	movs	r3, #2
 8019de0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d802      	bhi.n	8019df4 <find_volume+0x2f0>
 8019dee:	2301      	movs	r3, #1
 8019df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df6:	1c9a      	adds	r2, r3, #2
 8019df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dfa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8019dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019e00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019e02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e06:	441a      	add	r2, r3
 8019e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8019e0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e10:	441a      	add	r2, r3
 8019e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e14:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8019e16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019e1a:	2b03      	cmp	r3, #3
 8019e1c:	d11e      	bne.n	8019e5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e20:	3330      	adds	r3, #48	@ 0x30
 8019e22:	332a      	adds	r3, #42	@ 0x2a
 8019e24:	4618      	mov	r0, r3
 8019e26:	f7fe fc53 	bl	80186d0 <ld_word>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d001      	beq.n	8019e34 <find_volume+0x330>
 8019e30:	230d      	movs	r3, #13
 8019e32:	e0a8      	b.n	8019f86 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e36:	891b      	ldrh	r3, [r3, #8]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d001      	beq.n	8019e40 <find_volume+0x33c>
 8019e3c:	230d      	movs	r3, #13
 8019e3e:	e0a2      	b.n	8019f86 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e42:	3330      	adds	r3, #48	@ 0x30
 8019e44:	332c      	adds	r3, #44	@ 0x2c
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fe fc5a 	bl	8018700 <ld_dword>
 8019e4c:	4602      	mov	r2, r0
 8019e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e50:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e54:	695b      	ldr	r3, [r3, #20]
 8019e56:	009b      	lsls	r3, r3, #2
 8019e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8019e5a:	e01f      	b.n	8019e9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e5e:	891b      	ldrh	r3, [r3, #8]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d101      	bne.n	8019e68 <find_volume+0x364>
 8019e64:	230d      	movs	r3, #13
 8019e66:	e08e      	b.n	8019f86 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e6a:	6a1a      	ldr	r2, [r3, #32]
 8019e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e6e:	441a      	add	r2, r3
 8019e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e72:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019e74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019e78:	2b02      	cmp	r3, #2
 8019e7a:	d103      	bne.n	8019e84 <find_volume+0x380>
 8019e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e7e:	695b      	ldr	r3, [r3, #20]
 8019e80:	005b      	lsls	r3, r3, #1
 8019e82:	e00a      	b.n	8019e9a <find_volume+0x396>
 8019e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e86:	695a      	ldr	r2, [r3, #20]
 8019e88:	4613      	mov	r3, r2
 8019e8a:	005b      	lsls	r3, r3, #1
 8019e8c:	4413      	add	r3, r2
 8019e8e:	085a      	lsrs	r2, r3, #1
 8019e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e92:	695b      	ldr	r3, [r3, #20]
 8019e94:	f003 0301 	and.w	r3, r3, #1
 8019e98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019e9a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e9e:	699a      	ldr	r2, [r3, #24]
 8019ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ea2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8019ea6:	0a5b      	lsrs	r3, r3, #9
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d201      	bcs.n	8019eb0 <find_volume+0x3ac>
 8019eac:	230d      	movs	r3, #13
 8019eae:	e06a      	b.n	8019f86 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8019eb6:	611a      	str	r2, [r3, #16]
 8019eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eba:	691a      	ldr	r2, [r3, #16]
 8019ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ebe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8019ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ec2:	2280      	movs	r2, #128	@ 0x80
 8019ec4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019eca:	2b03      	cmp	r3, #3
 8019ecc:	d149      	bne.n	8019f62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ed0:	3330      	adds	r3, #48	@ 0x30
 8019ed2:	3330      	adds	r3, #48	@ 0x30
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7fe fbfb 	bl	80186d0 <ld_word>
 8019eda:	4603      	mov	r3, r0
 8019edc:	2b01      	cmp	r3, #1
 8019ede:	d140      	bne.n	8019f62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	4619      	mov	r1, r3
 8019ee6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019ee8:	f7fe fea2 	bl	8018c30 <move_window>
 8019eec:	4603      	mov	r3, r0
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d137      	bne.n	8019f62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ef4:	2200      	movs	r2, #0
 8019ef6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019efa:	3330      	adds	r3, #48	@ 0x30
 8019efc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019f00:	4618      	mov	r0, r3
 8019f02:	f7fe fbe5 	bl	80186d0 <ld_word>
 8019f06:	4603      	mov	r3, r0
 8019f08:	461a      	mov	r2, r3
 8019f0a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	d127      	bne.n	8019f62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f14:	3330      	adds	r3, #48	@ 0x30
 8019f16:	4618      	mov	r0, r3
 8019f18:	f7fe fbf2 	bl	8018700 <ld_dword>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8019f90 <find_volume+0x48c>)
 8019f20:	4293      	cmp	r3, r2
 8019f22:	d11e      	bne.n	8019f62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f26:	3330      	adds	r3, #48	@ 0x30
 8019f28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f7fe fbe7 	bl	8018700 <ld_dword>
 8019f32:	4603      	mov	r3, r0
 8019f34:	4a17      	ldr	r2, [pc, #92]	@ (8019f94 <find_volume+0x490>)
 8019f36:	4293      	cmp	r3, r2
 8019f38:	d113      	bne.n	8019f62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f3c:	3330      	adds	r3, #48	@ 0x30
 8019f3e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7fe fbdc 	bl	8018700 <ld_dword>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f4c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f50:	3330      	adds	r3, #48	@ 0x30
 8019f52:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019f56:	4618      	mov	r0, r3
 8019f58:	f7fe fbd2 	bl	8018700 <ld_dword>
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f60:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f64:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019f68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8019f98 <find_volume+0x494>)
 8019f6c:	881b      	ldrh	r3, [r3, #0]
 8019f6e:	3301      	adds	r3, #1
 8019f70:	b29a      	uxth	r2, r3
 8019f72:	4b09      	ldr	r3, [pc, #36]	@ (8019f98 <find_volume+0x494>)
 8019f74:	801a      	strh	r2, [r3, #0]
 8019f76:	4b08      	ldr	r3, [pc, #32]	@ (8019f98 <find_volume+0x494>)
 8019f78:	881a      	ldrh	r2, [r3, #0]
 8019f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019f7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019f80:	f7fe fdee 	bl	8018b60 <clear_lock>
#endif
	return FR_OK;
 8019f84:	2300      	movs	r3, #0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3758      	adds	r7, #88	@ 0x58
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	41615252 	.word	0x41615252
 8019f94:	61417272 	.word	0x61417272
 8019f98:	24000b60 	.word	0x24000b60

08019f9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b084      	sub	sp, #16
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019fa6:	2309      	movs	r3, #9
 8019fa8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d01c      	beq.n	8019fea <validate+0x4e>
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d018      	beq.n	8019fea <validate+0x4e>
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	781b      	ldrb	r3, [r3, #0]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d013      	beq.n	8019fea <validate+0x4e>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	889a      	ldrh	r2, [r3, #4]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	88db      	ldrh	r3, [r3, #6]
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	d10c      	bne.n	8019fea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	785b      	ldrb	r3, [r3, #1]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7fe fada 	bl	8018590 <disk_status>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	f003 0301 	and.w	r3, r3, #1
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d101      	bne.n	8019fea <validate+0x4e>
			res = FR_OK;
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019fea:	7bfb      	ldrb	r3, [r7, #15]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d102      	bne.n	8019ff6 <validate+0x5a>
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	e000      	b.n	8019ff8 <validate+0x5c>
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	683a      	ldr	r2, [r7, #0]
 8019ffa:	6013      	str	r3, [r2, #0]
	return res;
 8019ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3710      	adds	r7, #16
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
	...

0801a008 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	4613      	mov	r3, r2
 801a014:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801a01a:	f107 0310 	add.w	r3, r7, #16
 801a01e:	4618      	mov	r0, r3
 801a020:	f7ff fcd5 	bl	80199ce <get_ldnumber>
 801a024:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801a026:	69fb      	ldr	r3, [r7, #28]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	da01      	bge.n	801a030 <f_mount+0x28>
 801a02c:	230b      	movs	r3, #11
 801a02e:	e02b      	b.n	801a088 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801a030:	4a17      	ldr	r2, [pc, #92]	@ (801a090 <f_mount+0x88>)
 801a032:	69fb      	ldr	r3, [r7, #28]
 801a034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a038:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801a03a:	69bb      	ldr	r3, [r7, #24]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d005      	beq.n	801a04c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801a040:	69b8      	ldr	r0, [r7, #24]
 801a042:	f7fe fd8d 	bl	8018b60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801a046:	69bb      	ldr	r3, [r7, #24]
 801a048:	2200      	movs	r2, #0
 801a04a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d002      	beq.n	801a058 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	2200      	movs	r2, #0
 801a056:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801a058:	68fa      	ldr	r2, [r7, #12]
 801a05a:	490d      	ldr	r1, [pc, #52]	@ (801a090 <f_mount+0x88>)
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d002      	beq.n	801a06e <f_mount+0x66>
 801a068:	79fb      	ldrb	r3, [r7, #7]
 801a06a:	2b01      	cmp	r3, #1
 801a06c:	d001      	beq.n	801a072 <f_mount+0x6a>
 801a06e:	2300      	movs	r3, #0
 801a070:	e00a      	b.n	801a088 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801a072:	f107 010c 	add.w	r1, r7, #12
 801a076:	f107 0308 	add.w	r3, r7, #8
 801a07a:	2200      	movs	r2, #0
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7ff fd41 	bl	8019b04 <find_volume>
 801a082:	4603      	mov	r3, r0
 801a084:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801a086:	7dfb      	ldrb	r3, [r7, #23]
}
 801a088:	4618      	mov	r0, r3
 801a08a:	3720      	adds	r7, #32
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}
 801a090:	24000b5c 	.word	0x24000b5c

0801a094 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b098      	sub	sp, #96	@ 0x60
 801a098:	af00      	add	r7, sp, #0
 801a09a:	60f8      	str	r0, [r7, #12]
 801a09c:	60b9      	str	r1, [r7, #8]
 801a09e:	4613      	mov	r3, r2
 801a0a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d101      	bne.n	801a0ac <f_open+0x18>
 801a0a8:	2309      	movs	r3, #9
 801a0aa:	e1a9      	b.n	801a400 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801a0ac:	79fb      	ldrb	r3, [r7, #7]
 801a0ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a0b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801a0b4:	79fa      	ldrb	r2, [r7, #7]
 801a0b6:	f107 0110 	add.w	r1, r7, #16
 801a0ba:	f107 0308 	add.w	r3, r7, #8
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f7ff fd20 	bl	8019b04 <find_volume>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801a0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	f040 818d 	bne.w	801a3ee <f_open+0x35a>
		dj.obj.fs = fs;
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801a0d8:	68ba      	ldr	r2, [r7, #8]
 801a0da:	f107 0314 	add.w	r3, r7, #20
 801a0de:	4611      	mov	r1, r2
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f7ff fc03 	bl	80198ec <follow_path>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801a0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d118      	bne.n	801a126 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801a0f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a0f8:	b25b      	sxtb	r3, r3
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	da03      	bge.n	801a106 <f_open+0x72>
				res = FR_INVALID_NAME;
 801a0fe:	2306      	movs	r3, #6
 801a100:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a104:	e00f      	b.n	801a126 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a106:	79fb      	ldrb	r3, [r7, #7]
 801a108:	2b01      	cmp	r3, #1
 801a10a:	bf8c      	ite	hi
 801a10c:	2301      	movhi	r3, #1
 801a10e:	2300      	movls	r3, #0
 801a110:	b2db      	uxtb	r3, r3
 801a112:	461a      	mov	r2, r3
 801a114:	f107 0314 	add.w	r3, r7, #20
 801a118:	4611      	mov	r1, r2
 801a11a:	4618      	mov	r0, r3
 801a11c:	f7fe fbd8 	bl	80188d0 <chk_lock>
 801a120:	4603      	mov	r3, r0
 801a122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a126:	79fb      	ldrb	r3, [r7, #7]
 801a128:	f003 031c 	and.w	r3, r3, #28
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d07f      	beq.n	801a230 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801a130:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a134:	2b00      	cmp	r3, #0
 801a136:	d017      	beq.n	801a168 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801a138:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a13c:	2b04      	cmp	r3, #4
 801a13e:	d10e      	bne.n	801a15e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801a140:	f7fe fc22 	bl	8018988 <enq_lock>
 801a144:	4603      	mov	r3, r0
 801a146:	2b00      	cmp	r3, #0
 801a148:	d006      	beq.n	801a158 <f_open+0xc4>
 801a14a:	f107 0314 	add.w	r3, r7, #20
 801a14e:	4618      	mov	r0, r3
 801a150:	f7ff fb06 	bl	8019760 <dir_register>
 801a154:	4603      	mov	r3, r0
 801a156:	e000      	b.n	801a15a <f_open+0xc6>
 801a158:	2312      	movs	r3, #18
 801a15a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801a15e:	79fb      	ldrb	r3, [r7, #7]
 801a160:	f043 0308 	orr.w	r3, r3, #8
 801a164:	71fb      	strb	r3, [r7, #7]
 801a166:	e010      	b.n	801a18a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801a168:	7ebb      	ldrb	r3, [r7, #26]
 801a16a:	f003 0311 	and.w	r3, r3, #17
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d003      	beq.n	801a17a <f_open+0xe6>
					res = FR_DENIED;
 801a172:	2307      	movs	r3, #7
 801a174:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a178:	e007      	b.n	801a18a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801a17a:	79fb      	ldrb	r3, [r7, #7]
 801a17c:	f003 0304 	and.w	r3, r3, #4
 801a180:	2b00      	cmp	r3, #0
 801a182:	d002      	beq.n	801a18a <f_open+0xf6>
 801a184:	2308      	movs	r3, #8
 801a186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801a18a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d168      	bne.n	801a264 <f_open+0x1d0>
 801a192:	79fb      	ldrb	r3, [r7, #7]
 801a194:	f003 0308 	and.w	r3, r3, #8
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d063      	beq.n	801a264 <f_open+0x1d0>
				dw = GET_FATTIME();
 801a19c:	f7fd ff6c 	bl	8018078 <get_fattime>
 801a1a0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801a1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1a4:	330e      	adds	r3, #14
 801a1a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	f7fe fae7 	bl	801877c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801a1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1b0:	3316      	adds	r3, #22
 801a1b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f7fe fae1 	bl	801877c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801a1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1bc:	330b      	adds	r3, #11
 801a1be:	2220      	movs	r2, #32
 801a1c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801a1c2:	693b      	ldr	r3, [r7, #16]
 801a1c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a1c6:	4611      	mov	r1, r2
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f7ff fa35 	bl	8019638 <ld_clust>
 801a1ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801a1d0:	693b      	ldr	r3, [r7, #16]
 801a1d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7ff fa4d 	bl	8019676 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1de:	331c      	adds	r3, #28
 801a1e0:	2100      	movs	r1, #0
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7fe faca 	bl	801877c <st_dword>
					fs->wflag = 1;
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	2201      	movs	r2, #1
 801a1ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801a1ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d037      	beq.n	801a264 <f_open+0x1d0>
						dw = fs->winsect;
 801a1f4:	693b      	ldr	r3, [r7, #16]
 801a1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1f8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801a1fa:	f107 0314 	add.w	r3, r7, #20
 801a1fe:	2200      	movs	r2, #0
 801a200:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801a202:	4618      	mov	r0, r3
 801a204:	f7fe ff60 	bl	80190c8 <remove_chain>
 801a208:	4603      	mov	r3, r0
 801a20a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801a20e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a212:	2b00      	cmp	r3, #0
 801a214:	d126      	bne.n	801a264 <f_open+0x1d0>
							res = move_window(fs, dw);
 801a216:	693b      	ldr	r3, [r7, #16]
 801a218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a21a:	4618      	mov	r0, r3
 801a21c:	f7fe fd08 	bl	8018c30 <move_window>
 801a220:	4603      	mov	r3, r0
 801a222:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801a226:	693b      	ldr	r3, [r7, #16]
 801a228:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a22a:	3a01      	subs	r2, #1
 801a22c:	60da      	str	r2, [r3, #12]
 801a22e:	e019      	b.n	801a264 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801a230:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a234:	2b00      	cmp	r3, #0
 801a236:	d115      	bne.n	801a264 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801a238:	7ebb      	ldrb	r3, [r7, #26]
 801a23a:	f003 0310 	and.w	r3, r3, #16
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d003      	beq.n	801a24a <f_open+0x1b6>
					res = FR_NO_FILE;
 801a242:	2304      	movs	r3, #4
 801a244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a248:	e00c      	b.n	801a264 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801a24a:	79fb      	ldrb	r3, [r7, #7]
 801a24c:	f003 0302 	and.w	r3, r3, #2
 801a250:	2b00      	cmp	r3, #0
 801a252:	d007      	beq.n	801a264 <f_open+0x1d0>
 801a254:	7ebb      	ldrb	r3, [r7, #26]
 801a256:	f003 0301 	and.w	r3, r3, #1
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d002      	beq.n	801a264 <f_open+0x1d0>
						res = FR_DENIED;
 801a25e:	2307      	movs	r3, #7
 801a260:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801a264:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d126      	bne.n	801a2ba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a26c:	79fb      	ldrb	r3, [r7, #7]
 801a26e:	f003 0308 	and.w	r3, r3, #8
 801a272:	2b00      	cmp	r3, #0
 801a274:	d003      	beq.n	801a27e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801a276:	79fb      	ldrb	r3, [r7, #7]
 801a278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a27c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a27e:	693b      	ldr	r3, [r7, #16]
 801a280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801a286:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a28c:	79fb      	ldrb	r3, [r7, #7]
 801a28e:	2b01      	cmp	r3, #1
 801a290:	bf8c      	ite	hi
 801a292:	2301      	movhi	r3, #1
 801a294:	2300      	movls	r3, #0
 801a296:	b2db      	uxtb	r3, r3
 801a298:	461a      	mov	r2, r3
 801a29a:	f107 0314 	add.w	r3, r7, #20
 801a29e:	4611      	mov	r1, r2
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f7fe fb93 	bl	80189cc <inc_lock>
 801a2a6:	4602      	mov	r2, r0
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	691b      	ldr	r3, [r3, #16]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d102      	bne.n	801a2ba <f_open+0x226>
 801a2b4:	2302      	movs	r3, #2
 801a2b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801a2ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	f040 8095 	bne.w	801a3ee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a2c4:	693b      	ldr	r3, [r7, #16]
 801a2c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a2c8:	4611      	mov	r1, r2
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f7ff f9b4 	bl	8019638 <ld_clust>
 801a2d0:	4602      	mov	r2, r0
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2d8:	331c      	adds	r3, #28
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7fe fa10 	bl	8018700 <ld_dword>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a2ec:	693a      	ldr	r2, [r7, #16]
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	88da      	ldrh	r2, [r3, #6]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	79fa      	ldrb	r2, [r7, #7]
 801a2fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	2200      	movs	r2, #0
 801a304:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	2200      	movs	r2, #0
 801a30a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	2200      	movs	r2, #0
 801a310:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	3330      	adds	r3, #48	@ 0x30
 801a316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a31a:	2100      	movs	r1, #0
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7fe fa7a 	bl	8018816 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a322:	79fb      	ldrb	r3, [r7, #7]
 801a324:	f003 0320 	and.w	r3, r3, #32
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d060      	beq.n	801a3ee <f_open+0x35a>
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	68db      	ldr	r3, [r3, #12]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d05c      	beq.n	801a3ee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	68da      	ldr	r2, [r3, #12]
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a33c:	693b      	ldr	r3, [r7, #16]
 801a33e:	895b      	ldrh	r3, [r3, #10]
 801a340:	025b      	lsls	r3, r3, #9
 801a342:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	689b      	ldr	r3, [r3, #8]
 801a348:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	68db      	ldr	r3, [r3, #12]
 801a34e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a350:	e016      	b.n	801a380 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a356:	4618      	mov	r0, r3
 801a358:	f7fe fd25 	bl	8018da6 <get_fat>
 801a35c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801a35e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a360:	2b01      	cmp	r3, #1
 801a362:	d802      	bhi.n	801a36a <f_open+0x2d6>
 801a364:	2302      	movs	r3, #2
 801a366:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a36a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a370:	d102      	bne.n	801a378 <f_open+0x2e4>
 801a372:	2301      	movs	r3, #1
 801a374:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a37c:	1ad3      	subs	r3, r2, r3
 801a37e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a380:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a384:	2b00      	cmp	r3, #0
 801a386:	d103      	bne.n	801a390 <f_open+0x2fc>
 801a388:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a38c:	429a      	cmp	r2, r3
 801a38e:	d8e0      	bhi.n	801a352 <f_open+0x2be>
				}
				fp->clust = clst;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a394:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a396:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d127      	bne.n	801a3ee <f_open+0x35a>
 801a39e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d022      	beq.n	801a3ee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a3a8:	693b      	ldr	r3, [r7, #16]
 801a3aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f7fe fcdb 	bl	8018d68 <clust2sect>
 801a3b2:	6478      	str	r0, [r7, #68]	@ 0x44
 801a3b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d103      	bne.n	801a3c2 <f_open+0x32e>
						res = FR_INT_ERR;
 801a3ba:	2302      	movs	r3, #2
 801a3bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801a3c0:	e015      	b.n	801a3ee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a3c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3c4:	0a5a      	lsrs	r2, r3, #9
 801a3c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3c8:	441a      	add	r2, r3
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a3ce:	693b      	ldr	r3, [r7, #16]
 801a3d0:	7858      	ldrb	r0, [r3, #1]
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	6a1a      	ldr	r2, [r3, #32]
 801a3dc:	2301      	movs	r3, #1
 801a3de:	f7fe f919 	bl	8018614 <disk_read>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d002      	beq.n	801a3ee <f_open+0x35a>
 801a3e8:	2301      	movs	r3, #1
 801a3ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d002      	beq.n	801a3fc <f_open+0x368>
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801a400:	4618      	mov	r0, r3
 801a402:	3760      	adds	r7, #96	@ 0x60
 801a404:	46bd      	mov	sp, r7
 801a406:	bd80      	pop	{r7, pc}

0801a408 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b08e      	sub	sp, #56	@ 0x38
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	60f8      	str	r0, [r7, #12]
 801a410:	60b9      	str	r1, [r7, #8]
 801a412:	607a      	str	r2, [r7, #4]
 801a414:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801a41a:	683b      	ldr	r3, [r7, #0]
 801a41c:	2200      	movs	r2, #0
 801a41e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	f107 0214 	add.w	r2, r7, #20
 801a426:	4611      	mov	r1, r2
 801a428:	4618      	mov	r0, r3
 801a42a:	f7ff fdb7 	bl	8019f9c <validate>
 801a42e:	4603      	mov	r3, r0
 801a430:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a434:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d107      	bne.n	801a44c <f_read+0x44>
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	7d5b      	ldrb	r3, [r3, #21]
 801a440:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801a444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d002      	beq.n	801a452 <f_read+0x4a>
 801a44c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a450:	e115      	b.n	801a67e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	7d1b      	ldrb	r3, [r3, #20]
 801a456:	f003 0301 	and.w	r3, r3, #1
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d101      	bne.n	801a462 <f_read+0x5a>
 801a45e:	2307      	movs	r3, #7
 801a460:	e10d      	b.n	801a67e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	68da      	ldr	r2, [r3, #12]
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	699b      	ldr	r3, [r3, #24]
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801a46e:	687a      	ldr	r2, [r7, #4]
 801a470:	6a3b      	ldr	r3, [r7, #32]
 801a472:	429a      	cmp	r2, r3
 801a474:	f240 80fe 	bls.w	801a674 <f_read+0x26c>
 801a478:	6a3b      	ldr	r3, [r7, #32]
 801a47a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801a47c:	e0fa      	b.n	801a674 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	699b      	ldr	r3, [r3, #24]
 801a482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a486:	2b00      	cmp	r3, #0
 801a488:	f040 80c6 	bne.w	801a618 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	699b      	ldr	r3, [r3, #24]
 801a490:	0a5b      	lsrs	r3, r3, #9
 801a492:	697a      	ldr	r2, [r7, #20]
 801a494:	8952      	ldrh	r2, [r2, #10]
 801a496:	3a01      	subs	r2, #1
 801a498:	4013      	ands	r3, r2
 801a49a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801a49c:	69fb      	ldr	r3, [r7, #28]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d12f      	bne.n	801a502 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	699b      	ldr	r3, [r3, #24]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d103      	bne.n	801a4b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	689b      	ldr	r3, [r3, #8]
 801a4ae:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4b0:	e013      	b.n	801a4da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d007      	beq.n	801a4ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	699b      	ldr	r3, [r3, #24]
 801a4be:	4619      	mov	r1, r3
 801a4c0:	68f8      	ldr	r0, [r7, #12]
 801a4c2:	f7fe fefe 	bl	80192c2 <clmt_clust>
 801a4c6:	6338      	str	r0, [r7, #48]	@ 0x30
 801a4c8:	e007      	b.n	801a4da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801a4ca:	68fa      	ldr	r2, [r7, #12]
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	69db      	ldr	r3, [r3, #28]
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	4610      	mov	r0, r2
 801a4d4:	f7fe fc67 	bl	8018da6 <get_fat>
 801a4d8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4dc:	2b01      	cmp	r3, #1
 801a4de:	d804      	bhi.n	801a4ea <f_read+0xe2>
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	2202      	movs	r2, #2
 801a4e4:	755a      	strb	r2, [r3, #21]
 801a4e6:	2302      	movs	r3, #2
 801a4e8:	e0c9      	b.n	801a67e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4f0:	d104      	bne.n	801a4fc <f_read+0xf4>
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	755a      	strb	r2, [r3, #21]
 801a4f8:	2301      	movs	r3, #1
 801a4fa:	e0c0      	b.n	801a67e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a500:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a502:	697a      	ldr	r2, [r7, #20]
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	69db      	ldr	r3, [r3, #28]
 801a508:	4619      	mov	r1, r3
 801a50a:	4610      	mov	r0, r2
 801a50c:	f7fe fc2c 	bl	8018d68 <clust2sect>
 801a510:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a512:	69bb      	ldr	r3, [r7, #24]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d104      	bne.n	801a522 <f_read+0x11a>
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	2202      	movs	r2, #2
 801a51c:	755a      	strb	r2, [r3, #21]
 801a51e:	2302      	movs	r3, #2
 801a520:	e0ad      	b.n	801a67e <f_read+0x276>
			sect += csect;
 801a522:	69ba      	ldr	r2, [r7, #24]
 801a524:	69fb      	ldr	r3, [r7, #28]
 801a526:	4413      	add	r3, r2
 801a528:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	0a5b      	lsrs	r3, r3, #9
 801a52e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a532:	2b00      	cmp	r3, #0
 801a534:	d039      	beq.n	801a5aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a536:	69fa      	ldr	r2, [r7, #28]
 801a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53a:	4413      	add	r3, r2
 801a53c:	697a      	ldr	r2, [r7, #20]
 801a53e:	8952      	ldrh	r2, [r2, #10]
 801a540:	4293      	cmp	r3, r2
 801a542:	d905      	bls.n	801a550 <f_read+0x148>
					cc = fs->csize - csect;
 801a544:	697b      	ldr	r3, [r7, #20]
 801a546:	895b      	ldrh	r3, [r3, #10]
 801a548:	461a      	mov	r2, r3
 801a54a:	69fb      	ldr	r3, [r7, #28]
 801a54c:	1ad3      	subs	r3, r2, r3
 801a54e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a550:	697b      	ldr	r3, [r7, #20]
 801a552:	7858      	ldrb	r0, [r3, #1]
 801a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a556:	69ba      	ldr	r2, [r7, #24]
 801a558:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a55a:	f7fe f85b 	bl	8018614 <disk_read>
 801a55e:	4603      	mov	r3, r0
 801a560:	2b00      	cmp	r3, #0
 801a562:	d004      	beq.n	801a56e <f_read+0x166>
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	2201      	movs	r2, #1
 801a568:	755a      	strb	r2, [r3, #21]
 801a56a:	2301      	movs	r3, #1
 801a56c:	e087      	b.n	801a67e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	7d1b      	ldrb	r3, [r3, #20]
 801a572:	b25b      	sxtb	r3, r3
 801a574:	2b00      	cmp	r3, #0
 801a576:	da14      	bge.n	801a5a2 <f_read+0x19a>
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	6a1a      	ldr	r2, [r3, #32]
 801a57c:	69bb      	ldr	r3, [r7, #24]
 801a57e:	1ad3      	subs	r3, r2, r3
 801a580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a582:	429a      	cmp	r2, r3
 801a584:	d90d      	bls.n	801a5a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	6a1a      	ldr	r2, [r3, #32]
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	1ad3      	subs	r3, r2, r3
 801a58e:	025b      	lsls	r3, r3, #9
 801a590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a592:	18d0      	adds	r0, r2, r3
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	3330      	adds	r3, #48	@ 0x30
 801a598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a59c:	4619      	mov	r1, r3
 801a59e:	f7fe f919 	bl	80187d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5a4:	025b      	lsls	r3, r3, #9
 801a5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801a5a8:	e050      	b.n	801a64c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	6a1b      	ldr	r3, [r3, #32]
 801a5ae:	69ba      	ldr	r2, [r7, #24]
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	d02e      	beq.n	801a612 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	7d1b      	ldrb	r3, [r3, #20]
 801a5b8:	b25b      	sxtb	r3, r3
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	da18      	bge.n	801a5f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	7858      	ldrb	r0, [r3, #1]
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	6a1a      	ldr	r2, [r3, #32]
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	f7fe f841 	bl	8018654 <disk_write>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d004      	beq.n	801a5e2 <f_read+0x1da>
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	2201      	movs	r2, #1
 801a5dc:	755a      	strb	r2, [r3, #21]
 801a5de:	2301      	movs	r3, #1
 801a5e0:	e04d      	b.n	801a67e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	7d1b      	ldrb	r3, [r3, #20]
 801a5e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a5ea:	b2da      	uxtb	r2, r3
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	7858      	ldrb	r0, [r3, #1]
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	69ba      	ldr	r2, [r7, #24]
 801a5fe:	f7fe f809 	bl	8018614 <disk_read>
 801a602:	4603      	mov	r3, r0
 801a604:	2b00      	cmp	r3, #0
 801a606:	d004      	beq.n	801a612 <f_read+0x20a>
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	2201      	movs	r2, #1
 801a60c:	755a      	strb	r2, [r3, #21]
 801a60e:	2301      	movs	r3, #1
 801a610:	e035      	b.n	801a67e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	69ba      	ldr	r2, [r7, #24]
 801a616:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	699b      	ldr	r3, [r3, #24]
 801a61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a620:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a624:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801a626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	429a      	cmp	r2, r3
 801a62c:	d901      	bls.n	801a632 <f_read+0x22a>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	699b      	ldr	r3, [r3, #24]
 801a63c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a640:	4413      	add	r3, r2
 801a642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a644:	4619      	mov	r1, r3
 801a646:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a648:	f7fe f8c4 	bl	80187d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801a64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a650:	4413      	add	r3, r2
 801a652:	627b      	str	r3, [r7, #36]	@ 0x24
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	699a      	ldr	r2, [r3, #24]
 801a658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a65a:	441a      	add	r2, r3
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	619a      	str	r2, [r3, #24]
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a666:	441a      	add	r2, r3
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	601a      	str	r2, [r3, #0]
 801a66c:	687a      	ldr	r2, [r7, #4]
 801a66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a670:	1ad3      	subs	r3, r2, r3
 801a672:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	2b00      	cmp	r3, #0
 801a678:	f47f af01 	bne.w	801a47e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801a67c:	2300      	movs	r3, #0
}
 801a67e:	4618      	mov	r0, r3
 801a680:	3738      	adds	r7, #56	@ 0x38
 801a682:	46bd      	mov	sp, r7
 801a684:	bd80      	pop	{r7, pc}

0801a686 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a686:	b580      	push	{r7, lr}
 801a688:	b086      	sub	sp, #24
 801a68a:	af00      	add	r7, sp, #0
 801a68c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	f107 0208 	add.w	r2, r7, #8
 801a694:	4611      	mov	r1, r2
 801a696:	4618      	mov	r0, r3
 801a698:	f7ff fc80 	bl	8019f9c <validate>
 801a69c:	4603      	mov	r3, r0
 801a69e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a6a0:	7dfb      	ldrb	r3, [r7, #23]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d168      	bne.n	801a778 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	7d1b      	ldrb	r3, [r3, #20]
 801a6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d062      	beq.n	801a778 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	7d1b      	ldrb	r3, [r3, #20]
 801a6b6:	b25b      	sxtb	r3, r3
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	da15      	bge.n	801a6e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	7858      	ldrb	r0, [r3, #1]
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	6a1a      	ldr	r2, [r3, #32]
 801a6ca:	2301      	movs	r3, #1
 801a6cc:	f7fd ffc2 	bl	8018654 <disk_write>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d001      	beq.n	801a6da <f_sync+0x54>
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	e04f      	b.n	801a77a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	7d1b      	ldrb	r3, [r3, #20]
 801a6de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a6e2:	b2da      	uxtb	r2, r3
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a6e8:	f7fd fcc6 	bl	8018078 <get_fattime>
 801a6ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a6ee:	68ba      	ldr	r2, [r7, #8]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6f4:	4619      	mov	r1, r3
 801a6f6:	4610      	mov	r0, r2
 801a6f8:	f7fe fa9a 	bl	8018c30 <move_window>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a700:	7dfb      	ldrb	r3, [r7, #23]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d138      	bne.n	801a778 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a70a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	330b      	adds	r3, #11
 801a710:	781a      	ldrb	r2, [r3, #0]
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	330b      	adds	r3, #11
 801a716:	f042 0220 	orr.w	r2, r2, #32
 801a71a:	b2d2      	uxtb	r2, r2
 801a71c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6818      	ldr	r0, [r3, #0]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	689b      	ldr	r3, [r3, #8]
 801a726:	461a      	mov	r2, r3
 801a728:	68f9      	ldr	r1, [r7, #12]
 801a72a:	f7fe ffa4 	bl	8019676 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	f103 021c 	add.w	r2, r3, #28
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	68db      	ldr	r3, [r3, #12]
 801a738:	4619      	mov	r1, r3
 801a73a:	4610      	mov	r0, r2
 801a73c:	f7fe f81e 	bl	801877c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	3316      	adds	r3, #22
 801a744:	6939      	ldr	r1, [r7, #16]
 801a746:	4618      	mov	r0, r3
 801a748:	f7fe f818 	bl	801877c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	3312      	adds	r3, #18
 801a750:	2100      	movs	r1, #0
 801a752:	4618      	mov	r0, r3
 801a754:	f7fd fff7 	bl	8018746 <st_word>
					fs->wflag = 1;
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	2201      	movs	r2, #1
 801a75c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	4618      	mov	r0, r3
 801a762:	f7fe fa93 	bl	8018c8c <sync_fs>
 801a766:	4603      	mov	r3, r0
 801a768:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	7d1b      	ldrb	r3, [r3, #20]
 801a76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a772:	b2da      	uxtb	r2, r3
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a778:	7dfb      	ldrb	r3, [r7, #23]
}
 801a77a:	4618      	mov	r0, r3
 801a77c:	3718      	adds	r7, #24
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}

0801a782 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a782:	b580      	push	{r7, lr}
 801a784:	b084      	sub	sp, #16
 801a786:	af00      	add	r7, sp, #0
 801a788:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a78a:	6878      	ldr	r0, [r7, #4]
 801a78c:	f7ff ff7b 	bl	801a686 <f_sync>
 801a790:	4603      	mov	r3, r0
 801a792:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a794:	7bfb      	ldrb	r3, [r7, #15]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d118      	bne.n	801a7cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f107 0208 	add.w	r2, r7, #8
 801a7a0:	4611      	mov	r1, r2
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	f7ff fbfa 	bl	8019f9c <validate>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a7ac:	7bfb      	ldrb	r3, [r7, #15]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d10c      	bne.n	801a7cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	691b      	ldr	r3, [r3, #16]
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	f7fe f996 	bl	8018ae8 <dec_lock>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a7c0:	7bfb      	ldrb	r3, [r7, #15]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d102      	bne.n	801a7cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	3710      	adds	r7, #16
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
	...

0801a7d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a7d8:	b480      	push	{r7}
 801a7da:	b087      	sub	sp, #28
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	4613      	mov	r3, r2
 801a7e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a7ee:	4b1f      	ldr	r3, [pc, #124]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a7f0:	7a5b      	ldrb	r3, [r3, #9]
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d131      	bne.n	801a85c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a7f8:	4b1c      	ldr	r3, [pc, #112]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a7fa:	7a5b      	ldrb	r3, [r3, #9]
 801a7fc:	b2db      	uxtb	r3, r3
 801a7fe:	461a      	mov	r2, r3
 801a800:	4b1a      	ldr	r3, [pc, #104]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a802:	2100      	movs	r1, #0
 801a804:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a806:	4b19      	ldr	r3, [pc, #100]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a808:	7a5b      	ldrb	r3, [r3, #9]
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	4a17      	ldr	r2, [pc, #92]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a80e:	009b      	lsls	r3, r3, #2
 801a810:	4413      	add	r3, r2
 801a812:	68fa      	ldr	r2, [r7, #12]
 801a814:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a816:	4b15      	ldr	r3, [pc, #84]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a818:	7a5b      	ldrb	r3, [r3, #9]
 801a81a:	b2db      	uxtb	r3, r3
 801a81c:	461a      	mov	r2, r3
 801a81e:	4b13      	ldr	r3, [pc, #76]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a820:	4413      	add	r3, r2
 801a822:	79fa      	ldrb	r2, [r7, #7]
 801a824:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a826:	4b11      	ldr	r3, [pc, #68]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a828:	7a5b      	ldrb	r3, [r3, #9]
 801a82a:	b2db      	uxtb	r3, r3
 801a82c:	1c5a      	adds	r2, r3, #1
 801a82e:	b2d1      	uxtb	r1, r2
 801a830:	4a0e      	ldr	r2, [pc, #56]	@ (801a86c <FATFS_LinkDriverEx+0x94>)
 801a832:	7251      	strb	r1, [r2, #9]
 801a834:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a836:	7dbb      	ldrb	r3, [r7, #22]
 801a838:	3330      	adds	r3, #48	@ 0x30
 801a83a:	b2da      	uxtb	r2, r3
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	3301      	adds	r3, #1
 801a844:	223a      	movs	r2, #58	@ 0x3a
 801a846:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	3302      	adds	r3, #2
 801a84c:	222f      	movs	r2, #47	@ 0x2f
 801a84e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a850:	68bb      	ldr	r3, [r7, #8]
 801a852:	3303      	adds	r3, #3
 801a854:	2200      	movs	r2, #0
 801a856:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a858:	2300      	movs	r3, #0
 801a85a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a85c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a85e:	4618      	mov	r0, r3
 801a860:	371c      	adds	r7, #28
 801a862:	46bd      	mov	sp, r7
 801a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a868:	4770      	bx	lr
 801a86a:	bf00      	nop
 801a86c:	24000b84 	.word	0x24000b84

0801a870 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b082      	sub	sp, #8
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a87a:	2200      	movs	r2, #0
 801a87c:	6839      	ldr	r1, [r7, #0]
 801a87e:	6878      	ldr	r0, [r7, #4]
 801a880:	f7ff ffaa 	bl	801a7d8 <FATFS_LinkDriverEx>
 801a884:	4603      	mov	r3, r0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3708      	adds	r7, #8
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}

0801a88e <_ZdlPvj>:
 801a88e:	f000 b9c6 	b.w	801ac1e <_ZdlPv>

0801a892 <__cxa_guard_acquire>:
 801a892:	6802      	ldr	r2, [r0, #0]
 801a894:	07d2      	lsls	r2, r2, #31
 801a896:	4603      	mov	r3, r0
 801a898:	d405      	bmi.n	801a8a6 <__cxa_guard_acquire+0x14>
 801a89a:	7842      	ldrb	r2, [r0, #1]
 801a89c:	b102      	cbz	r2, 801a8a0 <__cxa_guard_acquire+0xe>
 801a89e:	deff      	udf	#255	@ 0xff
 801a8a0:	2001      	movs	r0, #1
 801a8a2:	7058      	strb	r0, [r3, #1]
 801a8a4:	4770      	bx	lr
 801a8a6:	2000      	movs	r0, #0
 801a8a8:	4770      	bx	lr

0801a8aa <__cxa_guard_release>:
 801a8aa:	2301      	movs	r3, #1
 801a8ac:	6003      	str	r3, [r0, #0]
 801a8ae:	4770      	bx	lr

0801a8b0 <_Znwj>:
 801a8b0:	2801      	cmp	r0, #1
 801a8b2:	bf38      	it	cc
 801a8b4:	2001      	movcc	r0, #1
 801a8b6:	b510      	push	{r4, lr}
 801a8b8:	4604      	mov	r4, r0
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	f000 f9c2 	bl	801ac44 <malloc>
 801a8c0:	b100      	cbz	r0, 801a8c4 <_Znwj+0x14>
 801a8c2:	bd10      	pop	{r4, pc}
 801a8c4:	f000 f9ae 	bl	801ac24 <_ZSt15get_new_handlerv>
 801a8c8:	b908      	cbnz	r0, 801a8ce <_Znwj+0x1e>
 801a8ca:	f000 f9b3 	bl	801ac34 <abort>
 801a8ce:	4780      	blx	r0
 801a8d0:	e7f3      	b.n	801a8ba <_Znwj+0xa>

0801a8d2 <_ZNSaIcEC1Ev>:
 801a8d2:	4770      	bx	lr

0801a8d4 <_ZNSaIcED1Ev>:
 801a8d4:	4770      	bx	lr

0801a8d6 <_ZSt17__throw_bad_allocv>:
 801a8d6:	b508      	push	{r3, lr}
 801a8d8:	f000 f9ac 	bl	801ac34 <abort>

0801a8dc <_ZSt28__throw_bad_array_new_lengthv>:
 801a8dc:	b508      	push	{r3, lr}
 801a8de:	f000 f9a9 	bl	801ac34 <abort>

0801a8e2 <_ZSt19__throw_logic_errorPKc>:
 801a8e2:	b508      	push	{r3, lr}
 801a8e4:	f000 f9a6 	bl	801ac34 <abort>

0801a8e8 <_ZSt20__throw_length_errorPKc>:
 801a8e8:	b508      	push	{r3, lr}
 801a8ea:	f000 f9a3 	bl	801ac34 <abort>

0801a8ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801a8ee:	b10a      	cbz	r2, 801a8f4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801a8f0:	f000 bd97 	b.w	801b422 <memcpy>
 801a8f4:	4770      	bx	lr

0801a8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801a8f6:	6001      	str	r1, [r0, #0]
 801a8f8:	4770      	bx	lr

0801a8fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801a8fa:	6800      	ldr	r0, [r0, #0]
 801a8fc:	4770      	bx	lr

0801a8fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801a8fe:	3008      	adds	r0, #8
 801a900:	4770      	bx	lr

0801a902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801a902:	6081      	str	r1, [r0, #8]
 801a904:	4770      	bx	lr

0801a906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801a906:	6803      	ldr	r3, [r0, #0]
 801a908:	6041      	str	r1, [r0, #4]
 801a90a:	2200      	movs	r2, #0
 801a90c:	545a      	strb	r2, [r3, r1]
 801a90e:	4770      	bx	lr

0801a910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801a910:	f850 3b08 	ldr.w	r3, [r0], #8
 801a914:	1a1b      	subs	r3, r3, r0
 801a916:	4258      	negs	r0, r3
 801a918:	4158      	adcs	r0, r3
 801a91a:	4770      	bx	lr

0801a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801a91c:	b508      	push	{r3, lr}
 801a91e:	680b      	ldr	r3, [r1, #0]
 801a920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a924:	d302      	bcc.n	801a92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801a926:	480d      	ldr	r0, [pc, #52]	@ (801a95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801a928:	f7ff ffde 	bl	801a8e8 <_ZSt20__throw_length_errorPKc>
 801a92c:	4293      	cmp	r3, r2
 801a92e:	d90b      	bls.n	801a948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801a930:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801a934:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801a938:	d206      	bcs.n	801a948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801a93a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801a93e:	bf2a      	itet	cs
 801a940:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801a944:	6008      	strcc	r0, [r1, #0]
 801a946:	600b      	strcs	r3, [r1, #0]
 801a948:	6808      	ldr	r0, [r1, #0]
 801a94a:	3001      	adds	r0, #1
 801a94c:	d501      	bpl.n	801a952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801a94e:	f7ff ffc2 	bl	801a8d6 <_ZSt17__throw_bad_allocv>
 801a952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a956:	f7ff bfab 	b.w	801a8b0 <_Znwj>
 801a95a:	bf00      	nop
 801a95c:	0801ccf8 	.word	0x0801ccf8

0801a960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801a960:	b510      	push	{r4, lr}
 801a962:	4604      	mov	r4, r0
 801a964:	f7ff ffd4 	bl	801a910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801a968:	b920      	cbnz	r0, 801a974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801a96a:	6820      	ldr	r0, [r4, #0]
 801a96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a970:	f000 b955 	b.w	801ac1e <_ZdlPv>
 801a974:	bd10      	pop	{r4, pc}

0801a976 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801a976:	6840      	ldr	r0, [r0, #4]
 801a978:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801a97c:	3901      	subs	r1, #1
 801a97e:	1a09      	subs	r1, r1, r0
 801a980:	4291      	cmp	r1, r2
 801a982:	b508      	push	{r3, lr}
 801a984:	d202      	bcs.n	801a98c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801a986:	4618      	mov	r0, r3
 801a988:	f7ff ffae 	bl	801a8e8 <_ZSt20__throw_length_errorPKc>
 801a98c:	bd08      	pop	{r3, pc}

0801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801a98e:	2a01      	cmp	r2, #1
 801a990:	b410      	push	{r4}
 801a992:	d104      	bne.n	801a99e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801a994:	780a      	ldrb	r2, [r1, #0]
 801a996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a99a:	7002      	strb	r2, [r0, #0]
 801a99c:	4770      	bx	lr
 801a99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9a2:	f7ff bfa4 	b.w	801a8ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801a9a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801a9a6:	2a01      	cmp	r2, #1
 801a9a8:	b430      	push	{r4, r5}
 801a9aa:	d103      	bne.n	801a9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801a9ac:	780b      	ldrb	r3, [r1, #0]
 801a9ae:	7003      	strb	r3, [r0, #0]
 801a9b0:	bc30      	pop	{r4, r5}
 801a9b2:	4770      	bx	lr
 801a9b4:	2a00      	cmp	r2, #0
 801a9b6:	d0fb      	beq.n	801a9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801a9b8:	bc30      	pop	{r4, r5}
 801a9ba:	f000 bc49 	b.w	801b250 <memmove>

0801a9be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801a9be:	460b      	mov	r3, r1
 801a9c0:	2b01      	cmp	r3, #1
 801a9c2:	b410      	push	{r4}
 801a9c4:	4611      	mov	r1, r2
 801a9c6:	4604      	mov	r4, r0
 801a9c8:	d103      	bne.n	801a9d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801a9ca:	7022      	strb	r2, [r4, #0]
 801a9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9d0:	4770      	bx	lr
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d0fa      	beq.n	801a9cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801a9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9da:	461a      	mov	r2, r3
 801a9dc:	f000 bc52 	b.w	801b284 <memset>

0801a9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801a9e0:	b508      	push	{r3, lr}
 801a9e2:	1a52      	subs	r2, r2, r1
 801a9e4:	f7ff ffd3 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801a9e8:	bd08      	pop	{r3, pc}

0801a9ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801a9ea:	b508      	push	{r3, lr}
 801a9ec:	1a52      	subs	r2, r2, r1
 801a9ee:	f7ff ffce 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801a9f2:	bd08      	pop	{r3, pc}

0801a9f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801a9f4:	f100 0208 	add.w	r2, r0, #8
 801a9f8:	6002      	str	r2, [r0, #0]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	6042      	str	r2, [r0, #4]
 801a9fe:	7202      	strb	r2, [r0, #8]
 801aa00:	4770      	bx	lr

0801aa02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801aa02:	b510      	push	{r4, lr}
 801aa04:	4604      	mov	r4, r0
 801aa06:	f7ff ffab 	bl	801a960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801aa0a:	4620      	mov	r0, r4
 801aa0c:	bd10      	pop	{r4, pc}

0801aa0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801aa0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa10:	460c      	mov	r4, r1
 801aa12:	4605      	mov	r5, r0
 801aa14:	f7ff ff7c 	bl	801a910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801aa18:	4606      	mov	r6, r0
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	f7ff ff78 	bl	801a910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801aa20:	b190      	cbz	r0, 801aa48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801aa22:	42a5      	cmp	r5, r4
 801aa24:	d00a      	beq.n	801aa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801aa26:	6862      	ldr	r2, [r4, #4]
 801aa28:	b11a      	cbz	r2, 801aa32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801aa2a:	6821      	ldr	r1, [r4, #0]
 801aa2c:	6828      	ldr	r0, [r5, #0]
 801aa2e:	f7ff ffae 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801aa32:	6863      	ldr	r3, [r4, #4]
 801aa34:	682a      	ldr	r2, [r5, #0]
 801aa36:	606b      	str	r3, [r5, #4]
 801aa38:	2100      	movs	r1, #0
 801aa3a:	54d1      	strb	r1, [r2, r3]
 801aa3c:	6822      	ldr	r2, [r4, #0]
 801aa3e:	2300      	movs	r3, #0
 801aa40:	6063      	str	r3, [r4, #4]
 801aa42:	7013      	strb	r3, [r2, #0]
 801aa44:	4628      	mov	r0, r5
 801aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa48:	b90e      	cbnz	r6, 801aa4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801aa4a:	6828      	ldr	r0, [r5, #0]
 801aa4c:	68af      	ldr	r7, [r5, #8]
 801aa4e:	6823      	ldr	r3, [r4, #0]
 801aa50:	602b      	str	r3, [r5, #0]
 801aa52:	6863      	ldr	r3, [r4, #4]
 801aa54:	606b      	str	r3, [r5, #4]
 801aa56:	68a3      	ldr	r3, [r4, #8]
 801aa58:	60ab      	str	r3, [r5, #8]
 801aa5a:	b110      	cbz	r0, 801aa62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801aa5c:	6020      	str	r0, [r4, #0]
 801aa5e:	60a7      	str	r7, [r4, #8]
 801aa60:	e7ec      	b.n	801aa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801aa62:	f104 0308 	add.w	r3, r4, #8
 801aa66:	6023      	str	r3, [r4, #0]
 801aa68:	e7e8      	b.n	801aa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801aa6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801aa6a:	b510      	push	{r4, lr}
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	f7ff ff4f 	bl	801a910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801aa72:	b908      	cbnz	r0, 801aa78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801aa74:	68a0      	ldr	r0, [r4, #8]
 801aa76:	bd10      	pop	{r4, pc}
 801aa78:	200f      	movs	r0, #15
 801aa7a:	e7fc      	b.n	801aa76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801aa7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801aa7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa80:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801aa82:	461f      	mov	r7, r3
 801aa84:	6843      	ldr	r3, [r0, #4]
 801aa86:	eb01 0802 	add.w	r8, r1, r2
 801aa8a:	1ab2      	subs	r2, r6, r2
 801aa8c:	441a      	add	r2, r3
 801aa8e:	4604      	mov	r4, r0
 801aa90:	460d      	mov	r5, r1
 801aa92:	eba3 0908 	sub.w	r9, r3, r8
 801aa96:	9201      	str	r2, [sp, #4]
 801aa98:	f7ff ffe7 	bl	801aa6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801aa9c:	a901      	add	r1, sp, #4
 801aa9e:	4602      	mov	r2, r0
 801aaa0:	4620      	mov	r0, r4
 801aaa2:	f7ff ff3b 	bl	801a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801aaa6:	4682      	mov	sl, r0
 801aaa8:	b11d      	cbz	r5, 801aab2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801aaaa:	6821      	ldr	r1, [r4, #0]
 801aaac:	462a      	mov	r2, r5
 801aaae:	f7ff ff6e 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801aab2:	b137      	cbz	r7, 801aac2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801aab4:	b12e      	cbz	r6, 801aac2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801aab6:	4632      	mov	r2, r6
 801aab8:	4639      	mov	r1, r7
 801aaba:	eb0a 0005 	add.w	r0, sl, r5
 801aabe:	f7ff ff66 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801aac2:	f1b9 0f00 	cmp.w	r9, #0
 801aac6:	d007      	beq.n	801aad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801aac8:	6821      	ldr	r1, [r4, #0]
 801aaca:	4435      	add	r5, r6
 801aacc:	464a      	mov	r2, r9
 801aace:	4441      	add	r1, r8
 801aad0:	eb0a 0005 	add.w	r0, sl, r5
 801aad4:	f7ff ff5b 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801aad8:	4620      	mov	r0, r4
 801aada:	f7ff ff41 	bl	801a960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801aade:	9b01      	ldr	r3, [sp, #4]
 801aae0:	f8c4 a000 	str.w	sl, [r4]
 801aae4:	60a3      	str	r3, [r4, #8]
 801aae6:	b002      	add	sp, #8
 801aae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801aaec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801aaec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aaee:	4604      	mov	r4, r0
 801aaf0:	9101      	str	r1, [sp, #4]
 801aaf2:	f7ff ffba 	bl	801aa6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801aaf6:	9b01      	ldr	r3, [sp, #4]
 801aaf8:	4283      	cmp	r3, r0
 801aafa:	4602      	mov	r2, r0
 801aafc:	d90f      	bls.n	801ab1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801aafe:	a901      	add	r1, sp, #4
 801ab00:	4620      	mov	r0, r4
 801ab02:	f7ff ff0b 	bl	801a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801ab06:	6862      	ldr	r2, [r4, #4]
 801ab08:	6821      	ldr	r1, [r4, #0]
 801ab0a:	3201      	adds	r2, #1
 801ab0c:	4605      	mov	r5, r0
 801ab0e:	f7ff ff3e 	bl	801a98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7ff ff24 	bl	801a960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801ab18:	9b01      	ldr	r3, [sp, #4]
 801ab1a:	6025      	str	r5, [r4, #0]
 801ab1c:	60a3      	str	r3, [r4, #8]
 801ab1e:	b003      	add	sp, #12
 801ab20:	bd30      	pop	{r4, r5, pc}

0801ab22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801ab22:	6802      	ldr	r2, [r0, #0]
 801ab24:	2300      	movs	r3, #0
 801ab26:	6043      	str	r3, [r0, #4]
 801ab28:	7013      	strb	r3, [r2, #0]
 801ab2a:	4770      	bx	lr

0801ab2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801ab2c:	6800      	ldr	r0, [r0, #0]
 801ab2e:	4408      	add	r0, r1
 801ab30:	4770      	bx	lr
	...

0801ab34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801ab34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ab38:	4616      	mov	r6, r2
 801ab3a:	461d      	mov	r5, r3
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	4b1b      	ldr	r3, [pc, #108]	@ (801abac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801ab40:	462a      	mov	r2, r5
 801ab42:	460f      	mov	r7, r1
 801ab44:	4631      	mov	r1, r6
 801ab46:	f7ff ff16 	bl	801a976 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801ab4a:	4620      	mov	r0, r4
 801ab4c:	f7ff ff8d 	bl	801aa6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801ab50:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801ab54:	eba5 0806 	sub.w	r8, r5, r6
 801ab58:	44c8      	add	r8, r9
 801ab5a:	4540      	cmp	r0, r8
 801ab5c:	d31d      	bcc.n	801ab9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801ab5e:	19f3      	adds	r3, r6, r7
 801ab60:	ebb9 0203 	subs.w	r2, r9, r3
 801ab64:	d007      	beq.n	801ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801ab66:	42ae      	cmp	r6, r5
 801ab68:	d005      	beq.n	801ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801ab6a:	6820      	ldr	r0, [r4, #0]
 801ab6c:	4438      	add	r0, r7
 801ab6e:	1981      	adds	r1, r0, r6
 801ab70:	4428      	add	r0, r5
 801ab72:	f7ff ff18 	bl	801a9a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801ab76:	b135      	cbz	r5, 801ab86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801ab78:	6820      	ldr	r0, [r4, #0]
 801ab7a:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801ab7e:	4629      	mov	r1, r5
 801ab80:	4438      	add	r0, r7
 801ab82:	f7ff ff1c 	bl	801a9be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801ab86:	6823      	ldr	r3, [r4, #0]
 801ab88:	f8c4 8004 	str.w	r8, [r4, #4]
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	4620      	mov	r0, r4
 801ab90:	f803 2008 	strb.w	r2, [r3, r8]
 801ab94:	b003      	add	sp, #12
 801ab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab9a:	9500      	str	r5, [sp, #0]
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	4632      	mov	r2, r6
 801aba0:	4639      	mov	r1, r7
 801aba2:	4620      	mov	r0, r4
 801aba4:	f7ff ff6a 	bl	801aa7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801aba8:	e7e5      	b.n	801ab76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801abaa:	bf00      	nop
 801abac:	0801cd10 	.word	0x0801cd10

0801abb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801abb0:	b507      	push	{r0, r1, r2, lr}
 801abb2:	9200      	str	r2, [sp, #0]
 801abb4:	460b      	mov	r3, r1
 801abb6:	2200      	movs	r2, #0
 801abb8:	6841      	ldr	r1, [r0, #4]
 801abba:	f7ff ffbb 	bl	801ab34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801abbe:	b003      	add	sp, #12
 801abc0:	f85d fb04 	ldr.w	pc, [sp], #4

0801abc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801abc4:	6800      	ldr	r0, [r0, #0]
 801abc6:	4770      	bx	lr

0801abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801abc8:	6001      	str	r1, [r0, #0]
 801abca:	4770      	bx	lr

0801abcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801abcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801abce:	1a53      	subs	r3, r2, r1
 801abd0:	2b0f      	cmp	r3, #15
 801abd2:	4604      	mov	r4, r0
 801abd4:	460d      	mov	r5, r1
 801abd6:	4616      	mov	r6, r2
 801abd8:	9301      	str	r3, [sp, #4]
 801abda:	d906      	bls.n	801abea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801abdc:	2200      	movs	r2, #0
 801abde:	a901      	add	r1, sp, #4
 801abe0:	f7ff fe9c 	bl	801a91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801abe4:	9b01      	ldr	r3, [sp, #4]
 801abe6:	6020      	str	r0, [r4, #0]
 801abe8:	60a3      	str	r3, [r4, #8]
 801abea:	4632      	mov	r2, r6
 801abec:	4629      	mov	r1, r5
 801abee:	6820      	ldr	r0, [r4, #0]
 801abf0:	f7ff fef6 	bl	801a9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801abf4:	9b01      	ldr	r3, [sp, #4]
 801abf6:	6822      	ldr	r2, [r4, #0]
 801abf8:	6063      	str	r3, [r4, #4]
 801abfa:	2100      	movs	r1, #0
 801abfc:	54d1      	strb	r1, [r2, r3]
 801abfe:	b002      	add	sp, #8
 801ac00:	bd70      	pop	{r4, r5, r6, pc}

0801ac02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801ac02:	f100 0208 	add.w	r2, r0, #8
 801ac06:	b510      	push	{r4, lr}
 801ac08:	6002      	str	r2, [r0, #0]
 801ac0a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ac0e:	4604      	mov	r4, r0
 801ac10:	f04f 0300 	mov.w	r3, #0
 801ac14:	440a      	add	r2, r1
 801ac16:	f7ff ffd9 	bl	801abcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801ac1a:	4620      	mov	r0, r4
 801ac1c:	bd10      	pop	{r4, pc}

0801ac1e <_ZdlPv>:
 801ac1e:	f000 b819 	b.w	801ac54 <free>
	...

0801ac24 <_ZSt15get_new_handlerv>:
 801ac24:	4b02      	ldr	r3, [pc, #8]	@ (801ac30 <_ZSt15get_new_handlerv+0xc>)
 801ac26:	6818      	ldr	r0, [r3, #0]
 801ac28:	f3bf 8f5b 	dmb	ish
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop
 801ac30:	24000b90 	.word	0x24000b90

0801ac34 <abort>:
 801ac34:	b508      	push	{r3, lr}
 801ac36:	2006      	movs	r0, #6
 801ac38:	f000 fb54 	bl	801b2e4 <raise>
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	f7ee fd75 	bl	800972c <_exit>
	...

0801ac44 <malloc>:
 801ac44:	4b02      	ldr	r3, [pc, #8]	@ (801ac50 <malloc+0xc>)
 801ac46:	4601      	mov	r1, r0
 801ac48:	6818      	ldr	r0, [r3, #0]
 801ac4a:	f000 b82d 	b.w	801aca8 <_malloc_r>
 801ac4e:	bf00      	nop
 801ac50:	2400004c 	.word	0x2400004c

0801ac54 <free>:
 801ac54:	4b02      	ldr	r3, [pc, #8]	@ (801ac60 <free+0xc>)
 801ac56:	4601      	mov	r1, r0
 801ac58:	6818      	ldr	r0, [r3, #0]
 801ac5a:	f000 bbf1 	b.w	801b440 <_free_r>
 801ac5e:	bf00      	nop
 801ac60:	2400004c 	.word	0x2400004c

0801ac64 <sbrk_aligned>:
 801ac64:	b570      	push	{r4, r5, r6, lr}
 801ac66:	4e0f      	ldr	r6, [pc, #60]	@ (801aca4 <sbrk_aligned+0x40>)
 801ac68:	460c      	mov	r4, r1
 801ac6a:	6831      	ldr	r1, [r6, #0]
 801ac6c:	4605      	mov	r5, r0
 801ac6e:	b911      	cbnz	r1, 801ac76 <sbrk_aligned+0x12>
 801ac70:	f000 fb88 	bl	801b384 <_sbrk_r>
 801ac74:	6030      	str	r0, [r6, #0]
 801ac76:	4621      	mov	r1, r4
 801ac78:	4628      	mov	r0, r5
 801ac7a:	f000 fb83 	bl	801b384 <_sbrk_r>
 801ac7e:	1c43      	adds	r3, r0, #1
 801ac80:	d103      	bne.n	801ac8a <sbrk_aligned+0x26>
 801ac82:	f04f 34ff 	mov.w	r4, #4294967295
 801ac86:	4620      	mov	r0, r4
 801ac88:	bd70      	pop	{r4, r5, r6, pc}
 801ac8a:	1cc4      	adds	r4, r0, #3
 801ac8c:	f024 0403 	bic.w	r4, r4, #3
 801ac90:	42a0      	cmp	r0, r4
 801ac92:	d0f8      	beq.n	801ac86 <sbrk_aligned+0x22>
 801ac94:	1a21      	subs	r1, r4, r0
 801ac96:	4628      	mov	r0, r5
 801ac98:	f000 fb74 	bl	801b384 <_sbrk_r>
 801ac9c:	3001      	adds	r0, #1
 801ac9e:	d1f2      	bne.n	801ac86 <sbrk_aligned+0x22>
 801aca0:	e7ef      	b.n	801ac82 <sbrk_aligned+0x1e>
 801aca2:	bf00      	nop
 801aca4:	24000b94 	.word	0x24000b94

0801aca8 <_malloc_r>:
 801aca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acac:	1ccd      	adds	r5, r1, #3
 801acae:	f025 0503 	bic.w	r5, r5, #3
 801acb2:	3508      	adds	r5, #8
 801acb4:	2d0c      	cmp	r5, #12
 801acb6:	bf38      	it	cc
 801acb8:	250c      	movcc	r5, #12
 801acba:	2d00      	cmp	r5, #0
 801acbc:	4606      	mov	r6, r0
 801acbe:	db01      	blt.n	801acc4 <_malloc_r+0x1c>
 801acc0:	42a9      	cmp	r1, r5
 801acc2:	d904      	bls.n	801acce <_malloc_r+0x26>
 801acc4:	230c      	movs	r3, #12
 801acc6:	6033      	str	r3, [r6, #0]
 801acc8:	2000      	movs	r0, #0
 801acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ada4 <_malloc_r+0xfc>
 801acd2:	f000 f869 	bl	801ada8 <__malloc_lock>
 801acd6:	f8d8 3000 	ldr.w	r3, [r8]
 801acda:	461c      	mov	r4, r3
 801acdc:	bb44      	cbnz	r4, 801ad30 <_malloc_r+0x88>
 801acde:	4629      	mov	r1, r5
 801ace0:	4630      	mov	r0, r6
 801ace2:	f7ff ffbf 	bl	801ac64 <sbrk_aligned>
 801ace6:	1c43      	adds	r3, r0, #1
 801ace8:	4604      	mov	r4, r0
 801acea:	d158      	bne.n	801ad9e <_malloc_r+0xf6>
 801acec:	f8d8 4000 	ldr.w	r4, [r8]
 801acf0:	4627      	mov	r7, r4
 801acf2:	2f00      	cmp	r7, #0
 801acf4:	d143      	bne.n	801ad7e <_malloc_r+0xd6>
 801acf6:	2c00      	cmp	r4, #0
 801acf8:	d04b      	beq.n	801ad92 <_malloc_r+0xea>
 801acfa:	6823      	ldr	r3, [r4, #0]
 801acfc:	4639      	mov	r1, r7
 801acfe:	4630      	mov	r0, r6
 801ad00:	eb04 0903 	add.w	r9, r4, r3
 801ad04:	f000 fb3e 	bl	801b384 <_sbrk_r>
 801ad08:	4581      	cmp	r9, r0
 801ad0a:	d142      	bne.n	801ad92 <_malloc_r+0xea>
 801ad0c:	6821      	ldr	r1, [r4, #0]
 801ad0e:	1a6d      	subs	r5, r5, r1
 801ad10:	4629      	mov	r1, r5
 801ad12:	4630      	mov	r0, r6
 801ad14:	f7ff ffa6 	bl	801ac64 <sbrk_aligned>
 801ad18:	3001      	adds	r0, #1
 801ad1a:	d03a      	beq.n	801ad92 <_malloc_r+0xea>
 801ad1c:	6823      	ldr	r3, [r4, #0]
 801ad1e:	442b      	add	r3, r5
 801ad20:	6023      	str	r3, [r4, #0]
 801ad22:	f8d8 3000 	ldr.w	r3, [r8]
 801ad26:	685a      	ldr	r2, [r3, #4]
 801ad28:	bb62      	cbnz	r2, 801ad84 <_malloc_r+0xdc>
 801ad2a:	f8c8 7000 	str.w	r7, [r8]
 801ad2e:	e00f      	b.n	801ad50 <_malloc_r+0xa8>
 801ad30:	6822      	ldr	r2, [r4, #0]
 801ad32:	1b52      	subs	r2, r2, r5
 801ad34:	d420      	bmi.n	801ad78 <_malloc_r+0xd0>
 801ad36:	2a0b      	cmp	r2, #11
 801ad38:	d917      	bls.n	801ad6a <_malloc_r+0xc2>
 801ad3a:	1961      	adds	r1, r4, r5
 801ad3c:	42a3      	cmp	r3, r4
 801ad3e:	6025      	str	r5, [r4, #0]
 801ad40:	bf18      	it	ne
 801ad42:	6059      	strne	r1, [r3, #4]
 801ad44:	6863      	ldr	r3, [r4, #4]
 801ad46:	bf08      	it	eq
 801ad48:	f8c8 1000 	streq.w	r1, [r8]
 801ad4c:	5162      	str	r2, [r4, r5]
 801ad4e:	604b      	str	r3, [r1, #4]
 801ad50:	4630      	mov	r0, r6
 801ad52:	f000 f82f 	bl	801adb4 <__malloc_unlock>
 801ad56:	f104 000b 	add.w	r0, r4, #11
 801ad5a:	1d23      	adds	r3, r4, #4
 801ad5c:	f020 0007 	bic.w	r0, r0, #7
 801ad60:	1ac2      	subs	r2, r0, r3
 801ad62:	bf1c      	itt	ne
 801ad64:	1a1b      	subne	r3, r3, r0
 801ad66:	50a3      	strne	r3, [r4, r2]
 801ad68:	e7af      	b.n	801acca <_malloc_r+0x22>
 801ad6a:	6862      	ldr	r2, [r4, #4]
 801ad6c:	42a3      	cmp	r3, r4
 801ad6e:	bf0c      	ite	eq
 801ad70:	f8c8 2000 	streq.w	r2, [r8]
 801ad74:	605a      	strne	r2, [r3, #4]
 801ad76:	e7eb      	b.n	801ad50 <_malloc_r+0xa8>
 801ad78:	4623      	mov	r3, r4
 801ad7a:	6864      	ldr	r4, [r4, #4]
 801ad7c:	e7ae      	b.n	801acdc <_malloc_r+0x34>
 801ad7e:	463c      	mov	r4, r7
 801ad80:	687f      	ldr	r7, [r7, #4]
 801ad82:	e7b6      	b.n	801acf2 <_malloc_r+0x4a>
 801ad84:	461a      	mov	r2, r3
 801ad86:	685b      	ldr	r3, [r3, #4]
 801ad88:	42a3      	cmp	r3, r4
 801ad8a:	d1fb      	bne.n	801ad84 <_malloc_r+0xdc>
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	6053      	str	r3, [r2, #4]
 801ad90:	e7de      	b.n	801ad50 <_malloc_r+0xa8>
 801ad92:	230c      	movs	r3, #12
 801ad94:	6033      	str	r3, [r6, #0]
 801ad96:	4630      	mov	r0, r6
 801ad98:	f000 f80c 	bl	801adb4 <__malloc_unlock>
 801ad9c:	e794      	b.n	801acc8 <_malloc_r+0x20>
 801ad9e:	6005      	str	r5, [r0, #0]
 801ada0:	e7d6      	b.n	801ad50 <_malloc_r+0xa8>
 801ada2:	bf00      	nop
 801ada4:	24000b98 	.word	0x24000b98

0801ada8 <__malloc_lock>:
 801ada8:	4801      	ldr	r0, [pc, #4]	@ (801adb0 <__malloc_lock+0x8>)
 801adaa:	f000 bb38 	b.w	801b41e <__retarget_lock_acquire_recursive>
 801adae:	bf00      	nop
 801adb0:	24000cdc 	.word	0x24000cdc

0801adb4 <__malloc_unlock>:
 801adb4:	4801      	ldr	r0, [pc, #4]	@ (801adbc <__malloc_unlock+0x8>)
 801adb6:	f000 bb33 	b.w	801b420 <__retarget_lock_release_recursive>
 801adba:	bf00      	nop
 801adbc:	24000cdc 	.word	0x24000cdc

0801adc0 <realloc>:
 801adc0:	4b02      	ldr	r3, [pc, #8]	@ (801adcc <realloc+0xc>)
 801adc2:	460a      	mov	r2, r1
 801adc4:	4601      	mov	r1, r0
 801adc6:	6818      	ldr	r0, [r3, #0]
 801adc8:	f000 b802 	b.w	801add0 <_realloc_r>
 801adcc:	2400004c 	.word	0x2400004c

0801add0 <_realloc_r>:
 801add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add4:	4680      	mov	r8, r0
 801add6:	4615      	mov	r5, r2
 801add8:	460c      	mov	r4, r1
 801adda:	b921      	cbnz	r1, 801ade6 <_realloc_r+0x16>
 801addc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	4611      	mov	r1, r2
 801ade2:	f7ff bf61 	b.w	801aca8 <_malloc_r>
 801ade6:	b92a      	cbnz	r2, 801adf4 <_realloc_r+0x24>
 801ade8:	f000 fb2a 	bl	801b440 <_free_r>
 801adec:	2400      	movs	r4, #0
 801adee:	4620      	mov	r0, r4
 801adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adf4:	f000 fb6e 	bl	801b4d4 <_malloc_usable_size_r>
 801adf8:	4285      	cmp	r5, r0
 801adfa:	4606      	mov	r6, r0
 801adfc:	d802      	bhi.n	801ae04 <_realloc_r+0x34>
 801adfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ae02:	d8f4      	bhi.n	801adee <_realloc_r+0x1e>
 801ae04:	4629      	mov	r1, r5
 801ae06:	4640      	mov	r0, r8
 801ae08:	f7ff ff4e 	bl	801aca8 <_malloc_r>
 801ae0c:	4607      	mov	r7, r0
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	d0ec      	beq.n	801adec <_realloc_r+0x1c>
 801ae12:	42b5      	cmp	r5, r6
 801ae14:	462a      	mov	r2, r5
 801ae16:	4621      	mov	r1, r4
 801ae18:	bf28      	it	cs
 801ae1a:	4632      	movcs	r2, r6
 801ae1c:	f000 fb01 	bl	801b422 <memcpy>
 801ae20:	4621      	mov	r1, r4
 801ae22:	4640      	mov	r0, r8
 801ae24:	f000 fb0c 	bl	801b440 <_free_r>
 801ae28:	463c      	mov	r4, r7
 801ae2a:	e7e0      	b.n	801adee <_realloc_r+0x1e>

0801ae2c <std>:
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	b510      	push	{r4, lr}
 801ae30:	4604      	mov	r4, r0
 801ae32:	e9c0 3300 	strd	r3, r3, [r0]
 801ae36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae3a:	6083      	str	r3, [r0, #8]
 801ae3c:	8181      	strh	r1, [r0, #12]
 801ae3e:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae40:	81c2      	strh	r2, [r0, #14]
 801ae42:	6183      	str	r3, [r0, #24]
 801ae44:	4619      	mov	r1, r3
 801ae46:	2208      	movs	r2, #8
 801ae48:	305c      	adds	r0, #92	@ 0x5c
 801ae4a:	f000 fa1b 	bl	801b284 <memset>
 801ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae84 <std+0x58>)
 801ae50:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae52:	4b0d      	ldr	r3, [pc, #52]	@ (801ae88 <std+0x5c>)
 801ae54:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae56:	4b0d      	ldr	r3, [pc, #52]	@ (801ae8c <std+0x60>)
 801ae58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ae90 <std+0x64>)
 801ae5c:	6323      	str	r3, [r4, #48]	@ 0x30
 801ae5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae94 <std+0x68>)
 801ae60:	6224      	str	r4, [r4, #32]
 801ae62:	429c      	cmp	r4, r3
 801ae64:	d006      	beq.n	801ae74 <std+0x48>
 801ae66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ae6a:	4294      	cmp	r4, r2
 801ae6c:	d002      	beq.n	801ae74 <std+0x48>
 801ae6e:	33d0      	adds	r3, #208	@ 0xd0
 801ae70:	429c      	cmp	r4, r3
 801ae72:	d105      	bne.n	801ae80 <std+0x54>
 801ae74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ae78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae7c:	f000 bace 	b.w	801b41c <__retarget_lock_init_recursive>
 801ae80:	bd10      	pop	{r4, pc}
 801ae82:	bf00      	nop
 801ae84:	0801b0a1 	.word	0x0801b0a1
 801ae88:	0801b0c3 	.word	0x0801b0c3
 801ae8c:	0801b0fb 	.word	0x0801b0fb
 801ae90:	0801b11f 	.word	0x0801b11f
 801ae94:	24000b9c 	.word	0x24000b9c

0801ae98 <stdio_exit_handler>:
 801ae98:	4a02      	ldr	r2, [pc, #8]	@ (801aea4 <stdio_exit_handler+0xc>)
 801ae9a:	4903      	ldr	r1, [pc, #12]	@ (801aea8 <stdio_exit_handler+0x10>)
 801ae9c:	4803      	ldr	r0, [pc, #12]	@ (801aeac <stdio_exit_handler+0x14>)
 801ae9e:	f000 b869 	b.w	801af74 <_fwalk_sglue>
 801aea2:	bf00      	nop
 801aea4:	24000040 	.word	0x24000040
 801aea8:	0801bb8d 	.word	0x0801bb8d
 801aeac:	24000050 	.word	0x24000050

0801aeb0 <cleanup_stdio>:
 801aeb0:	6841      	ldr	r1, [r0, #4]
 801aeb2:	4b0c      	ldr	r3, [pc, #48]	@ (801aee4 <cleanup_stdio+0x34>)
 801aeb4:	4299      	cmp	r1, r3
 801aeb6:	b510      	push	{r4, lr}
 801aeb8:	4604      	mov	r4, r0
 801aeba:	d001      	beq.n	801aec0 <cleanup_stdio+0x10>
 801aebc:	f000 fe66 	bl	801bb8c <_fflush_r>
 801aec0:	68a1      	ldr	r1, [r4, #8]
 801aec2:	4b09      	ldr	r3, [pc, #36]	@ (801aee8 <cleanup_stdio+0x38>)
 801aec4:	4299      	cmp	r1, r3
 801aec6:	d002      	beq.n	801aece <cleanup_stdio+0x1e>
 801aec8:	4620      	mov	r0, r4
 801aeca:	f000 fe5f 	bl	801bb8c <_fflush_r>
 801aece:	68e1      	ldr	r1, [r4, #12]
 801aed0:	4b06      	ldr	r3, [pc, #24]	@ (801aeec <cleanup_stdio+0x3c>)
 801aed2:	4299      	cmp	r1, r3
 801aed4:	d004      	beq.n	801aee0 <cleanup_stdio+0x30>
 801aed6:	4620      	mov	r0, r4
 801aed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aedc:	f000 be56 	b.w	801bb8c <_fflush_r>
 801aee0:	bd10      	pop	{r4, pc}
 801aee2:	bf00      	nop
 801aee4:	24000b9c 	.word	0x24000b9c
 801aee8:	24000c04 	.word	0x24000c04
 801aeec:	24000c6c 	.word	0x24000c6c

0801aef0 <global_stdio_init.part.0>:
 801aef0:	b510      	push	{r4, lr}
 801aef2:	4b0b      	ldr	r3, [pc, #44]	@ (801af20 <global_stdio_init.part.0+0x30>)
 801aef4:	4c0b      	ldr	r4, [pc, #44]	@ (801af24 <global_stdio_init.part.0+0x34>)
 801aef6:	4a0c      	ldr	r2, [pc, #48]	@ (801af28 <global_stdio_init.part.0+0x38>)
 801aef8:	601a      	str	r2, [r3, #0]
 801aefa:	4620      	mov	r0, r4
 801aefc:	2200      	movs	r2, #0
 801aefe:	2104      	movs	r1, #4
 801af00:	f7ff ff94 	bl	801ae2c <std>
 801af04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801af08:	2201      	movs	r2, #1
 801af0a:	2109      	movs	r1, #9
 801af0c:	f7ff ff8e 	bl	801ae2c <std>
 801af10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af14:	2202      	movs	r2, #2
 801af16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af1a:	2112      	movs	r1, #18
 801af1c:	f7ff bf86 	b.w	801ae2c <std>
 801af20:	24000cd4 	.word	0x24000cd4
 801af24:	24000b9c 	.word	0x24000b9c
 801af28:	0801ae99 	.word	0x0801ae99

0801af2c <__sfp_lock_acquire>:
 801af2c:	4801      	ldr	r0, [pc, #4]	@ (801af34 <__sfp_lock_acquire+0x8>)
 801af2e:	f000 ba76 	b.w	801b41e <__retarget_lock_acquire_recursive>
 801af32:	bf00      	nop
 801af34:	24000cdd 	.word	0x24000cdd

0801af38 <__sfp_lock_release>:
 801af38:	4801      	ldr	r0, [pc, #4]	@ (801af40 <__sfp_lock_release+0x8>)
 801af3a:	f000 ba71 	b.w	801b420 <__retarget_lock_release_recursive>
 801af3e:	bf00      	nop
 801af40:	24000cdd 	.word	0x24000cdd

0801af44 <__sinit>:
 801af44:	b510      	push	{r4, lr}
 801af46:	4604      	mov	r4, r0
 801af48:	f7ff fff0 	bl	801af2c <__sfp_lock_acquire>
 801af4c:	6a23      	ldr	r3, [r4, #32]
 801af4e:	b11b      	cbz	r3, 801af58 <__sinit+0x14>
 801af50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af54:	f7ff bff0 	b.w	801af38 <__sfp_lock_release>
 801af58:	4b04      	ldr	r3, [pc, #16]	@ (801af6c <__sinit+0x28>)
 801af5a:	6223      	str	r3, [r4, #32]
 801af5c:	4b04      	ldr	r3, [pc, #16]	@ (801af70 <__sinit+0x2c>)
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d1f5      	bne.n	801af50 <__sinit+0xc>
 801af64:	f7ff ffc4 	bl	801aef0 <global_stdio_init.part.0>
 801af68:	e7f2      	b.n	801af50 <__sinit+0xc>
 801af6a:	bf00      	nop
 801af6c:	0801aeb1 	.word	0x0801aeb1
 801af70:	24000cd4 	.word	0x24000cd4

0801af74 <_fwalk_sglue>:
 801af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af78:	4607      	mov	r7, r0
 801af7a:	4688      	mov	r8, r1
 801af7c:	4614      	mov	r4, r2
 801af7e:	2600      	movs	r6, #0
 801af80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af84:	f1b9 0901 	subs.w	r9, r9, #1
 801af88:	d505      	bpl.n	801af96 <_fwalk_sglue+0x22>
 801af8a:	6824      	ldr	r4, [r4, #0]
 801af8c:	2c00      	cmp	r4, #0
 801af8e:	d1f7      	bne.n	801af80 <_fwalk_sglue+0xc>
 801af90:	4630      	mov	r0, r6
 801af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af96:	89ab      	ldrh	r3, [r5, #12]
 801af98:	2b01      	cmp	r3, #1
 801af9a:	d907      	bls.n	801afac <_fwalk_sglue+0x38>
 801af9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801afa0:	3301      	adds	r3, #1
 801afa2:	d003      	beq.n	801afac <_fwalk_sglue+0x38>
 801afa4:	4629      	mov	r1, r5
 801afa6:	4638      	mov	r0, r7
 801afa8:	47c0      	blx	r8
 801afaa:	4306      	orrs	r6, r0
 801afac:	3568      	adds	r5, #104	@ 0x68
 801afae:	e7e9      	b.n	801af84 <_fwalk_sglue+0x10>

0801afb0 <iprintf>:
 801afb0:	b40f      	push	{r0, r1, r2, r3}
 801afb2:	b507      	push	{r0, r1, r2, lr}
 801afb4:	4906      	ldr	r1, [pc, #24]	@ (801afd0 <iprintf+0x20>)
 801afb6:	ab04      	add	r3, sp, #16
 801afb8:	6808      	ldr	r0, [r1, #0]
 801afba:	f853 2b04 	ldr.w	r2, [r3], #4
 801afbe:	6881      	ldr	r1, [r0, #8]
 801afc0:	9301      	str	r3, [sp, #4]
 801afc2:	f000 fab9 	bl	801b538 <_vfiprintf_r>
 801afc6:	b003      	add	sp, #12
 801afc8:	f85d eb04 	ldr.w	lr, [sp], #4
 801afcc:	b004      	add	sp, #16
 801afce:	4770      	bx	lr
 801afd0:	2400004c 	.word	0x2400004c

0801afd4 <putchar>:
 801afd4:	4b02      	ldr	r3, [pc, #8]	@ (801afe0 <putchar+0xc>)
 801afd6:	4601      	mov	r1, r0
 801afd8:	6818      	ldr	r0, [r3, #0]
 801afda:	6882      	ldr	r2, [r0, #8]
 801afdc:	f000 be60 	b.w	801bca0 <_putc_r>
 801afe0:	2400004c 	.word	0x2400004c

0801afe4 <_puts_r>:
 801afe4:	6a03      	ldr	r3, [r0, #32]
 801afe6:	b570      	push	{r4, r5, r6, lr}
 801afe8:	6884      	ldr	r4, [r0, #8]
 801afea:	4605      	mov	r5, r0
 801afec:	460e      	mov	r6, r1
 801afee:	b90b      	cbnz	r3, 801aff4 <_puts_r+0x10>
 801aff0:	f7ff ffa8 	bl	801af44 <__sinit>
 801aff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aff6:	07db      	lsls	r3, r3, #31
 801aff8:	d405      	bmi.n	801b006 <_puts_r+0x22>
 801affa:	89a3      	ldrh	r3, [r4, #12]
 801affc:	0598      	lsls	r0, r3, #22
 801affe:	d402      	bmi.n	801b006 <_puts_r+0x22>
 801b000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b002:	f000 fa0c 	bl	801b41e <__retarget_lock_acquire_recursive>
 801b006:	89a3      	ldrh	r3, [r4, #12]
 801b008:	0719      	lsls	r1, r3, #28
 801b00a:	d502      	bpl.n	801b012 <_puts_r+0x2e>
 801b00c:	6923      	ldr	r3, [r4, #16]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d135      	bne.n	801b07e <_puts_r+0x9a>
 801b012:	4621      	mov	r1, r4
 801b014:	4628      	mov	r0, r5
 801b016:	f000 f8c5 	bl	801b1a4 <__swsetup_r>
 801b01a:	b380      	cbz	r0, 801b07e <_puts_r+0x9a>
 801b01c:	f04f 35ff 	mov.w	r5, #4294967295
 801b020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b022:	07da      	lsls	r2, r3, #31
 801b024:	d405      	bmi.n	801b032 <_puts_r+0x4e>
 801b026:	89a3      	ldrh	r3, [r4, #12]
 801b028:	059b      	lsls	r3, r3, #22
 801b02a:	d402      	bmi.n	801b032 <_puts_r+0x4e>
 801b02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b02e:	f000 f9f7 	bl	801b420 <__retarget_lock_release_recursive>
 801b032:	4628      	mov	r0, r5
 801b034:	bd70      	pop	{r4, r5, r6, pc}
 801b036:	2b00      	cmp	r3, #0
 801b038:	da04      	bge.n	801b044 <_puts_r+0x60>
 801b03a:	69a2      	ldr	r2, [r4, #24]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	dc17      	bgt.n	801b070 <_puts_r+0x8c>
 801b040:	290a      	cmp	r1, #10
 801b042:	d015      	beq.n	801b070 <_puts_r+0x8c>
 801b044:	6823      	ldr	r3, [r4, #0]
 801b046:	1c5a      	adds	r2, r3, #1
 801b048:	6022      	str	r2, [r4, #0]
 801b04a:	7019      	strb	r1, [r3, #0]
 801b04c:	68a3      	ldr	r3, [r4, #8]
 801b04e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b052:	3b01      	subs	r3, #1
 801b054:	60a3      	str	r3, [r4, #8]
 801b056:	2900      	cmp	r1, #0
 801b058:	d1ed      	bne.n	801b036 <_puts_r+0x52>
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	da11      	bge.n	801b082 <_puts_r+0x9e>
 801b05e:	4622      	mov	r2, r4
 801b060:	210a      	movs	r1, #10
 801b062:	4628      	mov	r0, r5
 801b064:	f000 f85f 	bl	801b126 <__swbuf_r>
 801b068:	3001      	adds	r0, #1
 801b06a:	d0d7      	beq.n	801b01c <_puts_r+0x38>
 801b06c:	250a      	movs	r5, #10
 801b06e:	e7d7      	b.n	801b020 <_puts_r+0x3c>
 801b070:	4622      	mov	r2, r4
 801b072:	4628      	mov	r0, r5
 801b074:	f000 f857 	bl	801b126 <__swbuf_r>
 801b078:	3001      	adds	r0, #1
 801b07a:	d1e7      	bne.n	801b04c <_puts_r+0x68>
 801b07c:	e7ce      	b.n	801b01c <_puts_r+0x38>
 801b07e:	3e01      	subs	r6, #1
 801b080:	e7e4      	b.n	801b04c <_puts_r+0x68>
 801b082:	6823      	ldr	r3, [r4, #0]
 801b084:	1c5a      	adds	r2, r3, #1
 801b086:	6022      	str	r2, [r4, #0]
 801b088:	220a      	movs	r2, #10
 801b08a:	701a      	strb	r2, [r3, #0]
 801b08c:	e7ee      	b.n	801b06c <_puts_r+0x88>
	...

0801b090 <puts>:
 801b090:	4b02      	ldr	r3, [pc, #8]	@ (801b09c <puts+0xc>)
 801b092:	4601      	mov	r1, r0
 801b094:	6818      	ldr	r0, [r3, #0]
 801b096:	f7ff bfa5 	b.w	801afe4 <_puts_r>
 801b09a:	bf00      	nop
 801b09c:	2400004c 	.word	0x2400004c

0801b0a0 <__sread>:
 801b0a0:	b510      	push	{r4, lr}
 801b0a2:	460c      	mov	r4, r1
 801b0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0a8:	f000 f946 	bl	801b338 <_read_r>
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	bfab      	itete	ge
 801b0b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b0b2:	89a3      	ldrhlt	r3, [r4, #12]
 801b0b4:	181b      	addge	r3, r3, r0
 801b0b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b0ba:	bfac      	ite	ge
 801b0bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b0be:	81a3      	strhlt	r3, [r4, #12]
 801b0c0:	bd10      	pop	{r4, pc}

0801b0c2 <__swrite>:
 801b0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0c6:	461f      	mov	r7, r3
 801b0c8:	898b      	ldrh	r3, [r1, #12]
 801b0ca:	05db      	lsls	r3, r3, #23
 801b0cc:	4605      	mov	r5, r0
 801b0ce:	460c      	mov	r4, r1
 801b0d0:	4616      	mov	r6, r2
 801b0d2:	d505      	bpl.n	801b0e0 <__swrite+0x1e>
 801b0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0d8:	2302      	movs	r3, #2
 801b0da:	2200      	movs	r2, #0
 801b0dc:	f000 f91a 	bl	801b314 <_lseek_r>
 801b0e0:	89a3      	ldrh	r3, [r4, #12]
 801b0e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b0ea:	81a3      	strh	r3, [r4, #12]
 801b0ec:	4632      	mov	r2, r6
 801b0ee:	463b      	mov	r3, r7
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0f6:	f000 b955 	b.w	801b3a4 <_write_r>

0801b0fa <__sseek>:
 801b0fa:	b510      	push	{r4, lr}
 801b0fc:	460c      	mov	r4, r1
 801b0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b102:	f000 f907 	bl	801b314 <_lseek_r>
 801b106:	1c43      	adds	r3, r0, #1
 801b108:	89a3      	ldrh	r3, [r4, #12]
 801b10a:	bf15      	itete	ne
 801b10c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b10e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b112:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b116:	81a3      	strheq	r3, [r4, #12]
 801b118:	bf18      	it	ne
 801b11a:	81a3      	strhne	r3, [r4, #12]
 801b11c:	bd10      	pop	{r4, pc}

0801b11e <__sclose>:
 801b11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b122:	f000 b8e7 	b.w	801b2f4 <_close_r>

0801b126 <__swbuf_r>:
 801b126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b128:	460e      	mov	r6, r1
 801b12a:	4614      	mov	r4, r2
 801b12c:	4605      	mov	r5, r0
 801b12e:	b118      	cbz	r0, 801b138 <__swbuf_r+0x12>
 801b130:	6a03      	ldr	r3, [r0, #32]
 801b132:	b90b      	cbnz	r3, 801b138 <__swbuf_r+0x12>
 801b134:	f7ff ff06 	bl	801af44 <__sinit>
 801b138:	69a3      	ldr	r3, [r4, #24]
 801b13a:	60a3      	str	r3, [r4, #8]
 801b13c:	89a3      	ldrh	r3, [r4, #12]
 801b13e:	071a      	lsls	r2, r3, #28
 801b140:	d501      	bpl.n	801b146 <__swbuf_r+0x20>
 801b142:	6923      	ldr	r3, [r4, #16]
 801b144:	b943      	cbnz	r3, 801b158 <__swbuf_r+0x32>
 801b146:	4621      	mov	r1, r4
 801b148:	4628      	mov	r0, r5
 801b14a:	f000 f82b 	bl	801b1a4 <__swsetup_r>
 801b14e:	b118      	cbz	r0, 801b158 <__swbuf_r+0x32>
 801b150:	f04f 37ff 	mov.w	r7, #4294967295
 801b154:	4638      	mov	r0, r7
 801b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b158:	6823      	ldr	r3, [r4, #0]
 801b15a:	6922      	ldr	r2, [r4, #16]
 801b15c:	1a98      	subs	r0, r3, r2
 801b15e:	6963      	ldr	r3, [r4, #20]
 801b160:	b2f6      	uxtb	r6, r6
 801b162:	4283      	cmp	r3, r0
 801b164:	4637      	mov	r7, r6
 801b166:	dc05      	bgt.n	801b174 <__swbuf_r+0x4e>
 801b168:	4621      	mov	r1, r4
 801b16a:	4628      	mov	r0, r5
 801b16c:	f000 fd0e 	bl	801bb8c <_fflush_r>
 801b170:	2800      	cmp	r0, #0
 801b172:	d1ed      	bne.n	801b150 <__swbuf_r+0x2a>
 801b174:	68a3      	ldr	r3, [r4, #8]
 801b176:	3b01      	subs	r3, #1
 801b178:	60a3      	str	r3, [r4, #8]
 801b17a:	6823      	ldr	r3, [r4, #0]
 801b17c:	1c5a      	adds	r2, r3, #1
 801b17e:	6022      	str	r2, [r4, #0]
 801b180:	701e      	strb	r6, [r3, #0]
 801b182:	6962      	ldr	r2, [r4, #20]
 801b184:	1c43      	adds	r3, r0, #1
 801b186:	429a      	cmp	r2, r3
 801b188:	d004      	beq.n	801b194 <__swbuf_r+0x6e>
 801b18a:	89a3      	ldrh	r3, [r4, #12]
 801b18c:	07db      	lsls	r3, r3, #31
 801b18e:	d5e1      	bpl.n	801b154 <__swbuf_r+0x2e>
 801b190:	2e0a      	cmp	r6, #10
 801b192:	d1df      	bne.n	801b154 <__swbuf_r+0x2e>
 801b194:	4621      	mov	r1, r4
 801b196:	4628      	mov	r0, r5
 801b198:	f000 fcf8 	bl	801bb8c <_fflush_r>
 801b19c:	2800      	cmp	r0, #0
 801b19e:	d0d9      	beq.n	801b154 <__swbuf_r+0x2e>
 801b1a0:	e7d6      	b.n	801b150 <__swbuf_r+0x2a>
	...

0801b1a4 <__swsetup_r>:
 801b1a4:	b538      	push	{r3, r4, r5, lr}
 801b1a6:	4b29      	ldr	r3, [pc, #164]	@ (801b24c <__swsetup_r+0xa8>)
 801b1a8:	4605      	mov	r5, r0
 801b1aa:	6818      	ldr	r0, [r3, #0]
 801b1ac:	460c      	mov	r4, r1
 801b1ae:	b118      	cbz	r0, 801b1b8 <__swsetup_r+0x14>
 801b1b0:	6a03      	ldr	r3, [r0, #32]
 801b1b2:	b90b      	cbnz	r3, 801b1b8 <__swsetup_r+0x14>
 801b1b4:	f7ff fec6 	bl	801af44 <__sinit>
 801b1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1bc:	0719      	lsls	r1, r3, #28
 801b1be:	d422      	bmi.n	801b206 <__swsetup_r+0x62>
 801b1c0:	06da      	lsls	r2, r3, #27
 801b1c2:	d407      	bmi.n	801b1d4 <__swsetup_r+0x30>
 801b1c4:	2209      	movs	r2, #9
 801b1c6:	602a      	str	r2, [r5, #0]
 801b1c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1cc:	81a3      	strh	r3, [r4, #12]
 801b1ce:	f04f 30ff 	mov.w	r0, #4294967295
 801b1d2:	e033      	b.n	801b23c <__swsetup_r+0x98>
 801b1d4:	0758      	lsls	r0, r3, #29
 801b1d6:	d512      	bpl.n	801b1fe <__swsetup_r+0x5a>
 801b1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b1da:	b141      	cbz	r1, 801b1ee <__swsetup_r+0x4a>
 801b1dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b1e0:	4299      	cmp	r1, r3
 801b1e2:	d002      	beq.n	801b1ea <__swsetup_r+0x46>
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	f000 f92b 	bl	801b440 <_free_r>
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	6363      	str	r3, [r4, #52]	@ 0x34
 801b1ee:	89a3      	ldrh	r3, [r4, #12]
 801b1f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b1f4:	81a3      	strh	r3, [r4, #12]
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	6063      	str	r3, [r4, #4]
 801b1fa:	6923      	ldr	r3, [r4, #16]
 801b1fc:	6023      	str	r3, [r4, #0]
 801b1fe:	89a3      	ldrh	r3, [r4, #12]
 801b200:	f043 0308 	orr.w	r3, r3, #8
 801b204:	81a3      	strh	r3, [r4, #12]
 801b206:	6923      	ldr	r3, [r4, #16]
 801b208:	b94b      	cbnz	r3, 801b21e <__swsetup_r+0x7a>
 801b20a:	89a3      	ldrh	r3, [r4, #12]
 801b20c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b214:	d003      	beq.n	801b21e <__swsetup_r+0x7a>
 801b216:	4621      	mov	r1, r4
 801b218:	4628      	mov	r0, r5
 801b21a:	f000 fd05 	bl	801bc28 <__smakebuf_r>
 801b21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b222:	f013 0201 	ands.w	r2, r3, #1
 801b226:	d00a      	beq.n	801b23e <__swsetup_r+0x9a>
 801b228:	2200      	movs	r2, #0
 801b22a:	60a2      	str	r2, [r4, #8]
 801b22c:	6962      	ldr	r2, [r4, #20]
 801b22e:	4252      	negs	r2, r2
 801b230:	61a2      	str	r2, [r4, #24]
 801b232:	6922      	ldr	r2, [r4, #16]
 801b234:	b942      	cbnz	r2, 801b248 <__swsetup_r+0xa4>
 801b236:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b23a:	d1c5      	bne.n	801b1c8 <__swsetup_r+0x24>
 801b23c:	bd38      	pop	{r3, r4, r5, pc}
 801b23e:	0799      	lsls	r1, r3, #30
 801b240:	bf58      	it	pl
 801b242:	6962      	ldrpl	r2, [r4, #20]
 801b244:	60a2      	str	r2, [r4, #8]
 801b246:	e7f4      	b.n	801b232 <__swsetup_r+0x8e>
 801b248:	2000      	movs	r0, #0
 801b24a:	e7f7      	b.n	801b23c <__swsetup_r+0x98>
 801b24c:	2400004c 	.word	0x2400004c

0801b250 <memmove>:
 801b250:	4288      	cmp	r0, r1
 801b252:	b510      	push	{r4, lr}
 801b254:	eb01 0402 	add.w	r4, r1, r2
 801b258:	d902      	bls.n	801b260 <memmove+0x10>
 801b25a:	4284      	cmp	r4, r0
 801b25c:	4623      	mov	r3, r4
 801b25e:	d807      	bhi.n	801b270 <memmove+0x20>
 801b260:	1e43      	subs	r3, r0, #1
 801b262:	42a1      	cmp	r1, r4
 801b264:	d008      	beq.n	801b278 <memmove+0x28>
 801b266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b26a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b26e:	e7f8      	b.n	801b262 <memmove+0x12>
 801b270:	4402      	add	r2, r0
 801b272:	4601      	mov	r1, r0
 801b274:	428a      	cmp	r2, r1
 801b276:	d100      	bne.n	801b27a <memmove+0x2a>
 801b278:	bd10      	pop	{r4, pc}
 801b27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b27e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b282:	e7f7      	b.n	801b274 <memmove+0x24>

0801b284 <memset>:
 801b284:	4402      	add	r2, r0
 801b286:	4603      	mov	r3, r0
 801b288:	4293      	cmp	r3, r2
 801b28a:	d100      	bne.n	801b28e <memset+0xa>
 801b28c:	4770      	bx	lr
 801b28e:	f803 1b01 	strb.w	r1, [r3], #1
 801b292:	e7f9      	b.n	801b288 <memset+0x4>

0801b294 <_raise_r>:
 801b294:	291f      	cmp	r1, #31
 801b296:	b538      	push	{r3, r4, r5, lr}
 801b298:	4605      	mov	r5, r0
 801b29a:	460c      	mov	r4, r1
 801b29c:	d904      	bls.n	801b2a8 <_raise_r+0x14>
 801b29e:	2316      	movs	r3, #22
 801b2a0:	6003      	str	r3, [r0, #0]
 801b2a2:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a6:	bd38      	pop	{r3, r4, r5, pc}
 801b2a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b2aa:	b112      	cbz	r2, 801b2b2 <_raise_r+0x1e>
 801b2ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2b0:	b94b      	cbnz	r3, 801b2c6 <_raise_r+0x32>
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	f000 f864 	bl	801b380 <_getpid_r>
 801b2b8:	4622      	mov	r2, r4
 801b2ba:	4601      	mov	r1, r0
 801b2bc:	4628      	mov	r0, r5
 801b2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2c2:	f000 b84b 	b.w	801b35c <_kill_r>
 801b2c6:	2b01      	cmp	r3, #1
 801b2c8:	d00a      	beq.n	801b2e0 <_raise_r+0x4c>
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	d103      	bne.n	801b2d6 <_raise_r+0x42>
 801b2ce:	2316      	movs	r3, #22
 801b2d0:	6003      	str	r3, [r0, #0]
 801b2d2:	2001      	movs	r0, #1
 801b2d4:	e7e7      	b.n	801b2a6 <_raise_r+0x12>
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b2dc:	4620      	mov	r0, r4
 801b2de:	4798      	blx	r3
 801b2e0:	2000      	movs	r0, #0
 801b2e2:	e7e0      	b.n	801b2a6 <_raise_r+0x12>

0801b2e4 <raise>:
 801b2e4:	4b02      	ldr	r3, [pc, #8]	@ (801b2f0 <raise+0xc>)
 801b2e6:	4601      	mov	r1, r0
 801b2e8:	6818      	ldr	r0, [r3, #0]
 801b2ea:	f7ff bfd3 	b.w	801b294 <_raise_r>
 801b2ee:	bf00      	nop
 801b2f0:	2400004c 	.word	0x2400004c

0801b2f4 <_close_r>:
 801b2f4:	b538      	push	{r3, r4, r5, lr}
 801b2f6:	4d06      	ldr	r5, [pc, #24]	@ (801b310 <_close_r+0x1c>)
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	4604      	mov	r4, r0
 801b2fc:	4608      	mov	r0, r1
 801b2fe:	602b      	str	r3, [r5, #0]
 801b300:	f7ee fa58 	bl	80097b4 <_close>
 801b304:	1c43      	adds	r3, r0, #1
 801b306:	d102      	bne.n	801b30e <_close_r+0x1a>
 801b308:	682b      	ldr	r3, [r5, #0]
 801b30a:	b103      	cbz	r3, 801b30e <_close_r+0x1a>
 801b30c:	6023      	str	r3, [r4, #0]
 801b30e:	bd38      	pop	{r3, r4, r5, pc}
 801b310:	24000cd8 	.word	0x24000cd8

0801b314 <_lseek_r>:
 801b314:	b538      	push	{r3, r4, r5, lr}
 801b316:	4d07      	ldr	r5, [pc, #28]	@ (801b334 <_lseek_r+0x20>)
 801b318:	4604      	mov	r4, r0
 801b31a:	4608      	mov	r0, r1
 801b31c:	4611      	mov	r1, r2
 801b31e:	2200      	movs	r2, #0
 801b320:	602a      	str	r2, [r5, #0]
 801b322:	461a      	mov	r2, r3
 801b324:	f7ee fa6d 	bl	8009802 <_lseek>
 801b328:	1c43      	adds	r3, r0, #1
 801b32a:	d102      	bne.n	801b332 <_lseek_r+0x1e>
 801b32c:	682b      	ldr	r3, [r5, #0]
 801b32e:	b103      	cbz	r3, 801b332 <_lseek_r+0x1e>
 801b330:	6023      	str	r3, [r4, #0]
 801b332:	bd38      	pop	{r3, r4, r5, pc}
 801b334:	24000cd8 	.word	0x24000cd8

0801b338 <_read_r>:
 801b338:	b538      	push	{r3, r4, r5, lr}
 801b33a:	4d07      	ldr	r5, [pc, #28]	@ (801b358 <_read_r+0x20>)
 801b33c:	4604      	mov	r4, r0
 801b33e:	4608      	mov	r0, r1
 801b340:	4611      	mov	r1, r2
 801b342:	2200      	movs	r2, #0
 801b344:	602a      	str	r2, [r5, #0]
 801b346:	461a      	mov	r2, r3
 801b348:	f7ee f9fb 	bl	8009742 <_read>
 801b34c:	1c43      	adds	r3, r0, #1
 801b34e:	d102      	bne.n	801b356 <_read_r+0x1e>
 801b350:	682b      	ldr	r3, [r5, #0]
 801b352:	b103      	cbz	r3, 801b356 <_read_r+0x1e>
 801b354:	6023      	str	r3, [r4, #0]
 801b356:	bd38      	pop	{r3, r4, r5, pc}
 801b358:	24000cd8 	.word	0x24000cd8

0801b35c <_kill_r>:
 801b35c:	b538      	push	{r3, r4, r5, lr}
 801b35e:	4d07      	ldr	r5, [pc, #28]	@ (801b37c <_kill_r+0x20>)
 801b360:	2300      	movs	r3, #0
 801b362:	4604      	mov	r4, r0
 801b364:	4608      	mov	r0, r1
 801b366:	4611      	mov	r1, r2
 801b368:	602b      	str	r3, [r5, #0]
 801b36a:	f7ee f9cf 	bl	800970c <_kill>
 801b36e:	1c43      	adds	r3, r0, #1
 801b370:	d102      	bne.n	801b378 <_kill_r+0x1c>
 801b372:	682b      	ldr	r3, [r5, #0]
 801b374:	b103      	cbz	r3, 801b378 <_kill_r+0x1c>
 801b376:	6023      	str	r3, [r4, #0]
 801b378:	bd38      	pop	{r3, r4, r5, pc}
 801b37a:	bf00      	nop
 801b37c:	24000cd8 	.word	0x24000cd8

0801b380 <_getpid_r>:
 801b380:	f7ee b9bc 	b.w	80096fc <_getpid>

0801b384 <_sbrk_r>:
 801b384:	b538      	push	{r3, r4, r5, lr}
 801b386:	4d06      	ldr	r5, [pc, #24]	@ (801b3a0 <_sbrk_r+0x1c>)
 801b388:	2300      	movs	r3, #0
 801b38a:	4604      	mov	r4, r0
 801b38c:	4608      	mov	r0, r1
 801b38e:	602b      	str	r3, [r5, #0]
 801b390:	f7ee fa44 	bl	800981c <_sbrk>
 801b394:	1c43      	adds	r3, r0, #1
 801b396:	d102      	bne.n	801b39e <_sbrk_r+0x1a>
 801b398:	682b      	ldr	r3, [r5, #0]
 801b39a:	b103      	cbz	r3, 801b39e <_sbrk_r+0x1a>
 801b39c:	6023      	str	r3, [r4, #0]
 801b39e:	bd38      	pop	{r3, r4, r5, pc}
 801b3a0:	24000cd8 	.word	0x24000cd8

0801b3a4 <_write_r>:
 801b3a4:	b538      	push	{r3, r4, r5, lr}
 801b3a6:	4d07      	ldr	r5, [pc, #28]	@ (801b3c4 <_write_r+0x20>)
 801b3a8:	4604      	mov	r4, r0
 801b3aa:	4608      	mov	r0, r1
 801b3ac:	4611      	mov	r1, r2
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	602a      	str	r2, [r5, #0]
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	f7ee f9e2 	bl	800977c <_write>
 801b3b8:	1c43      	adds	r3, r0, #1
 801b3ba:	d102      	bne.n	801b3c2 <_write_r+0x1e>
 801b3bc:	682b      	ldr	r3, [r5, #0]
 801b3be:	b103      	cbz	r3, 801b3c2 <_write_r+0x1e>
 801b3c0:	6023      	str	r3, [r4, #0]
 801b3c2:	bd38      	pop	{r3, r4, r5, pc}
 801b3c4:	24000cd8 	.word	0x24000cd8

0801b3c8 <__errno>:
 801b3c8:	4b01      	ldr	r3, [pc, #4]	@ (801b3d0 <__errno+0x8>)
 801b3ca:	6818      	ldr	r0, [r3, #0]
 801b3cc:	4770      	bx	lr
 801b3ce:	bf00      	nop
 801b3d0:	2400004c 	.word	0x2400004c

0801b3d4 <__libc_init_array>:
 801b3d4:	b570      	push	{r4, r5, r6, lr}
 801b3d6:	4d0d      	ldr	r5, [pc, #52]	@ (801b40c <__libc_init_array+0x38>)
 801b3d8:	4c0d      	ldr	r4, [pc, #52]	@ (801b410 <__libc_init_array+0x3c>)
 801b3da:	1b64      	subs	r4, r4, r5
 801b3dc:	10a4      	asrs	r4, r4, #2
 801b3de:	2600      	movs	r6, #0
 801b3e0:	42a6      	cmp	r6, r4
 801b3e2:	d109      	bne.n	801b3f8 <__libc_init_array+0x24>
 801b3e4:	4d0b      	ldr	r5, [pc, #44]	@ (801b414 <__libc_init_array+0x40>)
 801b3e6:	4c0c      	ldr	r4, [pc, #48]	@ (801b418 <__libc_init_array+0x44>)
 801b3e8:	f000 fcb0 	bl	801bd4c <_init>
 801b3ec:	1b64      	subs	r4, r4, r5
 801b3ee:	10a4      	asrs	r4, r4, #2
 801b3f0:	2600      	movs	r6, #0
 801b3f2:	42a6      	cmp	r6, r4
 801b3f4:	d105      	bne.n	801b402 <__libc_init_array+0x2e>
 801b3f6:	bd70      	pop	{r4, r5, r6, pc}
 801b3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3fc:	4798      	blx	r3
 801b3fe:	3601      	adds	r6, #1
 801b400:	e7ee      	b.n	801b3e0 <__libc_init_array+0xc>
 801b402:	f855 3b04 	ldr.w	r3, [r5], #4
 801b406:	4798      	blx	r3
 801b408:	3601      	adds	r6, #1
 801b40a:	e7f2      	b.n	801b3f2 <__libc_init_array+0x1e>
 801b40c:	0801cd68 	.word	0x0801cd68
 801b410:	0801cd68 	.word	0x0801cd68
 801b414:	0801cd68 	.word	0x0801cd68
 801b418:	0801cd70 	.word	0x0801cd70

0801b41c <__retarget_lock_init_recursive>:
 801b41c:	4770      	bx	lr

0801b41e <__retarget_lock_acquire_recursive>:
 801b41e:	4770      	bx	lr

0801b420 <__retarget_lock_release_recursive>:
 801b420:	4770      	bx	lr

0801b422 <memcpy>:
 801b422:	440a      	add	r2, r1
 801b424:	4291      	cmp	r1, r2
 801b426:	f100 33ff 	add.w	r3, r0, #4294967295
 801b42a:	d100      	bne.n	801b42e <memcpy+0xc>
 801b42c:	4770      	bx	lr
 801b42e:	b510      	push	{r4, lr}
 801b430:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b434:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b438:	4291      	cmp	r1, r2
 801b43a:	d1f9      	bne.n	801b430 <memcpy+0xe>
 801b43c:	bd10      	pop	{r4, pc}
	...

0801b440 <_free_r>:
 801b440:	b538      	push	{r3, r4, r5, lr}
 801b442:	4605      	mov	r5, r0
 801b444:	2900      	cmp	r1, #0
 801b446:	d041      	beq.n	801b4cc <_free_r+0x8c>
 801b448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b44c:	1f0c      	subs	r4, r1, #4
 801b44e:	2b00      	cmp	r3, #0
 801b450:	bfb8      	it	lt
 801b452:	18e4      	addlt	r4, r4, r3
 801b454:	f7ff fca8 	bl	801ada8 <__malloc_lock>
 801b458:	4a1d      	ldr	r2, [pc, #116]	@ (801b4d0 <_free_r+0x90>)
 801b45a:	6813      	ldr	r3, [r2, #0]
 801b45c:	b933      	cbnz	r3, 801b46c <_free_r+0x2c>
 801b45e:	6063      	str	r3, [r4, #4]
 801b460:	6014      	str	r4, [r2, #0]
 801b462:	4628      	mov	r0, r5
 801b464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b468:	f7ff bca4 	b.w	801adb4 <__malloc_unlock>
 801b46c:	42a3      	cmp	r3, r4
 801b46e:	d908      	bls.n	801b482 <_free_r+0x42>
 801b470:	6820      	ldr	r0, [r4, #0]
 801b472:	1821      	adds	r1, r4, r0
 801b474:	428b      	cmp	r3, r1
 801b476:	bf01      	itttt	eq
 801b478:	6819      	ldreq	r1, [r3, #0]
 801b47a:	685b      	ldreq	r3, [r3, #4]
 801b47c:	1809      	addeq	r1, r1, r0
 801b47e:	6021      	streq	r1, [r4, #0]
 801b480:	e7ed      	b.n	801b45e <_free_r+0x1e>
 801b482:	461a      	mov	r2, r3
 801b484:	685b      	ldr	r3, [r3, #4]
 801b486:	b10b      	cbz	r3, 801b48c <_free_r+0x4c>
 801b488:	42a3      	cmp	r3, r4
 801b48a:	d9fa      	bls.n	801b482 <_free_r+0x42>
 801b48c:	6811      	ldr	r1, [r2, #0]
 801b48e:	1850      	adds	r0, r2, r1
 801b490:	42a0      	cmp	r0, r4
 801b492:	d10b      	bne.n	801b4ac <_free_r+0x6c>
 801b494:	6820      	ldr	r0, [r4, #0]
 801b496:	4401      	add	r1, r0
 801b498:	1850      	adds	r0, r2, r1
 801b49a:	4283      	cmp	r3, r0
 801b49c:	6011      	str	r1, [r2, #0]
 801b49e:	d1e0      	bne.n	801b462 <_free_r+0x22>
 801b4a0:	6818      	ldr	r0, [r3, #0]
 801b4a2:	685b      	ldr	r3, [r3, #4]
 801b4a4:	6053      	str	r3, [r2, #4]
 801b4a6:	4408      	add	r0, r1
 801b4a8:	6010      	str	r0, [r2, #0]
 801b4aa:	e7da      	b.n	801b462 <_free_r+0x22>
 801b4ac:	d902      	bls.n	801b4b4 <_free_r+0x74>
 801b4ae:	230c      	movs	r3, #12
 801b4b0:	602b      	str	r3, [r5, #0]
 801b4b2:	e7d6      	b.n	801b462 <_free_r+0x22>
 801b4b4:	6820      	ldr	r0, [r4, #0]
 801b4b6:	1821      	adds	r1, r4, r0
 801b4b8:	428b      	cmp	r3, r1
 801b4ba:	bf04      	itt	eq
 801b4bc:	6819      	ldreq	r1, [r3, #0]
 801b4be:	685b      	ldreq	r3, [r3, #4]
 801b4c0:	6063      	str	r3, [r4, #4]
 801b4c2:	bf04      	itt	eq
 801b4c4:	1809      	addeq	r1, r1, r0
 801b4c6:	6021      	streq	r1, [r4, #0]
 801b4c8:	6054      	str	r4, [r2, #4]
 801b4ca:	e7ca      	b.n	801b462 <_free_r+0x22>
 801b4cc:	bd38      	pop	{r3, r4, r5, pc}
 801b4ce:	bf00      	nop
 801b4d0:	24000b98 	.word	0x24000b98

0801b4d4 <_malloc_usable_size_r>:
 801b4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b4d8:	1f18      	subs	r0, r3, #4
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	bfbc      	itt	lt
 801b4de:	580b      	ldrlt	r3, [r1, r0]
 801b4e0:	18c0      	addlt	r0, r0, r3
 801b4e2:	4770      	bx	lr

0801b4e4 <__sfputc_r>:
 801b4e4:	6893      	ldr	r3, [r2, #8]
 801b4e6:	3b01      	subs	r3, #1
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	b410      	push	{r4}
 801b4ec:	6093      	str	r3, [r2, #8]
 801b4ee:	da08      	bge.n	801b502 <__sfputc_r+0x1e>
 801b4f0:	6994      	ldr	r4, [r2, #24]
 801b4f2:	42a3      	cmp	r3, r4
 801b4f4:	db01      	blt.n	801b4fa <__sfputc_r+0x16>
 801b4f6:	290a      	cmp	r1, #10
 801b4f8:	d103      	bne.n	801b502 <__sfputc_r+0x1e>
 801b4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4fe:	f7ff be12 	b.w	801b126 <__swbuf_r>
 801b502:	6813      	ldr	r3, [r2, #0]
 801b504:	1c58      	adds	r0, r3, #1
 801b506:	6010      	str	r0, [r2, #0]
 801b508:	7019      	strb	r1, [r3, #0]
 801b50a:	4608      	mov	r0, r1
 801b50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b510:	4770      	bx	lr

0801b512 <__sfputs_r>:
 801b512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b514:	4606      	mov	r6, r0
 801b516:	460f      	mov	r7, r1
 801b518:	4614      	mov	r4, r2
 801b51a:	18d5      	adds	r5, r2, r3
 801b51c:	42ac      	cmp	r4, r5
 801b51e:	d101      	bne.n	801b524 <__sfputs_r+0x12>
 801b520:	2000      	movs	r0, #0
 801b522:	e007      	b.n	801b534 <__sfputs_r+0x22>
 801b524:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b528:	463a      	mov	r2, r7
 801b52a:	4630      	mov	r0, r6
 801b52c:	f7ff ffda 	bl	801b4e4 <__sfputc_r>
 801b530:	1c43      	adds	r3, r0, #1
 801b532:	d1f3      	bne.n	801b51c <__sfputs_r+0xa>
 801b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b538 <_vfiprintf_r>:
 801b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b53c:	460d      	mov	r5, r1
 801b53e:	b09d      	sub	sp, #116	@ 0x74
 801b540:	4614      	mov	r4, r2
 801b542:	4698      	mov	r8, r3
 801b544:	4606      	mov	r6, r0
 801b546:	b118      	cbz	r0, 801b550 <_vfiprintf_r+0x18>
 801b548:	6a03      	ldr	r3, [r0, #32]
 801b54a:	b90b      	cbnz	r3, 801b550 <_vfiprintf_r+0x18>
 801b54c:	f7ff fcfa 	bl	801af44 <__sinit>
 801b550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b552:	07d9      	lsls	r1, r3, #31
 801b554:	d405      	bmi.n	801b562 <_vfiprintf_r+0x2a>
 801b556:	89ab      	ldrh	r3, [r5, #12]
 801b558:	059a      	lsls	r2, r3, #22
 801b55a:	d402      	bmi.n	801b562 <_vfiprintf_r+0x2a>
 801b55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b55e:	f7ff ff5e 	bl	801b41e <__retarget_lock_acquire_recursive>
 801b562:	89ab      	ldrh	r3, [r5, #12]
 801b564:	071b      	lsls	r3, r3, #28
 801b566:	d501      	bpl.n	801b56c <_vfiprintf_r+0x34>
 801b568:	692b      	ldr	r3, [r5, #16]
 801b56a:	b99b      	cbnz	r3, 801b594 <_vfiprintf_r+0x5c>
 801b56c:	4629      	mov	r1, r5
 801b56e:	4630      	mov	r0, r6
 801b570:	f7ff fe18 	bl	801b1a4 <__swsetup_r>
 801b574:	b170      	cbz	r0, 801b594 <_vfiprintf_r+0x5c>
 801b576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b578:	07dc      	lsls	r4, r3, #31
 801b57a:	d504      	bpl.n	801b586 <_vfiprintf_r+0x4e>
 801b57c:	f04f 30ff 	mov.w	r0, #4294967295
 801b580:	b01d      	add	sp, #116	@ 0x74
 801b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b586:	89ab      	ldrh	r3, [r5, #12]
 801b588:	0598      	lsls	r0, r3, #22
 801b58a:	d4f7      	bmi.n	801b57c <_vfiprintf_r+0x44>
 801b58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b58e:	f7ff ff47 	bl	801b420 <__retarget_lock_release_recursive>
 801b592:	e7f3      	b.n	801b57c <_vfiprintf_r+0x44>
 801b594:	2300      	movs	r3, #0
 801b596:	9309      	str	r3, [sp, #36]	@ 0x24
 801b598:	2320      	movs	r3, #32
 801b59a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b59e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5a2:	2330      	movs	r3, #48	@ 0x30
 801b5a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b754 <_vfiprintf_r+0x21c>
 801b5a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b5ac:	f04f 0901 	mov.w	r9, #1
 801b5b0:	4623      	mov	r3, r4
 801b5b2:	469a      	mov	sl, r3
 801b5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5b8:	b10a      	cbz	r2, 801b5be <_vfiprintf_r+0x86>
 801b5ba:	2a25      	cmp	r2, #37	@ 0x25
 801b5bc:	d1f9      	bne.n	801b5b2 <_vfiprintf_r+0x7a>
 801b5be:	ebba 0b04 	subs.w	fp, sl, r4
 801b5c2:	d00b      	beq.n	801b5dc <_vfiprintf_r+0xa4>
 801b5c4:	465b      	mov	r3, fp
 801b5c6:	4622      	mov	r2, r4
 801b5c8:	4629      	mov	r1, r5
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	f7ff ffa1 	bl	801b512 <__sfputs_r>
 801b5d0:	3001      	adds	r0, #1
 801b5d2:	f000 80a7 	beq.w	801b724 <_vfiprintf_r+0x1ec>
 801b5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b5d8:	445a      	add	r2, fp
 801b5da:	9209      	str	r2, [sp, #36]	@ 0x24
 801b5dc:	f89a 3000 	ldrb.w	r3, [sl]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	f000 809f 	beq.w	801b724 <_vfiprintf_r+0x1ec>
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 801b5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b5f0:	f10a 0a01 	add.w	sl, sl, #1
 801b5f4:	9304      	str	r3, [sp, #16]
 801b5f6:	9307      	str	r3, [sp, #28]
 801b5f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b5fc:	931a      	str	r3, [sp, #104]	@ 0x68
 801b5fe:	4654      	mov	r4, sl
 801b600:	2205      	movs	r2, #5
 801b602:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b606:	4853      	ldr	r0, [pc, #332]	@ (801b754 <_vfiprintf_r+0x21c>)
 801b608:	f7e4 fe7a 	bl	8000300 <memchr>
 801b60c:	9a04      	ldr	r2, [sp, #16]
 801b60e:	b9d8      	cbnz	r0, 801b648 <_vfiprintf_r+0x110>
 801b610:	06d1      	lsls	r1, r2, #27
 801b612:	bf44      	itt	mi
 801b614:	2320      	movmi	r3, #32
 801b616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b61a:	0713      	lsls	r3, r2, #28
 801b61c:	bf44      	itt	mi
 801b61e:	232b      	movmi	r3, #43	@ 0x2b
 801b620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b624:	f89a 3000 	ldrb.w	r3, [sl]
 801b628:	2b2a      	cmp	r3, #42	@ 0x2a
 801b62a:	d015      	beq.n	801b658 <_vfiprintf_r+0x120>
 801b62c:	9a07      	ldr	r2, [sp, #28]
 801b62e:	4654      	mov	r4, sl
 801b630:	2000      	movs	r0, #0
 801b632:	f04f 0c0a 	mov.w	ip, #10
 801b636:	4621      	mov	r1, r4
 801b638:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b63c:	3b30      	subs	r3, #48	@ 0x30
 801b63e:	2b09      	cmp	r3, #9
 801b640:	d94b      	bls.n	801b6da <_vfiprintf_r+0x1a2>
 801b642:	b1b0      	cbz	r0, 801b672 <_vfiprintf_r+0x13a>
 801b644:	9207      	str	r2, [sp, #28]
 801b646:	e014      	b.n	801b672 <_vfiprintf_r+0x13a>
 801b648:	eba0 0308 	sub.w	r3, r0, r8
 801b64c:	fa09 f303 	lsl.w	r3, r9, r3
 801b650:	4313      	orrs	r3, r2
 801b652:	9304      	str	r3, [sp, #16]
 801b654:	46a2      	mov	sl, r4
 801b656:	e7d2      	b.n	801b5fe <_vfiprintf_r+0xc6>
 801b658:	9b03      	ldr	r3, [sp, #12]
 801b65a:	1d19      	adds	r1, r3, #4
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	9103      	str	r1, [sp, #12]
 801b660:	2b00      	cmp	r3, #0
 801b662:	bfbb      	ittet	lt
 801b664:	425b      	neglt	r3, r3
 801b666:	f042 0202 	orrlt.w	r2, r2, #2
 801b66a:	9307      	strge	r3, [sp, #28]
 801b66c:	9307      	strlt	r3, [sp, #28]
 801b66e:	bfb8      	it	lt
 801b670:	9204      	strlt	r2, [sp, #16]
 801b672:	7823      	ldrb	r3, [r4, #0]
 801b674:	2b2e      	cmp	r3, #46	@ 0x2e
 801b676:	d10a      	bne.n	801b68e <_vfiprintf_r+0x156>
 801b678:	7863      	ldrb	r3, [r4, #1]
 801b67a:	2b2a      	cmp	r3, #42	@ 0x2a
 801b67c:	d132      	bne.n	801b6e4 <_vfiprintf_r+0x1ac>
 801b67e:	9b03      	ldr	r3, [sp, #12]
 801b680:	1d1a      	adds	r2, r3, #4
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	9203      	str	r2, [sp, #12]
 801b686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b68a:	3402      	adds	r4, #2
 801b68c:	9305      	str	r3, [sp, #20]
 801b68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b764 <_vfiprintf_r+0x22c>
 801b692:	7821      	ldrb	r1, [r4, #0]
 801b694:	2203      	movs	r2, #3
 801b696:	4650      	mov	r0, sl
 801b698:	f7e4 fe32 	bl	8000300 <memchr>
 801b69c:	b138      	cbz	r0, 801b6ae <_vfiprintf_r+0x176>
 801b69e:	9b04      	ldr	r3, [sp, #16]
 801b6a0:	eba0 000a 	sub.w	r0, r0, sl
 801b6a4:	2240      	movs	r2, #64	@ 0x40
 801b6a6:	4082      	lsls	r2, r0
 801b6a8:	4313      	orrs	r3, r2
 801b6aa:	3401      	adds	r4, #1
 801b6ac:	9304      	str	r3, [sp, #16]
 801b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6b2:	4829      	ldr	r0, [pc, #164]	@ (801b758 <_vfiprintf_r+0x220>)
 801b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b6b8:	2206      	movs	r2, #6
 801b6ba:	f7e4 fe21 	bl	8000300 <memchr>
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d03f      	beq.n	801b742 <_vfiprintf_r+0x20a>
 801b6c2:	4b26      	ldr	r3, [pc, #152]	@ (801b75c <_vfiprintf_r+0x224>)
 801b6c4:	bb1b      	cbnz	r3, 801b70e <_vfiprintf_r+0x1d6>
 801b6c6:	9b03      	ldr	r3, [sp, #12]
 801b6c8:	3307      	adds	r3, #7
 801b6ca:	f023 0307 	bic.w	r3, r3, #7
 801b6ce:	3308      	adds	r3, #8
 801b6d0:	9303      	str	r3, [sp, #12]
 801b6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6d4:	443b      	add	r3, r7
 801b6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6d8:	e76a      	b.n	801b5b0 <_vfiprintf_r+0x78>
 801b6da:	fb0c 3202 	mla	r2, ip, r2, r3
 801b6de:	460c      	mov	r4, r1
 801b6e0:	2001      	movs	r0, #1
 801b6e2:	e7a8      	b.n	801b636 <_vfiprintf_r+0xfe>
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	3401      	adds	r4, #1
 801b6e8:	9305      	str	r3, [sp, #20]
 801b6ea:	4619      	mov	r1, r3
 801b6ec:	f04f 0c0a 	mov.w	ip, #10
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b6f6:	3a30      	subs	r2, #48	@ 0x30
 801b6f8:	2a09      	cmp	r2, #9
 801b6fa:	d903      	bls.n	801b704 <_vfiprintf_r+0x1cc>
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d0c6      	beq.n	801b68e <_vfiprintf_r+0x156>
 801b700:	9105      	str	r1, [sp, #20]
 801b702:	e7c4      	b.n	801b68e <_vfiprintf_r+0x156>
 801b704:	fb0c 2101 	mla	r1, ip, r1, r2
 801b708:	4604      	mov	r4, r0
 801b70a:	2301      	movs	r3, #1
 801b70c:	e7f0      	b.n	801b6f0 <_vfiprintf_r+0x1b8>
 801b70e:	ab03      	add	r3, sp, #12
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	462a      	mov	r2, r5
 801b714:	4b12      	ldr	r3, [pc, #72]	@ (801b760 <_vfiprintf_r+0x228>)
 801b716:	a904      	add	r1, sp, #16
 801b718:	4630      	mov	r0, r6
 801b71a:	f3af 8000 	nop.w
 801b71e:	4607      	mov	r7, r0
 801b720:	1c78      	adds	r0, r7, #1
 801b722:	d1d6      	bne.n	801b6d2 <_vfiprintf_r+0x19a>
 801b724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b726:	07d9      	lsls	r1, r3, #31
 801b728:	d405      	bmi.n	801b736 <_vfiprintf_r+0x1fe>
 801b72a:	89ab      	ldrh	r3, [r5, #12]
 801b72c:	059a      	lsls	r2, r3, #22
 801b72e:	d402      	bmi.n	801b736 <_vfiprintf_r+0x1fe>
 801b730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b732:	f7ff fe75 	bl	801b420 <__retarget_lock_release_recursive>
 801b736:	89ab      	ldrh	r3, [r5, #12]
 801b738:	065b      	lsls	r3, r3, #25
 801b73a:	f53f af1f 	bmi.w	801b57c <_vfiprintf_r+0x44>
 801b73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b740:	e71e      	b.n	801b580 <_vfiprintf_r+0x48>
 801b742:	ab03      	add	r3, sp, #12
 801b744:	9300      	str	r3, [sp, #0]
 801b746:	462a      	mov	r2, r5
 801b748:	4b05      	ldr	r3, [pc, #20]	@ (801b760 <_vfiprintf_r+0x228>)
 801b74a:	a904      	add	r1, sp, #16
 801b74c:	4630      	mov	r0, r6
 801b74e:	f000 f879 	bl	801b844 <_printf_i>
 801b752:	e7e4      	b.n	801b71e <_vfiprintf_r+0x1e6>
 801b754:	0801cd2d 	.word	0x0801cd2d
 801b758:	0801cd37 	.word	0x0801cd37
 801b75c:	00000000 	.word	0x00000000
 801b760:	0801b513 	.word	0x0801b513
 801b764:	0801cd33 	.word	0x0801cd33

0801b768 <_printf_common>:
 801b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b76c:	4616      	mov	r6, r2
 801b76e:	4698      	mov	r8, r3
 801b770:	688a      	ldr	r2, [r1, #8]
 801b772:	690b      	ldr	r3, [r1, #16]
 801b774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b778:	4293      	cmp	r3, r2
 801b77a:	bfb8      	it	lt
 801b77c:	4613      	movlt	r3, r2
 801b77e:	6033      	str	r3, [r6, #0]
 801b780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b784:	4607      	mov	r7, r0
 801b786:	460c      	mov	r4, r1
 801b788:	b10a      	cbz	r2, 801b78e <_printf_common+0x26>
 801b78a:	3301      	adds	r3, #1
 801b78c:	6033      	str	r3, [r6, #0]
 801b78e:	6823      	ldr	r3, [r4, #0]
 801b790:	0699      	lsls	r1, r3, #26
 801b792:	bf42      	ittt	mi
 801b794:	6833      	ldrmi	r3, [r6, #0]
 801b796:	3302      	addmi	r3, #2
 801b798:	6033      	strmi	r3, [r6, #0]
 801b79a:	6825      	ldr	r5, [r4, #0]
 801b79c:	f015 0506 	ands.w	r5, r5, #6
 801b7a0:	d106      	bne.n	801b7b0 <_printf_common+0x48>
 801b7a2:	f104 0a19 	add.w	sl, r4, #25
 801b7a6:	68e3      	ldr	r3, [r4, #12]
 801b7a8:	6832      	ldr	r2, [r6, #0]
 801b7aa:	1a9b      	subs	r3, r3, r2
 801b7ac:	42ab      	cmp	r3, r5
 801b7ae:	dc26      	bgt.n	801b7fe <_printf_common+0x96>
 801b7b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b7b4:	6822      	ldr	r2, [r4, #0]
 801b7b6:	3b00      	subs	r3, #0
 801b7b8:	bf18      	it	ne
 801b7ba:	2301      	movne	r3, #1
 801b7bc:	0692      	lsls	r2, r2, #26
 801b7be:	d42b      	bmi.n	801b818 <_printf_common+0xb0>
 801b7c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b7c4:	4641      	mov	r1, r8
 801b7c6:	4638      	mov	r0, r7
 801b7c8:	47c8      	blx	r9
 801b7ca:	3001      	adds	r0, #1
 801b7cc:	d01e      	beq.n	801b80c <_printf_common+0xa4>
 801b7ce:	6823      	ldr	r3, [r4, #0]
 801b7d0:	6922      	ldr	r2, [r4, #16]
 801b7d2:	f003 0306 	and.w	r3, r3, #6
 801b7d6:	2b04      	cmp	r3, #4
 801b7d8:	bf02      	ittt	eq
 801b7da:	68e5      	ldreq	r5, [r4, #12]
 801b7dc:	6833      	ldreq	r3, [r6, #0]
 801b7de:	1aed      	subeq	r5, r5, r3
 801b7e0:	68a3      	ldr	r3, [r4, #8]
 801b7e2:	bf0c      	ite	eq
 801b7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b7e8:	2500      	movne	r5, #0
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	bfc4      	itt	gt
 801b7ee:	1a9b      	subgt	r3, r3, r2
 801b7f0:	18ed      	addgt	r5, r5, r3
 801b7f2:	2600      	movs	r6, #0
 801b7f4:	341a      	adds	r4, #26
 801b7f6:	42b5      	cmp	r5, r6
 801b7f8:	d11a      	bne.n	801b830 <_printf_common+0xc8>
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	e008      	b.n	801b810 <_printf_common+0xa8>
 801b7fe:	2301      	movs	r3, #1
 801b800:	4652      	mov	r2, sl
 801b802:	4641      	mov	r1, r8
 801b804:	4638      	mov	r0, r7
 801b806:	47c8      	blx	r9
 801b808:	3001      	adds	r0, #1
 801b80a:	d103      	bne.n	801b814 <_printf_common+0xac>
 801b80c:	f04f 30ff 	mov.w	r0, #4294967295
 801b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b814:	3501      	adds	r5, #1
 801b816:	e7c6      	b.n	801b7a6 <_printf_common+0x3e>
 801b818:	18e1      	adds	r1, r4, r3
 801b81a:	1c5a      	adds	r2, r3, #1
 801b81c:	2030      	movs	r0, #48	@ 0x30
 801b81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b822:	4422      	add	r2, r4
 801b824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b82c:	3302      	adds	r3, #2
 801b82e:	e7c7      	b.n	801b7c0 <_printf_common+0x58>
 801b830:	2301      	movs	r3, #1
 801b832:	4622      	mov	r2, r4
 801b834:	4641      	mov	r1, r8
 801b836:	4638      	mov	r0, r7
 801b838:	47c8      	blx	r9
 801b83a:	3001      	adds	r0, #1
 801b83c:	d0e6      	beq.n	801b80c <_printf_common+0xa4>
 801b83e:	3601      	adds	r6, #1
 801b840:	e7d9      	b.n	801b7f6 <_printf_common+0x8e>
	...

0801b844 <_printf_i>:
 801b844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b848:	7e0f      	ldrb	r7, [r1, #24]
 801b84a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b84c:	2f78      	cmp	r7, #120	@ 0x78
 801b84e:	4691      	mov	r9, r2
 801b850:	4680      	mov	r8, r0
 801b852:	460c      	mov	r4, r1
 801b854:	469a      	mov	sl, r3
 801b856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b85a:	d807      	bhi.n	801b86c <_printf_i+0x28>
 801b85c:	2f62      	cmp	r7, #98	@ 0x62
 801b85e:	d80a      	bhi.n	801b876 <_printf_i+0x32>
 801b860:	2f00      	cmp	r7, #0
 801b862:	f000 80d2 	beq.w	801ba0a <_printf_i+0x1c6>
 801b866:	2f58      	cmp	r7, #88	@ 0x58
 801b868:	f000 80b9 	beq.w	801b9de <_printf_i+0x19a>
 801b86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b874:	e03a      	b.n	801b8ec <_printf_i+0xa8>
 801b876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b87a:	2b15      	cmp	r3, #21
 801b87c:	d8f6      	bhi.n	801b86c <_printf_i+0x28>
 801b87e:	a101      	add	r1, pc, #4	@ (adr r1, 801b884 <_printf_i+0x40>)
 801b880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b884:	0801b8dd 	.word	0x0801b8dd
 801b888:	0801b8f1 	.word	0x0801b8f1
 801b88c:	0801b86d 	.word	0x0801b86d
 801b890:	0801b86d 	.word	0x0801b86d
 801b894:	0801b86d 	.word	0x0801b86d
 801b898:	0801b86d 	.word	0x0801b86d
 801b89c:	0801b8f1 	.word	0x0801b8f1
 801b8a0:	0801b86d 	.word	0x0801b86d
 801b8a4:	0801b86d 	.word	0x0801b86d
 801b8a8:	0801b86d 	.word	0x0801b86d
 801b8ac:	0801b86d 	.word	0x0801b86d
 801b8b0:	0801b9f1 	.word	0x0801b9f1
 801b8b4:	0801b91b 	.word	0x0801b91b
 801b8b8:	0801b9ab 	.word	0x0801b9ab
 801b8bc:	0801b86d 	.word	0x0801b86d
 801b8c0:	0801b86d 	.word	0x0801b86d
 801b8c4:	0801ba13 	.word	0x0801ba13
 801b8c8:	0801b86d 	.word	0x0801b86d
 801b8cc:	0801b91b 	.word	0x0801b91b
 801b8d0:	0801b86d 	.word	0x0801b86d
 801b8d4:	0801b86d 	.word	0x0801b86d
 801b8d8:	0801b9b3 	.word	0x0801b9b3
 801b8dc:	6833      	ldr	r3, [r6, #0]
 801b8de:	1d1a      	adds	r2, r3, #4
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	6032      	str	r2, [r6, #0]
 801b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	e09d      	b.n	801ba2c <_printf_i+0x1e8>
 801b8f0:	6833      	ldr	r3, [r6, #0]
 801b8f2:	6820      	ldr	r0, [r4, #0]
 801b8f4:	1d19      	adds	r1, r3, #4
 801b8f6:	6031      	str	r1, [r6, #0]
 801b8f8:	0606      	lsls	r6, r0, #24
 801b8fa:	d501      	bpl.n	801b900 <_printf_i+0xbc>
 801b8fc:	681d      	ldr	r5, [r3, #0]
 801b8fe:	e003      	b.n	801b908 <_printf_i+0xc4>
 801b900:	0645      	lsls	r5, r0, #25
 801b902:	d5fb      	bpl.n	801b8fc <_printf_i+0xb8>
 801b904:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b908:	2d00      	cmp	r5, #0
 801b90a:	da03      	bge.n	801b914 <_printf_i+0xd0>
 801b90c:	232d      	movs	r3, #45	@ 0x2d
 801b90e:	426d      	negs	r5, r5
 801b910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b914:	4859      	ldr	r0, [pc, #356]	@ (801ba7c <_printf_i+0x238>)
 801b916:	230a      	movs	r3, #10
 801b918:	e011      	b.n	801b93e <_printf_i+0xfa>
 801b91a:	6821      	ldr	r1, [r4, #0]
 801b91c:	6833      	ldr	r3, [r6, #0]
 801b91e:	0608      	lsls	r0, r1, #24
 801b920:	f853 5b04 	ldr.w	r5, [r3], #4
 801b924:	d402      	bmi.n	801b92c <_printf_i+0xe8>
 801b926:	0649      	lsls	r1, r1, #25
 801b928:	bf48      	it	mi
 801b92a:	b2ad      	uxthmi	r5, r5
 801b92c:	2f6f      	cmp	r7, #111	@ 0x6f
 801b92e:	4853      	ldr	r0, [pc, #332]	@ (801ba7c <_printf_i+0x238>)
 801b930:	6033      	str	r3, [r6, #0]
 801b932:	bf14      	ite	ne
 801b934:	230a      	movne	r3, #10
 801b936:	2308      	moveq	r3, #8
 801b938:	2100      	movs	r1, #0
 801b93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b93e:	6866      	ldr	r6, [r4, #4]
 801b940:	60a6      	str	r6, [r4, #8]
 801b942:	2e00      	cmp	r6, #0
 801b944:	bfa2      	ittt	ge
 801b946:	6821      	ldrge	r1, [r4, #0]
 801b948:	f021 0104 	bicge.w	r1, r1, #4
 801b94c:	6021      	strge	r1, [r4, #0]
 801b94e:	b90d      	cbnz	r5, 801b954 <_printf_i+0x110>
 801b950:	2e00      	cmp	r6, #0
 801b952:	d04b      	beq.n	801b9ec <_printf_i+0x1a8>
 801b954:	4616      	mov	r6, r2
 801b956:	fbb5 f1f3 	udiv	r1, r5, r3
 801b95a:	fb03 5711 	mls	r7, r3, r1, r5
 801b95e:	5dc7      	ldrb	r7, [r0, r7]
 801b960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b964:	462f      	mov	r7, r5
 801b966:	42bb      	cmp	r3, r7
 801b968:	460d      	mov	r5, r1
 801b96a:	d9f4      	bls.n	801b956 <_printf_i+0x112>
 801b96c:	2b08      	cmp	r3, #8
 801b96e:	d10b      	bne.n	801b988 <_printf_i+0x144>
 801b970:	6823      	ldr	r3, [r4, #0]
 801b972:	07df      	lsls	r7, r3, #31
 801b974:	d508      	bpl.n	801b988 <_printf_i+0x144>
 801b976:	6923      	ldr	r3, [r4, #16]
 801b978:	6861      	ldr	r1, [r4, #4]
 801b97a:	4299      	cmp	r1, r3
 801b97c:	bfde      	ittt	le
 801b97e:	2330      	movle	r3, #48	@ 0x30
 801b980:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b984:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b988:	1b92      	subs	r2, r2, r6
 801b98a:	6122      	str	r2, [r4, #16]
 801b98c:	f8cd a000 	str.w	sl, [sp]
 801b990:	464b      	mov	r3, r9
 801b992:	aa03      	add	r2, sp, #12
 801b994:	4621      	mov	r1, r4
 801b996:	4640      	mov	r0, r8
 801b998:	f7ff fee6 	bl	801b768 <_printf_common>
 801b99c:	3001      	adds	r0, #1
 801b99e:	d14a      	bne.n	801ba36 <_printf_i+0x1f2>
 801b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b9a4:	b004      	add	sp, #16
 801b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9aa:	6823      	ldr	r3, [r4, #0]
 801b9ac:	f043 0320 	orr.w	r3, r3, #32
 801b9b0:	6023      	str	r3, [r4, #0]
 801b9b2:	4833      	ldr	r0, [pc, #204]	@ (801ba80 <_printf_i+0x23c>)
 801b9b4:	2778      	movs	r7, #120	@ 0x78
 801b9b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b9ba:	6823      	ldr	r3, [r4, #0]
 801b9bc:	6831      	ldr	r1, [r6, #0]
 801b9be:	061f      	lsls	r7, r3, #24
 801b9c0:	f851 5b04 	ldr.w	r5, [r1], #4
 801b9c4:	d402      	bmi.n	801b9cc <_printf_i+0x188>
 801b9c6:	065f      	lsls	r7, r3, #25
 801b9c8:	bf48      	it	mi
 801b9ca:	b2ad      	uxthmi	r5, r5
 801b9cc:	6031      	str	r1, [r6, #0]
 801b9ce:	07d9      	lsls	r1, r3, #31
 801b9d0:	bf44      	itt	mi
 801b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 801b9d6:	6023      	strmi	r3, [r4, #0]
 801b9d8:	b11d      	cbz	r5, 801b9e2 <_printf_i+0x19e>
 801b9da:	2310      	movs	r3, #16
 801b9dc:	e7ac      	b.n	801b938 <_printf_i+0xf4>
 801b9de:	4827      	ldr	r0, [pc, #156]	@ (801ba7c <_printf_i+0x238>)
 801b9e0:	e7e9      	b.n	801b9b6 <_printf_i+0x172>
 801b9e2:	6823      	ldr	r3, [r4, #0]
 801b9e4:	f023 0320 	bic.w	r3, r3, #32
 801b9e8:	6023      	str	r3, [r4, #0]
 801b9ea:	e7f6      	b.n	801b9da <_printf_i+0x196>
 801b9ec:	4616      	mov	r6, r2
 801b9ee:	e7bd      	b.n	801b96c <_printf_i+0x128>
 801b9f0:	6833      	ldr	r3, [r6, #0]
 801b9f2:	6825      	ldr	r5, [r4, #0]
 801b9f4:	6961      	ldr	r1, [r4, #20]
 801b9f6:	1d18      	adds	r0, r3, #4
 801b9f8:	6030      	str	r0, [r6, #0]
 801b9fa:	062e      	lsls	r6, r5, #24
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	d501      	bpl.n	801ba04 <_printf_i+0x1c0>
 801ba00:	6019      	str	r1, [r3, #0]
 801ba02:	e002      	b.n	801ba0a <_printf_i+0x1c6>
 801ba04:	0668      	lsls	r0, r5, #25
 801ba06:	d5fb      	bpl.n	801ba00 <_printf_i+0x1bc>
 801ba08:	8019      	strh	r1, [r3, #0]
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	6123      	str	r3, [r4, #16]
 801ba0e:	4616      	mov	r6, r2
 801ba10:	e7bc      	b.n	801b98c <_printf_i+0x148>
 801ba12:	6833      	ldr	r3, [r6, #0]
 801ba14:	1d1a      	adds	r2, r3, #4
 801ba16:	6032      	str	r2, [r6, #0]
 801ba18:	681e      	ldr	r6, [r3, #0]
 801ba1a:	6862      	ldr	r2, [r4, #4]
 801ba1c:	2100      	movs	r1, #0
 801ba1e:	4630      	mov	r0, r6
 801ba20:	f7e4 fc6e 	bl	8000300 <memchr>
 801ba24:	b108      	cbz	r0, 801ba2a <_printf_i+0x1e6>
 801ba26:	1b80      	subs	r0, r0, r6
 801ba28:	6060      	str	r0, [r4, #4]
 801ba2a:	6863      	ldr	r3, [r4, #4]
 801ba2c:	6123      	str	r3, [r4, #16]
 801ba2e:	2300      	movs	r3, #0
 801ba30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ba34:	e7aa      	b.n	801b98c <_printf_i+0x148>
 801ba36:	6923      	ldr	r3, [r4, #16]
 801ba38:	4632      	mov	r2, r6
 801ba3a:	4649      	mov	r1, r9
 801ba3c:	4640      	mov	r0, r8
 801ba3e:	47d0      	blx	sl
 801ba40:	3001      	adds	r0, #1
 801ba42:	d0ad      	beq.n	801b9a0 <_printf_i+0x15c>
 801ba44:	6823      	ldr	r3, [r4, #0]
 801ba46:	079b      	lsls	r3, r3, #30
 801ba48:	d413      	bmi.n	801ba72 <_printf_i+0x22e>
 801ba4a:	68e0      	ldr	r0, [r4, #12]
 801ba4c:	9b03      	ldr	r3, [sp, #12]
 801ba4e:	4298      	cmp	r0, r3
 801ba50:	bfb8      	it	lt
 801ba52:	4618      	movlt	r0, r3
 801ba54:	e7a6      	b.n	801b9a4 <_printf_i+0x160>
 801ba56:	2301      	movs	r3, #1
 801ba58:	4632      	mov	r2, r6
 801ba5a:	4649      	mov	r1, r9
 801ba5c:	4640      	mov	r0, r8
 801ba5e:	47d0      	blx	sl
 801ba60:	3001      	adds	r0, #1
 801ba62:	d09d      	beq.n	801b9a0 <_printf_i+0x15c>
 801ba64:	3501      	adds	r5, #1
 801ba66:	68e3      	ldr	r3, [r4, #12]
 801ba68:	9903      	ldr	r1, [sp, #12]
 801ba6a:	1a5b      	subs	r3, r3, r1
 801ba6c:	42ab      	cmp	r3, r5
 801ba6e:	dcf2      	bgt.n	801ba56 <_printf_i+0x212>
 801ba70:	e7eb      	b.n	801ba4a <_printf_i+0x206>
 801ba72:	2500      	movs	r5, #0
 801ba74:	f104 0619 	add.w	r6, r4, #25
 801ba78:	e7f5      	b.n	801ba66 <_printf_i+0x222>
 801ba7a:	bf00      	nop
 801ba7c:	0801cd3e 	.word	0x0801cd3e
 801ba80:	0801cd4f 	.word	0x0801cd4f

0801ba84 <__sflush_r>:
 801ba84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba8c:	0716      	lsls	r6, r2, #28
 801ba8e:	4605      	mov	r5, r0
 801ba90:	460c      	mov	r4, r1
 801ba92:	d454      	bmi.n	801bb3e <__sflush_r+0xba>
 801ba94:	684b      	ldr	r3, [r1, #4]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	dc02      	bgt.n	801baa0 <__sflush_r+0x1c>
 801ba9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	dd48      	ble.n	801bb32 <__sflush_r+0xae>
 801baa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801baa2:	2e00      	cmp	r6, #0
 801baa4:	d045      	beq.n	801bb32 <__sflush_r+0xae>
 801baa6:	2300      	movs	r3, #0
 801baa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801baac:	682f      	ldr	r7, [r5, #0]
 801baae:	6a21      	ldr	r1, [r4, #32]
 801bab0:	602b      	str	r3, [r5, #0]
 801bab2:	d030      	beq.n	801bb16 <__sflush_r+0x92>
 801bab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bab6:	89a3      	ldrh	r3, [r4, #12]
 801bab8:	0759      	lsls	r1, r3, #29
 801baba:	d505      	bpl.n	801bac8 <__sflush_r+0x44>
 801babc:	6863      	ldr	r3, [r4, #4]
 801babe:	1ad2      	subs	r2, r2, r3
 801bac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bac2:	b10b      	cbz	r3, 801bac8 <__sflush_r+0x44>
 801bac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bac6:	1ad2      	subs	r2, r2, r3
 801bac8:	2300      	movs	r3, #0
 801baca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bacc:	6a21      	ldr	r1, [r4, #32]
 801bace:	4628      	mov	r0, r5
 801bad0:	47b0      	blx	r6
 801bad2:	1c43      	adds	r3, r0, #1
 801bad4:	89a3      	ldrh	r3, [r4, #12]
 801bad6:	d106      	bne.n	801bae6 <__sflush_r+0x62>
 801bad8:	6829      	ldr	r1, [r5, #0]
 801bada:	291d      	cmp	r1, #29
 801badc:	d82b      	bhi.n	801bb36 <__sflush_r+0xb2>
 801bade:	4a2a      	ldr	r2, [pc, #168]	@ (801bb88 <__sflush_r+0x104>)
 801bae0:	410a      	asrs	r2, r1
 801bae2:	07d6      	lsls	r6, r2, #31
 801bae4:	d427      	bmi.n	801bb36 <__sflush_r+0xb2>
 801bae6:	2200      	movs	r2, #0
 801bae8:	6062      	str	r2, [r4, #4]
 801baea:	04d9      	lsls	r1, r3, #19
 801baec:	6922      	ldr	r2, [r4, #16]
 801baee:	6022      	str	r2, [r4, #0]
 801baf0:	d504      	bpl.n	801bafc <__sflush_r+0x78>
 801baf2:	1c42      	adds	r2, r0, #1
 801baf4:	d101      	bne.n	801bafa <__sflush_r+0x76>
 801baf6:	682b      	ldr	r3, [r5, #0]
 801baf8:	b903      	cbnz	r3, 801bafc <__sflush_r+0x78>
 801bafa:	6560      	str	r0, [r4, #84]	@ 0x54
 801bafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bafe:	602f      	str	r7, [r5, #0]
 801bb00:	b1b9      	cbz	r1, 801bb32 <__sflush_r+0xae>
 801bb02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bb06:	4299      	cmp	r1, r3
 801bb08:	d002      	beq.n	801bb10 <__sflush_r+0x8c>
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	f7ff fc98 	bl	801b440 <_free_r>
 801bb10:	2300      	movs	r3, #0
 801bb12:	6363      	str	r3, [r4, #52]	@ 0x34
 801bb14:	e00d      	b.n	801bb32 <__sflush_r+0xae>
 801bb16:	2301      	movs	r3, #1
 801bb18:	4628      	mov	r0, r5
 801bb1a:	47b0      	blx	r6
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	1c50      	adds	r0, r2, #1
 801bb20:	d1c9      	bne.n	801bab6 <__sflush_r+0x32>
 801bb22:	682b      	ldr	r3, [r5, #0]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d0c6      	beq.n	801bab6 <__sflush_r+0x32>
 801bb28:	2b1d      	cmp	r3, #29
 801bb2a:	d001      	beq.n	801bb30 <__sflush_r+0xac>
 801bb2c:	2b16      	cmp	r3, #22
 801bb2e:	d11e      	bne.n	801bb6e <__sflush_r+0xea>
 801bb30:	602f      	str	r7, [r5, #0]
 801bb32:	2000      	movs	r0, #0
 801bb34:	e022      	b.n	801bb7c <__sflush_r+0xf8>
 801bb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb3a:	b21b      	sxth	r3, r3
 801bb3c:	e01b      	b.n	801bb76 <__sflush_r+0xf2>
 801bb3e:	690f      	ldr	r7, [r1, #16]
 801bb40:	2f00      	cmp	r7, #0
 801bb42:	d0f6      	beq.n	801bb32 <__sflush_r+0xae>
 801bb44:	0793      	lsls	r3, r2, #30
 801bb46:	680e      	ldr	r6, [r1, #0]
 801bb48:	bf08      	it	eq
 801bb4a:	694b      	ldreq	r3, [r1, #20]
 801bb4c:	600f      	str	r7, [r1, #0]
 801bb4e:	bf18      	it	ne
 801bb50:	2300      	movne	r3, #0
 801bb52:	eba6 0807 	sub.w	r8, r6, r7
 801bb56:	608b      	str	r3, [r1, #8]
 801bb58:	f1b8 0f00 	cmp.w	r8, #0
 801bb5c:	dde9      	ble.n	801bb32 <__sflush_r+0xae>
 801bb5e:	6a21      	ldr	r1, [r4, #32]
 801bb60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bb62:	4643      	mov	r3, r8
 801bb64:	463a      	mov	r2, r7
 801bb66:	4628      	mov	r0, r5
 801bb68:	47b0      	blx	r6
 801bb6a:	2800      	cmp	r0, #0
 801bb6c:	dc08      	bgt.n	801bb80 <__sflush_r+0xfc>
 801bb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb76:	81a3      	strh	r3, [r4, #12]
 801bb78:	f04f 30ff 	mov.w	r0, #4294967295
 801bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb80:	4407      	add	r7, r0
 801bb82:	eba8 0800 	sub.w	r8, r8, r0
 801bb86:	e7e7      	b.n	801bb58 <__sflush_r+0xd4>
 801bb88:	dfbffffe 	.word	0xdfbffffe

0801bb8c <_fflush_r>:
 801bb8c:	b538      	push	{r3, r4, r5, lr}
 801bb8e:	690b      	ldr	r3, [r1, #16]
 801bb90:	4605      	mov	r5, r0
 801bb92:	460c      	mov	r4, r1
 801bb94:	b913      	cbnz	r3, 801bb9c <_fflush_r+0x10>
 801bb96:	2500      	movs	r5, #0
 801bb98:	4628      	mov	r0, r5
 801bb9a:	bd38      	pop	{r3, r4, r5, pc}
 801bb9c:	b118      	cbz	r0, 801bba6 <_fflush_r+0x1a>
 801bb9e:	6a03      	ldr	r3, [r0, #32]
 801bba0:	b90b      	cbnz	r3, 801bba6 <_fflush_r+0x1a>
 801bba2:	f7ff f9cf 	bl	801af44 <__sinit>
 801bba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d0f3      	beq.n	801bb96 <_fflush_r+0xa>
 801bbae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bbb0:	07d0      	lsls	r0, r2, #31
 801bbb2:	d404      	bmi.n	801bbbe <_fflush_r+0x32>
 801bbb4:	0599      	lsls	r1, r3, #22
 801bbb6:	d402      	bmi.n	801bbbe <_fflush_r+0x32>
 801bbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bbba:	f7ff fc30 	bl	801b41e <__retarget_lock_acquire_recursive>
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	4621      	mov	r1, r4
 801bbc2:	f7ff ff5f 	bl	801ba84 <__sflush_r>
 801bbc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bbc8:	07da      	lsls	r2, r3, #31
 801bbca:	4605      	mov	r5, r0
 801bbcc:	d4e4      	bmi.n	801bb98 <_fflush_r+0xc>
 801bbce:	89a3      	ldrh	r3, [r4, #12]
 801bbd0:	059b      	lsls	r3, r3, #22
 801bbd2:	d4e1      	bmi.n	801bb98 <_fflush_r+0xc>
 801bbd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bbd6:	f7ff fc23 	bl	801b420 <__retarget_lock_release_recursive>
 801bbda:	e7dd      	b.n	801bb98 <_fflush_r+0xc>

0801bbdc <__swhatbuf_r>:
 801bbdc:	b570      	push	{r4, r5, r6, lr}
 801bbde:	460c      	mov	r4, r1
 801bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbe4:	2900      	cmp	r1, #0
 801bbe6:	b096      	sub	sp, #88	@ 0x58
 801bbe8:	4615      	mov	r5, r2
 801bbea:	461e      	mov	r6, r3
 801bbec:	da0d      	bge.n	801bc0a <__swhatbuf_r+0x2e>
 801bbee:	89a3      	ldrh	r3, [r4, #12]
 801bbf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bbf4:	f04f 0100 	mov.w	r1, #0
 801bbf8:	bf14      	ite	ne
 801bbfa:	2340      	movne	r3, #64	@ 0x40
 801bbfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bc00:	2000      	movs	r0, #0
 801bc02:	6031      	str	r1, [r6, #0]
 801bc04:	602b      	str	r3, [r5, #0]
 801bc06:	b016      	add	sp, #88	@ 0x58
 801bc08:	bd70      	pop	{r4, r5, r6, pc}
 801bc0a:	466a      	mov	r2, sp
 801bc0c:	f000 f87c 	bl	801bd08 <_fstat_r>
 801bc10:	2800      	cmp	r0, #0
 801bc12:	dbec      	blt.n	801bbee <__swhatbuf_r+0x12>
 801bc14:	9901      	ldr	r1, [sp, #4]
 801bc16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bc1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bc1e:	4259      	negs	r1, r3
 801bc20:	4159      	adcs	r1, r3
 801bc22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801bc26:	e7eb      	b.n	801bc00 <__swhatbuf_r+0x24>

0801bc28 <__smakebuf_r>:
 801bc28:	898b      	ldrh	r3, [r1, #12]
 801bc2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc2c:	079d      	lsls	r5, r3, #30
 801bc2e:	4606      	mov	r6, r0
 801bc30:	460c      	mov	r4, r1
 801bc32:	d507      	bpl.n	801bc44 <__smakebuf_r+0x1c>
 801bc34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bc38:	6023      	str	r3, [r4, #0]
 801bc3a:	6123      	str	r3, [r4, #16]
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	6163      	str	r3, [r4, #20]
 801bc40:	b003      	add	sp, #12
 801bc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc44:	ab01      	add	r3, sp, #4
 801bc46:	466a      	mov	r2, sp
 801bc48:	f7ff ffc8 	bl	801bbdc <__swhatbuf_r>
 801bc4c:	9f00      	ldr	r7, [sp, #0]
 801bc4e:	4605      	mov	r5, r0
 801bc50:	4639      	mov	r1, r7
 801bc52:	4630      	mov	r0, r6
 801bc54:	f7ff f828 	bl	801aca8 <_malloc_r>
 801bc58:	b948      	cbnz	r0, 801bc6e <__smakebuf_r+0x46>
 801bc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc5e:	059a      	lsls	r2, r3, #22
 801bc60:	d4ee      	bmi.n	801bc40 <__smakebuf_r+0x18>
 801bc62:	f023 0303 	bic.w	r3, r3, #3
 801bc66:	f043 0302 	orr.w	r3, r3, #2
 801bc6a:	81a3      	strh	r3, [r4, #12]
 801bc6c:	e7e2      	b.n	801bc34 <__smakebuf_r+0xc>
 801bc6e:	89a3      	ldrh	r3, [r4, #12]
 801bc70:	6020      	str	r0, [r4, #0]
 801bc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bc76:	81a3      	strh	r3, [r4, #12]
 801bc78:	9b01      	ldr	r3, [sp, #4]
 801bc7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801bc7e:	b15b      	cbz	r3, 801bc98 <__smakebuf_r+0x70>
 801bc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc84:	4630      	mov	r0, r6
 801bc86:	f000 f851 	bl	801bd2c <_isatty_r>
 801bc8a:	b128      	cbz	r0, 801bc98 <__smakebuf_r+0x70>
 801bc8c:	89a3      	ldrh	r3, [r4, #12]
 801bc8e:	f023 0303 	bic.w	r3, r3, #3
 801bc92:	f043 0301 	orr.w	r3, r3, #1
 801bc96:	81a3      	strh	r3, [r4, #12]
 801bc98:	89a3      	ldrh	r3, [r4, #12]
 801bc9a:	431d      	orrs	r5, r3
 801bc9c:	81a5      	strh	r5, [r4, #12]
 801bc9e:	e7cf      	b.n	801bc40 <__smakebuf_r+0x18>

0801bca0 <_putc_r>:
 801bca0:	b570      	push	{r4, r5, r6, lr}
 801bca2:	460d      	mov	r5, r1
 801bca4:	4614      	mov	r4, r2
 801bca6:	4606      	mov	r6, r0
 801bca8:	b118      	cbz	r0, 801bcb2 <_putc_r+0x12>
 801bcaa:	6a03      	ldr	r3, [r0, #32]
 801bcac:	b90b      	cbnz	r3, 801bcb2 <_putc_r+0x12>
 801bcae:	f7ff f949 	bl	801af44 <__sinit>
 801bcb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bcb4:	07d8      	lsls	r0, r3, #31
 801bcb6:	d405      	bmi.n	801bcc4 <_putc_r+0x24>
 801bcb8:	89a3      	ldrh	r3, [r4, #12]
 801bcba:	0599      	lsls	r1, r3, #22
 801bcbc:	d402      	bmi.n	801bcc4 <_putc_r+0x24>
 801bcbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bcc0:	f7ff fbad 	bl	801b41e <__retarget_lock_acquire_recursive>
 801bcc4:	68a3      	ldr	r3, [r4, #8]
 801bcc6:	3b01      	subs	r3, #1
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	60a3      	str	r3, [r4, #8]
 801bccc:	da05      	bge.n	801bcda <_putc_r+0x3a>
 801bcce:	69a2      	ldr	r2, [r4, #24]
 801bcd0:	4293      	cmp	r3, r2
 801bcd2:	db12      	blt.n	801bcfa <_putc_r+0x5a>
 801bcd4:	b2eb      	uxtb	r3, r5
 801bcd6:	2b0a      	cmp	r3, #10
 801bcd8:	d00f      	beq.n	801bcfa <_putc_r+0x5a>
 801bcda:	6823      	ldr	r3, [r4, #0]
 801bcdc:	1c5a      	adds	r2, r3, #1
 801bcde:	6022      	str	r2, [r4, #0]
 801bce0:	701d      	strb	r5, [r3, #0]
 801bce2:	b2ed      	uxtb	r5, r5
 801bce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bce6:	07da      	lsls	r2, r3, #31
 801bce8:	d405      	bmi.n	801bcf6 <_putc_r+0x56>
 801bcea:	89a3      	ldrh	r3, [r4, #12]
 801bcec:	059b      	lsls	r3, r3, #22
 801bcee:	d402      	bmi.n	801bcf6 <_putc_r+0x56>
 801bcf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bcf2:	f7ff fb95 	bl	801b420 <__retarget_lock_release_recursive>
 801bcf6:	4628      	mov	r0, r5
 801bcf8:	bd70      	pop	{r4, r5, r6, pc}
 801bcfa:	4629      	mov	r1, r5
 801bcfc:	4622      	mov	r2, r4
 801bcfe:	4630      	mov	r0, r6
 801bd00:	f7ff fa11 	bl	801b126 <__swbuf_r>
 801bd04:	4605      	mov	r5, r0
 801bd06:	e7ed      	b.n	801bce4 <_putc_r+0x44>

0801bd08 <_fstat_r>:
 801bd08:	b538      	push	{r3, r4, r5, lr}
 801bd0a:	4d07      	ldr	r5, [pc, #28]	@ (801bd28 <_fstat_r+0x20>)
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	4604      	mov	r4, r0
 801bd10:	4608      	mov	r0, r1
 801bd12:	4611      	mov	r1, r2
 801bd14:	602b      	str	r3, [r5, #0]
 801bd16:	f7ed fd59 	bl	80097cc <_fstat>
 801bd1a:	1c43      	adds	r3, r0, #1
 801bd1c:	d102      	bne.n	801bd24 <_fstat_r+0x1c>
 801bd1e:	682b      	ldr	r3, [r5, #0]
 801bd20:	b103      	cbz	r3, 801bd24 <_fstat_r+0x1c>
 801bd22:	6023      	str	r3, [r4, #0]
 801bd24:	bd38      	pop	{r3, r4, r5, pc}
 801bd26:	bf00      	nop
 801bd28:	24000cd8 	.word	0x24000cd8

0801bd2c <_isatty_r>:
 801bd2c:	b538      	push	{r3, r4, r5, lr}
 801bd2e:	4d06      	ldr	r5, [pc, #24]	@ (801bd48 <_isatty_r+0x1c>)
 801bd30:	2300      	movs	r3, #0
 801bd32:	4604      	mov	r4, r0
 801bd34:	4608      	mov	r0, r1
 801bd36:	602b      	str	r3, [r5, #0]
 801bd38:	f7ed fd58 	bl	80097ec <_isatty>
 801bd3c:	1c43      	adds	r3, r0, #1
 801bd3e:	d102      	bne.n	801bd46 <_isatty_r+0x1a>
 801bd40:	682b      	ldr	r3, [r5, #0]
 801bd42:	b103      	cbz	r3, 801bd46 <_isatty_r+0x1a>
 801bd44:	6023      	str	r3, [r4, #0]
 801bd46:	bd38      	pop	{r3, r4, r5, pc}
 801bd48:	24000cd8 	.word	0x24000cd8

0801bd4c <_init>:
 801bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd4e:	bf00      	nop
 801bd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd52:	bc08      	pop	{r3}
 801bd54:	469e      	mov	lr, r3
 801bd56:	4770      	bx	lr

0801bd58 <_fini>:
 801bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd5a:	bf00      	nop
 801bd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd5e:	bc08      	pop	{r3}
 801bd60:	469e      	mov	lr, r3
 801bd62:	4770      	bx	lr
