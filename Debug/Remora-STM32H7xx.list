
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08011a4c  08011a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f74  08011f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011f7c  08011f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011f84  08011f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08011f8c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ccc  240000c0  08012048  000130c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000d8c  08012048  00013d8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000304a7  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005101  00000000  00000000  00043591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00048698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012f9  00000000  00000000  00049f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f6b2  00000000  00000000  0004b221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025cfc  00000000  00000000  0008a8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177ec7  00000000  00000000  000b05cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228496  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008634  00000000  00000000  002284dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00230b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011a34 	.word	0x08011a34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	08011a34 	.word	0x08011a34

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <_ZN9InterruptC1Ev+0x1c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08011de0 	.word	0x08011de0

08000a08 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a16:	f010 f947 	bl	8010ca8 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a1a:	4905      	ldr	r1, [pc, #20]	@ (8000a30 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08011a4c 	.word	0x08011a4c
 8000a30:	240000dc 	.word	0x240000dc

08000a34 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4610      	mov	r0, r2
 8000a46:	4798      	blx	r3
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240000dc 	.word	0x240000dc

08000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000a58:	687b      	ldr	r3, [r7, #4]
  }
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	111b      	asrs	r3, r3, #4
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	815a      	strh	r2, [r3, #10]
  }
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f817 	bl	8001ad8 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
  }
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  }
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	f023 0303 	bic.w	r3, r3, #3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	e000      	b.n	8000b26 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000b24:	2300      	movs	r3, #0
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	e000      	b.n	8000b3a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    return _begin;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
  }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 ffbf 	bl	8001af0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000b72:	4603      	mov	r3, r0
  }
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f000 f864 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000bac:	bf00      	nop
  }
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	1acb      	subs	r3, r1, r3
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f84a 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
  }
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	bf94      	ite	ls
 8000c26:	2301      	movls	r3, #1
 8000c28:	2300      	movhi	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
  }
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe1 	bl	8000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e008      	b.n	8000c6c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
    return _right;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
  }
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000c94:	2105      	movs	r1, #5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f886 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bdb0      	pop	{r4, r5, r7, pc}

08000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f871 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000ce4:	2106      	movs	r1, #6
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f85e 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f84b 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f83a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000d46:	2104      	movs	r1, #4
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f82d 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fec1 	bl	8001ad8 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
  }
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f81a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8d5 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d7c:	687b      	ldr	r3, [r7, #4]
  }
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000d8e:	2120      	movs	r1, #32
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f809 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8c4 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d9e:	687b      	ldr	r3, [r7, #4]
  }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a1a      	ldrb	r2, [r3, #8]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	721a      	strb	r2, [r3, #8]
  }
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fef3 	bl	8000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3310      	adds	r3, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff8c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return _pool;
 8000e1c:	687b      	ldr	r3, [r7, #4]
  }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    return _data;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3310      	adds	r3, #16
  }
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000e42:	b084      	sub	sp, #16
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	f107 001c 	add.w	r0, r7, #28
 8000e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	461c      	mov	r4, r3
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3310      	adds	r3, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e78:	b004      	add	sp, #16
 8000e7a:	4770      	bx	lr

08000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00f fd8e 	bl	80109a8 <malloc>
 8000e8c:	4603      	mov	r3, r0
  }
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    free(p);
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f00f fd89 	bl	80109b8 <free>
  }
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff fe53 	bl	8000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8000ebe:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e017      	b.n	8000efa <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdc4 	bl	8000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	e005      	b.n	8000ef2 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fde0 	bl	8000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffcd 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  _head = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f54:	d904      	bls.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b39      	cmp	r3, #57	@ 0x39
 8000f5a:	d801      	bhi.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8000f6e:	b590      	push	{r4, r7, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fc      	ldr	r4, [r7, #12]
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdf4 	bl	8000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8000f94:	f104 0308 	add.w	r3, r4, #8
 8000f98:	463a      	mov	r2, r7
 8000f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9e:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d303      	bcc.n	8000fd4 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
      return;
 8000fd2:	e00b      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	1c58      	adds	r0, r3, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	6048      	str	r0, [r1, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e000      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8000fea:	bf00      	nop
  }
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    append('\0');
 8000ffe:	2100      	movs	r1, #0
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffd3 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0108 	add.w	r1, r3, #8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff fdca 	bl	8000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
  }
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff86 	bl	8000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	e000      	b.n	8001082 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08011a80 	.word	0x08011a80

08001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6011      	str	r1, [r2, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
  }
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 80010c0:	2300      	movs	r3, #0
  }
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	e005      	b.n	8001130 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  }
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	080010cf 	.word	0x080010cf

08001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    return _code;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
  }
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d81b      	bhi.n	80011a0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001189 	.word	0x08001189
 8001174:	08001199 	.word	0x08001199
 8001178:	08001195 	.word	0x08001195
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
 8001184:	0800118d 	.word	0x0800118d
      case Ok:
        return "Ok";
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800118a:	e00a      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 800118e:	e008      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001192:	e006      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 8001196:	e004      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800119a:	e002      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 800119e:	e000      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	08011a84 	.word	0x08011a84
 80011b4:	08011a88 	.word	0x08011a88
 80011b8:	08011a90 	.word	0x08011a90
 80011bc:	08011a9c 	.word	0x08011a9c
 80011c0:	08011aac 	.word	0x08011aac
 80011c4:	08011abc 	.word	0x08011abc
 80011c8:	08011acc 	.word	0x08011acc

080011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2232      	movs	r2, #50	@ 0x32
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f818 	bl	8001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80011f8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	e00c      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e003      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800121e:	e7ec      	b.n	80011fa <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8001238:	2304      	movs	r3, #4
 800123a:	e000      	b.n	800123e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 800123c:	2300      	movs	r3, #0
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001240:	4413      	add	r3, r2
  }
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08011ad0 	.word	0x08011ad0

08001254 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	2210      	movs	r2, #16
 8001278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800127c:	f7ff fbda 	bl	8000a34 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <__io_putchar+0x20>)
 8001296:	f00a fe0a 	bl	800beae <HAL_UART_Transmit>
	  return ch;
 800129a:	687b      	ldr	r3, [r7, #4]
	}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2400049c 	.word	0x2400049c

080012a8 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b08d      	sub	sp, #52	@ 0x34
 80012ae:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80012b0:	4854      	ldr	r0, [pc, #336]	@ (8001404 <_Z14readJsonConfigv+0x15c>)
 80012b2:	f00f fd69 	bl	8010d88 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80012b6:	4854      	ldr	r0, [pc, #336]	@ (8001408 <_Z14readJsonConfigv+0x160>)
 80012b8:	f00f fd66 	bl	8010d88 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80012bc:	2200      	movs	r2, #0
 80012be:	4953      	ldr	r1, [pc, #332]	@ (800140c <_Z14readJsonConfigv+0x164>)
 80012c0:	4853      	ldr	r0, [pc, #332]	@ (8001410 <_Z14readJsonConfigv+0x168>)
 80012c2:	f00e fd77 	bl	800fdb4 <f_mount>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80012d6:	484f      	ldr	r0, [pc, #316]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80012d8:	f00f fce6 	bl	8010ca8 <iprintf>
    	Error_Handler();
 80012dc:	f000 fbf0 	bl	8001ac0 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80012e0:	e08a      	b.n	80013f8 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80012e2:	2201      	movs	r2, #1
 80012e4:	494c      	ldr	r1, [pc, #304]	@ (8001418 <_Z14readJsonConfigv+0x170>)
 80012e6:	484d      	ldr	r0, [pc, #308]	@ (800141c <_Z14readJsonConfigv+0x174>)
 80012e8:	f00e fdaa 	bl	800fe40 <f_open>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 80012fc:	4848      	ldr	r0, [pc, #288]	@ (8001420 <_Z14readJsonConfigv+0x178>)
 80012fe:	f00f fd43 	bl	8010d88 <puts>
			Error_Handler();
 8001302:	f000 fbdd 	bl	8001ac0 <Error_Handler>
}
 8001306:	e077      	b.n	80013f8 <_Z14readJsonConfigv+0x150>
		}
 8001308:	466b      	mov	r3, sp
 800130a:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <_Z14readJsonConfigv+0x174>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	4843      	ldr	r0, [pc, #268]	@ (8001424 <_Z14readJsonConfigv+0x17c>)
 8001316:	f00f fcc7 	bl	8010ca8 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 800131a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800131c:	1e4b      	subs	r3, r1, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	460a      	mov	r2, r1
 8001322:	2300      	movs	r3, #0
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	460a      	mov	r2, r1
 800133e:	2300      	movs	r3, #0
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	00eb      	lsls	r3, r5, #3
 800134e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001352:	00e2      	lsls	r2, r4, #3
 8001354:	460b      	mov	r3, r1
 8001356:	3318      	adds	r3, #24
 8001358:	3307      	adds	r3, #7
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	ebad 0d03 	sub.w	sp, sp, r3
 8001362:	466b      	mov	r3, sp
 8001364:	331f      	adds	r3, #31
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800136c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	6a39      	ldr	r1, [r7, #32]
 8001372:	482a      	ldr	r0, [pc, #168]	@ (800141c <_Z14readJsonConfigv+0x174>)
 8001374:	f00e ff1e 	bl	80101b4 <f_read>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001388:	4827      	ldr	r0, [pc, #156]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 800138a:	f00f fcfd 	bl	8010d88 <puts>
 800138e:	e02f      	b.n	80013f0 <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 8001390:	4826      	ldr	r0, [pc, #152]	@ (800142c <_Z14readJsonConfigv+0x184>)
 8001392:	f00f fcf9 	bl	8010d88 <puts>
				strJson.reserve(length + 1);
 8001396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001398:	3301      	adds	r3, #1
 800139a:	4619      	mov	r1, r3
 800139c:	4824      	ldr	r0, [pc, #144]	@ (8001430 <_Z14readJsonConfigv+0x188>)
 800139e:	f00f fa5c 	bl	801085a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a6:	e017      	b.n	80013d8 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 80013a8:	6a3a      	ldr	r2, [r7, #32]
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	4413      	add	r3, r2
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	491e      	ldr	r1, [pc, #120]	@ (8001430 <_Z14readJsonConfigv+0x188>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fbe7 	bl	8001b8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	481b      	ldr	r0, [pc, #108]	@ (8001430 <_Z14readJsonConfigv+0x188>)
 80013c4:	f00f f9da 	bl	801077c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00f f9cf 	bl	8010770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80013d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d4:	3301      	adds	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbe3      	blt.n	80013a8 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 80013e0:	4813      	ldr	r0, [pc, #76]	@ (8001430 <_Z14readJsonConfigv+0x188>)
 80013e2:	f00f fa9d 	bl	8010920 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4812      	ldr	r0, [pc, #72]	@ (8001434 <_Z14readJsonConfigv+0x18c>)
 80013ec:	f00f fc5c 	bl	8010ca8 <iprintf>
			f_close(&SDFile);
 80013f0:	480a      	ldr	r0, [pc, #40]	@ (800141c <_Z14readJsonConfigv+0x174>)
 80013f2:	f00f f89c 	bl	801052e <f_close>
 80013f6:	46b5      	mov	sp, r6
}
 80013f8:	bf00      	nop
 80013fa:	3734      	adds	r7, #52	@ 0x34
 80013fc:	46bd      	mov	sp, r7
 80013fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001402:	bf00      	nop
 8001404:	08011ae0 	.word	0x08011ae0
 8001408:	08011b04 	.word	0x08011b04
 800140c:	24000590 	.word	0x24000590
 8001410:	24000594 	.word	0x24000594
 8001414:	08011b24 	.word	0x08011b24
 8001418:	08011b40 	.word	0x08011b40
 800141c:	240007c4 	.word	0x240007c4
 8001420:	08011b4c 	.word	0x08011b4c
 8001424:	08011b70 	.word	0x08011b70
 8001428:	08011b94 	.word	0x08011b94
 800142c:	08011bb4 	.word	0x08011bb4
 8001430:	24000330 	.word	0x24000330
 8001434:	08011bd4 	.word	0x08011bd4

08001438 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 800143e:	4826      	ldr	r0, [pc, #152]	@ (80014d8 <_Z15deserialiseJSONv+0xa0>)
 8001440:	f00f fca2 	bl	8010d88 <puts>

    const char *json = strJson.c_str();
 8001444:	4825      	ldr	r0, [pc, #148]	@ (80014dc <_Z15deserialiseJSONv+0xa4>)
 8001446:	f00f fa6b 	bl	8010920 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800144a:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff febb 	bl	80011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 8001456:	7a3a      	ldrb	r2, [r7, #8]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4821      	ldr	r0, [pc, #132]	@ (80014e0 <_Z15deserialiseJSONv+0xa8>)
 800145c:	f000 fbab 	bl	8001bb6 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001460:	4603      	mov	r3, r0
 8001462:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 8001464:	481f      	ldr	r0, [pc, #124]	@ (80014e4 <_Z15deserialiseJSONv+0xac>)
 8001466:	f00f fc1f 	bl	8010ca8 <iprintf>

    switch (error.code())
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe67 	bl	8001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 8001472:	4603      	mov	r3, r0
 8001474:	2b03      	cmp	r3, #3
 8001476:	d011      	beq.n	800149c <_Z15deserialiseJSONv+0x64>
 8001478:	2b03      	cmp	r3, #3
 800147a:	dc16      	bgt.n	80014aa <_Z15deserialiseJSONv+0x72>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <_Z15deserialiseJSONv+0x4e>
 8001480:	2b02      	cmp	r3, #2
 8001482:	d004      	beq.n	800148e <_Z15deserialiseJSONv+0x56>
 8001484:	e011      	b.n	80014aa <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8001486:	4818      	ldr	r0, [pc, #96]	@ (80014e8 <_Z15deserialiseJSONv+0xb0>)
 8001488:	f00f fc7e 	bl	8010d88 <puts>
            break;
 800148c:	e01f      	b.n	80014ce <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800148e:	4817      	ldr	r0, [pc, #92]	@ (80014ec <_Z15deserialiseJSONv+0xb4>)
 8001490:	f00f fc7a 	bl	8010d88 <puts>
            configError = true;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <_Z15deserialiseJSONv+0xb8>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
            break;
 800149a:	e018      	b.n	80014ce <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800149c:	4815      	ldr	r0, [pc, #84]	@ (80014f4 <_Z15deserialiseJSONv+0xbc>)
 800149e:	f00f fc73 	bl	8010d88 <puts>
            configError = true;
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_Z15deserialiseJSONv+0xb8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
            break;
 80014a8:	e011      	b.n	80014ce <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80014aa:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <_Z15deserialiseJSONv+0xc0>)
 80014ac:	f00f fbfc 	bl	8010ca8 <iprintf>
            printf(error.c_str());
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fe50 	bl	8001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00f fbf4 	bl	8010ca8 <iprintf>
            printf("\n");
 80014c0:	200a      	movs	r0, #10
 80014c2:	f00f fc03 	bl	8010ccc <putchar>
            configError = true;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <_Z15deserialiseJSONv+0xb8>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
            break;
 80014cc:	bf00      	nop
    }
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08011bdc 	.word	0x08011bdc
 80014dc:	24000330 	.word	0x24000330
 80014e0:	24000350 	.word	0x24000350
 80014e4:	08011c00 	.word	0x08011c00
 80014e8:	08011c1c 	.word	0x08011c1c
 80014ec:	08011c38 	.word	0x08011c38
 80014f0:	24000380 	.word	0x24000380
 80014f4:	08011c48 	.word	0x08011c48
 80014f8:	08011c5c 	.word	0x08011c5c

080014fc <_Z5setupv>:

void setup()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <_Z5setupv+0x24>)
 8001502:	f00f fc41 	bl	8010d88 <puts>

     // initialise the Remora comms
    comms->init();
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <_Z5setupv+0x28>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fb56 	bl	8003bbc <_ZN11RemoraComms4initEv>
    comms->start();
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <_Z5setupv+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fca9 	bl	8003e6c <_ZN11RemoraComms5startEv>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08011c78 	.word	0x08011c78
 8001524:	24000530 	.word	0x24000530

08001528 <main>:


int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
	MPU_Config();
 800152e:	f000 fa9b 	bl	8001a68 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8001532:	4b54      	ldr	r3, [pc, #336]	@ (8001684 <main+0x15c>)
 8001534:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001538:	609a      	str	r2, [r3, #8]
	HAL_Init();
 800153a:	f002 fe13 	bl	8004164 <HAL_Init>
	SystemClock_Config();
 800153e:	f000 f8a9 	bl	8001694 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8001542:	f000 f971 	bl	8001828 <_Z24PeriphCommonClock_Configv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001546:	4b4f      	ldr	r3, [pc, #316]	@ (8001684 <main+0x15c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11b      	bne.n	8001594 <main+0x6c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
}
 8001560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001562:	f3bf 8f6f 	isb	sy
}
 8001566:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001568:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <main+0x15c>)
 800156a:	2200      	movs	r2, #0
 800156c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001570:	f3bf 8f4f 	dsb	sy
}
 8001574:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001576:	f3bf 8f6f 	isb	sy
}
 800157a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800157c:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <main+0x15c>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	4a40      	ldr	r2, [pc, #256]	@ (8001684 <main+0x15c>)
 8001582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001586:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800158e:	f3bf 8f6f 	isb	sy
}
 8001592:	e000      	b.n	8001596 <main+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001594:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <main+0x15c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d142      	bne.n	8001632 <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <main+0x15c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015b4:	f3bf 8f4f 	dsb	sy
}
 80015b8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <main+0x15c>)
 80015bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0b5b      	lsrs	r3, r3, #13
 80015c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015ca:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015d4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015e4:	4927      	ldr	r1, [pc, #156]	@ (8001684 <main+0x15c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	1e5a      	subs	r2, r3, #1
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ea      	bne.n	80015d6 <main+0xae>
    } while(sets-- != 0U);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1db      	bne.n	80015cc <main+0xa4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001614:	f3bf 8f4f 	dsb	sy
}
 8001618:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <main+0x15c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <main+0x15c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800162c:	f3bf 8f6f 	isb	sy
}
 8001630:	e000      	b.n	8001634 <main+0x10c>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001632:	bf00      	nop
	SCB_EnableICache();
	SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <main+0x160>)
 8001636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800163a:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <main+0x160>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <main+0x160>)
 8001646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); // used for SD card detect
 8001652:	f000 f9ad 	bl	80019b0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001656:	f000 f94b 	bl	80018f0 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in sd_diskio.c
 800165a:	f000 f91d 	bl	8001898 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800165e:	f00c fb0b 	bl	800dc78 <MX_FATFS_Init>

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <main+0x164>)
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	2201      	movs	r2, #1
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <main+0x168>)
 800166e:	f00f fb1b 	bl	8010ca8 <iprintf>

	readJsonConfig();	// FatFS fales to work if chche is enabled
 8001672:	f7ff fe19 	bl	80012a8 <_Z14readJsonConfigv>
	deserialiseJSON();
 8001676:	f7ff fedf 	bl	8001438 <_Z15deserialiseJSONv>



	setup();
 800167a:	f7ff ff3f 	bl	80014fc <_Z5setupv>

	while (1)
 800167e:	bf00      	nop
 8001680:	e7fd      	b.n	800167e <main+0x156>
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	58024400 	.word	0x58024400
 800168c:	08011cc8 	.word	0x08011cc8
 8001690:	08011c9c 	.word	0x08011c9c

08001694 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09e      	sub	sp, #120	@ 0x78
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800169e:	224c      	movs	r2, #76	@ 0x4c
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00f fc6a 	bl	8010f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2220      	movs	r2, #32
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00f fc63 	bl	8010f7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f004 fe26 	bl	8006308 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	4b56      	ldr	r3, [pc, #344]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	4a55      	ldr	r2, [pc, #340]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b52      	ldr	r3, [pc, #328]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a51      	ldr	r2, [pc, #324]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 80016dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016ee:	bf00      	nop
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f3      	bne.n	80016f0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	4b46      	ldr	r3, [pc, #280]	@ (8001824 <_Z18SystemClock_Configv+0x190>)
 800170a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800170e:	4a45      	ldr	r2, [pc, #276]	@ (8001824 <_Z18SystemClock_Configv+0x190>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001718:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <_Z18SystemClock_Configv+0x190>)
 800171a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a3c      	ldr	r2, [pc, #240]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 8001730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	4b36      	ldr	r3, [pc, #216]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 8001742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001744:	4a35      	ldr	r2, [pc, #212]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800174c:	4b33      	ldr	r3, [pc, #204]	@ (800181c <_Z18SystemClock_Configv+0x188>)
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001758:	bf00      	nop
 800175a:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <_Z18SystemClock_Configv+0x18c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f3      	bne.n	800175a <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001772:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <_Z18SystemClock_Configv+0x190>)
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <_Z18SystemClock_Configv+0x190>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001782:	2301      	movs	r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178c:	2302      	movs	r3, #2
 800178e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001790:	2302      	movs	r3, #2
 8001792:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001794:	2305      	movs	r3, #5
 8001796:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001798:	23c0      	movs	r3, #192	@ 0xc0
 800179a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017a8:	2308      	movs	r3, #8
 80017aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fddf 	bl	800637c <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80017ce:	f000 f977 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d2:	233f      	movs	r3, #63	@ 0x3f
 80017d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	2303      	movs	r3, #3
 80017d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017de:	2308      	movs	r3, #8
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017e2:	2340      	movs	r3, #64	@ 0x40
 80017e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017e6:	2340      	movs	r3, #64	@ 0x40
 80017e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017f0:	2340      	movs	r3, #64	@ 0x40
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2104      	movs	r1, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f005 fa18 	bl	8006c30 <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8001810:	f000 f956 	bl	8001ac0 <Error_Handler>
  }
}
 8001814:	bf00      	nop
 8001816:	3778      	adds	r7, #120	@ 0x78
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58000400 	.word	0x58000400
 8001820:	58024800 	.word	0x58024800
 8001824:	58024400 	.word	0x58024400

08001828 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0b0      	sub	sp, #192	@ 0xc0
 800182c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182e:	463b      	mov	r3, r7
 8001830:	22c0      	movs	r2, #192	@ 0xc0
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f00f fba1 	bl	8010f7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800183a:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001846:	2302      	movs	r3, #2
 8001848:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800184a:	230c      	movs	r3, #12
 800184c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8001852:	230a      	movs	r3, #10
 8001854:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800185a:	23c0      	movs	r3, #192	@ 0xc0
 800185c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800185e:	2320      	movs	r3, #32
 8001860:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800186c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001870:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fd67 	bl	8007348 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800188a:	f000 f919 	bl	8001ac0 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	37c0      	adds	r7, #192	@ 0xc0
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018ae:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018c0:	2208      	movs	r2, #8
 80018c2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018c6:	f008 fa3d 	bl	8009d44 <HAL_SD_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80018da:	4804      	ldr	r0, [pc, #16]	@ (80018ec <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80018dc:	f00f fa54 	bl	8010d88 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	24000420 	.word	0x24000420
 80018e8:	52007000 	.word	0x52007000
 80018ec:	08011cd4 	.word	0x08011cd4

080018f0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018f6:	4a2d      	ldr	r2, [pc, #180]	@ (80019ac <_ZL19MX_USART1_UART_Initv+0xbc>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190e:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001938:	481b      	ldr	r0, [pc, #108]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800193a:	f00a fa68 	bl	800be0e <HAL_UART_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800194e:	f000 f8b7 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001956:	f00b fafa 	bl	800cf4e <HAL_UARTEx_SetTxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800196a:	f000 f8a9 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196e:	2100      	movs	r1, #0
 8001970:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001972:	f00b fb2a 	bl	800cfca <HAL_UARTEx_SetRxFifoThreshold>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001986:	f000 f89b 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800198a:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800198c:	f00b faa6 	bl	800cedc <HAL_UARTEx_DisableFifoMode>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80019a0:	f000 f88e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2400049c 	.word	0x2400049c
 80019ac:	40011000 	.word	0x40011000

080019b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019cc:	4a24      	ldr	r2, [pc, #144]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a08:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a3e:	2310      	movs	r3, #16
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <_ZL12MX_GPIO_Initv+0xb4>)
 8001a52:	f004 faa9 	bl	8005fa8 <HAL_GPIO_Init>

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58020800 	.word	0x58020800

08001a68 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a7a:	f002 fd45 	bl	8004508 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a8a:	231f      	movs	r3, #31
 8001a8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a8e:	2387      	movs	r3, #135	@ 0x87
 8001a90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a96:	2300      	movs	r3, #0
 8001a98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fd63 	bl	8004578 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f002 fd40 	bl	8004538 <HAL_MPU_Enable>

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <Error_Handler+0x14>)
 8001ac6:	f00f f8ef 	bl	8010ca8 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8001aca:	b672      	cpsid	i
}
 8001acc:	bf00      	nop

  __disable_irq();
  while (1)
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <Error_Handler+0xe>
 8001ad2:	bf00      	nop
 8001ad4:	08011ce4 	.word	0x08011ce4

08001ad8 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
  }
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001af8:	2110      	movs	r1, #16
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff f89c 	bl	8000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8001b00:	4603      	mov	r3, r0
  }
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f85c 	bl	8001bd6 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8001b46:	b590      	push	{r4, r7, lr}
 8001b48:	b08b      	sub	sp, #44	@ 0x2c
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4621      	mov	r1, r4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f865 	bl	8001c26 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f103 0408 	add.w	r4, r3, #8
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f842 	bl	8001bf4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff f961 	bl	8000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}

08001b8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f00e fedd 	bl	801095a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f00e feb0 	bl	801090c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8001bac:	bf00      	nop
    }
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8001bc2:	793a      	ldrb	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f839 	bl	8001c3e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
  }
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe ff6c 	bl	8000ade <_ZN19ArduinoJson6101_11010addPaddingEj>
 8001c06:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	6979      	ldr	r1, [r7, #20]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f848 	bl	8001ca2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8001c12:	4603      	mov	r3, r0
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4619      	mov	r1, r3
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7fe ff70 	bl	8000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	7039      	strb	r1, [r7, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8001c3e:	b5b0      	push	{r4, r5, r7, lr}
 8001c40:	b08a      	sub	sp, #40	@ 0x28
 8001c42:	af02      	add	r7, sp, #8
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff f8d1 	bl	8000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff f8df 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c56:	4604      	mov	r4, r0
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f000 f831 	bl	8001cc0 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8001c5e:	4605      	mov	r5, r0
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff f8d7 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f837 	bl	8001cde <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8001c70:	4602      	mov	r2, r0
 8001c72:	793b      	ldrb	r3, [r7, #4]
 8001c74:	f107 0010 	add.w	r0, r7, #16
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	4621      	mov	r1, r4
 8001c80:	f000 f83c 	bl	8001cfc <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff f8d0 	bl	8000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f845 	bl	8001d22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdb0      	pop	{r4, r5, r7, pc}

08001ca2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f8e3 	bl	8000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8001cb6:	4603      	mov	r3, r0
  }
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f9cc 	bl	800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f863 	bl	8001db8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8001cf2:	4603      	mov	r3, r0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8001d0a:	7e3b      	ldrb	r3, [r7, #24]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f85f 	bl	8001dd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f871 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f9df 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d106      	bne.n	8001d5a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	e022      	b.n	8001db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f932 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d74:	d002      	beq.n	8001d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8001d76:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d78:	d00a      	beq.n	8001d90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8001d7a:	e013      	b.n	8001da4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7fe fff1 	bl	8000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f94d 	bl	8002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	e00f      	b.n	8001db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	f7fe fff8 	bl	8000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa6a 	bl	8002274 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8001da0:	4603      	mov	r3, r0
 8001da2:	e005      	b.n	8001db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fc27 	bl	80025fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8001dac:	4603      	mov	r3, r0
 8001dae:	bf00      	nop
  }
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f930 	bl	800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8001dce:	68fb      	ldr	r3, [r7, #12]
  }
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	7e3a      	ldrb	r2, [r7, #24]
 8001dfc:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	739a      	strb	r2, [r3, #14]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f8d9 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e26:	f200 80c7 	bhi.w	8001fb8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001ef1 	.word	0x08001ef1
 8001e34:	08001fb9 	.word	0x08001fb9
 8001e38:	08001fb9 	.word	0x08001fb9
 8001e3c:	08001fb9 	.word	0x08001fb9
 8001e40:	08001fb9 	.word	0x08001fb9
 8001e44:	08001fb9 	.word	0x08001fb9
 8001e48:	08001fb9 	.word	0x08001fb9
 8001e4c:	08001fb9 	.word	0x08001fb9
 8001e50:	08001fb9 	.word	0x08001fb9
 8001e54:	08001f01 	.word	0x08001f01
 8001e58:	08001f01 	.word	0x08001f01
 8001e5c:	08001fb9 	.word	0x08001fb9
 8001e60:	08001fb9 	.word	0x08001fb9
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001fb9 	.word	0x08001fb9
 8001e6c:	08001fb9 	.word	0x08001fb9
 8001e70:	08001fb9 	.word	0x08001fb9
 8001e74:	08001fb9 	.word	0x08001fb9
 8001e78:	08001fb9 	.word	0x08001fb9
 8001e7c:	08001fb9 	.word	0x08001fb9
 8001e80:	08001fb9 	.word	0x08001fb9
 8001e84:	08001fb9 	.word	0x08001fb9
 8001e88:	08001fb9 	.word	0x08001fb9
 8001e8c:	08001fb9 	.word	0x08001fb9
 8001e90:	08001fb9 	.word	0x08001fb9
 8001e94:	08001fb9 	.word	0x08001fb9
 8001e98:	08001fb9 	.word	0x08001fb9
 8001e9c:	08001fb9 	.word	0x08001fb9
 8001ea0:	08001fb9 	.word	0x08001fb9
 8001ea4:	08001fb9 	.word	0x08001fb9
 8001ea8:	08001fb9 	.word	0x08001fb9
 8001eac:	08001fb9 	.word	0x08001fb9
 8001eb0:	08001f01 	.word	0x08001f01
 8001eb4:	08001fb9 	.word	0x08001fb9
 8001eb8:	08001fb9 	.word	0x08001fb9
 8001ebc:	08001fb9 	.word	0x08001fb9
 8001ec0:	08001fb9 	.word	0x08001fb9
 8001ec4:	08001fb9 	.word	0x08001fb9
 8001ec8:	08001fb9 	.word	0x08001fb9
 8001ecc:	08001fb9 	.word	0x08001fb9
 8001ed0:	08001fb9 	.word	0x08001fb9
 8001ed4:	08001fb9 	.word	0x08001fb9
 8001ed8:	08001fb9 	.word	0x08001fb9
 8001edc:	08001fb9 	.word	0x08001fb9
 8001ee0:	08001fb9 	.word	0x08001fb9
 8001ee4:	08001fb9 	.word	0x08001fb9
 8001ee8:	08001fb9 	.word	0x08001fb9
 8001eec:	08001f09 	.word	0x08001f09
          return DeserializationError::IncompleteInput;
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f8f3 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001efc:	7b3b      	ldrb	r3, [r7, #12]
 8001efe:	e064      	b.n	8001fca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fb99 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8001f06:	e05f      	b.n	8001fc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fb95 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f860 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f18:	d002      	beq.n	8001f20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8001f1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f1c:	d02a      	beq.n	8001f74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8001f1e:	e042      	b.n	8001fa6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb89 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f852 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001f34:	7f7b      	ldrb	r3, [r7, #29]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f8ce 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f46:	7c3b      	ldrb	r3, [r7, #16]
 8001f48:	e03f      	b.n	8001fca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8001f4a:	7f7b      	ldrb	r3, [r7, #29]
 8001f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f4e:	d107      	bne.n	8001f60 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fb6e 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8001f5c:	bf00      	nop
              break;
 8001f5e:	e02a      	b.n	8001fb6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8001f60:	7f7b      	ldrb	r3, [r7, #29]
 8001f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	77fb      	strb	r3, [r7, #31]
                move();
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb63 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8001f72:	e7da      	b.n	8001f2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb5f 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f82a 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001f84:	7fbb      	ldrb	r3, [r7, #30]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f8a6 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f96:	7d3b      	ldrb	r3, [r7, #20]
 8001f98:	e017      	b.n	8001fca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8001f9a:	7fbb      	ldrb	r3, [r7, #30]
 8001f9c:	2b0a      	cmp	r3, #10
 8001f9e:	d000      	beq.n	8001fa2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8001fa0:	e7e8      	b.n	8001f74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8001fa2:	bf00      	nop
              break;
 8001fa4:	e007      	b.n	8001fb6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	2102      	movs	r1, #2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f898 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001fb2:	7e3b      	ldrb	r3, [r7, #24]
 8001fb4:	e009      	b.n	8001fca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8001fb6:	e007      	b.n	8001fc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f88f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001fc4:	7f3b      	ldrb	r3, [r7, #28]
 8001fc6:	e000      	b.n	8001fca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8001fc8:	e728      	b.n	8001e1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop

08001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b9b      	ldrb	r3, [r3, #14]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d017      	beq.n	800201a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f862 	bl	80010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	735a      	strb	r2, [r3, #13]
 8002000:	e008      	b.n	8002014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f846 	bl	8001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	739a      	strb	r2, [r3, #14]
    return _current;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7b5b      	ldrb	r3, [r3, #13]
  }
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8002026:	b580      	push	{r7, lr}
 8002028:	b098      	sub	sp, #96	@ 0x60
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2105      	movs	r1, #5
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f84f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002044:	7c3b      	ldrb	r3, [r7, #16]
 8002046:	e111      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800204c:	235b      	movs	r3, #91	@ 0x5b
 800204e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8002052:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002054:	f7ff ffbe 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002060:	4293      	cmp	r3, r2
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 800206e:	2300      	movs	r3, #0
 8002070:	e003      	b.n	800207a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8002072:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002074:	f000 fae0 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002078:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 800207a:	f083 0301 	eor.w	r3, r3, #1
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f829 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002090:	7d3b      	ldrb	r3, [r7, #20]
 8002092:	e0eb      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff febd 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800209a:	4603      	mov	r3, r0
 800209c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	f107 020c 	add.w	r2, r7, #12
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f82b 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 80020c2:	2300      	movs	r3, #0
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	e0cc      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80020d6:	235d      	movs	r3, #93	@ 0x5d
 80020d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 80020dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020de:	f7ff ff79 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e003      	b.n	8002104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 80020fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020fe:	f000 fa9b 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002102:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ffe7 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002118:	e0a8      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f7fe feee 	bl	8000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8002126:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 800212e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002132:	2103      	movs	r1, #3
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe ffd4 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800213a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800213e:	e095      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7b1b      	ldrb	r3, [r3, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 800214c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fde7 	bl	8001d22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002154:	4603      	mov	r3, r0
 8002156:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7b1b      	ldrb	r3, [r3, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002164:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002168:	f107 020c 	add.w	r2, r7, #12
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ffc8 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 800217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002188:	2300      	movs	r3, #0
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002194:	7b3b      	ldrb	r3, [r7, #12]
 8002196:	e069      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fe3b 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800219e:	4603      	mov	r3, r0
 80021a0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80021a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021a6:	f107 020c 	add.w	r2, r7, #12
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ffa9 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 80021c6:	2300      	movs	r3, #0
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 80021d2:	7b3b      	ldrb	r3, [r7, #12]
 80021d4:	e04a      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021da:	235d      	movs	r3, #93	@ 0x5d
 80021dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 80021e0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80021e2:	f7ff fef7 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80021ee:	4293      	cmp	r3, r2
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 80021fc:	2300      	movs	r3, #0
 80021fe:	e003      	b.n	8002208 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002200:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002202:	f000 fa19 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002206:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 800220c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ff65 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002218:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800221c:	e026      	b.n	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	643b      	str	r3, [r7, #64]	@ 0x40
 8002222:	232c      	movs	r3, #44	@ 0x2c
 8002224:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002228:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800222a:	f7ff fed3 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002236:	4293      	cmp	r3, r2
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8002244:	2300      	movs	r3, #0
 8002246:	e003      	b.n	8002250 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002248:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800224a:	f000 f9f5 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800224e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002250:	f083 0301 	eor.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f43f af5f 	beq.w	800211a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 800225c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ff3d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002268:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 800226c:	4618      	mov	r0, r3
 800226e:	3760      	adds	r7, #96	@ 0x60
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b0a3      	sub	sp, #140	@ 0x8c
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d107      	bne.n	8002296 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	2105      	movs	r1, #5
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ff28 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002292:	7c3b      	ldrb	r3, [r7, #16]
 8002294:	e1ad      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800229c:	237b      	movs	r3, #123	@ 0x7b
 800229e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 80022a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80022a6:	f7ff fe95 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 80022c0:	2300      	movs	r3, #0
 80022c2:	e004      	b.n	80022ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 80022c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80022c8:	f000 f9b6 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80022cc:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 80022ce:	f083 0301 	eor.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe feff 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80022e4:	7d3b      	ldrb	r3, [r7, #20]
 80022e6:	e184      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fd93 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80022ee:	4603      	mov	r3, r0
 80022f0:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	f107 020c 	add.w	r2, r7, #12
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe ff01 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8002316:	2300      	movs	r3, #0
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8002322:	7b3b      	ldrb	r3, [r7, #12]
 8002324:	e165      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800232a:	237d      	movs	r3, #125	@ 0x7d
 800232c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8002330:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002332:	f7ff fe4f 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800233e:	4293      	cmp	r3, r2
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 800234c:	2300      	movs	r3, #0
 800234e:	e003      	b.n	8002358 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8002350:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002352:	f000 f971 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002356:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800235c:	f107 0320 	add.w	r3, r7, #32
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe febd 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800236c:	e141      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f7fe fd9a 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 800237a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 800237e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8002386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800238a:	2103      	movs	r1, #3
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fea8 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002392:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002396:	e12c      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f957 	bl	8002652 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 80023a4:	4603      	mov	r3, r0
 80023a6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80023a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ac:	f107 020c 	add.w	r2, r7, #12
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fea6 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80023b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 80023d8:	7b3b      	ldrb	r3, [r7, #12]
 80023da:	e10a      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 80023dc:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fb91 	bl	8001b0a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fb4c 	bl	8000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fd0e 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 80023fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002400:	f107 020c 	add.w	r2, r7, #12
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fe7c 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8002420:	2300      	movs	r3, #0
 8002422:	f083 0301 	eor.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 800242c:	7b3b      	ldrb	r3, [r7, #12]
 800242e:	e0e0      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	673b      	str	r3, [r7, #112]	@ 0x70
 8002434:	233a      	movs	r3, #58	@ 0x3a
 8002436:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 800243a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800243c:	f7ff fdca 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002448:	4293      	cmp	r3, r2
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 8002456:	2300      	movs	r3, #0
 8002458:	e003      	b.n	8002462 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 800245a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800245c:	f000 f8ec 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002460:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 800246c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002470:	2102      	movs	r1, #2
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fe35 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002478:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800247c:	e0b9      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7b1b      	ldrb	r3, [r3, #12]
 8002482:	3b01      	subs	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 800248a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800248e:	f7fe fadf 	bl	8000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002492:	4603      	mov	r3, r0
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fc43 	bl	8001d22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 800249c:	4603      	mov	r3, r0
 800249e:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 80024ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024b0:	f107 020c 	add.w	r2, r7, #12
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fe24 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80024bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80024c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 80024d0:	2300      	movs	r3, #0
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 80024dc:	7b3b      	ldrb	r3, [r7, #12]
 80024de:	e088      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fc97 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80024ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024ee:	f107 020c 	add.w	r2, r7, #12
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fe05 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80024fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 800250e:	2300      	movs	r3, #0
 8002510:	f083 0301 	eor.w	r3, r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 800251a:	7b3b      	ldrb	r3, [r7, #12]
 800251c:	e069      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002522:	237d      	movs	r3, #125	@ 0x7d
 8002524:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8002528:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800252a:	f7ff fd53 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002536:	4293      	cmp	r3, r2
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 8002544:	2300      	movs	r3, #0
 8002546:	e003      	b.n	8002550 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 8002548:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800254a:	f000 f875 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800254e:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 8002554:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fdc1 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002560:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002564:	e045      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	663b      	str	r3, [r7, #96]	@ 0x60
 800256a:	232c      	movs	r3, #44	@ 0x2c
 800256c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8002570:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002572:	f7ff fd2f 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800257e:	4293      	cmp	r3, r2
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 800258c:	2300      	movs	r3, #0
 800258e:	e003      	b.n	8002598 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 8002590:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002592:	f000 f851 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002596:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 80025a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd9a 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80025ae:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80025b2:	e01e      	b.n	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fc2d 	bl	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80025be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025c2:	f107 020c 	add.w	r2, r7, #12
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fd9b 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80025ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80025d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 80025e2:	2300      	movs	r3, #0
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f43f aebf 	beq.w	800236e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80025f0:	7b3b      	ldrb	r3, [r7, #12]
  }
 80025f2:	4618      	mov	r0, r3
 80025f4:	378c      	adds	r7, #140	@ 0x8c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}

080025fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fce5 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800260a:	4603      	mov	r3, r0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f83f 	bl	8002690 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f84c 	bl	80026b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8002620:	4603      	mov	r3, r0
 8002622:	e005      	b.n	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f881 	bl	800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 800262c:	4603      	mov	r3, r0
 800262e:	bf00      	nop
  }
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	739a      	strb	r2, [r3, #14]
  }
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fcb9 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f813 	bl	8002690 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f92f 	bl	80028d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8002678:	4603      	mov	r3, r0
 800267a:	e005      	b.n	8002688 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9c1 	bl	8002a06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8002684:	4603      	mov	r3, r0
 8002686:	bf00      	nop
  }
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b27      	cmp	r3, #39	@ 0x27
 800269e:	d002      	beq.n	80026a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b22      	cmp	r3, #34	@ 0x22
 80026a4:	d101      	bne.n	80026aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 80026aa:	2300      	movs	r3, #0
  }
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f904 	bl	80028d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80026ce:	4603      	mov	r3, r0
 80026d0:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	f107 020c 	add.w	r2, r7, #12
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fd11 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80026f6:	2300      	movs	r3, #0
 80026f8:	f083 0301 	eor.w	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8002702:	7b3b      	ldrb	r3, [r7, #12]
 8002704:	e00f      	b.n	8002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f9fe 	bl	8001b0a <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 800270e:	4603      	mov	r3, r0
 8002710:	4619      	mov	r1, r3
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	f7fe fb12 	bl	8000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fcdf 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002724:	7f3b      	ldrb	r3, [r7, #28]
  }
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 800272e:	b580      	push	{r7, lr}
 8002730:	b0a0      	sub	sp, #128	@ 0x80
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fc48 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002744:	4603      	mov	r3, r0
 8002746:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800274a:	e013      	b.n	8002774 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff73 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8002752:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 800275c:	3380      	adds	r3, #128	@ 0x80
 800275e:	443b      	add	r3, r7
 8002760:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002764:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fc33 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800276e:	4603      	mov	r3, r0
 8002770:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8002774:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f9af 	bl	8002adc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8002784:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002788:	2b3e      	cmp	r3, #62	@ 0x3e
 800278a:	d801      	bhi.n	8002790 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1da      	bne.n	800274c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8002796:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800279a:	3380      	adds	r3, #128	@ 0x80
 800279c:	443b      	add	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 80027a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027a8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 80027ac:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027b0:	2b74      	cmp	r3, #116	@ 0x74
 80027b2:	d114      	bne.n	80027de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 80027b4:	2101      	movs	r1, #1
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f7fe fa66 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 80027bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027ca:	461a      	mov	r2, r3
 80027cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc85 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027d8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80027dc:	e077      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 80027de:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027e2:	2b66      	cmp	r3, #102	@ 0x66
 80027e4:	d114      	bne.n	8002810 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 80027e6:	2100      	movs	r1, #0
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	f7fe fa4d 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80027ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027fc:	461a      	mov	r2, r3
 80027fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fc6c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800280a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800280e:	e05e      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8002810:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002814:	2b6e      	cmp	r3, #110	@ 0x6e
 8002816:	d110      	bne.n	800283a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8002818:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800281c:	2b04      	cmp	r3, #4
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8002826:	461a      	mov	r2, r3
 8002828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fc57 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002834:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002838:	e049      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f97b 	bl	8002b40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fb7c 	bl	8002f4c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8002854:	4603      	mov	r3, r0
 8002856:	2b08      	cmp	r3, #8
 8002858:	d021      	beq.n	800289e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 800285a:	2b08      	cmp	r3, #8
 800285c:	dc2f      	bgt.n	80028be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 800285e:	2b06      	cmp	r3, #6
 8002860:	d00f      	beq.n	8002882 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 8002862:	2b07      	cmp	r3, #7
 8002864:	d12b      	bne.n	80028be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8002866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f7fe fa47 	bl	8000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8002870:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fc33 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800287c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002880:	e025      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 8002882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f7fe fa26 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 800288c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fc25 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002898:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800289c:	e017      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 800289e:	ed97 7b04 	vldr	d7, [r7, #16]
 80028a2:	eeb0 0b47 	vmov.f64	d0, d7
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f7fe fa03 	bl	8000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 80028ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc15 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028b8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80028bc:	e007      	b.n	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 80028be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fc0c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028ca:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 80028ce:	4618      	mov	r0, r3
 80028d0:	3780      	adds	r7, #128	@ 0x80
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b08c      	sub	sp, #48	@ 0x30
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0208 	add.w	r2, r3, #8
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fbad 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fb6e 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fe9a 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fb65 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fe91 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8002916:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800291a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800291e:	429a      	cmp	r2, r3
 8002920:	d04f      	beq.n	80029c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8002922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fbd6 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002936:	7e3b      	ldrb	r3, [r7, #24]
 8002938:	e061      	b.n	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 800293a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800293e:	2b5c      	cmp	r3, #92	@ 0x5c
 8002940:	d136      	bne.n	80029b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fb46 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 800294e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fbc0 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002962:	7f3b      	ldrb	r3, [r7, #28]
 8002964:	e04b      	b.n	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 8002966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800296a:	2b75      	cmp	r3, #117	@ 0x75
 800296c:	d108      	bne.n	8002980 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 800296e:	f107 0320 	add.w	r3, r7, #32
 8002972:	2104      	movs	r1, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fbb4 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800297a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800297e:	e03e      	b.n	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8002980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fc2f 	bl	80011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8002990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002994:	2b00      	cmp	r3, #0
 8002996:	d108      	bne.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8002998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fb9f 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029a8:	e029      	b.n	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fe44 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 80029b0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe faf6 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 80029c0:	e7a0      	b.n	8002904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 80029c2:	bf00      	nop
    result = builder.complete();
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fb14 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 80029dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029e0:	2103      	movs	r1, #3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fb7d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029ec:	e007      	b.n	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 80029ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fb74 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 80029fe:	4618      	mov	r0, r3
 8002a00:	3730      	adds	r7, #48	@ 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b08a      	sub	sp, #40	@ 0x28
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0208 	add.w	r2, r3, #8
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fb15 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fad6 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8002a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fb50 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a42:	7e3b      	ldrb	r3, [r7, #24]
 8002a44:	e046      	b.n	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 8002a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f846 	bl	8002adc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fdee 	bl	8002638 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8002a5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe faa0 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fab1 	bl	8001fd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8002a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f82d 	bl	8002adc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e6      	bne.n	8002a56 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8002a88:	e007      	b.n	8002a9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fb26 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a96:	7f3b      	ldrb	r3, [r7, #28]
 8002a98:	e01c      	b.n	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe faa9 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	2103      	movs	r1, #3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fb12 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ac2:	e007      	b.n	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8002ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fb09 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	@ 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2239      	movs	r2, #57	@ 0x39
 8002aea:	2130      	movs	r1, #48	@ 0x30
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fa39 	bl	8002f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002af2:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11a      	bne.n	8002b2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	227a      	movs	r2, #122	@ 0x7a
 8002afc:	215f      	movs	r1, #95	@ 0x5f
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa30 	bl	8002f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	225a      	movs	r2, #90	@ 0x5a
 8002b0e:	2141      	movs	r1, #65	@ 0x41
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fa27 	bl	8002f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002b16:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d108      	bne.n	8002b2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b20:	d005      	beq.n	8002b2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b26:	d002      	beq.n	8002b2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b2c:	d101      	bne.n	8002b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8002b32:	2300      	movs	r3, #0
  }
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	0000      	movs	r0, r0
	...

08002b40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b0a2      	sub	sp, #136	@ 0x88
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b4a:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8002b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b58:	d008      	beq.n	8002b6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8002b5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b5c:	d10a      	bne.n	8002b74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	3301      	adds	r3, #1
 8002b68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b6a:	e003      	b.n	8002b74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6e:	3301      	adds	r3, #1
 8002b70:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b72:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8002b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b6e      	cmp	r3, #110	@ 0x6e
 8002b7a:	d003      	beq.n	8002b84 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b82:	d109      	bne.n	8002b98 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8002b84:	f000 fa08 	bl	8002f98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8002b88:	eeb0 7b40 	vmov.f64	d7, d0
 8002b8c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b90:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b92:	f000 fa0f 	bl	8002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002b96:	e1d4      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b69      	cmp	r3, #105	@ 0x69
 8002b9e:	d003      	beq.n	8002ba8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b49      	cmp	r3, #73	@ 0x49
 8002ba6:	d114      	bne.n	8002bd2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8002ba8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8002bb0:	f000 fa16 	bl	8002fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002bb4:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8002bbc:	e003      	b.n	8002bc6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8002bbe:	f000 fa0f 	bl	8002fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002bc2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8002bca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002bcc:	f000 f9f2 	bl	8002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002bd0:	e1b7      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8002bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f9b5 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f083 0301 	eor.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bee:	d001      	beq.n	8002bf4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8002bfa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002bfc:	f000 f9fe 	bl	8002ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002c00:	e19f      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8002c20:	e054      	b.n	8002ccc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8002c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	3b30      	subs	r3, #48	@ 0x30
 8002c28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8002c2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c30:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002c34:	49b2      	ldr	r1, [pc, #712]	@ (8002f00 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8002c36:	418b      	sbcs	r3, r1
 8002c38:	d251      	bcs.n	8002cde <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8002c3a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002c3e:	4622      	mov	r2, r4
 8002c40:	462b      	mov	r3, r5
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c50:	0090      	lsls	r0, r2, #2
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	eb12 0804 	adds.w	r8, r2, r4
 8002c5a:	eb43 0905 	adc.w	r9, r3, r5
 8002c5e:	eb18 0308 	adds.w	r3, r8, r8
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	eb49 0309 	adc.w	r3, r9, r9
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c6e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8002c72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c76:	2200      	movs	r2, #0
 8002c78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002c80:	460b      	mov	r3, r1
 8002c82:	43db      	mvns	r3, r3
 8002c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c86:	4613      	mov	r3, r2
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c94:	4621      	mov	r1, r4
 8002c96:	4291      	cmp	r1, r2
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c9e:	d320      	bcc.n	8002ce2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8002ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002caa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	1851      	adds	r1, r2, r1
 8002cb6:	6139      	str	r1, [r7, #16]
 8002cb8:	4629      	mov	r1, r5
 8002cba:	414b      	adcs	r3, r1
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cc2:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8002cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc8:	3301      	adds	r3, #1
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f938 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1a2      	bne.n	8002c22 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8002cdc:	e002      	b.n	8002ce4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8002ce2:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11b      	bne.n	8002d24 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8002cec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cf6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002cf8:	f000 f99c 	bl	8003034 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8002cfc:	e121      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002cfe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d02:	f04f 020a 	mov.w	r2, #10
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f7fd fcf5 	bl	80006f8 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8002d16:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8002d24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2c:	d2e7      	bcs.n	8002cfe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002d2e:	e009      	b.n	8002d44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8002d30:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d40:	3301      	adds	r3, #1
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe f8fc 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8002d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d5a:	d14c      	bne.n	8002df6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5e:	3301      	adds	r3, #1
 8002d60:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d62:	e040      	b.n	8002de6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8002d64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d68:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002d6c:	4965      	ldr	r1, [pc, #404]	@ (8002f04 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8002d6e:	418b      	sbcs	r3, r1
 8002d70:	d236      	bcs.n	8002de0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002d72:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002d88:	0090      	lsls	r0, r2, #2
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	eb12 0a04 	adds.w	sl, r2, r4
 8002d92:	eb43 0b05 	adc.w	fp, r3, r5
 8002d96:	eb1a 030a 	adds.w	r3, sl, sl
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	eb4b 030b 	adc.w	r3, fp, fp
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002da6:	4652      	mov	r2, sl
 8002da8:	465b      	mov	r3, fp
 8002daa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dac:	7809      	ldrb	r1, [r1, #0]
 8002dae:	3930      	subs	r1, #48	@ 0x30
 8002db0:	b2c9      	uxtb	r1, r1
 8002db2:	b2c9      	uxtb	r1, r1
 8002db4:	2000      	movs	r0, #0
 8002db6:	6239      	str	r1, [r7, #32]
 8002db8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002dba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	1851      	adds	r1, r2, r1
 8002dc2:	6039      	str	r1, [r7, #0]
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	414b      	adcs	r3, r1
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002dce:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8002dd2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8002de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de2:	3301      	adds	r3, #1
 8002de4:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8ab 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1b6      	bne.n	8002d64 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b65      	cmp	r3, #101	@ 0x65
 8002e00:	d003      	beq.n	8002e0a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8002e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b45      	cmp	r3, #69	@ 0x45
 8002e08:	d164      	bne.n	8002ed4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8002e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e1c:	d106      	bne.n	8002e2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8002e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e26:	3301      	adds	r3, #1
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2a:	e044      	b.n	8002eb6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e32:	d140      	bne.n	8002eb6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	3301      	adds	r3, #1
 8002e38:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8002e3a:	e03c      	b.n	8002eb6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8002e3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	461a      	mov	r2, r3
 8002e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3b30      	subs	r3, #48	@ 0x30
 8002e4e:	4413      	add	r3, r2
 8002e50:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8002e52:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8002e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e58:	4413      	add	r3, r2
 8002e5a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002e5e:	dd27      	ble.n	8002eb0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8002e60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8002e68:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8002e70:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8002ef0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8002e74:	e001      	b.n	8002e7a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8002e76:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8002ef8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8002e7a:	eeb0 0b47 	vmov.f64	d0, d7
 8002e7e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e80:	f000 f898 	bl	8002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002e84:	e05d      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8002e86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8002e8e:	f000 f8a7 	bl	8002fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002e92:	eeb0 7b40 	vmov.f64	d7, d0
 8002e96:	eeb1 7b47 	vneg.f64	d7, d7
 8002e9a:	e003      	b.n	8002ea4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8002e9c:	f000 f8a0 	bl	8002fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ea4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ea8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002eaa:	f000 f883 	bl	8002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002eae:	e048      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe f843 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ba      	bne.n	8002e3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8002ec6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8002ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8002ed4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002ed8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002eda:	4413      	add	r3, r2
 8002edc:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8002ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8002ee6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ee8:	f000 f888 	bl	8002ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002eec:	e029      	b.n	8002f42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8002eee:	bf00      	nop
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	80000000 	.word	0x80000000
	...
 8002f00:	19999999 	.word	0x19999999
 8002f04:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8002f08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002f0c:	f7fd fbbe 	bl	800068c <__aeabi_ul2d>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002f16:	ec43 2b10 	vmov	d0, r2, r3
 8002f1a:	f000 f8ac 	bl	8003076 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8002f1e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8002f22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8002f2a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002f2e:	eeb1 7b47 	vneg.f64	d7, d7
 8002f32:	e001      	b.n	8002f38 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8002f34:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002f38:	eeb0 0b47 	vmov.f64	d0, d7
 8002f3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002f3e:	f000 f839 	bl	8002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8002f42:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002f44:	3780      	adds	r7, #128	@ 0x80
 8002f46:	46bd      	mov	sp, r7
 8002f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f4c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    return _type;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7c1b      	ldrb	r3, [r3, #16]
  }
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	71bb      	strb	r3, [r7, #6]
 8002f72:	4613      	mov	r3, r2
 8002f74:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8002f76:	79ba      	ldrb	r2, [r7, #6]
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d805      	bhi.n	8002f8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f7e:	79fa      	ldrb	r2, [r7, #7]
 8002f80:	797b      	ldrb	r3, [r7, #5]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d801      	bhi.n	8002f8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8002f8a:	2300      	movs	r3, #0
  }
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4804      	ldr	r0, [pc, #16]	@ (8002fb0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8002fa0:	f000 f8b9 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002fa4:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002fa8:	eeb0 0b47 	vmov.f64	d0, d7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	7ff80000 	.word	0x7ff80000

08002fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	ed87 0b00 	vstr	d0, [r7]
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	741a      	strb	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8002fe8:	f000 f895 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002fec:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	7ff00000 	.word	0x7ff00000

08002ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9c1 2300 	strd	r2, r3, [r1]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	741a      	strb	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003046:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 800304a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800304e:	f7fd fb1d 	bl	800068c <__aeabi_ul2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 800305c:	7e3b      	ldrb	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8003062:	2207      	movs	r2, #7
 8003064:	e000      	b.n	8003068 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8003066:	2206      	movs	r2, #6
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003080:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dd1d      	ble.n	80030c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
 800308c:	e016      	b.n	80030bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f860 	bl	8003160 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 80030a0:	eeb0 6b40 	vmov.f64	d6, d0
 80030a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80030a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ac:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	105b      	asrs	r3, r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	3301      	adds	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 80030c2:	e01f      	b.n	8003104 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	425b      	negs	r3, r3
 80030c8:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030ca:	2300      	movs	r3, #0
 80030cc:	75bb      	strb	r3, [r7, #22]
 80030ce:	e016      	b.n	80030fe <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 80030da:	7dbb      	ldrb	r3, [r7, #22]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8a3 	bl	8003228 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 80030e2:	eeb0 6b40 	vmov.f64	d6, d0
 80030e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80030ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030ee:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	105b      	asrs	r3, r3, #1
 80030f6:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030f8:	7dbb      	ldrb	r3, [r7, #22]
 80030fa:	3301      	adds	r3, #1
 80030fc:	75bb      	strb	r3, [r7, #22]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	ec43 2b17 	vmov	d7, r2, r3
  }
 800310c:	eeb0 0b47 	vmov.f64	d0, d7
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8003116:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	469a      	mov	sl, r3
 8003128:	4693      	mov	fp, r2
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	4653      	mov	r3, sl
 8003134:	2200      	movs	r2, #0
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	2000      	movs	r0, #0
 800313a:	460c      	mov	r4, r1
 800313c:	4605      	mov	r5, r0
 800313e:	ea42 0804 	orr.w	r8, r2, r4
 8003142:	ea43 0905 	orr.w	r9, r3, r5
 8003146:	4640      	mov	r0, r8
 8003148:	4649      	mov	r1, r9
 800314a:	f000 f913 	bl	8003374 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 800314e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003152:	eeb0 0b47 	vmov.f64	d0, d7
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003160 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3bf 8f5b 	dmb	ish
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d031      	beq.n	80031e6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 8003182:	481f      	ldr	r0, [pc, #124]	@ (8003200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003184:	f00d fa5b 	bl	801063e <__cxa_guard_acquire>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d026      	beq.n	80031e6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8003198:	491a      	ldr	r1, [pc, #104]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 800319a:	481b      	ldr	r0, [pc, #108]	@ (8003208 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 800319c:	f7ff ffbb 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031a0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031a6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 80031aa:	4919      	ldr	r1, [pc, #100]	@ (8003210 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 80031ac:	4819      	ldr	r0, [pc, #100]	@ (8003214 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 80031ae:	f7ff ffb2 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031b2:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031b8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 80031bc:	4916      	ldr	r1, [pc, #88]	@ (8003218 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 80031be:	4817      	ldr	r0, [pc, #92]	@ (800321c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 80031c0:	f7ff ffa9 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031c4:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031c8:	4b10      	ldr	r3, [pc, #64]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031ca:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 80031ce:	4914      	ldr	r1, [pc, #80]	@ (8003220 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 80031d0:	4814      	ldr	r0, [pc, #80]	@ (8003224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 80031d2:	f7ff ffa0 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031d6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031da:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031dc:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80031e0:	4807      	ldr	r0, [pc, #28]	@ (8003200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80031e2:	f00d fa38 	bl	8010656 <__cxa_guard_release>
    return factors[index];
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	ec43 2b17 	vmov	d7, r2, r3
  }
 80031f6:	eeb0 0b47 	vmov.f64	d0, d7
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	24000534 	.word	0x24000534
 8003204:	b5056e17 	.word	0xb5056e17
 8003208:	4693b8b5 	.word	0x4693b8b5
 800320c:	24000008 	.word	0x24000008
 8003210:	e93ff9f5 	.word	0xe93ff9f5
 8003214:	4d384f03 	.word	0x4d384f03
 8003218:	f9301d32 	.word	0xf9301d32
 800321c:	5a827748 	.word	0x5a827748
 8003220:	7f73bf3c 	.word	0x7f73bf3c
 8003224:	75154fdd 	.word	0x75154fdd

08003228 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003230:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3bf 8f5b 	dmb	ish
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d05e      	beq.n	8003308 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 800324a:	4836      	ldr	r0, [pc, #216]	@ (8003324 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 800324c:	f00d f9f7 	bl	801063e <__cxa_guard_acquire>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d053      	beq.n	8003308 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8003260:	4931      	ldr	r1, [pc, #196]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 8003262:	4832      	ldr	r0, [pc, #200]	@ (800332c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8003264:	f7ff ff57 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003268:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800326c:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800326e:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8003272:	4930      	ldr	r1, [pc, #192]	@ (8003334 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 8003274:	4830      	ldr	r0, [pc, #192]	@ (8003338 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 8003276:	f7ff ff4e 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800327a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800327e:	4b2c      	ldr	r3, [pc, #176]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003280:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 8003284:	492d      	ldr	r1, [pc, #180]	@ (800333c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 8003286:	482e      	ldr	r0, [pc, #184]	@ (8003340 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 8003288:	f7ff ff45 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800328c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003292:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 8003296:	492b      	ldr	r1, [pc, #172]	@ (8003344 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 8003298:	482b      	ldr	r0, [pc, #172]	@ (8003348 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 800329a:	f7ff ff3c 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800329e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032a2:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032a4:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 80032a8:	4928      	ldr	r1, [pc, #160]	@ (800334c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 80032aa:	4829      	ldr	r0, [pc, #164]	@ (8003350 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 80032ac:	f7ff ff33 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032b0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032b6:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 80032ba:	4926      	ldr	r1, [pc, #152]	@ (8003354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 80032bc:	4826      	ldr	r0, [pc, #152]	@ (8003358 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 80032be:	f7ff ff2a 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032c2:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032c8:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 80032cc:	4923      	ldr	r1, [pc, #140]	@ (800335c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 80032ce:	4824      	ldr	r0, [pc, #144]	@ (8003360 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 80032d0:	f7ff ff21 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032d4:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032d8:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032da:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 80032de:	4921      	ldr	r1, [pc, #132]	@ (8003364 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 80032e0:	4821      	ldr	r0, [pc, #132]	@ (8003368 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 80032e2:	f7ff ff18 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032e6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032ec:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 80032f0:	491e      	ldr	r1, [pc, #120]	@ (800336c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 80032f2:	481f      	ldr	r0, [pc, #124]	@ (8003370 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 80032f4:	f7ff ff0f 	bl	8003116 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032f8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032fe:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003302:	4808      	ldr	r0, [pc, #32]	@ (8003324 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003304:	f00d f9a7 	bl	8010656 <__cxa_guard_release>
    return factors[index];
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003318:	eeb0 0b47 	vmov.f64	d0, d7
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24000580 	.word	0x24000580
 8003328:	9999999a 	.word	0x9999999a
 800332c:	3fb99999 	.word	0x3fb99999
 8003330:	24000538 	.word	0x24000538
 8003334:	47ae147b 	.word	0x47ae147b
 8003338:	3f847ae1 	.word	0x3f847ae1
 800333c:	eb1c432d 	.word	0xeb1c432d
 8003340:	3f1a36e2 	.word	0x3f1a36e2
 8003344:	e2308c3a 	.word	0xe2308c3a
 8003348:	3e45798e 	.word	0x3e45798e
 800334c:	97d889bc 	.word	0x97d889bc
 8003350:	3c9cd2b2 	.word	0x3c9cd2b2
 8003354:	d5a8a733 	.word	0xd5a8a733
 8003358:	3949f623 	.word	0x3949f623
 800335c:	44f4a73d 	.word	0x44f4a73d
 8003360:	32a50ffd 	.word	0x32a50ffd
 8003364:	cf8c979d 	.word	0xcf8c979d
 8003368:	255bba08 	.word	0x255bba08
 800336c:	64ac6f43 	.word	0x64ac6f43
 8003370:	0ac80628 	.word	0x0ac80628

08003374 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 800337e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003382:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8003386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338a:	ec43 2b17 	vmov	d7, r2, r3
}
 800338e:	eeb0 0b47 	vmov.f64	d0, d7
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d12d      	bne.n	8003408 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d128      	bne.n	8003408 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::string strJson;
 80033b6:	481d      	ldr	r0, [pc, #116]	@ (800342c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80033b8:	f00d f9d3 	bl	8010762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80033bc:	4622      	mov	r2, r4
 80033be:	f242 7110 	movw	r1, #10000	@ 0x2710
 80033c2:	481b      	ldr	r0, [pc, #108]	@ (8003430 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80033c4:	f7fe fbbf 	bl	8001b46 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80033c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fbab 	bl	8001b28 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80033d2:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fba3 	bl	8001b28 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 80033e8:	f44f 7020 	mov.w	r0, #640	@ 0x280
 80033ec:	f00d f936 	bl	801065c <_Znwj>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461c      	mov	r4, r3
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 fbb6 	bl	8003b70 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003406:	601c      	str	r4, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003414:	4293      	cmp	r3, r2
 8003416:	d105      	bne.n	8003424 <_Z41__static_initialization_and_destruction_0ii+0x88>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800341a:	f000 f817 	bl	800344c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800341e:	4803      	ldr	r0, [pc, #12]	@ (800342c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003420:	f00d f9a6 	bl	8010770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	24000330 	.word	0x24000330
 8003430:	24000348 	.word	0x24000348
 8003434:	24000370 	.word	0x24000370
 8003438:	24000378 	.word	0x24000378
 800343c:	24000000 	.word	0x24000000
 8003440:	24000004 	.word	0x24000004
 8003444:	40013000 	.word	0x40013000
 8003448:	24000530 	.word	0x24000530

0800344c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    freePool();
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f805 	bl	8003464 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 800346c:	687c      	ldr	r4, [r7, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3308      	adds	r3, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fcce 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003478:	4603      	mov	r3, r0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fb66 	bl	8000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8003480:	4603      	mov	r3, r0
 8003482:	4619      	mov	r1, r3
 8003484:	4620      	mov	r0, r4
 8003486:	f000 f804 	bl	8003492 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}

08003492 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fcf8 	bl	8000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80034b6:	2001      	movs	r0, #1
 80034b8:	f7ff ff70 	bl	800339c <_Z41__static_initialization_and_destruction_0ii>
 80034bc:	bd80      	pop	{r7, pc}

080034be <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7ff ff68 	bl	800339c <_Z41__static_initialization_and_destruction_0ii>
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <HAL_MspInit+0x30>)
 80034d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034dc:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <HAL_MspInit+0x30>)
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_MspInit+0x30>)
 80034e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	58024400 	.word	0x58024400

08003504 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0bc      	sub	sp, #240	@ 0xf0
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	22c0      	movs	r2, #192	@ 0xc0
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f00d fd29 	bl	8010f7c <memset>
  if(hsd->Instance==SDMMC1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3c      	ldr	r2, [pc, #240]	@ (8003620 <HAL_SD_MspInit+0x11c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d171      	bne.n	8003618 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003534:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003540:	2300      	movs	r3, #0
 8003542:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	4618      	mov	r0, r3
 800354a:	f003 fefd 	bl	8007348 <HAL_RCCEx_PeriphCLKConfig>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003554:	f7fe fab4 	bl	8001ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003558:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <HAL_SD_MspInit+0x120>)
 800355a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800355e:	4a31      	ldr	r2, [pc, #196]	@ (8003624 <HAL_SD_MspInit+0x120>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003564:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003568:	4b2e      	ldr	r3, [pc, #184]	@ (8003624 <HAL_SD_MspInit+0x120>)
 800356a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800356e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003576:	4b2b      	ldr	r3, [pc, #172]	@ (8003624 <HAL_SD_MspInit+0x120>)
 8003578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800357c:	4a29      	ldr	r2, [pc, #164]	@ (8003624 <HAL_SD_MspInit+0x120>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003586:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <HAL_SD_MspInit+0x120>)
 8003588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003594:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <HAL_SD_MspInit+0x120>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800359a:	4a22      	ldr	r2, [pc, #136]	@ (8003624 <HAL_SD_MspInit+0x120>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <HAL_SD_MspInit+0x120>)
 80035a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80035b2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035cc:	230c      	movs	r3, #12
 80035ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035d6:	4619      	mov	r1, r3
 80035d8:	4813      	ldr	r0, [pc, #76]	@ (8003628 <HAL_SD_MspInit+0x124>)
 80035da:	f002 fce5 	bl	8005fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035de:	2304      	movs	r3, #4
 80035e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035f6:	230c      	movs	r3, #12
 80035f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003600:	4619      	mov	r1, r3
 8003602:	480a      	ldr	r0, [pc, #40]	@ (800362c <HAL_SD_MspInit+0x128>)
 8003604:	f002 fcd0 	bl	8005fa8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	2031      	movs	r0, #49	@ 0x31
 800360e:	f000 ff46 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003612:	2031      	movs	r0, #49	@ 0x31
 8003614:	f000 ff5d 	bl	80044d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003618:	bf00      	nop
 800361a:	37f0      	adds	r7, #240	@ 0xf0
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	52007000 	.word	0x52007000
 8003624:	58024400 	.word	0x58024400
 8003628:	58020800 	.word	0x58020800
 800362c:	58020c00 	.word	0x58020c00

08003630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0ba      	sub	sp, #232	@ 0xe8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	22c0      	movs	r2, #192	@ 0xc0
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f00d fc93 	bl	8010f7c <memset>
  if(huart->Instance==USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	@ (80036f8 <HAL_UART_MspInit+0xc8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d146      	bne.n	80036ee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003660:	f04f 0201 	mov.w	r2, #1
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003672:	f107 0310 	add.w	r3, r7, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f003 fe66 	bl	8007348 <HAL_RCCEx_PeriphCLKConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003682:	f7fe fa1d 	bl	8001ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003686:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 8003688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800368c:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 800368e:	f043 0310 	orr.w	r3, r3, #16
 8003692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003696:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 8003698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036aa:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_UART_MspInit+0xcc>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036dc:	2307      	movs	r3, #7
 80036de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4805      	ldr	r0, [pc, #20]	@ (8003700 <HAL_UART_MspInit+0xd0>)
 80036ea:	f002 fc5d 	bl	8005fa8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80036ee:	bf00      	nop
 80036f0:	37e8      	adds	r7, #232	@ 0xe8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40011000 	.word	0x40011000
 80036fc:	58024400 	.word	0x58024400
 8003700:	58020000 	.word	0x58020000

08003704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <NMI_Handler+0x4>

0800370c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <MemManage_Handler+0x4>

0800371c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <UsageFault_Handler+0x4>

0800372c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800375a:	f000 fd75 	bl	8004248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}

08003762 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003790:	4802      	ldr	r0, [pc, #8]	@ (800379c <SDMMC1_IRQHandler+0x10>)
 8003792:	f006 fd47 	bl	800a224 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	24000420 	.word	0x24000420

080037a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
	return 1;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_kill>:

int _kill(int pid, int sig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ba:	f00d fc81 	bl	80110c0 <__errno>
 80037be:	4603      	mov	r3, r0
 80037c0:	2216      	movs	r2, #22
 80037c2:	601a      	str	r2, [r3, #0]
	return -1;
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_exit>:

void _exit (int status)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ffe7 	bl	80037b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <_exit+0x12>

080037e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e00a      	b.n	800380e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037f8:	f3af 8000 	nop.w
 80037fc:	4601      	mov	r1, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	60ba      	str	r2, [r7, #8]
 8003804:	b2ca      	uxtb	r2, r1
 8003806:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3301      	adds	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	dbf0      	blt.n	80037f8 <_read+0x12>
	}

return len;
 8003816:	687b      	ldr	r3, [r7, #4]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e009      	b.n	8003846 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	60ba      	str	r2, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fd22 	bl	8001284 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	dbf1      	blt.n	8003832 <_write+0x12>
	}
	return len;
 800384e:	687b      	ldr	r3, [r7, #4]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_close>:

int _close(int file)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003880:	605a      	str	r2, [r3, #4]
	return 0;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_isatty>:

int _isatty(int file)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	return 1;
 8003898:	2301      	movs	r3, #1
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
	return 0;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c8:	4a14      	ldr	r2, [pc, #80]	@ (800391c <_sbrk+0x5c>)
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <_sbrk+0x60>)
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d4:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <_sbrk+0x64>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038dc:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <_sbrk+0x64>)
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <_sbrk+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d207      	bcs.n	8003900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f0:	f00d fbe6 	bl	80110c0 <__errno>
 80038f4:	4603      	mov	r3, r0
 80038f6:	220c      	movs	r2, #12
 80038f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e009      	b.n	8003914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003900:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003906:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <_sbrk+0x64>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <_sbrk+0x64>)
 8003910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	24080000 	.word	0x24080000
 8003920:	00000400 	.word	0x00000400
 8003924:	24000584 	.word	0x24000584
 8003928:	24000d90 	.word	0x24000d90

0800392c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003930:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <SystemInit+0xe4>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	4a36      	ldr	r2, [pc, #216]	@ (8003a10 <SystemInit+0xe4>)
 8003938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800393c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003940:	4b34      	ldr	r3, [pc, #208]	@ (8003a14 <SystemInit+0xe8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	2b06      	cmp	r3, #6
 800394a:	d807      	bhi.n	800395c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800394c:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <SystemInit+0xe8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 030f 	bic.w	r3, r3, #15
 8003954:	4a2f      	ldr	r2, [pc, #188]	@ (8003a14 <SystemInit+0xe8>)
 8003956:	f043 0307 	orr.w	r3, r3, #7
 800395a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800395c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <SystemInit+0xec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <SystemInit+0xec>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003968:	4b2b      	ldr	r3, [pc, #172]	@ (8003a18 <SystemInit+0xec>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <SystemInit+0xec>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4929      	ldr	r1, [pc, #164]	@ (8003a18 <SystemInit+0xec>)
 8003974:	4b29      	ldr	r3, [pc, #164]	@ (8003a1c <SystemInit+0xf0>)
 8003976:	4013      	ands	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800397a:	4b26      	ldr	r3, [pc, #152]	@ (8003a14 <SystemInit+0xe8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003986:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <SystemInit+0xe8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 030f 	bic.w	r3, r3, #15
 800398e:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <SystemInit+0xe8>)
 8003990:	f043 0307 	orr.w	r3, r3, #7
 8003994:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <SystemInit+0xec>)
 8003998:	2200      	movs	r2, #0
 800399a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800399c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <SystemInit+0xec>)
 800399e:	2200      	movs	r2, #0
 80039a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <SystemInit+0xec>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <SystemInit+0xec>)
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <SystemInit+0xf4>)
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <SystemInit+0xec>)
 80039b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <SystemInit+0xf8>)
 80039b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039b4:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <SystemInit+0xec>)
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <SystemInit+0xfc>)
 80039b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039ba:	4b17      	ldr	r3, [pc, #92]	@ (8003a18 <SystemInit+0xec>)
 80039bc:	2200      	movs	r2, #0
 80039be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039c0:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <SystemInit+0xec>)
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <SystemInit+0xfc>)
 80039c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039c6:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <SystemInit+0xec>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039cc:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <SystemInit+0xec>)
 80039ce:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <SystemInit+0xfc>)
 80039d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039d2:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <SystemInit+0xec>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <SystemInit+0xec>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a18 <SystemInit+0xec>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <SystemInit+0xec>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <SystemInit+0x100>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <SystemInit+0x104>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f6:	d202      	bcs.n	80039fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <SystemInit+0x108>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <SystemInit+0x10c>)
 8003a00:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003a04:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00
 8003a14:	52002000 	.word	0x52002000
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a20:	02020200 	.word	0x02020200
 8003a24:	01ff0000 	.word	0x01ff0000
 8003a28:	01010280 	.word	0x01010280
 8003a2c:	5c001000 	.word	0x5c001000
 8003a30:	ffff0000 	.word	0xffff0000
 8003a34:	51008108 	.word	0x51008108
 8003a38:	52004000 	.word	0x52004000

08003a3c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <_ZN6ModuleC1Ev+0x2c>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8003a56:	4805      	ldr	r0, [pc, #20]	@ (8003a6c <_ZN6ModuleC1Ev+0x30>)
 8003a58:	f00d f996 	bl	8010d88 <puts>
}
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08011dfc 	.word	0x08011dfc
 8003a6c:	08011cec 	.word	0x08011cec

08003a70 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	4a04      	ldr	r2, [pc, #16]	@ (8003a8c <_ZN6ModuleD1Ev+0x1c>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	08011dfc 	.word	0x08011dfc

08003a90 <_ZN6ModuleD0Ev>:
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffe9 	bl	8003a70 <_ZN6ModuleD1Ev>
 8003a9e:	2114      	movs	r1, #20
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f00c fdca 	bl	801063a <_ZdlPvj>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZN6Module9configureEv>:
void Module::configure(){}
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc ff60 	bl	80009e8 <_ZN9InterruptC1Ev>
 8003b28:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4619      	mov	r1, r3
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f7fc ff65 	bl	8000a08 <_ZN9Interrupt8RegisterEiPS_>
}
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08011e20 	.word	0x08011e20

08003b4c <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff5b 	bl	8003a3c <_ZN6ModuleC1Ev>
 8003b86:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	220a      	movs	r2, #10
 8003baa:	849a      	strh	r2, [r3, #36]	@ 0x24

    // the constructor is called before any DMA and cache setup
    // don't do stuff here
}
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	08011e2c 	.word	0x08011e2c

08003bbc <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b08b      	sub	sp, #44	@ 0x2c
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	4a9c      	ldr	r2, [pc, #624]	@ (8003e4c <_ZN11RemoraComms4initEv+0x290>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f040 8132 	bne.w	8003e44 <_ZN11RemoraComms4initEv+0x288>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be0:	4b9b      	ldr	r3, [pc, #620]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be6:	4a9a      	ldr	r2, [pc, #616]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bf0:	4b97      	ldr	r3, [pc, #604]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bfe:	2310      	movs	r3, #16
 8003c00:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c06:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	4890      	ldr	r0, [pc, #576]	@ (8003e54 <_ZN11RemoraComms4initEv+0x298>)
 8003c14:	f002 f9c8 	bl	8005fa8 <HAL_GPIO_Init>

        interruptPtr = new ModuleInterrupt(this->irq, this);
 8003c18:	2008      	movs	r0, #8
 8003c1a:	f00c fd1f 	bl	801065c <_Znwj>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461c      	mov	r4, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c28:	4619      	mov	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff70 	bl	8003b14 <_ZN15ModuleInterruptC1EiP6Module>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	621c      	str	r4, [r3, #32]
    	HAL_NVIC_SetPriority(this->irq, 5, 0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2105      	movs	r1, #5
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc2b 	bl	800449e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irq);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fc3f 	bl	80044d2 <HAL_NVIC_EnableIRQ>


        printf("Initialising SPI1 slave\n");
 8003c54:	4880      	ldr	r0, [pc, #512]	@ (8003e58 <_ZN11RemoraComms4initEv+0x29c>)
 8003c56:	f00d f897 	bl	8010d88 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2207      	movs	r2, #7
 8003c6a:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3328      	adds	r3, #40	@ 0x28
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f007 fc97 	bl	800b60c <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8003cde:	4b5c      	ldr	r3, [pc, #368]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003ce6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cee:	4b58      	ldr	r3, [pc, #352]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]

		printf("Initialising GPIO for SPI\n");
 8003cfc:	4857      	ldr	r0, [pc, #348]	@ (8003e5c <_ZN11RemoraComms4initEv+0x2a0>)
 8003cfe:	f00d f843 	bl	8010d88 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d08:	4a51      	ldr	r2, [pc, #324]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d12:	4b4f      	ldr	r3, [pc, #316]	@ (8003e50 <_ZN11RemoraComms4initEv+0x294>)
 8003d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d30:	23f0      	movs	r3, #240	@ 0xf0
 8003d32:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d40:	2305      	movs	r3, #5
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4842      	ldr	r0, [pc, #264]	@ (8003e54 <_ZN11RemoraComms4initEv+0x298>)
 8003d4c:	f002 f92c 	bl	8005fa8 <HAL_GPIO_Init>

        printf("Initialising DMA for SPI\n");
 8003d50:	4843      	ldr	r0, [pc, #268]	@ (8003e60 <_ZN11RemoraComms4initEv+0x2a4>)
 8003d52:	f00d f819 	bl	8010d88 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a42      	ldr	r2, [pc, #264]	@ (8003e64 <_ZN11RemoraComms4initEv+0x2a8>)
 8003d5a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2225      	movs	r2, #37	@ 0x25
 8003d62:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d7c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d96:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fc21 	bl	80045f8 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	@ (8003e68 <_ZN11RemoraComms4initEv+0x2ac>)
 8003dd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2226      	movs	r2, #38	@ 0x26
 8003dda:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2240      	movs	r2, #64	@ 0x40
 8003de2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003df4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e0e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	33b0      	adds	r3, #176	@ 0xb0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fbe6 	bl	80045f8 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    }
}
 8003e44:	bf00      	nop
 8003e46:	372c      	adds	r7, #44	@ 0x2c
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	40013000 	.word	0x40013000
 8003e50:	58024400 	.word	0x58024400
 8003e54:	58020000 	.word	0x58020000
 8003e58:	08011d44 	.word	0x08011d44
 8003e5c:	08011d5c 	.word	0x08011d5c
 8003e60:	08011d78 	.word	0x08011d78
 8003e64:	40020028 	.word	0x40020028
 8003e68:	40020010 	.word	0x40020010

08003e6c <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    this->ptrTxData->header = PRU_DATA;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4a32      	ldr	r2, [pc, #200]	@ (8003f44 <_ZN11RemoraComms5startEv+0xd8>)
 8003e7a:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f023 031f 	bic.w	r3, r3, #31
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	2340      	movs	r3, #64	@ 0x40
 8003e88:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dd1d      	ble.n	8003ecc <_ZN11RemoraComms5startEv+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 021f 	and.w	r2, r3, #31
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea0:	f3bf 8f4f 	dsb	sy
}
 8003ea4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003ea6:	4a28      	ldr	r2, [pc, #160]	@ (8003f48 <_ZN11RemoraComms5startEv+0xdc>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3320      	adds	r3, #32
 8003eb2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b20      	subs	r3, #32
 8003eb8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dcf2      	bgt.n	8003ea6 <_ZN11RemoraComms5startEv+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ec0:	f3bf 8f4f 	dsb	sy
}
 8003ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ec6:	f3bf 8f6f 	isb	sy
}
 8003eca:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8003ecc:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003ed4:	f023 031f 	bic.w	r3, r3, #31
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eda:	2340      	movs	r3, #64	@ 0x40
 8003edc:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dd1d      	ble.n	8003f20 <_ZN11RemoraComms5startEv+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	f003 021f 	and.w	r2, r3, #31
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	4413      	add	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef4:	f3bf 8f4f 	dsb	sy
}
 8003ef8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003efa:	4a13      	ldr	r2, [pc, #76]	@ (8003f48 <_ZN11RemoraComms5startEv+0xdc>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3320      	adds	r3, #32
 8003f06:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3b20      	subs	r3, #32
 8003f0c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dcf2      	bgt.n	8003efa <_ZN11RemoraComms5startEv+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f14:	f3bf 8f4f 	dsb	sy
}
 8003f18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f1a:	f3bf 8f6f 	isb	sy
}
 8003f1e:	bf00      	nop
}
 8003f20:	bf00      	nop
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8003f34:	2340      	movs	r3, #64	@ 0x40
 8003f36:	f007 fc97 	bl	800b868 <HAL_SPI_TransmitReceive_DMA>
}
 8003f3a:	bf00      	nop
 8003f3c:	3728      	adds	r7, #40	@ 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	64617461 	.word	0x64617461
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <_ZN11RemoraComms15handleInterruptEv>:


void RemoraComms::handleInterrupt()
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	@ 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f023 031f 	bic.w	r3, r3, #31
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	2340      	movs	r3, #64	@ 0x40
 8003f60:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dd1d      	ble.n	8003fa4 <_ZN11RemoraComms15handleInterruptEv+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4413      	add	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f78:	f3bf 8f4f 	dsb	sy
}
 8003f7c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80040a8 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3b20      	subs	r3, #32
 8003f90:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dcf2      	bgt.n	8003f7e <_ZN11RemoraComms15handleInterruptEv+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f98:	f3bf 8f4f 	dsb	sy
}
 8003f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f9e:	f3bf 8f6f 	isb	sy
}
 8003fa2:	bf00      	nop
}
 8003fa4:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003fac:	f023 031f 	bic.w	r3, r3, #31
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb2:	2340      	movs	r3, #64	@ 0x40
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	dd1d      	ble.n	8003ff8 <_ZN11RemoraComms15handleInterruptEv+0xac>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	f003 021f 	and.w	r2, r3, #31
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	4413      	add	r3, r2
 8003fc6:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fcc:	f3bf 8f4f 	dsb	sy
}
 8003fd0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003fd2:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3320      	adds	r3, #32
 8003fde:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	3b20      	subs	r3, #32
 8003fe4:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dcf2      	bgt.n	8003fd2 <_ZN11RemoraComms15handleInterruptEv+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fec:	f3bf 8f4f 	dsb	sy
}
 8003ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ff2:	f3bf 8f6f 	isb	sy
}
 8003ff6:	bf00      	nop
}
 8003ff8:	bf00      	nop

	switch (this->spiRxBuffer.header)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8004000:	4a2a      	ldr	r2, [pc, #168]	@ (80040ac <_ZN11RemoraComms15handleInterruptEv+0x160>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <_ZN11RemoraComms15handleInterruptEv+0xc2>
 8004006:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <_ZN11RemoraComms15handleInterruptEv+0xd4>
 800400c:	e02a      	b.n	8004064 <_ZN11RemoraComms15handleInterruptEv+0x118>
	{
	  case PRU_READ:
		this->SPIdata = true;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		// READ so do nothing with the received data
		break;
 800401e:	e032      	b.n	8004086 <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  case PRU_WRITE:
		this->SPIdata = true;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  __ASM volatile ("cpsid i" : : : "memory");
 8004030:	b672      	cpsid	i
}
 8004032:	bf00      	nop

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004038:	e00e      	b.n	8004058 <_ZN11RemoraComms15handleInterruptEv+0x10c>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004042:	440b      	add	r3, r1
 8004044:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004048:	7819      	ldrb	r1, [r3, #0]
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404c:	4413      	add	r3, r2
 800404e:	460a      	mov	r2, r1
 8004050:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004054:	3301      	adds	r3, #1
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405a:	2b3f      	cmp	r3, #63	@ 0x3f
 800405c:	dded      	ble.n	800403a <_ZN11RemoraComms15handleInterruptEv+0xee>
  __ASM volatile ("cpsie i" : : : "memory");
 800405e:	b662      	cpsie	i
}
 8004060:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 8004062:	e010      	b.n	8004086 <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  default:
		this->rejectCnt++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800406a:	3301      	adds	r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		if (this->rejectCnt > 5)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800407a:	2b05      	cmp	r3, #5
 800407c:	d903      	bls.n	8004086 <_ZN11RemoraComms15handleInterruptEv+0x13a>
		{
			this->SPIdataError = true;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
		}
		// reset SPI somehow
	}

    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4619      	mov	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8004098:	2340      	movs	r3, #64	@ 0x40
 800409a:	f007 fbe5 	bl	800b868 <HAL_SPI_TransmitReceive_DMA>
}
 800409e:	bf00      	nop
 80040a0:	3730      	adds	r7, #48	@ 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00
 80040ac:	72656164 	.word	0x72656164
 80040b0:	77726974 	.word	0x77726974

080040b4 <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	4a05      	ldr	r2, [pc, #20]	@ (80040e8 <_ZN11RemoraCommsD1Ev+0x20>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fcc9 	bl	8003a70 <_ZN6ModuleD1Ev>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	08011e2c 	.word	0x08011e2c

080040ec <_ZN11RemoraCommsD0Ev>:
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ffe7 	bl	80040c8 <_ZN11RemoraCommsD1Ev>
 80040fa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f00c fa9b 	bl	801063a <_ZdlPvj>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004114:	f7ff fc0a 	bl	800392c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004118:	480c      	ldr	r0, [pc, #48]	@ (800414c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800411a:	490d      	ldr	r1, [pc, #52]	@ (8004150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800411c:	4a0d      	ldr	r2, [pc, #52]	@ (8004154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800411e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004120:	e002      	b.n	8004128 <LoopCopyDataInit>

08004122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004126:	3304      	adds	r3, #4

08004128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800412a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800412c:	d3f9      	bcc.n	8004122 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412e:	4a0a      	ldr	r2, [pc, #40]	@ (8004158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004130:	4c0a      	ldr	r4, [pc, #40]	@ (800415c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004134:	e001      	b.n	800413a <LoopFillZerobss>

08004136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004138:	3204      	adds	r2, #4

0800413a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800413a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800413c:	d3fb      	bcc.n	8004136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800413e:	f00c ffc5 	bl	80110cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004142:	f7fd f9f1 	bl	8001528 <main>
  bx  lr
 8004146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004148:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800414c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004150:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8004154:	08011f8c 	.word	0x08011f8c
  ldr r2, =_sbss
 8004158:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 800415c:	24000d8c 	.word	0x24000d8c

08004160 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC3_IRQHandler>
	...

08004164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416a:	2003      	movs	r0, #3
 800416c:	f000 f98c 	bl	8004488 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004170:	f002 ff14 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_Init+0x68>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	4913      	ldr	r1, [pc, #76]	@ (80041d0 <HAL_Init+0x6c>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <HAL_Init+0x68>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4a0e      	ldr	r2, [pc, #56]	@ (80041d0 <HAL_Init+0x6c>)
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	4a0b      	ldr	r2, [pc, #44]	@ (80041d4 <HAL_Init+0x70>)
 80041a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a8:	4a0b      	ldr	r2, [pc, #44]	@ (80041d8 <HAL_Init+0x74>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ae:	200f      	movs	r0, #15
 80041b0:	f000 f814 	bl	80041dc <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e002      	b.n	80041c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041be:	f7ff f987 	bl	80034d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	58024400 	.word	0x58024400
 80041d0:	08011de4 	.word	0x08011de4
 80041d4:	24000054 	.word	0x24000054
 80041d8:	24000050 	.word	0x24000050

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041e4:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_InitTick+0x60>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e021      	b.n	8004234 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041f0:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <HAL_InitTick+0x64>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <HAL_InitTick+0x60>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f971 	bl	80044ee <HAL_SYSTICK_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e00e      	b.n	8004234 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d80a      	bhi.n	8004232 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800421c:	2200      	movs	r2, #0
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	f000 f93b 	bl	800449e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004228:	4a06      	ldr	r2, [pc, #24]	@ (8004244 <HAL_InitTick+0x68>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	2400005c 	.word	0x2400005c
 8004240:	24000050 	.word	0x24000050
 8004244:	24000058 	.word	0x24000058

08004248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_IncTick+0x20>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_IncTick+0x24>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4413      	add	r3, r2
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <HAL_IncTick+0x24>)
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	2400005c 	.word	0x2400005c
 800426c:	24000588 	.word	0x24000588

08004270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return uwTick;
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_GetTick+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	24000588 	.word	0x24000588

08004288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7ff ffee 	bl	8004270 <HAL_GetTick>
 8004294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d005      	beq.n	80042ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_Delay+0x44>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ae:	bf00      	nop
 80042b0:	f7ff ffde 	bl	8004270 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d8f7      	bhi.n	80042b0 <HAL_Delay+0x28>
  {
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2400005c 	.word	0x2400005c

080042d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80042d4:	4b03      	ldr	r3, [pc, #12]	@ (80042e4 <HAL_GetREVID+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0c1b      	lsrs	r3, r3, #16
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	5c001000 	.word	0x5c001000

080042e8 <__NVIC_SetPriorityGrouping>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <__NVIC_SetPriorityGrouping+0x40>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	4313      	orrs	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <__NVIC_SetPriorityGrouping+0x40>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	60d3      	str	r3, [r2, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00
 800432c:	05fa0000 	.word	0x05fa0000

08004330 <__NVIC_GetPriorityGrouping>:
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	@ (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	@ (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	490c      	ldr	r1, [pc, #48]	@ (80043d4 <__NVIC_SetPriority+0x4c>)
 80043a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <__NVIC_SetPriority+0x50>)
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b04      	subs	r3, #4
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	@ 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	bf28      	it	cs
 80043fa:	2304      	movcs	r3, #4
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3304      	adds	r3, #4
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b03      	subs	r3, #3
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004424:	f04f 31ff 	mov.w	r1, #4294967295
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43d9      	mvns	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	4313      	orrs	r3, r2
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	@ 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004454:	d301      	bcc.n	800445a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004456:	2301      	movs	r3, #1
 8004458:	e00f      	b.n	800447a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445a:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <SysTick_Config+0x40>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004462:	210f      	movs	r1, #15
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	f7ff ff8e 	bl	8004388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <SysTick_Config+0x40>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004472:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <SysTick_Config+0x40>)
 8004474:	2207      	movs	r2, #7
 8004476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000e010 	.word	0xe000e010

08004488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff29 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ac:	f7ff ff40 	bl	8004330 <__NVIC_GetPriorityGrouping>
 80044b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff90 	bl	80043dc <NVIC_EncodePriority>
 80044bc:	4602      	mov	r2, r0
 80044be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff5f 	bl	8004388 <__NVIC_SetPriority>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff33 	bl	800434c <__NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffa4 	bl	8004444 <SysTick_Config>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800450c:	f3bf 8f5f 	dmb	sy
}
 8004510:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004512:	4b07      	ldr	r3, [pc, #28]	@ (8004530 <HAL_MPU_Disable+0x28>)
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	4a06      	ldr	r2, [pc, #24]	@ (8004530 <HAL_MPU_Disable+0x28>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800451e:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_MPU_Disable+0x2c>)
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000ed00 	.word	0xe000ed00
 8004534:	e000ed90 	.word	0xe000ed90

08004538 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004540:	4a0b      	ldr	r2, [pc, #44]	@ (8004570 <HAL_MPU_Enable+0x38>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800454a:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <HAL_MPU_Enable+0x3c>)
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	4a09      	ldr	r2, [pc, #36]	@ (8004574 <HAL_MPU_Enable+0x3c>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004556:	f3bf 8f4f 	dsb	sy
}
 800455a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800455c:	f3bf 8f6f 	isb	sy
}
 8004560:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000ed90 	.word	0xe000ed90
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	785a      	ldrb	r2, [r3, #1]
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_MPU_ConfigRegion+0x7c>)
 8004586:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <HAL_MPU_ConfigRegion+0x7c>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_MPU_ConfigRegion+0x7c>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004594:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <HAL_MPU_ConfigRegion+0x7c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7b1b      	ldrb	r3, [r3, #12]
 80045a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7adb      	ldrb	r3, [r3, #11]
 80045a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7a9b      	ldrb	r3, [r3, #10]
 80045ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80045b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7b5b      	ldrb	r3, [r3, #13]
 80045b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80045b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7b9b      	ldrb	r3, [r3, #14]
 80045be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80045c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7bdb      	ldrb	r3, [r3, #15]
 80045c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7a5b      	ldrb	r3, [r3, #9]
 80045ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7a1b      	ldrb	r3, [r3, #8]
 80045d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045e0:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045e4:	6113      	str	r3, [r2, #16]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	e000ed90 	.word	0xe000ed90

080045f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff fe36 	bl	8004270 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e316      	b.n	8004c3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a66      	ldr	r2, [pc, #408]	@ (80047b0 <HAL_DMA_Init+0x1b8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d04a      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a65      	ldr	r2, [pc, #404]	@ (80047b4 <HAL_DMA_Init+0x1bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d045      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a63      	ldr	r2, [pc, #396]	@ (80047b8 <HAL_DMA_Init+0x1c0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d040      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a62      	ldr	r2, [pc, #392]	@ (80047bc <HAL_DMA_Init+0x1c4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d03b      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a60      	ldr	r2, [pc, #384]	@ (80047c0 <HAL_DMA_Init+0x1c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d036      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5f      	ldr	r2, [pc, #380]	@ (80047c4 <HAL_DMA_Init+0x1cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d031      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_DMA_Init+0x1d0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02c      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5c      	ldr	r2, [pc, #368]	@ (80047cc <HAL_DMA_Init+0x1d4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d027      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5a      	ldr	r2, [pc, #360]	@ (80047d0 <HAL_DMA_Init+0x1d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a59      	ldr	r2, [pc, #356]	@ (80047d4 <HAL_DMA_Init+0x1dc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01d      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a57      	ldr	r2, [pc, #348]	@ (80047d8 <HAL_DMA_Init+0x1e0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d018      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_DMA_Init+0x1e4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a54      	ldr	r2, [pc, #336]	@ (80047e0 <HAL_DMA_Init+0x1e8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a53      	ldr	r2, [pc, #332]	@ (80047e4 <HAL_DMA_Init+0x1ec>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a51      	ldr	r2, [pc, #324]	@ (80047e8 <HAL_DMA_Init+0x1f0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_DMA_Init+0xb8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a50      	ldr	r2, [pc, #320]	@ (80047ec <HAL_DMA_Init+0x1f4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_DMA_Init+0xbc>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_DMA_Init+0xbe>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 813b 	beq.w	8004932 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <HAL_DMA_Init+0x1b8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d04a      	beq.n	800476c <HAL_DMA_Init+0x174>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a36      	ldr	r2, [pc, #216]	@ (80047b4 <HAL_DMA_Init+0x1bc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d045      	beq.n	800476c <HAL_DMA_Init+0x174>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a34      	ldr	r2, [pc, #208]	@ (80047b8 <HAL_DMA_Init+0x1c0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d040      	beq.n	800476c <HAL_DMA_Init+0x174>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a33      	ldr	r2, [pc, #204]	@ (80047bc <HAL_DMA_Init+0x1c4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d03b      	beq.n	800476c <HAL_DMA_Init+0x174>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a31      	ldr	r2, [pc, #196]	@ (80047c0 <HAL_DMA_Init+0x1c8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d036      	beq.n	800476c <HAL_DMA_Init+0x174>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a30      	ldr	r2, [pc, #192]	@ (80047c4 <HAL_DMA_Init+0x1cc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d031      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <HAL_DMA_Init+0x1d0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d02c      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2d      	ldr	r2, [pc, #180]	@ (80047cc <HAL_DMA_Init+0x1d4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d027      	beq.n	800476c <HAL_DMA_Init+0x174>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2b      	ldr	r2, [pc, #172]	@ (80047d0 <HAL_DMA_Init+0x1d8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <HAL_DMA_Init+0x1dc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01d      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <HAL_DMA_Init+0x1e0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_DMA_Init+0x174>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_DMA_Init+0x1e4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a25      	ldr	r2, [pc, #148]	@ (80047e0 <HAL_DMA_Init+0x1e8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_DMA_Init+0x174>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <HAL_DMA_Init+0x1ec>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a22      	ldr	r2, [pc, #136]	@ (80047e8 <HAL_DMA_Init+0x1f0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_DMA_Init+0x174>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a21      	ldr	r2, [pc, #132]	@ (80047ec <HAL_DMA_Init+0x1f4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <HAL_DMA_Init+0x186>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e007      	b.n	800478e <HAL_DMA_Init+0x196>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800478e:	e02f      	b.n	80047f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004790:	f7ff fd6e 	bl	8004270 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b05      	cmp	r3, #5
 800479c:	d928      	bls.n	80047f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2203      	movs	r2, #3
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e246      	b.n	8004c3e <HAL_DMA_Init+0x646>
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1c8      	bne.n	8004790 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4b83      	ldr	r3, [pc, #524]	@ (8004a18 <HAL_DMA_Init+0x420>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004816:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004822:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	2b04      	cmp	r3, #4
 8004842:	d107      	bne.n	8004854 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	4313      	orrs	r3, r2
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004854:	4b71      	ldr	r3, [pc, #452]	@ (8004a1c <HAL_DMA_Init+0x424>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b71      	ldr	r3, [pc, #452]	@ (8004a20 <HAL_DMA_Init+0x428>)
 800485a:	4013      	ands	r3, r2
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004860:	d328      	bcc.n	80048b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b28      	cmp	r3, #40	@ 0x28
 8004868:	d903      	bls.n	8004872 <HAL_DMA_Init+0x27a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004870:	d917      	bls.n	80048a2 <HAL_DMA_Init+0x2aa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b3e      	cmp	r3, #62	@ 0x3e
 8004878:	d903      	bls.n	8004882 <HAL_DMA_Init+0x28a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b42      	cmp	r3, #66	@ 0x42
 8004880:	d90f      	bls.n	80048a2 <HAL_DMA_Init+0x2aa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b46      	cmp	r3, #70	@ 0x46
 8004888:	d903      	bls.n	8004892 <HAL_DMA_Init+0x29a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b48      	cmp	r3, #72	@ 0x48
 8004890:	d907      	bls.n	80048a2 <HAL_DMA_Init+0x2aa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b4e      	cmp	r3, #78	@ 0x4e
 8004898:	d905      	bls.n	80048a6 <HAL_DMA_Init+0x2ae>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b52      	cmp	r3, #82	@ 0x52
 80048a0:	d801      	bhi.n	80048a6 <HAL_DMA_Init+0x2ae>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_DMA_Init+0x2b0>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d117      	bne.n	800490e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f9cf 	bl	8005c94 <DMA_CheckFifoParam>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2240      	movs	r2, #64	@ 0x40
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e197      	b.n	8004c3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f001 f90a 	bl	8005b30 <DMA_CalcBaseAndBitshift>
 800491c:	4603      	mov	r3, r0
 800491e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	223f      	movs	r2, #63	@ 0x3f
 800492a:	409a      	lsls	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e0cd      	b.n	8004ace <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3b      	ldr	r2, [pc, #236]	@ (8004a24 <HAL_DMA_Init+0x42c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a39      	ldr	r2, [pc, #228]	@ (8004a28 <HAL_DMA_Init+0x430>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a38      	ldr	r2, [pc, #224]	@ (8004a2c <HAL_DMA_Init+0x434>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a36      	ldr	r2, [pc, #216]	@ (8004a30 <HAL_DMA_Init+0x438>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a35      	ldr	r2, [pc, #212]	@ (8004a34 <HAL_DMA_Init+0x43c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a33      	ldr	r2, [pc, #204]	@ (8004a38 <HAL_DMA_Init+0x440>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a32      	ldr	r2, [pc, #200]	@ (8004a3c <HAL_DMA_Init+0x444>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_Init+0x38a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a30      	ldr	r2, [pc, #192]	@ (8004a40 <HAL_DMA_Init+0x448>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_DMA_Init+0x38e>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_DMA_Init+0x390>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8097 	beq.w	8004abc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a24      	ldr	r2, [pc, #144]	@ (8004a24 <HAL_DMA_Init+0x42c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d021      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a22      	ldr	r2, [pc, #136]	@ (8004a28 <HAL_DMA_Init+0x430>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01c      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a21      	ldr	r2, [pc, #132]	@ (8004a2c <HAL_DMA_Init+0x434>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d017      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a30 <HAL_DMA_Init+0x438>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d012      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <HAL_DMA_Init+0x43c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00d      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <HAL_DMA_Init+0x440>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d008      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1b      	ldr	r2, [pc, #108]	@ (8004a3c <HAL_DMA_Init+0x444>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <HAL_DMA_Init+0x3e4>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a19      	ldr	r2, [pc, #100]	@ (8004a40 <HAL_DMA_Init+0x448>)
 80049da:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <HAL_DMA_Init+0x44c>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d021      	beq.n	8004a48 <HAL_DMA_Init+0x450>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b80      	cmp	r3, #128	@ 0x80
 8004a0a:	d102      	bne.n	8004a12 <HAL_DMA_Init+0x41a>
 8004a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a10:	e01b      	b.n	8004a4a <HAL_DMA_Init+0x452>
 8004a12:	2300      	movs	r3, #0
 8004a14:	e019      	b.n	8004a4a <HAL_DMA_Init+0x452>
 8004a16:	bf00      	nop
 8004a18:	fe10803f 	.word	0xfe10803f
 8004a1c:	5c001000 	.word	0x5c001000
 8004a20:	ffff0000 	.word	0xffff0000
 8004a24:	58025408 	.word	0x58025408
 8004a28:	5802541c 	.word	0x5802541c
 8004a2c:	58025430 	.word	0x58025430
 8004a30:	58025444 	.word	0x58025444
 8004a34:	58025458 	.word	0x58025458
 8004a38:	5802546c 	.word	0x5802546c
 8004a3c:	58025480 	.word	0x58025480
 8004a40:	58025494 	.word	0x58025494
 8004a44:	fffe000f 	.word	0xfffe000f
 8004a48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c48 <HAL_DMA_Init+0x650>)
 8004a90:	4413      	add	r3, r2
 8004a92:	4a6e      	ldr	r2, [pc, #440]	@ (8004c4c <HAL_DMA_Init+0x654>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 f845 	bl	8005b30 <DMA_CalcBaseAndBitshift>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e008      	b.n	8004ace <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2240      	movs	r2, #64	@ 0x40
 8004ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0b7      	b.n	8004c3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c50 <HAL_DMA_Init+0x658>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d072      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c54 <HAL_DMA_Init+0x65c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d06d      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c58 <HAL_DMA_Init+0x660>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d068      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c5c <HAL_DMA_Init+0x664>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d063      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a59      	ldr	r2, [pc, #356]	@ (8004c60 <HAL_DMA_Init+0x668>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a57      	ldr	r2, [pc, #348]	@ (8004c64 <HAL_DMA_Init+0x66c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d059      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a56      	ldr	r2, [pc, #344]	@ (8004c68 <HAL_DMA_Init+0x670>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d054      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a54      	ldr	r2, [pc, #336]	@ (8004c6c <HAL_DMA_Init+0x674>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04f      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a53      	ldr	r2, [pc, #332]	@ (8004c70 <HAL_DMA_Init+0x678>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	@ (8004c74 <HAL_DMA_Init+0x67c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a50      	ldr	r2, [pc, #320]	@ (8004c78 <HAL_DMA_Init+0x680>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a4e      	ldr	r2, [pc, #312]	@ (8004c7c <HAL_DMA_Init+0x684>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c80 <HAL_DMA_Init+0x688>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a4b      	ldr	r2, [pc, #300]	@ (8004c84 <HAL_DMA_Init+0x68c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c88 <HAL_DMA_Init+0x690>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a48      	ldr	r2, [pc, #288]	@ (8004c8c <HAL_DMA_Init+0x694>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a47      	ldr	r2, [pc, #284]	@ (8004c90 <HAL_DMA_Init+0x698>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a45      	ldr	r2, [pc, #276]	@ (8004c94 <HAL_DMA_Init+0x69c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a44      	ldr	r2, [pc, #272]	@ (8004c98 <HAL_DMA_Init+0x6a0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a42      	ldr	r2, [pc, #264]	@ (8004c9c <HAL_DMA_Init+0x6a4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ca0 <HAL_DMA_Init+0x6a8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca4 <HAL_DMA_Init+0x6ac>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca8 <HAL_DMA_Init+0x6b0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMA_Init+0x5c6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cac <HAL_DMA_Init+0x6b4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_DMA_Init+0x5ca>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <HAL_DMA_Init+0x5cc>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d032      	beq.n	8004c2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 f8df 	bl	8005d8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b80      	cmp	r3, #128	@ 0x80
 8004bd4:	d102      	bne.n	8004bdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <HAL_DMA_Init+0x624>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d80c      	bhi.n	8004c1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 f95c 	bl	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	e008      	b.n	8004c2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	a7fdabf8 	.word	0xa7fdabf8
 8004c4c:	cccccccd 	.word	0xcccccccd
 8004c50:	40020010 	.word	0x40020010
 8004c54:	40020028 	.word	0x40020028
 8004c58:	40020040 	.word	0x40020040
 8004c5c:	40020058 	.word	0x40020058
 8004c60:	40020070 	.word	0x40020070
 8004c64:	40020088 	.word	0x40020088
 8004c68:	400200a0 	.word	0x400200a0
 8004c6c:	400200b8 	.word	0x400200b8
 8004c70:	40020410 	.word	0x40020410
 8004c74:	40020428 	.word	0x40020428
 8004c78:	40020440 	.word	0x40020440
 8004c7c:	40020458 	.word	0x40020458
 8004c80:	40020470 	.word	0x40020470
 8004c84:	40020488 	.word	0x40020488
 8004c88:	400204a0 	.word	0x400204a0
 8004c8c:	400204b8 	.word	0x400204b8
 8004c90:	58025408 	.word	0x58025408
 8004c94:	5802541c 	.word	0x5802541c
 8004c98:	58025430 	.word	0x58025430
 8004c9c:	58025444 	.word	0x58025444
 8004ca0:	58025458 	.word	0x58025458
 8004ca4:	5802546c 	.word	0x5802546c
 8004ca8:	58025480 	.word	0x58025480
 8004cac:	58025494 	.word	0x58025494

08004cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e226      	b.n	800511a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_Start_IT+0x2a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e21f      	b.n	800511a <HAL_DMA_Start_IT+0x46a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 820a 	bne.w	8005104 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a68      	ldr	r2, [pc, #416]	@ (8004ea4 <HAL_DMA_Start_IT+0x1f4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d04a      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a66      	ldr	r2, [pc, #408]	@ (8004ea8 <HAL_DMA_Start_IT+0x1f8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d045      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a65      	ldr	r2, [pc, #404]	@ (8004eac <HAL_DMA_Start_IT+0x1fc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d040      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a63      	ldr	r2, [pc, #396]	@ (8004eb0 <HAL_DMA_Start_IT+0x200>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d03b      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a62      	ldr	r2, [pc, #392]	@ (8004eb4 <HAL_DMA_Start_IT+0x204>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d036      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a60      	ldr	r2, [pc, #384]	@ (8004eb8 <HAL_DMA_Start_IT+0x208>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d031      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8004ebc <HAL_DMA_Start_IT+0x20c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d02c      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec0 <HAL_DMA_Start_IT+0x210>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d027      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec4 <HAL_DMA_Start_IT+0x214>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec8 <HAL_DMA_Start_IT+0x218>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01d      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a59      	ldr	r2, [pc, #356]	@ (8004ecc <HAL_DMA_Start_IT+0x21c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a57      	ldr	r2, [pc, #348]	@ (8004ed0 <HAL_DMA_Start_IT+0x220>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a56      	ldr	r2, [pc, #344]	@ (8004ed4 <HAL_DMA_Start_IT+0x224>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a54      	ldr	r2, [pc, #336]	@ (8004ed8 <HAL_DMA_Start_IT+0x228>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a53      	ldr	r2, [pc, #332]	@ (8004edc <HAL_DMA_Start_IT+0x22c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a51      	ldr	r2, [pc, #324]	@ (8004ee0 <HAL_DMA_Start_IT+0x230>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <HAL_DMA_Start_IT+0x100>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e007      	b.n	8004dc0 <HAL_DMA_Start_IT+0x110>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fd06 	bl	80057d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a34      	ldr	r2, [pc, #208]	@ (8004ea4 <HAL_DMA_Start_IT+0x1f4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d04a      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <HAL_DMA_Start_IT+0x1f8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d045      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a31      	ldr	r2, [pc, #196]	@ (8004eac <HAL_DMA_Start_IT+0x1fc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d040      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a30      	ldr	r2, [pc, #192]	@ (8004eb0 <HAL_DMA_Start_IT+0x200>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d03b      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb4 <HAL_DMA_Start_IT+0x204>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d036      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <HAL_DMA_Start_IT+0x208>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d031      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <HAL_DMA_Start_IT+0x20c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02c      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec0 <HAL_DMA_Start_IT+0x210>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d027      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a28      	ldr	r2, [pc, #160]	@ (8004ec4 <HAL_DMA_Start_IT+0x214>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	@ (8004ec8 <HAL_DMA_Start_IT+0x218>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a25      	ldr	r2, [pc, #148]	@ (8004ecc <HAL_DMA_Start_IT+0x21c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <HAL_DMA_Start_IT+0x220>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_DMA_Start_IT+0x224>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_DMA_Start_IT+0x228>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_DMA_Start_IT+0x22c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_DMA_Start_IT+0x1bc>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_DMA_Start_IT+0x230>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_DMA_Start_IT+0x1c0>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_Start_IT+0x1c2>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 021e 	bic.w	r2, r3, #30
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0216 	orr.w	r2, r2, #22
 8004e88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03e      	beq.n	8004f10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0208 	orr.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e035      	b.n	8004f10 <HAL_DMA_Start_IT+0x260>
 8004ea4:	40020010 	.word	0x40020010
 8004ea8:	40020028 	.word	0x40020028
 8004eac:	40020040 	.word	0x40020040
 8004eb0:	40020058 	.word	0x40020058
 8004eb4:	40020070 	.word	0x40020070
 8004eb8:	40020088 	.word	0x40020088
 8004ebc:	400200a0 	.word	0x400200a0
 8004ec0:	400200b8 	.word	0x400200b8
 8004ec4:	40020410 	.word	0x40020410
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	40020440 	.word	0x40020440
 8004ed0:	40020458 	.word	0x40020458
 8004ed4:	40020470 	.word	0x40020470
 8004ed8:	40020488 	.word	0x40020488
 8004edc:	400204a0 	.word	0x400204a0
 8004ee0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 020e 	bic.w	r2, r3, #14
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 020a 	orr.w	r2, r2, #10
 8004ef6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0204 	orr.w	r2, r2, #4
 8004f0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a83      	ldr	r2, [pc, #524]	@ (8005124 <HAL_DMA_Start_IT+0x474>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d072      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a82      	ldr	r2, [pc, #520]	@ (8005128 <HAL_DMA_Start_IT+0x478>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d06d      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a80      	ldr	r2, [pc, #512]	@ (800512c <HAL_DMA_Start_IT+0x47c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d068      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7f      	ldr	r2, [pc, #508]	@ (8005130 <HAL_DMA_Start_IT+0x480>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d063      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7d      	ldr	r2, [pc, #500]	@ (8005134 <HAL_DMA_Start_IT+0x484>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d05e      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7c      	ldr	r2, [pc, #496]	@ (8005138 <HAL_DMA_Start_IT+0x488>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d059      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a7a      	ldr	r2, [pc, #488]	@ (800513c <HAL_DMA_Start_IT+0x48c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d054      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a79      	ldr	r2, [pc, #484]	@ (8005140 <HAL_DMA_Start_IT+0x490>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04f      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a77      	ldr	r2, [pc, #476]	@ (8005144 <HAL_DMA_Start_IT+0x494>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d04a      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a76      	ldr	r2, [pc, #472]	@ (8005148 <HAL_DMA_Start_IT+0x498>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d045      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a74      	ldr	r2, [pc, #464]	@ (800514c <HAL_DMA_Start_IT+0x49c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d040      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a73      	ldr	r2, [pc, #460]	@ (8005150 <HAL_DMA_Start_IT+0x4a0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d03b      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a71      	ldr	r2, [pc, #452]	@ (8005154 <HAL_DMA_Start_IT+0x4a4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d036      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a70      	ldr	r2, [pc, #448]	@ (8005158 <HAL_DMA_Start_IT+0x4a8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d031      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800515c <HAL_DMA_Start_IT+0x4ac>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d02c      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6d      	ldr	r2, [pc, #436]	@ (8005160 <HAL_DMA_Start_IT+0x4b0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d027      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005164 <HAL_DMA_Start_IT+0x4b4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6a      	ldr	r2, [pc, #424]	@ (8005168 <HAL_DMA_Start_IT+0x4b8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d01d      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a68      	ldr	r2, [pc, #416]	@ (800516c <HAL_DMA_Start_IT+0x4bc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a67      	ldr	r2, [pc, #412]	@ (8005170 <HAL_DMA_Start_IT+0x4c0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a65      	ldr	r2, [pc, #404]	@ (8005174 <HAL_DMA_Start_IT+0x4c4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a64      	ldr	r2, [pc, #400]	@ (8005178 <HAL_DMA_Start_IT+0x4c8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a62      	ldr	r2, [pc, #392]	@ (800517c <HAL_DMA_Start_IT+0x4cc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_DMA_Start_IT+0x350>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a61      	ldr	r2, [pc, #388]	@ (8005180 <HAL_DMA_Start_IT+0x4d0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Start_IT+0x354>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_DMA_Start_IT+0x356>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01a      	beq.n	8005040 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005026:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800503e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a37      	ldr	r2, [pc, #220]	@ (8005124 <HAL_DMA_Start_IT+0x474>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d04a      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a36      	ldr	r2, [pc, #216]	@ (8005128 <HAL_DMA_Start_IT+0x478>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d045      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a34      	ldr	r2, [pc, #208]	@ (800512c <HAL_DMA_Start_IT+0x47c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d040      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a33      	ldr	r2, [pc, #204]	@ (8005130 <HAL_DMA_Start_IT+0x480>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d03b      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a31      	ldr	r2, [pc, #196]	@ (8005134 <HAL_DMA_Start_IT+0x484>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d036      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a30      	ldr	r2, [pc, #192]	@ (8005138 <HAL_DMA_Start_IT+0x488>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d031      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2e      	ldr	r2, [pc, #184]	@ (800513c <HAL_DMA_Start_IT+0x48c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d02c      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2d      	ldr	r2, [pc, #180]	@ (8005140 <HAL_DMA_Start_IT+0x490>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d027      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2b      	ldr	r2, [pc, #172]	@ (8005144 <HAL_DMA_Start_IT+0x494>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2a      	ldr	r2, [pc, #168]	@ (8005148 <HAL_DMA_Start_IT+0x498>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	@ (800514c <HAL_DMA_Start_IT+0x49c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a27      	ldr	r2, [pc, #156]	@ (8005150 <HAL_DMA_Start_IT+0x4a0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <HAL_DMA_Start_IT+0x4a4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a24      	ldr	r2, [pc, #144]	@ (8005158 <HAL_DMA_Start_IT+0x4a8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a22      	ldr	r2, [pc, #136]	@ (800515c <HAL_DMA_Start_IT+0x4ac>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_Start_IT+0x430>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a21      	ldr	r2, [pc, #132]	@ (8005160 <HAL_DMA_Start_IT+0x4b0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d108      	bne.n	80050f2 <HAL_DMA_Start_IT+0x442>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e012      	b.n	8005118 <HAL_DMA_Start_IT+0x468>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e009      	b.n	8005118 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800510a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494

08005184 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800518c:	f7ff f870 	bl	8004270 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e2dc      	b.n	8005756 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d008      	beq.n	80051ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e2cd      	b.n	8005756 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a76      	ldr	r2, [pc, #472]	@ (8005398 <HAL_DMA_Abort+0x214>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d04a      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a74      	ldr	r2, [pc, #464]	@ (800539c <HAL_DMA_Abort+0x218>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d045      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a73      	ldr	r2, [pc, #460]	@ (80053a0 <HAL_DMA_Abort+0x21c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d040      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a71      	ldr	r2, [pc, #452]	@ (80053a4 <HAL_DMA_Abort+0x220>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d03b      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a70      	ldr	r2, [pc, #448]	@ (80053a8 <HAL_DMA_Abort+0x224>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d036      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6e      	ldr	r2, [pc, #440]	@ (80053ac <HAL_DMA_Abort+0x228>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d031      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6d      	ldr	r2, [pc, #436]	@ (80053b0 <HAL_DMA_Abort+0x22c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d02c      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a6b      	ldr	r2, [pc, #428]	@ (80053b4 <HAL_DMA_Abort+0x230>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d027      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6a      	ldr	r2, [pc, #424]	@ (80053b8 <HAL_DMA_Abort+0x234>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d022      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a68      	ldr	r2, [pc, #416]	@ (80053bc <HAL_DMA_Abort+0x238>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a67      	ldr	r2, [pc, #412]	@ (80053c0 <HAL_DMA_Abort+0x23c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d018      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_DMA_Abort+0x240>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a64      	ldr	r2, [pc, #400]	@ (80053c8 <HAL_DMA_Abort+0x244>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a62      	ldr	r2, [pc, #392]	@ (80053cc <HAL_DMA_Abort+0x248>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a61      	ldr	r2, [pc, #388]	@ (80053d0 <HAL_DMA_Abort+0x24c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_DMA_Abort+0xd6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5f      	ldr	r2, [pc, #380]	@ (80053d4 <HAL_DMA_Abort+0x250>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_DMA_Abort+0xda>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_DMA_Abort+0xdc>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 021e 	bic.w	r2, r2, #30
 8005272:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005282:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e00a      	b.n	80052a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 020e 	bic.w	r2, r2, #14
 800529a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005398 <HAL_DMA_Abort+0x214>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d072      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3a      	ldr	r2, [pc, #232]	@ (800539c <HAL_DMA_Abort+0x218>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d06d      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a39      	ldr	r2, [pc, #228]	@ (80053a0 <HAL_DMA_Abort+0x21c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d068      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a37      	ldr	r2, [pc, #220]	@ (80053a4 <HAL_DMA_Abort+0x220>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d063      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a36      	ldr	r2, [pc, #216]	@ (80053a8 <HAL_DMA_Abort+0x224>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d05e      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a34      	ldr	r2, [pc, #208]	@ (80053ac <HAL_DMA_Abort+0x228>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d059      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a33      	ldr	r2, [pc, #204]	@ (80053b0 <HAL_DMA_Abort+0x22c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d054      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a31      	ldr	r2, [pc, #196]	@ (80053b4 <HAL_DMA_Abort+0x230>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04f      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a30      	ldr	r2, [pc, #192]	@ (80053b8 <HAL_DMA_Abort+0x234>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d04a      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2e      	ldr	r2, [pc, #184]	@ (80053bc <HAL_DMA_Abort+0x238>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d045      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2d      	ldr	r2, [pc, #180]	@ (80053c0 <HAL_DMA_Abort+0x23c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d040      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2b      	ldr	r2, [pc, #172]	@ (80053c4 <HAL_DMA_Abort+0x240>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d03b      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2a      	ldr	r2, [pc, #168]	@ (80053c8 <HAL_DMA_Abort+0x244>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d036      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a28      	ldr	r2, [pc, #160]	@ (80053cc <HAL_DMA_Abort+0x248>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d031      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a27      	ldr	r2, [pc, #156]	@ (80053d0 <HAL_DMA_Abort+0x24c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d02c      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a25      	ldr	r2, [pc, #148]	@ (80053d4 <HAL_DMA_Abort+0x250>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d027      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <HAL_DMA_Abort+0x254>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d022      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a22      	ldr	r2, [pc, #136]	@ (80053dc <HAL_DMA_Abort+0x258>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01d      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a21      	ldr	r2, [pc, #132]	@ (80053e0 <HAL_DMA_Abort+0x25c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d018      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1f      	ldr	r2, [pc, #124]	@ (80053e4 <HAL_DMA_Abort+0x260>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1e      	ldr	r2, [pc, #120]	@ (80053e8 <HAL_DMA_Abort+0x264>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <HAL_DMA_Abort+0x268>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <HAL_DMA_Abort+0x26c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_DMA_Abort+0x20e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a19      	ldr	r2, [pc, #100]	@ (80053f4 <HAL_DMA_Abort+0x270>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d132      	bne.n	80053f8 <HAL_DMA_Abort+0x274>
 8005392:	2301      	movs	r3, #1
 8005394:	e031      	b.n	80053fa <HAL_DMA_Abort+0x276>
 8005396:	bf00      	nop
 8005398:	40020010 	.word	0x40020010
 800539c:	40020028 	.word	0x40020028
 80053a0:	40020040 	.word	0x40020040
 80053a4:	40020058 	.word	0x40020058
 80053a8:	40020070 	.word	0x40020070
 80053ac:	40020088 	.word	0x40020088
 80053b0:	400200a0 	.word	0x400200a0
 80053b4:	400200b8 	.word	0x400200b8
 80053b8:	40020410 	.word	0x40020410
 80053bc:	40020428 	.word	0x40020428
 80053c0:	40020440 	.word	0x40020440
 80053c4:	40020458 	.word	0x40020458
 80053c8:	40020470 	.word	0x40020470
 80053cc:	40020488 	.word	0x40020488
 80053d0:	400204a0 	.word	0x400204a0
 80053d4:	400204b8 	.word	0x400204b8
 80053d8:	58025408 	.word	0x58025408
 80053dc:	5802541c 	.word	0x5802541c
 80053e0:	58025430 	.word	0x58025430
 80053e4:	58025444 	.word	0x58025444
 80053e8:	58025458 	.word	0x58025458
 80053ec:	5802546c 	.word	0x5802546c
 80053f0:	58025480 	.word	0x58025480
 80053f4:	58025494 	.word	0x58025494
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800540c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6d      	ldr	r2, [pc, #436]	@ (80055c8 <HAL_DMA_Abort+0x444>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d04a      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6b      	ldr	r2, [pc, #428]	@ (80055cc <HAL_DMA_Abort+0x448>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d045      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6a      	ldr	r2, [pc, #424]	@ (80055d0 <HAL_DMA_Abort+0x44c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d040      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a68      	ldr	r2, [pc, #416]	@ (80055d4 <HAL_DMA_Abort+0x450>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d03b      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a67      	ldr	r2, [pc, #412]	@ (80055d8 <HAL_DMA_Abort+0x454>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d036      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a65      	ldr	r2, [pc, #404]	@ (80055dc <HAL_DMA_Abort+0x458>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d031      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a64      	ldr	r2, [pc, #400]	@ (80055e0 <HAL_DMA_Abort+0x45c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d02c      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a62      	ldr	r2, [pc, #392]	@ (80055e4 <HAL_DMA_Abort+0x460>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d027      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a61      	ldr	r2, [pc, #388]	@ (80055e8 <HAL_DMA_Abort+0x464>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5f      	ldr	r2, [pc, #380]	@ (80055ec <HAL_DMA_Abort+0x468>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a5e      	ldr	r2, [pc, #376]	@ (80055f0 <HAL_DMA_Abort+0x46c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a5c      	ldr	r2, [pc, #368]	@ (80055f4 <HAL_DMA_Abort+0x470>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a5b      	ldr	r2, [pc, #364]	@ (80055f8 <HAL_DMA_Abort+0x474>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a59      	ldr	r2, [pc, #356]	@ (80055fc <HAL_DMA_Abort+0x478>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a58      	ldr	r2, [pc, #352]	@ (8005600 <HAL_DMA_Abort+0x47c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_DMA_Abort+0x32a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a56      	ldr	r2, [pc, #344]	@ (8005604 <HAL_DMA_Abort+0x480>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d108      	bne.n	80054c0 <HAL_DMA_Abort+0x33c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e007      	b.n	80054d0 <HAL_DMA_Abort+0x34c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054d0:	e013      	b.n	80054fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d2:	f7fe fecd 	bl	8004270 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d90c      	bls.n	80054fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2203      	movs	r2, #3
 80054ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e12d      	b.n	8005756 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2f      	ldr	r2, [pc, #188]	@ (80055c8 <HAL_DMA_Abort+0x444>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04a      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2d      	ldr	r2, [pc, #180]	@ (80055cc <HAL_DMA_Abort+0x448>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	@ (80055d0 <HAL_DMA_Abort+0x44c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <HAL_DMA_Abort+0x450>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03b      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <HAL_DMA_Abort+0x454>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d036      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <HAL_DMA_Abort+0x458>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <HAL_DMA_Abort+0x45c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d02c      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <HAL_DMA_Abort+0x460>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a23      	ldr	r2, [pc, #140]	@ (80055e8 <HAL_DMA_Abort+0x464>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <HAL_DMA_Abort+0x468>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a20      	ldr	r2, [pc, #128]	@ (80055f0 <HAL_DMA_Abort+0x46c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1e      	ldr	r2, [pc, #120]	@ (80055f4 <HAL_DMA_Abort+0x470>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1d      	ldr	r2, [pc, #116]	@ (80055f8 <HAL_DMA_Abort+0x474>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1b      	ldr	r2, [pc, #108]	@ (80055fc <HAL_DMA_Abort+0x478>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1a      	ldr	r2, [pc, #104]	@ (8005600 <HAL_DMA_Abort+0x47c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_DMA_Abort+0x422>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a18      	ldr	r2, [pc, #96]	@ (8005604 <HAL_DMA_Abort+0x480>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_DMA_Abort+0x426>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_DMA_Abort+0x428>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02b      	beq.n	8005608 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	223f      	movs	r2, #63	@ 0x3f
 80055c0:	409a      	lsls	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	e02a      	b.n	800561e <HAL_DMA_Abort+0x49a>
 80055c8:	40020010 	.word	0x40020010
 80055cc:	40020028 	.word	0x40020028
 80055d0:	40020040 	.word	0x40020040
 80055d4:	40020058 	.word	0x40020058
 80055d8:	40020070 	.word	0x40020070
 80055dc:	40020088 	.word	0x40020088
 80055e0:	400200a0 	.word	0x400200a0
 80055e4:	400200b8 	.word	0x400200b8
 80055e8:	40020410 	.word	0x40020410
 80055ec:	40020428 	.word	0x40020428
 80055f0:	40020440 	.word	0x40020440
 80055f4:	40020458 	.word	0x40020458
 80055f8:	40020470 	.word	0x40020470
 80055fc:	40020488 	.word	0x40020488
 8005600:	400204a0 	.word	0x400204a0
 8005604:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2201      	movs	r2, #1
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a4f      	ldr	r2, [pc, #316]	@ (8005760 <HAL_DMA_Abort+0x5dc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d072      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a4d      	ldr	r2, [pc, #308]	@ (8005764 <HAL_DMA_Abort+0x5e0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d06d      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a4c      	ldr	r2, [pc, #304]	@ (8005768 <HAL_DMA_Abort+0x5e4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d068      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a4a      	ldr	r2, [pc, #296]	@ (800576c <HAL_DMA_Abort+0x5e8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d063      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a49      	ldr	r2, [pc, #292]	@ (8005770 <HAL_DMA_Abort+0x5ec>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d05e      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a47      	ldr	r2, [pc, #284]	@ (8005774 <HAL_DMA_Abort+0x5f0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d059      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a46      	ldr	r2, [pc, #280]	@ (8005778 <HAL_DMA_Abort+0x5f4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d054      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a44      	ldr	r2, [pc, #272]	@ (800577c <HAL_DMA_Abort+0x5f8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d04f      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a43      	ldr	r2, [pc, #268]	@ (8005780 <HAL_DMA_Abort+0x5fc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04a      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a41      	ldr	r2, [pc, #260]	@ (8005784 <HAL_DMA_Abort+0x600>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d045      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a40      	ldr	r2, [pc, #256]	@ (8005788 <HAL_DMA_Abort+0x604>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d040      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3e      	ldr	r2, [pc, #248]	@ (800578c <HAL_DMA_Abort+0x608>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d03b      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3d      	ldr	r2, [pc, #244]	@ (8005790 <HAL_DMA_Abort+0x60c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d036      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005794 <HAL_DMA_Abort+0x610>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d031      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	@ (8005798 <HAL_DMA_Abort+0x614>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d02c      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a38      	ldr	r2, [pc, #224]	@ (800579c <HAL_DMA_Abort+0x618>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d027      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a37      	ldr	r2, [pc, #220]	@ (80057a0 <HAL_DMA_Abort+0x61c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a35      	ldr	r2, [pc, #212]	@ (80057a4 <HAL_DMA_Abort+0x620>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01d      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a34      	ldr	r2, [pc, #208]	@ (80057a8 <HAL_DMA_Abort+0x624>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <HAL_DMA_Abort+0x628>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a31      	ldr	r2, [pc, #196]	@ (80057b0 <HAL_DMA_Abort+0x62c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <HAL_DMA_Abort+0x630>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2e      	ldr	r2, [pc, #184]	@ (80057b8 <HAL_DMA_Abort+0x634>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_DMA_Abort+0x58a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2c      	ldr	r2, [pc, #176]	@ (80057bc <HAL_DMA_Abort+0x638>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d101      	bne.n	8005712 <HAL_DMA_Abort+0x58e>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_DMA_Abort+0x590>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005720:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005738:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005742:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40020010 	.word	0x40020010
 8005764:	40020028 	.word	0x40020028
 8005768:	40020040 	.word	0x40020040
 800576c:	40020058 	.word	0x40020058
 8005770:	40020070 	.word	0x40020070
 8005774:	40020088 	.word	0x40020088
 8005778:	400200a0 	.word	0x400200a0
 800577c:	400200b8 	.word	0x400200b8
 8005780:	40020410 	.word	0x40020410
 8005784:	40020428 	.word	0x40020428
 8005788:	40020440 	.word	0x40020440
 800578c:	40020458 	.word	0x40020458
 8005790:	40020470 	.word	0x40020470
 8005794:	40020488 	.word	0x40020488
 8005798:	400204a0 	.word	0x400204a0
 800579c:	400204b8 	.word	0x400204b8
 80057a0:	58025408 	.word	0x58025408
 80057a4:	5802541c 	.word	0x5802541c
 80057a8:	58025430 	.word	0x58025430
 80057ac:	58025444 	.word	0x58025444
 80057b0:	58025458 	.word	0x58025458
 80057b4:	5802546c 	.word	0x5802546c
 80057b8:	58025480 	.word	0x58025480
 80057bc:	58025494 	.word	0x58025494

080057c0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7f      	ldr	r2, [pc, #508]	@ (80059f4 <DMA_SetConfig+0x21c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d072      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7d      	ldr	r2, [pc, #500]	@ (80059f8 <DMA_SetConfig+0x220>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d06d      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7c      	ldr	r2, [pc, #496]	@ (80059fc <DMA_SetConfig+0x224>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d068      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a7a      	ldr	r2, [pc, #488]	@ (8005a00 <DMA_SetConfig+0x228>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d063      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a79      	ldr	r2, [pc, #484]	@ (8005a04 <DMA_SetConfig+0x22c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d05e      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a77      	ldr	r2, [pc, #476]	@ (8005a08 <DMA_SetConfig+0x230>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d059      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a76      	ldr	r2, [pc, #472]	@ (8005a0c <DMA_SetConfig+0x234>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d054      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a74      	ldr	r2, [pc, #464]	@ (8005a10 <DMA_SetConfig+0x238>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d04f      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a73      	ldr	r2, [pc, #460]	@ (8005a14 <DMA_SetConfig+0x23c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d04a      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a71      	ldr	r2, [pc, #452]	@ (8005a18 <DMA_SetConfig+0x240>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d045      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a70      	ldr	r2, [pc, #448]	@ (8005a1c <DMA_SetConfig+0x244>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d040      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6e      	ldr	r2, [pc, #440]	@ (8005a20 <DMA_SetConfig+0x248>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d03b      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a24 <DMA_SetConfig+0x24c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d036      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a6b      	ldr	r2, [pc, #428]	@ (8005a28 <DMA_SetConfig+0x250>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d031      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6a      	ldr	r2, [pc, #424]	@ (8005a2c <DMA_SetConfig+0x254>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d02c      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a68      	ldr	r2, [pc, #416]	@ (8005a30 <DMA_SetConfig+0x258>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d027      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a67      	ldr	r2, [pc, #412]	@ (8005a34 <DMA_SetConfig+0x25c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a65      	ldr	r2, [pc, #404]	@ (8005a38 <DMA_SetConfig+0x260>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a64      	ldr	r2, [pc, #400]	@ (8005a3c <DMA_SetConfig+0x264>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a62      	ldr	r2, [pc, #392]	@ (8005a40 <DMA_SetConfig+0x268>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a61      	ldr	r2, [pc, #388]	@ (8005a44 <DMA_SetConfig+0x26c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a48 <DMA_SetConfig+0x270>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a4c <DMA_SetConfig+0x274>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005a50 <DMA_SetConfig+0x278>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <DMA_SetConfig+0x10e>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <DMA_SetConfig+0x110>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005906:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a39      	ldr	r2, [pc, #228]	@ (80059f4 <DMA_SetConfig+0x21c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04a      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a38      	ldr	r2, [pc, #224]	@ (80059f8 <DMA_SetConfig+0x220>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d045      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a36      	ldr	r2, [pc, #216]	@ (80059fc <DMA_SetConfig+0x224>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d040      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a35      	ldr	r2, [pc, #212]	@ (8005a00 <DMA_SetConfig+0x228>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d03b      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <DMA_SetConfig+0x22c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d036      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a32      	ldr	r2, [pc, #200]	@ (8005a08 <DMA_SetConfig+0x230>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d031      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a30      	ldr	r2, [pc, #192]	@ (8005a0c <DMA_SetConfig+0x234>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02c      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	@ (8005a10 <DMA_SetConfig+0x238>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d027      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a14 <DMA_SetConfig+0x23c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	@ (8005a18 <DMA_SetConfig+0x240>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01d      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2a      	ldr	r2, [pc, #168]	@ (8005a1c <DMA_SetConfig+0x244>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a29      	ldr	r2, [pc, #164]	@ (8005a20 <DMA_SetConfig+0x248>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a27      	ldr	r2, [pc, #156]	@ (8005a24 <DMA_SetConfig+0x24c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <DMA_SetConfig+0x250>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a24      	ldr	r2, [pc, #144]	@ (8005a2c <DMA_SetConfig+0x254>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a23      	ldr	r2, [pc, #140]	@ (8005a30 <DMA_SetConfig+0x258>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d101      	bne.n	80059ac <DMA_SetConfig+0x1d4>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <DMA_SetConfig+0x1d6>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d059      	beq.n	8005a66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	223f      	movs	r2, #63	@ 0x3f
 80059bc:	409a      	lsls	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b40      	cmp	r3, #64	@ 0x40
 80059e0:	d138      	bne.n	8005a54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059f2:	e086      	b.n	8005b02 <DMA_SetConfig+0x32a>
 80059f4:	40020010 	.word	0x40020010
 80059f8:	40020028 	.word	0x40020028
 80059fc:	40020040 	.word	0x40020040
 8005a00:	40020058 	.word	0x40020058
 8005a04:	40020070 	.word	0x40020070
 8005a08:	40020088 	.word	0x40020088
 8005a0c:	400200a0 	.word	0x400200a0
 8005a10:	400200b8 	.word	0x400200b8
 8005a14:	40020410 	.word	0x40020410
 8005a18:	40020428 	.word	0x40020428
 8005a1c:	40020440 	.word	0x40020440
 8005a20:	40020458 	.word	0x40020458
 8005a24:	40020470 	.word	0x40020470
 8005a28:	40020488 	.word	0x40020488
 8005a2c:	400204a0 	.word	0x400204a0
 8005a30:	400204b8 	.word	0x400204b8
 8005a34:	58025408 	.word	0x58025408
 8005a38:	5802541c 	.word	0x5802541c
 8005a3c:	58025430 	.word	0x58025430
 8005a40:	58025444 	.word	0x58025444
 8005a44:	58025458 	.word	0x58025458
 8005a48:	5802546c 	.word	0x5802546c
 8005a4c:	58025480 	.word	0x58025480
 8005a50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
}
 8005a64:	e04d      	b.n	8005b02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a29      	ldr	r2, [pc, #164]	@ (8005b10 <DMA_SetConfig+0x338>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a27      	ldr	r2, [pc, #156]	@ (8005b14 <DMA_SetConfig+0x33c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a26      	ldr	r2, [pc, #152]	@ (8005b18 <DMA_SetConfig+0x340>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a24      	ldr	r2, [pc, #144]	@ (8005b1c <DMA_SetConfig+0x344>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <DMA_SetConfig+0x348>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	@ (8005b24 <DMA_SetConfig+0x34c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	@ (8005b28 <DMA_SetConfig+0x350>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b2c <DMA_SetConfig+0x354>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <DMA_SetConfig+0x2e2>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <DMA_SetConfig+0x2e4>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d020      	beq.n	8005b02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d108      	bne.n	8005af2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	60da      	str	r2, [r3, #12]
}
 8005af0:	e007      	b.n	8005b02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	60da      	str	r2, [r3, #12]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	58025408 	.word	0x58025408
 8005b14:	5802541c 	.word	0x5802541c
 8005b18:	58025430 	.word	0x58025430
 8005b1c:	58025444 	.word	0x58025444
 8005b20:	58025458 	.word	0x58025458
 8005b24:	5802546c 	.word	0x5802546c
 8005b28:	58025480 	.word	0x58025480
 8005b2c:	58025494 	.word	0x58025494

08005b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a42      	ldr	r2, [pc, #264]	@ (8005c48 <DMA_CalcBaseAndBitshift+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d04a      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a41      	ldr	r2, [pc, #260]	@ (8005c4c <DMA_CalcBaseAndBitshift+0x11c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d045      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a3f      	ldr	r2, [pc, #252]	@ (8005c50 <DMA_CalcBaseAndBitshift+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d040      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c54 <DMA_CalcBaseAndBitshift+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d03b      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3c      	ldr	r2, [pc, #240]	@ (8005c58 <DMA_CalcBaseAndBitshift+0x128>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d036      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c5c <DMA_CalcBaseAndBitshift+0x12c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d031      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a39      	ldr	r2, [pc, #228]	@ (8005c60 <DMA_CalcBaseAndBitshift+0x130>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d02c      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a38      	ldr	r2, [pc, #224]	@ (8005c64 <DMA_CalcBaseAndBitshift+0x134>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d027      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a36      	ldr	r2, [pc, #216]	@ (8005c68 <DMA_CalcBaseAndBitshift+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d022      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a35      	ldr	r2, [pc, #212]	@ (8005c6c <DMA_CalcBaseAndBitshift+0x13c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d01d      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a33      	ldr	r2, [pc, #204]	@ (8005c70 <DMA_CalcBaseAndBitshift+0x140>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d018      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a32      	ldr	r2, [pc, #200]	@ (8005c74 <DMA_CalcBaseAndBitshift+0x144>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	@ (8005c78 <DMA_CalcBaseAndBitshift+0x148>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00e      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005c7c <DMA_CalcBaseAndBitshift+0x14c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c80 <DMA_CalcBaseAndBitshift+0x150>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c84 <DMA_CalcBaseAndBitshift+0x154>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <DMA_CalcBaseAndBitshift+0xac>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <DMA_CalcBaseAndBitshift+0xae>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3b10      	subs	r3, #16
 8005bea:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <DMA_CalcBaseAndBitshift+0x158>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	4a24      	ldr	r2, [pc, #144]	@ (8005c8c <DMA_CalcBaseAndBitshift+0x15c>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d908      	bls.n	8005c1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4b1f      	ldr	r3, [pc, #124]	@ (8005c90 <DMA_CalcBaseAndBitshift+0x160>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c1a:	e00d      	b.n	8005c38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <DMA_CalcBaseAndBitshift+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2a:	e005      	b.n	8005c38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	aaaaaaab 	.word	0xaaaaaaab
 8005c8c:	08011e48 	.word	0x08011e48
 8005c90:	fffffc00 	.word	0xfffffc00

08005c94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d120      	bne.n	8005cea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d858      	bhi.n	8005d62 <DMA_CheckFifoParam+0xce>
 8005cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <DMA_CheckFifoParam+0x24>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cdb 	.word	0x08005cdb
 8005cc0:	08005cc9 	.word	0x08005cc9
 8005cc4:	08005d63 	.word	0x08005d63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d048      	beq.n	8005d66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cd8:	e045      	b.n	8005d66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ce2:	d142      	bne.n	8005d6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ce8:	e03f      	b.n	8005d6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf2:	d123      	bne.n	8005d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d838      	bhi.n	8005d6e <DMA_CheckFifoParam+0xda>
 8005cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <DMA_CheckFifoParam+0x70>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d1b 	.word	0x08005d1b
 8005d0c:	08005d15 	.word	0x08005d15
 8005d10:	08005d2d 	.word	0x08005d2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
        break;
 8005d18:	e030      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d025      	beq.n	8005d72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d2a:	e022      	b.n	8005d72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d34:	d11f      	bne.n	8005d76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d3a:	e01c      	b.n	8005d76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d902      	bls.n	8005d4a <DMA_CheckFifoParam+0xb6>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d003      	beq.n	8005d50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d48:	e018      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4e:	e015      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d60:	e00b      	b.n	8005d7a <DMA_CheckFifoParam+0xe6>
        break;
 8005d62:	bf00      	nop
 8005d64:	e00a      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d66:	bf00      	nop
 8005d68:	e008      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e006      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e004      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
    break;
 8005d7a:	bf00      	nop
    }
  }

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a38      	ldr	r2, [pc, #224]	@ (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a36      	ldr	r2, [pc, #216]	@ (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a35      	ldr	r2, [pc, #212]	@ (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a33      	ldr	r2, [pc, #204]	@ (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a32      	ldr	r2, [pc, #200]	@ (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a30      	ldr	r2, [pc, #192]	@ (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2f      	ldr	r2, [pc, #188]	@ (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01a      	beq.n	8005e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	3b08      	subs	r3, #8
 8005dfc:	4a28      	ldr	r2, [pc, #160]	@ (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4b26      	ldr	r3, [pc, #152]	@ (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2201      	movs	r2, #1
 8005e22:	409a      	lsls	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e28:	e024      	b.n	8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	3b10      	subs	r3, #16
 8005e32:	4a1e      	ldr	r2, [pc, #120]	@ (8005eac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d806      	bhi.n	8005e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d902      	bls.n	8005e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4b18      	ldr	r3, [pc, #96]	@ (8005eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a16      	ldr	r2, [pc, #88]	@ (8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	58025408 	.word	0x58025408
 8005e84:	5802541c 	.word	0x5802541c
 8005e88:	58025430 	.word	0x58025430
 8005e8c:	58025444 	.word	0x58025444
 8005e90:	58025458 	.word	0x58025458
 8005e94:	5802546c 	.word	0x5802546c
 8005e98:	58025480 	.word	0x58025480
 8005e9c:	58025494 	.word	0x58025494
 8005ea0:	cccccccd 	.word	0xcccccccd
 8005ea4:	16009600 	.word	0x16009600
 8005ea8:	58025880 	.word	0x58025880
 8005eac:	aaaaaaab 	.word	0xaaaaaaab
 8005eb0:	400204b8 	.word	0x400204b8
 8005eb4:	4002040f 	.word	0x4002040f
 8005eb8:	10008200 	.word	0x10008200
 8005ebc:	40020880 	.word	0x40020880

08005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04a      	beq.n	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d847      	bhi.n	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	@ (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a24      	ldr	r2, [pc, #144]	@ (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	@ (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	@ (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4b17      	ldr	r3, [pc, #92]	@ (8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a15      	ldr	r2, [pc, #84]	@ (8005f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f48:	671a      	str	r2, [r3, #112]	@ 0x70
 8005f4a:	e009      	b.n	8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	461a      	mov	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a11      	ldr	r2, [pc, #68]	@ (8005fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f5e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	2201      	movs	r2, #1
 8005f66:	409a      	lsls	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	58025408 	.word	0x58025408
 8005f7c:	5802541c 	.word	0x5802541c
 8005f80:	58025430 	.word	0x58025430
 8005f84:	58025444 	.word	0x58025444
 8005f88:	58025458 	.word	0x58025458
 8005f8c:	5802546c 	.word	0x5802546c
 8005f90:	58025480 	.word	0x58025480
 8005f94:	58025494 	.word	0x58025494
 8005f98:	1600963f 	.word	0x1600963f
 8005f9c:	58025940 	.word	0x58025940
 8005fa0:	1000823f 	.word	0x1000823f
 8005fa4:	40020940 	.word	0x40020940

08005fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b089      	sub	sp, #36	@ 0x24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fb6:	4b89      	ldr	r3, [pc, #548]	@ (80061dc <HAL_GPIO_Init+0x234>)
 8005fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fba:	e194      	b.n	80062e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8186 	beq.w	80062e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d005      	beq.n	8005fec <HAL_GPIO_Init+0x44>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d130      	bne.n	800604e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006022:	2201      	movs	r2, #1
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f003 0201 	and.w	r2, r3, #1
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b03      	cmp	r3, #3
 8006058:	d017      	beq.n	800608a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	2203      	movs	r2, #3
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4313      	orrs	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d123      	bne.n	80060de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	08da      	lsrs	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3208      	adds	r2, #8
 800609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	220f      	movs	r2, #15
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	08da      	lsrs	r2, r3, #3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3208      	adds	r2, #8
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	2203      	movs	r2, #3
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4013      	ands	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 0203 	and.w	r2, r3, #3
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80e0 	beq.w	80062e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006120:	4b2f      	ldr	r3, [pc, #188]	@ (80061e0 <HAL_GPIO_Init+0x238>)
 8006122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006126:	4a2e      	ldr	r2, [pc, #184]	@ (80061e0 <HAL_GPIO_Init+0x238>)
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <HAL_GPIO_Init+0x238>)
 8006132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800613e:	4a29      	ldr	r2, [pc, #164]	@ (80061e4 <HAL_GPIO_Init+0x23c>)
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	3302      	adds	r3, #2
 8006146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	220f      	movs	r2, #15
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4013      	ands	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a20      	ldr	r2, [pc, #128]	@ (80061e8 <HAL_GPIO_Init+0x240>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d052      	beq.n	8006210 <HAL_GPIO_Init+0x268>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <HAL_GPIO_Init+0x244>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d031      	beq.n	80061d6 <HAL_GPIO_Init+0x22e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <HAL_GPIO_Init+0x248>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d02b      	beq.n	80061d2 <HAL_GPIO_Init+0x22a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1d      	ldr	r2, [pc, #116]	@ (80061f4 <HAL_GPIO_Init+0x24c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d025      	beq.n	80061ce <HAL_GPIO_Init+0x226>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <HAL_GPIO_Init+0x250>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <HAL_GPIO_Init+0x222>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <HAL_GPIO_Init+0x254>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d019      	beq.n	80061c6 <HAL_GPIO_Init+0x21e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1a      	ldr	r2, [pc, #104]	@ (8006200 <HAL_GPIO_Init+0x258>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_GPIO_Init+0x21a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a19      	ldr	r2, [pc, #100]	@ (8006204 <HAL_GPIO_Init+0x25c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00d      	beq.n	80061be <HAL_GPIO_Init+0x216>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <HAL_GPIO_Init+0x260>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <HAL_GPIO_Init+0x212>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a17      	ldr	r2, [pc, #92]	@ (800620c <HAL_GPIO_Init+0x264>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <HAL_GPIO_Init+0x20e>
 80061b2:	2309      	movs	r3, #9
 80061b4:	e02d      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061b6:	230a      	movs	r3, #10
 80061b8:	e02b      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061ba:	2308      	movs	r3, #8
 80061bc:	e029      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061be:	2307      	movs	r3, #7
 80061c0:	e027      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061c2:	2306      	movs	r3, #6
 80061c4:	e025      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061c6:	2305      	movs	r3, #5
 80061c8:	e023      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e021      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061ce:	2303      	movs	r3, #3
 80061d0:	e01f      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e01d      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e01b      	b.n	8006212 <HAL_GPIO_Init+0x26a>
 80061da:	bf00      	nop
 80061dc:	58000080 	.word	0x58000080
 80061e0:	58024400 	.word	0x58024400
 80061e4:	58000400 	.word	0x58000400
 80061e8:	58020000 	.word	0x58020000
 80061ec:	58020400 	.word	0x58020400
 80061f0:	58020800 	.word	0x58020800
 80061f4:	58020c00 	.word	0x58020c00
 80061f8:	58021000 	.word	0x58021000
 80061fc:	58021400 	.word	0x58021400
 8006200:	58021800 	.word	0x58021800
 8006204:	58021c00 	.word	0x58021c00
 8006208:	58022000 	.word	0x58022000
 800620c:	58022400 	.word	0x58022400
 8006210:	2300      	movs	r3, #0
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	f002 0203 	and.w	r2, r2, #3
 8006218:	0092      	lsls	r2, r2, #2
 800621a:	4093      	lsls	r3, r2
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4313      	orrs	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006222:	4938      	ldr	r1, [pc, #224]	@ (8006304 <HAL_GPIO_Init+0x35c>)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	3302      	adds	r3, #2
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	3301      	adds	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f ae63 	bne.w	8005fbc <HAL_GPIO_Init+0x14>
  }
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	3724      	adds	r7, #36	@ 0x24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	58000400 	.word	0x58000400

08006308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006310:	4b19      	ldr	r3, [pc, #100]	@ (8006378 <HAL_PWREx_ConfigSupply+0x70>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b04      	cmp	r3, #4
 800631a:	d00a      	beq.n	8006332 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800631c:	4b16      	ldr	r3, [pc, #88]	@ (8006378 <HAL_PWREx_ConfigSupply+0x70>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d001      	beq.n	800632e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e01f      	b.n	800636e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	e01d      	b.n	800636e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006332:	4b11      	ldr	r3, [pc, #68]	@ (8006378 <HAL_PWREx_ConfigSupply+0x70>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f023 0207 	bic.w	r2, r3, #7
 800633a:	490f      	ldr	r1, [pc, #60]	@ (8006378 <HAL_PWREx_ConfigSupply+0x70>)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006342:	f7fd ff95 	bl	8004270 <HAL_GetTick>
 8006346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006348:	e009      	b.n	800635e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800634a:	f7fd ff91 	bl	8004270 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006358:	d901      	bls.n	800635e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e007      	b.n	800636e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800635e:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <HAL_PWREx_ConfigSupply+0x70>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636a:	d1ee      	bne.n	800634a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	58024800 	.word	0x58024800

0800637c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08c      	sub	sp, #48	@ 0x30
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f000 bc48 	b.w	8006c20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8088 	beq.w	80064ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639e:	4b99      	ldr	r3, [pc, #612]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063a8:	4b96      	ldr	r3, [pc, #600]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d007      	beq.n	80063c4 <HAL_RCC_OscConfig+0x48>
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	2b18      	cmp	r3, #24
 80063b8:	d111      	bne.n	80063de <HAL_RCC_OscConfig+0x62>
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d10c      	bne.n	80063de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d06d      	beq.n	80064ac <HAL_RCC_OscConfig+0x130>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d169      	bne.n	80064ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f000 bc21 	b.w	8006c20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e6:	d106      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7a>
 80063e8:	4b86      	ldr	r3, [pc, #536]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a85      	ldr	r2, [pc, #532]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e02e      	b.n	8006454 <HAL_RCC_OscConfig+0xd8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10c      	bne.n	8006418 <HAL_RCC_OscConfig+0x9c>
 80063fe:	4b81      	ldr	r3, [pc, #516]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a80      	ldr	r2, [pc, #512]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b7e      	ldr	r3, [pc, #504]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a7d      	ldr	r2, [pc, #500]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e01d      	b.n	8006454 <HAL_RCC_OscConfig+0xd8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006420:	d10c      	bne.n	800643c <HAL_RCC_OscConfig+0xc0>
 8006422:	4b78      	ldr	r3, [pc, #480]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a77      	ldr	r2, [pc, #476]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4b75      	ldr	r3, [pc, #468]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a74      	ldr	r2, [pc, #464]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e00b      	b.n	8006454 <HAL_RCC_OscConfig+0xd8>
 800643c:	4b71      	ldr	r3, [pc, #452]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a70      	ldr	r2, [pc, #448]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4b6e      	ldr	r3, [pc, #440]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a6d      	ldr	r2, [pc, #436]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800644e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d013      	beq.n	8006484 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fd ff08 	bl	8004270 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006464:	f7fd ff04 	bl	8004270 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b64      	cmp	r3, #100	@ 0x64
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e3d4      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006476:	4b63      	ldr	r3, [pc, #396]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0xe8>
 8006482:	e014      	b.n	80064ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fd fef4 	bl	8004270 <HAL_GetTick>
 8006488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fd fef0 	bl	8004270 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	@ 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e3c0      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800649e:	4b59      	ldr	r3, [pc, #356]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0x110>
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80ca 	beq.w	8006650 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064bc:	4b51      	ldr	r3, [pc, #324]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <HAL_RCC_OscConfig+0x166>
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2b18      	cmp	r3, #24
 80064d6:	d156      	bne.n	8006586 <HAL_RCC_OscConfig+0x20a>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d151      	bne.n	8006586 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064e2:	4b48      	ldr	r3, [pc, #288]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_RCC_OscConfig+0x17e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e392      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064fa:	4b42      	ldr	r3, [pc, #264]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 0219 	bic.w	r2, r3, #25
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	493f      	ldr	r1, [pc, #252]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fd feb0 	bl	8004270 <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006514:	f7fd feac 	bl	8004270 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e37c      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006526:	4b37      	ldr	r3, [pc, #220]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006532:	f7fd fecd 	bl	80042d0 <HAL_GetREVID>
 8006536:	4603      	mov	r3, r0
 8006538:	f241 0203 	movw	r2, #4099	@ 0x1003
 800653c:	4293      	cmp	r3, r2
 800653e:	d817      	bhi.n	8006570 <HAL_RCC_OscConfig+0x1f4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b40      	cmp	r3, #64	@ 0x40
 8006546:	d108      	bne.n	800655a <HAL_RCC_OscConfig+0x1de>
 8006548:	4b2e      	ldr	r3, [pc, #184]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006550:	4a2c      	ldr	r2, [pc, #176]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006556:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006558:	e07a      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655a:	4b2a      	ldr	r3, [pc, #168]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	031b      	lsls	r3, r3, #12
 8006568:	4926      	ldr	r1, [pc, #152]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800656a:	4313      	orrs	r3, r2
 800656c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656e:	e06f      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	4921      	ldr	r1, [pc, #132]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006584:	e064      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d047      	beq.n	800661e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800658e:	4b1d      	ldr	r3, [pc, #116]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 0219 	bic.w	r2, r3, #25
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	491a      	ldr	r1, [pc, #104]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fd fe66 	bl	8004270 <HAL_GetTick>
 80065a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fd fe62 	bl	8004270 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e332      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ba:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c6:	f7fd fe83 	bl	80042d0 <HAL_GetREVID>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d819      	bhi.n	8006608 <HAL_RCC_OscConfig+0x28c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b40      	cmp	r3, #64	@ 0x40
 80065da:	d108      	bne.n	80065ee <HAL_RCC_OscConfig+0x272>
 80065dc:	4b09      	ldr	r3, [pc, #36]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065e4:	4a07      	ldr	r2, [pc, #28]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ea:	6053      	str	r3, [r2, #4]
 80065ec:	e030      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
 80065ee:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	4901      	ldr	r1, [pc, #4]	@ (8006604 <HAL_RCC_OscConfig+0x288>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	604b      	str	r3, [r1, #4]
 8006602:	e025      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
 8006604:	58024400 	.word	0x58024400
 8006608:	4b9a      	ldr	r3, [pc, #616]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	4997      	ldr	r1, [pc, #604]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	e018      	b.n	8006650 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661e:	4b95      	ldr	r3, [pc, #596]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a94      	ldr	r2, [pc, #592]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662a:	f7fd fe21 	bl	8004270 <HAL_GetTick>
 800662e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006632:	f7fd fe1d 	bl	8004270 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e2ed      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006644:	4b8b      	ldr	r3, [pc, #556]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80a9 	beq.w	80067b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800665e:	4b85      	ldr	r3, [pc, #532]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006666:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006668:	4b82      	ldr	r3, [pc, #520]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b08      	cmp	r3, #8
 8006672:	d007      	beq.n	8006684 <HAL_RCC_OscConfig+0x308>
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b18      	cmp	r3, #24
 8006678:	d13a      	bne.n	80066f0 <HAL_RCC_OscConfig+0x374>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	2b01      	cmp	r3, #1
 8006682:	d135      	bne.n	80066f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006684:	4b7b      	ldr	r3, [pc, #492]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_OscConfig+0x320>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	2b80      	cmp	r3, #128	@ 0x80
 8006696:	d001      	beq.n	800669c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e2c1      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800669c:	f7fd fe18 	bl	80042d0 <HAL_GetREVID>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d817      	bhi.n	80066da <HAL_RCC_OscConfig+0x35e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d108      	bne.n	80066c4 <HAL_RCC_OscConfig+0x348>
 80066b2:	4b70      	ldr	r3, [pc, #448]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80066ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066c2:	e075      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066c4:	4b6b      	ldr	r3, [pc, #428]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	069b      	lsls	r3, r3, #26
 80066d2:	4968      	ldr	r1, [pc, #416]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d8:	e06a      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066da:	4b66      	ldr	r3, [pc, #408]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	061b      	lsls	r3, r3, #24
 80066e8:	4962      	ldr	r1, [pc, #392]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ee:	e05f      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d042      	beq.n	800677e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fd fdb4 	bl	8004270 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800670c:	f7fd fdb0 	bl	8004270 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e280      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800671e:	4b55      	ldr	r3, [pc, #340]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800672a:	f7fd fdd1 	bl	80042d0 <HAL_GetREVID>
 800672e:	4603      	mov	r3, r0
 8006730:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006734:	4293      	cmp	r3, r2
 8006736:	d817      	bhi.n	8006768 <HAL_RCC_OscConfig+0x3ec>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	2b20      	cmp	r3, #32
 800673e:	d108      	bne.n	8006752 <HAL_RCC_OscConfig+0x3d6>
 8006740:	4b4c      	ldr	r3, [pc, #304]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006748:	4a4a      	ldr	r2, [pc, #296]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800674a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674e:	6053      	str	r3, [r2, #4]
 8006750:	e02e      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
 8006752:	4b48      	ldr	r3, [pc, #288]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	069b      	lsls	r3, r3, #26
 8006760:	4944      	ldr	r1, [pc, #272]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006762:	4313      	orrs	r3, r2
 8006764:	604b      	str	r3, [r1, #4]
 8006766:	e023      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
 8006768:	4b42      	ldr	r3, [pc, #264]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	493f      	ldr	r1, [pc, #252]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006778:	4313      	orrs	r3, r2
 800677a:	60cb      	str	r3, [r1, #12]
 800677c:	e018      	b.n	80067b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800677e:	4b3d      	ldr	r3, [pc, #244]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a3c      	ldr	r2, [pc, #240]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fd fd71 	bl	8004270 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006792:	f7fd fd6d 	bl	8004270 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e23d      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067a4:	4b33      	ldr	r3, [pc, #204]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d036      	beq.n	800682a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d019      	beq.n	80067f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d0:	f7fd fd4e 	bl	8004270 <HAL_GetTick>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d8:	f7fd fd4a 	bl	8004270 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e21a      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ea:	4b22      	ldr	r3, [pc, #136]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x45c>
 80067f6:	e018      	b.n	800682a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006804:	f7fd fd34 	bl	8004270 <HAL_GetTick>
 8006808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800680c:	f7fd fd30 	bl	8004270 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e200      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800681e:	4b15      	ldr	r3, [pc, #84]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d039      	beq.n	80068aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01c      	beq.n	8006878 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a0c      	ldr	r2, [pc, #48]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006848:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800684a:	f7fd fd11 	bl	8004270 <HAL_GetTick>
 800684e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006852:	f7fd fd0d 	bl	8004270 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e1dd      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006864:	4b03      	ldr	r3, [pc, #12]	@ (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x4d6>
 8006870:	e01b      	b.n	80068aa <HAL_RCC_OscConfig+0x52e>
 8006872:	bf00      	nop
 8006874:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006878:	4b9b      	ldr	r3, [pc, #620]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a9a      	ldr	r2, [pc, #616]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800687e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006882:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006884:	f7fd fcf4 	bl	8004270 <HAL_GetTick>
 8006888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800688c:	f7fd fcf0 	bl	8004270 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e1c0      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800689e:	4b92      	ldr	r3, [pc, #584]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8081 	beq.w	80069ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068b8:	4b8c      	ldr	r3, [pc, #560]	@ (8006aec <HAL_RCC_OscConfig+0x770>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a8b      	ldr	r2, [pc, #556]	@ (8006aec <HAL_RCC_OscConfig+0x770>)
 80068be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068c4:	f7fd fcd4 	bl	8004270 <HAL_GetTick>
 80068c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068cc:	f7fd fcd0 	bl	8004270 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	@ 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1a0      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068de:	4b83      	ldr	r3, [pc, #524]	@ (8006aec <HAL_RCC_OscConfig+0x770>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x584>
 80068f2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fe:	e02d      	b.n	800695c <HAL_RCC_OscConfig+0x5e0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <HAL_RCC_OscConfig+0x5a6>
 8006908:	4b77      	ldr	r3, [pc, #476]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690c:	4a76      	ldr	r2, [pc, #472]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	6713      	str	r3, [r2, #112]	@ 0x70
 8006914:	4b74      	ldr	r3, [pc, #464]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006918:	4a73      	ldr	r2, [pc, #460]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800691a:	f023 0304 	bic.w	r3, r3, #4
 800691e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006920:	e01c      	b.n	800695c <HAL_RCC_OscConfig+0x5e0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b05      	cmp	r3, #5
 8006928:	d10c      	bne.n	8006944 <HAL_RCC_OscConfig+0x5c8>
 800692a:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006930:	f043 0304 	orr.w	r3, r3, #4
 8006934:	6713      	str	r3, [r2, #112]	@ 0x70
 8006936:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	4a6b      	ldr	r2, [pc, #428]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	6713      	str	r3, [r2, #112]	@ 0x70
 8006942:	e00b      	b.n	800695c <HAL_RCC_OscConfig+0x5e0>
 8006944:	4b68      	ldr	r3, [pc, #416]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006948:	4a67      	ldr	r2, [pc, #412]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006950:	4b65      	ldr	r3, [pc, #404]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006954:	4a64      	ldr	r2, [pc, #400]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006956:	f023 0304 	bic.w	r3, r3, #4
 800695a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d015      	beq.n	8006990 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006964:	f7fd fc84 	bl	8004270 <HAL_GetTick>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800696a:	e00a      	b.n	8006982 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696c:	f7fd fc80 	bl	8004270 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e14e      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006982:	4b59      	ldr	r3, [pc, #356]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0ee      	beq.n	800696c <HAL_RCC_OscConfig+0x5f0>
 800698e:	e014      	b.n	80069ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fd fc6e 	bl	8004270 <HAL_GetTick>
 8006994:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006996:	e00a      	b.n	80069ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006998:	f7fd fc6a 	bl	8004270 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e138      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ae:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1ee      	bne.n	8006998 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 812d 	beq.w	8006c1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069c4:	4b48      	ldr	r3, [pc, #288]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069cc:	2b18      	cmp	r3, #24
 80069ce:	f000 80bd 	beq.w	8006b4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	f040 809e 	bne.w	8006b18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069dc:	4b42      	ldr	r3, [pc, #264]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a41      	ldr	r2, [pc, #260]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 80069e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fd fc42 	bl	8004270 <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fd fc3e 	bl	8004270 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e10e      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a02:	4b39      	ldr	r3, [pc, #228]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a12:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <HAL_RCC_OscConfig+0x774>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a1e:	0112      	lsls	r2, r2, #4
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4931      	ldr	r1, [pc, #196]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	3b01      	subs	r3, #1
 8006a38:	025b      	lsls	r3, r3, #9
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	3b01      	subs	r3, #1
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	3b01      	subs	r3, #1
 8006a52:	061b      	lsls	r3, r3, #24
 8006a54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a58:	4923      	ldr	r1, [pc, #140]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a5e:	4b22      	ldr	r3, [pc, #136]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	4a21      	ldr	r2, [pc, #132]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a6e:	4b21      	ldr	r3, [pc, #132]	@ (8006af4 <HAL_RCC_OscConfig+0x778>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	491b      	ldr	r1, [pc, #108]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	f023 020c 	bic.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	4917      	ldr	r1, [pc, #92]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a90:	4b15      	ldr	r3, [pc, #84]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	f023 0202 	bic.w	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9c:	4912      	ldr	r1, [pc, #72]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aa2:	4b11      	ldr	r3, [pc, #68]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa6:	4a10      	ldr	r2, [pc, #64]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006aba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ac6:	4b08      	ldr	r3, [pc, #32]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	4a07      	ldr	r2, [pc, #28]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad2:	4b05      	ldr	r3, [pc, #20]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a04      	ldr	r2, [pc, #16]	@ (8006ae8 <HAL_RCC_OscConfig+0x76c>)
 8006ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fd fbc7 	bl	8004270 <HAL_GetTick>
 8006ae2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae4:	e011      	b.n	8006b0a <HAL_RCC_OscConfig+0x78e>
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	58024800 	.word	0x58024800
 8006af0:	fffffc0c 	.word	0xfffffc0c
 8006af4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af8:	f7fd fbba 	bl	8004270 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e08a      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCC_OscConfig+0x77c>
 8006b16:	e082      	b.n	8006c1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b18:	4b43      	ldr	r3, [pc, #268]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a42      	ldr	r2, [pc, #264]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd fba4 	bl	8004270 <HAL_GetTick>
 8006b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fd fba0 	bl	8004270 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e070      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x7b0>
 8006b4a:	e068      	b.n	8006c1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b4c:	4b36      	ldr	r3, [pc, #216]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b52:	4b35      	ldr	r3, [pc, #212]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d031      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f003 0203 	and.w	r2, r3, #3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	091b      	lsrs	r3, r3, #4
 8006b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d122      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d11a      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	0a5b      	lsrs	r3, r3, #9
 8006b92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d111      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d108      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	0e1b      	lsrs	r3, r3, #24
 8006bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e02b      	b.n	8006c20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006bc8:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d01f      	beq.n	8006c1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	4a11      	ldr	r2, [pc, #68]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bea:	f7fd fb41 	bl	8004270 <HAL_GetTick>
 8006bee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bf0:	bf00      	nop
 8006bf2:	f7fd fb3d 	bl	8004270 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d0f9      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <HAL_RCC_OscConfig+0x8b0>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c0a:	00d2      	lsls	r2, r2, #3
 8006c0c:	4906      	ldr	r1, [pc, #24]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c12:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	4a04      	ldr	r2, [pc, #16]	@ (8006c28 <HAL_RCC_OscConfig+0x8ac>)
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3730      	adds	r7, #48	@ 0x30
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	ffff0007 	.word	0xffff0007

08006c30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e19c      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b8a      	ldr	r3, [pc, #552]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b87      	ldr	r3, [pc, #540]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 020f 	bic.w	r2, r3, #15
 8006c5a:	4985      	ldr	r1, [pc, #532]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b83      	ldr	r3, [pc, #524]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e184      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	4b7b      	ldr	r3, [pc, #492]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c90:	4b78      	ldr	r3, [pc, #480]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	4975      	ldr	r1, [pc, #468]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d010      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	4b70      	ldr	r3, [pc, #448]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d908      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	496a      	ldr	r1, [pc, #424]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0310 	and.w	r3, r3, #16
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	4b64      	ldr	r3, [pc, #400]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d908      	bls.n	8006cfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cec:	4b61      	ldr	r3, [pc, #388]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	495e      	ldr	r1, [pc, #376]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d010      	beq.n	8006d2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	4b59      	ldr	r3, [pc, #356]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d908      	bls.n	8006d2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d1a:	4b56      	ldr	r3, [pc, #344]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	4953      	ldr	r1, [pc, #332]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d908      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d48:	4b4a      	ldr	r3, [pc, #296]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f023 020f 	bic.w	r2, r3, #15
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4947      	ldr	r1, [pc, #284]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d055      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d66:	4b43      	ldr	r3, [pc, #268]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	4940      	ldr	r1, [pc, #256]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d80:	4b3c      	ldr	r3, [pc, #240]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d121      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0f6      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d107      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d98:	4b36      	ldr	r3, [pc, #216]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d115      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ea      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006db0:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0de      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0d6      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dd0:	4b28      	ldr	r3, [pc, #160]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f023 0207 	bic.w	r2, r3, #7
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	4925      	ldr	r1, [pc, #148]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de2:	f7fd fa45 	bl	8004270 <HAL_GetTick>
 8006de6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de8:	e00a      	b.n	8006e00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dea:	f7fd fa41 	bl	8004270 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e0be      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e00:	4b1c      	ldr	r3, [pc, #112]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d1eb      	bne.n	8006dea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d010      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	4b14      	ldr	r3, [pc, #80]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d208      	bcs.n	8006e40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e2e:	4b11      	ldr	r3, [pc, #68]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	490e      	ldr	r1, [pc, #56]	@ (8006e74 <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d214      	bcs.n	8006e78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 020f 	bic.w	r2, r3, #15
 8006e56:	4906      	ldr	r1, [pc, #24]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b04      	ldr	r3, [pc, #16]	@ (8006e70 <HAL_RCC_ClockConfig+0x240>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d005      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e086      	b.n	8006f7e <HAL_RCC_ClockConfig+0x34e>
 8006e70:	52002000 	.word	0x52002000
 8006e74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	4b3f      	ldr	r3, [pc, #252]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d208      	bcs.n	8006ea6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e94:	4b3c      	ldr	r3, [pc, #240]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	4939      	ldr	r1, [pc, #228]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	4b34      	ldr	r3, [pc, #208]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d208      	bcs.n	8006ed4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ec2:	4b31      	ldr	r3, [pc, #196]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	492e      	ldr	r1, [pc, #184]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	4b28      	ldr	r3, [pc, #160]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d208      	bcs.n	8006f02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ef0:	4b25      	ldr	r3, [pc, #148]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4922      	ldr	r1, [pc, #136]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d208      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	4917      	ldr	r1, [pc, #92]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f30:	f000 f834 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	4912      	ldr	r1, [pc, #72]	@ (8006f8c <HAL_RCC_ClockConfig+0x35c>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <HAL_RCC_ClockConfig+0x358>)
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	4a0d      	ldr	r2, [pc, #52]	@ (8006f8c <HAL_RCC_ClockConfig+0x35c>)
 8006f58:	5cd3      	ldrb	r3, [r2, r3]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x360>)
 8006f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f68:	4a0a      	ldr	r2, [pc, #40]	@ (8006f94 <HAL_RCC_ClockConfig+0x364>)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <HAL_RCC_ClockConfig+0x368>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd f932 	bl	80041dc <HAL_InitTick>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	08011de4 	.word	0x08011de4
 8006f90:	24000054 	.word	0x24000054
 8006f94:	24000050 	.word	0x24000050
 8006f98:	24000058 	.word	0x24000058

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b089      	sub	sp, #36	@ 0x24
 8006fa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fa2:	4bb3      	ldr	r3, [pc, #716]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006faa:	2b18      	cmp	r3, #24
 8006fac:	f200 8155 	bhi.w	800725a <HAL_RCC_GetSysClockFreq+0x2be>
 8006fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	0800725b 	.word	0x0800725b
 8006fc0:	0800725b 	.word	0x0800725b
 8006fc4:	0800725b 	.word	0x0800725b
 8006fc8:	0800725b 	.word	0x0800725b
 8006fcc:	0800725b 	.word	0x0800725b
 8006fd0:	0800725b 	.word	0x0800725b
 8006fd4:	0800725b 	.word	0x0800725b
 8006fd8:	08007043 	.word	0x08007043
 8006fdc:	0800725b 	.word	0x0800725b
 8006fe0:	0800725b 	.word	0x0800725b
 8006fe4:	0800725b 	.word	0x0800725b
 8006fe8:	0800725b 	.word	0x0800725b
 8006fec:	0800725b 	.word	0x0800725b
 8006ff0:	0800725b 	.word	0x0800725b
 8006ff4:	0800725b 	.word	0x0800725b
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	0800725b 	.word	0x0800725b
 8007000:	0800725b 	.word	0x0800725b
 8007004:	0800725b 	.word	0x0800725b
 8007008:	0800725b 	.word	0x0800725b
 800700c:	0800725b 	.word	0x0800725b
 8007010:	0800725b 	.word	0x0800725b
 8007014:	0800725b 	.word	0x0800725b
 8007018:	0800704f 	.word	0x0800704f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800701c:	4b94      	ldr	r3, [pc, #592]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d009      	beq.n	800703c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007028:	4b91      	ldr	r3, [pc, #580]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	4a90      	ldr	r2, [pc, #576]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800703a:	e111      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800703c:	4b8d      	ldr	r3, [pc, #564]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800703e:	61bb      	str	r3, [r7, #24]
      break;
 8007040:	e10e      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007042:	4b8d      	ldr	r3, [pc, #564]	@ (8007278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007044:	61bb      	str	r3, [r7, #24]
      break;
 8007046:	e10b      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007048:	4b8c      	ldr	r3, [pc, #560]	@ (800727c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800704a:	61bb      	str	r3, [r7, #24]
      break;
 800704c:	e108      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800704e:	4b88      	ldr	r3, [pc, #544]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007058:	4b85      	ldr	r3, [pc, #532]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007062:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007064:	4b82      	ldr	r3, [pc, #520]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800706e:	4b80      	ldr	r3, [pc, #512]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007072:	08db      	lsrs	r3, r3, #3
 8007074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80e1 	beq.w	8007254 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f000 8083 	beq.w	80071a0 <HAL_RCC_GetSysClockFreq+0x204>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b02      	cmp	r3, #2
 800709e:	f200 80a1 	bhi.w	80071e4 <HAL_RCC_GetSysClockFreq+0x248>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_RCC_GetSysClockFreq+0x114>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d056      	beq.n	800715c <HAL_RCC_GetSysClockFreq+0x1c0>
 80070ae:	e099      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02d      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	4a6b      	ldr	r2, [pc, #428]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b62      	ldr	r3, [pc, #392]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007116:	e087      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007284 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b51      	ldr	r3, [pc, #324]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a02 	vldr	s12, [r7, #8]
 800713e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800715a:	e065      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007288 <HAL_RCC_GetSysClockFreq+0x2ec>
 800716a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716e:	4b40      	ldr	r3, [pc, #256]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007182:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800719e:	e043      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800728c <HAL_RCC_GetSysClockFreq+0x2f0>
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071e2:	e021      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007288 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a02 	vldr	s12, [r7, #8]
 800720a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007226:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	0a5b      	lsrs	r3, r3, #9
 800722e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007232:	3301      	adds	r3, #1
 8007234:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007240:	edd7 6a07 	vldr	s13, [r7, #28]
 8007244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724c:	ee17 3a90 	vmov	r3, s15
 8007250:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007252:	e005      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
      break;
 8007258:	e002      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800725a:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800725c:	61bb      	str	r3, [r7, #24]
      break;
 800725e:	bf00      	nop
  }

  return sysclockfreq;
 8007260:	69bb      	ldr	r3, [r7, #24]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3724      	adds	r7, #36	@ 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	03d09000 	.word	0x03d09000
 8007278:	003d0900 	.word	0x003d0900
 800727c:	017d7840 	.word	0x017d7840
 8007280:	46000000 	.word	0x46000000
 8007284:	4c742400 	.word	0x4c742400
 8007288:	4a742400 	.word	0x4a742400
 800728c:	4bbebc20 	.word	0x4bbebc20

08007290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007296:	f7ff fe81 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 800729a:	4602      	mov	r2, r0
 800729c:	4b10      	ldr	r3, [pc, #64]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	490f      	ldr	r1, [pc, #60]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80072a8:	5ccb      	ldrb	r3, [r1, r3]
 80072aa:	f003 031f 	and.w	r3, r3, #31
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072b4:	4b0a      	ldr	r3, [pc, #40]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	4a09      	ldr	r2, [pc, #36]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	4a07      	ldr	r2, [pc, #28]	@ (80072e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ce:	4a07      	ldr	r2, [pc, #28]	@ (80072ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072d4:	4b04      	ldr	r3, [pc, #16]	@ (80072e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	58024400 	.word	0x58024400
 80072e4:	08011de4 	.word	0x08011de4
 80072e8:	24000054 	.word	0x24000054
 80072ec:	24000050 	.word	0x24000050

080072f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072f4:	f7ff ffcc 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	091b      	lsrs	r3, r3, #4
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4904      	ldr	r1, [pc, #16]	@ (8007318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007306:	5ccb      	ldrb	r3, [r1, r3]
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	58024400 	.word	0x58024400
 8007318:	08011de4 	.word	0x08011de4

0800731c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007320:	f7ff ffb6 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 8007324:	4602      	mov	r2, r0
 8007326:	4b06      	ldr	r3, [pc, #24]	@ (8007340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	4904      	ldr	r1, [pc, #16]	@ (8007344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007332:	5ccb      	ldrb	r3, [r1, r3]
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800733c:	4618      	mov	r0, r3
 800733e:	bd80      	pop	{r7, pc}
 8007340:	58024400 	.word	0x58024400
 8007344:	08011de4 	.word	0x08011de4

08007348 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734c:	b0ca      	sub	sp, #296	@ 0x128
 800734e:	af00      	add	r7, sp, #0
 8007350:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007354:	2300      	movs	r3, #0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800735a:	2300      	movs	r3, #0
 800735c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800736c:	2500      	movs	r5, #0
 800736e:	ea54 0305 	orrs.w	r3, r4, r5
 8007372:	d049      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800737a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800737e:	d02f      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007380:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007384:	d828      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800738a:	d01a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800738c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007390:	d822      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739a:	d007      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800739c:	e01c      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800739e:	4bb8      	ldr	r3, [pc, #736]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	4ab7      	ldr	r2, [pc, #732]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073aa:	e01a      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	3308      	adds	r3, #8
 80073b2:	2102      	movs	r1, #2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f002 fb61 	bl	8009a7c <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073c0:	e00f      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	3328      	adds	r3, #40	@ 0x28
 80073c8:	2102      	movs	r1, #2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f002 fc08 	bl	8009be0 <RCCEx_PLL3_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073d6:	e004      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073de:	e000      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073ea:	4ba5      	ldr	r3, [pc, #660]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f8:	4aa1      	ldr	r2, [pc, #644]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	430b      	orrs	r3, r1
 80073fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80073fe:	e003      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007414:	f04f 0900 	mov.w	r9, #0
 8007418:	ea58 0309 	orrs.w	r3, r8, r9
 800741c:	d047      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007424:	2b04      	cmp	r3, #4
 8007426:	d82a      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007445 	.word	0x08007445
 8007434:	08007453 	.word	0x08007453
 8007438:	08007469 	.word	0x08007469
 800743c:	08007487 	.word	0x08007487
 8007440:	08007487 	.word	0x08007487
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b8e      	ldr	r3, [pc, #568]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	4a8d      	ldr	r2, [pc, #564]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007450:	e01a      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007456:	3308      	adds	r3, #8
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f002 fb0e 	bl	8009a7c <RCCEx_PLL2_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007466:	e00f      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	3328      	adds	r3, #40	@ 0x28
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f002 fbb5 	bl	8009be0 <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800747c:	e004      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007490:	4b7b      	ldr	r3, [pc, #492]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007494:	f023 0107 	bic.w	r1, r3, #7
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749e:	4a78      	ldr	r2, [pc, #480]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074a0:	430b      	orrs	r3, r1
 80074a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80074ba:	f04f 0b00 	mov.w	fp, #0
 80074be:	ea5a 030b 	orrs.w	r3, sl, fp
 80074c2:	d04c      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ce:	d030      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d4:	d829      	bhi.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80074d8:	d02d      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074da:	2bc0      	cmp	r3, #192	@ 0xc0
 80074dc:	d825      	bhi.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074de:	2b80      	cmp	r3, #128	@ 0x80
 80074e0:	d018      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074e2:	2b80      	cmp	r3, #128	@ 0x80
 80074e4:	d821      	bhi.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d007      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074ee:	e01c      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f0:	4b63      	ldr	r3, [pc, #396]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	4a62      	ldr	r2, [pc, #392]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074fc:	e01c      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	3308      	adds	r3, #8
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f002 fab8 	bl	8009a7c <RCCEx_PLL2_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007512:	e011      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	3328      	adds	r3, #40	@ 0x28
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f002 fb5f 	bl	8009be0 <RCCEx_PLL3_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007528:	e006      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007530:	e002      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007540:	4b4f      	ldr	r3, [pc, #316]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007544:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754e:	4a4c      	ldr	r2, [pc, #304]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007550:	430b      	orrs	r3, r1
 8007552:	6513      	str	r3, [r2, #80]	@ 0x50
 8007554:	e003      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800756a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007574:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d053      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800758a:	d035      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800758c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007590:	d82e      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007592:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007596:	d031      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007598:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800759c:	d828      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800759e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075a2:	d01a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80075a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075a8:	d822      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80075ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075b2:	d007      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80075b4:	e01c      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b6:	4b32      	ldr	r3, [pc, #200]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	4a31      	ldr	r2, [pc, #196]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e01c      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	3308      	adds	r3, #8
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 fa55 	bl	8009a7c <RCCEx_PLL2_Config>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075d8:	e011      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075de:	3328      	adds	r3, #40	@ 0x28
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 fafc 	bl	8009be0 <RCCEx_PLL3_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ee:	e006      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f6:	e002      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007606:	4b1e      	ldr	r3, [pc, #120]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007616:	4a1a      	ldr	r2, [pc, #104]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007618:	430b      	orrs	r3, r1
 800761a:	6593      	str	r3, [r2, #88]	@ 0x58
 800761c:	e003      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007632:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007636:	2300      	movs	r3, #0
 8007638:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800763c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007640:	460b      	mov	r3, r1
 8007642:	4313      	orrs	r3, r2
 8007644:	d056      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800764e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007652:	d038      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007658:	d831      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800765a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800765e:	d034      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007660:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007664:	d82b      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800766a:	d01d      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800766c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007670:	d825      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800767a:	d00a      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800767c:	e01f      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800767e:	bf00      	nop
 8007680:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007684:	4ba2      	ldr	r3, [pc, #648]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	4aa1      	ldr	r2, [pc, #644]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800768a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800768e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007690:	e01c      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007696:	3308      	adds	r3, #8
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f002 f9ee 	bl	8009a7c <RCCEx_PLL2_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076a6:	e011      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	3328      	adds	r3, #40	@ 0x28
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 fa95 	bl	8009be0 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076bc:	e006      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c4:	e002      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076d4:	4b8e      	ldr	r3, [pc, #568]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076e4:	4a8a      	ldr	r2, [pc, #552]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e6:	430b      	orrs	r3, r1
 80076e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ea:	e003      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800770a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d03a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	2b30      	cmp	r3, #48	@ 0x30
 800771c:	d01f      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800771e:	2b30      	cmp	r3, #48	@ 0x30
 8007720:	d819      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007722:	2b20      	cmp	r3, #32
 8007724:	d00c      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d815      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d019      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800772e:	2b10      	cmp	r3, #16
 8007730:	d111      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007732:	4b77      	ldr	r3, [pc, #476]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	4a76      	ldr	r2, [pc, #472]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800773c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800773e:	e011      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007744:	3308      	adds	r3, #8
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f002 f997 	bl	8009a7c <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007754:	e006      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800775c:	e002      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800776c:	4b68      	ldr	r3, [pc, #416]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007770:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777a:	4a65      	ldr	r2, [pc, #404]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800777c:	430b      	orrs	r3, r1
 800777e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007780:	e003      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007796:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800779a:	2300      	movs	r3, #0
 800779c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80077a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4313      	orrs	r3, r2
 80077a8:	d051      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077b4:	d035      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ba:	d82e      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077c0:	d031      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077c6:	d828      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077cc:	d01a      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d2:	d822      	bhi.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077dc:	d007      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077de:	e01c      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	4a4a      	ldr	r2, [pc, #296]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077ec:	e01c      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	3308      	adds	r3, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f940 	bl	8009a7c <RCCEx_PLL2_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007802:	e011      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	3328      	adds	r3, #40	@ 0x28
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f002 f9e7 	bl	8009be0 <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007818:	e006      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007820:	e002      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007830:	4b37      	ldr	r3, [pc, #220]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007834:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800783e:	4a34      	ldr	r2, [pc, #208]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007840:	430b      	orrs	r3, r1
 8007842:	6513      	str	r3, [r2, #80]	@ 0x50
 8007844:	e003      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800785a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007864:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007868:	460b      	mov	r3, r1
 800786a:	4313      	orrs	r3, r2
 800786c:	d056      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800786e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007878:	d033      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800787a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800787e:	d82c      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007884:	d02f      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007886:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800788a:	d826      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800788c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007890:	d02b      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007896:	d820      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800789c:	d012      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800789e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a2:	d81a      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d022      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ac:	d115      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b2:	3308      	adds	r3, #8
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 f8e0 	bl	8009a7c <RCCEx_PLL2_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078c2:	e015      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c8:	3328      	adds	r3, #40	@ 0x28
 80078ca:	2101      	movs	r1, #1
 80078cc:	4618      	mov	r0, r3
 80078ce:	f002 f987 	bl	8009be0 <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078d8:	e00a      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e0:	e006      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078f8:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007906:	4a02      	ldr	r2, [pc, #8]	@ (8007910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007908:	430b      	orrs	r3, r1
 800790a:	6513      	str	r3, [r2, #80]	@ 0x50
 800790c:	e006      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800790e:	bf00      	nop
 8007910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800792c:	2300      	movs	r3, #0
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007932:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007936:	460b      	mov	r3, r1
 8007938:	4313      	orrs	r3, r2
 800793a:	d055      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007948:	d033      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800794a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800794e:	d82c      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007954:	d02f      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795a:	d826      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800795c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007960:	d02b      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007966:	d820      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800796c:	d012      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800796e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007972:	d81a      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d022      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800797c:	d115      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	3308      	adds	r3, #8
 8007984:	2101      	movs	r1, #1
 8007986:	4618      	mov	r0, r3
 8007988:	f002 f878 	bl	8009a7c <RCCEx_PLL2_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007992:	e015      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	3328      	adds	r3, #40	@ 0x28
 800799a:	2101      	movs	r1, #1
 800799c:	4618      	mov	r0, r3
 800799e:	f002 f91f 	bl	8009be0 <RCCEx_PLL3_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079a8:	e00a      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b0:	e006      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079b2:	bf00      	nop
 80079b4:	e004      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079b6:	bf00      	nop
 80079b8:	e002      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079ba:	bf00      	nop
 80079bc:	e000      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079c8:	4ba3      	ldr	r3, [pc, #652]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079d8:	4a9f      	ldr	r2, [pc, #636]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079da:	430b      	orrs	r3, r1
 80079dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079de:	e003      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079f8:	2300      	movs	r3, #0
 80079fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a02:	460b      	mov	r3, r1
 8007a04:	4313      	orrs	r3, r2
 8007a06:	d037      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a12:	d00e      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a18:	d816      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d018      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a22:	d111      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a24:	4b8c      	ldr	r3, [pc, #560]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	4a8b      	ldr	r2, [pc, #556]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a30:	e00f      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a36:	3308      	adds	r3, #8
 8007a38:	2101      	movs	r1, #1
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f002 f81e 	bl	8009a7c <RCCEx_PLL2_Config>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a46:	e004      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a4e:	e000      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a68:	4a7b      	ldr	r2, [pc, #492]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a6e:	e003      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4313      	orrs	r3, r2
 8007a96:	d039      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d81c      	bhi.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ab9 	.word	0x08007ab9
 8007ab0:	08007ac7 	.word	0x08007ac7
 8007ab4:	08007ae5 	.word	0x08007ae5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab8:	4b67      	ldr	r3, [pc, #412]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	4a66      	ldr	r2, [pc, #408]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	3308      	adds	r3, #8
 8007acc:	2102      	movs	r1, #2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 ffd4 	bl	8009a7c <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ada:	e004      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aee:	4b5a      	ldr	r3, [pc, #360]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af2:	f023 0103 	bic.w	r1, r3, #3
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007afc:	4a56      	ldr	r2, [pc, #344]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b02:	e003      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b26:	460b      	mov	r3, r1
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f000 809f 	beq.w	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a4a      	ldr	r2, [pc, #296]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b3a:	f7fc fb99 	bl	8004270 <HAL_GetTick>
 8007b3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b42:	e00b      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b44:	f7fc fb94 	bl	8004270 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b64      	cmp	r3, #100	@ 0x64
 8007b52:	d903      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b5a:	e005      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ed      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d179      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b70:	4b39      	ldr	r3, [pc, #228]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b7c:	4053      	eors	r3, r2
 8007b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d015      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b86:	4b34      	ldr	r3, [pc, #208]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b92:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b96:	4a30      	ldr	r2, [pc, #192]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ba8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007baa:	4a2b      	ldr	r2, [pc, #172]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007bb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bbe:	d118      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fc fb56 	bl	8004270 <HAL_GetTick>
 8007bc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc8:	e00d      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bca:	f7fc fb51 	bl	8004270 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d903      	bls.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007be4:	e005      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007be6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0eb      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d129      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c0a:	d10e      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c0c:	4b12      	ldr	r3, [pc, #72]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c1c:	091a      	lsrs	r2, r3, #4
 8007c1e:	4b10      	ldr	r3, [pc, #64]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	4a0d      	ldr	r2, [pc, #52]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6113      	str	r3, [r2, #16]
 8007c28:	e005      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c34:	6113      	str	r3, [r2, #16]
 8007c36:	4b08      	ldr	r3, [pc, #32]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c46:	4a04      	ldr	r2, [pc, #16]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c4c:	e00e      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007c56:	e009      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	58024800 	.word	0x58024800
 8007c60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f002 0301 	and.w	r3, r2, #1
 8007c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f000 8089 	beq.w	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c94:	2b28      	cmp	r3, #40	@ 0x28
 8007c96:	d86b      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007d79 	.word	0x08007d79
 8007ca4:	08007d71 	.word	0x08007d71
 8007ca8:	08007d71 	.word	0x08007d71
 8007cac:	08007d71 	.word	0x08007d71
 8007cb0:	08007d71 	.word	0x08007d71
 8007cb4:	08007d71 	.word	0x08007d71
 8007cb8:	08007d71 	.word	0x08007d71
 8007cbc:	08007d71 	.word	0x08007d71
 8007cc0:	08007d45 	.word	0x08007d45
 8007cc4:	08007d71 	.word	0x08007d71
 8007cc8:	08007d71 	.word	0x08007d71
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007d71 	.word	0x08007d71
 8007cd4:	08007d71 	.word	0x08007d71
 8007cd8:	08007d71 	.word	0x08007d71
 8007cdc:	08007d71 	.word	0x08007d71
 8007ce0:	08007d5b 	.word	0x08007d5b
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007d71 	.word	0x08007d71
 8007cec:	08007d71 	.word	0x08007d71
 8007cf0:	08007d71 	.word	0x08007d71
 8007cf4:	08007d71 	.word	0x08007d71
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d71 	.word	0x08007d71
 8007d00:	08007d79 	.word	0x08007d79
 8007d04:	08007d71 	.word	0x08007d71
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d79 	.word	0x08007d79
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d71 	.word	0x08007d71
 8007d38:	08007d71 	.word	0x08007d71
 8007d3c:	08007d71 	.word	0x08007d71
 8007d40:	08007d79 	.word	0x08007d79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fe95 	bl	8009a7c <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d58:	e00f      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 ff3c 	bl	8009be0 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e004      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d76:	e000      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d82:	4bbf      	ldr	r3, [pc, #764]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d90:	4abb      	ldr	r2, [pc, #748]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f002 0302 	and.w	r3, r2, #2
 8007dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007db6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d041      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d824      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e1d 	.word	0x08007e1d
 8007dd4:	08007de9 	.word	0x08007de9
 8007dd8:	08007dff 	.word	0x08007dff
 8007ddc:	08007e1d 	.word	0x08007e1d
 8007de0:	08007e1d 	.word	0x08007e1d
 8007de4:	08007e1d 	.word	0x08007e1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	3308      	adds	r3, #8
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 fe43 	bl	8009a7c <RCCEx_PLL2_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dfc:	e00f      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	3328      	adds	r3, #40	@ 0x28
 8007e04:	2101      	movs	r1, #1
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 feea 	bl	8009be0 <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e12:	e004      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e26:	4b96      	ldr	r3, [pc, #600]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2a:	f023 0107 	bic.w	r1, r3, #7
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e34:	4a92      	ldr	r2, [pc, #584]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e36:	430b      	orrs	r3, r1
 8007e38:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e3a:	e003      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f002 0304 	and.w	r3, r2, #4
 8007e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d044      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e6c:	2b05      	cmp	r3, #5
 8007e6e:	d825      	bhi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007ec5 	.word	0x08007ec5
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007ea7 	.word	0x08007ea7
 8007e84:	08007ec5 	.word	0x08007ec5
 8007e88:	08007ec5 	.word	0x08007ec5
 8007e8c:	08007ec5 	.word	0x08007ec5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	3308      	adds	r3, #8
 8007e96:	2101      	movs	r1, #1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fdef 	bl	8009a7c <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ea4:	e00f      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	3328      	adds	r3, #40	@ 0x28
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fe96 	bl	8009be0 <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007eba:	e004      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ec2:	e000      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ece:	4b6c      	ldr	r3, [pc, #432]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	f023 0107 	bic.w	r1, r3, #7
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ede:	4a68      	ldr	r2, [pc, #416]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee4:	e003      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f002 0320 	and.w	r3, r2, #32
 8007efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d055      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f1a:	d033      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f20:	d82c      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f26:	d02f      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2c:	d826      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f32:	d02b      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f38:	d820      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3e:	d012      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f44:	d81a      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d022      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f4e:	d115      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	3308      	adds	r3, #8
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 fd8f 	bl	8009a7c <RCCEx_PLL2_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f64:	e015      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	3328      	adds	r3, #40	@ 0x28
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 fe36 	bl	8009be0 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f82:	e006      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f84:	bf00      	nop
 8007f86:	e004      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f88:	bf00      	nop
 8007f8a:	e002      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f8c:	bf00      	nop
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f9a:	4b39      	ldr	r3, [pc, #228]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007faa:	4a35      	ldr	r2, [pc, #212]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	d058      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fe2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fe6:	d033      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fe8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fec:	d82c      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff2:	d02f      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff8:	d826      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ffe:	d02b      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008004:	d820      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800800a:	d012      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008010:	d81a      	bhi.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d022      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801a:	d115      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008020:	3308      	adds	r3, #8
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fd29 	bl	8009a7c <RCCEx_PLL2_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008030:	e015      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	3328      	adds	r3, #40	@ 0x28
 8008038:	2102      	movs	r1, #2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fdd0 	bl	8009be0 <RCCEx_PLL3_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008046:	e00a      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800804e:	e006      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008050:	bf00      	nop
 8008052:	e004      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008054:	bf00      	nop
 8008056:	e002      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800805c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10e      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008066:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008076:	4a02      	ldr	r2, [pc, #8]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6593      	str	r3, [r2, #88]	@ 0x58
 800807c:	e006      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d055      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080b8:	d033      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80080ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080be:	d82c      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c4:	d02f      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ca:	d826      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080d0:	d02b      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080d6:	d820      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080dc:	d012      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080e2:	d81a      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d022      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ec:	d115      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	3308      	adds	r3, #8
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fcc0 	bl	8009a7c <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008102:	e015      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	3328      	adds	r3, #40	@ 0x28
 800810a:	2102      	movs	r1, #2
 800810c:	4618      	mov	r0, r3
 800810e:	f001 fd67 	bl	8009be0 <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008118:	e00a      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008122:	bf00      	nop
 8008124:	e004      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008138:	4ba1      	ldr	r3, [pc, #644]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008144:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008148:	4a9d      	ldr	r2, [pc, #628]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6593      	str	r3, [r2, #88]	@ 0x58
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f002 0308 	and.w	r3, r2, #8
 8008164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800816e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d01e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008184:	d10c      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818a:	3328      	adds	r3, #40	@ 0x28
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fd26 	bl	8009be0 <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80081a0:	4b87      	ldr	r3, [pc, #540]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b0:	4a83      	ldr	r2, [pc, #524]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081b2:	430b      	orrs	r3, r1
 80081b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f002 0310 	and.w	r3, r2, #16
 80081c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c6:	2300      	movs	r3, #0
 80081c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081d0:	460b      	mov	r3, r1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	d01e      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e2:	d10c      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	3328      	adds	r3, #40	@ 0x28
 80081ea:	2102      	movs	r1, #2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 fcf7 	bl	8009be0 <RCCEx_PLL3_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081fe:	4b70      	ldr	r3, [pc, #448]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800820e:	4a6c      	ldr	r2, [pc, #432]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008210:	430b      	orrs	r3, r1
 8008212:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800822a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800822e:	460b      	mov	r3, r1
 8008230:	4313      	orrs	r3, r2
 8008232:	d03e      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008238:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800823c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008240:	d022      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008246:	d81b      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800824c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008250:	d00b      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008252:	e015      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	3308      	adds	r3, #8
 800825a:	2100      	movs	r1, #0
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fc0d 	bl	8009a7c <RCCEx_PLL2_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008268:	e00f      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	3328      	adds	r3, #40	@ 0x28
 8008270:	2102      	movs	r1, #2
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fcb4 	bl	8009be0 <RCCEx_PLL3_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800827e:	e004      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008286:	e000      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10b      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008292:	4b4b      	ldr	r3, [pc, #300]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082a2:	4a47      	ldr	r2, [pc, #284]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a4:	430b      	orrs	r3, r1
 80082a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a8:	e003      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082c0:	2300      	movs	r3, #0
 80082c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082c8:	460b      	mov	r3, r1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	d03b      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082da:	d01f      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082e0:	d818      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e6:	d003      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082ec:	d007      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082ee:	e011      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f0:	4b33      	ldr	r3, [pc, #204]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4a32      	ldr	r2, [pc, #200]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082fc:	e00f      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	3328      	adds	r3, #40	@ 0x28
 8008304:	2101      	movs	r1, #1
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fc6a 	bl	8009be0 <RCCEx_PLL3_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008312:	e004      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800831a:	e000      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800831c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008326:	4b26      	ldr	r3, [pc, #152]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008336:	4a22      	ldr	r2, [pc, #136]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008338:	430b      	orrs	r3, r1
 800833a:	6553      	str	r3, [r2, #84]	@ 0x54
 800833c:	e003      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008352:	673b      	str	r3, [r7, #112]	@ 0x70
 8008354:	2300      	movs	r3, #0
 8008356:	677b      	str	r3, [r7, #116]	@ 0x74
 8008358:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800835c:	460b      	mov	r3, r1
 800835e:	4313      	orrs	r3, r2
 8008360:	d034      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800836c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008370:	d007      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008372:	e011      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4b12      	ldr	r3, [pc, #72]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008380:	e00e      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	3308      	adds	r3, #8
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fb76 	bl	8009a7c <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008396:	e003      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800839e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10d      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083a8:	4b05      	ldr	r3, [pc, #20]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b6:	4a02      	ldr	r2, [pc, #8]	@ (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80083be:	bf00      	nop
 80083c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083da:	2300      	movs	r3, #0
 80083dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d00c      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ec:	3328      	adds	r3, #40	@ 0x28
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 fbf5 	bl	8009be0 <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800840e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008410:	2300      	movs	r3, #0
 8008412:	667b      	str	r3, [r7, #100]	@ 0x64
 8008414:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008418:	460b      	mov	r3, r1
 800841a:	4313      	orrs	r3, r2
 800841c:	d038      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800842a:	d018      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800842c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008430:	d811      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008436:	d014      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800843c:	d80b      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008448:	4bc3      	ldr	r3, [pc, #780]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	4ac2      	ldr	r2, [pc, #776]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800844e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008454:	e008      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800845c:	e004      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800845e:	bf00      	nop
 8008460:	e002      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008470:	4bb9      	ldr	r3, [pc, #740]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008474:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008480:	4ab5      	ldr	r2, [pc, #724]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008482:	430b      	orrs	r3, r1
 8008484:	6553      	str	r3, [r2, #84]	@ 0x54
 8008486:	e003      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800849c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800849e:	2300      	movs	r3, #0
 80084a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80084a6:	460b      	mov	r3, r1
 80084a8:	4313      	orrs	r3, r2
 80084aa:	d009      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084ac:	4baa      	ldr	r3, [pc, #680]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ba:	4aa7      	ldr	r2, [pc, #668]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084bc:	430b      	orrs	r3, r1
 80084be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ce:	2300      	movs	r3, #0
 80084d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80084d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084d6:	460b      	mov	r3, r1
 80084d8:	4313      	orrs	r3, r2
 80084da:	d00a      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084dc:	4b9e      	ldr	r3, [pc, #632]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084ec:	4a9a      	ldr	r2, [pc, #616]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ee:	430b      	orrs	r3, r1
 80084f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008500:	2300      	movs	r3, #0
 8008502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008504:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008508:	460b      	mov	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	d009      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800850e:	4b92      	ldr	r3, [pc, #584]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008512:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800851c:	4a8e      	ldr	r2, [pc, #568]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800851e:	430b      	orrs	r3, r1
 8008520:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800852e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008530:	2300      	movs	r3, #0
 8008532:	647b      	str	r3, [r7, #68]	@ 0x44
 8008534:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008538:	460b      	mov	r3, r1
 800853a:	4313      	orrs	r3, r2
 800853c:	d00e      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800853e:	4b86      	ldr	r3, [pc, #536]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	4a85      	ldr	r2, [pc, #532]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008544:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008548:	6113      	str	r3, [r2, #16]
 800854a:	4b83      	ldr	r3, [pc, #524]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800854c:	6919      	ldr	r1, [r3, #16]
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008556:	4a80      	ldr	r2, [pc, #512]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008558:	430b      	orrs	r3, r1
 800855a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800856e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d009      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008578:	4b77      	ldr	r3, [pc, #476]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800857a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008586:	4a74      	ldr	r2, [pc, #464]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008588:	430b      	orrs	r3, r1
 800858a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008598:	633b      	str	r3, [r7, #48]	@ 0x30
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80085a2:	460b      	mov	r3, r1
 80085a4:	4313      	orrs	r3, r2
 80085a6:	d00a      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085a8:	4b6b      	ldr	r3, [pc, #428]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b8:	4a67      	ldr	r2, [pc, #412]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	2100      	movs	r1, #0
 80085c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085d4:	460b      	mov	r3, r1
 80085d6:	4313      	orrs	r3, r2
 80085d8:	d011      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	3308      	adds	r3, #8
 80085e0:	2100      	movs	r1, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fa4a 	bl	8009a7c <RCCEx_PLL2_Config>
 80085e8:	4603      	mov	r3, r0
 80085ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	2100      	movs	r1, #0
 8008608:	6239      	str	r1, [r7, #32]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008610:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008614:	460b      	mov	r3, r1
 8008616:	4313      	orrs	r3, r2
 8008618:	d011      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861e:	3308      	adds	r3, #8
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fa2a 	bl	8009a7c <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800862e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	2100      	movs	r1, #0
 8008648:	61b9      	str	r1, [r7, #24]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008654:	460b      	mov	r3, r1
 8008656:	4313      	orrs	r3, r2
 8008658:	d011      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	3308      	adds	r3, #8
 8008660:	2102      	movs	r1, #2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fa0a 	bl	8009a7c <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	2100      	movs	r1, #0
 8008688:	6139      	str	r1, [r7, #16]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008694:	460b      	mov	r3, r1
 8008696:	4313      	orrs	r3, r2
 8008698:	d011      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	3328      	adds	r3, #40	@ 0x28
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fa9c 	bl	8009be0 <RCCEx_PLL3_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80086ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	2100      	movs	r1, #0
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086d4:	460b      	mov	r3, r1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	d011      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086de:	3328      	adds	r3, #40	@ 0x28
 80086e0:	2101      	movs	r1, #1
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fa7c 	bl	8009be0 <RCCEx_PLL3_Config>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	2100      	movs	r1, #0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008714:	460b      	mov	r3, r1
 8008716:	4313      	orrs	r3, r2
 8008718:	d011      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	3328      	adds	r3, #40	@ 0x28
 8008720:	2102      	movs	r1, #2
 8008722:	4618      	mov	r0, r3
 8008724:	f001 fa5c 	bl	8009be0 <RCCEx_PLL3_Config>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800872e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800873e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e000      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
}
 800874c:	4618      	mov	r0, r3
 800874e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008752:	46bd      	mov	sp, r7
 8008754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008758:	58024400 	.word	0x58024400

0800875c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b090      	sub	sp, #64	@ 0x40
 8008760:	af00      	add	r7, sp, #0
 8008762:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800876e:	430b      	orrs	r3, r1
 8008770:	f040 8094 	bne.w	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008774:	4b9e      	ldr	r3, [pc, #632]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b04      	cmp	r3, #4
 8008782:	f200 8087 	bhi.w	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087a1 	.word	0x080087a1
 8008790:	080087c9 	.word	0x080087c9
 8008794:	080087f1 	.word	0x080087f1
 8008798:	0800888d 	.word	0x0800888d
 800879c:	08008819 	.word	0x08008819
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087a0:	4b93      	ldr	r3, [pc, #588]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087ac:	d108      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 f810 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087bc:	f000 bd45 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c4:	f000 bd41 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c8:	4b89      	ldr	r3, [pc, #548]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d4:	d108      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d6:	f107 0318 	add.w	r3, r7, #24
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fd54 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e4:	f000 bd31 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	f000 bd2d 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f0:	4b7f      	ldr	r3, [pc, #508]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fc:	d108      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fe:	f107 030c 	add.w	r3, r7, #12
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fe94 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880c:	f000 bd1d 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008814:	f000 bd19 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008818:	4b75      	ldr	r3, [pc, #468]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800881a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008820:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008822:	4b73      	ldr	r3, [pc, #460]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b04      	cmp	r3, #4
 800882c:	d10c      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800882e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008834:	4b6e      	ldr	r3, [pc, #440]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	4a6d      	ldr	r2, [pc, #436]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008846:	e01f      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008848:	4b69      	ldr	r3, [pc, #420]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008854:	d106      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885c:	d102      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800885e:	4b66      	ldr	r3, [pc, #408]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008862:	e011      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008864:	4b62      	ldr	r3, [pc, #392]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800886c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008870:	d106      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008878:	d102      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800887a:	4b60      	ldr	r3, [pc, #384]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800887c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800887e:	e003      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008884:	f000 bce1 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008888:	f000 bcdf 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800888c:	4b5c      	ldr	r3, [pc, #368]	@ (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008890:	f000 bcdb 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008898:	f000 bcd7 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800889c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80088a4:	430b      	orrs	r3, r1
 80088a6:	f040 80ad 	bne.w	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80088aa:	4b51      	ldr	r3, [pc, #324]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80088b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ba:	d056      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c2:	f200 8090 	bhi.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80088ca:	f000 8088 	beq.w	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80088d2:	f200 8088 	bhi.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b80      	cmp	r3, #128	@ 0x80
 80088da:	d032      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2b80      	cmp	r3, #128	@ 0x80
 80088e0:	f200 8081 	bhi.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	2b40      	cmp	r3, #64	@ 0x40
 80088ee:	d014      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088f0:	e079      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088f2:	4b3f      	ldr	r3, [pc, #252]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088fe:	d108      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008904:	4618      	mov	r0, r3
 8008906:	f000 ff67 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800890e:	f000 bc9c 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008916:	f000 bc98 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800891a:	4b35      	ldr	r3, [pc, #212]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008926:	d108      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008928:	f107 0318 	add.w	r3, r7, #24
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fcab 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008936:	f000 bc88 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893e:	f000 bc84 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008942:	4b2b      	ldr	r3, [pc, #172]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894e:	d108      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fdeb 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895e:	f000 bc74 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008966:	f000 bc70 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800896a:	4b21      	ldr	r3, [pc, #132]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008974:	4b1e      	ldr	r3, [pc, #120]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b04      	cmp	r3, #4
 800897e:	d10c      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008986:	4b1a      	ldr	r3, [pc, #104]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	4a18      	ldr	r2, [pc, #96]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008998:	e01f      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800899a:	4b15      	ldr	r3, [pc, #84]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089b0:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b4:	e011      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089b6:	4b0e      	ldr	r3, [pc, #56]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ca:	d102      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089cc:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d0:	e003      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089d6:	f000 bc38 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089da:	f000 bc36 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089de:	4b08      	ldr	r3, [pc, #32]	@ (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e2:	f000 bc32 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ea:	f000 bc2e 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ee:	bf00      	nop
 80089f0:	58024400 	.word	0x58024400
 80089f4:	03d09000 	.word	0x03d09000
 80089f8:	003d0900 	.word	0x003d0900
 80089fc:	017d7840 	.word	0x017d7840
 8008a00:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a08:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	f040 809c 	bne.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008a12:	4b9e      	ldr	r3, [pc, #632]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a16:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a22:	d054      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a2a:	f200 808b 	bhi.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a34:	f000 8083 	beq.w	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a3e:	f200 8081 	bhi.w	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a48:	d02f      	beq.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a50:	d878      	bhi.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a5e:	d012      	beq.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a60:	e070      	b.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a62:	4b8a      	ldr	r3, [pc, #552]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a6e:	d107      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 feaf 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7e:	e3e4      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a84:	e3e1      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a86:	4b81      	ldr	r3, [pc, #516]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a94:	f107 0318 	add.w	r3, r7, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fbf5 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa2:	e3d2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa8:	e3cf      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aaa:	4b78      	ldr	r3, [pc, #480]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab6:	d107      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab8:	f107 030c 	add.w	r3, r7, #12
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fd37 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac6:	e3c0      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008acc:	e3bd      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ace:	4b6f      	ldr	r3, [pc, #444]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d10c      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aea:	4b68      	ldr	r3, [pc, #416]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	08db      	lsrs	r3, r3, #3
 8008af0:	f003 0303 	and.w	r3, r3, #3
 8008af4:	4a66      	ldr	r2, [pc, #408]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008af6:	fa22 f303 	lsr.w	r3, r2, r3
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afc:	e01e      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008afe:	4b63      	ldr	r3, [pc, #396]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b0a:	d106      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b12:	d102      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b14:	4b5f      	ldr	r3, [pc, #380]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b18:	e010      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b26:	d106      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b30:	4b59      	ldr	r3, [pc, #356]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b3a:	e386      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b3c:	e385      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b3e:	4b57      	ldr	r3, [pc, #348]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b42:	e382      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b48:	e37f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008b52:	430b      	orrs	r3, r1
 8008b54:	f040 80a7 	bne.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b58:	4b4c      	ldr	r3, [pc, #304]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b68:	d055      	beq.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b70:	f200 8096 	bhi.w	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b7a:	f000 8084 	beq.w	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b84:	f200 808c 	bhi.w	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b8e:	d030      	beq.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b96:	f200 8083 	bhi.w	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ba6:	d012      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008ba8:	e07a      	b.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008baa:	4b38      	ldr	r3, [pc, #224]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb6:	d107      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fe0b 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc6:	e340      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bcc:	e33d      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bce:	4b2f      	ldr	r3, [pc, #188]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bda:	d107      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bdc:	f107 0318 	add.w	r3, r7, #24
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fb51 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bea:	e32e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf0:	e32b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bf2:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bfe:	d107      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c00:	f107 030c 	add.w	r3, r7, #12
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fc93 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c0e:	e31c      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c14:	e319      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c16:	4b1d      	ldr	r3, [pc, #116]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c20:	4b1a      	ldr	r3, [pc, #104]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d10c      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c32:	4b16      	ldr	r3, [pc, #88]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	08db      	lsrs	r3, r3, #3
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c44:	e01e      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c46:	4b11      	ldr	r3, [pc, #68]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c52:	d106      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c5a:	d102      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c60:	e010      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c62:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c6e:	d106      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c76:	d102      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c78:	4b07      	ldr	r3, [pc, #28]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c82:	e2e2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c84:	e2e1      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c86:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8a:	e2de      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	03d09000 	.word	0x03d09000
 8008c94:	003d0900 	.word	0x003d0900
 8008c98:	017d7840 	.word	0x017d7840
 8008c9c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e2d1      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008caa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	f040 809c 	bne.w	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008cb4:	4b93      	ldr	r3, [pc, #588]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008cbc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc4:	d054      	beq.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ccc:	f200 808b 	bhi.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cd6:	f000 8083 	beq.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ce0:	f200 8081 	bhi.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cea:	d02f      	beq.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cf2:	d878      	bhi.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d00:	d012      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008d02:	e070      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d04:	4b7f      	ldr	r3, [pc, #508]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d10:	d107      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd5e 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d20:	e293      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d26:	e290      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d28:	4b76      	ldr	r3, [pc, #472]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d34:	d107      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d36:	f107 0318 	add.w	r3, r7, #24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 faa4 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d44:	e281      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4a:	e27e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d58:	d107      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fbe6 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d68:	e26f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6e:	e26c      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d70:	4b64      	ldr	r3, [pc, #400]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d7a:	4b62      	ldr	r3, [pc, #392]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d10c      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	08db      	lsrs	r3, r3, #3
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	4a5c      	ldr	r2, [pc, #368]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d9e:	e01e      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008da0:	4b58      	ldr	r3, [pc, #352]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dac:	d106      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db4:	d102      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008db6:	4b55      	ldr	r3, [pc, #340]	@ (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dba:	e010      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dbc:	4b51      	ldr	r3, [pc, #324]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc8:	d106      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dd0:	d102      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ddc:	e235      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dde:	e234      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008de0:	4b4c      	ldr	r3, [pc, #304]	@ (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	e231      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dea:	e22e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008df4:	430b      	orrs	r3, r1
 8008df6:	f040 808f 	bne.w	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008dfa:	4b42      	ldr	r3, [pc, #264]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008e02:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e0a:	d06b      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e12:	d874      	bhi.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e1a:	d056      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e22:	d86c      	bhi.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e2a:	d03b      	beq.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e32:	d864      	bhi.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3a:	d021      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e42:	d85c      	bhi.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e50:	d004      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e52:	e054      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e54:	f7fe fa4c 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008e58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e5a:	e1f6      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e5c:	4b29      	ldr	r3, [pc, #164]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e68:	d107      	bne.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e6a:	f107 0318 	add.w	r3, r7, #24
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fa0a 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e78:	e1e7      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e7e:	e1e4      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e80:	4b20      	ldr	r3, [pc, #128]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e8c:	d107      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fb4c 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9c:	e1d5      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea2:	e1d2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ea4:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d109      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb0:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	4a13      	ldr	r2, [pc, #76]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec2:	e1c2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e1bf      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eca:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed6:	d102      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008edc:	e1b5      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee2:	e1b2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ee4:	4b07      	ldr	r3, [pc, #28]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ef0:	d102      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008ef2:	4b07      	ldr	r3, [pc, #28]	@ (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef6:	e1a8      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efc:	e1a5      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f02:	e1a2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f04:	58024400 	.word	0x58024400
 8008f08:	03d09000 	.word	0x03d09000
 8008f0c:	003d0900 	.word	0x003d0900
 8008f10:	017d7840 	.word	0x017d7840
 8008f14:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008f20:	430b      	orrs	r3, r1
 8008f22:	d173      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f24:	4b9c      	ldr	r3, [pc, #624]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f34:	d02f      	beq.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3c:	d863      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f4a:	d012      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f4c:	e05b      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4e:	4b92      	ldr	r3, [pc, #584]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5c:	f107 0318 	add.w	r3, r7, #24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f991 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6a:	e16e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e16b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f72:	4b89      	ldr	r3, [pc, #548]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fad3 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8e:	e15c      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f94:	e159      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f96:	4b80      	ldr	r3, [pc, #512]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d10c      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fb2:	4b79      	ldr	r3, [pc, #484]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	08db      	lsrs	r3, r3, #3
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	4a77      	ldr	r2, [pc, #476]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc4:	e01e      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc6:	4b74      	ldr	r3, [pc, #464]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fdc:	4b70      	ldr	r3, [pc, #448]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fe0:	e010      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fee:	d106      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff6:	d102      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ffc:	e002      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009002:	e122      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009004:	e121      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900a:	e11e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009014:	430b      	orrs	r3, r1
 8009016:	d133      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009018:	4b5f      	ldr	r3, [pc, #380]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800901a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009020:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902e:	d012      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009030:	e023      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009032:	4b59      	ldr	r3, [pc, #356]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800903a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800903e:	d107      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fbc7 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800904a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904e:	e0fc      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009054:	e0f9      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009056:	4b50      	ldr	r3, [pc, #320]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800905e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009062:	d107      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009064:	f107 0318 	add.w	r3, r7, #24
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f90d 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009072:	e0ea      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009078:	e0e7      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907e:	e0e4      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009088:	430b      	orrs	r3, r1
 800908a:	f040 808d 	bne.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800908e:	4b42      	ldr	r3, [pc, #264]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009092:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009096:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800909e:	d06b      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090a6:	d874      	bhi.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ae:	d056      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b6:	d86c      	bhi.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090be:	d03b      	beq.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090c6:	d864      	bhi.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ce:	d021      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d6:	d85c      	bhi.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090e4:	d004      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80090e6:	e054      	b.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090e8:	f000 f8b8 	bl	800925c <HAL_RCCEx_GetD3PCLK1Freq>
 80090ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090ee:	e0ac      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f0:	4b29      	ldr	r3, [pc, #164]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090fc:	d107      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fe:	f107 0318 	add.w	r3, r7, #24
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f8c0 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910c:	e09d      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009112:	e09a      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009114:	4b20      	ldr	r3, [pc, #128]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009120:	d107      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fa02 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009130:	e08b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009136:	e088      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009138:	4b17      	ldr	r3, [pc, #92]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b04      	cmp	r3, #4
 8009142:	d109      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009144:	4b14      	ldr	r3, [pc, #80]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	08db      	lsrs	r3, r3, #3
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	4a13      	ldr	r2, [pc, #76]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009156:	e078      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915c:	e075      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800915e:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800916a:	d102      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009170:	e06b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009176:	e068      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009178:	4b07      	ldr	r3, [pc, #28]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009184:	d102      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009186:	4b07      	ldr	r3, [pc, #28]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800918a:	e05e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009190:	e05b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009196:	e058      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009198:	58024400 	.word	0x58024400
 800919c:	03d09000 	.word	0x03d09000
 80091a0:	003d0900 	.word	0x003d0900
 80091a4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80091a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80091b0:	430b      	orrs	r3, r1
 80091b2:	d148      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091b4:	4b27      	ldr	r3, [pc, #156]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c4:	d02a      	beq.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091cc:	d838      	bhi.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091da:	d00d      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80091dc:	e030      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091de:	4b1d      	ldr	r3, [pc, #116]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f0:	e02b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	e028      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091f8:	4b16      	ldr	r3, [pc, #88]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009204:	d107      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fae4 	bl	80097d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009214:	e019      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921a:	e016      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800921c:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009228:	d107      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800922a:	f107 0318 	add.w	r3, r7, #24
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f82a 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009238:	e007      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923e:	e004      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009244:	e001      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800924c:	4618      	mov	r0, r3
 800924e:	3740      	adds	r7, #64	@ 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	58024400 	.word	0x58024400
 8009258:	017d7840 	.word	0x017d7840

0800925c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009260:	f7fe f816 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 8009264:	4602      	mov	r2, r0
 8009266:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	4904      	ldr	r1, [pc, #16]	@ (8009284 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009272:	5ccb      	ldrb	r3, [r1, r3]
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800927c:	4618      	mov	r0, r3
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	08011de4 	.word	0x08011de4

08009288 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009290:	4ba1      	ldr	r3, [pc, #644]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800929a:	4b9f      	ldr	r3, [pc, #636]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	0b1b      	lsrs	r3, r3, #12
 80092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	091b      	lsrs	r3, r3, #4
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092b2:	4b99      	ldr	r3, [pc, #612]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8111 	beq.w	80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f000 8083 	beq.w	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f200 80a1 	bhi.w	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d056      	beq.n	80093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092f2:	e099      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f4:	4b88      	ldr	r3, [pc, #544]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d02d      	beq.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009300:	4b85      	ldr	r3, [pc, #532]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	08db      	lsrs	r3, r3, #3
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	4a84      	ldr	r2, [pc, #528]	@ (800951c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b7b      	ldr	r3, [pc, #492]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800935a:	e087      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b6a      	ldr	r3, [pc, #424]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009382:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939e:	e065      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b59      	ldr	r3, [pc, #356]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e2:	e043      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800952c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b48      	ldr	r3, [pc, #288]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	e021      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b37      	ldr	r3, [pc, #220]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800946c:	4b2a      	ldr	r3, [pc, #168]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	0a5b      	lsrs	r3, r3, #9
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009486:	edd7 6a07 	vldr	s13, [r7, #28]
 800948a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009492:	ee17 2a90 	vmov	r2, s15
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800949a:	4b1f      	ldr	r3, [pc, #124]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c0:	ee17 2a90 	vmov	r2, s15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094c8:	4b13      	ldr	r3, [pc, #76]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094f6:	e008      	b.n	800950a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
}
 800950a:	bf00      	nop
 800950c:	3724      	adds	r7, #36	@ 0x24
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	03d09000 	.word	0x03d09000
 8009520:	46000000 	.word	0x46000000
 8009524:	4c742400 	.word	0x4c742400
 8009528:	4a742400 	.word	0x4a742400
 800952c:	4bbebc20 	.word	0x4bbebc20

08009530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009530:	b480      	push	{r7}
 8009532:	b089      	sub	sp, #36	@ 0x24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009538:	4ba1      	ldr	r3, [pc, #644]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009542:	4b9f      	ldr	r3, [pc, #636]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	0d1b      	lsrs	r3, r3, #20
 8009548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800954e:	4b9c      	ldr	r3, [pc, #624]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800955a:	4b99      	ldr	r3, [pc, #612]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8111 	beq.w	80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f000 8083 	beq.w	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f200 80a1 	bhi.w	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d056      	beq.n	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800959a:	e099      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959c:	4b88      	ldr	r3, [pc, #544]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d02d      	beq.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a8:	4b85      	ldr	r3, [pc, #532]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a84      	ldr	r2, [pc, #528]	@ (80097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b7b      	ldr	r3, [pc, #492]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009602:	e087      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b6a      	ldr	r3, [pc, #424]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009646:	e065      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b59      	ldr	r3, [pc, #356]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a03 	vldr	s12, [r7, #12]
 800966e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968a:	e043      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b48      	ldr	r3, [pc, #288]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ce:	e021      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b37      	ldr	r3, [pc, #220]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009712:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009714:	4b2a      	ldr	r3, [pc, #168]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009718:	0a5b      	lsrs	r3, r3, #9
 800971a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009742:	4b1f      	ldr	r3, [pc, #124]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800975c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009768:	ee17 2a90 	vmov	r2, s15
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009770:	4b13      	ldr	r3, [pc, #76]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800978a:	edd7 6a07 	vldr	s13, [r7, #28]
 800978e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009796:	ee17 2a90 	vmov	r2, s15
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800979e:	e008      	b.n	80097b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
}
 80097b2:	bf00      	nop
 80097b4:	3724      	adds	r7, #36	@ 0x24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	46000000 	.word	0x46000000
 80097cc:	4c742400 	.word	0x4c742400
 80097d0:	4a742400 	.word	0x4a742400
 80097d4:	4bbebc20 	.word	0x4bbebc20

080097d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097d8:	b480      	push	{r7}
 80097da:	b089      	sub	sp, #36	@ 0x24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e0:	4ba0      	ldr	r3, [pc, #640]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e4:	f003 0303 	and.w	r3, r3, #3
 80097e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097ea:	4b9e      	ldr	r3, [pc, #632]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ee:	091b      	lsrs	r3, r3, #4
 80097f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097f6:	4b9b      	ldr	r3, [pc, #620]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009800:	4b98      	ldr	r3, [pc, #608]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009804:	08db      	lsrs	r3, r3, #3
 8009806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	fb02 f303 	mul.w	r3, r2, r3
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009818:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8111 	beq.w	8009a46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b02      	cmp	r3, #2
 8009828:	f000 8083 	beq.w	8009932 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b02      	cmp	r3, #2
 8009830:	f200 80a1 	bhi.w	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d056      	beq.n	80098ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009840:	e099      	b.n	8009976 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009842:	4b88      	ldr	r3, [pc, #544]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d02d      	beq.n	80098aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800984e:	4b85      	ldr	r3, [pc, #532]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	08db      	lsrs	r3, r3, #3
 8009854:	f003 0303 	and.w	r3, r3, #3
 8009858:	4a83      	ldr	r2, [pc, #524]	@ (8009a68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800985a:	fa22 f303 	lsr.w	r3, r2, r3
 800985e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009878:	4b7a      	ldr	r3, [pc, #488]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800987a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	ed97 6a03 	vldr	s12, [r7, #12]
 800988c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800989c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098a8:	e087      	b.n	80099ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009a70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098bc:	4b69      	ldr	r3, [pc, #420]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c4:	ee07 3a90 	vmov	s15, r3
 80098c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ec:	e065      	b.n	80099ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	ee07 3a90 	vmov	s15, r3
 80098f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009900:	4b58      	ldr	r3, [pc, #352]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	ed97 6a03 	vldr	s12, [r7, #12]
 8009914:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009930:	e043      	b.n	80099ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	ee07 3a90 	vmov	s15, r3
 8009938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009944:	4b47      	ldr	r3, [pc, #284]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009954:	ed97 6a03 	vldr	s12, [r7, #12]
 8009958:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800995c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009974:	e021      	b.n	80099ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	ee07 3a90 	vmov	s15, r3
 800997c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009980:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009988:	4b36      	ldr	r3, [pc, #216]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800998a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009998:	ed97 6a03 	vldr	s12, [r7, #12]
 800999c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80099ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099be:	0a5b      	lsrs	r3, r3, #9
 80099c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e0:	ee17 2a90 	vmov	r2, s15
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0e:	ee17 2a90 	vmov	r2, s15
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1a:	0e1b      	lsrs	r3, r3, #24
 8009a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3c:	ee17 2a90 	vmov	r2, s15
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a44:	e008      	b.n	8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	609a      	str	r2, [r3, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	3724      	adds	r7, #36	@ 0x24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	58024400 	.word	0x58024400
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	46000000 	.word	0x46000000
 8009a70:	4c742400 	.word	0x4c742400
 8009a74:	4a742400 	.word	0x4a742400
 8009a78:	4bbebc20 	.word	0x4bbebc20

08009a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a8a:	4b53      	ldr	r3, [pc, #332]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d101      	bne.n	8009a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e099      	b.n	8009bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aa6:	f7fa fbe3 	bl	8004270 <HAL_GetTick>
 8009aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aac:	e008      	b.n	8009ac0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009aae:	f7fa fbdf 	bl	8004270 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e086      	b.n	8009bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ac0:	4b45      	ldr	r3, [pc, #276]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009acc:	4b42      	ldr	r3, [pc, #264]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	031b      	lsls	r3, r3, #12
 8009ada:	493f      	ldr	r1, [pc, #252]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	025b      	lsls	r3, r3, #9
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	041b      	lsls	r3, r3, #16
 8009afe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	061b      	lsls	r3, r3, #24
 8009b0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b10:	4931      	ldr	r1, [pc, #196]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b16:	4b30      	ldr	r3, [pc, #192]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	492d      	ldr	r1, [pc, #180]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b28:	4b2b      	ldr	r3, [pc, #172]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2c:	f023 0220 	bic.w	r2, r3, #32
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	4928      	ldr	r1, [pc, #160]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a26      	ldr	r2, [pc, #152]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	f023 0310 	bic.w	r3, r3, #16
 8009b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b46:	4b24      	ldr	r3, [pc, #144]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b4a:	4b24      	ldr	r3, [pc, #144]	@ (8009bdc <RCCEx_PLL2_Config+0x160>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	69d2      	ldr	r2, [r2, #28]
 8009b52:	00d2      	lsls	r2, r2, #3
 8009b54:	4920      	ldr	r1, [pc, #128]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b60:	f043 0310 	orr.w	r3, r3, #16
 8009b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b70:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b78:	e00f      	b.n	8009b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d106      	bne.n	8009b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b80:	4b15      	ldr	r3, [pc, #84]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b84:	4a14      	ldr	r2, [pc, #80]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b8c:	e005      	b.n	8009b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b8e:	4b12      	ldr	r3, [pc, #72]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	4a11      	ldr	r2, [pc, #68]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009ba0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba6:	f7fa fb63 	bl	8004270 <HAL_GetTick>
 8009baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bac:	e008      	b.n	8009bc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bae:	f7fa fb5f 	bl	8004270 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e006      	b.n	8009bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <RCCEx_PLL2_Config+0x15c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0f0      	beq.n	8009bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	ffff0007 	.word	0xffff0007

08009be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bee:	4b53      	ldr	r3, [pc, #332]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d101      	bne.n	8009bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e099      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a4e      	ldr	r2, [pc, #312]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c0a:	f7fa fb31 	bl	8004270 <HAL_GetTick>
 8009c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c10:	e008      	b.n	8009c24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c12:	f7fa fb2d 	bl	8004270 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e086      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c24:	4b45      	ldr	r3, [pc, #276]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f0      	bne.n	8009c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c30:	4b42      	ldr	r3, [pc, #264]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	051b      	lsls	r3, r3, #20
 8009c3e:	493f      	ldr	r1, [pc, #252]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	025b      	lsls	r3, r3, #9
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	061b      	lsls	r3, r3, #24
 8009c70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c74:	4931      	ldr	r1, [pc, #196]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c7a:	4b30      	ldr	r3, [pc, #192]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	492d      	ldr	r1, [pc, #180]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	4928      	ldr	r1, [pc, #160]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c9e:	4b27      	ldr	r3, [pc, #156]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca2:	4a26      	ldr	r2, [pc, #152]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009caa:	4b24      	ldr	r3, [pc, #144]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cae:	4b24      	ldr	r3, [pc, #144]	@ (8009d40 <RCCEx_PLL3_Config+0x160>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	69d2      	ldr	r2, [r2, #28]
 8009cb6:	00d2      	lsls	r2, r2, #3
 8009cb8:	4920      	ldr	r1, [pc, #128]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd4:	4a19      	ldr	r2, [pc, #100]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cdc:	e00f      	b.n	8009cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d106      	bne.n	8009cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ce4:	4b15      	ldr	r3, [pc, #84]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	4a14      	ldr	r2, [pc, #80]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cf0:	e005      	b.n	8009cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cf2:	4b12      	ldr	r3, [pc, #72]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf6:	4a11      	ldr	r2, [pc, #68]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a0e      	ldr	r2, [pc, #56]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0a:	f7fa fab1 	bl	8004270 <HAL_GetTick>
 8009d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d10:	e008      	b.n	8009d24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d12:	f7fa faad 	bl	8004270 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e006      	b.n	8009d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d24:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <RCCEx_PLL3_Config+0x15c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	ffff0007 	.word	0xffff0007

08009d44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	@ 0x28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e075      	b.n	8009e42 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7f9 fbcb 	bl	8003504 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2204      	movs	r2, #4
 8009d72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f868 	bl	8009e4c <HAL_SD_InitCard>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e05d      	b.n	8009e42 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fdaf 	bl	800a8f0 <HAL_SD_GetCardStatus>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e052      	b.n	8009e42 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009d9c:	7e3b      	ldrb	r3, [r7, #24]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009da2:	7e7b      	ldrb	r3, [r7, #25]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d10a      	bne.n	8009dc6 <HAL_SD_Init+0x82>
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <HAL_SD_Init+0x78>
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8009dc4:	e00b      	b.n	8009dde <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d104      	bne.n	8009dd8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8009dd6:	e002      	b.n	8009dde <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fe6d 	bl	800aac4 <HAL_SD_ConfigWideBusOperation>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e026      	b.n	8009e42 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009df4:	f7fa fa3c 	bl	8004270 <HAL_GetTick>
 8009df8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009dfa:	e011      	b.n	8009e20 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dfc:	f7fa fa38 	bl	8004270 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d109      	bne.n	8009e20 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e12:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e010      	b.n	8009e42 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 ff61 	bl	800ace8 <HAL_SD_GetCardState>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d1e7      	bne.n	8009dfc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3728      	adds	r7, #40	@ 0x28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b08d      	sub	sp, #52	@ 0x34
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e64:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	f7fe fc76 	bl	800875c <HAL_RCCEx_GetPeriphCLKFreq>
 8009e70:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d109      	bne.n	8009e8c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009e86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e070      	b.n	8009f6e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	4a39      	ldr	r2, [pc, #228]	@ (8009f78 <HAL_SD_InitCard+0x12c>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	091b      	lsrs	r3, r3, #4
 8009e98:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681c      	ldr	r4, [r3, #0]
 8009e9e:	466a      	mov	r2, sp
 8009ea0:	f107 0318 	add.w	r3, r7, #24
 8009ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ea8:	e882 0003 	stmia.w	r2, {r0, r1}
 8009eac:	f107 030c 	add.w	r3, r7, #12
 8009eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f003 f916 	bl	800d0e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f003 f959 	bl	800d174 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009eda:	4a28      	ldr	r2, [pc, #160]	@ (8009f7c <HAL_SD_InitCard+0x130>)
 8009edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fa f9cf 	bl	8004288 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 ffea 	bl	800aec4 <SD_PowerON>
 8009ef0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e02e      	b.n	8009f6e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 ff09 	bl	800ad28 <SD_InitCard>
 8009f16:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e01b      	b.n	8009f6e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f003 f9ae 	bl	800d2a0 <SDMMC_CmdBlockLength>
 8009f44:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00f      	beq.n	8009f6c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0b      	ldr	r2, [pc, #44]	@ (8009f80 <HAL_SD_InitCard+0x134>)
 8009f52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e000      	b.n	8009f6e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	372c      	adds	r7, #44	@ 0x2c
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd90      	pop	{r4, r7, pc}
 8009f76:	bf00      	nop
 8009f78:	014f8b59 	.word	0x014f8b59
 8009f7c:	00012110 	.word	0x00012110
 8009f80:	1fe00fff 	.word	0x1fe00fff

08009f84 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08c      	sub	sp, #48	@ 0x30
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d107      	bne.n	8009fac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e08d      	b.n	800a0c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	f040 8086 	bne.w	800a0c6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	441a      	add	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d907      	bls.n	8009fde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e074      	b.n	800a0c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	025a      	lsls	r2, r3, #9
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a000:	2b01      	cmp	r3, #1
 800a002:	d002      	beq.n	800a00a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	025b      	lsls	r3, r3, #9
 800a008:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	025b      	lsls	r3, r3, #9
 800a014:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a016:	2390      	movs	r3, #144	@ 0x90
 800a018:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a01a:	2302      	movs	r3, #2
 800a01c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a01e:	2300      	movs	r3, #0
 800a020:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f107 0210 	add.w	r2, r7, #16
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f003 f909 	bl	800d248 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a044:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2201      	movs	r2, #1
 800a054:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d90a      	bls.n	800a072 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2282      	movs	r2, #130	@ 0x82
 800a060:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a068:	4618      	mov	r0, r3
 800a06a:	f003 f95f 	bl	800d32c <SDMMC_CmdReadMultiBlock>
 800a06e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a070:	e009      	b.n	800a086 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2281      	movs	r2, #129	@ 0x81
 800a076:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a07e:	4618      	mov	r0, r3
 800a080:	f003 f931 	bl	800d2e6 <SDMMC_CmdReadSingleBlock>
 800a084:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d012      	beq.n	800a0b2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a092:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09a:	431a      	orrs	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e00a      	b.n	800a0c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a0c0:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e000      	b.n	800a0c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a0c6:	2302      	movs	r3, #2
  }
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3730      	adds	r7, #48	@ 0x30
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	1fe00fff 	.word	0x1fe00fff

0800a0d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	@ 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e08d      	b.n	800a218 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	f040 8086 	bne.w	800a216 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d907      	bls.n	800a12e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a122:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e074      	b.n	800a218 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2203      	movs	r2, #3
 800a132:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	025a      	lsls	r2, r3, #9
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a150:	2b01      	cmp	r3, #1
 800a152:	d002      	beq.n	800a15a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	025b      	lsls	r3, r3, #9
 800a158:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295
 800a15e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	025b      	lsls	r3, r3, #9
 800a164:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a166:	2390      	movs	r3, #144	@ 0x90
 800a168:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a16e:	2300      	movs	r3, #0
 800a170:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a172:	2300      	movs	r3, #0
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f107 0210 	add.w	r2, r7, #16
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f003 f861 	bl	800d248 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a194:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d90a      	bls.n	800a1c2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	22a0      	movs	r2, #160	@ 0xa0
 800a1b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 f8fd 	bl	800d3b8 <SDMMC_CmdWriteMultiBlock>
 800a1be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a1c0:	e009      	b.n	800a1d6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2290      	movs	r2, #144	@ 0x90
 800a1c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f003 f8cf 	bl	800d372 <SDMMC_CmdWriteSingleBlock>
 800a1d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d012      	beq.n	800a202 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a0f      	ldr	r2, [pc, #60]	@ (800a220 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a1e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e00a      	b.n	800a218 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800a210:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e000      	b.n	800a218 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3730      	adds	r7, #48	@ 0x30
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	1fe00fff 	.word	0x1fe00fff

0800a224 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a230:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_SD_IRQHandler+0x2e>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 f926 	bl	800b49c <SD_Read_IT>
 800a250:	e19a      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 80ac 	beq.w	800a3ba <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a26a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	4b59      	ldr	r3, [pc, #356]	@ (800a3dc <HAL_SD_IRQHandler+0x1b8>)
 800a278:	400b      	ands	r3, r1
 800a27a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a28a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a29a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d038      	beq.n	800a318 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d104      	bne.n	800a2ba <HAL_SD_IRQHandler+0x96>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d011      	beq.n	800a2de <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f003 f89e 	bl	800d400 <SDMMC_CmdStopTransfer>
 800a2c4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f95b 	bl	800a594 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a3e0 <HAL_SD_IRQHandler+0x1bc>)
 800a2e4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <HAL_SD_IRQHandler+0xe4>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f003 fd2b 	bl	800dd64 <HAL_SD_RxCpltCallback>
 800a30e:	e13b      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f003 fd1d 	bl	800dd50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a316:	e137      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8132 	beq.w	800a588 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2200      	movs	r2, #0
 800a332:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2200      	movs	r2, #0
 800a33a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d104      	bne.n	800a350 <HAL_SD_IRQHandler+0x12c>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f003 0320 	and.w	r3, r3, #32
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d011      	beq.n	800a374 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f003 f853 	bl	800d400 <SDMMC_CmdStopTransfer>
 800a35a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d008      	beq.n	800a374 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	431a      	orrs	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f910 	bl	800a594 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f003 0310 	and.w	r3, r3, #16
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d104      	bne.n	800a396 <HAL_SD_IRQHandler+0x172>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f003 fcda 	bl	800dd50 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d105      	bne.n	800a3b2 <HAL_SD_IRQHandler+0x18e>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f003 0302 	and.w	r3, r3, #2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 80eb 	beq.w	800a588 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f003 fcd6 	bl	800dd64 <HAL_SD_RxCpltCallback>
}
 800a3b8:	e0e6      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <HAL_SD_IRQHandler+0x1c0>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 f8a8 	bl	800b528 <SD_Write_IT>
 800a3d8:	e0d6      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
 800a3da:	bf00      	nop
 800a3dc:	ffff3ec5 	.word	0xffff3ec5
 800a3e0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ea:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 809d 	beq.w	800a52e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d005      	beq.n	800a40e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a406:	f043 0202 	orr.w	r2, r3, #2
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a420:	f043 0208 	orr.w	r2, r3, #8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a43a:	f043 0220 	orr.w	r2, r3, #32
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a454:	f043 0210 	orr.w	r2, r3, #16
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a4b      	ldr	r2, [pc, #300]	@ (800a590 <HAL_SD_IRQHandler+0x36c>)
 800a462:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a472:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a482:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a492:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a4a2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f002 ffa9 	bl	800d400 <SDMMC_CmdStopTransfer>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68da      	ldr	r2, [r3, #12]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4c8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0308 	and.w	r3, r3, #8
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f851 	bl	800a594 <HAL_SD_ErrorCallback>
}
 800a4f2:	e049      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d044      	beq.n	800a588 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a502:	2b00      	cmp	r3, #0
 800a504:	d040      	beq.n	800a588 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a514:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f834 	bl	800a594 <HAL_SD_ErrorCallback>
}
 800a52c:	e02c      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d025      	beq.n	800a588 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a544:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10c      	bne.n	800a56e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f84a 	bl	800b5f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a564:	e010      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 f832 	bl	800b5d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a56c:	e00c      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f833 	bl	800b5e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a57e:	e003      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f81b 	bl	800b5bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a586:	e7ff      	b.n	800a588 <HAL_SD_IRQHandler+0x364>
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	18000f3a 	.word	0x18000f3a

0800a594 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5b6:	0f9b      	lsrs	r3, r3, #30
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5c2:	0e9b      	lsrs	r3, r3, #26
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d4:	0e1b      	lsrs	r3, r3, #24
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a608:	0d1b      	lsrs	r3, r3, #20
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a614:	0c1b      	lsrs	r3, r3, #16
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a626:	0bdb      	lsrs	r3, r3, #15
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a638:	0b9b      	lsrs	r3, r3, #14
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	b2da      	uxtb	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a64a:	0b5b      	lsrs	r3, r3, #13
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a65c:	0b1b      	lsrs	r3, r3, #12
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a674:	2b00      	cmp	r3, #0
 800a676:	d163      	bne.n	800a740 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a67c:	009a      	lsls	r2, r3, #2
 800a67e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a682:	4013      	ands	r3, r2
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a688:	0f92      	lsrs	r2, r2, #30
 800a68a:	431a      	orrs	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a694:	0edb      	lsrs	r3, r3, #27
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6a6:	0e1b      	lsrs	r3, r3, #24
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b8:	0d5b      	lsrs	r3, r3, #21
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ca:	0c9b      	lsrs	r3, r3, #18
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6dc:	0bdb      	lsrs	r3, r3, #15
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	7e1b      	ldrb	r3, [r3, #24]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	3302      	adds	r3, #2
 800a700:	2201      	movs	r2, #1
 800a702:	fa02 f303 	lsl.w	r3, r2, r3
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a70a:	fb03 f202 	mul.w	r2, r3, r2
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	7a1b      	ldrb	r3, [r3, #8]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	2201      	movs	r2, #1
 800a71e:	409a      	lsls	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a72c:	0a52      	lsrs	r2, r2, #9
 800a72e:	fb03 f202 	mul.w	r2, r3, r2
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a73c:	655a      	str	r2, [r3, #84]	@ 0x54
 800a73e:	e031      	b.n	800a7a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a744:	2b01      	cmp	r3, #1
 800a746:	d11d      	bne.n	800a784 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a756:	0c1b      	lsrs	r3, r3, #16
 800a758:	431a      	orrs	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	3301      	adds	r3, #1
 800a764:	029a      	lsls	r2, r3, #10
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a778:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	655a      	str	r2, [r3, #84]	@ 0x54
 800a782:	e00f      	b.n	800a7a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a58      	ldr	r2, [pc, #352]	@ (800a8ec <HAL_SD_GetCardCSD+0x344>)
 800a78a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a790:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e09d      	b.n	800a8e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a8:	0b9b      	lsrs	r3, r3, #14
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ba:	09db      	lsrs	r3, r3, #7
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7dc:	0fdb      	lsrs	r3, r3, #31
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7e8:	0f5b      	lsrs	r3, r3, #29
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7fa:	0e9b      	lsrs	r3, r3, #26
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a80c:	0d9b      	lsrs	r3, r3, #22
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	b2da      	uxtb	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a81e:	0d5b      	lsrs	r3, r3, #21
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a84e:	0bdb      	lsrs	r3, r3, #15
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	b2da      	uxtb	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a862:	0b9b      	lsrs	r3, r3, #14
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a876:	0b5b      	lsrs	r3, r3, #13
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a88a:	0b1b      	lsrs	r3, r3, #12
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a89e:	0a9b      	lsrs	r3, r3, #10
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8c6:	085b      	lsrs	r3, r3, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	1fe00fff 	.word	0x1fe00fff

0800a8f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b094      	sub	sp, #80	@ 0x50
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d101      	bne.n	800a910 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e0a7      	b.n	800aa60 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a910:	f107 0308 	add.w	r3, r7, #8
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fb62 	bl	800afe0 <SD_SendSDStatus>
 800a91c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a91e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a920:	2b00      	cmp	r3, #0
 800a922:	d011      	beq.n	800a948 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a4f      	ldr	r2, [pc, #316]	@ (800aa68 <HAL_SD_GetCardStatus+0x178>)
 800a92a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a932:	431a      	orrs	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a946:	e070      	b.n	800aa2a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	099b      	lsrs	r3, r3, #6
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	b2da      	uxtb	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	0a1b      	lsrs	r3, r3, #8
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a972:	b29a      	uxth	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	0e1b      	lsrs	r3, r3, #24
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4313      	orrs	r3, r2
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	061a      	lsls	r2, r3, #24
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a98e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	0a1b      	lsrs	r3, r3, #8
 800a994:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a998:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	0e1b      	lsrs	r3, r3, #24
 800a99e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	0d1b      	lsrs	r3, r3, #20
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	0a9b      	lsrs	r3, r3, #10
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	0a1b      	lsrs	r3, r3, #8
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 030f 	and.w	r3, r3, #15
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 030f 	and.w	r3, r3, #15
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	0e1b      	lsrs	r3, r3, #24
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa32:	4618      	mov	r0, r3
 800aa34:	f002 fc34 	bl	800d2a0 <SDMMC_CmdBlockLength>
 800aa38:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a08      	ldr	r2, [pc, #32]	@ (800aa68 <HAL_SD_GetCardStatus+0x178>)
 800aa46:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa4c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800aa5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3750      	adds	r7, #80	@ 0x50
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	1fe00fff 	.word	0x1fe00fff

0800aa6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b08d      	sub	sp, #52	@ 0x34
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2203      	movs	r2, #3
 800aad8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d02e      	beq.n	800ab42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaea:	d106      	bne.n	800aafa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	635a      	str	r2, [r3, #52]	@ 0x34
 800aaf8:	e029      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab00:	d10a      	bne.n	800ab18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fb64 	bl	800b1d0 <SD_WideBus_Enable>
 800ab08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab16:	e01a      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fba1 	bl	800b266 <SD_WideBus_Disable>
 800ab24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab32:	e00c      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab38:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab40:	e005      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab46:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d007      	beq.n	800ab66 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a5f      	ldr	r2, [pc, #380]	@ (800acd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab5c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab64:	e096      	b.n	800ac94 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ab66:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ab6a:	f04f 0100 	mov.w	r1, #0
 800ab6e:	f7fd fdf5 	bl	800875c <HAL_RCCEx_GetPeriphCLKFreq>
 800ab72:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8083 	beq.w	800ac82 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695a      	ldr	r2, [r3, #20]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4950      	ldr	r1, [pc, #320]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab9a:	fba1 1303 	umull	r1, r3, r1, r3
 800ab9e:	0e1b      	lsrs	r3, r3, #24
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d303      	bcc.n	800abac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	e05a      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abb4:	d103      	bne.n	800abbe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	61bb      	str	r3, [r7, #24]
 800abbc:	e051      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abc6:	d126      	bne.n	800ac16 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10e      	bne.n	800abee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	4a43      	ldr	r2, [pc, #268]	@ (800ace0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d906      	bls.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4a40      	ldr	r2, [pc, #256]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x218>)
 800abdc:	fba2 2303 	umull	r2, r3, r2, r3
 800abe0:	0e5b      	lsrs	r3, r3, #25
 800abe2:	61bb      	str	r3, [r7, #24]
 800abe4:	e03d      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	e039      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	69fa      	ldr	r2, [r7, #28]
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	4a39      	ldr	r2, [pc, #228]	@ (800ace0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d906      	bls.n	800ac0e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4a36      	ldr	r2, [pc, #216]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac04:	fba2 2303 	umull	r2, r3, r2, r3
 800ac08:	0e5b      	lsrs	r3, r3, #25
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	e029      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	61bb      	str	r3, [r7, #24]
 800ac14:	e025      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10e      	bne.n	800ac3c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	4a30      	ldr	r2, [pc, #192]	@ (800ace4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d906      	bls.n	800ac34 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	4a2c      	ldr	r2, [pc, #176]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2e:	0e1b      	lsrs	r3, r3, #24
 800ac30:	61bb      	str	r3, [r7, #24]
 800ac32:	e016      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	e012      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	69fa      	ldr	r2, [r7, #28]
 800ac44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac48:	4a26      	ldr	r2, [pc, #152]	@ (800ace4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d906      	bls.n	800ac5c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	4a22      	ldr	r2, [pc, #136]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	0e1b      	lsrs	r3, r3, #24
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	e002      	b.n	800ac62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681c      	ldr	r4, [r3, #0]
 800ac66:	466a      	mov	r2, sp
 800ac68:	f107 0314 	add.w	r3, r7, #20
 800ac6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac70:	e882 0003 	stmia.w	r2, {r0, r1}
 800ac74:	f107 0308 	add.w	r3, r7, #8
 800ac78:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f002 fa32 	bl	800d0e4 <SDMMC_Init>
 800ac80:	e008      	b.n	800ac94 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f002 faff 	bl	800d2a0 <SDMMC_CmdBlockLength>
 800aca2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00c      	beq.n	800acc4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a0a      	ldr	r2, [pc, #40]	@ (800acd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800acb0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	431a      	orrs	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800accc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	372c      	adds	r7, #44	@ 0x2c
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd90      	pop	{r4, r7, pc}
 800acd8:	1fe00fff 	.word	0x1fe00fff
 800acdc:	55e63b89 	.word	0x55e63b89
 800ace0:	02faf080 	.word	0x02faf080
 800ace4:	017d7840 	.word	0x017d7840

0800ace8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acf4:	f107 030c 	add.w	r3, r7, #12
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa40 	bl	800b180 <SD_SendStatus>
 800ad00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	0a5b      	lsrs	r3, r3, #9
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad1e:	693b      	ldr	r3, [r7, #16]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b090      	sub	sp, #64	@ 0x40
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ad34:	f7f9 fa9c 	bl	8004270 <HAL_GetTick>
 800ad38:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f002 fa29 	bl	800d196 <SDMMC_GetPowerState>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad4e:	e0b5      	b.n	800aebc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d02e      	beq.n	800adb6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 fc74 	bl	800d64a <SDMMC_CmdSendCID>
 800ad62:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <SD_InitCard+0x46>
    {
      return errorstate;
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6c:	e0a6      	b.n	800aebc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2100      	movs	r1, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 fa54 	bl	800d222 <SDMMC_GetResponse>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2104      	movs	r1, #4
 800ad86:	4618      	mov	r0, r3
 800ad88:	f002 fa4b 	bl	800d222 <SDMMC_GetResponse>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2108      	movs	r1, #8
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f002 fa42 	bl	800d222 <SDMMC_GetResponse>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	210c      	movs	r1, #12
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 fa39 	bl	800d222 <SDMMC_GetResponse>
 800adb0:	4602      	mov	r2, r0
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d01d      	beq.n	800adfa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800adbe:	e019      	b.n	800adf4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f107 020a 	add.w	r2, r7, #10
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f002 fc7c 	bl	800d6c8 <SDMMC_CmdSetRelAdd>
 800add0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800add2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <SD_InitCard+0xb4>
      {
        return errorstate;
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	e06f      	b.n	800aebc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800addc:	f7f9 fa48 	bl	8004270 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800adea:	4293      	cmp	r3, r2
 800adec:	d902      	bls.n	800adf4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800adee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800adf2:	e063      	b.n	800aebc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800adf4:	897b      	ldrh	r3, [r7, #10]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0e2      	beq.n	800adc0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d036      	beq.n	800ae70 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae02:	897b      	ldrh	r3, [r7, #10]
 800ae04:	461a      	mov	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f002 fc36 	bl	800d688 <SDMMC_CmdSendCSD>
 800ae1c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <SD_InitCard+0x100>
    {
      return errorstate;
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	e049      	b.n	800aebc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 f9f7 	bl	800d222 <SDMMC_GetResponse>
 800ae34:	4602      	mov	r2, r0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2104      	movs	r1, #4
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 f9ee 	bl	800d222 <SDMMC_GetResponse>
 800ae46:	4602      	mov	r2, r0
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2108      	movs	r1, #8
 800ae52:	4618      	mov	r0, r3
 800ae54:	f002 f9e5 	bl	800d222 <SDMMC_GetResponse>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	210c      	movs	r1, #12
 800ae64:	4618      	mov	r0, r3
 800ae66:	f002 f9dc 	bl	800d222 <SDMMC_GetResponse>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2104      	movs	r1, #4
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 f9d3 	bl	800d222 <SDMMC_GetResponse>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	0d1a      	lsrs	r2, r3, #20
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae84:	f107 030c 	add.w	r3, r7, #12
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fb8c 	bl	800a5a8 <HAL_SD_GetCardCSD>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae9a:	e00f      	b.n	800aebc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea4:	041b      	lsls	r3, r3, #16
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f002 fae5 	bl	800d478 <SDMMC_CmdSelDesel>
 800aeae:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <SD_InitCard+0x192>
  {
    return errorstate;
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	e000      	b.n	800aebc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3740      	adds	r7, #64	@ 0x40
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f002 faee 	bl	800d4be <SDMMC_CmdGoIdleState>
 800aee2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <SD_PowerON+0x2a>
  {
    return errorstate;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	e072      	b.n	800afd4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f002 fb01 	bl	800d4fa <SDMMC_CmdOperCond>
 800aef8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af00:	d10d      	bne.n	800af1e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f002 fad6 	bl	800d4be <SDMMC_CmdGoIdleState>
 800af12:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <SD_PowerON+0x60>
    {
      return errorstate;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	e05a      	b.n	800afd4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d137      	bne.n	800af9c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f002 fb01 	bl	800d53a <SDMMC_CmdAppCommand>
 800af38:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d02d      	beq.n	800af9c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af44:	e046      	b.n	800afd4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f002 faf4 	bl	800d53a <SDMMC_CmdAppCommand>
 800af52:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <SD_PowerON+0x9a>
    {
      return errorstate;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	e03a      	b.n	800afd4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	491e      	ldr	r1, [pc, #120]	@ (800afdc <SD_PowerON+0x118>)
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fb0b 	bl	800d580 <SDMMC_CmdAppOperCommand>
 800af6a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d002      	beq.n	800af78 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af76:	e02d      	b.n	800afd4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2100      	movs	r1, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f002 f94f 	bl	800d222 <SDMMC_GetResponse>
 800af84:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	0fdb      	lsrs	r3, r3, #31
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d101      	bne.n	800af92 <SD_PowerON+0xce>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <SD_PowerON+0xd0>
 800af92:	2300      	movs	r3, #0
 800af94:	613b      	str	r3, [r7, #16]

    count++;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3301      	adds	r3, #1
 800af9a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d802      	bhi.n	800afac <SD_PowerON+0xe8>
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0cc      	beq.n	800af46 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d902      	bls.n	800afbc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afba:	e00b      	b.n	800afd4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	c1100000 	.word	0xc1100000

0800afe0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08c      	sub	sp, #48	@ 0x30
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800afea:	f7f9 f941 	bl	8004270 <HAL_GetTick>
 800afee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f002 f911 	bl	800d222 <SDMMC_GetResponse>
 800b000:	4603      	mov	r3, r0
 800b002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b00a:	d102      	bne.n	800b012 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b00c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b010:	e0b0      	b.n	800b174 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2140      	movs	r1, #64	@ 0x40
 800b018:	4618      	mov	r0, r3
 800b01a:	f002 f941 	bl	800d2a0 <SDMMC_CmdBlockLength>
 800b01e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	e0a0      	b.n	800b174 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	4619      	mov	r1, r3
 800b03e:	4610      	mov	r0, r2
 800b040:	f002 fa7b 	bl	800d53a <SDMMC_CmdAppCommand>
 800b044:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d005      	beq.n	800b058 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	e08d      	b.n	800b174 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b058:	f04f 33ff 	mov.w	r3, #4294967295
 800b05c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b05e:	2340      	movs	r3, #64	@ 0x40
 800b060:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b062:	2360      	movs	r3, #96	@ 0x60
 800b064:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b066:	2302      	movs	r3, #2
 800b068:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b06e:	2301      	movs	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f107 0208 	add.w	r2, r7, #8
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f002 f8e3 	bl	800d248 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f002 fb63 	bl	800d752 <SDMMC_CmdStatusRegister>
 800b08c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d02b      	beq.n	800b0ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	e069      	b.n	800b174 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d013      	beq.n	800b0d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0b2:	e00d      	b.n	800b0d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f002 f83d 	bl	800d138 <SDMMC_ReadFIFO>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	601a      	str	r2, [r3, #0]
        pData++;
 800b0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d2:	2b07      	cmp	r3, #7
 800b0d4:	d9ee      	bls.n	800b0b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b0d6:	f7f9 f8cb 	bl	8004270 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e4:	d102      	bne.n	800b0ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0ea:	e043      	b.n	800b174 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0f2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0d2      	beq.n	800b0a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b100:	f003 0308 	and.w	r3, r3, #8
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b108:	2308      	movs	r3, #8
 800b10a:	e033      	b.n	800b174 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b11a:	2302      	movs	r3, #2
 800b11c:	e02a      	b.n	800b174 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b124:	f003 0320 	and.w	r3, r3, #32
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d017      	beq.n	800b15c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b12c:	2320      	movs	r3, #32
 800b12e:	e021      	b.n	800b174 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 ffff 	bl	800d138 <SDMMC_ReadFIFO>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	601a      	str	r2, [r3, #0]
    pData++;
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	3304      	adds	r3, #4
 800b144:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b146:	f7f9 f893 	bl	8004270 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b154:	d102      	bne.n	800b15c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b156:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b15a:	e00b      	b.n	800b174 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e2      	bne.n	800b130 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a03      	ldr	r2, [pc, #12]	@ (800b17c <SD_SendSDStatus+0x19c>)
 800b170:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3730      	adds	r7, #48	@ 0x30
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	18000f3a 	.word	0x18000f3a

0800b180 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d102      	bne.n	800b196 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b190:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b194:	e018      	b.n	800b1c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b19e:	041b      	lsls	r3, r3, #16
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f002 fab2 	bl	800d70c <SDMMC_CmdSendStatus>
 800b1a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	e009      	b.n	800b1c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 f831 	bl	800d222 <SDMMC_GetResponse>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f002 f81b 	bl	800d222 <SDMMC_GetResponse>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1f6:	d102      	bne.n	800b1fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1fc:	e02f      	b.n	800b25e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1fe:	f107 030c 	add.w	r3, r7, #12
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f879 	bl	800b2fc <SD_FindSCR>
 800b20a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d001      	beq.n	800b216 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	e023      	b.n	800b25e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01c      	beq.n	800b25a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b228:	041b      	lsls	r3, r3, #16
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f002 f984 	bl	800d53a <SDMMC_CmdAppCommand>
 800b232:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	e00f      	b.n	800b25e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2102      	movs	r1, #2
 800b244:	4618      	mov	r0, r3
 800b246:	f002 f9bb 	bl	800d5c0 <SDMMC_CmdBusWidth>
 800b24a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	e003      	b.n	800b25e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b256:	2300      	movs	r3, #0
 800b258:	e001      	b.n	800b25e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b25a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2100      	movs	r1, #0
 800b27c:	4618      	mov	r0, r3
 800b27e:	f001 ffd0 	bl	800d222 <SDMMC_GetResponse>
 800b282:	4603      	mov	r3, r0
 800b284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b28c:	d102      	bne.n	800b294 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b28e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b292:	e02f      	b.n	800b2f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b294:	f107 030c 	add.w	r3, r7, #12
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f82e 	bl	800b2fc <SD_FindSCR>
 800b2a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	e023      	b.n	800b2f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01c      	beq.n	800b2f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2be:	041b      	lsls	r3, r3, #16
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f002 f939 	bl	800d53a <SDMMC_CmdAppCommand>
 800b2c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	e00f      	b.n	800b2f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f002 f970 	bl	800d5c0 <SDMMC_CmdBusWidth>
 800b2e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	e003      	b.n	800b2f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e001      	b.n	800b2f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08e      	sub	sp, #56	@ 0x38
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b306:	f7f8 ffb3 	bl	8004270 <HAL_GetTick>
 800b30a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b310:	2300      	movs	r3, #0
 800b312:	60bb      	str	r3, [r7, #8]
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2108      	movs	r1, #8
 800b322:	4618      	mov	r0, r3
 800b324:	f001 ffbc 	bl	800d2a0 <SDMMC_CmdBlockLength>
 800b328:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b332:	e0ad      	b.n	800b490 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33c:	041b      	lsls	r3, r3, #16
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f002 f8fa 	bl	800d53a <SDMMC_CmdAppCommand>
 800b346:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b350:	e09e      	b.n	800b490 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b352:	f04f 33ff 	mov.w	r3, #4294967295
 800b356:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b358:	2308      	movs	r3, #8
 800b35a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b35c:	2330      	movs	r3, #48	@ 0x30
 800b35e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b360:	2302      	movs	r3, #2
 800b362:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b364:	2300      	movs	r3, #0
 800b366:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b368:	2301      	movs	r3, #1
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f107 0210 	add.w	r2, r7, #16
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f001 ff66 	bl	800d248 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f002 f940 	bl	800d606 <SDMMC_CmdSendSCR>
 800b386:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d027      	beq.n	800b3de <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b390:	e07e      	b.n	800b490 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d113      	bne.n	800b3c8 <SD_FindSCR+0xcc>
 800b3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d110      	bne.n	800b3c8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 fec4 	bl	800d138 <SDMMC_ReadFIFO>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 febd 	bl	800d138 <SDMMC_ReadFIFO>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	60fb      	str	r3, [r7, #12]
      index++;
 800b3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3c8:	f7f8 ff52 	bl	8004270 <HAL_GetTick>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d6:	d102      	bne.n	800b3de <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3dc:	e058      	b.n	800b490 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3e4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0d1      	beq.n	800b392 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f4:	f003 0308 	and.w	r3, r3, #8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d005      	beq.n	800b408 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2208      	movs	r2, #8
 800b402:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b404:	2308      	movs	r3, #8
 800b406:	e043      	b.n	800b490 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2202      	movs	r2, #2
 800b41c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b41e:	2302      	movs	r3, #2
 800b420:	e036      	b.n	800b490 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d005      	beq.n	800b43c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2220      	movs	r2, #32
 800b436:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b438:	2320      	movs	r3, #32
 800b43a:	e029      	b.n	800b490 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <SD_FindSCR+0x19c>)
 800b442:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	061a      	lsls	r2, r3, #24
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b450:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b45a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	0e1b      	lsrs	r3, r3, #24
 800b460:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b464:	601a      	str	r2, [r3, #0]
    scr++;
 800b466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b468:	3304      	adds	r3, #4
 800b46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	061a      	lsls	r2, r3, #24
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	021b      	lsls	r3, r3, #8
 800b474:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b478:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b482:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	0e1b      	lsrs	r3, r3, #24
 800b488:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3738      	adds	r7, #56	@ 0x38
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	18000f3a 	.word	0x18000f3a

0800b49c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ae:	2b1f      	cmp	r3, #31
 800b4b0:	d936      	bls.n	800b520 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	e027      	b.n	800b508 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f001 fe3b 	bl	800d138 <SDMMC_ReadFIFO>
 800b4c2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	0c1b      	lsrs	r3, r3, #16
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	0e1b      	lsrs	r3, r3, #24
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	3301      	adds	r3, #1
 800b500:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	3301      	adds	r3, #1
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b07      	cmp	r3, #7
 800b50c:	d9d4      	bls.n	800b4b8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b518:	f1a3 0220 	sub.w	r2, r3, #32
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b520:	bf00      	nop
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	2b1f      	cmp	r3, #31
 800b53c:	d93a      	bls.n	800b5b4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b53e:	2300      	movs	r3, #0
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	e02b      	b.n	800b59c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	021a      	lsls	r2, r3, #8
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	4313      	orrs	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	3301      	adds	r3, #1
 800b560:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	041a      	lsls	r2, r3, #16
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	3301      	adds	r3, #1
 800b572:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	061a      	lsls	r2, r3, #24
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3301      	adds	r3, #1
 800b584:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f107 020c 	add.w	r2, r7, #12
 800b58e:	4611      	mov	r1, r2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fdde 	bl	800d152 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	3301      	adds	r3, #1
 800b59a:	617b      	str	r3, [r7, #20]
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b07      	cmp	r3, #7
 800b5a0:	d9d0      	bls.n	800b544 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	f1a3 0220 	sub.w	r2, r3, #32
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	621a      	str	r2, [r3, #32]
  }
}
 800b5b4:	bf00      	nop
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e10f      	b.n	800b83e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a87      	ldr	r2, [pc, #540]	@ (800b848 <HAL_SPI_Init+0x23c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00f      	beq.n	800b64e <HAL_SPI_Init+0x42>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a86      	ldr	r2, [pc, #536]	@ (800b84c <HAL_SPI_Init+0x240>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00a      	beq.n	800b64e <HAL_SPI_Init+0x42>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a84      	ldr	r2, [pc, #528]	@ (800b850 <HAL_SPI_Init+0x244>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d005      	beq.n	800b64e <HAL_SPI_Init+0x42>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2b0f      	cmp	r3, #15
 800b648:	d901      	bls.n	800b64e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e0f7      	b.n	800b83e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fbc2 	bl	800bdd8 <SPI_GetPacketSize>
 800b654:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a7b      	ldr	r2, [pc, #492]	@ (800b848 <HAL_SPI_Init+0x23c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d00c      	beq.n	800b67a <HAL_SPI_Init+0x6e>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a79      	ldr	r2, [pc, #484]	@ (800b84c <HAL_SPI_Init+0x240>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d007      	beq.n	800b67a <HAL_SPI_Init+0x6e>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a78      	ldr	r2, [pc, #480]	@ (800b850 <HAL_SPI_Init+0x244>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d002      	beq.n	800b67a <HAL_SPI_Init+0x6e>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b08      	cmp	r3, #8
 800b678:	d811      	bhi.n	800b69e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b67e:	4a72      	ldr	r2, [pc, #456]	@ (800b848 <HAL_SPI_Init+0x23c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d009      	beq.n	800b698 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a70      	ldr	r2, [pc, #448]	@ (800b84c <HAL_SPI_Init+0x240>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d004      	beq.n	800b698 <HAL_SPI_Init+0x8c>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a6f      	ldr	r2, [pc, #444]	@ (800b850 <HAL_SPI_Init+0x244>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d104      	bne.n	800b6a2 <HAL_SPI_Init+0x96>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b10      	cmp	r3, #16
 800b69c:	d901      	bls.n	800b6a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e0cd      	b.n	800b83e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f8cc 	bl	800b854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f022 0201 	bic.w	r2, r2, #1
 800b6d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b6de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6e8:	d119      	bne.n	800b71e <HAL_SPI_Init+0x112>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6f2:	d103      	bne.n	800b6fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d008      	beq.n	800b70e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10c      	bne.n	800b71e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b70c:	d107      	bne.n	800b71e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b71c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00f      	beq.n	800b74a <HAL_SPI_Init+0x13e>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	2b06      	cmp	r3, #6
 800b730:	d90b      	bls.n	800b74a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e007      	b.n	800b75a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b758:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69da      	ldr	r2, [r3, #28]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b762:	431a      	orrs	r2, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b76c:	ea42 0103 	orr.w	r1, r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	68da      	ldr	r2, [r3, #12]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b784:	431a      	orrs	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b78a:	431a      	orrs	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	431a      	orrs	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	431a      	orrs	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7ba:	ea42 0103 	orr.w	r1, r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d113      	bne.n	800b7fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f022 0201 	bic.w	r2, r2, #1
 800b808:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	430a      	orrs	r2, r1
 800b82a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	40013000 	.word	0x40013000
 800b84c:	40003800 	.word	0x40003800
 800b850:	40003c00 	.word	0x40003c00

0800b854 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d001      	beq.n	800b886 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800b882:	2302      	movs	r3, #2
 800b884:	e18a      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b892:	887b      	ldrh	r3, [r7, #2]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e17f      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d101      	bne.n	800b8aa <HAL_SPI_TransmitReceive_DMA+0x42>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e178      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2205      	movs	r2, #5
 800b8b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	887a      	ldrh	r2, [r7, #2]
 800b8cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	887a      	ldrh	r2, [r7, #2]
 800b8d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	887a      	ldrh	r2, [r7, #2]
 800b8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68da      	ldr	r2, [r3, #12]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b908:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b918:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	2b0f      	cmp	r3, #15
 800b920:	d905      	bls.n	800b92e <HAL_SPI_TransmitReceive_DMA+0xc6>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b92c:	d10f      	bne.n	800b94e <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b932:	2b07      	cmp	r3, #7
 800b934:	d911      	bls.n	800b95a <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b940:	d00b      	beq.n	800b95a <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b946:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b94c:	d005      	beq.n	800b95a <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e120      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	2b07      	cmp	r3, #7
 800b960:	d840      	bhi.n	800b9e4 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b96c:	d109      	bne.n	800b982 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b974:	b29b      	uxth	r3, r3
 800b976:	3301      	adds	r3, #1
 800b978:	105b      	asrs	r3, r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b98c:	d109      	bne.n	800b9a2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b994:	b29b      	uxth	r3, r3
 800b996:	3303      	adds	r3, #3
 800b998:	109b      	asrs	r3, r3, #2
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ac:	d109      	bne.n	800b9c2 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	105b      	asrs	r3, r3, #1
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9cc:	d12e      	bne.n	800ba2c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3303      	adds	r3, #3
 800b9d8:	109b      	asrs	r3, r3, #2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9e2:	e023      	b.n	800ba2c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	2b0f      	cmp	r3, #15
 800b9ea:	d81f      	bhi.n	800ba2c <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9f6:	d109      	bne.n	800ba0c <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	3301      	adds	r3, #1
 800ba02:	105b      	asrs	r3, r3, #1
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba16:	d109      	bne.n	800ba2c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	3301      	adds	r3, #1
 800ba22:	105b      	asrs	r3, r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba30:	4a5c      	ldr	r2, [pc, #368]	@ (800bba4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800ba32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba38:	4a5b      	ldr	r2, [pc, #364]	@ (800bba8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800ba3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba40:	4a5a      	ldr	r2, [pc, #360]	@ (800bbac <HAL_SPI_TransmitReceive_DMA+0x344>)
 800ba42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba48:	2200      	movs	r2, #0
 800ba4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3330      	adds	r3, #48	@ 0x30
 800ba56:	4619      	mov	r1, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba66:	f7f9 f923 	bl	8004cb0 <HAL_DMA_Start_IT>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d011      	beq.n	800ba94 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba76:	f043 0210 	orr.w	r2, r3, #16
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e083      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800baa2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa8:	2200      	movs	r2, #0
 800baaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bab0:	2200      	movs	r2, #0
 800bab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bab8:	2200      	movs	r2, #0
 800baba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bac0:	4a3a      	ldr	r2, [pc, #232]	@ (800bbac <HAL_SPI_TransmitReceive_DMA+0x344>)
 800bac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bacc:	4619      	mov	r1, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3320      	adds	r3, #32
 800bad4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800badc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bade:	f7f9 f8e7 	bl	8004cb0 <HAL_DMA_Start_IT>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d016      	beq.n	800bb16 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800baec:	4618      	mov	r0, r3
 800baee:	f7f9 fb49 	bl	8005184 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf8:	f043 0210 	orr.w	r2, r3, #16
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e042      	b.n	800bb9c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb20:	d108      	bne.n	800bb34 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6859      	ldr	r1, [r3, #4]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	4b20      	ldr	r3, [pc, #128]	@ (800bbb0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800bb2e:	400b      	ands	r3, r1
 800bb30:	6053      	str	r3, [r2, #4]
 800bb32:	e009      	b.n	800bb48 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	8879      	ldrh	r1, [r7, #2]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	430b      	orrs	r3, r1
 800bb46:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb56:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800bb66:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f042 0201 	orr.w	r2, r2, #1
 800bb76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb80:	d107      	bne.n	800bb92 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb90:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	0800bc37 	.word	0x0800bc37
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bc53 	.word	0x0800bc53
 800bbb0:	ffff0000 	.word	0xffff0000

0800bbb4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbfc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b07      	cmp	r3, #7
 800bc08:	d011      	beq.n	800bc2e <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc14:	d103      	bne.n	800bc1e <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff ffcc 	bl	800bbb4 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bc1c:	e007      	b.n	800bc2e <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f042 0208 	orr.w	r2, r2, #8
 800bc2c:	611a      	str	r2, [r3, #16]
}
 800bc2e:	bf00      	nop
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc42:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7ff ffbf 	bl	800bbc8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7f9 fdad 	bl	80057c0 <HAL_DMA_GetError>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d011      	beq.n	800bc90 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 f813 	bl	800bc98 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc78:	f043 0210 	orr.w	r2, r3, #16
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff ffa6 	bl	800bbdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	699a      	ldr	r2, [r3, #24]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f042 0208 	orr.w	r2, r2, #8
 800bcb6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	699a      	ldr	r2, [r3, #24]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f042 0210 	orr.w	r2, r2, #16
 800bcc6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0201 	bic.w	r2, r2, #1
 800bcd6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6919      	ldr	r1, [r3, #16]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	4b3c      	ldr	r3, [pc, #240]	@ (800bdd4 <SPI_CloseTransfer+0x13c>)
 800bce4:	400b      	ands	r3, r1
 800bce6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bcf6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d014      	beq.n	800bd2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f003 0320 	and.w	r3, r3, #32
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00f      	beq.n	800bd2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	699a      	ldr	r2, [r3, #24]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f042 0220 	orr.w	r2, r2, #32
 800bd2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d014      	beq.n	800bd64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00f      	beq.n	800bd64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd4a:	f043 0204 	orr.w	r2, r3, #4
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	699a      	ldr	r2, [r3, #24]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00f      	beq.n	800bd8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd74:	f043 0201 	orr.w	r2, r3, #1
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	699a      	ldr	r2, [r3, #24]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00f      	beq.n	800bdb8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd9e:	f043 0208 	orr.w	r2, r3, #8
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdb6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	fffffc90 	.word	0xfffffc90

0800bdd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	3301      	adds	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	3307      	adds	r3, #7
 800bdf6:	08db      	lsrs	r3, r3, #3
 800bdf8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	fb02 f303 	mul.w	r3, r2, r3
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e042      	b.n	800bea6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7f7 fbfc 	bl	8003630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2224      	movs	r2, #36	@ 0x24
 800be3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0201 	bic.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fe1f 	bl	800ca9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f8b4 	bl	800bfcc <UART_SetConfig>
 800be64:	4603      	mov	r3, r0
 800be66:	2b01      	cmp	r3, #1
 800be68:	d101      	bne.n	800be6e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e01b      	b.n	800bea6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f042 0201 	orr.w	r2, r2, #1
 800be9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fe9e 	bl	800cbe0 <UART_CheckIdleState>
 800bea4:	4603      	mov	r3, r0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b08a      	sub	sp, #40	@ 0x28
 800beb2:	af02      	add	r7, sp, #8
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	603b      	str	r3, [r7, #0]
 800beba:	4613      	mov	r3, r2
 800bebc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d17b      	bne.n	800bfc0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <HAL_UART_Transmit+0x26>
 800bece:	88fb      	ldrh	r3, [r7, #6]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e074      	b.n	800bfc2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2221      	movs	r2, #33	@ 0x21
 800bee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bee8:	f7f8 f9c2 	bl	8004270 <HAL_GetTick>
 800beec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	88fa      	ldrh	r2, [r7, #6]
 800befa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf06:	d108      	bne.n	800bf1a <HAL_UART_Transmit+0x6c>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d104      	bne.n	800bf1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	61bb      	str	r3, [r7, #24]
 800bf18:	e003      	b.n	800bf22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf22:	e030      	b.n	800bf86 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2180      	movs	r1, #128	@ 0x80
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 ff00 	bl	800cd34 <UART_WaitOnFlagUntilTimeout>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d005      	beq.n	800bf46 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e03d      	b.n	800bfc2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10b      	bne.n	800bf64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	3302      	adds	r3, #2
 800bf60:	61bb      	str	r3, [r7, #24]
 800bf62:	e007      	b.n	800bf74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	781a      	ldrb	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	3301      	adds	r3, #1
 800bf72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1c8      	bne.n	800bf24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2140      	movs	r1, #64	@ 0x40
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 fec9 	bl	800cd34 <UART_WaitOnFlagUntilTimeout>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d005      	beq.n	800bfb4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e006      	b.n	800bfc2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e000      	b.n	800bfc2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfc0:	2302      	movs	r3, #2
  }
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfd0:	b092      	sub	sp, #72	@ 0x48
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	431a      	orrs	r2, r3
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4bbe      	ldr	r3, [pc, #760]	@ (800c2f4 <UART_SetConfig+0x328>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c004:	430b      	orrs	r3, r1
 800c006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	68da      	ldr	r2, [r3, #12]
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4ab3      	ldr	r2, [pc, #716]	@ (800c2f8 <UART_SetConfig+0x32c>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d004      	beq.n	800c038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c034:	4313      	orrs	r3, r2
 800c036:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	689a      	ldr	r2, [r3, #8]
 800c03e:	4baf      	ldr	r3, [pc, #700]	@ (800c2fc <UART_SetConfig+0x330>)
 800c040:	4013      	ands	r3, r2
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c048:	430b      	orrs	r3, r1
 800c04a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c052:	f023 010f 	bic.w	r1, r3, #15
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4aa6      	ldr	r2, [pc, #664]	@ (800c300 <UART_SetConfig+0x334>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d177      	bne.n	800c15c <UART_SetConfig+0x190>
 800c06c:	4ba5      	ldr	r3, [pc, #660]	@ (800c304 <UART_SetConfig+0x338>)
 800c06e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c074:	2b28      	cmp	r3, #40	@ 0x28
 800c076:	d86d      	bhi.n	800c154 <UART_SetConfig+0x188>
 800c078:	a201      	add	r2, pc, #4	@ (adr r2, 800c080 <UART_SetConfig+0xb4>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c125 	.word	0x0800c125
 800c084:	0800c155 	.word	0x0800c155
 800c088:	0800c155 	.word	0x0800c155
 800c08c:	0800c155 	.word	0x0800c155
 800c090:	0800c155 	.word	0x0800c155
 800c094:	0800c155 	.word	0x0800c155
 800c098:	0800c155 	.word	0x0800c155
 800c09c:	0800c155 	.word	0x0800c155
 800c0a0:	0800c12d 	.word	0x0800c12d
 800c0a4:	0800c155 	.word	0x0800c155
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c155 	.word	0x0800c155
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c135 	.word	0x0800c135
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c155 	.word	0x0800c155
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c13d 	.word	0x0800c13d
 800c0e4:	0800c155 	.word	0x0800c155
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c155 	.word	0x0800c155
 800c0f8:	0800c155 	.word	0x0800c155
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c145 	.word	0x0800c145
 800c104:	0800c155 	.word	0x0800c155
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c155 	.word	0x0800c155
 800c110:	0800c155 	.word	0x0800c155
 800c114:	0800c155 	.word	0x0800c155
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c155 	.word	0x0800c155
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2301      	movs	r3, #1
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e222      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e21e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13a:	e21a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e216      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e212      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c14c:	2340      	movs	r3, #64	@ 0x40
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e20e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c154:	2380      	movs	r3, #128	@ 0x80
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e20a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a69      	ldr	r2, [pc, #420]	@ (800c308 <UART_SetConfig+0x33c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d130      	bne.n	800c1c8 <UART_SetConfig+0x1fc>
 800c166:	4b67      	ldr	r3, [pc, #412]	@ (800c304 <UART_SetConfig+0x338>)
 800c168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	2b05      	cmp	r3, #5
 800c170:	d826      	bhi.n	800c1c0 <UART_SetConfig+0x1f4>
 800c172:	a201      	add	r2, pc, #4	@ (adr r2, 800c178 <UART_SetConfig+0x1ac>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c191 	.word	0x0800c191
 800c17c:	0800c199 	.word	0x0800c199
 800c180:	0800c1a1 	.word	0x0800c1a1
 800c184:	0800c1a9 	.word	0x0800c1a9
 800c188:	0800c1b1 	.word	0x0800c1b1
 800c18c:	0800c1b9 	.word	0x0800c1b9
 800c190:	2300      	movs	r3, #0
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e1ec      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c198:	2304      	movs	r3, #4
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e1e8      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1a0:	2308      	movs	r3, #8
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a6:	e1e4      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1a8:	2310      	movs	r3, #16
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	e1e0      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1b0:	2320      	movs	r3, #32
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b6:	e1dc      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1b8:	2340      	movs	r3, #64	@ 0x40
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1be:	e1d8      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1c0:	2380      	movs	r3, #128	@ 0x80
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c6:	e1d4      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a4f      	ldr	r2, [pc, #316]	@ (800c30c <UART_SetConfig+0x340>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d130      	bne.n	800c234 <UART_SetConfig+0x268>
 800c1d2:	4b4c      	ldr	r3, [pc, #304]	@ (800c304 <UART_SetConfig+0x338>)
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b05      	cmp	r3, #5
 800c1dc:	d826      	bhi.n	800c22c <UART_SetConfig+0x260>
 800c1de:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e4 <UART_SetConfig+0x218>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c1fd 	.word	0x0800c1fd
 800c1e8:	0800c205 	.word	0x0800c205
 800c1ec:	0800c20d 	.word	0x0800c20d
 800c1f0:	0800c215 	.word	0x0800c215
 800c1f4:	0800c21d 	.word	0x0800c21d
 800c1f8:	0800c225 	.word	0x0800c225
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e1b6      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c204:	2304      	movs	r3, #4
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e1b2      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c20c:	2308      	movs	r3, #8
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c212:	e1ae      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c214:	2310      	movs	r3, #16
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21a:	e1aa      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c21c:	2320      	movs	r3, #32
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c222:	e1a6      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c224:	2340      	movs	r3, #64	@ 0x40
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22a:	e1a2      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c22c:	2380      	movs	r3, #128	@ 0x80
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c232:	e19e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a35      	ldr	r2, [pc, #212]	@ (800c310 <UART_SetConfig+0x344>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d130      	bne.n	800c2a0 <UART_SetConfig+0x2d4>
 800c23e:	4b31      	ldr	r3, [pc, #196]	@ (800c304 <UART_SetConfig+0x338>)
 800c240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	2b05      	cmp	r3, #5
 800c248:	d826      	bhi.n	800c298 <UART_SetConfig+0x2cc>
 800c24a:	a201      	add	r2, pc, #4	@ (adr r2, 800c250 <UART_SetConfig+0x284>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c271 	.word	0x0800c271
 800c258:	0800c279 	.word	0x0800c279
 800c25c:	0800c281 	.word	0x0800c281
 800c260:	0800c289 	.word	0x0800c289
 800c264:	0800c291 	.word	0x0800c291
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e180      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c270:	2304      	movs	r3, #4
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e17c      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c278:	2308      	movs	r3, #8
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e178      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c280:	2310      	movs	r3, #16
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c286:	e174      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c288:	2320      	movs	r3, #32
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28e:	e170      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c290:	2340      	movs	r3, #64	@ 0x40
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c296:	e16c      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c298:	2380      	movs	r3, #128	@ 0x80
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29e:	e168      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a1b      	ldr	r2, [pc, #108]	@ (800c314 <UART_SetConfig+0x348>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d142      	bne.n	800c330 <UART_SetConfig+0x364>
 800c2aa:	4b16      	ldr	r3, [pc, #88]	@ (800c304 <UART_SetConfig+0x338>)
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ae:	f003 0307 	and.w	r3, r3, #7
 800c2b2:	2b05      	cmp	r3, #5
 800c2b4:	d838      	bhi.n	800c328 <UART_SetConfig+0x35c>
 800c2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2bc <UART_SetConfig+0x2f0>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c2d5 	.word	0x0800c2d5
 800c2c0:	0800c2dd 	.word	0x0800c2dd
 800c2c4:	0800c2e5 	.word	0x0800c2e5
 800c2c8:	0800c2ed 	.word	0x0800c2ed
 800c2cc:	0800c319 	.word	0x0800c319
 800c2d0:	0800c321 	.word	0x0800c321
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e14a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c2dc:	2304      	movs	r3, #4
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e146      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c2e4:	2308      	movs	r3, #8
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e142      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f2:	e13e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c2f4:	cfff69f3 	.word	0xcfff69f3
 800c2f8:	58000c00 	.word	0x58000c00
 800c2fc:	11fff4ff 	.word	0x11fff4ff
 800c300:	40011000 	.word	0x40011000
 800c304:	58024400 	.word	0x58024400
 800c308:	40004400 	.word	0x40004400
 800c30c:	40004800 	.word	0x40004800
 800c310:	40004c00 	.word	0x40004c00
 800c314:	40005000 	.word	0x40005000
 800c318:	2320      	movs	r3, #32
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e128      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c320:	2340      	movs	r3, #64	@ 0x40
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e124      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c328:	2380      	movs	r3, #128	@ 0x80
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e120      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4acb      	ldr	r2, [pc, #812]	@ (800c664 <UART_SetConfig+0x698>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d176      	bne.n	800c428 <UART_SetConfig+0x45c>
 800c33a:	4bcb      	ldr	r3, [pc, #812]	@ (800c668 <UART_SetConfig+0x69c>)
 800c33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c342:	2b28      	cmp	r3, #40	@ 0x28
 800c344:	d86c      	bhi.n	800c420 <UART_SetConfig+0x454>
 800c346:	a201      	add	r2, pc, #4	@ (adr r2, 800c34c <UART_SetConfig+0x380>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c3f1 	.word	0x0800c3f1
 800c350:	0800c421 	.word	0x0800c421
 800c354:	0800c421 	.word	0x0800c421
 800c358:	0800c421 	.word	0x0800c421
 800c35c:	0800c421 	.word	0x0800c421
 800c360:	0800c421 	.word	0x0800c421
 800c364:	0800c421 	.word	0x0800c421
 800c368:	0800c421 	.word	0x0800c421
 800c36c:	0800c3f9 	.word	0x0800c3f9
 800c370:	0800c421 	.word	0x0800c421
 800c374:	0800c421 	.word	0x0800c421
 800c378:	0800c421 	.word	0x0800c421
 800c37c:	0800c421 	.word	0x0800c421
 800c380:	0800c421 	.word	0x0800c421
 800c384:	0800c421 	.word	0x0800c421
 800c388:	0800c421 	.word	0x0800c421
 800c38c:	0800c401 	.word	0x0800c401
 800c390:	0800c421 	.word	0x0800c421
 800c394:	0800c421 	.word	0x0800c421
 800c398:	0800c421 	.word	0x0800c421
 800c39c:	0800c421 	.word	0x0800c421
 800c3a0:	0800c421 	.word	0x0800c421
 800c3a4:	0800c421 	.word	0x0800c421
 800c3a8:	0800c421 	.word	0x0800c421
 800c3ac:	0800c409 	.word	0x0800c409
 800c3b0:	0800c421 	.word	0x0800c421
 800c3b4:	0800c421 	.word	0x0800c421
 800c3b8:	0800c421 	.word	0x0800c421
 800c3bc:	0800c421 	.word	0x0800c421
 800c3c0:	0800c421 	.word	0x0800c421
 800c3c4:	0800c421 	.word	0x0800c421
 800c3c8:	0800c421 	.word	0x0800c421
 800c3cc:	0800c411 	.word	0x0800c411
 800c3d0:	0800c421 	.word	0x0800c421
 800c3d4:	0800c421 	.word	0x0800c421
 800c3d8:	0800c421 	.word	0x0800c421
 800c3dc:	0800c421 	.word	0x0800c421
 800c3e0:	0800c421 	.word	0x0800c421
 800c3e4:	0800c421 	.word	0x0800c421
 800c3e8:	0800c421 	.word	0x0800c421
 800c3ec:	0800c419 	.word	0x0800c419
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e0bc      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e0b8      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c400:	2308      	movs	r3, #8
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e0b4      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c408:	2310      	movs	r3, #16
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e0b0      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c410:	2320      	movs	r3, #32
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e0ac      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c418:	2340      	movs	r3, #64	@ 0x40
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e0a8      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c420:	2380      	movs	r3, #128	@ 0x80
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e0a4      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a8f      	ldr	r2, [pc, #572]	@ (800c66c <UART_SetConfig+0x6a0>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d130      	bne.n	800c494 <UART_SetConfig+0x4c8>
 800c432:	4b8d      	ldr	r3, [pc, #564]	@ (800c668 <UART_SetConfig+0x69c>)
 800c434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	2b05      	cmp	r3, #5
 800c43c:	d826      	bhi.n	800c48c <UART_SetConfig+0x4c0>
 800c43e:	a201      	add	r2, pc, #4	@ (adr r2, 800c444 <UART_SetConfig+0x478>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c45d 	.word	0x0800c45d
 800c448:	0800c465 	.word	0x0800c465
 800c44c:	0800c46d 	.word	0x0800c46d
 800c450:	0800c475 	.word	0x0800c475
 800c454:	0800c47d 	.word	0x0800c47d
 800c458:	0800c485 	.word	0x0800c485
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e086      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c464:	2304      	movs	r3, #4
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e082      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c46c:	2308      	movs	r3, #8
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e07e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c474:	2310      	movs	r3, #16
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e07a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c47c:	2320      	movs	r3, #32
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e076      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c484:	2340      	movs	r3, #64	@ 0x40
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48a:	e072      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c48c:	2380      	movs	r3, #128	@ 0x80
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e06e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a75      	ldr	r2, [pc, #468]	@ (800c670 <UART_SetConfig+0x6a4>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d130      	bne.n	800c500 <UART_SetConfig+0x534>
 800c49e:	4b72      	ldr	r3, [pc, #456]	@ (800c668 <UART_SetConfig+0x69c>)
 800c4a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	2b05      	cmp	r3, #5
 800c4a8:	d826      	bhi.n	800c4f8 <UART_SetConfig+0x52c>
 800c4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <UART_SetConfig+0x4e4>)
 800c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b0:	0800c4c9 	.word	0x0800c4c9
 800c4b4:	0800c4d1 	.word	0x0800c4d1
 800c4b8:	0800c4d9 	.word	0x0800c4d9
 800c4bc:	0800c4e1 	.word	0x0800c4e1
 800c4c0:	0800c4e9 	.word	0x0800c4e9
 800c4c4:	0800c4f1 	.word	0x0800c4f1
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e050      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4d0:	2304      	movs	r3, #4
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e04c      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4d8:	2308      	movs	r3, #8
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e048      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4e0:	2310      	movs	r3, #16
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e044      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4e8:	2320      	movs	r3, #32
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e040      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4f0:	2340      	movs	r3, #64	@ 0x40
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f6:	e03c      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c4f8:	2380      	movs	r3, #128	@ 0x80
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fe:	e038      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a5b      	ldr	r2, [pc, #364]	@ (800c674 <UART_SetConfig+0x6a8>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d130      	bne.n	800c56c <UART_SetConfig+0x5a0>
 800c50a:	4b57      	ldr	r3, [pc, #348]	@ (800c668 <UART_SetConfig+0x69c>)
 800c50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c50e:	f003 0307 	and.w	r3, r3, #7
 800c512:	2b05      	cmp	r3, #5
 800c514:	d826      	bhi.n	800c564 <UART_SetConfig+0x598>
 800c516:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <UART_SetConfig+0x550>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c535 	.word	0x0800c535
 800c520:	0800c53d 	.word	0x0800c53d
 800c524:	0800c545 	.word	0x0800c545
 800c528:	0800c54d 	.word	0x0800c54d
 800c52c:	0800c555 	.word	0x0800c555
 800c530:	0800c55d 	.word	0x0800c55d
 800c534:	2302      	movs	r3, #2
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e01a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c53c:	2304      	movs	r3, #4
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e016      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c544:	2308      	movs	r3, #8
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e012      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c54c:	2310      	movs	r3, #16
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e00e      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c554:	2320      	movs	r3, #32
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55a:	e00a      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c55c:	2340      	movs	r3, #64	@ 0x40
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c562:	e006      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c564:	2380      	movs	r3, #128	@ 0x80
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56a:	e002      	b.n	800c572 <UART_SetConfig+0x5a6>
 800c56c:	2380      	movs	r3, #128	@ 0x80
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a3f      	ldr	r2, [pc, #252]	@ (800c674 <UART_SetConfig+0x6a8>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	f040 80f8 	bne.w	800c76e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c57e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c582:	2b20      	cmp	r3, #32
 800c584:	dc46      	bgt.n	800c614 <UART_SetConfig+0x648>
 800c586:	2b02      	cmp	r3, #2
 800c588:	f2c0 8082 	blt.w	800c690 <UART_SetConfig+0x6c4>
 800c58c:	3b02      	subs	r3, #2
 800c58e:	2b1e      	cmp	r3, #30
 800c590:	d87e      	bhi.n	800c690 <UART_SetConfig+0x6c4>
 800c592:	a201      	add	r2, pc, #4	@ (adr r2, 800c598 <UART_SetConfig+0x5cc>)
 800c594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c598:	0800c61b 	.word	0x0800c61b
 800c59c:	0800c691 	.word	0x0800c691
 800c5a0:	0800c623 	.word	0x0800c623
 800c5a4:	0800c691 	.word	0x0800c691
 800c5a8:	0800c691 	.word	0x0800c691
 800c5ac:	0800c691 	.word	0x0800c691
 800c5b0:	0800c633 	.word	0x0800c633
 800c5b4:	0800c691 	.word	0x0800c691
 800c5b8:	0800c691 	.word	0x0800c691
 800c5bc:	0800c691 	.word	0x0800c691
 800c5c0:	0800c691 	.word	0x0800c691
 800c5c4:	0800c691 	.word	0x0800c691
 800c5c8:	0800c691 	.word	0x0800c691
 800c5cc:	0800c691 	.word	0x0800c691
 800c5d0:	0800c643 	.word	0x0800c643
 800c5d4:	0800c691 	.word	0x0800c691
 800c5d8:	0800c691 	.word	0x0800c691
 800c5dc:	0800c691 	.word	0x0800c691
 800c5e0:	0800c691 	.word	0x0800c691
 800c5e4:	0800c691 	.word	0x0800c691
 800c5e8:	0800c691 	.word	0x0800c691
 800c5ec:	0800c691 	.word	0x0800c691
 800c5f0:	0800c691 	.word	0x0800c691
 800c5f4:	0800c691 	.word	0x0800c691
 800c5f8:	0800c691 	.word	0x0800c691
 800c5fc:	0800c691 	.word	0x0800c691
 800c600:	0800c691 	.word	0x0800c691
 800c604:	0800c691 	.word	0x0800c691
 800c608:	0800c691 	.word	0x0800c691
 800c60c:	0800c691 	.word	0x0800c691
 800c610:	0800c683 	.word	0x0800c683
 800c614:	2b40      	cmp	r3, #64	@ 0x40
 800c616:	d037      	beq.n	800c688 <UART_SetConfig+0x6bc>
 800c618:	e03a      	b.n	800c690 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c61a:	f7fc fe1f 	bl	800925c <HAL_RCCEx_GetD3PCLK1Freq>
 800c61e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c620:	e03c      	b.n	800c69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c626:	4618      	mov	r0, r3
 800c628:	f7fc fe2e 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c630:	e034      	b.n	800c69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f7fc ff7a 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c640:	e02c      	b.n	800c69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c642:	4b09      	ldr	r3, [pc, #36]	@ (800c668 <UART_SetConfig+0x69c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0320 	and.w	r3, r3, #32
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d016      	beq.n	800c67c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c64e:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <UART_SetConfig+0x69c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	08db      	lsrs	r3, r3, #3
 800c654:	f003 0303 	and.w	r3, r3, #3
 800c658:	4a07      	ldr	r2, [pc, #28]	@ (800c678 <UART_SetConfig+0x6ac>)
 800c65a:	fa22 f303 	lsr.w	r3, r2, r3
 800c65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c660:	e01c      	b.n	800c69c <UART_SetConfig+0x6d0>
 800c662:	bf00      	nop
 800c664:	40011400 	.word	0x40011400
 800c668:	58024400 	.word	0x58024400
 800c66c:	40007800 	.word	0x40007800
 800c670:	40007c00 	.word	0x40007c00
 800c674:	58000c00 	.word	0x58000c00
 800c678:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c67c:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f4 <UART_SetConfig+0x928>)
 800c67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c680:	e00c      	b.n	800c69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c682:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f8 <UART_SetConfig+0x92c>)
 800c684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c686:	e009      	b.n	800c69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c688:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68e:	e005      	b.n	800c69c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c69a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 81de 	beq.w	800ca60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a8:	4a94      	ldr	r2, [pc, #592]	@ (800c8fc <UART_SetConfig+0x930>)
 800c6aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
 800c6c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d305      	bcc.n	800c6d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6da:	e1c1      	b.n	800ca60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6de:	2200      	movs	r2, #0
 800c6e0:	60bb      	str	r3, [r7, #8]
 800c6e2:	60fa      	str	r2, [r7, #12]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e8:	4a84      	ldr	r2, [pc, #528]	@ (800c8fc <UART_SetConfig+0x930>)
 800c6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6fe:	f7f3 fffb 	bl	80006f8 <__aeabi_uldivmod>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4610      	mov	r0, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	f04f 0200 	mov.w	r2, #0
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	020b      	lsls	r3, r1, #8
 800c714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c718:	0202      	lsls	r2, r0, #8
 800c71a:	6979      	ldr	r1, [r7, #20]
 800c71c:	6849      	ldr	r1, [r1, #4]
 800c71e:	0849      	lsrs	r1, r1, #1
 800c720:	2000      	movs	r0, #0
 800c722:	460c      	mov	r4, r1
 800c724:	4605      	mov	r5, r0
 800c726:	eb12 0804 	adds.w	r8, r2, r4
 800c72a:	eb43 0905 	adc.w	r9, r3, r5
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	469a      	mov	sl, r3
 800c736:	4693      	mov	fp, r2
 800c738:	4652      	mov	r2, sl
 800c73a:	465b      	mov	r3, fp
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f3 ffda 	bl	80006f8 <__aeabi_uldivmod>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4613      	mov	r3, r2
 800c74a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c752:	d308      	bcc.n	800c766 <UART_SetConfig+0x79a>
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c75a:	d204      	bcs.n	800c766 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c762:	60da      	str	r2, [r3, #12]
 800c764:	e17c      	b.n	800ca60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c76c:	e178      	b.n	800ca60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c776:	f040 80c5 	bne.w	800c904 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c77a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c77e:	2b20      	cmp	r3, #32
 800c780:	dc48      	bgt.n	800c814 <UART_SetConfig+0x848>
 800c782:	2b00      	cmp	r3, #0
 800c784:	db7b      	blt.n	800c87e <UART_SetConfig+0x8b2>
 800c786:	2b20      	cmp	r3, #32
 800c788:	d879      	bhi.n	800c87e <UART_SetConfig+0x8b2>
 800c78a:	a201      	add	r2, pc, #4	@ (adr r2, 800c790 <UART_SetConfig+0x7c4>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c81b 	.word	0x0800c81b
 800c794:	0800c823 	.word	0x0800c823
 800c798:	0800c87f 	.word	0x0800c87f
 800c79c:	0800c87f 	.word	0x0800c87f
 800c7a0:	0800c82b 	.word	0x0800c82b
 800c7a4:	0800c87f 	.word	0x0800c87f
 800c7a8:	0800c87f 	.word	0x0800c87f
 800c7ac:	0800c87f 	.word	0x0800c87f
 800c7b0:	0800c83b 	.word	0x0800c83b
 800c7b4:	0800c87f 	.word	0x0800c87f
 800c7b8:	0800c87f 	.word	0x0800c87f
 800c7bc:	0800c87f 	.word	0x0800c87f
 800c7c0:	0800c87f 	.word	0x0800c87f
 800c7c4:	0800c87f 	.word	0x0800c87f
 800c7c8:	0800c87f 	.word	0x0800c87f
 800c7cc:	0800c87f 	.word	0x0800c87f
 800c7d0:	0800c84b 	.word	0x0800c84b
 800c7d4:	0800c87f 	.word	0x0800c87f
 800c7d8:	0800c87f 	.word	0x0800c87f
 800c7dc:	0800c87f 	.word	0x0800c87f
 800c7e0:	0800c87f 	.word	0x0800c87f
 800c7e4:	0800c87f 	.word	0x0800c87f
 800c7e8:	0800c87f 	.word	0x0800c87f
 800c7ec:	0800c87f 	.word	0x0800c87f
 800c7f0:	0800c87f 	.word	0x0800c87f
 800c7f4:	0800c87f 	.word	0x0800c87f
 800c7f8:	0800c87f 	.word	0x0800c87f
 800c7fc:	0800c87f 	.word	0x0800c87f
 800c800:	0800c87f 	.word	0x0800c87f
 800c804:	0800c87f 	.word	0x0800c87f
 800c808:	0800c87f 	.word	0x0800c87f
 800c80c:	0800c87f 	.word	0x0800c87f
 800c810:	0800c871 	.word	0x0800c871
 800c814:	2b40      	cmp	r3, #64	@ 0x40
 800c816:	d02e      	beq.n	800c876 <UART_SetConfig+0x8aa>
 800c818:	e031      	b.n	800c87e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c81a:	f7fa fd69 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 800c81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c820:	e033      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c822:	f7fa fd7b 	bl	800731c <HAL_RCC_GetPCLK2Freq>
 800c826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c828:	e02f      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fc fd2a 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c838:	e027      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83a:	f107 0318 	add.w	r3, r7, #24
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fc fe76 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c848:	e01f      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c84a:	4b2d      	ldr	r3, [pc, #180]	@ (800c900 <UART_SetConfig+0x934>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0320 	and.w	r3, r3, #32
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c856:	4b2a      	ldr	r3, [pc, #168]	@ (800c900 <UART_SetConfig+0x934>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	08db      	lsrs	r3, r3, #3
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	4a24      	ldr	r2, [pc, #144]	@ (800c8f4 <UART_SetConfig+0x928>)
 800c862:	fa22 f303 	lsr.w	r3, r2, r3
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c868:	e00f      	b.n	800c88a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c86a:	4b22      	ldr	r3, [pc, #136]	@ (800c8f4 <UART_SetConfig+0x928>)
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86e:	e00c      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c870:	4b21      	ldr	r3, [pc, #132]	@ (800c8f8 <UART_SetConfig+0x92c>)
 800c872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c874:	e009      	b.n	800c88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c87c:	e005      	b.n	800c88a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 80e7 	beq.w	800ca60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c896:	4a19      	ldr	r2, [pc, #100]	@ (800c8fc <UART_SetConfig+0x930>)
 800c898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c89c:	461a      	mov	r2, r3
 800c89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8a4:	005a      	lsls	r2, r3, #1
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	085b      	lsrs	r3, r3, #1
 800c8ac:	441a      	add	r2, r3
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ba:	2b0f      	cmp	r3, #15
 800c8bc:	d916      	bls.n	800c8ec <UART_SetConfig+0x920>
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8c4:	d212      	bcs.n	800c8ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	f023 030f 	bic.w	r3, r3, #15
 800c8ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	085b      	lsrs	r3, r3, #1
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c8e8:	60da      	str	r2, [r3, #12]
 800c8ea:	e0b9      	b.n	800ca60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8f2:	e0b5      	b.n	800ca60 <UART_SetConfig+0xa94>
 800c8f4:	03d09000 	.word	0x03d09000
 800c8f8:	003d0900 	.word	0x003d0900
 800c8fc:	08011e50 	.word	0x08011e50
 800c900:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c904:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c908:	2b20      	cmp	r3, #32
 800c90a:	dc49      	bgt.n	800c9a0 <UART_SetConfig+0x9d4>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	db7c      	blt.n	800ca0a <UART_SetConfig+0xa3e>
 800c910:	2b20      	cmp	r3, #32
 800c912:	d87a      	bhi.n	800ca0a <UART_SetConfig+0xa3e>
 800c914:	a201      	add	r2, pc, #4	@ (adr r2, 800c91c <UART_SetConfig+0x950>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c9a7 	.word	0x0800c9a7
 800c920:	0800c9af 	.word	0x0800c9af
 800c924:	0800ca0b 	.word	0x0800ca0b
 800c928:	0800ca0b 	.word	0x0800ca0b
 800c92c:	0800c9b7 	.word	0x0800c9b7
 800c930:	0800ca0b 	.word	0x0800ca0b
 800c934:	0800ca0b 	.word	0x0800ca0b
 800c938:	0800ca0b 	.word	0x0800ca0b
 800c93c:	0800c9c7 	.word	0x0800c9c7
 800c940:	0800ca0b 	.word	0x0800ca0b
 800c944:	0800ca0b 	.word	0x0800ca0b
 800c948:	0800ca0b 	.word	0x0800ca0b
 800c94c:	0800ca0b 	.word	0x0800ca0b
 800c950:	0800ca0b 	.word	0x0800ca0b
 800c954:	0800ca0b 	.word	0x0800ca0b
 800c958:	0800ca0b 	.word	0x0800ca0b
 800c95c:	0800c9d7 	.word	0x0800c9d7
 800c960:	0800ca0b 	.word	0x0800ca0b
 800c964:	0800ca0b 	.word	0x0800ca0b
 800c968:	0800ca0b 	.word	0x0800ca0b
 800c96c:	0800ca0b 	.word	0x0800ca0b
 800c970:	0800ca0b 	.word	0x0800ca0b
 800c974:	0800ca0b 	.word	0x0800ca0b
 800c978:	0800ca0b 	.word	0x0800ca0b
 800c97c:	0800ca0b 	.word	0x0800ca0b
 800c980:	0800ca0b 	.word	0x0800ca0b
 800c984:	0800ca0b 	.word	0x0800ca0b
 800c988:	0800ca0b 	.word	0x0800ca0b
 800c98c:	0800ca0b 	.word	0x0800ca0b
 800c990:	0800ca0b 	.word	0x0800ca0b
 800c994:	0800ca0b 	.word	0x0800ca0b
 800c998:	0800ca0b 	.word	0x0800ca0b
 800c99c:	0800c9fd 	.word	0x0800c9fd
 800c9a0:	2b40      	cmp	r3, #64	@ 0x40
 800c9a2:	d02e      	beq.n	800ca02 <UART_SetConfig+0xa36>
 800c9a4:	e031      	b.n	800ca0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9a6:	f7fa fca3 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 800c9aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9ac:	e033      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9ae:	f7fa fcb5 	bl	800731c <HAL_RCC_GetPCLK2Freq>
 800c9b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9b4:	e02f      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fc fc64 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c4:	e027      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9c6:	f107 0318 	add.w	r3, r7, #24
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fc fdb0 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9d4:	e01f      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d6:	4b2d      	ldr	r3, [pc, #180]	@ (800ca8c <UART_SetConfig+0xac0>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0320 	and.w	r3, r3, #32
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d009      	beq.n	800c9f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9e2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca8c <UART_SetConfig+0xac0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	08db      	lsrs	r3, r3, #3
 800c9e8:	f003 0303 	and.w	r3, r3, #3
 800c9ec:	4a28      	ldr	r2, [pc, #160]	@ (800ca90 <UART_SetConfig+0xac4>)
 800c9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9f4:	e00f      	b.n	800ca16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9f6:	4b26      	ldr	r3, [pc, #152]	@ (800ca90 <UART_SetConfig+0xac4>)
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9fa:	e00c      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9fc:	4b25      	ldr	r3, [pc, #148]	@ (800ca94 <UART_SetConfig+0xac8>)
 800c9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca00:	e009      	b.n	800ca16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca08:	e005      	b.n	800ca16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca14:	bf00      	nop
    }

    if (pclk != 0U)
 800ca16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d021      	beq.n	800ca60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca20:	4a1d      	ldr	r2, [pc, #116]	@ (800ca98 <UART_SetConfig+0xacc>)
 800ca22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca26:	461a      	mov	r2, r3
 800ca28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	085b      	lsrs	r3, r3, #1
 800ca34:	441a      	add	r2, r3
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	2b0f      	cmp	r3, #15
 800ca44:	d909      	bls.n	800ca5a <UART_SetConfig+0xa8e>
 800ca46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca4c:	d205      	bcs.n	800ca5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60da      	str	r2, [r3, #12]
 800ca58:	e002      	b.n	800ca60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2200      	movs	r2, #0
 800ca74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3748      	adds	r7, #72	@ 0x48
 800ca84:	46bd      	mov	sp, r7
 800ca86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca8a:	bf00      	nop
 800ca8c:	58024400 	.word	0x58024400
 800ca90:	03d09000 	.word	0x03d09000
 800ca94:	003d0900 	.word	0x003d0900
 800ca98:	08011e50 	.word	0x08011e50

0800ca9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00a      	beq.n	800cac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00a      	beq.n	800cae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	430a      	orrs	r2, r1
 800cae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caec:	f003 0302 	and.w	r3, r3, #2
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00a      	beq.n	800cb0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00a      	beq.n	800cb2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb30:	f003 0310 	and.w	r3, r3, #16
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb52:	f003 0320 	and.w	r3, r3, #32
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01a      	beq.n	800cbb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb9a:	d10a      	bne.n	800cbb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	605a      	str	r2, [r3, #4]
  }
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b098      	sub	sp, #96	@ 0x60
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbf0:	f7f7 fb3e 	bl	8004270 <HAL_GetTick>
 800cbf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 0308 	and.w	r3, r3, #8
 800cc00:	2b08      	cmp	r3, #8
 800cc02:	d12f      	bne.n	800cc64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f88e 	bl	800cd34 <UART_WaitOnFlagUntilTimeout>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d022      	beq.n	800cc64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc32:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e6      	bne.n	800cc1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2220      	movs	r2, #32
 800cc54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e063      	b.n	800cd2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 0304 	and.w	r3, r3, #4
 800cc6e:	2b04      	cmp	r3, #4
 800cc70:	d149      	bne.n	800cd06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f857 	bl	800cd34 <UART_WaitOnFlagUntilTimeout>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d03c      	beq.n	800cd06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	e853 3f00 	ldrex	r3, [r3]
 800cc98:	623b      	str	r3, [r7, #32]
   return(result);
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccb2:	e841 2300 	strex	r3, r2, [r1]
 800ccb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e6      	bne.n	800cc8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3308      	adds	r3, #8
 800ccc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	e853 3f00 	ldrex	r3, [r3]
 800cccc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f023 0301 	bic.w	r3, r3, #1
 800ccd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3308      	adds	r3, #8
 800ccdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccde:	61fa      	str	r2, [r7, #28]
 800cce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce2:	69b9      	ldr	r1, [r7, #24]
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	e841 2300 	strex	r3, r2, [r1]
 800ccea:	617b      	str	r3, [r7, #20]
   return(result);
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1e5      	bne.n	800ccbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2220      	movs	r2, #32
 800ccf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd02:	2303      	movs	r3, #3
 800cd04:	e012      	b.n	800cd2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2220      	movs	r2, #32
 800cd0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2220      	movs	r2, #32
 800cd12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3758      	adds	r7, #88	@ 0x58
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	4613      	mov	r3, r2
 800cd42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd44:	e04f      	b.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4c:	d04b      	beq.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd4e:	f7f7 fa8f 	bl	8004270 <HAL_GetTick>
 800cd52:	4602      	mov	r2, r0
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	69ba      	ldr	r2, [r7, #24]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d302      	bcc.n	800cd64 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e04e      	b.n	800ce06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0304 	and.w	r3, r3, #4
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d037      	beq.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b80      	cmp	r3, #128	@ 0x80
 800cd7a:	d034      	beq.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	2b40      	cmp	r3, #64	@ 0x40
 800cd80:	d031      	beq.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69db      	ldr	r3, [r3, #28]
 800cd88:	f003 0308 	and.w	r3, r3, #8
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d110      	bne.n	800cdb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2208      	movs	r2, #8
 800cd96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 f839 	bl	800ce10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2208      	movs	r2, #8
 800cda2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e029      	b.n	800ce06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdc0:	d111      	bne.n	800cde6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 f81f 	bl	800ce10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cde2:	2303      	movs	r3, #3
 800cde4:	e00f      	b.n	800ce06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69da      	ldr	r2, [r3, #28]
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	4013      	ands	r3, r2
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	bf0c      	ite	eq
 800cdf6:	2301      	moveq	r3, #1
 800cdf8:	2300      	movne	r3, #0
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	79fb      	ldrb	r3, [r7, #7]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d0a0      	beq.n	800cd46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
	...

0800ce10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b095      	sub	sp, #84	@ 0x54
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce20:	e853 3f00 	ldrex	r3, [r3]
 800ce24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce3e:	e841 2300 	strex	r3, r2, [r1]
 800ce42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1e6      	bne.n	800ce18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	3308      	adds	r3, #8
 800ce50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	e853 3f00 	ldrex	r3, [r3]
 800ce58:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce5a:	69fa      	ldr	r2, [r7, #28]
 800ce5c:	4b1e      	ldr	r3, [pc, #120]	@ (800ced8 <UART_EndRxTransfer+0xc8>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3308      	adds	r3, #8
 800ce68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce72:	e841 2300 	strex	r3, r2, [r1]
 800ce76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1e5      	bne.n	800ce4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d118      	bne.n	800ceb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	e853 3f00 	ldrex	r3, [r3]
 800ce92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	f023 0310 	bic.w	r3, r3, #16
 800ce9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	461a      	mov	r2, r3
 800cea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea8:	6979      	ldr	r1, [r7, #20]
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	e841 2300 	strex	r3, r2, [r1]
 800ceb0:	613b      	str	r3, [r7, #16]
   return(result);
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1e6      	bne.n	800ce86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cecc:	bf00      	nop
 800cece:	3754      	adds	r7, #84	@ 0x54
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	effffffe 	.word	0xeffffffe

0800cedc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d101      	bne.n	800cef2 <HAL_UARTEx_DisableFifoMode+0x16>
 800ceee:	2302      	movs	r3, #2
 800cef0:	e027      	b.n	800cf42 <HAL_UARTEx_DisableFifoMode+0x66>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2224      	movs	r2, #36	@ 0x24
 800cefe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f022 0201 	bic.w	r2, r2, #1
 800cf18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2220      	movs	r2, #32
 800cf34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d101      	bne.n	800cf66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf62:	2302      	movs	r3, #2
 800cf64:	e02d      	b.n	800cfc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2224      	movs	r2, #36	@ 0x24
 800cf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f022 0201 	bic.w	r2, r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	430a      	orrs	r2, r1
 800cfa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f850 	bl	800d048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d101      	bne.n	800cfe2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfde:	2302      	movs	r3, #2
 800cfe0:	e02d      	b.n	800d03e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2224      	movs	r2, #36	@ 0x24
 800cfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f022 0201 	bic.w	r2, r2, #1
 800d008:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	430a      	orrs	r2, r1
 800d01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f812 	bl	800d048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
	...

0800d048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d054:	2b00      	cmp	r3, #0
 800d056:	d108      	bne.n	800d06a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d068:	e031      	b.n	800d0ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d06a:	2310      	movs	r3, #16
 800d06c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d06e:	2310      	movs	r3, #16
 800d070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	0e5b      	lsrs	r3, r3, #25
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 0307 	and.w	r3, r3, #7
 800d080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	0f5b      	lsrs	r3, r3, #29
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 0307 	and.w	r3, r3, #7
 800d090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d092:	7bbb      	ldrb	r3, [r7, #14]
 800d094:	7b3a      	ldrb	r2, [r7, #12]
 800d096:	4911      	ldr	r1, [pc, #68]	@ (800d0dc <UARTEx_SetNbDataToProcess+0x94>)
 800d098:	5c8a      	ldrb	r2, [r1, r2]
 800d09a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d09e:	7b3a      	ldrb	r2, [r7, #12]
 800d0a0:	490f      	ldr	r1, [pc, #60]	@ (800d0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800d0a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	7b7a      	ldrb	r2, [r7, #13]
 800d0b4:	4909      	ldr	r1, [pc, #36]	@ (800d0dc <UARTEx_SetNbDataToProcess+0x94>)
 800d0b6:	5c8a      	ldrb	r2, [r1, r2]
 800d0b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d0bc:	7b7a      	ldrb	r2, [r7, #13]
 800d0be:	4908      	ldr	r1, [pc, #32]	@ (800d0e0 <UARTEx_SetNbDataToProcess+0x98>)
 800d0c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	08011e68 	.word	0x08011e68
 800d0e0:	08011e70 	.word	0x08011e70

0800d0e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d0e4:	b084      	sub	sp, #16
 800d0e6:	b480      	push	{r7}
 800d0e8:	b085      	sub	sp, #20
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	f107 001c 	add.w	r0, r7, #28
 800d0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d0fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d0fe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d102:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d106:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d10a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4313      	orrs	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	4b07      	ldr	r3, [pc, #28]	@ (800d134 <SDMMC_Init+0x50>)
 800d118:	4013      	ands	r3, r2
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	431a      	orrs	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	b004      	add	sp, #16
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	ffc02c00 	.word	0xffc02c00

0800d138 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f043 0203 	orr.w	r2, r3, #3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0303 	and.w	r3, r3, #3
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
	...

0800d1b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d1d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d1de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68da      	ldr	r2, [r3, #12]
 800d1ea:	4b06      	ldr	r3, [pc, #24]	@ (800d204 <SDMMC_SendCommand+0x50>)
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	431a      	orrs	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	fffee0c0 	.word	0xfffee0c0

0800d208 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	b2db      	uxtb	r3, r3
}
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d222:	b480      	push	{r7}
 800d224:	b085      	sub	sp, #20
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3314      	adds	r3, #20
 800d230:	461a      	mov	r2, r3
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	4413      	add	r3, r2
 800d236:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d26e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d274:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d27a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d286:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	431a      	orrs	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d292:	2300      	movs	r3, #0

}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d2ae:	2310      	movs	r3, #16
 800d2b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2c2:	f107 0308 	add.w	r3, r7, #8
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff ff73 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d2ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2d2:	2110      	movs	r1, #16
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa5f 	bl	800d798 <SDMMC_GetCmdResp1>
 800d2da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3720      	adds	r7, #32
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b088      	sub	sp, #32
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d2f4:	2311      	movs	r3, #17
 800d2f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2fe:	2300      	movs	r3, #0
 800d300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d308:	f107 0308 	add.w	r3, r7, #8
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff ff50 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d314:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d318:	2111      	movs	r1, #17
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fa3c 	bl	800d798 <SDMMC_GetCmdResp1>
 800d320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d322:	69fb      	ldr	r3, [r7, #28]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d33a:	2312      	movs	r3, #18
 800d33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d33e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d34c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d34e:	f107 0308 	add.w	r3, r7, #8
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7ff ff2d 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d35e:	2112      	movs	r1, #18
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fa19 	bl	800d798 <SDMMC_GetCmdResp1>
 800d366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d368:	69fb      	ldr	r3, [r7, #28]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3720      	adds	r7, #32
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b088      	sub	sp, #32
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d380:	2318      	movs	r3, #24
 800d382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff ff0a 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d3a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3a4:	2118      	movs	r1, #24
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f9f6 	bl	800d798 <SDMMC_GetCmdResp1>
 800d3ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ae:	69fb      	ldr	r3, [r7, #28]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d3c6:	2319      	movs	r3, #25
 800d3c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff fee7 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ea:	2119      	movs	r1, #25
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f9d3 	bl	800d798 <SDMMC_GetCmdResp1>
 800d3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f4:	69fb      	ldr	r3, [r7, #28]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3720      	adds	r7, #32
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b088      	sub	sp, #32
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d408:	2300      	movs	r3, #0
 800d40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d40c:	230c      	movs	r3, #12
 800d40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d41a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d41e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d438:	f107 0308 	add.w	r3, r7, #8
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff feb8 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d444:	4a0b      	ldr	r2, [pc, #44]	@ (800d474 <SDMMC_CmdStopTransfer+0x74>)
 800d446:	210c      	movs	r1, #12
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f9a5 	bl	800d798 <SDMMC_GetCmdResp1>
 800d44e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d462:	d101      	bne.n	800d468 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d464:	2300      	movs	r3, #0
 800d466:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d468:	69fb      	ldr	r3, [r7, #28]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3720      	adds	r7, #32
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	05f5e100 	.word	0x05f5e100

0800d478 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d486:	2307      	movs	r3, #7
 800d488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d48a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d490:	2300      	movs	r3, #0
 800d492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d49a:	f107 0308 	add.w	r3, r7, #8
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff fe87 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d4a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4aa:	2107      	movs	r1, #7
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 f973 	bl	800d798 <SDMMC_GetCmdResp1>
 800d4b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b4:	69fb      	ldr	r3, [r7, #28]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3720      	adds	r7, #32
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b088      	sub	sp, #32
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4dc:	f107 0308 	add.w	r3, r7, #8
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff fe66 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fb97 	bl	800dc1c <SDMMC_GetCmdError>
 800d4ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4f0:	69fb      	ldr	r3, [r7, #28]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b088      	sub	sp, #32
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d502:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d508:	2308      	movs	r3, #8
 800d50a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d50c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d512:	2300      	movs	r3, #0
 800d514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d51a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d51c:	f107 0308 	add.w	r3, r7, #8
 800d520:	4619      	mov	r1, r3
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff fe46 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fb29 	bl	800db80 <SDMMC_GetCmdResp7>
 800d52e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d530:	69fb      	ldr	r3, [r7, #28]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3720      	adds	r7, #32
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b088      	sub	sp, #32
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d548:	2337      	movs	r3, #55	@ 0x37
 800d54a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d54c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d55a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d55c:	f107 0308 	add.w	r3, r7, #8
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7ff fe26 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d56c:	2137      	movs	r1, #55	@ 0x37
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f912 	bl	800d798 <SDMMC_GetCmdResp1>
 800d574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d576:	69fb      	ldr	r3, [r7, #28]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3720      	adds	r7, #32
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d58e:	2329      	movs	r3, #41	@ 0x29
 800d590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d598:	2300      	movs	r3, #0
 800d59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d59c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a2:	f107 0308 	add.w	r3, r7, #8
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff fe03 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa2e 	bl	800da10 <SDMMC_GetCmdResp3>
 800d5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3720      	adds	r7, #32
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d5ce:	2306      	movs	r3, #6
 800d5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5e2:	f107 0308 	add.w	r3, r7, #8
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fde3 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d5ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5f2:	2106      	movs	r1, #6
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f8cf 	bl	800d798 <SDMMC_GetCmdResp1>
 800d5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5fc:	69fb      	ldr	r3, [r7, #28]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3720      	adds	r7, #32
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b088      	sub	sp, #32
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d60e:	2300      	movs	r3, #0
 800d610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d612:	2333      	movs	r3, #51	@ 0x33
 800d614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d626:	f107 0308 	add.w	r3, r7, #8
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff fdc1 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d632:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d636:	2133      	movs	r1, #51	@ 0x33
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f8ad 	bl	800d798 <SDMMC_GetCmdResp1>
 800d63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d640:	69fb      	ldr	r3, [r7, #28]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3720      	adds	r7, #32
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b088      	sub	sp, #32
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d656:	2302      	movs	r3, #2
 800d658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d65a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d660:	2300      	movs	r3, #0
 800d662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d66a:	f107 0308 	add.w	r3, r7, #8
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fd9f 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f980 	bl	800d97c <SDMMC_GetCmdResp2>
 800d67c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d67e:	69fb      	ldr	r3, [r7, #28]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3720      	adds	r7, #32
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d696:	2309      	movs	r3, #9
 800d698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d69a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d69e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6aa:	f107 0308 	add.w	r3, r7, #8
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff fd7f 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f960 	bl	800d97c <SDMMC_GetCmdResp2>
 800d6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6be:	69fb      	ldr	r3, [r7, #28]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3720      	adds	r7, #32
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6ea:	f107 0308 	add.w	r3, r7, #8
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff fd5f 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	2103      	movs	r1, #3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f9c8 	bl	800da90 <SDMMC_GetCmdResp6>
 800d700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d702:	69fb      	ldr	r3, [r7, #28]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3720      	adds	r7, #32
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d71a:	230d      	movs	r3, #13
 800d71c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d71e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d724:	2300      	movs	r3, #0
 800d726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d72c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d72e:	f107 0308 	add.w	r3, r7, #8
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff fd3d 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d73a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d73e:	210d      	movs	r1, #13
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f829 	bl	800d798 <SDMMC_GetCmdResp1>
 800d746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d748:	69fb      	ldr	r3, [r7, #28]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3720      	adds	r7, #32
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b088      	sub	sp, #32
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d75e:	230d      	movs	r3, #13
 800d760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d768:	2300      	movs	r3, #0
 800d76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d772:	f107 0308 	add.w	r3, r7, #8
 800d776:	4619      	mov	r1, r3
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff fd1b 	bl	800d1b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d77e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d782:	210d      	movs	r1, #13
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f807 	bl	800d798 <SDMMC_GetCmdResp1>
 800d78a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d78c:	69fb      	ldr	r3, [r7, #28]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3720      	adds	r7, #32
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d7a6:	4b70      	ldr	r3, [pc, #448]	@ (800d968 <SDMMC_GetCmdResp1+0x1d0>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a70      	ldr	r2, [pc, #448]	@ (800d96c <SDMMC_GetCmdResp1+0x1d4>)
 800d7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b0:	0a5a      	lsrs	r2, r3, #9
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	fb02 f303 	mul.w	r3, r2, r3
 800d7b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	1e5a      	subs	r2, r3, #1
 800d7be:	61fa      	str	r2, [r7, #28]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7c8:	e0c9      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	4b67      	ldr	r3, [pc, #412]	@ (800d970 <SDMMC_GetCmdResp1+0x1d8>)
 800d7d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0ef      	beq.n	800d7ba <SDMMC_GetCmdResp1+0x22>
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1ea      	bne.n	800d7ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e8:	f003 0304 	and.w	r3, r3, #4
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2204      	movs	r2, #4
 800d7f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7f6:	2304      	movs	r3, #4
 800d7f8:	e0b1      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	d004      	beq.n	800d810 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2201      	movs	r2, #1
 800d80a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e0a6      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4a58      	ldr	r2, [pc, #352]	@ (800d974 <SDMMC_GetCmdResp1+0x1dc>)
 800d814:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff fcf6 	bl	800d208 <SDMMC_GetCommandResponse>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
 800d820:	7afb      	ldrb	r3, [r7, #11]
 800d822:	4293      	cmp	r3, r2
 800d824:	d001      	beq.n	800d82a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d826:	2301      	movs	r3, #1
 800d828:	e099      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d82a:	2100      	movs	r1, #0
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7ff fcf8 	bl	800d222 <SDMMC_GetResponse>
 800d832:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4b50      	ldr	r3, [pc, #320]	@ (800d978 <SDMMC_GetCmdResp1+0x1e0>)
 800d838:	4013      	ands	r3, r2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d83e:	2300      	movs	r3, #0
 800d840:	e08d      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	da02      	bge.n	800d84e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d84c:	e087      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d858:	2340      	movs	r3, #64	@ 0x40
 800d85a:	e080      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d866:	2380      	movs	r3, #128	@ 0x80
 800d868:	e079      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d878:	e071      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d888:	e069      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d898:	e061      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8a8:	e059      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8b8:	e051      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8c8:	e049      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8d8:	e041      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d002      	beq.n	800d8ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d8e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8e8:	e039      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d8f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d8f8:	e031      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d904:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d908:	e029      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d914:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d918:	e021      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d924:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d928:	e019      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d934:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d938:	e011      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d944:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d948:	e009      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f003 0308 	and.w	r3, r3, #8
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d954:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d958:	e001      	b.n	800d95e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d95a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	24000050 	.word	0x24000050
 800d96c:	10624dd3 	.word	0x10624dd3
 800d970:	00200045 	.word	0x00200045
 800d974:	002000c5 	.word	0x002000c5
 800d978:	fdffe008 	.word	0xfdffe008

0800d97c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d984:	4b1f      	ldr	r3, [pc, #124]	@ (800da04 <SDMMC_GetCmdResp2+0x88>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a1f      	ldr	r2, [pc, #124]	@ (800da08 <SDMMC_GetCmdResp2+0x8c>)
 800d98a:	fba2 2303 	umull	r2, r3, r2, r3
 800d98e:	0a5b      	lsrs	r3, r3, #9
 800d990:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d994:	fb02 f303 	mul.w	r3, r2, r3
 800d998:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	1e5a      	subs	r2, r3, #1
 800d99e:	60fa      	str	r2, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9a8:	e026      	b.n	800d9f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0ef      	beq.n	800d99a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d1ea      	bne.n	800d99a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c8:	f003 0304 	and.w	r3, r3, #4
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9d6:	2304      	movs	r3, #4
 800d9d8:	e00e      	b.n	800d9f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d004      	beq.n	800d9f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e003      	b.n	800d9f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a06      	ldr	r2, [pc, #24]	@ (800da0c <SDMMC_GetCmdResp2+0x90>)
 800d9f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	24000050 	.word	0x24000050
 800da08:	10624dd3 	.word	0x10624dd3
 800da0c:	002000c5 	.word	0x002000c5

0800da10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da18:	4b1a      	ldr	r3, [pc, #104]	@ (800da84 <SDMMC_GetCmdResp3+0x74>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a1a      	ldr	r2, [pc, #104]	@ (800da88 <SDMMC_GetCmdResp3+0x78>)
 800da1e:	fba2 2303 	umull	r2, r3, r2, r3
 800da22:	0a5b      	lsrs	r3, r3, #9
 800da24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da28:	fb02 f303 	mul.w	r3, r2, r3
 800da2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1e5a      	subs	r2, r3, #1
 800da32:	60fa      	str	r2, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d102      	bne.n	800da3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da3c:	e01b      	b.n	800da76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d0ef      	beq.n	800da2e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1ea      	bne.n	800da2e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da5c:	f003 0304 	and.w	r3, r3, #4
 800da60:	2b00      	cmp	r3, #0
 800da62:	d004      	beq.n	800da6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2204      	movs	r2, #4
 800da68:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da6a:	2304      	movs	r3, #4
 800da6c:	e003      	b.n	800da76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	4a06      	ldr	r2, [pc, #24]	@ (800da8c <SDMMC_GetCmdResp3+0x7c>)
 800da72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	24000050 	.word	0x24000050
 800da88:	10624dd3 	.word	0x10624dd3
 800da8c:	002000c5 	.word	0x002000c5

0800da90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	460b      	mov	r3, r1
 800da9a:	607a      	str	r2, [r7, #4]
 800da9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da9e:	4b35      	ldr	r3, [pc, #212]	@ (800db74 <SDMMC_GetCmdResp6+0xe4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a35      	ldr	r2, [pc, #212]	@ (800db78 <SDMMC_GetCmdResp6+0xe8>)
 800daa4:	fba2 2303 	umull	r2, r3, r2, r3
 800daa8:	0a5b      	lsrs	r3, r3, #9
 800daaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	1e5a      	subs	r2, r3, #1
 800dab8:	61fa      	str	r2, [r7, #28]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d102      	bne.n	800dac4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dabe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dac2:	e052      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d0ef      	beq.n	800dab4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1ea      	bne.n	800dab4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae2:	f003 0304 	and.w	r3, r3, #4
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2204      	movs	r2, #4
 800daee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daf0:	2304      	movs	r3, #4
 800daf2:	e03a      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daf8:	f003 0301 	and.w	r3, r3, #1
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d004      	beq.n	800db0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2201      	movs	r2, #1
 800db04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db06:	2301      	movs	r3, #1
 800db08:	e02f      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff fb7c 	bl	800d208 <SDMMC_GetCommandResponse>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	7afb      	ldrb	r3, [r7, #11]
 800db16:	4293      	cmp	r3, r2
 800db18:	d001      	beq.n	800db1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e025      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	4a16      	ldr	r2, [pc, #88]	@ (800db7c <SDMMC_GetCmdResp6+0xec>)
 800db22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db24:	2100      	movs	r1, #0
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f7ff fb7b 	bl	800d222 <SDMMC_GetResponse>
 800db2c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	0c1b      	lsrs	r3, r3, #16
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800db42:	2300      	movs	r3, #0
 800db44:	e011      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db54:	e009      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db64:	e001      	b.n	800db6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3720      	adds	r7, #32
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	24000050 	.word	0x24000050
 800db78:	10624dd3 	.word	0x10624dd3
 800db7c:	002000c5 	.word	0x002000c5

0800db80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db88:	4b22      	ldr	r3, [pc, #136]	@ (800dc14 <SDMMC_GetCmdResp7+0x94>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a22      	ldr	r2, [pc, #136]	@ (800dc18 <SDMMC_GetCmdResp7+0x98>)
 800db8e:	fba2 2303 	umull	r2, r3, r2, r3
 800db92:	0a5b      	lsrs	r3, r3, #9
 800db94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db98:	fb02 f303 	mul.w	r3, r2, r3
 800db9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	1e5a      	subs	r2, r3, #1
 800dba2:	60fa      	str	r2, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dba8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbac:	e02c      	b.n	800dc08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0ef      	beq.n	800db9e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1ea      	bne.n	800db9e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbcc:	f003 0304 	and.w	r3, r3, #4
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2204      	movs	r2, #4
 800dbd8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbda:	2304      	movs	r3, #4
 800dbdc:	e014      	b.n	800dc08 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d004      	beq.n	800dbf4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e009      	b.n	800dc08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2240      	movs	r2, #64	@ 0x40
 800dc04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0

}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	24000050 	.word	0x24000050
 800dc18:	10624dd3 	.word	0x10624dd3

0800dc1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dc24:	4b11      	ldr	r3, [pc, #68]	@ (800dc6c <SDMMC_GetCmdError+0x50>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a11      	ldr	r2, [pc, #68]	@ (800dc70 <SDMMC_GetCmdError+0x54>)
 800dc2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc2e:	0a5b      	lsrs	r3, r3, #9
 800dc30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc34:	fb02 f303 	mul.w	r3, r2, r3
 800dc38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	60fa      	str	r2, [r7, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc48:	e009      	b.n	800dc5e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0f1      	beq.n	800dc3a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4a06      	ldr	r2, [pc, #24]	@ (800dc74 <SDMMC_GetCmdError+0x58>)
 800dc5a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	24000050 	.word	0x24000050
 800dc70:	10624dd3 	.word	0x10624dd3
 800dc74:	002000c5 	.word	0x002000c5

0800dc78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc7c:	4904      	ldr	r1, [pc, #16]	@ (800dc90 <MX_FATFS_Init+0x18>)
 800dc7e:	4805      	ldr	r0, [pc, #20]	@ (800dc94 <MX_FATFS_Init+0x1c>)
 800dc80:	f002 fccc 	bl	801061c <FATFS_LinkDriver>
 800dc84:	4603      	mov	r3, r0
 800dc86:	461a      	mov	r2, r3
 800dc88:	4b03      	ldr	r3, [pc, #12]	@ (800dc98 <MX_FATFS_Init+0x20>)
 800dc8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dc8c:	bf00      	nop
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	24000590 	.word	0x24000590
 800dc94:	08011e78 	.word	0x08011e78
 800dc98:	2400058c 	.word	0x2400058c

0800dc9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dca0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	68f9      	ldr	r1, [r7, #12]
 800dcc2:	4806      	ldr	r0, [pc, #24]	@ (800dcdc <BSP_SD_ReadBlocks_DMA+0x30>)
 800dcc4:	f7fc f95e 	bl	8009f84 <HAL_SD_ReadBlocks_DMA>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d001      	beq.n	800dcd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	24000420 	.word	0x24000420

0800dce0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	68f9      	ldr	r1, [r7, #12]
 800dcf6:	4806      	ldr	r0, [pc, #24]	@ (800dd10 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dcf8:	f7fc f9ec 	bl	800a0d4 <HAL_SD_WriteBlocks_DMA>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	24000420 	.word	0x24000420

0800dd14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd18:	4805      	ldr	r0, [pc, #20]	@ (800dd30 <BSP_SD_GetCardState+0x1c>)
 800dd1a:	f7fc ffe5 	bl	800ace8 <HAL_SD_GetCardState>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	bf14      	ite	ne
 800dd24:	2301      	movne	r3, #1
 800dd26:	2300      	moveq	r3, #0
 800dd28:	b2db      	uxtb	r3, r3
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	24000420 	.word	0x24000420

0800dd34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd3c:	6879      	ldr	r1, [r7, #4]
 800dd3e:	4803      	ldr	r0, [pc, #12]	@ (800dd4c <BSP_SD_GetCardInfo+0x18>)
 800dd40:	f7fc fe94 	bl	800aa6c <HAL_SD_GetCardInfo>
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	24000420 	.word	0x24000420

0800dd50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dd58:	f000 fad8 	bl	800e30c <BSP_SD_WriteCpltCallback>
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dd6c:	f000 fada 	bl	800e324 <BSP_SD_ReadCpltCallback>
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd80:	f7f6 fa76 	bl	8004270 <HAL_GetTick>
 800dd84:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd86:	e006      	b.n	800dd96 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd88:	f7ff ffc4 	bl	800dd14 <BSP_SD_GetCardState>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	e009      	b.n	800ddaa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd96:	f7f6 fa6b 	bl	8004270 <HAL_GetTick>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d8f0      	bhi.n	800dd88 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dda6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
	...

0800ddb4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ddbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ddec <SD_CheckStatus+0x38>)
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddc4:	f7ff ffa6 	bl	800dd14 <BSP_SD_GetCardState>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d107      	bne.n	800ddde <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddce:	4b07      	ldr	r3, [pc, #28]	@ (800ddec <SD_CheckStatus+0x38>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	f023 0301 	bic.w	r3, r3, #1
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4b04      	ldr	r3, [pc, #16]	@ (800ddec <SD_CheckStatus+0x38>)
 800dddc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ddde:	4b03      	ldr	r3, [pc, #12]	@ (800ddec <SD_CheckStatus+0x38>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b2db      	uxtb	r3, r3
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	2400005d 	.word	0x2400005d

0800ddf0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff ffd9 	bl	800ddb4 <SD_CheckStatus>
 800de02:	4603      	mov	r3, r0
 800de04:	461a      	mov	r2, r3
 800de06:	4b04      	ldr	r3, [pc, #16]	@ (800de18 <SD_initialize+0x28>)
 800de08:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800de0a:	4b03      	ldr	r3, [pc, #12]	@ (800de18 <SD_initialize+0x28>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	b2db      	uxtb	r3, r3
}
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	2400005d 	.word	0x2400005d

0800de1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff ffc3 	bl	800ddb4 <SD_CheckStatus>
 800de2e:	4603      	mov	r3, r0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b090      	sub	sp, #64	@ 0x40
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	607a      	str	r2, [r7, #4]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de4e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800de52:	f7ff ff91 	bl	800dd78 <SD_CheckStatusWithTimeout>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	da02      	bge.n	800de62 <SD_read+0x2a>
  {
    return res;
 800de5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800de60:	e0ea      	b.n	800e038 <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d16d      	bne.n	800df48 <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	68b8      	ldr	r0, [r7, #8]
 800de72:	f7ff ff1b 	bl	800dcac <BSP_SD_ReadBlocks_DMA>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f040 80db 	bne.w	800e034 <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de7e:	4b70      	ldr	r3, [pc, #448]	@ (800e040 <SD_read+0x208>)
 800de80:	2200      	movs	r2, #0
 800de82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de84:	f7f6 f9f4 	bl	8004270 <HAL_GetTick>
 800de88:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de8a:	bf00      	nop
 800de8c:	4b6c      	ldr	r3, [pc, #432]	@ (800e040 <SD_read+0x208>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d108      	bne.n	800dea6 <SD_read+0x6e>
 800de94:	f7f6 f9ec 	bl	8004270 <HAL_GetTick>
 800de98:	4602      	mov	r2, r0
 800de9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d9f2      	bls.n	800de8c <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800dea6:	4b66      	ldr	r3, [pc, #408]	@ (800e040 <SD_read+0x208>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <SD_read+0x7e>
      {
        res = RES_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800deb4:	e0be      	b.n	800e034 <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 800deb6:	4b62      	ldr	r3, [pc, #392]	@ (800e040 <SD_read+0x208>)
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800debc:	f7f6 f9d8 	bl	8004270 <HAL_GetTick>
 800dec0:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dec2:	e037      	b.n	800df34 <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dec4:	f7ff ff26 	bl	800dd14 <BSP_SD_GetCardState>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d132      	bne.n	800df34 <SD_read+0xfc>
          {
            res = RES_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f023 031f 	bic.w	r3, r3, #31
 800deda:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	0251      	lsls	r1, r2, #9
 800dee2:	68b8      	ldr	r0, [r7, #8]
 800dee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dee6:	1a82      	subs	r2, r0, r2
 800dee8:	440a      	add	r2, r1
 800deea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800deec:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800deee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def0:	2b00      	cmp	r3, #0
 800def2:	dd1d      	ble.n	800df30 <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800def4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def6:	f003 021f 	and.w	r2, r3, #31
 800defa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defc:	4413      	add	r3, r2
 800defe:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800df00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800df04:	f3bf 8f4f 	dsb	sy
}
 800df08:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800df0a:	4a4e      	ldr	r2, [pc, #312]	@ (800e044 <SD_read+0x20c>)
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	3320      	adds	r3, #32
 800df16:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800df18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1a:	3b20      	subs	r3, #32
 800df1c:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	2b00      	cmp	r3, #0
 800df22:	dcf2      	bgt.n	800df0a <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 800df24:	f3bf 8f4f 	dsb	sy
}
 800df28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df2a:	f3bf 8f6f 	isb	sy
}
 800df2e:	bf00      	nop
}
 800df30:	bf00      	nop
#endif
            break;
 800df32:	e07f      	b.n	800e034 <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800df34:	f7f6 f99c 	bl	8004270 <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800df42:	4293      	cmp	r3, r2
 800df44:	d9be      	bls.n	800dec4 <SD_read+0x8c>
 800df46:	e075      	b.n	800e034 <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800df48:	2300      	movs	r3, #0
 800df4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df4c:	e061      	b.n	800e012 <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	4619      	mov	r1, r3
 800df58:	483b      	ldr	r0, [pc, #236]	@ (800e048 <SD_read+0x210>)
 800df5a:	f7ff fea7 	bl	800dcac <BSP_SD_ReadBlocks_DMA>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 800df64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d157      	bne.n	800e01c <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800df6c:	f7f6 f980 	bl	8004270 <HAL_GetTick>
 800df70:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df72:	bf00      	nop
 800df74:	4b32      	ldr	r3, [pc, #200]	@ (800e040 <SD_read+0x208>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d108      	bne.n	800df8e <SD_read+0x156>
 800df7c:	f7f6 f978 	bl	8004270 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	f247 522f 	movw	r2, #29999	@ 0x752f
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d9f2      	bls.n	800df74 <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 800df8e:	4b2c      	ldr	r3, [pc, #176]	@ (800e040 <SD_read+0x208>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d103      	bne.n	800df9e <SD_read+0x166>
          {
            res = RES_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800df9c:	e03f      	b.n	800e01e <SD_read+0x1e6>
          }
          ReadStatus = 0;
 800df9e:	4b28      	ldr	r3, [pc, #160]	@ (800e040 <SD_read+0x208>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	601a      	str	r2, [r3, #0]
 800dfa4:	4b28      	ldr	r3, [pc, #160]	@ (800e048 <SD_read+0x210>)
 800dfa6:	61fb      	str	r3, [r7, #28]
 800dfa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfac:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dd1d      	ble.n	800dff0 <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	f003 021f 	and.w	r2, r3, #31
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800dfc4:	f3bf 8f4f 	dsb	sy
}
 800dfc8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800dfca:	4a1e      	ldr	r2, [pc, #120]	@ (800e044 <SD_read+0x20c>)
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	3320      	adds	r3, #32
 800dfd6:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	3b20      	subs	r3, #32
 800dfdc:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	dcf2      	bgt.n	800dfca <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 800dfe4:	f3bf 8f4f 	dsb	sy
}
 800dfe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dfea:	f3bf 8f6f 	isb	sy
}
 800dfee:	bf00      	nop
}
 800dff0:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	4a14      	ldr	r2, [pc, #80]	@ (800e048 <SD_read+0x210>)
 800dff6:	4618      	mov	r0, r3
 800dff8:	4611      	mov	r1, r2
 800dffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dffe:	461a      	mov	r2, r3
 800e000:	f003 f88b 	bl	801111a <memcpy>
          buff += BLOCKSIZE;
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e00a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800e00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00e:	3301      	adds	r3, #1
 800e010:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d899      	bhi.n	800df4e <SD_read+0x116>
 800e01a:	e000      	b.n	800e01e <SD_read+0x1e6>
        }
        else
        {
          break;
 800e01c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d106      	bne.n	800e034 <SD_read+0x1fc>
 800e026:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d102      	bne.n	800e034 <SD_read+0x1fc>
        res = RES_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 800e034:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3740      	adds	r7, #64	@ 0x40
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	24000c04 	.word	0x24000c04
 800e044:	e000ed00 	.word	0xe000ed00
 800e048:	24000a00 	.word	0x24000a00

0800e04c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b090      	sub	sp, #64	@ 0x40
 800e050:	af00      	add	r7, sp, #0
 800e052:	60b9      	str	r1, [r7, #8]
 800e054:	607a      	str	r2, [r7, #4]
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	4603      	mov	r3, r0
 800e05a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e062:	4b7b      	ldr	r3, [pc, #492]	@ (800e250 <SD_write+0x204>)
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e068:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e06c:	f7ff fe84 	bl	800dd78 <SD_CheckStatusWithTimeout>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	da02      	bge.n	800e07c <SD_write+0x30>
  {
    return res;
 800e076:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e07a:	e0e5      	b.n	800e248 <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	f003 0303 	and.w	r3, r3, #3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d16a      	bne.n	800e15c <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	f023 031f 	bic.w	r3, r3, #31
 800e08c:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	0251      	lsls	r1, r2, #9
 800e094:	68b8      	ldr	r0, [r7, #8]
 800e096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e098:	1a82      	subs	r2, r0, r2
 800e09a:	440a      	add	r2, r1
 800e09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e09e:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800e0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd1d      	ble.n	800e0e2 <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a8:	f003 021f 	and.w	r2, r3, #31
 800e0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ae:	4413      	add	r3, r2
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800e0b6:	f3bf 8f4f 	dsb	sy
}
 800e0ba:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e0bc:	4a65      	ldr	r2, [pc, #404]	@ (800e254 <SD_write+0x208>)
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	3320      	adds	r3, #32
 800e0c8:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	3b20      	subs	r3, #32
 800e0ce:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	dcf2      	bgt.n	800e0bc <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 800e0d6:	f3bf 8f4f 	dsb	sy
}
 800e0da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e0dc:	f3bf 8f6f 	isb	sy
}
 800e0e0:	bf00      	nop
}
 800e0e2:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	68b8      	ldr	r0, [r7, #8]
 800e0ea:	f7ff fdf9 	bl	800dce0 <BSP_SD_WriteBlocks_DMA>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f040 80a7 	bne.w	800e244 <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e0f6:	f7f6 f8bb 	bl	8004270 <HAL_GetTick>
 800e0fa:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e0fc:	bf00      	nop
 800e0fe:	4b54      	ldr	r3, [pc, #336]	@ (800e250 <SD_write+0x204>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d108      	bne.n	800e118 <SD_write+0xcc>
 800e106:	f7f6 f8b3 	bl	8004270 <HAL_GetTick>
 800e10a:	4602      	mov	r2, r0
 800e10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e114:	4293      	cmp	r3, r2
 800e116:	d9f2      	bls.n	800e0fe <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e118:	4b4d      	ldr	r3, [pc, #308]	@ (800e250 <SD_write+0x204>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d103      	bne.n	800e128 <SD_write+0xdc>
      {
        res = RES_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e126:	e08d      	b.n	800e244 <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 800e128:	4b49      	ldr	r3, [pc, #292]	@ (800e250 <SD_write+0x204>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e12e:	f7f6 f89f 	bl	8004270 <HAL_GetTick>
 800e132:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e134:	e008      	b.n	800e148 <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e136:	f7ff fded 	bl	800dd14 <BSP_SD_GetCardState>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <SD_write+0xfc>
          {
            res = RES_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800e146:	e07d      	b.n	800e244 <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e148:	f7f6 f892 	bl	8004270 <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e156:	4293      	cmp	r3, r2
 800e158:	d9ed      	bls.n	800e136 <SD_write+0xea>
 800e15a:	e073      	b.n	800e244 <SD_write+0x1f8>
 800e15c:	4b3e      	ldr	r3, [pc, #248]	@ (800e258 <SD_write+0x20c>)
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e164:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	dd1d      	ble.n	800e1a8 <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	f003 021f 	and.w	r2, r3, #31
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	4413      	add	r3, r2
 800e176:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800e17c:	f3bf 8f4f 	dsb	sy
}
 800e180:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e182:	4a34      	ldr	r2, [pc, #208]	@ (800e254 <SD_write+0x208>)
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	3320      	adds	r3, #32
 800e18e:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	3b20      	subs	r3, #32
 800e194:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	dcf2      	bgt.n	800e182 <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 800e19c:	f3bf 8f4f 	dsb	sy
}
 800e1a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e1a2:	f3bf 8f6f 	isb	sy
}
 800e1a6:	bf00      	nop
}
 800e1a8:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e1ae:	e036      	b.n	800e21e <SD_write+0x1d2>
      {
        WriteStatus = 0;
 800e1b0:	4b27      	ldr	r3, [pc, #156]	@ (800e250 <SD_write+0x204>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800e1b6:	4a28      	ldr	r2, [pc, #160]	@ (800e258 <SD_write+0x20c>)
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	4619      	mov	r1, r3
 800e1be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f002 ffa9 	bl	801111a <memcpy>
        buff += BLOCKSIZE;
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e1ce:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	607a      	str	r2, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	4619      	mov	r1, r3
 800e1da:	481f      	ldr	r0, [pc, #124]	@ (800e258 <SD_write+0x20c>)
 800e1dc:	f7ff fd80 	bl	800dce0 <BSP_SD_WriteBlocks_DMA>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 800e1e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d11c      	bne.n	800e228 <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800e1ee:	f7f6 f83f 	bl	8004270 <HAL_GetTick>
 800e1f2:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e1f4:	bf00      	nop
 800e1f6:	4b16      	ldr	r3, [pc, #88]	@ (800e250 <SD_write+0x204>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d108      	bne.n	800e210 <SD_write+0x1c4>
 800e1fe:	f7f6 f837 	bl	8004270 <HAL_GetTick>
 800e202:	4602      	mov	r2, r0
 800e204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d9f2      	bls.n	800e1f6 <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 800e210:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <SD_write+0x204>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d009      	beq.n	800e22c <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 800e218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21a:	3301      	adds	r3, #1
 800e21c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	d8c4      	bhi.n	800e1b0 <SD_write+0x164>
 800e226:	e002      	b.n	800e22e <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 800e228:	bf00      	nop
 800e22a:	e000      	b.n	800e22e <SD_write+0x1e2>
            break;
 800e22c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	429a      	cmp	r2, r3
 800e234:	d106      	bne.n	800e244 <SD_write+0x1f8>
 800e236:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <SD_write+0x1f8>
        res = RES_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 800e244:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3740      	adds	r7, #64	@ 0x40
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	24000c00 	.word	0x24000c00
 800e254:	e000ed00 	.word	0xe000ed00
 800e258:	24000a00 	.word	0x24000a00

0800e25c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08c      	sub	sp, #48	@ 0x30
 800e260:	af00      	add	r7, sp, #0
 800e262:	4603      	mov	r3, r0
 800e264:	603a      	str	r2, [r7, #0]
 800e266:	71fb      	strb	r3, [r7, #7]
 800e268:	460b      	mov	r3, r1
 800e26a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e272:	4b25      	ldr	r3, [pc, #148]	@ (800e308 <SD_ioctl+0xac>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	b2db      	uxtb	r3, r3
 800e278:	f003 0301 	and.w	r3, r3, #1
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <SD_ioctl+0x28>
 800e280:	2303      	movs	r3, #3
 800e282:	e03c      	b.n	800e2fe <SD_ioctl+0xa2>

  switch (cmd)
 800e284:	79bb      	ldrb	r3, [r7, #6]
 800e286:	2b03      	cmp	r3, #3
 800e288:	d834      	bhi.n	800e2f4 <SD_ioctl+0x98>
 800e28a:	a201      	add	r2, pc, #4	@ (adr r2, 800e290 <SD_ioctl+0x34>)
 800e28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2a9 	.word	0x0800e2a9
 800e298:	0800e2c1 	.word	0x0800e2c1
 800e29c:	0800e2db 	.word	0x0800e2db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e2a6:	e028      	b.n	800e2fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2a8:	f107 0308 	add.w	r3, r7, #8
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fd41 	bl	800dd34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e2b2:	6a3a      	ldr	r2, [r7, #32]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e2be:	e01c      	b.n	800e2fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fd35 	bl	800dd34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e2d8:	e00f      	b.n	800e2fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e2da:	f107 0308 	add.w	r3, r7, #8
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fd28 	bl	800dd34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e6:	0a5a      	lsrs	r2, r3, #9
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e2f2:	e002      	b.n	800e2fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e2f4:	2304      	movs	r3, #4
 800e2f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3730      	adds	r7, #48	@ 0x30
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	2400005d 	.word	0x2400005d

0800e30c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e310:	4b03      	ldr	r3, [pc, #12]	@ (800e320 <BSP_SD_WriteCpltCallback+0x14>)
 800e312:	2201      	movs	r2, #1
 800e314:	601a      	str	r2, [r3, #0]
}
 800e316:	bf00      	nop
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	24000c00 	.word	0x24000c00

0800e324 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e324:	b480      	push	{r7}
 800e326:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e328:	4b03      	ldr	r3, [pc, #12]	@ (800e338 <BSP_SD_ReadCpltCallback+0x14>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	601a      	str	r2, [r3, #0]
}
 800e32e:	bf00      	nop
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	24000c04 	.word	0x24000c04

0800e33c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	4603      	mov	r3, r0
 800e344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	4a08      	ldr	r2, [pc, #32]	@ (800e36c <disk_status+0x30>)
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4413      	add	r3, r2
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	79fa      	ldrb	r2, [r7, #7]
 800e354:	4905      	ldr	r1, [pc, #20]	@ (800e36c <disk_status+0x30>)
 800e356:	440a      	add	r2, r1
 800e358:	7a12      	ldrb	r2, [r2, #8]
 800e35a:	4610      	mov	r0, r2
 800e35c:	4798      	blx	r3
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	24000c30 	.word	0x24000c30

0800e370 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	4a0e      	ldr	r2, [pc, #56]	@ (800e3bc <disk_initialize+0x4c>)
 800e382:	5cd3      	ldrb	r3, [r2, r3]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d114      	bne.n	800e3b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	4a0c      	ldr	r2, [pc, #48]	@ (800e3bc <disk_initialize+0x4c>)
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	79fa      	ldrb	r2, [r7, #7]
 800e396:	4909      	ldr	r1, [pc, #36]	@ (800e3bc <disk_initialize+0x4c>)
 800e398:	440a      	add	r2, r1
 800e39a:	7a12      	ldrb	r2, [r2, #8]
 800e39c:	4610      	mov	r0, r2
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d103      	bne.n	800e3b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	4a03      	ldr	r2, [pc, #12]	@ (800e3bc <disk_initialize+0x4c>)
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	24000c30 	.word	0x24000c30

0800e3c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e3c0:	b590      	push	{r4, r7, lr}
 800e3c2:	b087      	sub	sp, #28
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	607a      	str	r2, [r7, #4]
 800e3ca:	603b      	str	r3, [r7, #0]
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e3fc <disk_read+0x3c>)
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	689c      	ldr	r4, [r3, #8]
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	4a07      	ldr	r2, [pc, #28]	@ (800e3fc <disk_read+0x3c>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	7a18      	ldrb	r0, [r3, #8]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	68b9      	ldr	r1, [r7, #8]
 800e3ea:	47a0      	blx	r4
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	371c      	adds	r7, #28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd90      	pop	{r4, r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	24000c30 	.word	0x24000c30

0800e400 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	60b9      	str	r1, [r7, #8]
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	4603      	mov	r3, r0
 800e40e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	4a0a      	ldr	r2, [pc, #40]	@ (800e43c <disk_write+0x3c>)
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	68dc      	ldr	r4, [r3, #12]
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	4a07      	ldr	r2, [pc, #28]	@ (800e43c <disk_write+0x3c>)
 800e420:	4413      	add	r3, r2
 800e422:	7a18      	ldrb	r0, [r3, #8]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	47a0      	blx	r4
 800e42c:	4603      	mov	r3, r0
 800e42e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e430:	7dfb      	ldrb	r3, [r7, #23]
}
 800e432:	4618      	mov	r0, r3
 800e434:	371c      	adds	r7, #28
 800e436:	46bd      	mov	sp, r7
 800e438:	bd90      	pop	{r4, r7, pc}
 800e43a:	bf00      	nop
 800e43c:	24000c30 	.word	0x24000c30

0800e440 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	4603      	mov	r3, r0
 800e448:	603a      	str	r2, [r7, #0]
 800e44a:	71fb      	strb	r3, [r7, #7]
 800e44c:	460b      	mov	r3, r1
 800e44e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	4a09      	ldr	r2, [pc, #36]	@ (800e478 <disk_ioctl+0x38>)
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	79fa      	ldrb	r2, [r7, #7]
 800e45e:	4906      	ldr	r1, [pc, #24]	@ (800e478 <disk_ioctl+0x38>)
 800e460:	440a      	add	r2, r1
 800e462:	7a10      	ldrb	r0, [r2, #8]
 800e464:	79b9      	ldrb	r1, [r7, #6]
 800e466:	683a      	ldr	r2, [r7, #0]
 800e468:	4798      	blx	r3
 800e46a:	4603      	mov	r3, r0
 800e46c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	24000c30 	.word	0x24000c30

0800e47c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3301      	adds	r3, #1
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e48c:	89fb      	ldrh	r3, [r7, #14]
 800e48e:	021b      	lsls	r3, r3, #8
 800e490:	b21a      	sxth	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	b21b      	sxth	r3, r3
 800e498:	4313      	orrs	r3, r2
 800e49a:	b21b      	sxth	r3, r3
 800e49c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e49e:	89fb      	ldrh	r3, [r7, #14]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3303      	adds	r3, #3
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	021b      	lsls	r3, r3, #8
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	3202      	adds	r2, #2
 800e4c4:	7812      	ldrb	r2, [r2, #0]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	021b      	lsls	r3, r3, #8
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	3201      	adds	r2, #1
 800e4d2:	7812      	ldrb	r2, [r2, #0]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	021b      	lsls	r3, r3, #8
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	7812      	ldrb	r2, [r2, #0]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b083      	sub	sp, #12
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	887a      	ldrh	r2, [r7, #2]
 800e506:	b2d2      	uxtb	r2, r2
 800e508:	701a      	strb	r2, [r3, #0]
 800e50a:	887b      	ldrh	r3, [r7, #2]
 800e50c:	0a1b      	lsrs	r3, r3, #8
 800e50e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	1c5a      	adds	r2, r3, #1
 800e514:	607a      	str	r2, [r7, #4]
 800e516:	887a      	ldrh	r2, [r7, #2]
 800e518:	b2d2      	uxtb	r2, r2
 800e51a:	701a      	strb	r2, [r3, #0]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	607a      	str	r2, [r7, #4]
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	0a1b      	lsrs	r3, r3, #8
 800e542:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	607a      	str	r2, [r7, #4]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	b2d2      	uxtb	r2, r2
 800e54e:	701a      	strb	r2, [r3, #0]
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	0a1b      	lsrs	r3, r3, #8
 800e554:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	b2d2      	uxtb	r2, r2
 800e560:	701a      	strb	r2, [r3, #0]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	607a      	str	r2, [r7, #4]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	b2d2      	uxtb	r2, r2
 800e572:	701a      	strb	r2, [r3, #0]
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e580:	b480      	push	{r7}
 800e582:	b087      	sub	sp, #28
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00d      	beq.n	800e5b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	1c53      	adds	r3, r2, #1
 800e59e:	613b      	str	r3, [r7, #16]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	1c59      	adds	r1, r3, #1
 800e5a4:	6179      	str	r1, [r7, #20]
 800e5a6:	7812      	ldrb	r2, [r2, #0]
 800e5a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	607b      	str	r3, [r7, #4]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1f1      	bne.n	800e59a <mem_cpy+0x1a>
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e5c2:	b480      	push	{r7}
 800e5c4:	b087      	sub	sp, #28
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	60f8      	str	r0, [r7, #12]
 800e5ca:	60b9      	str	r1, [r7, #8]
 800e5cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	617a      	str	r2, [r7, #20]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	b2d2      	uxtb	r2, r2
 800e5dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	607b      	str	r3, [r7, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1f3      	bne.n	800e5d2 <mem_set+0x10>
}
 800e5ea:	bf00      	nop
 800e5ec:	bf00      	nop
 800e5ee:	371c      	adds	r7, #28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e5f8:	b480      	push	{r7}
 800e5fa:	b089      	sub	sp, #36	@ 0x24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	61fb      	str	r3, [r7, #28]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	1c5a      	adds	r2, r3, #1
 800e614:	61fa      	str	r2, [r7, #28]
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	4619      	mov	r1, r3
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	61ba      	str	r2, [r7, #24]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	1acb      	subs	r3, r1, r3
 800e624:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3b01      	subs	r3, #1
 800e62a:	607b      	str	r3, [r7, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <mem_cmp+0x40>
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d0eb      	beq.n	800e610 <mem_cmp+0x18>

	return r;
 800e638:	697b      	ldr	r3, [r7, #20]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3724      	adds	r7, #36	@ 0x24
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e646:	b480      	push	{r7}
 800e648:	b083      	sub	sp, #12
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e650:	e002      	b.n	800e658 <chk_chr+0x12>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3301      	adds	r3, #1
 800e656:	607b      	str	r3, [r7, #4]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d005      	beq.n	800e66c <chk_chr+0x26>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	4293      	cmp	r3, r2
 800e66a:	d1f2      	bne.n	800e652 <chk_chr+0xc>
	return *str;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	781b      	ldrb	r3, [r3, #0]
}
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e686:	2300      	movs	r3, #0
 800e688:	60bb      	str	r3, [r7, #8]
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	e029      	b.n	800e6e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e690:	4a27      	ldr	r2, [pc, #156]	@ (800e730 <chk_lock+0xb4>)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	011b      	lsls	r3, r3, #4
 800e696:	4413      	add	r3, r2
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d01d      	beq.n	800e6da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e69e:	4a24      	ldr	r2, [pc, #144]	@ (800e730 <chk_lock+0xb4>)
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	011b      	lsls	r3, r3, #4
 800e6a4:	4413      	add	r3, r2
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d116      	bne.n	800e6de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6b0:	4a1f      	ldr	r2, [pc, #124]	@ (800e730 <chk_lock+0xb4>)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	011b      	lsls	r3, r3, #4
 800e6b6:	4413      	add	r3, r2
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d10c      	bne.n	800e6de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800e730 <chk_lock+0xb4>)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	011b      	lsls	r3, r3, #4
 800e6ca:	4413      	add	r3, r2
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d102      	bne.n	800e6de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6d8:	e007      	b.n	800e6ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d9d2      	bls.n	800e690 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d109      	bne.n	800e704 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <chk_lock+0x80>
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d101      	bne.n	800e700 <chk_lock+0x84>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	e010      	b.n	800e722 <chk_lock+0xa6>
 800e700:	2312      	movs	r3, #18
 800e702:	e00e      	b.n	800e722 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d108      	bne.n	800e71c <chk_lock+0xa0>
 800e70a:	4a09      	ldr	r2, [pc, #36]	@ (800e730 <chk_lock+0xb4>)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	011b      	lsls	r3, r3, #4
 800e710:	4413      	add	r3, r2
 800e712:	330c      	adds	r3, #12
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e71a:	d101      	bne.n	800e720 <chk_lock+0xa4>
 800e71c:	2310      	movs	r3, #16
 800e71e:	e000      	b.n	800e722 <chk_lock+0xa6>
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	24000c10 	.word	0x24000c10

0800e734 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e73a:	2300      	movs	r3, #0
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	e002      	b.n	800e746 <enq_lock+0x12>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3301      	adds	r3, #1
 800e744:	607b      	str	r3, [r7, #4]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d806      	bhi.n	800e75a <enq_lock+0x26>
 800e74c:	4a09      	ldr	r2, [pc, #36]	@ (800e774 <enq_lock+0x40>)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	011b      	lsls	r3, r3, #4
 800e752:	4413      	add	r3, r2
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1f2      	bne.n	800e740 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	bf14      	ite	ne
 800e760:	2301      	movne	r3, #1
 800e762:	2300      	moveq	r3, #0
 800e764:	b2db      	uxtb	r3, r3
}
 800e766:	4618      	mov	r0, r3
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	24000c10 	.word	0x24000c10

0800e778 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e782:	2300      	movs	r3, #0
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	e01f      	b.n	800e7c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e788:	4a41      	ldr	r2, [pc, #260]	@ (800e890 <inc_lock+0x118>)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	4413      	add	r3, r2
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	d113      	bne.n	800e7c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e79a:	4a3d      	ldr	r2, [pc, #244]	@ (800e890 <inc_lock+0x118>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	011b      	lsls	r3, r3, #4
 800e7a0:	4413      	add	r3, r2
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d109      	bne.n	800e7c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e7ae:	4a38      	ldr	r2, [pc, #224]	@ (800e890 <inc_lock+0x118>)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	011b      	lsls	r3, r3, #4
 800e7b4:	4413      	add	r3, r2
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d006      	beq.n	800e7d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d9dc      	bls.n	800e788 <inc_lock+0x10>
 800e7ce:	e000      	b.n	800e7d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e7d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b02      	cmp	r3, #2
 800e7d6:	d132      	bne.n	800e83e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e002      	b.n	800e7e4 <inc_lock+0x6c>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d806      	bhi.n	800e7f8 <inc_lock+0x80>
 800e7ea:	4a29      	ldr	r2, [pc, #164]	@ (800e890 <inc_lock+0x118>)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	011b      	lsls	r3, r3, #4
 800e7f0:	4413      	add	r3, r2
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1f2      	bne.n	800e7de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d101      	bne.n	800e802 <inc_lock+0x8a>
 800e7fe:	2300      	movs	r3, #0
 800e800:	e040      	b.n	800e884 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	4922      	ldr	r1, [pc, #136]	@ (800e890 <inc_lock+0x118>)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	440b      	add	r3, r1
 800e80e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	491e      	ldr	r1, [pc, #120]	@ (800e890 <inc_lock+0x118>)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	011b      	lsls	r3, r3, #4
 800e81a:	440b      	add	r3, r1
 800e81c:	3304      	adds	r3, #4
 800e81e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	695a      	ldr	r2, [r3, #20]
 800e824:	491a      	ldr	r1, [pc, #104]	@ (800e890 <inc_lock+0x118>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	011b      	lsls	r3, r3, #4
 800e82a:	440b      	add	r3, r1
 800e82c:	3308      	adds	r3, #8
 800e82e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e830:	4a17      	ldr	r2, [pc, #92]	@ (800e890 <inc_lock+0x118>)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	011b      	lsls	r3, r3, #4
 800e836:	4413      	add	r3, r2
 800e838:	330c      	adds	r3, #12
 800e83a:	2200      	movs	r2, #0
 800e83c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d009      	beq.n	800e858 <inc_lock+0xe0>
 800e844:	4a12      	ldr	r2, [pc, #72]	@ (800e890 <inc_lock+0x118>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	4413      	add	r3, r2
 800e84c:	330c      	adds	r3, #12
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <inc_lock+0xe0>
 800e854:	2300      	movs	r3, #0
 800e856:	e015      	b.n	800e884 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d108      	bne.n	800e870 <inc_lock+0xf8>
 800e85e:	4a0c      	ldr	r2, [pc, #48]	@ (800e890 <inc_lock+0x118>)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	011b      	lsls	r3, r3, #4
 800e864:	4413      	add	r3, r2
 800e866:	330c      	adds	r3, #12
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	3301      	adds	r3, #1
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	e001      	b.n	800e874 <inc_lock+0xfc>
 800e870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e874:	4906      	ldr	r1, [pc, #24]	@ (800e890 <inc_lock+0x118>)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	011b      	lsls	r3, r3, #4
 800e87a:	440b      	add	r3, r1
 800e87c:	330c      	adds	r3, #12
 800e87e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	3301      	adds	r3, #1
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	24000c10 	.word	0x24000c10

0800e894 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	607b      	str	r3, [r7, #4]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d825      	bhi.n	800e8f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e8a8:	4a17      	ldr	r2, [pc, #92]	@ (800e908 <dec_lock+0x74>)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	011b      	lsls	r3, r3, #4
 800e8ae:	4413      	add	r3, r2
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8b6:	89fb      	ldrh	r3, [r7, #14]
 800e8b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8bc:	d101      	bne.n	800e8c2 <dec_lock+0x2e>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e8c2:	89fb      	ldrh	r3, [r7, #14]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d002      	beq.n	800e8ce <dec_lock+0x3a>
 800e8c8:	89fb      	ldrh	r3, [r7, #14]
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e8ce:	4a0e      	ldr	r2, [pc, #56]	@ (800e908 <dec_lock+0x74>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	330c      	adds	r3, #12
 800e8d8:	89fa      	ldrh	r2, [r7, #14]
 800e8da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e8dc:	89fb      	ldrh	r3, [r7, #14]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d105      	bne.n	800e8ee <dec_lock+0x5a>
 800e8e2:	4a09      	ldr	r2, [pc, #36]	@ (800e908 <dec_lock+0x74>)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	011b      	lsls	r3, r3, #4
 800e8e8:	4413      	add	r3, r2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	737b      	strb	r3, [r7, #13]
 800e8f2:	e001      	b.n	800e8f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e8f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	24000c10 	.word	0x24000c10

0800e90c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	e010      	b.n	800e93c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e91a:	4a0d      	ldr	r2, [pc, #52]	@ (800e950 <clear_lock+0x44>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	4413      	add	r3, r2
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	429a      	cmp	r2, r3
 800e928:	d105      	bne.n	800e936 <clear_lock+0x2a>
 800e92a:	4a09      	ldr	r2, [pc, #36]	@ (800e950 <clear_lock+0x44>)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	011b      	lsls	r3, r3, #4
 800e930:	4413      	add	r3, r2
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	3301      	adds	r3, #1
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d9eb      	bls.n	800e91a <clear_lock+0xe>
	}
}
 800e942:	bf00      	nop
 800e944:	bf00      	nop
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	24000c10 	.word	0x24000c10

0800e954 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	78db      	ldrb	r3, [r3, #3]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d034      	beq.n	800e9d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7858      	ldrb	r0, [r3, #1]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e978:	2301      	movs	r3, #1
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	f7ff fd40 	bl	800e400 <disk_write>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e986:	2301      	movs	r3, #1
 800e988:	73fb      	strb	r3, [r7, #15]
 800e98a:	e022      	b.n	800e9d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	1ad2      	subs	r2, r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d217      	bcs.n	800e9d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	789b      	ldrb	r3, [r3, #2]
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	e010      	b.n	800e9cc <sync_window+0x78>
					wsect += fs->fsize;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7858      	ldrb	r0, [r3, #1]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9be:	2301      	movs	r3, #1
 800e9c0:	697a      	ldr	r2, [r7, #20]
 800e9c2:	f7ff fd1d 	bl	800e400 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d8eb      	bhi.n	800e9aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3718      	adds	r7, #24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d01b      	beq.n	800ea2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff ffad 	bl	800e954 <sync_window>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d113      	bne.n	800ea2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	7858      	ldrb	r0, [r3, #1]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea0e:	2301      	movs	r3, #1
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	f7ff fcd5 	bl	800e3c0 <disk_read>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7ff ff87 	bl	800e954 <sync_window>
 800ea46:	4603      	mov	r3, r0
 800ea48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d158      	bne.n	800eb02 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d148      	bne.n	800eaea <sync_fs+0xb2>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	791b      	ldrb	r3, [r3, #4]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d144      	bne.n	800eaea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3330      	adds	r3, #48	@ 0x30
 800ea64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea68:	2100      	movs	r1, #0
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fda9 	bl	800e5c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3330      	adds	r3, #48	@ 0x30
 800ea74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ea78:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff fd38 	bl	800e4f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3330      	adds	r3, #48	@ 0x30
 800ea86:	4921      	ldr	r1, [pc, #132]	@ (800eb0c <sync_fs+0xd4>)
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fd4d 	bl	800e528 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3330      	adds	r3, #48	@ 0x30
 800ea92:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ea96:	491e      	ldr	r1, [pc, #120]	@ (800eb10 <sync_fs+0xd8>)
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff fd45 	bl	800e528 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3330      	adds	r3, #48	@ 0x30
 800eaa2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7ff fd3b 	bl	800e528 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	3330      	adds	r3, #48	@ 0x30
 800eab6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7ff fd31 	bl	800e528 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	69db      	ldr	r3, [r3, #28]
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7858      	ldrb	r0, [r3, #1]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eade:	2301      	movs	r3, #1
 800eae0:	f7ff fc8e 	bl	800e400 <disk_write>
			fs->fsi_flag = 0;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	785b      	ldrb	r3, [r3, #1]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fca4 	bl	800e440 <disk_ioctl>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d001      	beq.n	800eb02 <sync_fs+0xca>
 800eafe:	2301      	movs	r3, #1
 800eb00:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	41615252 	.word	0x41615252
 800eb10:	61417272 	.word	0x61417272

0800eb14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	3b02      	subs	r3, #2
 800eb22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	695b      	ldr	r3, [r3, #20]
 800eb28:	3b02      	subs	r3, #2
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d301      	bcc.n	800eb34 <clust2sect+0x20>
 800eb30:	2300      	movs	r3, #0
 800eb32:	e008      	b.n	800eb46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	895b      	ldrh	r3, [r3, #10]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	fb03 f202 	mul.w	r2, r3, r2
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb44:	4413      	add	r3, r2
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d904      	bls.n	800eb72 <get_fat+0x20>
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d302      	bcc.n	800eb78 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eb72:	2301      	movs	r3, #1
 800eb74:	617b      	str	r3, [r7, #20]
 800eb76:	e08e      	b.n	800ec96 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb78:	f04f 33ff 	mov.w	r3, #4294967295
 800eb7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d061      	beq.n	800ec4a <get_fat+0xf8>
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	dc7b      	bgt.n	800ec82 <get_fat+0x130>
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d002      	beq.n	800eb94 <get_fat+0x42>
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d041      	beq.n	800ec16 <get_fat+0xc4>
 800eb92:	e076      	b.n	800ec82 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	60fb      	str	r3, [r7, #12]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	085b      	lsrs	r3, r3, #1
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	6a1a      	ldr	r2, [r3, #32]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	0a5b      	lsrs	r3, r3, #9
 800ebaa:	4413      	add	r3, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	6938      	ldr	r0, [r7, #16]
 800ebb0:	f7ff ff14 	bl	800e9dc <move_window>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d166      	bne.n	800ec88 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	60fa      	str	r2, [r7, #12]
 800ebc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	6a1a      	ldr	r2, [r3, #32]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	0a5b      	lsrs	r3, r3, #9
 800ebd6:	4413      	add	r3, r2
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6938      	ldr	r0, [r7, #16]
 800ebdc:	f7ff fefe 	bl	800e9dc <move_window>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d152      	bne.n	800ec8c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebf4:	021b      	lsls	r3, r3, #8
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <get_fat+0xba>
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	091b      	lsrs	r3, r3, #4
 800ec0a:	e002      	b.n	800ec12 <get_fat+0xc0>
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec12:	617b      	str	r3, [r7, #20]
			break;
 800ec14:	e03f      	b.n	800ec96 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	6a1a      	ldr	r2, [r3, #32]
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	0a1b      	lsrs	r3, r3, #8
 800ec1e:	4413      	add	r3, r2
 800ec20:	4619      	mov	r1, r3
 800ec22:	6938      	ldr	r0, [r7, #16]
 800ec24:	f7ff feda 	bl	800e9dc <move_window>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d130      	bne.n	800ec90 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ec3c:	4413      	add	r3, r2
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fc1c 	bl	800e47c <ld_word>
 800ec44:	4603      	mov	r3, r0
 800ec46:	617b      	str	r3, [r7, #20]
			break;
 800ec48:	e025      	b.n	800ec96 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	6a1a      	ldr	r2, [r3, #32]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	09db      	lsrs	r3, r3, #7
 800ec52:	4413      	add	r3, r2
 800ec54:	4619      	mov	r1, r3
 800ec56:	6938      	ldr	r0, [r7, #16]
 800ec58:	f7ff fec0 	bl	800e9dc <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d118      	bne.n	800ec94 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ec70:	4413      	add	r3, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fc1a 	bl	800e4ac <ld_dword>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ec7e:	617b      	str	r3, [r7, #20]
			break;
 800ec80:	e009      	b.n	800ec96 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ec82:	2301      	movs	r3, #1
 800ec84:	617b      	str	r3, [r7, #20]
 800ec86:	e006      	b.n	800ec96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec88:	bf00      	nop
 800ec8a:	e004      	b.n	800ec96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec8c:	bf00      	nop
 800ec8e:	e002      	b.n	800ec96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec90:	bf00      	nop
 800ec92:	e000      	b.n	800ec96 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec94:	bf00      	nop
		}
	}

	return val;
 800ec96:	697b      	ldr	r3, [r7, #20]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eca0:	b590      	push	{r4, r7, lr}
 800eca2:	b089      	sub	sp, #36	@ 0x24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ecac:	2302      	movs	r3, #2
 800ecae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	f240 80d9 	bls.w	800ee6a <put_fat+0x1ca>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	f080 80d3 	bcs.w	800ee6a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	f000 8096 	beq.w	800edfa <put_fat+0x15a>
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	f300 80cb 	bgt.w	800ee6a <put_fat+0x1ca>
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d002      	beq.n	800ecde <put_fat+0x3e>
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d06e      	beq.n	800edba <put_fat+0x11a>
 800ecdc:	e0c5      	b.n	800ee6a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	085b      	lsrs	r3, r3, #1
 800ece6:	69ba      	ldr	r2, [r7, #24]
 800ece8:	4413      	add	r3, r2
 800ecea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6a1a      	ldr	r2, [r3, #32]
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	0a5b      	lsrs	r3, r3, #9
 800ecf4:	4413      	add	r3, r2
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fe6f 	bl	800e9dc <move_window>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed02:	7ffb      	ldrb	r3, [r7, #31]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f040 80a9 	bne.w	800ee5c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	1c59      	adds	r1, r3, #1
 800ed14:	61b9      	str	r1, [r7, #24]
 800ed16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed1a:	4413      	add	r3, r2
 800ed1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00d      	beq.n	800ed44 <put_fat+0xa4>
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	b25b      	sxtb	r3, r3
 800ed2e:	f003 030f 	and.w	r3, r3, #15
 800ed32:	b25a      	sxtb	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	011b      	lsls	r3, r3, #4
 800ed3a:	b25b      	sxtb	r3, r3
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	b25b      	sxtb	r3, r3
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	e001      	b.n	800ed48 <put_fat+0xa8>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	697a      	ldr	r2, [r7, #20]
 800ed4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6a1a      	ldr	r2, [r3, #32]
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	0a5b      	lsrs	r3, r3, #9
 800ed5a:	4413      	add	r3, r2
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f7ff fe3c 	bl	800e9dc <move_window>
 800ed64:	4603      	mov	r3, r0
 800ed66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed68:	7ffb      	ldrb	r3, [r7, #31]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d178      	bne.n	800ee60 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed7a:	4413      	add	r3, r2
 800ed7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	f003 0301 	and.w	r3, r3, #1
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d003      	beq.n	800ed90 <put_fat+0xf0>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	091b      	lsrs	r3, r3, #4
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	e00e      	b.n	800edae <put_fat+0x10e>
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	b25b      	sxtb	r3, r3
 800ed96:	f023 030f 	bic.w	r3, r3, #15
 800ed9a:	b25a      	sxtb	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	0a1b      	lsrs	r3, r3, #8
 800eda0:	b25b      	sxtb	r3, r3
 800eda2:	f003 030f 	and.w	r3, r3, #15
 800eda6:	b25b      	sxtb	r3, r3
 800eda8:	4313      	orrs	r3, r2
 800edaa:	b25b      	sxtb	r3, r3
 800edac:	b2db      	uxtb	r3, r3
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2201      	movs	r2, #1
 800edb6:	70da      	strb	r2, [r3, #3]
			break;
 800edb8:	e057      	b.n	800ee6a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6a1a      	ldr	r2, [r3, #32]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	0a1b      	lsrs	r3, r3, #8
 800edc2:	4413      	add	r3, r2
 800edc4:	4619      	mov	r1, r3
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff fe08 	bl	800e9dc <move_window>
 800edcc:	4603      	mov	r3, r0
 800edce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edd0:	7ffb      	ldrb	r3, [r7, #31]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d146      	bne.n	800ee64 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	005b      	lsls	r3, r3, #1
 800ede0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ede4:	4413      	add	r3, r2
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	b292      	uxth	r2, r2
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff fb80 	bl	800e4f2 <st_word>
			fs->wflag = 1;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2201      	movs	r2, #1
 800edf6:	70da      	strb	r2, [r3, #3]
			break;
 800edf8:	e037      	b.n	800ee6a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6a1a      	ldr	r2, [r3, #32]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	09db      	lsrs	r3, r3, #7
 800ee02:	4413      	add	r3, r2
 800ee04:	4619      	mov	r1, r3
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7ff fde8 	bl	800e9dc <move_window>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee10:	7ffb      	ldrb	r3, [r7, #31]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d128      	bne.n	800ee68 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ee2a:	4413      	add	r3, r2
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fb3d 	bl	800e4ac <ld_dword>
 800ee32:	4603      	mov	r3, r0
 800ee34:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ee38:	4323      	orrs	r3, r4
 800ee3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ee4a:	4413      	add	r3, r2
 800ee4c:	6879      	ldr	r1, [r7, #4]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff fb6a 	bl	800e528 <st_dword>
			fs->wflag = 1;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2201      	movs	r2, #1
 800ee58:	70da      	strb	r2, [r3, #3]
			break;
 800ee5a:	e006      	b.n	800ee6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee5c:	bf00      	nop
 800ee5e:	e004      	b.n	800ee6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee60:	bf00      	nop
 800ee62:	e002      	b.n	800ee6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee64:	bf00      	nop
 800ee66:	e000      	b.n	800ee6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee68:	bf00      	nop
		}
	}
	return res;
 800ee6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3724      	adds	r7, #36	@ 0x24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd90      	pop	{r4, r7, pc}

0800ee74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ee80:	2300      	movs	r3, #0
 800ee82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d904      	bls.n	800ee9a <remove_chain+0x26>
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d301      	bcc.n	800ee9e <remove_chain+0x2a>
 800ee9a:	2302      	movs	r3, #2
 800ee9c:	e04b      	b.n	800ef36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00c      	beq.n	800eebe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eea4:	f04f 32ff 	mov.w	r2, #4294967295
 800eea8:	6879      	ldr	r1, [r7, #4]
 800eeaa:	69b8      	ldr	r0, [r7, #24]
 800eeac:	f7ff fef8 	bl	800eca0 <put_fat>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eeb4:	7ffb      	ldrb	r3, [r7, #31]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <remove_chain+0x4a>
 800eeba:	7ffb      	ldrb	r3, [r7, #31]
 800eebc:	e03b      	b.n	800ef36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eebe:	68b9      	ldr	r1, [r7, #8]
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff fe46 	bl	800eb52 <get_fat>
 800eec6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d031      	beq.n	800ef32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d101      	bne.n	800eed8 <remove_chain+0x64>
 800eed4:	2302      	movs	r3, #2
 800eed6:	e02e      	b.n	800ef36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d101      	bne.n	800eee4 <remove_chain+0x70>
 800eee0:	2301      	movs	r3, #1
 800eee2:	e028      	b.n	800ef36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eee4:	2200      	movs	r2, #0
 800eee6:	68b9      	ldr	r1, [r7, #8]
 800eee8:	69b8      	ldr	r0, [r7, #24]
 800eeea:	f7ff fed9 	bl	800eca0 <put_fat>
 800eeee:	4603      	mov	r3, r0
 800eef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eef2:	7ffb      	ldrb	r3, [r7, #31]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d001      	beq.n	800eefc <remove_chain+0x88>
 800eef8:	7ffb      	ldrb	r3, [r7, #31]
 800eefa:	e01c      	b.n	800ef36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	691a      	ldr	r2, [r3, #16]
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	3b02      	subs	r3, #2
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d20b      	bcs.n	800ef22 <remove_chain+0xae>
			fs->free_clst++;
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	791b      	ldrb	r3, [r3, #4]
 800ef18:	f043 0301 	orr.w	r3, r3, #1
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	695b      	ldr	r3, [r3, #20]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d3c6      	bcc.n	800eebe <remove_chain+0x4a>
 800ef30:	e000      	b.n	800ef34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b088      	sub	sp, #32
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10d      	bne.n	800ef70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d004      	beq.n	800ef6a <create_chain+0x2c>
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d31b      	bcc.n	800efa2 <create_chain+0x64>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	61bb      	str	r3, [r7, #24]
 800ef6e:	e018      	b.n	800efa2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff fded 	bl	800eb52 <get_fat>
 800ef78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d801      	bhi.n	800ef84 <create_chain+0x46>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e070      	b.n	800f066 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d101      	bne.n	800ef90 <create_chain+0x52>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	e06a      	b.n	800f066 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d201      	bcs.n	800ef9e <create_chain+0x60>
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	e063      	b.n	800f066 <create_chain+0x128>
		scl = clst;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	3301      	adds	r3, #1
 800efaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	695b      	ldr	r3, [r3, #20]
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d307      	bcc.n	800efc6 <create_chain+0x88>
				ncl = 2;
 800efb6:	2302      	movs	r3, #2
 800efb8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800efba:	69fa      	ldr	r2, [r7, #28]
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d901      	bls.n	800efc6 <create_chain+0x88>
 800efc2:	2300      	movs	r3, #0
 800efc4:	e04f      	b.n	800f066 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800efc6:	69f9      	ldr	r1, [r7, #28]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7ff fdc2 	bl	800eb52 <get_fat>
 800efce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00e      	beq.n	800eff4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d003      	beq.n	800efe4 <create_chain+0xa6>
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe2:	d101      	bne.n	800efe8 <create_chain+0xaa>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	e03e      	b.n	800f066 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800efe8:	69fa      	ldr	r2, [r7, #28]
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	429a      	cmp	r2, r3
 800efee:	d1da      	bne.n	800efa6 <create_chain+0x68>
 800eff0:	2300      	movs	r3, #0
 800eff2:	e038      	b.n	800f066 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eff4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eff6:	f04f 32ff 	mov.w	r2, #4294967295
 800effa:	69f9      	ldr	r1, [r7, #28]
 800effc:	6938      	ldr	r0, [r7, #16]
 800effe:	f7ff fe4f 	bl	800eca0 <put_fat>
 800f002:	4603      	mov	r3, r0
 800f004:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f006:	7dfb      	ldrb	r3, [r7, #23]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d109      	bne.n	800f020 <create_chain+0xe2>
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d006      	beq.n	800f020 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	6839      	ldr	r1, [r7, #0]
 800f016:	6938      	ldr	r0, [r7, #16]
 800f018:	f7ff fe42 	bl	800eca0 <put_fat>
 800f01c:	4603      	mov	r3, r0
 800f01e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f020:	7dfb      	ldrb	r3, [r7, #23]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d116      	bne.n	800f054 <create_chain+0x116>
		fs->last_clst = ncl;
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	691a      	ldr	r2, [r3, #16]
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	695b      	ldr	r3, [r3, #20]
 800f034:	3b02      	subs	r3, #2
 800f036:	429a      	cmp	r2, r3
 800f038:	d804      	bhi.n	800f044 <create_chain+0x106>
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	1e5a      	subs	r2, r3, #1
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	791b      	ldrb	r3, [r3, #4]
 800f048:	f043 0301 	orr.w	r3, r3, #1
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	711a      	strb	r2, [r3, #4]
 800f052:	e007      	b.n	800f064 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d102      	bne.n	800f060 <create_chain+0x122>
 800f05a:	f04f 33ff 	mov.w	r3, #4294967295
 800f05e:	e000      	b.n	800f062 <create_chain+0x124>
 800f060:	2301      	movs	r3, #1
 800f062:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f064:	69fb      	ldr	r3, [r7, #28]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3720      	adds	r7, #32
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f06e:	b480      	push	{r7}
 800f070:	b087      	sub	sp, #28
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f082:	3304      	adds	r3, #4
 800f084:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	0a5b      	lsrs	r3, r3, #9
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	8952      	ldrh	r2, [r2, #10]
 800f08e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f092:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	613a      	str	r2, [r7, #16]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <clmt_clust+0x3a>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	e010      	b.n	800f0ca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f0a8:	697a      	ldr	r2, [r7, #20]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d307      	bcc.n	800f0c0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	1ad3      	subs	r3, r2, r3
 800f0b6:	617b      	str	r3, [r7, #20]
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0be:	e7e9      	b.n	800f094 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f0c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	4413      	add	r3, r2
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr

0800f0d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b086      	sub	sp, #24
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f0ec:	d204      	bcs.n	800f0f8 <dir_sdi+0x22>
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	f003 031f 	and.w	r3, r3, #31
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <dir_sdi+0x26>
		return FR_INT_ERR;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	e063      	b.n	800f1c4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <dir_sdi+0x46>
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	2b02      	cmp	r3, #2
 800f114:	d902      	bls.n	800f11c <dir_sdi+0x46>
		clst = fs->dirbase;
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10c      	bne.n	800f13c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	095b      	lsrs	r3, r3, #5
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	8912      	ldrh	r2, [r2, #8]
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d301      	bcc.n	800f132 <dir_sdi+0x5c>
 800f12e:	2302      	movs	r3, #2
 800f130:	e048      	b.n	800f1c4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	61da      	str	r2, [r3, #28]
 800f13a:	e029      	b.n	800f190 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	895b      	ldrh	r3, [r3, #10]
 800f140:	025b      	lsls	r3, r3, #9
 800f142:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f144:	e019      	b.n	800f17a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6979      	ldr	r1, [r7, #20]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7ff fd01 	bl	800eb52 <get_fat>
 800f150:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f158:	d101      	bne.n	800f15e <dir_sdi+0x88>
 800f15a:	2301      	movs	r3, #1
 800f15c:	e032      	b.n	800f1c4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d904      	bls.n	800f16e <dir_sdi+0x98>
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d301      	bcc.n	800f172 <dir_sdi+0x9c>
 800f16e:	2302      	movs	r3, #2
 800f170:	e028      	b.n	800f1c4 <dir_sdi+0xee>
			ofs -= csz;
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d2e1      	bcs.n	800f146 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f182:	6979      	ldr	r1, [r7, #20]
 800f184:	6938      	ldr	r0, [r7, #16]
 800f186:	f7ff fcc5 	bl	800eb14 <clust2sect>
 800f18a:	4602      	mov	r2, r0
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d101      	bne.n	800f1a2 <dir_sdi+0xcc>
 800f19e:	2302      	movs	r3, #2
 800f1a0:	e010      	b.n	800f1c4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	69da      	ldr	r2, [r3, #28]
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	0a5b      	lsrs	r3, r3, #9
 800f1aa:	441a      	add	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1bc:	441a      	add	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b086      	sub	sp, #24
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	3320      	adds	r3, #32
 800f1e2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	69db      	ldr	r3, [r3, #28]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d003      	beq.n	800f1f4 <dir_next+0x28>
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f1f2:	d301      	bcc.n	800f1f8 <dir_next+0x2c>
 800f1f4:	2304      	movs	r3, #4
 800f1f6:	e0aa      	b.n	800f34e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f040 8098 	bne.w	800f334 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	69db      	ldr	r3, [r3, #28]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10b      	bne.n	800f22e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	095b      	lsrs	r3, r3, #5
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	8912      	ldrh	r2, [r2, #8]
 800f21e:	4293      	cmp	r3, r2
 800f220:	f0c0 8088 	bcc.w	800f334 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	61da      	str	r2, [r3, #28]
 800f22a:	2304      	movs	r3, #4
 800f22c:	e08f      	b.n	800f34e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	0a5b      	lsrs	r3, r3, #9
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	8952      	ldrh	r2, [r2, #10]
 800f236:	3a01      	subs	r2, #1
 800f238:	4013      	ands	r3, r2
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d17a      	bne.n	800f334 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	4619      	mov	r1, r3
 800f246:	4610      	mov	r0, r2
 800f248:	f7ff fc83 	bl	800eb52 <get_fat>
 800f24c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d801      	bhi.n	800f258 <dir_next+0x8c>
 800f254:	2302      	movs	r3, #2
 800f256:	e07a      	b.n	800f34e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25e:	d101      	bne.n	800f264 <dir_next+0x98>
 800f260:	2301      	movs	r3, #1
 800f262:	e074      	b.n	800f34e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d358      	bcc.n	800f320 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d104      	bne.n	800f27e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	61da      	str	r2, [r3, #28]
 800f27a:	2304      	movs	r3, #4
 800f27c:	e067      	b.n	800f34e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	4619      	mov	r1, r3
 800f286:	4610      	mov	r0, r2
 800f288:	f7ff fe59 	bl	800ef3e <create_chain>
 800f28c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <dir_next+0xcc>
 800f294:	2307      	movs	r3, #7
 800f296:	e05a      	b.n	800f34e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <dir_next+0xd6>
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e055      	b.n	800f34e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a8:	d101      	bne.n	800f2ae <dir_next+0xe2>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e04f      	b.n	800f34e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f7ff fb50 	bl	800e954 <sync_window>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <dir_next+0xf2>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e047      	b.n	800f34e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3330      	adds	r3, #48	@ 0x30
 800f2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff f97a 	bl	800e5c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	613b      	str	r3, [r7, #16]
 800f2d2:	6979      	ldr	r1, [r7, #20]
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f7ff fc1d 	bl	800eb14 <clust2sect>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f2e0:	e012      	b.n	800f308 <dir_next+0x13c>
						fs->wflag = 1;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f7ff fb33 	bl	800e954 <sync_window>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <dir_next+0x12c>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e02a      	b.n	800f34e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	613b      	str	r3, [r7, #16]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	895b      	ldrh	r3, [r3, #10]
 800f30c:	461a      	mov	r2, r3
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	4293      	cmp	r3, r2
 800f312:	d3e6      	bcc.n	800f2e2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	1ad2      	subs	r2, r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	697a      	ldr	r2, [r7, #20]
 800f324:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f326:	6979      	ldr	r1, [r7, #20]
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f7ff fbf3 	bl	800eb14 <clust2sect>
 800f32e:	4602      	mov	r2, r0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f346:	441a      	add	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f34c:	2300      	movs	r3, #0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3718      	adds	r7, #24
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b086      	sub	sp, #24
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f366:	2100      	movs	r1, #0
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff feb4 	bl	800f0d6 <dir_sdi>
 800f36e:	4603      	mov	r3, r0
 800f370:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d12b      	bne.n	800f3d0 <dir_alloc+0x7a>
		n = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	69db      	ldr	r3, [r3, #28]
 800f380:	4619      	mov	r1, r3
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff fb2a 	bl	800e9dc <move_window>
 800f388:	4603      	mov	r3, r0
 800f38a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f38c:	7dfb      	ldrb	r3, [r7, #23]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d11d      	bne.n	800f3ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2be5      	cmp	r3, #229	@ 0xe5
 800f39a:	d004      	beq.n	800f3a6 <dir_alloc+0x50>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a1b      	ldr	r3, [r3, #32]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d107      	bne.n	800f3b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	613b      	str	r3, [r7, #16]
 800f3ac:	693a      	ldr	r2, [r7, #16]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d102      	bne.n	800f3ba <dir_alloc+0x64>
 800f3b4:	e00c      	b.n	800f3d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f7ff ff05 	bl	800f1cc <dir_next>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f3c6:	7dfb      	ldrb	r3, [r7, #23]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0d7      	beq.n	800f37c <dir_alloc+0x26>
 800f3cc:	e000      	b.n	800f3d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f3ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d101      	bne.n	800f3da <dir_alloc+0x84>
 800f3d6:	2307      	movs	r3, #7
 800f3d8:	75fb      	strb	r3, [r7, #23]
	return res;
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	331a      	adds	r3, #26
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff f842 	bl	800e47c <ld_word>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b03      	cmp	r3, #3
 800f402:	d109      	bne.n	800f418 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	3314      	adds	r3, #20
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff f837 	bl	800e47c <ld_word>
 800f40e:	4603      	mov	r3, r0
 800f410:	041b      	lsls	r3, r3, #16
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	4313      	orrs	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f418:	68fb      	ldr	r3, [r7, #12]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b084      	sub	sp, #16
 800f426:	af00      	add	r7, sp, #0
 800f428:	60f8      	str	r0, [r7, #12]
 800f42a:	60b9      	str	r1, [r7, #8]
 800f42c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	331a      	adds	r3, #26
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	b292      	uxth	r2, r2
 800f436:	4611      	mov	r1, r2
 800f438:	4618      	mov	r0, r3
 800f43a:	f7ff f85a 	bl	800e4f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	2b03      	cmp	r3, #3
 800f444:	d109      	bne.n	800f45a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	f103 0214 	add.w	r2, r3, #20
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	0c1b      	lsrs	r3, r3, #16
 800f450:	b29b      	uxth	r3, r3
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7ff f84c 	bl	800e4f2 <st_word>
	}
}
 800f45a:	bf00      	nop
 800f45c:	3710      	adds	r7, #16
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b086      	sub	sp, #24
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f470:	2100      	movs	r1, #0
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7ff fe2f 	bl	800f0d6 <dir_sdi>
 800f478:	4603      	mov	r3, r0
 800f47a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f47c:	7dfb      	ldrb	r3, [r7, #23]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d001      	beq.n	800f486 <dir_find+0x24>
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	e03e      	b.n	800f504 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	4619      	mov	r1, r3
 800f48c:	6938      	ldr	r0, [r7, #16]
 800f48e:	f7ff faa5 	bl	800e9dc <move_window>
 800f492:	4603      	mov	r3, r0
 800f494:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d12f      	bne.n	800f4fc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6a1b      	ldr	r3, [r3, #32]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <dir_find+0x4e>
 800f4aa:	2304      	movs	r3, #4
 800f4ac:	75fb      	strb	r3, [r7, #23]
 800f4ae:	e028      	b.n	800f502 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	330b      	adds	r3, #11
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	330b      	adds	r3, #11
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 0308 	and.w	r3, r3, #8
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10a      	bne.n	800f4e8 <dir_find+0x86>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a18      	ldr	r0, [r3, #32]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	3324      	adds	r3, #36	@ 0x24
 800f4da:	220b      	movs	r2, #11
 800f4dc:	4619      	mov	r1, r3
 800f4de:	f7ff f88b 	bl	800e5f8 <mem_cmp>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00b      	beq.n	800f500 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff fe6e 	bl	800f1cc <dir_next>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d0c5      	beq.n	800f486 <dir_find+0x24>
 800f4fa:	e002      	b.n	800f502 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f4fc:	bf00      	nop
 800f4fe:	e000      	b.n	800f502 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f500:	bf00      	nop

	return res;
 800f502:	7dfb      	ldrb	r3, [r7, #23]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f51a:	2101      	movs	r1, #1
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff ff1a 	bl	800f356 <dir_alloc>
 800f522:	4603      	mov	r3, r0
 800f524:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d11c      	bne.n	800f566 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	4619      	mov	r1, r3
 800f532:	68b8      	ldr	r0, [r7, #8]
 800f534:	f7ff fa52 	bl	800e9dc <move_window>
 800f538:	4603      	mov	r3, r0
 800f53a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d111      	bne.n	800f566 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	2220      	movs	r2, #32
 800f548:	2100      	movs	r1, #0
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7ff f839 	bl	800e5c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a18      	ldr	r0, [r3, #32]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3324      	adds	r3, #36	@ 0x24
 800f558:	220b      	movs	r2, #11
 800f55a:	4619      	mov	r1, r3
 800f55c:	f7ff f810 	bl	800e580 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	2201      	movs	r2, #1
 800f564:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f566:	7bfb      	ldrb	r3, [r7, #15]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b088      	sub	sp, #32
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3324      	adds	r3, #36	@ 0x24
 800f584:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f586:	220b      	movs	r2, #11
 800f588:	2120      	movs	r1, #32
 800f58a:	68b8      	ldr	r0, [r7, #8]
 800f58c:	f7ff f819 	bl	800e5c2 <mem_set>
	si = i = 0; ni = 8;
 800f590:	2300      	movs	r3, #0
 800f592:	613b      	str	r3, [r7, #16]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	2308      	movs	r3, #8
 800f59a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	61fa      	str	r2, [r7, #28]
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f5aa:	7efb      	ldrb	r3, [r7, #27]
 800f5ac:	2b20      	cmp	r3, #32
 800f5ae:	d94e      	bls.n	800f64e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f5b0:	7efb      	ldrb	r3, [r7, #27]
 800f5b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800f5b4:	d006      	beq.n	800f5c4 <create_name+0x54>
 800f5b6:	7efb      	ldrb	r3, [r7, #27]
 800f5b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f5ba:	d110      	bne.n	800f5de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5bc:	e002      	b.n	800f5c4 <create_name+0x54>
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	61fb      	str	r3, [r7, #28]
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800f5ce:	d0f6      	beq.n	800f5be <create_name+0x4e>
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f5da:	d0f0      	beq.n	800f5be <create_name+0x4e>
			break;
 800f5dc:	e038      	b.n	800f650 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f5de:	7efb      	ldrb	r3, [r7, #27]
 800f5e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5e2:	d003      	beq.n	800f5ec <create_name+0x7c>
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d30c      	bcc.n	800f606 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	2b0b      	cmp	r3, #11
 800f5f0:	d002      	beq.n	800f5f8 <create_name+0x88>
 800f5f2:	7efb      	ldrb	r3, [r7, #27]
 800f5f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5f6:	d001      	beq.n	800f5fc <create_name+0x8c>
 800f5f8:	2306      	movs	r3, #6
 800f5fa:	e044      	b.n	800f686 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f5fc:	2308      	movs	r3, #8
 800f5fe:	613b      	str	r3, [r7, #16]
 800f600:	230b      	movs	r3, #11
 800f602:	617b      	str	r3, [r7, #20]
			continue;
 800f604:	e022      	b.n	800f64c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f606:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	da04      	bge.n	800f618 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f60e:	7efb      	ldrb	r3, [r7, #27]
 800f610:	3b80      	subs	r3, #128	@ 0x80
 800f612:	4a1f      	ldr	r2, [pc, #124]	@ (800f690 <create_name+0x120>)
 800f614:	5cd3      	ldrb	r3, [r2, r3]
 800f616:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f618:	7efb      	ldrb	r3, [r7, #27]
 800f61a:	4619      	mov	r1, r3
 800f61c:	481d      	ldr	r0, [pc, #116]	@ (800f694 <create_name+0x124>)
 800f61e:	f7ff f812 	bl	800e646 <chk_chr>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <create_name+0xbc>
 800f628:	2306      	movs	r3, #6
 800f62a:	e02c      	b.n	800f686 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f62c:	7efb      	ldrb	r3, [r7, #27]
 800f62e:	2b60      	cmp	r3, #96	@ 0x60
 800f630:	d905      	bls.n	800f63e <create_name+0xce>
 800f632:	7efb      	ldrb	r3, [r7, #27]
 800f634:	2b7a      	cmp	r3, #122	@ 0x7a
 800f636:	d802      	bhi.n	800f63e <create_name+0xce>
 800f638:	7efb      	ldrb	r3, [r7, #27]
 800f63a:	3b20      	subs	r3, #32
 800f63c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	613a      	str	r2, [r7, #16]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	4413      	add	r3, r2
 800f648:	7efa      	ldrb	r2, [r7, #27]
 800f64a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f64c:	e7a6      	b.n	800f59c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f64e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	441a      	add	r2, r3
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <create_name+0xf4>
 800f660:	2306      	movs	r3, #6
 800f662:	e010      	b.n	800f686 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	2be5      	cmp	r3, #229	@ 0xe5
 800f66a:	d102      	bne.n	800f672 <create_name+0x102>
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2205      	movs	r2, #5
 800f670:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f672:	7efb      	ldrb	r3, [r7, #27]
 800f674:	2b20      	cmp	r3, #32
 800f676:	d801      	bhi.n	800f67c <create_name+0x10c>
 800f678:	2204      	movs	r2, #4
 800f67a:	e000      	b.n	800f67e <create_name+0x10e>
 800f67c:	2200      	movs	r2, #0
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	330b      	adds	r3, #11
 800f682:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f684:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	08011e8c 	.word	0x08011e8c
 800f694:	08011d94 	.word	0x08011d94

0800f698 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b086      	sub	sp, #24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f6ac:	e002      	b.n	800f6b4 <follow_path+0x1c>
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f6ba:	d0f8      	beq.n	800f6ae <follow_path+0x16>
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800f6c2:	d0f4      	beq.n	800f6ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b1f      	cmp	r3, #31
 800f6d0:	d80a      	bhi.n	800f6e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2280      	movs	r2, #128	@ 0x80
 800f6d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f6da:	2100      	movs	r1, #0
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff fcfa 	bl	800f0d6 <dir_sdi>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	75fb      	strb	r3, [r7, #23]
 800f6e6:	e043      	b.n	800f770 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f6e8:	463b      	mov	r3, r7
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ff3f 	bl	800f570 <create_name>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d134      	bne.n	800f766 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff feb0 	bl	800f462 <dir_find>
 800f702:	4603      	mov	r3, r0
 800f704:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f70c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00a      	beq.n	800f72a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f714:	7dfb      	ldrb	r3, [r7, #23]
 800f716:	2b04      	cmp	r3, #4
 800f718:	d127      	bne.n	800f76a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f71a:	7afb      	ldrb	r3, [r7, #11]
 800f71c:	f003 0304 	and.w	r3, r3, #4
 800f720:	2b00      	cmp	r3, #0
 800f722:	d122      	bne.n	800f76a <follow_path+0xd2>
 800f724:	2305      	movs	r3, #5
 800f726:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f728:	e01f      	b.n	800f76a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f72a:	7afb      	ldrb	r3, [r7, #11]
 800f72c:	f003 0304 	and.w	r3, r3, #4
 800f730:	2b00      	cmp	r3, #0
 800f732:	d11c      	bne.n	800f76e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	799b      	ldrb	r3, [r3, #6]
 800f738:	f003 0310 	and.w	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f740:	2305      	movs	r3, #5
 800f742:	75fb      	strb	r3, [r7, #23]
 800f744:	e014      	b.n	800f770 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	695b      	ldr	r3, [r3, #20]
 800f750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f754:	4413      	add	r3, r2
 800f756:	4619      	mov	r1, r3
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7ff fe43 	bl	800f3e4 <ld_clust>
 800f75e:	4602      	mov	r2, r0
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f764:	e7c0      	b.n	800f6e8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f766:	bf00      	nop
 800f768:	e002      	b.n	800f770 <follow_path+0xd8>
				break;
 800f76a:	bf00      	nop
 800f76c:	e000      	b.n	800f770 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f76e:	bf00      	nop
			}
		}
	}

	return res;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b087      	sub	sp, #28
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f782:	f04f 33ff 	mov.w	r3, #4294967295
 800f786:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d031      	beq.n	800f7f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	617b      	str	r3, [r7, #20]
 800f796:	e002      	b.n	800f79e <get_ldnumber+0x24>
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	3301      	adds	r3, #1
 800f79c:	617b      	str	r3, [r7, #20]
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b20      	cmp	r3, #32
 800f7a4:	d903      	bls.n	800f7ae <get_ldnumber+0x34>
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800f7ac:	d1f4      	bne.n	800f798 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f7b4:	d11c      	bne.n	800f7f0 <get_ldnumber+0x76>
			tp = *path;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	60fa      	str	r2, [r7, #12]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	3b30      	subs	r3, #48	@ 0x30
 800f7c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2b09      	cmp	r3, #9
 800f7cc:	d80e      	bhi.n	800f7ec <get_ldnumber+0x72>
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d10a      	bne.n	800f7ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d107      	bne.n	800f7ec <get_ldnumber+0x72>
					vol = (int)i;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	697a      	ldr	r2, [r7, #20]
 800f7ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	e002      	b.n	800f7f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f7f4:	693b      	ldr	r3, [r7, #16]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
	...

0800f804 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	70da      	strb	r2, [r3, #3]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f04f 32ff 	mov.w	r2, #4294967295
 800f81a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff f8dc 	bl	800e9dc <move_window>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <check_fs+0x2a>
 800f82a:	2304      	movs	r3, #4
 800f82c:	e038      	b.n	800f8a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	3330      	adds	r3, #48	@ 0x30
 800f832:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fe20 	bl	800e47c <ld_word>
 800f83c:	4603      	mov	r3, r0
 800f83e:	461a      	mov	r2, r3
 800f840:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f844:	429a      	cmp	r2, r3
 800f846:	d001      	beq.n	800f84c <check_fs+0x48>
 800f848:	2303      	movs	r3, #3
 800f84a:	e029      	b.n	800f8a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f852:	2be9      	cmp	r3, #233	@ 0xe9
 800f854:	d009      	beq.n	800f86a <check_fs+0x66>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f85c:	2beb      	cmp	r3, #235	@ 0xeb
 800f85e:	d11e      	bne.n	800f89e <check_fs+0x9a>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f866:	2b90      	cmp	r3, #144	@ 0x90
 800f868:	d119      	bne.n	800f89e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3330      	adds	r3, #48	@ 0x30
 800f86e:	3336      	adds	r3, #54	@ 0x36
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe fe1b 	bl	800e4ac <ld_dword>
 800f876:	4603      	mov	r3, r0
 800f878:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f87c:	4a0a      	ldr	r2, [pc, #40]	@ (800f8a8 <check_fs+0xa4>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d101      	bne.n	800f886 <check_fs+0x82>
 800f882:	2300      	movs	r3, #0
 800f884:	e00c      	b.n	800f8a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3330      	adds	r3, #48	@ 0x30
 800f88a:	3352      	adds	r3, #82	@ 0x52
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fe fe0d 	bl	800e4ac <ld_dword>
 800f892:	4603      	mov	r3, r0
 800f894:	4a05      	ldr	r2, [pc, #20]	@ (800f8ac <check_fs+0xa8>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d101      	bne.n	800f89e <check_fs+0x9a>
 800f89a:	2300      	movs	r3, #0
 800f89c:	e000      	b.n	800f8a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f89e:	2302      	movs	r3, #2
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	00544146 	.word	0x00544146
 800f8ac:	33544146 	.word	0x33544146

0800f8b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b096      	sub	sp, #88	@ 0x58
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7ff ff58 	bl	800f77a <get_ldnumber>
 800f8ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	da01      	bge.n	800f8d6 <find_volume+0x26>
 800f8d2:	230b      	movs	r3, #11
 800f8d4:	e22d      	b.n	800fd32 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f8d6:	4aa1      	ldr	r2, [pc, #644]	@ (800fb5c <find_volume+0x2ac>)
 800f8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8de:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d101      	bne.n	800f8ea <find_volume+0x3a>
 800f8e6:	230c      	movs	r3, #12
 800f8e8:	e223      	b.n	800fd32 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f8ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	f023 0301 	bic.w	r3, r3, #1
 800f8f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d01a      	beq.n	800f936 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f902:	785b      	ldrb	r3, [r3, #1]
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fd19 	bl	800e33c <disk_status>
 800f90a:	4603      	mov	r3, r0
 800f90c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f910:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f914:	f003 0301 	and.w	r3, r3, #1
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10c      	bne.n	800f936 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d007      	beq.n	800f932 <find_volume+0x82>
 800f922:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f92e:	230a      	movs	r3, #10
 800f930:	e1ff      	b.n	800fd32 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f932:	2300      	movs	r3, #0
 800f934:	e1fd      	b.n	800fd32 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f938:	2200      	movs	r2, #0
 800f93a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f942:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f946:	785b      	ldrb	r3, [r3, #1]
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fe fd11 	bl	800e370 <disk_initialize>
 800f94e:	4603      	mov	r3, r0
 800f950:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f958:	f003 0301 	and.w	r3, r3, #1
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f960:	2303      	movs	r3, #3
 800f962:	e1e6      	b.n	800fd32 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d007      	beq.n	800f97a <find_volume+0xca>
 800f96a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f96e:	f003 0304 	and.w	r3, r3, #4
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f976:	230a      	movs	r3, #10
 800f978:	e1db      	b.n	800fd32 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f97a:	2300      	movs	r3, #0
 800f97c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f97e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f980:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f982:	f7ff ff3f 	bl	800f804 <check_fs>
 800f986:	4603      	mov	r3, r0
 800f988:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f98c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f990:	2b02      	cmp	r3, #2
 800f992:	d149      	bne.n	800fa28 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f994:	2300      	movs	r3, #0
 800f996:	643b      	str	r3, [r7, #64]	@ 0x40
 800f998:	e01e      	b.n	800f9d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9a2:	011b      	lsls	r3, r3, #4
 800f9a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f9a8:	4413      	add	r3, r2
 800f9aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d006      	beq.n	800f9c4 <find_volume+0x114>
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe fd76 	bl	800e4ac <ld_dword>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	e000      	b.n	800f9c6 <find_volume+0x116>
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	3358      	adds	r3, #88	@ 0x58
 800f9cc:	443b      	add	r3, r7
 800f9ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d9dd      	bls.n	800f99a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f9de:	2300      	movs	r3, #0
 800f9e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d002      	beq.n	800f9ee <find_volume+0x13e>
 800f9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	3358      	adds	r3, #88	@ 0x58
 800f9f4:	443b      	add	r3, r7
 800f9f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f9fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d005      	beq.n	800fa0e <find_volume+0x15e>
 800fa02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa06:	f7ff fefd 	bl	800f804 <check_fs>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	e000      	b.n	800fa10 <find_volume+0x160>
 800fa0e:	2303      	movs	r3, #3
 800fa10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fa14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d905      	bls.n	800fa28 <find_volume+0x178>
 800fa1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa1e:	3301      	adds	r3, #1
 800fa20:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa24:	2b03      	cmp	r3, #3
 800fa26:	d9e2      	bls.n	800f9ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fa28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa2c:	2b04      	cmp	r3, #4
 800fa2e:	d101      	bne.n	800fa34 <find_volume+0x184>
 800fa30:	2301      	movs	r3, #1
 800fa32:	e17e      	b.n	800fd32 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fa34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d901      	bls.n	800fa40 <find_volume+0x190>
 800fa3c:	230d      	movs	r3, #13
 800fa3e:	e178      	b.n	800fd32 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa42:	3330      	adds	r3, #48	@ 0x30
 800fa44:	330b      	adds	r3, #11
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fe fd18 	bl	800e47c <ld_word>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa52:	d001      	beq.n	800fa58 <find_volume+0x1a8>
 800fa54:	230d      	movs	r3, #13
 800fa56:	e16c      	b.n	800fd32 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5a:	3330      	adds	r3, #48	@ 0x30
 800fa5c:	3316      	adds	r3, #22
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fe fd0c 	bl	800e47c <ld_word>
 800fa64:	4603      	mov	r3, r0
 800fa66:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fa68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <find_volume+0x1cc>
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa70:	3330      	adds	r3, #48	@ 0x30
 800fa72:	3324      	adds	r3, #36	@ 0x24
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fd19 	bl	800e4ac <ld_dword>
 800fa7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fa80:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fa82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa84:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800fa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	789b      	ldrb	r3, [r3, #2]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d005      	beq.n	800faa0 <find_volume+0x1f0>
 800fa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa96:	789b      	ldrb	r3, [r3, #2]
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d001      	beq.n	800faa0 <find_volume+0x1f0>
 800fa9c:	230d      	movs	r3, #13
 800fa9e:	e148      	b.n	800fd32 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800faa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa2:	789b      	ldrb	r3, [r3, #2]
 800faa4:	461a      	mov	r2, r3
 800faa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faa8:	fb02 f303 	mul.w	r3, r2, r3
 800faac:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fab4:	461a      	mov	r2, r3
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800faba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fabc:	895b      	ldrh	r3, [r3, #10]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d008      	beq.n	800fad4 <find_volume+0x224>
 800fac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac4:	895b      	ldrh	r3, [r3, #10]
 800fac6:	461a      	mov	r2, r3
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	895b      	ldrh	r3, [r3, #10]
 800facc:	3b01      	subs	r3, #1
 800face:	4013      	ands	r3, r2
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d001      	beq.n	800fad8 <find_volume+0x228>
 800fad4:	230d      	movs	r3, #13
 800fad6:	e12c      	b.n	800fd32 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	3330      	adds	r3, #48	@ 0x30
 800fadc:	3311      	adds	r3, #17
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe fccc 	bl	800e47c <ld_word>
 800fae4:	4603      	mov	r3, r0
 800fae6:	461a      	mov	r2, r3
 800fae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800faec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faee:	891b      	ldrh	r3, [r3, #8]
 800faf0:	f003 030f 	and.w	r3, r3, #15
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <find_volume+0x24e>
 800fafa:	230d      	movs	r3, #13
 800fafc:	e119      	b.n	800fd32 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb00:	3330      	adds	r3, #48	@ 0x30
 800fb02:	3313      	adds	r3, #19
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fe fcb9 	bl	800e47c <ld_word>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fb0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d106      	bne.n	800fb22 <find_volume+0x272>
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	3330      	adds	r3, #48	@ 0x30
 800fb18:	3320      	adds	r3, #32
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fcc6 	bl	800e4ac <ld_dword>
 800fb20:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb24:	3330      	adds	r3, #48	@ 0x30
 800fb26:	330e      	adds	r3, #14
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fe fca7 	bl	800e47c <ld_word>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fb32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d101      	bne.n	800fb3c <find_volume+0x28c>
 800fb38:	230d      	movs	r3, #13
 800fb3a:	e0fa      	b.n	800fd32 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fb3c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fb3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb40:	4413      	add	r3, r2
 800fb42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb44:	8912      	ldrh	r2, [r2, #8]
 800fb46:	0912      	lsrs	r2, r2, #4
 800fb48:	b292      	uxth	r2, r2
 800fb4a:	4413      	add	r3, r2
 800fb4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d204      	bcs.n	800fb60 <find_volume+0x2b0>
 800fb56:	230d      	movs	r3, #13
 800fb58:	e0eb      	b.n	800fd32 <find_volume+0x482>
 800fb5a:	bf00      	nop
 800fb5c:	24000c08 	.word	0x24000c08
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fb60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb68:	8952      	ldrh	r2, [r2, #10]
 800fb6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d101      	bne.n	800fb7a <find_volume+0x2ca>
 800fb76:	230d      	movs	r3, #13
 800fb78:	e0db      	b.n	800fd32 <find_volume+0x482>
		fmt = FS_FAT32;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb82:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d802      	bhi.n	800fb90 <find_volume+0x2e0>
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb92:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d802      	bhi.n	800fba0 <find_volume+0x2f0>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba2:	1c9a      	adds	r2, r3, #2
 800fba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fbae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fbb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbb2:	441a      	add	r2, r3
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fbb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbbc:	441a      	add	r2, r3
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800fbc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	d11e      	bne.n	800fc08 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbcc:	3330      	adds	r3, #48	@ 0x30
 800fbce:	332a      	adds	r3, #42	@ 0x2a
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fe fc53 	bl	800e47c <ld_word>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <find_volume+0x330>
 800fbdc:	230d      	movs	r3, #13
 800fbde:	e0a8      	b.n	800fd32 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbe2:	891b      	ldrh	r3, [r3, #8]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d001      	beq.n	800fbec <find_volume+0x33c>
 800fbe8:	230d      	movs	r3, #13
 800fbea:	e0a2      	b.n	800fd32 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbee:	3330      	adds	r3, #48	@ 0x30
 800fbf0:	332c      	adds	r3, #44	@ 0x2c
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe fc5a 	bl	800e4ac <ld_dword>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc00:	695b      	ldr	r3, [r3, #20]
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc06:	e01f      	b.n	800fc48 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc0a:	891b      	ldrh	r3, [r3, #8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d101      	bne.n	800fc14 <find_volume+0x364>
 800fc10:	230d      	movs	r3, #13
 800fc12:	e08e      	b.n	800fd32 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	6a1a      	ldr	r2, [r3, #32]
 800fc18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc1a:	441a      	add	r2, r3
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fc20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d103      	bne.n	800fc30 <find_volume+0x380>
 800fc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2a:	695b      	ldr	r3, [r3, #20]
 800fc2c:	005b      	lsls	r3, r3, #1
 800fc2e:	e00a      	b.n	800fc46 <find_volume+0x396>
 800fc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc32:	695a      	ldr	r2, [r3, #20]
 800fc34:	4613      	mov	r3, r2
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	4413      	add	r3, r2
 800fc3a:	085a      	lsrs	r2, r3, #1
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	695b      	ldr	r3, [r3, #20]
 800fc40:	f003 0301 	and.w	r3, r3, #1
 800fc44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fc46:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4a:	699a      	ldr	r2, [r3, #24]
 800fc4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc4e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fc52:	0a5b      	lsrs	r3, r3, #9
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d201      	bcs.n	800fc5c <find_volume+0x3ac>
 800fc58:	230d      	movs	r3, #13
 800fc5a:	e06a      	b.n	800fd32 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc62:	611a      	str	r2, [r3, #16]
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	691a      	ldr	r2, [r3, #16]
 800fc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	2280      	movs	r2, #128	@ 0x80
 800fc70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d149      	bne.n	800fd0e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7c:	3330      	adds	r3, #48	@ 0x30
 800fc7e:	3330      	adds	r3, #48	@ 0x30
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fe fbfb 	bl	800e47c <ld_word>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d140      	bne.n	800fd0e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc8e:	3301      	adds	r3, #1
 800fc90:	4619      	mov	r1, r3
 800fc92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fc94:	f7fe fea2 	bl	800e9dc <move_window>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d137      	bne.n	800fd0e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca0:	2200      	movs	r2, #0
 800fca2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca6:	3330      	adds	r3, #48	@ 0x30
 800fca8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fe fbe5 	bl	800e47c <ld_word>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d127      	bne.n	800fd0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc0:	3330      	adds	r3, #48	@ 0x30
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe fbf2 	bl	800e4ac <ld_dword>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	4a1c      	ldr	r2, [pc, #112]	@ (800fd3c <find_volume+0x48c>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d11e      	bne.n	800fd0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd2:	3330      	adds	r3, #48	@ 0x30
 800fcd4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fe fbe7 	bl	800e4ac <ld_dword>
 800fcde:	4603      	mov	r3, r0
 800fce0:	4a17      	ldr	r2, [pc, #92]	@ (800fd40 <find_volume+0x490>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d113      	bne.n	800fd0e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce8:	3330      	adds	r3, #48	@ 0x30
 800fcea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe fbdc 	bl	800e4ac <ld_dword>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfc:	3330      	adds	r3, #48	@ 0x30
 800fcfe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe fbd2 	bl	800e4ac <ld_dword>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd0c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd10:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fd14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd16:	4b0b      	ldr	r3, [pc, #44]	@ (800fd44 <find_volume+0x494>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	4b09      	ldr	r3, [pc, #36]	@ (800fd44 <find_volume+0x494>)
 800fd20:	801a      	strh	r2, [r3, #0]
 800fd22:	4b08      	ldr	r3, [pc, #32]	@ (800fd44 <find_volume+0x494>)
 800fd24:	881a      	ldrh	r2, [r3, #0]
 800fd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fd2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd2c:	f7fe fdee 	bl	800e90c <clear_lock>
#endif
	return FR_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3758      	adds	r7, #88	@ 0x58
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	41615252 	.word	0x41615252
 800fd40:	61417272 	.word	0x61417272
 800fd44:	24000c0c 	.word	0x24000c0c

0800fd48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fd52:	2309      	movs	r3, #9
 800fd54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01c      	beq.n	800fd96 <validate+0x4e>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d018      	beq.n	800fd96 <validate+0x4e>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d013      	beq.n	800fd96 <validate+0x4e>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	889a      	ldrh	r2, [r3, #4]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	88db      	ldrh	r3, [r3, #6]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d10c      	bne.n	800fd96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	785b      	ldrb	r3, [r3, #1]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fada 	bl	800e33c <disk_status>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	f003 0301 	and.w	r3, r3, #1
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <validate+0x4e>
			res = FR_OK;
 800fd92:	2300      	movs	r3, #0
 800fd94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fd96:	7bfb      	ldrb	r3, [r7, #15]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <validate+0x5a>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	e000      	b.n	800fda4 <validate+0x5c>
 800fda2:	2300      	movs	r3, #0
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	6013      	str	r3, [r2, #0]
	return res;
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
	...

0800fdb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fdc6:	f107 0310 	add.w	r3, r7, #16
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff fcd5 	bl	800f77a <get_ldnumber>
 800fdd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	da01      	bge.n	800fddc <f_mount+0x28>
 800fdd8:	230b      	movs	r3, #11
 800fdda:	e02b      	b.n	800fe34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fddc:	4a17      	ldr	r2, [pc, #92]	@ (800fe3c <f_mount+0x88>)
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d005      	beq.n	800fdf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fdec:	69b8      	ldr	r0, [r7, #24]
 800fdee:	f7fe fd8d 	bl	800e90c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d002      	beq.n	800fe04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	490d      	ldr	r1, [pc, #52]	@ (800fe3c <f_mount+0x88>)
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d002      	beq.n	800fe1a <f_mount+0x66>
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d001      	beq.n	800fe1e <f_mount+0x6a>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e00a      	b.n	800fe34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fe1e:	f107 010c 	add.w	r1, r7, #12
 800fe22:	f107 0308 	add.w	r3, r7, #8
 800fe26:	2200      	movs	r2, #0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7ff fd41 	bl	800f8b0 <find_volume>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fe32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3720      	adds	r7, #32
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	24000c08 	.word	0x24000c08

0800fe40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b098      	sub	sp, #96	@ 0x60
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d101      	bne.n	800fe58 <f_open+0x18>
 800fe54:	2309      	movs	r3, #9
 800fe56:	e1a9      	b.n	80101ac <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe58:	79fb      	ldrb	r3, [r7, #7]
 800fe5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fe60:	79fa      	ldrb	r2, [r7, #7]
 800fe62:	f107 0110 	add.w	r1, r7, #16
 800fe66:	f107 0308 	add.w	r3, r7, #8
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff fd20 	bl	800f8b0 <find_volume>
 800fe70:	4603      	mov	r3, r0
 800fe72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800fe76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f040 818d 	bne.w	801019a <f_open+0x35a>
		dj.obj.fs = fs;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	f107 0314 	add.w	r3, r7, #20
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff fc03 	bl	800f698 <follow_path>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fe98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d118      	bne.n	800fed2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fea0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fea4:	b25b      	sxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	da03      	bge.n	800feb2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800feaa:	2306      	movs	r3, #6
 800feac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800feb0:	e00f      	b.n	800fed2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800feb2:	79fb      	ldrb	r3, [r7, #7]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	bf8c      	ite	hi
 800feb8:	2301      	movhi	r3, #1
 800feba:	2300      	movls	r3, #0
 800febc:	b2db      	uxtb	r3, r3
 800febe:	461a      	mov	r2, r3
 800fec0:	f107 0314 	add.w	r3, r7, #20
 800fec4:	4611      	mov	r1, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe fbd8 	bl	800e67c <chk_lock>
 800fecc:	4603      	mov	r3, r0
 800fece:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	f003 031c 	and.w	r3, r3, #28
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d07f      	beq.n	800ffdc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fedc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d017      	beq.n	800ff14 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fee4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fee8:	2b04      	cmp	r3, #4
 800feea:	d10e      	bne.n	800ff0a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800feec:	f7fe fc22 	bl	800e734 <enq_lock>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d006      	beq.n	800ff04 <f_open+0xc4>
 800fef6:	f107 0314 	add.w	r3, r7, #20
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7ff fb06 	bl	800f50c <dir_register>
 800ff00:	4603      	mov	r3, r0
 800ff02:	e000      	b.n	800ff06 <f_open+0xc6>
 800ff04:	2312      	movs	r3, #18
 800ff06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	f043 0308 	orr.w	r3, r3, #8
 800ff10:	71fb      	strb	r3, [r7, #7]
 800ff12:	e010      	b.n	800ff36 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ff14:	7ebb      	ldrb	r3, [r7, #26]
 800ff16:	f003 0311 	and.w	r3, r3, #17
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d003      	beq.n	800ff26 <f_open+0xe6>
					res = FR_DENIED;
 800ff1e:	2307      	movs	r3, #7
 800ff20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ff24:	e007      	b.n	800ff36 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	f003 0304 	and.w	r3, r3, #4
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <f_open+0xf6>
 800ff30:	2308      	movs	r3, #8
 800ff32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d168      	bne.n	8010010 <f_open+0x1d0>
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	f003 0308 	and.w	r3, r3, #8
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d063      	beq.n	8010010 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ff48:	f7fd fea8 	bl	800dc9c <get_fattime>
 800ff4c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ff4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff50:	330e      	adds	r3, #14
 800ff52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fe fae7 	bl	800e528 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ff5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff5c:	3316      	adds	r3, #22
 800ff5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fe fae1 	bl	800e528 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ff66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff68:	330b      	adds	r3, #11
 800ff6a:	2220      	movs	r2, #32
 800ff6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7ff fa35 	bl	800f3e4 <ld_clust>
 800ff7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ff80:	2200      	movs	r2, #0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff fa4d 	bl	800f422 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ff88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff8a:	331c      	adds	r3, #28
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe faca 	bl	800e528 <st_dword>
					fs->wflag = 1;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	2201      	movs	r2, #1
 800ff98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ff9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d037      	beq.n	8010010 <f_open+0x1d0>
						dw = fs->winsect;
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ffa6:	f107 0314 	add.w	r3, r7, #20
 800ffaa:	2200      	movs	r2, #0
 800ffac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe ff60 	bl	800ee74 <remove_chain>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ffba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d126      	bne.n	8010010 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fe fd08 	bl	800e9dc <move_window>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ffd6:	3a01      	subs	r2, #1
 800ffd8:	60da      	str	r2, [r3, #12]
 800ffda:	e019      	b.n	8010010 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ffdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d115      	bne.n	8010010 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ffe4:	7ebb      	ldrb	r3, [r7, #26]
 800ffe6:	f003 0310 	and.w	r3, r3, #16
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d003      	beq.n	800fff6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ffee:	2304      	movs	r3, #4
 800fff0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fff4:	e00c      	b.n	8010010 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	f003 0302 	and.w	r3, r3, #2
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d007      	beq.n	8010010 <f_open+0x1d0>
 8010000:	7ebb      	ldrb	r3, [r7, #26]
 8010002:	f003 0301 	and.w	r3, r3, #1
 8010006:	2b00      	cmp	r3, #0
 8010008:	d002      	beq.n	8010010 <f_open+0x1d0>
						res = FR_DENIED;
 801000a:	2307      	movs	r3, #7
 801000c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010010:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010014:	2b00      	cmp	r3, #0
 8010016:	d126      	bne.n	8010066 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010018:	79fb      	ldrb	r3, [r7, #7]
 801001a:	f003 0308 	and.w	r3, r3, #8
 801001e:	2b00      	cmp	r3, #0
 8010020:	d003      	beq.n	801002a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010028:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010038:	79fb      	ldrb	r3, [r7, #7]
 801003a:	2b01      	cmp	r3, #1
 801003c:	bf8c      	ite	hi
 801003e:	2301      	movhi	r3, #1
 8010040:	2300      	movls	r3, #0
 8010042:	b2db      	uxtb	r3, r3
 8010044:	461a      	mov	r2, r3
 8010046:	f107 0314 	add.w	r3, r7, #20
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fb93 	bl	800e778 <inc_lock>
 8010052:	4602      	mov	r2, r0
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d102      	bne.n	8010066 <f_open+0x226>
 8010060:	2302      	movs	r3, #2
 8010062:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010066:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801006a:	2b00      	cmp	r3, #0
 801006c:	f040 8095 	bne.w	801019a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff f9b4 	bl	800f3e4 <ld_clust>
 801007c:	4602      	mov	r2, r0
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010084:	331c      	adds	r3, #28
 8010086:	4618      	mov	r0, r3
 8010088:	f7fe fa10 	bl	800e4ac <ld_dword>
 801008c:	4602      	mov	r2, r0
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010098:	693a      	ldr	r2, [r7, #16]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	88da      	ldrh	r2, [r3, #6]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	79fa      	ldrb	r2, [r7, #7]
 80100aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2200      	movs	r2, #0
 80100b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2200      	movs	r2, #0
 80100b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2200      	movs	r2, #0
 80100bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	3330      	adds	r3, #48	@ 0x30
 80100c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100c6:	2100      	movs	r1, #0
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe fa7a 	bl	800e5c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	f003 0320 	and.w	r3, r3, #32
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d060      	beq.n	801019a <f_open+0x35a>
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d05c      	beq.n	801019a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	68da      	ldr	r2, [r3, #12]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	895b      	ldrh	r3, [r3, #10]
 80100ec:	025b      	lsls	r3, r3, #9
 80100ee:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80100fc:	e016      	b.n	801012c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fd25 	bl	800eb52 <get_fat>
 8010108:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801010a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801010c:	2b01      	cmp	r3, #1
 801010e:	d802      	bhi.n	8010116 <f_open+0x2d6>
 8010110:	2302      	movs	r3, #2
 8010112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801011c:	d102      	bne.n	8010124 <f_open+0x2e4>
 801011e:	2301      	movs	r3, #1
 8010120:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010124:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	657b      	str	r3, [r7, #84]	@ 0x54
 801012c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010130:	2b00      	cmp	r3, #0
 8010132:	d103      	bne.n	801013c <f_open+0x2fc>
 8010134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010138:	429a      	cmp	r2, r3
 801013a:	d8e0      	bhi.n	80100fe <f_open+0x2be>
				}
				fp->clust = clst;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010140:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010142:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010146:	2b00      	cmp	r3, #0
 8010148:	d127      	bne.n	801019a <f_open+0x35a>
 801014a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801014c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010150:	2b00      	cmp	r3, #0
 8010152:	d022      	beq.n	801019a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010158:	4618      	mov	r0, r3
 801015a:	f7fe fcdb 	bl	800eb14 <clust2sect>
 801015e:	6478      	str	r0, [r7, #68]	@ 0x44
 8010160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010162:	2b00      	cmp	r3, #0
 8010164:	d103      	bne.n	801016e <f_open+0x32e>
						res = FR_INT_ERR;
 8010166:	2302      	movs	r3, #2
 8010168:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801016c:	e015      	b.n	801019a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801016e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010170:	0a5a      	lsrs	r2, r3, #9
 8010172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010174:	441a      	add	r2, r3
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	7858      	ldrb	r0, [r3, #1]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6a1a      	ldr	r2, [r3, #32]
 8010188:	2301      	movs	r3, #1
 801018a:	f7fe f919 	bl	800e3c0 <disk_read>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <f_open+0x35a>
 8010194:	2301      	movs	r3, #1
 8010196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801019a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <f_open+0x368>
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80101a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3760      	adds	r7, #96	@ 0x60
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08e      	sub	sp, #56	@ 0x38
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	2200      	movs	r2, #0
 80101ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f107 0214 	add.w	r2, r7, #20
 80101d2:	4611      	mov	r1, r2
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff fdb7 	bl	800fd48 <validate>
 80101da:	4603      	mov	r3, r0
 80101dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80101e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d107      	bne.n	80101f8 <f_read+0x44>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	7d5b      	ldrb	r3, [r3, #21]
 80101ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80101f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d002      	beq.n	80101fe <f_read+0x4a>
 80101f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80101fc:	e115      	b.n	801042a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	7d1b      	ldrb	r3, [r3, #20]
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	2b00      	cmp	r3, #0
 8010208:	d101      	bne.n	801020e <f_read+0x5a>
 801020a:	2307      	movs	r3, #7
 801020c:	e10d      	b.n	801042a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	68da      	ldr	r2, [r3, #12]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	429a      	cmp	r2, r3
 8010220:	f240 80fe 	bls.w	8010420 <f_read+0x26c>
 8010224:	6a3b      	ldr	r3, [r7, #32]
 8010226:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010228:	e0fa      	b.n	8010420 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010232:	2b00      	cmp	r3, #0
 8010234:	f040 80c6 	bne.w	80103c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	0a5b      	lsrs	r3, r3, #9
 801023e:	697a      	ldr	r2, [r7, #20]
 8010240:	8952      	ldrh	r2, [r2, #10]
 8010242:	3a01      	subs	r2, #1
 8010244:	4013      	ands	r3, r2
 8010246:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d12f      	bne.n	80102ae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	699b      	ldr	r3, [r3, #24]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d103      	bne.n	801025e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	633b      	str	r3, [r7, #48]	@ 0x30
 801025c:	e013      	b.n	8010286 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010262:	2b00      	cmp	r3, #0
 8010264:	d007      	beq.n	8010276 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	4619      	mov	r1, r3
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f7fe fefe 	bl	800f06e <clmt_clust>
 8010272:	6338      	str	r0, [r7, #48]	@ 0x30
 8010274:	e007      	b.n	8010286 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	69db      	ldr	r3, [r3, #28]
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f7fe fc67 	bl	800eb52 <get_fat>
 8010284:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010288:	2b01      	cmp	r3, #1
 801028a:	d804      	bhi.n	8010296 <f_read+0xe2>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2202      	movs	r2, #2
 8010290:	755a      	strb	r2, [r3, #21]
 8010292:	2302      	movs	r3, #2
 8010294:	e0c9      	b.n	801042a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029c:	d104      	bne.n	80102a8 <f_read+0xf4>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2201      	movs	r2, #1
 80102a2:	755a      	strb	r2, [r3, #21]
 80102a4:	2301      	movs	r3, #1
 80102a6:	e0c0      	b.n	801042a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	69db      	ldr	r3, [r3, #28]
 80102b4:	4619      	mov	r1, r3
 80102b6:	4610      	mov	r0, r2
 80102b8:	f7fe fc2c 	bl	800eb14 <clust2sect>
 80102bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d104      	bne.n	80102ce <f_read+0x11a>
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2202      	movs	r2, #2
 80102c8:	755a      	strb	r2, [r3, #21]
 80102ca:	2302      	movs	r3, #2
 80102cc:	e0ad      	b.n	801042a <f_read+0x276>
			sect += csect;
 80102ce:	69ba      	ldr	r2, [r7, #24]
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	4413      	add	r3, r2
 80102d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	0a5b      	lsrs	r3, r3, #9
 80102da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80102dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d039      	beq.n	8010356 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80102e2:	69fa      	ldr	r2, [r7, #28]
 80102e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e6:	4413      	add	r3, r2
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	8952      	ldrh	r2, [r2, #10]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d905      	bls.n	80102fc <f_read+0x148>
					cc = fs->csize - csect;
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	895b      	ldrh	r3, [r3, #10]
 80102f4:	461a      	mov	r2, r3
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	7858      	ldrb	r0, [r3, #1]
 8010300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010302:	69ba      	ldr	r2, [r7, #24]
 8010304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010306:	f7fe f85b 	bl	800e3c0 <disk_read>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d004      	beq.n	801031a <f_read+0x166>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2201      	movs	r2, #1
 8010314:	755a      	strb	r2, [r3, #21]
 8010316:	2301      	movs	r3, #1
 8010318:	e087      	b.n	801042a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	7d1b      	ldrb	r3, [r3, #20]
 801031e:	b25b      	sxtb	r3, r3
 8010320:	2b00      	cmp	r3, #0
 8010322:	da14      	bge.n	801034e <f_read+0x19a>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6a1a      	ldr	r2, [r3, #32]
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801032e:	429a      	cmp	r2, r3
 8010330:	d90d      	bls.n	801034e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6a1a      	ldr	r2, [r3, #32]
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	1ad3      	subs	r3, r2, r3
 801033a:	025b      	lsls	r3, r3, #9
 801033c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801033e:	18d0      	adds	r0, r2, r3
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	3330      	adds	r3, #48	@ 0x30
 8010344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010348:	4619      	mov	r1, r3
 801034a:	f7fe f919 	bl	800e580 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801034e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010350:	025b      	lsls	r3, r3, #9
 8010352:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010354:	e050      	b.n	80103f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	6a1b      	ldr	r3, [r3, #32]
 801035a:	69ba      	ldr	r2, [r7, #24]
 801035c:	429a      	cmp	r2, r3
 801035e:	d02e      	beq.n	80103be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	7d1b      	ldrb	r3, [r3, #20]
 8010364:	b25b      	sxtb	r3, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	da18      	bge.n	801039c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	7858      	ldrb	r0, [r3, #1]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6a1a      	ldr	r2, [r3, #32]
 8010378:	2301      	movs	r3, #1
 801037a:	f7fe f841 	bl	800e400 <disk_write>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d004      	beq.n	801038e <f_read+0x1da>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2201      	movs	r2, #1
 8010388:	755a      	strb	r2, [r3, #21]
 801038a:	2301      	movs	r3, #1
 801038c:	e04d      	b.n	801042a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	7d1b      	ldrb	r3, [r3, #20]
 8010392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010396:	b2da      	uxtb	r2, r3
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	7858      	ldrb	r0, [r3, #1]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103a6:	2301      	movs	r3, #1
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	f7fe f809 	bl	800e3c0 <disk_read>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d004      	beq.n	80103be <f_read+0x20a>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2201      	movs	r2, #1
 80103b8:	755a      	strb	r2, [r3, #21]
 80103ba:	2301      	movs	r3, #1
 80103bc:	e035      	b.n	801042a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	69ba      	ldr	r2, [r7, #24]
 80103c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	699b      	ldr	r3, [r3, #24]
 80103c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103cc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80103d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80103d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d901      	bls.n	80103de <f_read+0x22a>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	699b      	ldr	r3, [r3, #24]
 80103e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103ec:	4413      	add	r3, r2
 80103ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103f0:	4619      	mov	r1, r3
 80103f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103f4:	f7fe f8c4 	bl	800e580 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80103f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103fc:	4413      	add	r3, r2
 80103fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	699a      	ldr	r2, [r3, #24]
 8010404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010406:	441a      	add	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	619a      	str	r2, [r3, #24]
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010412:	441a      	add	r2, r3
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801041c:	1ad3      	subs	r3, r2, r3
 801041e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	f47f af01 	bne.w	801022a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3738      	adds	r7, #56	@ 0x38
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b086      	sub	sp, #24
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f107 0208 	add.w	r2, r7, #8
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f7ff fc80 	bl	800fd48 <validate>
 8010448:	4603      	mov	r3, r0
 801044a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801044c:	7dfb      	ldrb	r3, [r7, #23]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d168      	bne.n	8010524 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7d1b      	ldrb	r3, [r3, #20]
 8010456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801045a:	2b00      	cmp	r3, #0
 801045c:	d062      	beq.n	8010524 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	7d1b      	ldrb	r3, [r3, #20]
 8010462:	b25b      	sxtb	r3, r3
 8010464:	2b00      	cmp	r3, #0
 8010466:	da15      	bge.n	8010494 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	7858      	ldrb	r0, [r3, #1]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1a      	ldr	r2, [r3, #32]
 8010476:	2301      	movs	r3, #1
 8010478:	f7fd ffc2 	bl	800e400 <disk_write>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d001      	beq.n	8010486 <f_sync+0x54>
 8010482:	2301      	movs	r3, #1
 8010484:	e04f      	b.n	8010526 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	7d1b      	ldrb	r3, [r3, #20]
 801048a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010494:	f7fd fc02 	bl	800dc9c <get_fattime>
 8010498:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104a0:	4619      	mov	r1, r3
 80104a2:	4610      	mov	r0, r2
 80104a4:	f7fe fa9a 	bl	800e9dc <move_window>
 80104a8:	4603      	mov	r3, r0
 80104aa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80104ac:	7dfb      	ldrb	r3, [r7, #23]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d138      	bne.n	8010524 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	330b      	adds	r3, #11
 80104bc:	781a      	ldrb	r2, [r3, #0]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	330b      	adds	r3, #11
 80104c2:	f042 0220 	orr.w	r2, r2, #32
 80104c6:	b2d2      	uxtb	r2, r2
 80104c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6818      	ldr	r0, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	461a      	mov	r2, r3
 80104d4:	68f9      	ldr	r1, [r7, #12]
 80104d6:	f7fe ffa4 	bl	800f422 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f103 021c 	add.w	r2, r3, #28
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fe f81e 	bl	800e528 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3316      	adds	r3, #22
 80104f0:	6939      	ldr	r1, [r7, #16]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe f818 	bl	800e528 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	3312      	adds	r3, #18
 80104fc:	2100      	movs	r1, #0
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fd fff7 	bl	800e4f2 <st_word>
					fs->wflag = 1;
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2201      	movs	r2, #1
 8010508:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	4618      	mov	r0, r3
 801050e:	f7fe fa93 	bl	800ea38 <sync_fs>
 8010512:	4603      	mov	r3, r0
 8010514:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	7d1b      	ldrb	r3, [r3, #20]
 801051a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801051e:	b2da      	uxtb	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010524:	7dfb      	ldrb	r3, [r7, #23]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff ff7b 	bl	8010432 <f_sync>
 801053c:	4603      	mov	r3, r0
 801053e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d118      	bne.n	8010578 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f107 0208 	add.w	r2, r7, #8
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff fbfa 	bl	800fd48 <validate>
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10c      	bne.n	8010578 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	691b      	ldr	r3, [r3, #16]
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe f996 	bl	800e894 <dec_lock>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801056c:	7bfb      	ldrb	r3, [r7, #15]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d102      	bne.n	8010578 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010578:	7bfb      	ldrb	r3, [r7, #15]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
	...

08010584 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010584:	b480      	push	{r7}
 8010586:	b087      	sub	sp, #28
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	4613      	mov	r3, r2
 8010590:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010592:	2301      	movs	r3, #1
 8010594:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010596:	2300      	movs	r3, #0
 8010598:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801059a:	4b1f      	ldr	r3, [pc, #124]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 801059c:	7a5b      	ldrb	r3, [r3, #9]
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d131      	bne.n	8010608 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80105a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105a6:	7a5b      	ldrb	r3, [r3, #9]
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	461a      	mov	r2, r3
 80105ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105ae:	2100      	movs	r1, #0
 80105b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80105b2:	4b19      	ldr	r3, [pc, #100]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105b4:	7a5b      	ldrb	r3, [r3, #9]
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	4a17      	ldr	r2, [pc, #92]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80105c2:	4b15      	ldr	r3, [pc, #84]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105c4:	7a5b      	ldrb	r3, [r3, #9]
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	461a      	mov	r2, r3
 80105ca:	4b13      	ldr	r3, [pc, #76]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105cc:	4413      	add	r3, r2
 80105ce:	79fa      	ldrb	r2, [r7, #7]
 80105d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80105d2:	4b11      	ldr	r3, [pc, #68]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105d4:	7a5b      	ldrb	r3, [r3, #9]
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	1c5a      	adds	r2, r3, #1
 80105da:	b2d1      	uxtb	r1, r2
 80105dc:	4a0e      	ldr	r2, [pc, #56]	@ (8010618 <FATFS_LinkDriverEx+0x94>)
 80105de:	7251      	strb	r1, [r2, #9]
 80105e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80105e2:	7dbb      	ldrb	r3, [r7, #22]
 80105e4:	3330      	adds	r3, #48	@ 0x30
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	3301      	adds	r3, #1
 80105f0:	223a      	movs	r2, #58	@ 0x3a
 80105f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	3302      	adds	r3, #2
 80105f8:	222f      	movs	r2, #47	@ 0x2f
 80105fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	3303      	adds	r3, #3
 8010600:	2200      	movs	r2, #0
 8010602:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010608:	7dfb      	ldrb	r3, [r7, #23]
}
 801060a:	4618      	mov	r0, r3
 801060c:	371c      	adds	r7, #28
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	24000c30 	.word	0x24000c30

0801061c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010626:	2200      	movs	r2, #0
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff ffaa 	bl	8010584 <FATFS_LinkDriverEx>
 8010630:	4603      	mov	r3, r0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZdlPvj>:
 801063a:	f000 b99c 	b.w	8010976 <_ZdlPv>

0801063e <__cxa_guard_acquire>:
 801063e:	6802      	ldr	r2, [r0, #0]
 8010640:	07d2      	lsls	r2, r2, #31
 8010642:	4603      	mov	r3, r0
 8010644:	d405      	bmi.n	8010652 <__cxa_guard_acquire+0x14>
 8010646:	7842      	ldrb	r2, [r0, #1]
 8010648:	b102      	cbz	r2, 801064c <__cxa_guard_acquire+0xe>
 801064a:	deff      	udf	#255	@ 0xff
 801064c:	2001      	movs	r0, #1
 801064e:	7058      	strb	r0, [r3, #1]
 8010650:	4770      	bx	lr
 8010652:	2000      	movs	r0, #0
 8010654:	4770      	bx	lr

08010656 <__cxa_guard_release>:
 8010656:	2301      	movs	r3, #1
 8010658:	6003      	str	r3, [r0, #0]
 801065a:	4770      	bx	lr

0801065c <_Znwj>:
 801065c:	2801      	cmp	r0, #1
 801065e:	bf38      	it	cc
 8010660:	2001      	movcc	r0, #1
 8010662:	b510      	push	{r4, lr}
 8010664:	4604      	mov	r4, r0
 8010666:	4620      	mov	r0, r4
 8010668:	f000 f99e 	bl	80109a8 <malloc>
 801066c:	b100      	cbz	r0, 8010670 <_Znwj+0x14>
 801066e:	bd10      	pop	{r4, pc}
 8010670:	f000 f984 	bl	801097c <_ZSt15get_new_handlerv>
 8010674:	b908      	cbnz	r0, 801067a <_Znwj+0x1e>
 8010676:	f000 f98f 	bl	8010998 <abort>
 801067a:	4780      	blx	r0
 801067c:	e7f3      	b.n	8010666 <_Znwj+0xa>

0801067e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801067e:	b10a      	cbz	r2, 8010684 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8010680:	f000 bd4b 	b.w	801111a <memcpy>
 8010684:	4770      	bx	lr

08010686 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8010686:	f850 3b08 	ldr.w	r3, [r0], #8
 801068a:	1a1b      	subs	r3, r3, r0
 801068c:	4258      	negs	r0, r3
 801068e:	4158      	adcs	r0, r3
 8010690:	4770      	bx	lr
	...

08010694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010694:	b508      	push	{r3, lr}
 8010696:	680b      	ldr	r3, [r1, #0]
 8010698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801069c:	d302      	bcc.n	80106a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801069e:	480d      	ldr	r0, [pc, #52]	@ (80106d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80106a0:	f000 f977 	bl	8010992 <_ZSt20__throw_length_errorPKc>
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d90b      	bls.n	80106c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80106a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80106ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80106b0:	d206      	bcs.n	80106c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80106b2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80106b6:	bf2a      	itet	cs
 80106b8:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80106bc:	6008      	strcc	r0, [r1, #0]
 80106be:	600b      	strcs	r3, [r1, #0]
 80106c0:	6808      	ldr	r0, [r1, #0]
 80106c2:	3001      	adds	r0, #1
 80106c4:	d501      	bpl.n	80106ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80106c6:	f000 f961 	bl	801098c <_ZSt17__throw_bad_allocv>
 80106ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80106ce:	f7ff bfc5 	b.w	801065c <_Znwj>
 80106d2:	bf00      	nop
 80106d4:	08011f0c 	.word	0x08011f0c

080106d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	4604      	mov	r4, r0
 80106dc:	f7ff ffd3 	bl	8010686 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80106e0:	b920      	cbnz	r0, 80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80106e2:	6820      	ldr	r0, [r4, #0]
 80106e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e8:	f000 b945 	b.w	8010976 <_ZdlPv>
 80106ec:	bd10      	pop	{r4, pc}

080106ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80106ee:	6840      	ldr	r0, [r0, #4]
 80106f0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80106f4:	3901      	subs	r1, #1
 80106f6:	1a09      	subs	r1, r1, r0
 80106f8:	4291      	cmp	r1, r2
 80106fa:	b508      	push	{r3, lr}
 80106fc:	d202      	bcs.n	8010704 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80106fe:	4618      	mov	r0, r3
 8010700:	f000 f947 	bl	8010992 <_ZSt20__throw_length_errorPKc>
 8010704:	bd08      	pop	{r3, pc}

08010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010706:	2a01      	cmp	r2, #1
 8010708:	b410      	push	{r4}
 801070a:	d104      	bne.n	8010716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801070c:	780a      	ldrb	r2, [r1, #0]
 801070e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010712:	7002      	strb	r2, [r0, #0]
 8010714:	4770      	bx	lr
 8010716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801071a:	f7ff bfb0 	b.w	801067e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801071e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801071e:	2a01      	cmp	r2, #1
 8010720:	b430      	push	{r4, r5}
 8010722:	d103      	bne.n	801072c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010724:	780b      	ldrb	r3, [r1, #0]
 8010726:	7003      	strb	r3, [r0, #0]
 8010728:	bc30      	pop	{r4, r5}
 801072a:	4770      	bx	lr
 801072c:	2a00      	cmp	r2, #0
 801072e:	d0fb      	beq.n	8010728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8010730:	bc30      	pop	{r4, r5}
 8010732:	f000 bc09 	b.w	8010f48 <memmove>

08010736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8010736:	460b      	mov	r3, r1
 8010738:	2b01      	cmp	r3, #1
 801073a:	b410      	push	{r4}
 801073c:	4611      	mov	r1, r2
 801073e:	4604      	mov	r4, r0
 8010740:	d103      	bne.n	801074a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8010742:	7022      	strb	r2, [r4, #0]
 8010744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0fa      	beq.n	8010744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801074e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010752:	461a      	mov	r2, r3
 8010754:	f000 bc12 	b.w	8010f7c <memset>

08010758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8010758:	b508      	push	{r3, lr}
 801075a:	1a52      	subs	r2, r2, r1
 801075c:	f7ff ffd3 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010760:	bd08      	pop	{r3, pc}

08010762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8010762:	f100 0208 	add.w	r2, r0, #8
 8010766:	6002      	str	r2, [r0, #0]
 8010768:	2200      	movs	r2, #0
 801076a:	6042      	str	r2, [r0, #4]
 801076c:	7202      	strb	r2, [r0, #8]
 801076e:	4770      	bx	lr

08010770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010770:	b510      	push	{r4, lr}
 8010772:	4604      	mov	r4, r0
 8010774:	f7ff ffb0 	bl	80106d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010778:	4620      	mov	r0, r4
 801077a:	bd10      	pop	{r4, pc}

0801077c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077e:	460c      	mov	r4, r1
 8010780:	4605      	mov	r5, r0
 8010782:	f7ff ff80 	bl	8010686 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010786:	4606      	mov	r6, r0
 8010788:	4620      	mov	r0, r4
 801078a:	f7ff ff7c 	bl	8010686 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801078e:	b190      	cbz	r0, 80107b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8010790:	42a5      	cmp	r5, r4
 8010792:	d00a      	beq.n	80107aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010794:	6862      	ldr	r2, [r4, #4]
 8010796:	b11a      	cbz	r2, 80107a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8010798:	6821      	ldr	r1, [r4, #0]
 801079a:	6828      	ldr	r0, [r5, #0]
 801079c:	f7ff ffb3 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80107a0:	6863      	ldr	r3, [r4, #4]
 80107a2:	682a      	ldr	r2, [r5, #0]
 80107a4:	606b      	str	r3, [r5, #4]
 80107a6:	2100      	movs	r1, #0
 80107a8:	54d1      	strb	r1, [r2, r3]
 80107aa:	6822      	ldr	r2, [r4, #0]
 80107ac:	2300      	movs	r3, #0
 80107ae:	6063      	str	r3, [r4, #4]
 80107b0:	7013      	strb	r3, [r2, #0]
 80107b2:	4628      	mov	r0, r5
 80107b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107b6:	b90e      	cbnz	r6, 80107bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80107b8:	6828      	ldr	r0, [r5, #0]
 80107ba:	68af      	ldr	r7, [r5, #8]
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	602b      	str	r3, [r5, #0]
 80107c0:	6863      	ldr	r3, [r4, #4]
 80107c2:	606b      	str	r3, [r5, #4]
 80107c4:	68a3      	ldr	r3, [r4, #8]
 80107c6:	60ab      	str	r3, [r5, #8]
 80107c8:	b110      	cbz	r0, 80107d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80107ca:	6020      	str	r0, [r4, #0]
 80107cc:	60a7      	str	r7, [r4, #8]
 80107ce:	e7ec      	b.n	80107aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80107d0:	f104 0308 	add.w	r3, r4, #8
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	e7e8      	b.n	80107aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080107d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80107d8:	b510      	push	{r4, lr}
 80107da:	4604      	mov	r4, r0
 80107dc:	f7ff ff53 	bl	8010686 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80107e0:	b908      	cbnz	r0, 80107e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80107e2:	68a0      	ldr	r0, [r4, #8]
 80107e4:	bd10      	pop	{r4, pc}
 80107e6:	200f      	movs	r0, #15
 80107e8:	e7fc      	b.n	80107e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080107ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80107ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80107ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80107f0:	461f      	mov	r7, r3
 80107f2:	6843      	ldr	r3, [r0, #4]
 80107f4:	eb01 0802 	add.w	r8, r1, r2
 80107f8:	1ab2      	subs	r2, r6, r2
 80107fa:	441a      	add	r2, r3
 80107fc:	4604      	mov	r4, r0
 80107fe:	460d      	mov	r5, r1
 8010800:	eba3 0908 	sub.w	r9, r3, r8
 8010804:	9201      	str	r2, [sp, #4]
 8010806:	f7ff ffe7 	bl	80107d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801080a:	a901      	add	r1, sp, #4
 801080c:	4602      	mov	r2, r0
 801080e:	4620      	mov	r0, r4
 8010810:	f7ff ff40 	bl	8010694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010814:	4682      	mov	sl, r0
 8010816:	b11d      	cbz	r5, 8010820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8010818:	6821      	ldr	r1, [r4, #0]
 801081a:	462a      	mov	r2, r5
 801081c:	f7ff ff73 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010820:	b137      	cbz	r7, 8010830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010822:	b12e      	cbz	r6, 8010830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010824:	4632      	mov	r2, r6
 8010826:	4639      	mov	r1, r7
 8010828:	eb0a 0005 	add.w	r0, sl, r5
 801082c:	f7ff ff6b 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010830:	f1b9 0f00 	cmp.w	r9, #0
 8010834:	d007      	beq.n	8010846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8010836:	6821      	ldr	r1, [r4, #0]
 8010838:	4435      	add	r5, r6
 801083a:	464a      	mov	r2, r9
 801083c:	4441      	add	r1, r8
 801083e:	eb0a 0005 	add.w	r0, sl, r5
 8010842:	f7ff ff60 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010846:	4620      	mov	r0, r4
 8010848:	f7ff ff46 	bl	80106d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801084c:	9b01      	ldr	r3, [sp, #4]
 801084e:	f8c4 a000 	str.w	sl, [r4]
 8010852:	60a3      	str	r3, [r4, #8]
 8010854:	b002      	add	sp, #8
 8010856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801085a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801085a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801085c:	4604      	mov	r4, r0
 801085e:	9101      	str	r1, [sp, #4]
 8010860:	f7ff ffba 	bl	80107d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8010864:	9b01      	ldr	r3, [sp, #4]
 8010866:	4283      	cmp	r3, r0
 8010868:	4602      	mov	r2, r0
 801086a:	d90f      	bls.n	801088c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801086c:	a901      	add	r1, sp, #4
 801086e:	4620      	mov	r0, r4
 8010870:	f7ff ff10 	bl	8010694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010874:	6862      	ldr	r2, [r4, #4]
 8010876:	6821      	ldr	r1, [r4, #0]
 8010878:	3201      	adds	r2, #1
 801087a:	4605      	mov	r5, r0
 801087c:	f7ff ff43 	bl	8010706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010880:	4620      	mov	r0, r4
 8010882:	f7ff ff29 	bl	80106d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	6025      	str	r5, [r4, #0]
 801088a:	60a3      	str	r3, [r4, #8]
 801088c:	b003      	add	sp, #12
 801088e:	bd30      	pop	{r4, r5, pc}

08010890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8010890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010894:	4616      	mov	r6, r2
 8010896:	461d      	mov	r5, r3
 8010898:	4604      	mov	r4, r0
 801089a:	4b1b      	ldr	r3, [pc, #108]	@ (8010908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801089c:	462a      	mov	r2, r5
 801089e:	460f      	mov	r7, r1
 80108a0:	4631      	mov	r1, r6
 80108a2:	f7ff ff24 	bl	80106ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80108a6:	4620      	mov	r0, r4
 80108a8:	f7ff ff96 	bl	80107d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80108ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80108b0:	eba5 0806 	sub.w	r8, r5, r6
 80108b4:	44c8      	add	r8, r9
 80108b6:	4540      	cmp	r0, r8
 80108b8:	d31d      	bcc.n	80108f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80108ba:	19f3      	adds	r3, r6, r7
 80108bc:	ebb9 0203 	subs.w	r2, r9, r3
 80108c0:	d007      	beq.n	80108d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80108c2:	42ae      	cmp	r6, r5
 80108c4:	d005      	beq.n	80108d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80108c6:	6820      	ldr	r0, [r4, #0]
 80108c8:	4438      	add	r0, r7
 80108ca:	1981      	adds	r1, r0, r6
 80108cc:	4428      	add	r0, r5
 80108ce:	f7ff ff26 	bl	801071e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80108d2:	b135      	cbz	r5, 80108e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 80108d4:	6820      	ldr	r0, [r4, #0]
 80108d6:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80108da:	4629      	mov	r1, r5
 80108dc:	4438      	add	r0, r7
 80108de:	f7ff ff2a 	bl	8010736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	f8c4 8004 	str.w	r8, [r4, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	4620      	mov	r0, r4
 80108ec:	f803 2008 	strb.w	r2, [r3, r8]
 80108f0:	b003      	add	sp, #12
 80108f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108f6:	9500      	str	r5, [sp, #0]
 80108f8:	2300      	movs	r3, #0
 80108fa:	4632      	mov	r2, r6
 80108fc:	4639      	mov	r1, r7
 80108fe:	4620      	mov	r0, r4
 8010900:	f7ff ff73 	bl	80107ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010904:	e7e5      	b.n	80108d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010906:	bf00      	nop
 8010908:	08011f24 	.word	0x08011f24

0801090c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801090c:	b507      	push	{r0, r1, r2, lr}
 801090e:	9200      	str	r2, [sp, #0]
 8010910:	460b      	mov	r3, r1
 8010912:	2200      	movs	r2, #0
 8010914:	6841      	ldr	r1, [r0, #4]
 8010916:	f7ff ffbb 	bl	8010890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801091a:	b003      	add	sp, #12
 801091c:	f85d fb04 	ldr.w	pc, [sp], #4

08010920 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010920:	6800      	ldr	r0, [r0, #0]
 8010922:	4770      	bx	lr

08010924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8010924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010926:	1a53      	subs	r3, r2, r1
 8010928:	2b0f      	cmp	r3, #15
 801092a:	4604      	mov	r4, r0
 801092c:	460d      	mov	r5, r1
 801092e:	4616      	mov	r6, r2
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	d906      	bls.n	8010942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8010934:	2200      	movs	r2, #0
 8010936:	a901      	add	r1, sp, #4
 8010938:	f7ff feac 	bl	8010694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801093c:	9b01      	ldr	r3, [sp, #4]
 801093e:	6020      	str	r0, [r4, #0]
 8010940:	60a3      	str	r3, [r4, #8]
 8010942:	4632      	mov	r2, r6
 8010944:	4629      	mov	r1, r5
 8010946:	6820      	ldr	r0, [r4, #0]
 8010948:	f7ff ff06 	bl	8010758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801094c:	9b01      	ldr	r3, [sp, #4]
 801094e:	6822      	ldr	r2, [r4, #0]
 8010950:	6063      	str	r3, [r4, #4]
 8010952:	2100      	movs	r1, #0
 8010954:	54d1      	strb	r1, [r2, r3]
 8010956:	b002      	add	sp, #8
 8010958:	bd70      	pop	{r4, r5, r6, pc}

0801095a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801095a:	f100 0208 	add.w	r2, r0, #8
 801095e:	b510      	push	{r4, lr}
 8010960:	6002      	str	r2, [r0, #0]
 8010962:	e9d1 1200 	ldrd	r1, r2, [r1]
 8010966:	4604      	mov	r4, r0
 8010968:	f04f 0300 	mov.w	r3, #0
 801096c:	440a      	add	r2, r1
 801096e:	f7ff ffd9 	bl	8010924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8010972:	4620      	mov	r0, r4
 8010974:	bd10      	pop	{r4, pc}

08010976 <_ZdlPv>:
 8010976:	f000 b81f 	b.w	80109b8 <free>
	...

0801097c <_ZSt15get_new_handlerv>:
 801097c:	4b02      	ldr	r3, [pc, #8]	@ (8010988 <_ZSt15get_new_handlerv+0xc>)
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	f3bf 8f5b 	dmb	ish
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	24000c3c 	.word	0x24000c3c

0801098c <_ZSt17__throw_bad_allocv>:
 801098c:	b508      	push	{r3, lr}
 801098e:	f000 f803 	bl	8010998 <abort>

08010992 <_ZSt20__throw_length_errorPKc>:
 8010992:	b508      	push	{r3, lr}
 8010994:	f000 f800 	bl	8010998 <abort>

08010998 <abort>:
 8010998:	b508      	push	{r3, lr}
 801099a:	2006      	movs	r0, #6
 801099c:	f000 fb1e 	bl	8010fdc <raise>
 80109a0:	2001      	movs	r0, #1
 80109a2:	f7f2 ff15 	bl	80037d0 <_exit>
	...

080109a8 <malloc>:
 80109a8:	4b02      	ldr	r3, [pc, #8]	@ (80109b4 <malloc+0xc>)
 80109aa:	4601      	mov	r1, r0
 80109ac:	6818      	ldr	r0, [r3, #0]
 80109ae:	f000 b82d 	b.w	8010a0c <_malloc_r>
 80109b2:	bf00      	nop
 80109b4:	2400006c 	.word	0x2400006c

080109b8 <free>:
 80109b8:	4b02      	ldr	r3, [pc, #8]	@ (80109c4 <free+0xc>)
 80109ba:	4601      	mov	r1, r0
 80109bc:	6818      	ldr	r0, [r3, #0]
 80109be:	f000 bbbb 	b.w	8011138 <_free_r>
 80109c2:	bf00      	nop
 80109c4:	2400006c 	.word	0x2400006c

080109c8 <sbrk_aligned>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	4e0f      	ldr	r6, [pc, #60]	@ (8010a08 <sbrk_aligned+0x40>)
 80109cc:	460c      	mov	r4, r1
 80109ce:	6831      	ldr	r1, [r6, #0]
 80109d0:	4605      	mov	r5, r0
 80109d2:	b911      	cbnz	r1, 80109da <sbrk_aligned+0x12>
 80109d4:	f000 fb52 	bl	801107c <_sbrk_r>
 80109d8:	6030      	str	r0, [r6, #0]
 80109da:	4621      	mov	r1, r4
 80109dc:	4628      	mov	r0, r5
 80109de:	f000 fb4d 	bl	801107c <_sbrk_r>
 80109e2:	1c43      	adds	r3, r0, #1
 80109e4:	d103      	bne.n	80109ee <sbrk_aligned+0x26>
 80109e6:	f04f 34ff 	mov.w	r4, #4294967295
 80109ea:	4620      	mov	r0, r4
 80109ec:	bd70      	pop	{r4, r5, r6, pc}
 80109ee:	1cc4      	adds	r4, r0, #3
 80109f0:	f024 0403 	bic.w	r4, r4, #3
 80109f4:	42a0      	cmp	r0, r4
 80109f6:	d0f8      	beq.n	80109ea <sbrk_aligned+0x22>
 80109f8:	1a21      	subs	r1, r4, r0
 80109fa:	4628      	mov	r0, r5
 80109fc:	f000 fb3e 	bl	801107c <_sbrk_r>
 8010a00:	3001      	adds	r0, #1
 8010a02:	d1f2      	bne.n	80109ea <sbrk_aligned+0x22>
 8010a04:	e7ef      	b.n	80109e6 <sbrk_aligned+0x1e>
 8010a06:	bf00      	nop
 8010a08:	24000c40 	.word	0x24000c40

08010a0c <_malloc_r>:
 8010a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a10:	1ccd      	adds	r5, r1, #3
 8010a12:	f025 0503 	bic.w	r5, r5, #3
 8010a16:	3508      	adds	r5, #8
 8010a18:	2d0c      	cmp	r5, #12
 8010a1a:	bf38      	it	cc
 8010a1c:	250c      	movcc	r5, #12
 8010a1e:	2d00      	cmp	r5, #0
 8010a20:	4606      	mov	r6, r0
 8010a22:	db01      	blt.n	8010a28 <_malloc_r+0x1c>
 8010a24:	42a9      	cmp	r1, r5
 8010a26:	d904      	bls.n	8010a32 <_malloc_r+0x26>
 8010a28:	230c      	movs	r3, #12
 8010a2a:	6033      	str	r3, [r6, #0]
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b08 <_malloc_r+0xfc>
 8010a36:	f000 f869 	bl	8010b0c <__malloc_lock>
 8010a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a3e:	461c      	mov	r4, r3
 8010a40:	bb44      	cbnz	r4, 8010a94 <_malloc_r+0x88>
 8010a42:	4629      	mov	r1, r5
 8010a44:	4630      	mov	r0, r6
 8010a46:	f7ff ffbf 	bl	80109c8 <sbrk_aligned>
 8010a4a:	1c43      	adds	r3, r0, #1
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	d158      	bne.n	8010b02 <_malloc_r+0xf6>
 8010a50:	f8d8 4000 	ldr.w	r4, [r8]
 8010a54:	4627      	mov	r7, r4
 8010a56:	2f00      	cmp	r7, #0
 8010a58:	d143      	bne.n	8010ae2 <_malloc_r+0xd6>
 8010a5a:	2c00      	cmp	r4, #0
 8010a5c:	d04b      	beq.n	8010af6 <_malloc_r+0xea>
 8010a5e:	6823      	ldr	r3, [r4, #0]
 8010a60:	4639      	mov	r1, r7
 8010a62:	4630      	mov	r0, r6
 8010a64:	eb04 0903 	add.w	r9, r4, r3
 8010a68:	f000 fb08 	bl	801107c <_sbrk_r>
 8010a6c:	4581      	cmp	r9, r0
 8010a6e:	d142      	bne.n	8010af6 <_malloc_r+0xea>
 8010a70:	6821      	ldr	r1, [r4, #0]
 8010a72:	1a6d      	subs	r5, r5, r1
 8010a74:	4629      	mov	r1, r5
 8010a76:	4630      	mov	r0, r6
 8010a78:	f7ff ffa6 	bl	80109c8 <sbrk_aligned>
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d03a      	beq.n	8010af6 <_malloc_r+0xea>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	442b      	add	r3, r5
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	f8d8 3000 	ldr.w	r3, [r8]
 8010a8a:	685a      	ldr	r2, [r3, #4]
 8010a8c:	bb62      	cbnz	r2, 8010ae8 <_malloc_r+0xdc>
 8010a8e:	f8c8 7000 	str.w	r7, [r8]
 8010a92:	e00f      	b.n	8010ab4 <_malloc_r+0xa8>
 8010a94:	6822      	ldr	r2, [r4, #0]
 8010a96:	1b52      	subs	r2, r2, r5
 8010a98:	d420      	bmi.n	8010adc <_malloc_r+0xd0>
 8010a9a:	2a0b      	cmp	r2, #11
 8010a9c:	d917      	bls.n	8010ace <_malloc_r+0xc2>
 8010a9e:	1961      	adds	r1, r4, r5
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	6025      	str	r5, [r4, #0]
 8010aa4:	bf18      	it	ne
 8010aa6:	6059      	strne	r1, [r3, #4]
 8010aa8:	6863      	ldr	r3, [r4, #4]
 8010aaa:	bf08      	it	eq
 8010aac:	f8c8 1000 	streq.w	r1, [r8]
 8010ab0:	5162      	str	r2, [r4, r5]
 8010ab2:	604b      	str	r3, [r1, #4]
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f000 f82f 	bl	8010b18 <__malloc_unlock>
 8010aba:	f104 000b 	add.w	r0, r4, #11
 8010abe:	1d23      	adds	r3, r4, #4
 8010ac0:	f020 0007 	bic.w	r0, r0, #7
 8010ac4:	1ac2      	subs	r2, r0, r3
 8010ac6:	bf1c      	itt	ne
 8010ac8:	1a1b      	subne	r3, r3, r0
 8010aca:	50a3      	strne	r3, [r4, r2]
 8010acc:	e7af      	b.n	8010a2e <_malloc_r+0x22>
 8010ace:	6862      	ldr	r2, [r4, #4]
 8010ad0:	42a3      	cmp	r3, r4
 8010ad2:	bf0c      	ite	eq
 8010ad4:	f8c8 2000 	streq.w	r2, [r8]
 8010ad8:	605a      	strne	r2, [r3, #4]
 8010ada:	e7eb      	b.n	8010ab4 <_malloc_r+0xa8>
 8010adc:	4623      	mov	r3, r4
 8010ade:	6864      	ldr	r4, [r4, #4]
 8010ae0:	e7ae      	b.n	8010a40 <_malloc_r+0x34>
 8010ae2:	463c      	mov	r4, r7
 8010ae4:	687f      	ldr	r7, [r7, #4]
 8010ae6:	e7b6      	b.n	8010a56 <_malloc_r+0x4a>
 8010ae8:	461a      	mov	r2, r3
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	42a3      	cmp	r3, r4
 8010aee:	d1fb      	bne.n	8010ae8 <_malloc_r+0xdc>
 8010af0:	2300      	movs	r3, #0
 8010af2:	6053      	str	r3, [r2, #4]
 8010af4:	e7de      	b.n	8010ab4 <_malloc_r+0xa8>
 8010af6:	230c      	movs	r3, #12
 8010af8:	6033      	str	r3, [r6, #0]
 8010afa:	4630      	mov	r0, r6
 8010afc:	f000 f80c 	bl	8010b18 <__malloc_unlock>
 8010b00:	e794      	b.n	8010a2c <_malloc_r+0x20>
 8010b02:	6005      	str	r5, [r0, #0]
 8010b04:	e7d6      	b.n	8010ab4 <_malloc_r+0xa8>
 8010b06:	bf00      	nop
 8010b08:	24000c44 	.word	0x24000c44

08010b0c <__malloc_lock>:
 8010b0c:	4801      	ldr	r0, [pc, #4]	@ (8010b14 <__malloc_lock+0x8>)
 8010b0e:	f000 bb02 	b.w	8011116 <__retarget_lock_acquire_recursive>
 8010b12:	bf00      	nop
 8010b14:	24000d88 	.word	0x24000d88

08010b18 <__malloc_unlock>:
 8010b18:	4801      	ldr	r0, [pc, #4]	@ (8010b20 <__malloc_unlock+0x8>)
 8010b1a:	f000 bafd 	b.w	8011118 <__retarget_lock_release_recursive>
 8010b1e:	bf00      	nop
 8010b20:	24000d88 	.word	0x24000d88

08010b24 <std>:
 8010b24:	2300      	movs	r3, #0
 8010b26:	b510      	push	{r4, lr}
 8010b28:	4604      	mov	r4, r0
 8010b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b32:	6083      	str	r3, [r0, #8]
 8010b34:	8181      	strh	r1, [r0, #12]
 8010b36:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b38:	81c2      	strh	r2, [r0, #14]
 8010b3a:	6183      	str	r3, [r0, #24]
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	2208      	movs	r2, #8
 8010b40:	305c      	adds	r0, #92	@ 0x5c
 8010b42:	f000 fa1b 	bl	8010f7c <memset>
 8010b46:	4b0d      	ldr	r3, [pc, #52]	@ (8010b7c <std+0x58>)
 8010b48:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b80 <std+0x5c>)
 8010b4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b84 <std+0x60>)
 8010b50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b52:	4b0d      	ldr	r3, [pc, #52]	@ (8010b88 <std+0x64>)
 8010b54:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b56:	4b0d      	ldr	r3, [pc, #52]	@ (8010b8c <std+0x68>)
 8010b58:	6224      	str	r4, [r4, #32]
 8010b5a:	429c      	cmp	r4, r3
 8010b5c:	d006      	beq.n	8010b6c <std+0x48>
 8010b5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b62:	4294      	cmp	r4, r2
 8010b64:	d002      	beq.n	8010b6c <std+0x48>
 8010b66:	33d0      	adds	r3, #208	@ 0xd0
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	d105      	bne.n	8010b78 <std+0x54>
 8010b6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b74:	f000 bace 	b.w	8011114 <__retarget_lock_init_recursive>
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	bf00      	nop
 8010b7c:	08010d99 	.word	0x08010d99
 8010b80:	08010dbb 	.word	0x08010dbb
 8010b84:	08010df3 	.word	0x08010df3
 8010b88:	08010e17 	.word	0x08010e17
 8010b8c:	24000c48 	.word	0x24000c48

08010b90 <stdio_exit_handler>:
 8010b90:	4a02      	ldr	r2, [pc, #8]	@ (8010b9c <stdio_exit_handler+0xc>)
 8010b92:	4903      	ldr	r1, [pc, #12]	@ (8010ba0 <stdio_exit_handler+0x10>)
 8010b94:	4803      	ldr	r0, [pc, #12]	@ (8010ba4 <stdio_exit_handler+0x14>)
 8010b96:	f000 b869 	b.w	8010c6c <_fwalk_sglue>
 8010b9a:	bf00      	nop
 8010b9c:	24000060 	.word	0x24000060
 8010ba0:	08011875 	.word	0x08011875
 8010ba4:	24000070 	.word	0x24000070

08010ba8 <cleanup_stdio>:
 8010ba8:	6841      	ldr	r1, [r0, #4]
 8010baa:	4b0c      	ldr	r3, [pc, #48]	@ (8010bdc <cleanup_stdio+0x34>)
 8010bac:	4299      	cmp	r1, r3
 8010bae:	b510      	push	{r4, lr}
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	d001      	beq.n	8010bb8 <cleanup_stdio+0x10>
 8010bb4:	f000 fe5e 	bl	8011874 <_fflush_r>
 8010bb8:	68a1      	ldr	r1, [r4, #8]
 8010bba:	4b09      	ldr	r3, [pc, #36]	@ (8010be0 <cleanup_stdio+0x38>)
 8010bbc:	4299      	cmp	r1, r3
 8010bbe:	d002      	beq.n	8010bc6 <cleanup_stdio+0x1e>
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f000 fe57 	bl	8011874 <_fflush_r>
 8010bc6:	68e1      	ldr	r1, [r4, #12]
 8010bc8:	4b06      	ldr	r3, [pc, #24]	@ (8010be4 <cleanup_stdio+0x3c>)
 8010bca:	4299      	cmp	r1, r3
 8010bcc:	d004      	beq.n	8010bd8 <cleanup_stdio+0x30>
 8010bce:	4620      	mov	r0, r4
 8010bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bd4:	f000 be4e 	b.w	8011874 <_fflush_r>
 8010bd8:	bd10      	pop	{r4, pc}
 8010bda:	bf00      	nop
 8010bdc:	24000c48 	.word	0x24000c48
 8010be0:	24000cb0 	.word	0x24000cb0
 8010be4:	24000d18 	.word	0x24000d18

08010be8 <global_stdio_init.part.0>:
 8010be8:	b510      	push	{r4, lr}
 8010bea:	4b0b      	ldr	r3, [pc, #44]	@ (8010c18 <global_stdio_init.part.0+0x30>)
 8010bec:	4c0b      	ldr	r4, [pc, #44]	@ (8010c1c <global_stdio_init.part.0+0x34>)
 8010bee:	4a0c      	ldr	r2, [pc, #48]	@ (8010c20 <global_stdio_init.part.0+0x38>)
 8010bf0:	601a      	str	r2, [r3, #0]
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	2104      	movs	r1, #4
 8010bf8:	f7ff ff94 	bl	8010b24 <std>
 8010bfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c00:	2201      	movs	r2, #1
 8010c02:	2109      	movs	r1, #9
 8010c04:	f7ff ff8e 	bl	8010b24 <std>
 8010c08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c0c:	2202      	movs	r2, #2
 8010c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c12:	2112      	movs	r1, #18
 8010c14:	f7ff bf86 	b.w	8010b24 <std>
 8010c18:	24000d80 	.word	0x24000d80
 8010c1c:	24000c48 	.word	0x24000c48
 8010c20:	08010b91 	.word	0x08010b91

08010c24 <__sfp_lock_acquire>:
 8010c24:	4801      	ldr	r0, [pc, #4]	@ (8010c2c <__sfp_lock_acquire+0x8>)
 8010c26:	f000 ba76 	b.w	8011116 <__retarget_lock_acquire_recursive>
 8010c2a:	bf00      	nop
 8010c2c:	24000d89 	.word	0x24000d89

08010c30 <__sfp_lock_release>:
 8010c30:	4801      	ldr	r0, [pc, #4]	@ (8010c38 <__sfp_lock_release+0x8>)
 8010c32:	f000 ba71 	b.w	8011118 <__retarget_lock_release_recursive>
 8010c36:	bf00      	nop
 8010c38:	24000d89 	.word	0x24000d89

08010c3c <__sinit>:
 8010c3c:	b510      	push	{r4, lr}
 8010c3e:	4604      	mov	r4, r0
 8010c40:	f7ff fff0 	bl	8010c24 <__sfp_lock_acquire>
 8010c44:	6a23      	ldr	r3, [r4, #32]
 8010c46:	b11b      	cbz	r3, 8010c50 <__sinit+0x14>
 8010c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c4c:	f7ff bff0 	b.w	8010c30 <__sfp_lock_release>
 8010c50:	4b04      	ldr	r3, [pc, #16]	@ (8010c64 <__sinit+0x28>)
 8010c52:	6223      	str	r3, [r4, #32]
 8010c54:	4b04      	ldr	r3, [pc, #16]	@ (8010c68 <__sinit+0x2c>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1f5      	bne.n	8010c48 <__sinit+0xc>
 8010c5c:	f7ff ffc4 	bl	8010be8 <global_stdio_init.part.0>
 8010c60:	e7f2      	b.n	8010c48 <__sinit+0xc>
 8010c62:	bf00      	nop
 8010c64:	08010ba9 	.word	0x08010ba9
 8010c68:	24000d80 	.word	0x24000d80

08010c6c <_fwalk_sglue>:
 8010c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c70:	4607      	mov	r7, r0
 8010c72:	4688      	mov	r8, r1
 8010c74:	4614      	mov	r4, r2
 8010c76:	2600      	movs	r6, #0
 8010c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8010c80:	d505      	bpl.n	8010c8e <_fwalk_sglue+0x22>
 8010c82:	6824      	ldr	r4, [r4, #0]
 8010c84:	2c00      	cmp	r4, #0
 8010c86:	d1f7      	bne.n	8010c78 <_fwalk_sglue+0xc>
 8010c88:	4630      	mov	r0, r6
 8010c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c8e:	89ab      	ldrh	r3, [r5, #12]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d907      	bls.n	8010ca4 <_fwalk_sglue+0x38>
 8010c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	d003      	beq.n	8010ca4 <_fwalk_sglue+0x38>
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	47c0      	blx	r8
 8010ca2:	4306      	orrs	r6, r0
 8010ca4:	3568      	adds	r5, #104	@ 0x68
 8010ca6:	e7e9      	b.n	8010c7c <_fwalk_sglue+0x10>

08010ca8 <iprintf>:
 8010ca8:	b40f      	push	{r0, r1, r2, r3}
 8010caa:	b507      	push	{r0, r1, r2, lr}
 8010cac:	4906      	ldr	r1, [pc, #24]	@ (8010cc8 <iprintf+0x20>)
 8010cae:	ab04      	add	r3, sp, #16
 8010cb0:	6808      	ldr	r0, [r1, #0]
 8010cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cb6:	6881      	ldr	r1, [r0, #8]
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	f000 fab1 	bl	8011220 <_vfiprintf_r>
 8010cbe:	b003      	add	sp, #12
 8010cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cc4:	b004      	add	sp, #16
 8010cc6:	4770      	bx	lr
 8010cc8:	2400006c 	.word	0x2400006c

08010ccc <putchar>:
 8010ccc:	4b02      	ldr	r3, [pc, #8]	@ (8010cd8 <putchar+0xc>)
 8010cce:	4601      	mov	r1, r0
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	6882      	ldr	r2, [r0, #8]
 8010cd4:	f000 be58 	b.w	8011988 <_putc_r>
 8010cd8:	2400006c 	.word	0x2400006c

08010cdc <_puts_r>:
 8010cdc:	6a03      	ldr	r3, [r0, #32]
 8010cde:	b570      	push	{r4, r5, r6, lr}
 8010ce0:	6884      	ldr	r4, [r0, #8]
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	460e      	mov	r6, r1
 8010ce6:	b90b      	cbnz	r3, 8010cec <_puts_r+0x10>
 8010ce8:	f7ff ffa8 	bl	8010c3c <__sinit>
 8010cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cee:	07db      	lsls	r3, r3, #31
 8010cf0:	d405      	bmi.n	8010cfe <_puts_r+0x22>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	0598      	lsls	r0, r3, #22
 8010cf6:	d402      	bmi.n	8010cfe <_puts_r+0x22>
 8010cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cfa:	f000 fa0c 	bl	8011116 <__retarget_lock_acquire_recursive>
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	0719      	lsls	r1, r3, #28
 8010d02:	d502      	bpl.n	8010d0a <_puts_r+0x2e>
 8010d04:	6923      	ldr	r3, [r4, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d135      	bne.n	8010d76 <_puts_r+0x9a>
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f000 f8c5 	bl	8010e9c <__swsetup_r>
 8010d12:	b380      	cbz	r0, 8010d76 <_puts_r+0x9a>
 8010d14:	f04f 35ff 	mov.w	r5, #4294967295
 8010d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d1a:	07da      	lsls	r2, r3, #31
 8010d1c:	d405      	bmi.n	8010d2a <_puts_r+0x4e>
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	059b      	lsls	r3, r3, #22
 8010d22:	d402      	bmi.n	8010d2a <_puts_r+0x4e>
 8010d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d26:	f000 f9f7 	bl	8011118 <__retarget_lock_release_recursive>
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	bd70      	pop	{r4, r5, r6, pc}
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da04      	bge.n	8010d3c <_puts_r+0x60>
 8010d32:	69a2      	ldr	r2, [r4, #24]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	dc17      	bgt.n	8010d68 <_puts_r+0x8c>
 8010d38:	290a      	cmp	r1, #10
 8010d3a:	d015      	beq.n	8010d68 <_puts_r+0x8c>
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	6022      	str	r2, [r4, #0]
 8010d42:	7019      	strb	r1, [r3, #0]
 8010d44:	68a3      	ldr	r3, [r4, #8]
 8010d46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	60a3      	str	r3, [r4, #8]
 8010d4e:	2900      	cmp	r1, #0
 8010d50:	d1ed      	bne.n	8010d2e <_puts_r+0x52>
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	da11      	bge.n	8010d7a <_puts_r+0x9e>
 8010d56:	4622      	mov	r2, r4
 8010d58:	210a      	movs	r1, #10
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	f000 f85f 	bl	8010e1e <__swbuf_r>
 8010d60:	3001      	adds	r0, #1
 8010d62:	d0d7      	beq.n	8010d14 <_puts_r+0x38>
 8010d64:	250a      	movs	r5, #10
 8010d66:	e7d7      	b.n	8010d18 <_puts_r+0x3c>
 8010d68:	4622      	mov	r2, r4
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f000 f857 	bl	8010e1e <__swbuf_r>
 8010d70:	3001      	adds	r0, #1
 8010d72:	d1e7      	bne.n	8010d44 <_puts_r+0x68>
 8010d74:	e7ce      	b.n	8010d14 <_puts_r+0x38>
 8010d76:	3e01      	subs	r6, #1
 8010d78:	e7e4      	b.n	8010d44 <_puts_r+0x68>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	1c5a      	adds	r2, r3, #1
 8010d7e:	6022      	str	r2, [r4, #0]
 8010d80:	220a      	movs	r2, #10
 8010d82:	701a      	strb	r2, [r3, #0]
 8010d84:	e7ee      	b.n	8010d64 <_puts_r+0x88>
	...

08010d88 <puts>:
 8010d88:	4b02      	ldr	r3, [pc, #8]	@ (8010d94 <puts+0xc>)
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	f7ff bfa5 	b.w	8010cdc <_puts_r>
 8010d92:	bf00      	nop
 8010d94:	2400006c 	.word	0x2400006c

08010d98 <__sread>:
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da0:	f000 f946 	bl	8011030 <_read_r>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	bfab      	itete	ge
 8010da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010daa:	89a3      	ldrhlt	r3, [r4, #12]
 8010dac:	181b      	addge	r3, r3, r0
 8010dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010db2:	bfac      	ite	ge
 8010db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010db6:	81a3      	strhlt	r3, [r4, #12]
 8010db8:	bd10      	pop	{r4, pc}

08010dba <__swrite>:
 8010dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	898b      	ldrh	r3, [r1, #12]
 8010dc2:	05db      	lsls	r3, r3, #23
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	4616      	mov	r6, r2
 8010dca:	d505      	bpl.n	8010dd8 <__swrite+0x1e>
 8010dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f000 f91a 	bl	801100c <_lseek_r>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	4632      	mov	r2, r6
 8010de6:	463b      	mov	r3, r7
 8010de8:	4628      	mov	r0, r5
 8010dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dee:	f000 b955 	b.w	801109c <_write_r>

08010df2 <__sseek>:
 8010df2:	b510      	push	{r4, lr}
 8010df4:	460c      	mov	r4, r1
 8010df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfa:	f000 f907 	bl	801100c <_lseek_r>
 8010dfe:	1c43      	adds	r3, r0, #1
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	bf15      	itete	ne
 8010e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e0e:	81a3      	strheq	r3, [r4, #12]
 8010e10:	bf18      	it	ne
 8010e12:	81a3      	strhne	r3, [r4, #12]
 8010e14:	bd10      	pop	{r4, pc}

08010e16 <__sclose>:
 8010e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e1a:	f000 b8e7 	b.w	8010fec <_close_r>

08010e1e <__swbuf_r>:
 8010e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e20:	460e      	mov	r6, r1
 8010e22:	4614      	mov	r4, r2
 8010e24:	4605      	mov	r5, r0
 8010e26:	b118      	cbz	r0, 8010e30 <__swbuf_r+0x12>
 8010e28:	6a03      	ldr	r3, [r0, #32]
 8010e2a:	b90b      	cbnz	r3, 8010e30 <__swbuf_r+0x12>
 8010e2c:	f7ff ff06 	bl	8010c3c <__sinit>
 8010e30:	69a3      	ldr	r3, [r4, #24]
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	89a3      	ldrh	r3, [r4, #12]
 8010e36:	071a      	lsls	r2, r3, #28
 8010e38:	d501      	bpl.n	8010e3e <__swbuf_r+0x20>
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	b943      	cbnz	r3, 8010e50 <__swbuf_r+0x32>
 8010e3e:	4621      	mov	r1, r4
 8010e40:	4628      	mov	r0, r5
 8010e42:	f000 f82b 	bl	8010e9c <__swsetup_r>
 8010e46:	b118      	cbz	r0, 8010e50 <__swbuf_r+0x32>
 8010e48:	f04f 37ff 	mov.w	r7, #4294967295
 8010e4c:	4638      	mov	r0, r7
 8010e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	6922      	ldr	r2, [r4, #16]
 8010e54:	1a98      	subs	r0, r3, r2
 8010e56:	6963      	ldr	r3, [r4, #20]
 8010e58:	b2f6      	uxtb	r6, r6
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	4637      	mov	r7, r6
 8010e5e:	dc05      	bgt.n	8010e6c <__swbuf_r+0x4e>
 8010e60:	4621      	mov	r1, r4
 8010e62:	4628      	mov	r0, r5
 8010e64:	f000 fd06 	bl	8011874 <_fflush_r>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d1ed      	bne.n	8010e48 <__swbuf_r+0x2a>
 8010e6c:	68a3      	ldr	r3, [r4, #8]
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	60a3      	str	r3, [r4, #8]
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	6022      	str	r2, [r4, #0]
 8010e78:	701e      	strb	r6, [r3, #0]
 8010e7a:	6962      	ldr	r2, [r4, #20]
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d004      	beq.n	8010e8c <__swbuf_r+0x6e>
 8010e82:	89a3      	ldrh	r3, [r4, #12]
 8010e84:	07db      	lsls	r3, r3, #31
 8010e86:	d5e1      	bpl.n	8010e4c <__swbuf_r+0x2e>
 8010e88:	2e0a      	cmp	r6, #10
 8010e8a:	d1df      	bne.n	8010e4c <__swbuf_r+0x2e>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f000 fcf0 	bl	8011874 <_fflush_r>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0d9      	beq.n	8010e4c <__swbuf_r+0x2e>
 8010e98:	e7d6      	b.n	8010e48 <__swbuf_r+0x2a>
	...

08010e9c <__swsetup_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4b29      	ldr	r3, [pc, #164]	@ (8010f44 <__swsetup_r+0xa8>)
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	6818      	ldr	r0, [r3, #0]
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	b118      	cbz	r0, 8010eb0 <__swsetup_r+0x14>
 8010ea8:	6a03      	ldr	r3, [r0, #32]
 8010eaa:	b90b      	cbnz	r3, 8010eb0 <__swsetup_r+0x14>
 8010eac:	f7ff fec6 	bl	8010c3c <__sinit>
 8010eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb4:	0719      	lsls	r1, r3, #28
 8010eb6:	d422      	bmi.n	8010efe <__swsetup_r+0x62>
 8010eb8:	06da      	lsls	r2, r3, #27
 8010eba:	d407      	bmi.n	8010ecc <__swsetup_r+0x30>
 8010ebc:	2209      	movs	r2, #9
 8010ebe:	602a      	str	r2, [r5, #0]
 8010ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ec4:	81a3      	strh	r3, [r4, #12]
 8010ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eca:	e033      	b.n	8010f34 <__swsetup_r+0x98>
 8010ecc:	0758      	lsls	r0, r3, #29
 8010ece:	d512      	bpl.n	8010ef6 <__swsetup_r+0x5a>
 8010ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ed2:	b141      	cbz	r1, 8010ee6 <__swsetup_r+0x4a>
 8010ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ed8:	4299      	cmp	r1, r3
 8010eda:	d002      	beq.n	8010ee2 <__swsetup_r+0x46>
 8010edc:	4628      	mov	r0, r5
 8010ede:	f000 f92b 	bl	8011138 <_free_r>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ee6:	89a3      	ldrh	r3, [r4, #12]
 8010ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010eec:	81a3      	strh	r3, [r4, #12]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	6063      	str	r3, [r4, #4]
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	6023      	str	r3, [r4, #0]
 8010ef6:	89a3      	ldrh	r3, [r4, #12]
 8010ef8:	f043 0308 	orr.w	r3, r3, #8
 8010efc:	81a3      	strh	r3, [r4, #12]
 8010efe:	6923      	ldr	r3, [r4, #16]
 8010f00:	b94b      	cbnz	r3, 8010f16 <__swsetup_r+0x7a>
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f0c:	d003      	beq.n	8010f16 <__swsetup_r+0x7a>
 8010f0e:	4621      	mov	r1, r4
 8010f10:	4628      	mov	r0, r5
 8010f12:	f000 fcfd 	bl	8011910 <__smakebuf_r>
 8010f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1a:	f013 0201 	ands.w	r2, r3, #1
 8010f1e:	d00a      	beq.n	8010f36 <__swsetup_r+0x9a>
 8010f20:	2200      	movs	r2, #0
 8010f22:	60a2      	str	r2, [r4, #8]
 8010f24:	6962      	ldr	r2, [r4, #20]
 8010f26:	4252      	negs	r2, r2
 8010f28:	61a2      	str	r2, [r4, #24]
 8010f2a:	6922      	ldr	r2, [r4, #16]
 8010f2c:	b942      	cbnz	r2, 8010f40 <__swsetup_r+0xa4>
 8010f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f32:	d1c5      	bne.n	8010ec0 <__swsetup_r+0x24>
 8010f34:	bd38      	pop	{r3, r4, r5, pc}
 8010f36:	0799      	lsls	r1, r3, #30
 8010f38:	bf58      	it	pl
 8010f3a:	6962      	ldrpl	r2, [r4, #20]
 8010f3c:	60a2      	str	r2, [r4, #8]
 8010f3e:	e7f4      	b.n	8010f2a <__swsetup_r+0x8e>
 8010f40:	2000      	movs	r0, #0
 8010f42:	e7f7      	b.n	8010f34 <__swsetup_r+0x98>
 8010f44:	2400006c 	.word	0x2400006c

08010f48 <memmove>:
 8010f48:	4288      	cmp	r0, r1
 8010f4a:	b510      	push	{r4, lr}
 8010f4c:	eb01 0402 	add.w	r4, r1, r2
 8010f50:	d902      	bls.n	8010f58 <memmove+0x10>
 8010f52:	4284      	cmp	r4, r0
 8010f54:	4623      	mov	r3, r4
 8010f56:	d807      	bhi.n	8010f68 <memmove+0x20>
 8010f58:	1e43      	subs	r3, r0, #1
 8010f5a:	42a1      	cmp	r1, r4
 8010f5c:	d008      	beq.n	8010f70 <memmove+0x28>
 8010f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f66:	e7f8      	b.n	8010f5a <memmove+0x12>
 8010f68:	4402      	add	r2, r0
 8010f6a:	4601      	mov	r1, r0
 8010f6c:	428a      	cmp	r2, r1
 8010f6e:	d100      	bne.n	8010f72 <memmove+0x2a>
 8010f70:	bd10      	pop	{r4, pc}
 8010f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f7a:	e7f7      	b.n	8010f6c <memmove+0x24>

08010f7c <memset>:
 8010f7c:	4402      	add	r2, r0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d100      	bne.n	8010f86 <memset+0xa>
 8010f84:	4770      	bx	lr
 8010f86:	f803 1b01 	strb.w	r1, [r3], #1
 8010f8a:	e7f9      	b.n	8010f80 <memset+0x4>

08010f8c <_raise_r>:
 8010f8c:	291f      	cmp	r1, #31
 8010f8e:	b538      	push	{r3, r4, r5, lr}
 8010f90:	4605      	mov	r5, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	d904      	bls.n	8010fa0 <_raise_r+0x14>
 8010f96:	2316      	movs	r3, #22
 8010f98:	6003      	str	r3, [r0, #0]
 8010f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fa2:	b112      	cbz	r2, 8010faa <_raise_r+0x1e>
 8010fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fa8:	b94b      	cbnz	r3, 8010fbe <_raise_r+0x32>
 8010faa:	4628      	mov	r0, r5
 8010fac:	f000 f864 	bl	8011078 <_getpid_r>
 8010fb0:	4622      	mov	r2, r4
 8010fb2:	4601      	mov	r1, r0
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fba:	f000 b84b 	b.w	8011054 <_kill_r>
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d00a      	beq.n	8010fd8 <_raise_r+0x4c>
 8010fc2:	1c59      	adds	r1, r3, #1
 8010fc4:	d103      	bne.n	8010fce <_raise_r+0x42>
 8010fc6:	2316      	movs	r3, #22
 8010fc8:	6003      	str	r3, [r0, #0]
 8010fca:	2001      	movs	r0, #1
 8010fcc:	e7e7      	b.n	8010f9e <_raise_r+0x12>
 8010fce:	2100      	movs	r1, #0
 8010fd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	4798      	blx	r3
 8010fd8:	2000      	movs	r0, #0
 8010fda:	e7e0      	b.n	8010f9e <_raise_r+0x12>

08010fdc <raise>:
 8010fdc:	4b02      	ldr	r3, [pc, #8]	@ (8010fe8 <raise+0xc>)
 8010fde:	4601      	mov	r1, r0
 8010fe0:	6818      	ldr	r0, [r3, #0]
 8010fe2:	f7ff bfd3 	b.w	8010f8c <_raise_r>
 8010fe6:	bf00      	nop
 8010fe8:	2400006c 	.word	0x2400006c

08010fec <_close_r>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4d06      	ldr	r5, [pc, #24]	@ (8011008 <_close_r+0x1c>)
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	4608      	mov	r0, r1
 8010ff6:	602b      	str	r3, [r5, #0]
 8010ff8:	f7f2 fc2e 	bl	8003858 <_close>
 8010ffc:	1c43      	adds	r3, r0, #1
 8010ffe:	d102      	bne.n	8011006 <_close_r+0x1a>
 8011000:	682b      	ldr	r3, [r5, #0]
 8011002:	b103      	cbz	r3, 8011006 <_close_r+0x1a>
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	24000d84 	.word	0x24000d84

0801100c <_lseek_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4d07      	ldr	r5, [pc, #28]	@ (801102c <_lseek_r+0x20>)
 8011010:	4604      	mov	r4, r0
 8011012:	4608      	mov	r0, r1
 8011014:	4611      	mov	r1, r2
 8011016:	2200      	movs	r2, #0
 8011018:	602a      	str	r2, [r5, #0]
 801101a:	461a      	mov	r2, r3
 801101c:	f7f2 fc43 	bl	80038a6 <_lseek>
 8011020:	1c43      	adds	r3, r0, #1
 8011022:	d102      	bne.n	801102a <_lseek_r+0x1e>
 8011024:	682b      	ldr	r3, [r5, #0]
 8011026:	b103      	cbz	r3, 801102a <_lseek_r+0x1e>
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	24000d84 	.word	0x24000d84

08011030 <_read_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4d07      	ldr	r5, [pc, #28]	@ (8011050 <_read_r+0x20>)
 8011034:	4604      	mov	r4, r0
 8011036:	4608      	mov	r0, r1
 8011038:	4611      	mov	r1, r2
 801103a:	2200      	movs	r2, #0
 801103c:	602a      	str	r2, [r5, #0]
 801103e:	461a      	mov	r2, r3
 8011040:	f7f2 fbd1 	bl	80037e6 <_read>
 8011044:	1c43      	adds	r3, r0, #1
 8011046:	d102      	bne.n	801104e <_read_r+0x1e>
 8011048:	682b      	ldr	r3, [r5, #0]
 801104a:	b103      	cbz	r3, 801104e <_read_r+0x1e>
 801104c:	6023      	str	r3, [r4, #0]
 801104e:	bd38      	pop	{r3, r4, r5, pc}
 8011050:	24000d84 	.word	0x24000d84

08011054 <_kill_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d07      	ldr	r5, [pc, #28]	@ (8011074 <_kill_r+0x20>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	4611      	mov	r1, r2
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	f7f2 fba5 	bl	80037b0 <_kill>
 8011066:	1c43      	adds	r3, r0, #1
 8011068:	d102      	bne.n	8011070 <_kill_r+0x1c>
 801106a:	682b      	ldr	r3, [r5, #0]
 801106c:	b103      	cbz	r3, 8011070 <_kill_r+0x1c>
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	bd38      	pop	{r3, r4, r5, pc}
 8011072:	bf00      	nop
 8011074:	24000d84 	.word	0x24000d84

08011078 <_getpid_r>:
 8011078:	f7f2 bb92 	b.w	80037a0 <_getpid>

0801107c <_sbrk_r>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4d06      	ldr	r5, [pc, #24]	@ (8011098 <_sbrk_r+0x1c>)
 8011080:	2300      	movs	r3, #0
 8011082:	4604      	mov	r4, r0
 8011084:	4608      	mov	r0, r1
 8011086:	602b      	str	r3, [r5, #0]
 8011088:	f7f2 fc1a 	bl	80038c0 <_sbrk>
 801108c:	1c43      	adds	r3, r0, #1
 801108e:	d102      	bne.n	8011096 <_sbrk_r+0x1a>
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	b103      	cbz	r3, 8011096 <_sbrk_r+0x1a>
 8011094:	6023      	str	r3, [r4, #0]
 8011096:	bd38      	pop	{r3, r4, r5, pc}
 8011098:	24000d84 	.word	0x24000d84

0801109c <_write_r>:
 801109c:	b538      	push	{r3, r4, r5, lr}
 801109e:	4d07      	ldr	r5, [pc, #28]	@ (80110bc <_write_r+0x20>)
 80110a0:	4604      	mov	r4, r0
 80110a2:	4608      	mov	r0, r1
 80110a4:	4611      	mov	r1, r2
 80110a6:	2200      	movs	r2, #0
 80110a8:	602a      	str	r2, [r5, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	f7f2 fbb8 	bl	8003820 <_write>
 80110b0:	1c43      	adds	r3, r0, #1
 80110b2:	d102      	bne.n	80110ba <_write_r+0x1e>
 80110b4:	682b      	ldr	r3, [r5, #0]
 80110b6:	b103      	cbz	r3, 80110ba <_write_r+0x1e>
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	bd38      	pop	{r3, r4, r5, pc}
 80110bc:	24000d84 	.word	0x24000d84

080110c0 <__errno>:
 80110c0:	4b01      	ldr	r3, [pc, #4]	@ (80110c8 <__errno+0x8>)
 80110c2:	6818      	ldr	r0, [r3, #0]
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	2400006c 	.word	0x2400006c

080110cc <__libc_init_array>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	4d0d      	ldr	r5, [pc, #52]	@ (8011104 <__libc_init_array+0x38>)
 80110d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011108 <__libc_init_array+0x3c>)
 80110d2:	1b64      	subs	r4, r4, r5
 80110d4:	10a4      	asrs	r4, r4, #2
 80110d6:	2600      	movs	r6, #0
 80110d8:	42a6      	cmp	r6, r4
 80110da:	d109      	bne.n	80110f0 <__libc_init_array+0x24>
 80110dc:	4d0b      	ldr	r5, [pc, #44]	@ (801110c <__libc_init_array+0x40>)
 80110de:	4c0c      	ldr	r4, [pc, #48]	@ (8011110 <__libc_init_array+0x44>)
 80110e0:	f000 fca8 	bl	8011a34 <_init>
 80110e4:	1b64      	subs	r4, r4, r5
 80110e6:	10a4      	asrs	r4, r4, #2
 80110e8:	2600      	movs	r6, #0
 80110ea:	42a6      	cmp	r6, r4
 80110ec:	d105      	bne.n	80110fa <__libc_init_array+0x2e>
 80110ee:	bd70      	pop	{r4, r5, r6, pc}
 80110f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110f4:	4798      	blx	r3
 80110f6:	3601      	adds	r6, #1
 80110f8:	e7ee      	b.n	80110d8 <__libc_init_array+0xc>
 80110fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80110fe:	4798      	blx	r3
 8011100:	3601      	adds	r6, #1
 8011102:	e7f2      	b.n	80110ea <__libc_init_array+0x1e>
 8011104:	08011f7c 	.word	0x08011f7c
 8011108:	08011f7c 	.word	0x08011f7c
 801110c:	08011f7c 	.word	0x08011f7c
 8011110:	08011f84 	.word	0x08011f84

08011114 <__retarget_lock_init_recursive>:
 8011114:	4770      	bx	lr

08011116 <__retarget_lock_acquire_recursive>:
 8011116:	4770      	bx	lr

08011118 <__retarget_lock_release_recursive>:
 8011118:	4770      	bx	lr

0801111a <memcpy>:
 801111a:	440a      	add	r2, r1
 801111c:	4291      	cmp	r1, r2
 801111e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011122:	d100      	bne.n	8011126 <memcpy+0xc>
 8011124:	4770      	bx	lr
 8011126:	b510      	push	{r4, lr}
 8011128:	f811 4b01 	ldrb.w	r4, [r1], #1
 801112c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011130:	4291      	cmp	r1, r2
 8011132:	d1f9      	bne.n	8011128 <memcpy+0xe>
 8011134:	bd10      	pop	{r4, pc}
	...

08011138 <_free_r>:
 8011138:	b538      	push	{r3, r4, r5, lr}
 801113a:	4605      	mov	r5, r0
 801113c:	2900      	cmp	r1, #0
 801113e:	d041      	beq.n	80111c4 <_free_r+0x8c>
 8011140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011144:	1f0c      	subs	r4, r1, #4
 8011146:	2b00      	cmp	r3, #0
 8011148:	bfb8      	it	lt
 801114a:	18e4      	addlt	r4, r4, r3
 801114c:	f7ff fcde 	bl	8010b0c <__malloc_lock>
 8011150:	4a1d      	ldr	r2, [pc, #116]	@ (80111c8 <_free_r+0x90>)
 8011152:	6813      	ldr	r3, [r2, #0]
 8011154:	b933      	cbnz	r3, 8011164 <_free_r+0x2c>
 8011156:	6063      	str	r3, [r4, #4]
 8011158:	6014      	str	r4, [r2, #0]
 801115a:	4628      	mov	r0, r5
 801115c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011160:	f7ff bcda 	b.w	8010b18 <__malloc_unlock>
 8011164:	42a3      	cmp	r3, r4
 8011166:	d908      	bls.n	801117a <_free_r+0x42>
 8011168:	6820      	ldr	r0, [r4, #0]
 801116a:	1821      	adds	r1, r4, r0
 801116c:	428b      	cmp	r3, r1
 801116e:	bf01      	itttt	eq
 8011170:	6819      	ldreq	r1, [r3, #0]
 8011172:	685b      	ldreq	r3, [r3, #4]
 8011174:	1809      	addeq	r1, r1, r0
 8011176:	6021      	streq	r1, [r4, #0]
 8011178:	e7ed      	b.n	8011156 <_free_r+0x1e>
 801117a:	461a      	mov	r2, r3
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	b10b      	cbz	r3, 8011184 <_free_r+0x4c>
 8011180:	42a3      	cmp	r3, r4
 8011182:	d9fa      	bls.n	801117a <_free_r+0x42>
 8011184:	6811      	ldr	r1, [r2, #0]
 8011186:	1850      	adds	r0, r2, r1
 8011188:	42a0      	cmp	r0, r4
 801118a:	d10b      	bne.n	80111a4 <_free_r+0x6c>
 801118c:	6820      	ldr	r0, [r4, #0]
 801118e:	4401      	add	r1, r0
 8011190:	1850      	adds	r0, r2, r1
 8011192:	4283      	cmp	r3, r0
 8011194:	6011      	str	r1, [r2, #0]
 8011196:	d1e0      	bne.n	801115a <_free_r+0x22>
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	6053      	str	r3, [r2, #4]
 801119e:	4408      	add	r0, r1
 80111a0:	6010      	str	r0, [r2, #0]
 80111a2:	e7da      	b.n	801115a <_free_r+0x22>
 80111a4:	d902      	bls.n	80111ac <_free_r+0x74>
 80111a6:	230c      	movs	r3, #12
 80111a8:	602b      	str	r3, [r5, #0]
 80111aa:	e7d6      	b.n	801115a <_free_r+0x22>
 80111ac:	6820      	ldr	r0, [r4, #0]
 80111ae:	1821      	adds	r1, r4, r0
 80111b0:	428b      	cmp	r3, r1
 80111b2:	bf04      	itt	eq
 80111b4:	6819      	ldreq	r1, [r3, #0]
 80111b6:	685b      	ldreq	r3, [r3, #4]
 80111b8:	6063      	str	r3, [r4, #4]
 80111ba:	bf04      	itt	eq
 80111bc:	1809      	addeq	r1, r1, r0
 80111be:	6021      	streq	r1, [r4, #0]
 80111c0:	6054      	str	r4, [r2, #4]
 80111c2:	e7ca      	b.n	801115a <_free_r+0x22>
 80111c4:	bd38      	pop	{r3, r4, r5, pc}
 80111c6:	bf00      	nop
 80111c8:	24000c44 	.word	0x24000c44

080111cc <__sfputc_r>:
 80111cc:	6893      	ldr	r3, [r2, #8]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	b410      	push	{r4}
 80111d4:	6093      	str	r3, [r2, #8]
 80111d6:	da08      	bge.n	80111ea <__sfputc_r+0x1e>
 80111d8:	6994      	ldr	r4, [r2, #24]
 80111da:	42a3      	cmp	r3, r4
 80111dc:	db01      	blt.n	80111e2 <__sfputc_r+0x16>
 80111de:	290a      	cmp	r1, #10
 80111e0:	d103      	bne.n	80111ea <__sfputc_r+0x1e>
 80111e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e6:	f7ff be1a 	b.w	8010e1e <__swbuf_r>
 80111ea:	6813      	ldr	r3, [r2, #0]
 80111ec:	1c58      	adds	r0, r3, #1
 80111ee:	6010      	str	r0, [r2, #0]
 80111f0:	7019      	strb	r1, [r3, #0]
 80111f2:	4608      	mov	r0, r1
 80111f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <__sfputs_r>:
 80111fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111fc:	4606      	mov	r6, r0
 80111fe:	460f      	mov	r7, r1
 8011200:	4614      	mov	r4, r2
 8011202:	18d5      	adds	r5, r2, r3
 8011204:	42ac      	cmp	r4, r5
 8011206:	d101      	bne.n	801120c <__sfputs_r+0x12>
 8011208:	2000      	movs	r0, #0
 801120a:	e007      	b.n	801121c <__sfputs_r+0x22>
 801120c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011210:	463a      	mov	r2, r7
 8011212:	4630      	mov	r0, r6
 8011214:	f7ff ffda 	bl	80111cc <__sfputc_r>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d1f3      	bne.n	8011204 <__sfputs_r+0xa>
 801121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011220 <_vfiprintf_r>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	460d      	mov	r5, r1
 8011226:	b09d      	sub	sp, #116	@ 0x74
 8011228:	4614      	mov	r4, r2
 801122a:	4698      	mov	r8, r3
 801122c:	4606      	mov	r6, r0
 801122e:	b118      	cbz	r0, 8011238 <_vfiprintf_r+0x18>
 8011230:	6a03      	ldr	r3, [r0, #32]
 8011232:	b90b      	cbnz	r3, 8011238 <_vfiprintf_r+0x18>
 8011234:	f7ff fd02 	bl	8010c3c <__sinit>
 8011238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801123a:	07d9      	lsls	r1, r3, #31
 801123c:	d405      	bmi.n	801124a <_vfiprintf_r+0x2a>
 801123e:	89ab      	ldrh	r3, [r5, #12]
 8011240:	059a      	lsls	r2, r3, #22
 8011242:	d402      	bmi.n	801124a <_vfiprintf_r+0x2a>
 8011244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011246:	f7ff ff66 	bl	8011116 <__retarget_lock_acquire_recursive>
 801124a:	89ab      	ldrh	r3, [r5, #12]
 801124c:	071b      	lsls	r3, r3, #28
 801124e:	d501      	bpl.n	8011254 <_vfiprintf_r+0x34>
 8011250:	692b      	ldr	r3, [r5, #16]
 8011252:	b99b      	cbnz	r3, 801127c <_vfiprintf_r+0x5c>
 8011254:	4629      	mov	r1, r5
 8011256:	4630      	mov	r0, r6
 8011258:	f7ff fe20 	bl	8010e9c <__swsetup_r>
 801125c:	b170      	cbz	r0, 801127c <_vfiprintf_r+0x5c>
 801125e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011260:	07dc      	lsls	r4, r3, #31
 8011262:	d504      	bpl.n	801126e <_vfiprintf_r+0x4e>
 8011264:	f04f 30ff 	mov.w	r0, #4294967295
 8011268:	b01d      	add	sp, #116	@ 0x74
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126e:	89ab      	ldrh	r3, [r5, #12]
 8011270:	0598      	lsls	r0, r3, #22
 8011272:	d4f7      	bmi.n	8011264 <_vfiprintf_r+0x44>
 8011274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011276:	f7ff ff4f 	bl	8011118 <__retarget_lock_release_recursive>
 801127a:	e7f3      	b.n	8011264 <_vfiprintf_r+0x44>
 801127c:	2300      	movs	r3, #0
 801127e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011280:	2320      	movs	r3, #32
 8011282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011286:	f8cd 800c 	str.w	r8, [sp, #12]
 801128a:	2330      	movs	r3, #48	@ 0x30
 801128c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801143c <_vfiprintf_r+0x21c>
 8011290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011294:	f04f 0901 	mov.w	r9, #1
 8011298:	4623      	mov	r3, r4
 801129a:	469a      	mov	sl, r3
 801129c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112a0:	b10a      	cbz	r2, 80112a6 <_vfiprintf_r+0x86>
 80112a2:	2a25      	cmp	r2, #37	@ 0x25
 80112a4:	d1f9      	bne.n	801129a <_vfiprintf_r+0x7a>
 80112a6:	ebba 0b04 	subs.w	fp, sl, r4
 80112aa:	d00b      	beq.n	80112c4 <_vfiprintf_r+0xa4>
 80112ac:	465b      	mov	r3, fp
 80112ae:	4622      	mov	r2, r4
 80112b0:	4629      	mov	r1, r5
 80112b2:	4630      	mov	r0, r6
 80112b4:	f7ff ffa1 	bl	80111fa <__sfputs_r>
 80112b8:	3001      	adds	r0, #1
 80112ba:	f000 80a7 	beq.w	801140c <_vfiprintf_r+0x1ec>
 80112be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112c0:	445a      	add	r2, fp
 80112c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80112c4:	f89a 3000 	ldrb.w	r3, [sl]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 809f 	beq.w	801140c <_vfiprintf_r+0x1ec>
 80112ce:	2300      	movs	r3, #0
 80112d0:	f04f 32ff 	mov.w	r2, #4294967295
 80112d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112d8:	f10a 0a01 	add.w	sl, sl, #1
 80112dc:	9304      	str	r3, [sp, #16]
 80112de:	9307      	str	r3, [sp, #28]
 80112e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80112e6:	4654      	mov	r4, sl
 80112e8:	2205      	movs	r2, #5
 80112ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ee:	4853      	ldr	r0, [pc, #332]	@ (801143c <_vfiprintf_r+0x21c>)
 80112f0:	f7ee fff6 	bl	80002e0 <memchr>
 80112f4:	9a04      	ldr	r2, [sp, #16]
 80112f6:	b9d8      	cbnz	r0, 8011330 <_vfiprintf_r+0x110>
 80112f8:	06d1      	lsls	r1, r2, #27
 80112fa:	bf44      	itt	mi
 80112fc:	2320      	movmi	r3, #32
 80112fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011302:	0713      	lsls	r3, r2, #28
 8011304:	bf44      	itt	mi
 8011306:	232b      	movmi	r3, #43	@ 0x2b
 8011308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801130c:	f89a 3000 	ldrb.w	r3, [sl]
 8011310:	2b2a      	cmp	r3, #42	@ 0x2a
 8011312:	d015      	beq.n	8011340 <_vfiprintf_r+0x120>
 8011314:	9a07      	ldr	r2, [sp, #28]
 8011316:	4654      	mov	r4, sl
 8011318:	2000      	movs	r0, #0
 801131a:	f04f 0c0a 	mov.w	ip, #10
 801131e:	4621      	mov	r1, r4
 8011320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011324:	3b30      	subs	r3, #48	@ 0x30
 8011326:	2b09      	cmp	r3, #9
 8011328:	d94b      	bls.n	80113c2 <_vfiprintf_r+0x1a2>
 801132a:	b1b0      	cbz	r0, 801135a <_vfiprintf_r+0x13a>
 801132c:	9207      	str	r2, [sp, #28]
 801132e:	e014      	b.n	801135a <_vfiprintf_r+0x13a>
 8011330:	eba0 0308 	sub.w	r3, r0, r8
 8011334:	fa09 f303 	lsl.w	r3, r9, r3
 8011338:	4313      	orrs	r3, r2
 801133a:	9304      	str	r3, [sp, #16]
 801133c:	46a2      	mov	sl, r4
 801133e:	e7d2      	b.n	80112e6 <_vfiprintf_r+0xc6>
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	1d19      	adds	r1, r3, #4
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	9103      	str	r1, [sp, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	bfbb      	ittet	lt
 801134c:	425b      	neglt	r3, r3
 801134e:	f042 0202 	orrlt.w	r2, r2, #2
 8011352:	9307      	strge	r3, [sp, #28]
 8011354:	9307      	strlt	r3, [sp, #28]
 8011356:	bfb8      	it	lt
 8011358:	9204      	strlt	r2, [sp, #16]
 801135a:	7823      	ldrb	r3, [r4, #0]
 801135c:	2b2e      	cmp	r3, #46	@ 0x2e
 801135e:	d10a      	bne.n	8011376 <_vfiprintf_r+0x156>
 8011360:	7863      	ldrb	r3, [r4, #1]
 8011362:	2b2a      	cmp	r3, #42	@ 0x2a
 8011364:	d132      	bne.n	80113cc <_vfiprintf_r+0x1ac>
 8011366:	9b03      	ldr	r3, [sp, #12]
 8011368:	1d1a      	adds	r2, r3, #4
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	9203      	str	r2, [sp, #12]
 801136e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011372:	3402      	adds	r4, #2
 8011374:	9305      	str	r3, [sp, #20]
 8011376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801144c <_vfiprintf_r+0x22c>
 801137a:	7821      	ldrb	r1, [r4, #0]
 801137c:	2203      	movs	r2, #3
 801137e:	4650      	mov	r0, sl
 8011380:	f7ee ffae 	bl	80002e0 <memchr>
 8011384:	b138      	cbz	r0, 8011396 <_vfiprintf_r+0x176>
 8011386:	9b04      	ldr	r3, [sp, #16]
 8011388:	eba0 000a 	sub.w	r0, r0, sl
 801138c:	2240      	movs	r2, #64	@ 0x40
 801138e:	4082      	lsls	r2, r0
 8011390:	4313      	orrs	r3, r2
 8011392:	3401      	adds	r4, #1
 8011394:	9304      	str	r3, [sp, #16]
 8011396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139a:	4829      	ldr	r0, [pc, #164]	@ (8011440 <_vfiprintf_r+0x220>)
 801139c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113a0:	2206      	movs	r2, #6
 80113a2:	f7ee ff9d 	bl	80002e0 <memchr>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d03f      	beq.n	801142a <_vfiprintf_r+0x20a>
 80113aa:	4b26      	ldr	r3, [pc, #152]	@ (8011444 <_vfiprintf_r+0x224>)
 80113ac:	bb1b      	cbnz	r3, 80113f6 <_vfiprintf_r+0x1d6>
 80113ae:	9b03      	ldr	r3, [sp, #12]
 80113b0:	3307      	adds	r3, #7
 80113b2:	f023 0307 	bic.w	r3, r3, #7
 80113b6:	3308      	adds	r3, #8
 80113b8:	9303      	str	r3, [sp, #12]
 80113ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113bc:	443b      	add	r3, r7
 80113be:	9309      	str	r3, [sp, #36]	@ 0x24
 80113c0:	e76a      	b.n	8011298 <_vfiprintf_r+0x78>
 80113c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80113c6:	460c      	mov	r4, r1
 80113c8:	2001      	movs	r0, #1
 80113ca:	e7a8      	b.n	801131e <_vfiprintf_r+0xfe>
 80113cc:	2300      	movs	r3, #0
 80113ce:	3401      	adds	r4, #1
 80113d0:	9305      	str	r3, [sp, #20]
 80113d2:	4619      	mov	r1, r3
 80113d4:	f04f 0c0a 	mov.w	ip, #10
 80113d8:	4620      	mov	r0, r4
 80113da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113de:	3a30      	subs	r2, #48	@ 0x30
 80113e0:	2a09      	cmp	r2, #9
 80113e2:	d903      	bls.n	80113ec <_vfiprintf_r+0x1cc>
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d0c6      	beq.n	8011376 <_vfiprintf_r+0x156>
 80113e8:	9105      	str	r1, [sp, #20]
 80113ea:	e7c4      	b.n	8011376 <_vfiprintf_r+0x156>
 80113ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80113f0:	4604      	mov	r4, r0
 80113f2:	2301      	movs	r3, #1
 80113f4:	e7f0      	b.n	80113d8 <_vfiprintf_r+0x1b8>
 80113f6:	ab03      	add	r3, sp, #12
 80113f8:	9300      	str	r3, [sp, #0]
 80113fa:	462a      	mov	r2, r5
 80113fc:	4b12      	ldr	r3, [pc, #72]	@ (8011448 <_vfiprintf_r+0x228>)
 80113fe:	a904      	add	r1, sp, #16
 8011400:	4630      	mov	r0, r6
 8011402:	f3af 8000 	nop.w
 8011406:	4607      	mov	r7, r0
 8011408:	1c78      	adds	r0, r7, #1
 801140a:	d1d6      	bne.n	80113ba <_vfiprintf_r+0x19a>
 801140c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801140e:	07d9      	lsls	r1, r3, #31
 8011410:	d405      	bmi.n	801141e <_vfiprintf_r+0x1fe>
 8011412:	89ab      	ldrh	r3, [r5, #12]
 8011414:	059a      	lsls	r2, r3, #22
 8011416:	d402      	bmi.n	801141e <_vfiprintf_r+0x1fe>
 8011418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801141a:	f7ff fe7d 	bl	8011118 <__retarget_lock_release_recursive>
 801141e:	89ab      	ldrh	r3, [r5, #12]
 8011420:	065b      	lsls	r3, r3, #25
 8011422:	f53f af1f 	bmi.w	8011264 <_vfiprintf_r+0x44>
 8011426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011428:	e71e      	b.n	8011268 <_vfiprintf_r+0x48>
 801142a:	ab03      	add	r3, sp, #12
 801142c:	9300      	str	r3, [sp, #0]
 801142e:	462a      	mov	r2, r5
 8011430:	4b05      	ldr	r3, [pc, #20]	@ (8011448 <_vfiprintf_r+0x228>)
 8011432:	a904      	add	r1, sp, #16
 8011434:	4630      	mov	r0, r6
 8011436:	f000 f879 	bl	801152c <_printf_i>
 801143a:	e7e4      	b.n	8011406 <_vfiprintf_r+0x1e6>
 801143c:	08011f41 	.word	0x08011f41
 8011440:	08011f4b 	.word	0x08011f4b
 8011444:	00000000 	.word	0x00000000
 8011448:	080111fb 	.word	0x080111fb
 801144c:	08011f47 	.word	0x08011f47

08011450 <_printf_common>:
 8011450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011454:	4616      	mov	r6, r2
 8011456:	4698      	mov	r8, r3
 8011458:	688a      	ldr	r2, [r1, #8]
 801145a:	690b      	ldr	r3, [r1, #16]
 801145c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011460:	4293      	cmp	r3, r2
 8011462:	bfb8      	it	lt
 8011464:	4613      	movlt	r3, r2
 8011466:	6033      	str	r3, [r6, #0]
 8011468:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801146c:	4607      	mov	r7, r0
 801146e:	460c      	mov	r4, r1
 8011470:	b10a      	cbz	r2, 8011476 <_printf_common+0x26>
 8011472:	3301      	adds	r3, #1
 8011474:	6033      	str	r3, [r6, #0]
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	0699      	lsls	r1, r3, #26
 801147a:	bf42      	ittt	mi
 801147c:	6833      	ldrmi	r3, [r6, #0]
 801147e:	3302      	addmi	r3, #2
 8011480:	6033      	strmi	r3, [r6, #0]
 8011482:	6825      	ldr	r5, [r4, #0]
 8011484:	f015 0506 	ands.w	r5, r5, #6
 8011488:	d106      	bne.n	8011498 <_printf_common+0x48>
 801148a:	f104 0a19 	add.w	sl, r4, #25
 801148e:	68e3      	ldr	r3, [r4, #12]
 8011490:	6832      	ldr	r2, [r6, #0]
 8011492:	1a9b      	subs	r3, r3, r2
 8011494:	42ab      	cmp	r3, r5
 8011496:	dc26      	bgt.n	80114e6 <_printf_common+0x96>
 8011498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801149c:	6822      	ldr	r2, [r4, #0]
 801149e:	3b00      	subs	r3, #0
 80114a0:	bf18      	it	ne
 80114a2:	2301      	movne	r3, #1
 80114a4:	0692      	lsls	r2, r2, #26
 80114a6:	d42b      	bmi.n	8011500 <_printf_common+0xb0>
 80114a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114ac:	4641      	mov	r1, r8
 80114ae:	4638      	mov	r0, r7
 80114b0:	47c8      	blx	r9
 80114b2:	3001      	adds	r0, #1
 80114b4:	d01e      	beq.n	80114f4 <_printf_common+0xa4>
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	6922      	ldr	r2, [r4, #16]
 80114ba:	f003 0306 	and.w	r3, r3, #6
 80114be:	2b04      	cmp	r3, #4
 80114c0:	bf02      	ittt	eq
 80114c2:	68e5      	ldreq	r5, [r4, #12]
 80114c4:	6833      	ldreq	r3, [r6, #0]
 80114c6:	1aed      	subeq	r5, r5, r3
 80114c8:	68a3      	ldr	r3, [r4, #8]
 80114ca:	bf0c      	ite	eq
 80114cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114d0:	2500      	movne	r5, #0
 80114d2:	4293      	cmp	r3, r2
 80114d4:	bfc4      	itt	gt
 80114d6:	1a9b      	subgt	r3, r3, r2
 80114d8:	18ed      	addgt	r5, r5, r3
 80114da:	2600      	movs	r6, #0
 80114dc:	341a      	adds	r4, #26
 80114de:	42b5      	cmp	r5, r6
 80114e0:	d11a      	bne.n	8011518 <_printf_common+0xc8>
 80114e2:	2000      	movs	r0, #0
 80114e4:	e008      	b.n	80114f8 <_printf_common+0xa8>
 80114e6:	2301      	movs	r3, #1
 80114e8:	4652      	mov	r2, sl
 80114ea:	4641      	mov	r1, r8
 80114ec:	4638      	mov	r0, r7
 80114ee:	47c8      	blx	r9
 80114f0:	3001      	adds	r0, #1
 80114f2:	d103      	bne.n	80114fc <_printf_common+0xac>
 80114f4:	f04f 30ff 	mov.w	r0, #4294967295
 80114f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114fc:	3501      	adds	r5, #1
 80114fe:	e7c6      	b.n	801148e <_printf_common+0x3e>
 8011500:	18e1      	adds	r1, r4, r3
 8011502:	1c5a      	adds	r2, r3, #1
 8011504:	2030      	movs	r0, #48	@ 0x30
 8011506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801150a:	4422      	add	r2, r4
 801150c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011514:	3302      	adds	r3, #2
 8011516:	e7c7      	b.n	80114a8 <_printf_common+0x58>
 8011518:	2301      	movs	r3, #1
 801151a:	4622      	mov	r2, r4
 801151c:	4641      	mov	r1, r8
 801151e:	4638      	mov	r0, r7
 8011520:	47c8      	blx	r9
 8011522:	3001      	adds	r0, #1
 8011524:	d0e6      	beq.n	80114f4 <_printf_common+0xa4>
 8011526:	3601      	adds	r6, #1
 8011528:	e7d9      	b.n	80114de <_printf_common+0x8e>
	...

0801152c <_printf_i>:
 801152c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011530:	7e0f      	ldrb	r7, [r1, #24]
 8011532:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011534:	2f78      	cmp	r7, #120	@ 0x78
 8011536:	4691      	mov	r9, r2
 8011538:	4680      	mov	r8, r0
 801153a:	460c      	mov	r4, r1
 801153c:	469a      	mov	sl, r3
 801153e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011542:	d807      	bhi.n	8011554 <_printf_i+0x28>
 8011544:	2f62      	cmp	r7, #98	@ 0x62
 8011546:	d80a      	bhi.n	801155e <_printf_i+0x32>
 8011548:	2f00      	cmp	r7, #0
 801154a:	f000 80d2 	beq.w	80116f2 <_printf_i+0x1c6>
 801154e:	2f58      	cmp	r7, #88	@ 0x58
 8011550:	f000 80b9 	beq.w	80116c6 <_printf_i+0x19a>
 8011554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801155c:	e03a      	b.n	80115d4 <_printf_i+0xa8>
 801155e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011562:	2b15      	cmp	r3, #21
 8011564:	d8f6      	bhi.n	8011554 <_printf_i+0x28>
 8011566:	a101      	add	r1, pc, #4	@ (adr r1, 801156c <_printf_i+0x40>)
 8011568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801156c:	080115c5 	.word	0x080115c5
 8011570:	080115d9 	.word	0x080115d9
 8011574:	08011555 	.word	0x08011555
 8011578:	08011555 	.word	0x08011555
 801157c:	08011555 	.word	0x08011555
 8011580:	08011555 	.word	0x08011555
 8011584:	080115d9 	.word	0x080115d9
 8011588:	08011555 	.word	0x08011555
 801158c:	08011555 	.word	0x08011555
 8011590:	08011555 	.word	0x08011555
 8011594:	08011555 	.word	0x08011555
 8011598:	080116d9 	.word	0x080116d9
 801159c:	08011603 	.word	0x08011603
 80115a0:	08011693 	.word	0x08011693
 80115a4:	08011555 	.word	0x08011555
 80115a8:	08011555 	.word	0x08011555
 80115ac:	080116fb 	.word	0x080116fb
 80115b0:	08011555 	.word	0x08011555
 80115b4:	08011603 	.word	0x08011603
 80115b8:	08011555 	.word	0x08011555
 80115bc:	08011555 	.word	0x08011555
 80115c0:	0801169b 	.word	0x0801169b
 80115c4:	6833      	ldr	r3, [r6, #0]
 80115c6:	1d1a      	adds	r2, r3, #4
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	6032      	str	r2, [r6, #0]
 80115cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115d4:	2301      	movs	r3, #1
 80115d6:	e09d      	b.n	8011714 <_printf_i+0x1e8>
 80115d8:	6833      	ldr	r3, [r6, #0]
 80115da:	6820      	ldr	r0, [r4, #0]
 80115dc:	1d19      	adds	r1, r3, #4
 80115de:	6031      	str	r1, [r6, #0]
 80115e0:	0606      	lsls	r6, r0, #24
 80115e2:	d501      	bpl.n	80115e8 <_printf_i+0xbc>
 80115e4:	681d      	ldr	r5, [r3, #0]
 80115e6:	e003      	b.n	80115f0 <_printf_i+0xc4>
 80115e8:	0645      	lsls	r5, r0, #25
 80115ea:	d5fb      	bpl.n	80115e4 <_printf_i+0xb8>
 80115ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80115f0:	2d00      	cmp	r5, #0
 80115f2:	da03      	bge.n	80115fc <_printf_i+0xd0>
 80115f4:	232d      	movs	r3, #45	@ 0x2d
 80115f6:	426d      	negs	r5, r5
 80115f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115fc:	4859      	ldr	r0, [pc, #356]	@ (8011764 <_printf_i+0x238>)
 80115fe:	230a      	movs	r3, #10
 8011600:	e011      	b.n	8011626 <_printf_i+0xfa>
 8011602:	6821      	ldr	r1, [r4, #0]
 8011604:	6833      	ldr	r3, [r6, #0]
 8011606:	0608      	lsls	r0, r1, #24
 8011608:	f853 5b04 	ldr.w	r5, [r3], #4
 801160c:	d402      	bmi.n	8011614 <_printf_i+0xe8>
 801160e:	0649      	lsls	r1, r1, #25
 8011610:	bf48      	it	mi
 8011612:	b2ad      	uxthmi	r5, r5
 8011614:	2f6f      	cmp	r7, #111	@ 0x6f
 8011616:	4853      	ldr	r0, [pc, #332]	@ (8011764 <_printf_i+0x238>)
 8011618:	6033      	str	r3, [r6, #0]
 801161a:	bf14      	ite	ne
 801161c:	230a      	movne	r3, #10
 801161e:	2308      	moveq	r3, #8
 8011620:	2100      	movs	r1, #0
 8011622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011626:	6866      	ldr	r6, [r4, #4]
 8011628:	60a6      	str	r6, [r4, #8]
 801162a:	2e00      	cmp	r6, #0
 801162c:	bfa2      	ittt	ge
 801162e:	6821      	ldrge	r1, [r4, #0]
 8011630:	f021 0104 	bicge.w	r1, r1, #4
 8011634:	6021      	strge	r1, [r4, #0]
 8011636:	b90d      	cbnz	r5, 801163c <_printf_i+0x110>
 8011638:	2e00      	cmp	r6, #0
 801163a:	d04b      	beq.n	80116d4 <_printf_i+0x1a8>
 801163c:	4616      	mov	r6, r2
 801163e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011642:	fb03 5711 	mls	r7, r3, r1, r5
 8011646:	5dc7      	ldrb	r7, [r0, r7]
 8011648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801164c:	462f      	mov	r7, r5
 801164e:	42bb      	cmp	r3, r7
 8011650:	460d      	mov	r5, r1
 8011652:	d9f4      	bls.n	801163e <_printf_i+0x112>
 8011654:	2b08      	cmp	r3, #8
 8011656:	d10b      	bne.n	8011670 <_printf_i+0x144>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	07df      	lsls	r7, r3, #31
 801165c:	d508      	bpl.n	8011670 <_printf_i+0x144>
 801165e:	6923      	ldr	r3, [r4, #16]
 8011660:	6861      	ldr	r1, [r4, #4]
 8011662:	4299      	cmp	r1, r3
 8011664:	bfde      	ittt	le
 8011666:	2330      	movle	r3, #48	@ 0x30
 8011668:	f806 3c01 	strble.w	r3, [r6, #-1]
 801166c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011670:	1b92      	subs	r2, r2, r6
 8011672:	6122      	str	r2, [r4, #16]
 8011674:	f8cd a000 	str.w	sl, [sp]
 8011678:	464b      	mov	r3, r9
 801167a:	aa03      	add	r2, sp, #12
 801167c:	4621      	mov	r1, r4
 801167e:	4640      	mov	r0, r8
 8011680:	f7ff fee6 	bl	8011450 <_printf_common>
 8011684:	3001      	adds	r0, #1
 8011686:	d14a      	bne.n	801171e <_printf_i+0x1f2>
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	b004      	add	sp, #16
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	f043 0320 	orr.w	r3, r3, #32
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	4833      	ldr	r0, [pc, #204]	@ (8011768 <_printf_i+0x23c>)
 801169c:	2778      	movs	r7, #120	@ 0x78
 801169e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	6831      	ldr	r1, [r6, #0]
 80116a6:	061f      	lsls	r7, r3, #24
 80116a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80116ac:	d402      	bmi.n	80116b4 <_printf_i+0x188>
 80116ae:	065f      	lsls	r7, r3, #25
 80116b0:	bf48      	it	mi
 80116b2:	b2ad      	uxthmi	r5, r5
 80116b4:	6031      	str	r1, [r6, #0]
 80116b6:	07d9      	lsls	r1, r3, #31
 80116b8:	bf44      	itt	mi
 80116ba:	f043 0320 	orrmi.w	r3, r3, #32
 80116be:	6023      	strmi	r3, [r4, #0]
 80116c0:	b11d      	cbz	r5, 80116ca <_printf_i+0x19e>
 80116c2:	2310      	movs	r3, #16
 80116c4:	e7ac      	b.n	8011620 <_printf_i+0xf4>
 80116c6:	4827      	ldr	r0, [pc, #156]	@ (8011764 <_printf_i+0x238>)
 80116c8:	e7e9      	b.n	801169e <_printf_i+0x172>
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	f023 0320 	bic.w	r3, r3, #32
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	e7f6      	b.n	80116c2 <_printf_i+0x196>
 80116d4:	4616      	mov	r6, r2
 80116d6:	e7bd      	b.n	8011654 <_printf_i+0x128>
 80116d8:	6833      	ldr	r3, [r6, #0]
 80116da:	6825      	ldr	r5, [r4, #0]
 80116dc:	6961      	ldr	r1, [r4, #20]
 80116de:	1d18      	adds	r0, r3, #4
 80116e0:	6030      	str	r0, [r6, #0]
 80116e2:	062e      	lsls	r6, r5, #24
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	d501      	bpl.n	80116ec <_printf_i+0x1c0>
 80116e8:	6019      	str	r1, [r3, #0]
 80116ea:	e002      	b.n	80116f2 <_printf_i+0x1c6>
 80116ec:	0668      	lsls	r0, r5, #25
 80116ee:	d5fb      	bpl.n	80116e8 <_printf_i+0x1bc>
 80116f0:	8019      	strh	r1, [r3, #0]
 80116f2:	2300      	movs	r3, #0
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	4616      	mov	r6, r2
 80116f8:	e7bc      	b.n	8011674 <_printf_i+0x148>
 80116fa:	6833      	ldr	r3, [r6, #0]
 80116fc:	1d1a      	adds	r2, r3, #4
 80116fe:	6032      	str	r2, [r6, #0]
 8011700:	681e      	ldr	r6, [r3, #0]
 8011702:	6862      	ldr	r2, [r4, #4]
 8011704:	2100      	movs	r1, #0
 8011706:	4630      	mov	r0, r6
 8011708:	f7ee fdea 	bl	80002e0 <memchr>
 801170c:	b108      	cbz	r0, 8011712 <_printf_i+0x1e6>
 801170e:	1b80      	subs	r0, r0, r6
 8011710:	6060      	str	r0, [r4, #4]
 8011712:	6863      	ldr	r3, [r4, #4]
 8011714:	6123      	str	r3, [r4, #16]
 8011716:	2300      	movs	r3, #0
 8011718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801171c:	e7aa      	b.n	8011674 <_printf_i+0x148>
 801171e:	6923      	ldr	r3, [r4, #16]
 8011720:	4632      	mov	r2, r6
 8011722:	4649      	mov	r1, r9
 8011724:	4640      	mov	r0, r8
 8011726:	47d0      	blx	sl
 8011728:	3001      	adds	r0, #1
 801172a:	d0ad      	beq.n	8011688 <_printf_i+0x15c>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	079b      	lsls	r3, r3, #30
 8011730:	d413      	bmi.n	801175a <_printf_i+0x22e>
 8011732:	68e0      	ldr	r0, [r4, #12]
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	4298      	cmp	r0, r3
 8011738:	bfb8      	it	lt
 801173a:	4618      	movlt	r0, r3
 801173c:	e7a6      	b.n	801168c <_printf_i+0x160>
 801173e:	2301      	movs	r3, #1
 8011740:	4632      	mov	r2, r6
 8011742:	4649      	mov	r1, r9
 8011744:	4640      	mov	r0, r8
 8011746:	47d0      	blx	sl
 8011748:	3001      	adds	r0, #1
 801174a:	d09d      	beq.n	8011688 <_printf_i+0x15c>
 801174c:	3501      	adds	r5, #1
 801174e:	68e3      	ldr	r3, [r4, #12]
 8011750:	9903      	ldr	r1, [sp, #12]
 8011752:	1a5b      	subs	r3, r3, r1
 8011754:	42ab      	cmp	r3, r5
 8011756:	dcf2      	bgt.n	801173e <_printf_i+0x212>
 8011758:	e7eb      	b.n	8011732 <_printf_i+0x206>
 801175a:	2500      	movs	r5, #0
 801175c:	f104 0619 	add.w	r6, r4, #25
 8011760:	e7f5      	b.n	801174e <_printf_i+0x222>
 8011762:	bf00      	nop
 8011764:	08011f52 	.word	0x08011f52
 8011768:	08011f63 	.word	0x08011f63

0801176c <__sflush_r>:
 801176c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011774:	0716      	lsls	r6, r2, #28
 8011776:	4605      	mov	r5, r0
 8011778:	460c      	mov	r4, r1
 801177a:	d454      	bmi.n	8011826 <__sflush_r+0xba>
 801177c:	684b      	ldr	r3, [r1, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	dc02      	bgt.n	8011788 <__sflush_r+0x1c>
 8011782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011784:	2b00      	cmp	r3, #0
 8011786:	dd48      	ble.n	801181a <__sflush_r+0xae>
 8011788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801178a:	2e00      	cmp	r6, #0
 801178c:	d045      	beq.n	801181a <__sflush_r+0xae>
 801178e:	2300      	movs	r3, #0
 8011790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011794:	682f      	ldr	r7, [r5, #0]
 8011796:	6a21      	ldr	r1, [r4, #32]
 8011798:	602b      	str	r3, [r5, #0]
 801179a:	d030      	beq.n	80117fe <__sflush_r+0x92>
 801179c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	0759      	lsls	r1, r3, #29
 80117a2:	d505      	bpl.n	80117b0 <__sflush_r+0x44>
 80117a4:	6863      	ldr	r3, [r4, #4]
 80117a6:	1ad2      	subs	r2, r2, r3
 80117a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117aa:	b10b      	cbz	r3, 80117b0 <__sflush_r+0x44>
 80117ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117ae:	1ad2      	subs	r2, r2, r3
 80117b0:	2300      	movs	r3, #0
 80117b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117b4:	6a21      	ldr	r1, [r4, #32]
 80117b6:	4628      	mov	r0, r5
 80117b8:	47b0      	blx	r6
 80117ba:	1c43      	adds	r3, r0, #1
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	d106      	bne.n	80117ce <__sflush_r+0x62>
 80117c0:	6829      	ldr	r1, [r5, #0]
 80117c2:	291d      	cmp	r1, #29
 80117c4:	d82b      	bhi.n	801181e <__sflush_r+0xb2>
 80117c6:	4a2a      	ldr	r2, [pc, #168]	@ (8011870 <__sflush_r+0x104>)
 80117c8:	410a      	asrs	r2, r1
 80117ca:	07d6      	lsls	r6, r2, #31
 80117cc:	d427      	bmi.n	801181e <__sflush_r+0xb2>
 80117ce:	2200      	movs	r2, #0
 80117d0:	6062      	str	r2, [r4, #4]
 80117d2:	04d9      	lsls	r1, r3, #19
 80117d4:	6922      	ldr	r2, [r4, #16]
 80117d6:	6022      	str	r2, [r4, #0]
 80117d8:	d504      	bpl.n	80117e4 <__sflush_r+0x78>
 80117da:	1c42      	adds	r2, r0, #1
 80117dc:	d101      	bne.n	80117e2 <__sflush_r+0x76>
 80117de:	682b      	ldr	r3, [r5, #0]
 80117e0:	b903      	cbnz	r3, 80117e4 <__sflush_r+0x78>
 80117e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80117e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117e6:	602f      	str	r7, [r5, #0]
 80117e8:	b1b9      	cbz	r1, 801181a <__sflush_r+0xae>
 80117ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117ee:	4299      	cmp	r1, r3
 80117f0:	d002      	beq.n	80117f8 <__sflush_r+0x8c>
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7ff fca0 	bl	8011138 <_free_r>
 80117f8:	2300      	movs	r3, #0
 80117fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80117fc:	e00d      	b.n	801181a <__sflush_r+0xae>
 80117fe:	2301      	movs	r3, #1
 8011800:	4628      	mov	r0, r5
 8011802:	47b0      	blx	r6
 8011804:	4602      	mov	r2, r0
 8011806:	1c50      	adds	r0, r2, #1
 8011808:	d1c9      	bne.n	801179e <__sflush_r+0x32>
 801180a:	682b      	ldr	r3, [r5, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0c6      	beq.n	801179e <__sflush_r+0x32>
 8011810:	2b1d      	cmp	r3, #29
 8011812:	d001      	beq.n	8011818 <__sflush_r+0xac>
 8011814:	2b16      	cmp	r3, #22
 8011816:	d11e      	bne.n	8011856 <__sflush_r+0xea>
 8011818:	602f      	str	r7, [r5, #0]
 801181a:	2000      	movs	r0, #0
 801181c:	e022      	b.n	8011864 <__sflush_r+0xf8>
 801181e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011822:	b21b      	sxth	r3, r3
 8011824:	e01b      	b.n	801185e <__sflush_r+0xf2>
 8011826:	690f      	ldr	r7, [r1, #16]
 8011828:	2f00      	cmp	r7, #0
 801182a:	d0f6      	beq.n	801181a <__sflush_r+0xae>
 801182c:	0793      	lsls	r3, r2, #30
 801182e:	680e      	ldr	r6, [r1, #0]
 8011830:	bf08      	it	eq
 8011832:	694b      	ldreq	r3, [r1, #20]
 8011834:	600f      	str	r7, [r1, #0]
 8011836:	bf18      	it	ne
 8011838:	2300      	movne	r3, #0
 801183a:	eba6 0807 	sub.w	r8, r6, r7
 801183e:	608b      	str	r3, [r1, #8]
 8011840:	f1b8 0f00 	cmp.w	r8, #0
 8011844:	dde9      	ble.n	801181a <__sflush_r+0xae>
 8011846:	6a21      	ldr	r1, [r4, #32]
 8011848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801184a:	4643      	mov	r3, r8
 801184c:	463a      	mov	r2, r7
 801184e:	4628      	mov	r0, r5
 8011850:	47b0      	blx	r6
 8011852:	2800      	cmp	r0, #0
 8011854:	dc08      	bgt.n	8011868 <__sflush_r+0xfc>
 8011856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801185a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801185e:	81a3      	strh	r3, [r4, #12]
 8011860:	f04f 30ff 	mov.w	r0, #4294967295
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	4407      	add	r7, r0
 801186a:	eba8 0800 	sub.w	r8, r8, r0
 801186e:	e7e7      	b.n	8011840 <__sflush_r+0xd4>
 8011870:	dfbffffe 	.word	0xdfbffffe

08011874 <_fflush_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	690b      	ldr	r3, [r1, #16]
 8011878:	4605      	mov	r5, r0
 801187a:	460c      	mov	r4, r1
 801187c:	b913      	cbnz	r3, 8011884 <_fflush_r+0x10>
 801187e:	2500      	movs	r5, #0
 8011880:	4628      	mov	r0, r5
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	b118      	cbz	r0, 801188e <_fflush_r+0x1a>
 8011886:	6a03      	ldr	r3, [r0, #32]
 8011888:	b90b      	cbnz	r3, 801188e <_fflush_r+0x1a>
 801188a:	f7ff f9d7 	bl	8010c3c <__sinit>
 801188e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0f3      	beq.n	801187e <_fflush_r+0xa>
 8011896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011898:	07d0      	lsls	r0, r2, #31
 801189a:	d404      	bmi.n	80118a6 <_fflush_r+0x32>
 801189c:	0599      	lsls	r1, r3, #22
 801189e:	d402      	bmi.n	80118a6 <_fflush_r+0x32>
 80118a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118a2:	f7ff fc38 	bl	8011116 <__retarget_lock_acquire_recursive>
 80118a6:	4628      	mov	r0, r5
 80118a8:	4621      	mov	r1, r4
 80118aa:	f7ff ff5f 	bl	801176c <__sflush_r>
 80118ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118b0:	07da      	lsls	r2, r3, #31
 80118b2:	4605      	mov	r5, r0
 80118b4:	d4e4      	bmi.n	8011880 <_fflush_r+0xc>
 80118b6:	89a3      	ldrh	r3, [r4, #12]
 80118b8:	059b      	lsls	r3, r3, #22
 80118ba:	d4e1      	bmi.n	8011880 <_fflush_r+0xc>
 80118bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118be:	f7ff fc2b 	bl	8011118 <__retarget_lock_release_recursive>
 80118c2:	e7dd      	b.n	8011880 <_fflush_r+0xc>

080118c4 <__swhatbuf_r>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	460c      	mov	r4, r1
 80118c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118cc:	2900      	cmp	r1, #0
 80118ce:	b096      	sub	sp, #88	@ 0x58
 80118d0:	4615      	mov	r5, r2
 80118d2:	461e      	mov	r6, r3
 80118d4:	da0d      	bge.n	80118f2 <__swhatbuf_r+0x2e>
 80118d6:	89a3      	ldrh	r3, [r4, #12]
 80118d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80118dc:	f04f 0100 	mov.w	r1, #0
 80118e0:	bf14      	ite	ne
 80118e2:	2340      	movne	r3, #64	@ 0x40
 80118e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80118e8:	2000      	movs	r0, #0
 80118ea:	6031      	str	r1, [r6, #0]
 80118ec:	602b      	str	r3, [r5, #0]
 80118ee:	b016      	add	sp, #88	@ 0x58
 80118f0:	bd70      	pop	{r4, r5, r6, pc}
 80118f2:	466a      	mov	r2, sp
 80118f4:	f000 f87c 	bl	80119f0 <_fstat_r>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	dbec      	blt.n	80118d6 <__swhatbuf_r+0x12>
 80118fc:	9901      	ldr	r1, [sp, #4]
 80118fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011902:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011906:	4259      	negs	r1, r3
 8011908:	4159      	adcs	r1, r3
 801190a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801190e:	e7eb      	b.n	80118e8 <__swhatbuf_r+0x24>

08011910 <__smakebuf_r>:
 8011910:	898b      	ldrh	r3, [r1, #12]
 8011912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011914:	079d      	lsls	r5, r3, #30
 8011916:	4606      	mov	r6, r0
 8011918:	460c      	mov	r4, r1
 801191a:	d507      	bpl.n	801192c <__smakebuf_r+0x1c>
 801191c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	6123      	str	r3, [r4, #16]
 8011924:	2301      	movs	r3, #1
 8011926:	6163      	str	r3, [r4, #20]
 8011928:	b003      	add	sp, #12
 801192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801192c:	ab01      	add	r3, sp, #4
 801192e:	466a      	mov	r2, sp
 8011930:	f7ff ffc8 	bl	80118c4 <__swhatbuf_r>
 8011934:	9f00      	ldr	r7, [sp, #0]
 8011936:	4605      	mov	r5, r0
 8011938:	4639      	mov	r1, r7
 801193a:	4630      	mov	r0, r6
 801193c:	f7ff f866 	bl	8010a0c <_malloc_r>
 8011940:	b948      	cbnz	r0, 8011956 <__smakebuf_r+0x46>
 8011942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011946:	059a      	lsls	r2, r3, #22
 8011948:	d4ee      	bmi.n	8011928 <__smakebuf_r+0x18>
 801194a:	f023 0303 	bic.w	r3, r3, #3
 801194e:	f043 0302 	orr.w	r3, r3, #2
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	e7e2      	b.n	801191c <__smakebuf_r+0xc>
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	6020      	str	r0, [r4, #0]
 801195a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	9b01      	ldr	r3, [sp, #4]
 8011962:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011966:	b15b      	cbz	r3, 8011980 <__smakebuf_r+0x70>
 8011968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801196c:	4630      	mov	r0, r6
 801196e:	f000 f851 	bl	8011a14 <_isatty_r>
 8011972:	b128      	cbz	r0, 8011980 <__smakebuf_r+0x70>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	f023 0303 	bic.w	r3, r3, #3
 801197a:	f043 0301 	orr.w	r3, r3, #1
 801197e:	81a3      	strh	r3, [r4, #12]
 8011980:	89a3      	ldrh	r3, [r4, #12]
 8011982:	431d      	orrs	r5, r3
 8011984:	81a5      	strh	r5, [r4, #12]
 8011986:	e7cf      	b.n	8011928 <__smakebuf_r+0x18>

08011988 <_putc_r>:
 8011988:	b570      	push	{r4, r5, r6, lr}
 801198a:	460d      	mov	r5, r1
 801198c:	4614      	mov	r4, r2
 801198e:	4606      	mov	r6, r0
 8011990:	b118      	cbz	r0, 801199a <_putc_r+0x12>
 8011992:	6a03      	ldr	r3, [r0, #32]
 8011994:	b90b      	cbnz	r3, 801199a <_putc_r+0x12>
 8011996:	f7ff f951 	bl	8010c3c <__sinit>
 801199a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801199c:	07d8      	lsls	r0, r3, #31
 801199e:	d405      	bmi.n	80119ac <_putc_r+0x24>
 80119a0:	89a3      	ldrh	r3, [r4, #12]
 80119a2:	0599      	lsls	r1, r3, #22
 80119a4:	d402      	bmi.n	80119ac <_putc_r+0x24>
 80119a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119a8:	f7ff fbb5 	bl	8011116 <__retarget_lock_acquire_recursive>
 80119ac:	68a3      	ldr	r3, [r4, #8]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	60a3      	str	r3, [r4, #8]
 80119b4:	da05      	bge.n	80119c2 <_putc_r+0x3a>
 80119b6:	69a2      	ldr	r2, [r4, #24]
 80119b8:	4293      	cmp	r3, r2
 80119ba:	db12      	blt.n	80119e2 <_putc_r+0x5a>
 80119bc:	b2eb      	uxtb	r3, r5
 80119be:	2b0a      	cmp	r3, #10
 80119c0:	d00f      	beq.n	80119e2 <_putc_r+0x5a>
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	1c5a      	adds	r2, r3, #1
 80119c6:	6022      	str	r2, [r4, #0]
 80119c8:	701d      	strb	r5, [r3, #0]
 80119ca:	b2ed      	uxtb	r5, r5
 80119cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119ce:	07da      	lsls	r2, r3, #31
 80119d0:	d405      	bmi.n	80119de <_putc_r+0x56>
 80119d2:	89a3      	ldrh	r3, [r4, #12]
 80119d4:	059b      	lsls	r3, r3, #22
 80119d6:	d402      	bmi.n	80119de <_putc_r+0x56>
 80119d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119da:	f7ff fb9d 	bl	8011118 <__retarget_lock_release_recursive>
 80119de:	4628      	mov	r0, r5
 80119e0:	bd70      	pop	{r4, r5, r6, pc}
 80119e2:	4629      	mov	r1, r5
 80119e4:	4622      	mov	r2, r4
 80119e6:	4630      	mov	r0, r6
 80119e8:	f7ff fa19 	bl	8010e1e <__swbuf_r>
 80119ec:	4605      	mov	r5, r0
 80119ee:	e7ed      	b.n	80119cc <_putc_r+0x44>

080119f0 <_fstat_r>:
 80119f0:	b538      	push	{r3, r4, r5, lr}
 80119f2:	4d07      	ldr	r5, [pc, #28]	@ (8011a10 <_fstat_r+0x20>)
 80119f4:	2300      	movs	r3, #0
 80119f6:	4604      	mov	r4, r0
 80119f8:	4608      	mov	r0, r1
 80119fa:	4611      	mov	r1, r2
 80119fc:	602b      	str	r3, [r5, #0]
 80119fe:	f7f1 ff37 	bl	8003870 <_fstat>
 8011a02:	1c43      	adds	r3, r0, #1
 8011a04:	d102      	bne.n	8011a0c <_fstat_r+0x1c>
 8011a06:	682b      	ldr	r3, [r5, #0]
 8011a08:	b103      	cbz	r3, 8011a0c <_fstat_r+0x1c>
 8011a0a:	6023      	str	r3, [r4, #0]
 8011a0c:	bd38      	pop	{r3, r4, r5, pc}
 8011a0e:	bf00      	nop
 8011a10:	24000d84 	.word	0x24000d84

08011a14 <_isatty_r>:
 8011a14:	b538      	push	{r3, r4, r5, lr}
 8011a16:	4d06      	ldr	r5, [pc, #24]	@ (8011a30 <_isatty_r+0x1c>)
 8011a18:	2300      	movs	r3, #0
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	4608      	mov	r0, r1
 8011a1e:	602b      	str	r3, [r5, #0]
 8011a20:	f7f1 ff36 	bl	8003890 <_isatty>
 8011a24:	1c43      	adds	r3, r0, #1
 8011a26:	d102      	bne.n	8011a2e <_isatty_r+0x1a>
 8011a28:	682b      	ldr	r3, [r5, #0]
 8011a2a:	b103      	cbz	r3, 8011a2e <_isatty_r+0x1a>
 8011a2c:	6023      	str	r3, [r4, #0]
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	24000d84 	.word	0x24000d84

08011a34 <_init>:
 8011a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a36:	bf00      	nop
 8011a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a3a:	bc08      	pop	{r3}
 8011a3c:	469e      	mov	lr, r3
 8011a3e:	4770      	bx	lr

08011a40 <_fini>:
 8011a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a42:	bf00      	nop
 8011a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a46:	bc08      	pop	{r3}
 8011a48:	469e      	mov	lr, r3
 8011a4a:	4770      	bx	lr
