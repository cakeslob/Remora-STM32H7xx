
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0801178c  0801178c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011c64  08011c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011c6c  08011c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011c74  08011c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08011c7c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc0  240000c0  08011d38  000130c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000d80  08011d38  00013d80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e2d7  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d56  00000000  00000000  000413c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00046118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012e0  00000000  00000000  00047980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f308  00000000  00000000  00048c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ccc  00000000  00000000  00087f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177d70  00000000  00000000  000acc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002249a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085dc  00000000  00000000  002249e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0022cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011774 	.word	0x08011774

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	08011774 	.word	0x08011774

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <_ZN9Interrupt13EXTI4_WrapperEv>:
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
	ISRVectorTable[interruptNumber] = intThisPtr;
}

void Interrupt::EXTI4_Wrapper(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80009ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80009f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4610      	mov	r0, r2
 80009fa:	4798      	blx	r3
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	240000dc 	.word	0x240000dc

08000a04 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000a0c:	687b      	ldr	r3, [r7, #4]
  }
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	111b      	asrs	r3, r3, #4
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	815a      	strh	r2, [r3, #10]
  }
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a1b      	ldrb	r3, [r3, #8]
 8000a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f813 	bl	8001a84 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]
  }
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  }
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3303      	adds	r3, #3
 8000aa2:	f023 0303 	bic.w	r3, r3, #3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	e000      	b.n	8000ada <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	e000      	b.n	8000aee <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000aec:	2300      	movs	r3, #0
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    return _begin;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
  }
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 ffbb 	bl	8001a9c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000b26:	4603      	mov	r3, r0
  }
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f000 f864 	bl	8000c28 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000b60:	bf00      	nop
  }
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	441a      	add	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f84a 	bl	8000c28 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  }
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	bf94      	ite	ls
 8000bda:	2301      	movls	r3, #1
 8000bdc:	2300      	movhi	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
  }
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000bf6:	6839      	ldr	r1, [r7, #0]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffe1 	bl	8000bc0 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e008      	b.n	8000c20 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	425b      	negs	r3, r3
 8000c16:	441a      	add	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
    return _right;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
  }
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000c48:	2105      	movs	r1, #5
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f886 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2200      	movs	r2, #0
 8000c54:	461c      	mov	r4, r3
 8000c56:	4615      	mov	r5, r2
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bdb0      	pop	{r4, r5, r7, pc}

08000c66 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000c72:	2108      	movs	r1, #8
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f000 f871 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000c7a:	68f9      	ldr	r1, [r7, #12]
 8000c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000c98:	2106      	movs	r1, #6
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f85e 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000ca0:	68f9      	ldr	r1, [r7, #12]
 8000ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca6:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f84b 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f83a 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f82d 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000d02:	463b      	mov	r3, r7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 febd 	bl	8001a84 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
  }
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000d20:	2140      	movs	r1, #64	@ 0x40
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f81a 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8d5 	bl	8000eda <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d30:	687b      	ldr	r3, [r7, #4]
  }
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000d42:	2120      	movs	r1, #32
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f809 	bl	8000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f8c4 	bl	8000eda <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d52:	687b      	ldr	r3, [r7, #4]
  }
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7a1b      	ldrb	r3, [r3, #8]
 8000d6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7a1a      	ldrb	r2, [r3, #8]
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	721a      	strb	r2, [r3, #8]
  }
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fef3 	bl	8000b9c <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3310      	adds	r3, #16
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff8c 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    return _pool;
 8000dd0:	687b      	ldr	r3, [r7, #4]
  }
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
    return _data;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3310      	adds	r3, #16
  }
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000df6:	b084      	sub	sp, #16
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	f107 001c 	add.w	r0, r7, #28
 8000e04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	461c      	mov	r4, r3
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3310      	adds	r3, #16
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff5c 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e2c:	b004      	add	sp, #16
 8000e2e:	4770      	bx	lr

08000e30 <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f00f fc54 	bl	80106e8 <malloc>
 8000e40:	4603      	mov	r3, r0
  }
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
    free(p);
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f00f fc4f 	bl	80106f8 <free>
  }
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f7ff fe53 	bl	8000b18 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8000e72:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e017      	b.n	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d009      	beq.n	8000e9a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fdc4 	bl	8000a1a <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	e005      	b.n	8000ea6 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff fde0 	bl	8000a6c <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8000eac:	68fb      	ldr	r3, [r7, #12]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffcd 	bl	8000e62 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff60 	bl	8000d90 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  _head = 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f08:	d904      	bls.n	8000f14 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b39      	cmp	r3, #57	@ 0x39
 8000f0e:	d801      	bhi.n	8000f14 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fc      	ldr	r4, [r7, #12]
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fdf4 	bl	8000b30 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8000f48:	f104 0308 	add.w	r3, r4, #8
 8000f4c:	463a      	mov	r2, r7
 8000f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f52:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d014      	beq.n	8000f9e <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d303      	bcc.n	8000f88 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
      return;
 8000f86:	e00b      	b.n	8000fa0 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	1c58      	adds	r0, r3, #1
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	6048      	str	r0, [r1, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e000      	b.n	8000fa0 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8000f9e:	bf00      	nop
  }
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
    append('\0');
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffd3 	bl	8000f60 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f103 0108 	add.w	r1, r3, #8
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f7ff fdca 	bl	8000b6a <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
  }
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff86 	bl	8000f22 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	e000      	b.n	8001036 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	0801178c 	.word	0x0801178c

0800104c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6011      	str	r1, [r2, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
  }
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001074:	2300      	movs	r3, #0
  }
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d106      	bne.n	80010d8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	e005      	b.n	80010e4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  }
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	08001083 	.word	0x08001083

080010f4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    return _code;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
  }
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d81b      	bhi.n	8001154 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 800111c:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	0800113d 	.word	0x0800113d
 8001128:	0800114d 	.word	0x0800114d
 800112c:	08001149 	.word	0x08001149
 8001130:	08001145 	.word	0x08001145
 8001134:	08001151 	.word	0x08001151
 8001138:	08001141 	.word	0x08001141
      case Ok:
        return "Ok";
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800113e:	e00a      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001142:	e008      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001146:	e006      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800114a:	e004      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800114e:	e002      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001152:	e000      	b.n	8001156 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	08011790 	.word	0x08011790
 8001168:	08011794 	.word	0x08011794
 800116c:	0801179c 	.word	0x0801179c
 8001170:	080117a8 	.word	0x080117a8
 8001174:	080117b8 	.word	0x080117b8
 8001178:	080117c8 	.word	0x080117c8
 800117c:	080117d8 	.word	0x080117d8

08001180 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2232      	movs	r2, #50	@ 0x32
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f818 	bl	80011dc <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80011ac:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	e00c      	b.n	80011d4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3302      	adds	r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80011d2:	e7ec      	b.n	80011ae <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e000      	b.n	80011f2 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 80011f0:	2300      	movs	r3, #0
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 80011f4:	4413      	add	r3, r2
  }
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	080117dc 	.word	0x080117dc

08001208 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800122a:	2210      	movs	r2, #16
 800122c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001230:	f7ff fbda 	bl	80009e8 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001246:	2201      	movs	r2, #1
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <__io_putchar+0x20>)
 800124a:	f00a fd94 	bl	800bd76 <HAL_UART_Transmit>
	  return ch;
 800124e:	687b      	ldr	r3, [r7, #4]
	}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400049c 	.word	0x2400049c

0800125c <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	b08d      	sub	sp, #52	@ 0x34
 8001262:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8001264:	4852      	ldr	r0, [pc, #328]	@ (80013b0 <_Z14readJsonConfigv+0x154>)
 8001266:	f00f fc2f 	bl	8010ac8 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 800126a:	4852      	ldr	r0, [pc, #328]	@ (80013b4 <_Z14readJsonConfigv+0x158>)
 800126c:	f00f fc2c 	bl	8010ac8 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001270:	2200      	movs	r2, #0
 8001272:	4951      	ldr	r1, [pc, #324]	@ (80013b8 <_Z14readJsonConfigv+0x15c>)
 8001274:	4851      	ldr	r0, [pc, #324]	@ (80013bc <_Z14readJsonConfigv+0x160>)
 8001276:	f00e fc3d 	bl	800faf4 <f_mount>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 800128a:	484d      	ldr	r0, [pc, #308]	@ (80013c0 <_Z14readJsonConfigv+0x164>)
 800128c:	f00f fbac 	bl	80109e8 <iprintf>
    	Error_Handler();
 8001290:	f000 fbec 	bl	8001a6c <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 8001294:	e087      	b.n	80013a6 <_Z14readJsonConfigv+0x14a>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 8001296:	2201      	movs	r2, #1
 8001298:	494a      	ldr	r1, [pc, #296]	@ (80013c4 <_Z14readJsonConfigv+0x168>)
 800129a:	484b      	ldr	r0, [pc, #300]	@ (80013c8 <_Z14readJsonConfigv+0x16c>)
 800129c:	f00e fc70 	bl	800fb80 <f_open>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 80012b0:	4846      	ldr	r0, [pc, #280]	@ (80013cc <_Z14readJsonConfigv+0x170>)
 80012b2:	f00f fc09 	bl	8010ac8 <puts>
			Error_Handler();
 80012b6:	f000 fbd9 	bl	8001a6c <Error_Handler>
}
 80012ba:	e074      	b.n	80013a6 <_Z14readJsonConfigv+0x14a>
		}
 80012bc:	466b      	mov	r3, sp
 80012be:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80012c0:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <_Z14readJsonConfigv+0x16c>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 80012c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012c8:	4841      	ldr	r0, [pc, #260]	@ (80013d0 <_Z14readJsonConfigv+0x174>)
 80012ca:	f00f fb8d 	bl	80109e8 <iprintf>
			char rtext[length];
 80012ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012d0:	1e4b      	subs	r3, r1, #1
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d4:	460a      	mov	r2, r1
 80012d6:	2300      	movs	r3, #0
 80012d8:	4690      	mov	r8, r2
 80012da:	4699      	mov	r9, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012f0:	460a      	mov	r2, r1
 80012f2:	2300      	movs	r3, #0
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	00eb      	lsls	r3, r5, #3
 8001302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001306:	00e2      	lsls	r2, r4, #3
 8001308:	460b      	mov	r3, r1
 800130a:	3307      	adds	r3, #7
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	ebad 0d03 	sub.w	sp, sp, r3
 8001314:	466b      	mov	r3, sp
 8001316:	3300      	adds	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800131a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	6a39      	ldr	r1, [r7, #32]
 8001320:	4829      	ldr	r0, [pc, #164]	@ (80013c8 <_Z14readJsonConfigv+0x16c>)
 8001322:	f00e fde7 	bl	800fef4 <f_read>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <_Z14readJsonConfigv+0xe2>
				printf("	JSON config file read FAILURE\n");
 8001336:	4827      	ldr	r0, [pc, #156]	@ (80013d4 <_Z14readJsonConfigv+0x178>)
 8001338:	f00f fbc6 	bl	8010ac8 <puts>
 800133c:	e02f      	b.n	800139e <_Z14readJsonConfigv+0x142>
				printf("	JSON config file read SUCCESS!\n");
 800133e:	4826      	ldr	r0, [pc, #152]	@ (80013d8 <_Z14readJsonConfigv+0x17c>)
 8001340:	f00f fbc2 	bl	8010ac8 <puts>
				strJson.reserve(length + 1);
 8001344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001346:	3301      	adds	r3, #1
 8001348:	4619      	mov	r1, r3
 800134a:	4824      	ldr	r0, [pc, #144]	@ (80013dc <_Z14readJsonConfigv+0x180>)
 800134c:	f00f f925 	bl	801059a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001354:	e017      	b.n	8001386 <_Z14readJsonConfigv+0x12a>
			    	strJson = strJson + rtext[i];
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135a:	4413      	add	r3, r2
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	491e      	ldr	r1, [pc, #120]	@ (80013dc <_Z14readJsonConfigv+0x180>)
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fbe6 	bl	8001b36 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4619      	mov	r1, r3
 8001370:	481a      	ldr	r0, [pc, #104]	@ (80013dc <_Z14readJsonConfigv+0x180>)
 8001372:	f00f f8a3 	bl	80104bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f00f f898 	bl	80104b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8001380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001382:	3301      	adds	r3, #1
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138a:	429a      	cmp	r2, r3
 800138c:	dbe3      	blt.n	8001356 <_Z14readJsonConfigv+0xfa>
			    printf("\n%s\n", strJson.c_str());
 800138e:	4813      	ldr	r0, [pc, #76]	@ (80013dc <_Z14readJsonConfigv+0x180>)
 8001390:	f00f f966 	bl	8010660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <_Z14readJsonConfigv+0x184>)
 800139a:	f00f fb25 	bl	80109e8 <iprintf>
			f_close(&SDFile);
 800139e:	480a      	ldr	r0, [pc, #40]	@ (80013c8 <_Z14readJsonConfigv+0x16c>)
 80013a0:	f00e ff65 	bl	801026e <f_close>
 80013a4:	46b5      	mov	sp, r6
}
 80013a6:	bf00      	nop
 80013a8:	3734      	adds	r7, #52	@ 0x34
 80013aa:	46bd      	mov	sp, r7
 80013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013b0:	080117ec 	.word	0x080117ec
 80013b4:	08011810 	.word	0x08011810
 80013b8:	24000590 	.word	0x24000590
 80013bc:	24000594 	.word	0x24000594
 80013c0:	08011830 	.word	0x08011830
 80013c4:	0801184c 	.word	0x0801184c
 80013c8:	240007c4 	.word	0x240007c4
 80013cc:	08011858 	.word	0x08011858
 80013d0:	0801187c 	.word	0x0801187c
 80013d4:	080118a0 	.word	0x080118a0
 80013d8:	080118c0 	.word	0x080118c0
 80013dc:	24000330 	.word	0x24000330
 80013e0:	080118e0 	.word	0x080118e0

080013e4 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 80013ea:	4826      	ldr	r0, [pc, #152]	@ (8001484 <_Z15deserialiseJSONv+0xa0>)
 80013ec:	f00f fb6c 	bl	8010ac8 <puts>

    const char *json = strJson.c_str();
 80013f0:	4825      	ldr	r0, [pc, #148]	@ (8001488 <_Z15deserialiseJSONv+0xa4>)
 80013f2:	f00f f935 	bl	8010660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013f6:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff febf 	bl	8001180 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 8001402:	7a3a      	ldrb	r2, [r7, #8]
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	4821      	ldr	r0, [pc, #132]	@ (800148c <_Z15deserialiseJSONv+0xa8>)
 8001408:	f000 fbab 	bl	8001b62 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 800140c:	4603      	mov	r3, r0
 800140e:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 8001410:	481f      	ldr	r0, [pc, #124]	@ (8001490 <_Z15deserialiseJSONv+0xac>)
 8001412:	f00f fae9 	bl	80109e8 <iprintf>

    switch (error.code())
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe6b 	bl	80010f4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800141e:	4603      	mov	r3, r0
 8001420:	2b03      	cmp	r3, #3
 8001422:	d011      	beq.n	8001448 <_Z15deserialiseJSONv+0x64>
 8001424:	2b03      	cmp	r3, #3
 8001426:	dc16      	bgt.n	8001456 <_Z15deserialiseJSONv+0x72>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <_Z15deserialiseJSONv+0x4e>
 800142c:	2b02      	cmp	r3, #2
 800142e:	d004      	beq.n	800143a <_Z15deserialiseJSONv+0x56>
 8001430:	e011      	b.n	8001456 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8001432:	4818      	ldr	r0, [pc, #96]	@ (8001494 <_Z15deserialiseJSONv+0xb0>)
 8001434:	f00f fb48 	bl	8010ac8 <puts>
            break;
 8001438:	e01f      	b.n	800147a <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800143a:	4817      	ldr	r0, [pc, #92]	@ (8001498 <_Z15deserialiseJSONv+0xb4>)
 800143c:	f00f fb44 	bl	8010ac8 <puts>
            configError = true;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <_Z15deserialiseJSONv+0xb8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
            break;
 8001446:	e018      	b.n	800147a <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001448:	4815      	ldr	r0, [pc, #84]	@ (80014a0 <_Z15deserialiseJSONv+0xbc>)
 800144a:	f00f fb3d 	bl	8010ac8 <puts>
            configError = true;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <_Z15deserialiseJSONv+0xb8>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
            break;
 8001454:	e011      	b.n	800147a <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 8001456:	4813      	ldr	r0, [pc, #76]	@ (80014a4 <_Z15deserialiseJSONv+0xc0>)
 8001458:	f00f fac6 	bl	80109e8 <iprintf>
            printf(error.c_str());
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe54 	bl	800110c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 8001464:	4603      	mov	r3, r0
 8001466:	4618      	mov	r0, r3
 8001468:	f00f fabe 	bl	80109e8 <iprintf>
            printf("\n");
 800146c:	200a      	movs	r0, #10
 800146e:	f00f facd 	bl	8010a0c <putchar>
            configError = true;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <_Z15deserialiseJSONv+0xb8>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
            break;
 8001478:	bf00      	nop
    }
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	080118e8 	.word	0x080118e8
 8001488:	24000330 	.word	0x24000330
 800148c:	24000350 	.word	0x24000350
 8001490:	0801190c 	.word	0x0801190c
 8001494:	08011928 	.word	0x08011928
 8001498:	08011944 	.word	0x08011944
 800149c:	24000380 	.word	0x24000380
 80014a0:	08011954 	.word	0x08011954
 80014a4:	08011968 	.word	0x08011968

080014a8 <_Z5setupv>:

void setup()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 80014ac:	4807      	ldr	r0, [pc, #28]	@ (80014cc <_Z5setupv+0x24>)
 80014ae:	f00f fb0b 	bl	8010ac8 <puts>

     // initialise the Remora comms
    comms->init();
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <_Z5setupv+0x28>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fb26 	bl	8003b08 <_ZN11RemoraComms4initEv>
    comms->start();
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <_Z5setupv+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fc37 	bl	8003d34 <_ZN11RemoraComms5startEv>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	08011984 	.word	0x08011984
 80014d0:	24000530 	.word	0x24000530

080014d4 <main>:


int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
	MPU_Config();
 80014da:	f000 fa9b 	bl	8001a14 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 80014de:	4b54      	ldr	r3, [pc, #336]	@ (8001630 <main+0x15c>)
 80014e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014e4:	609a      	str	r2, [r3, #8]
	HAL_Init();
 80014e6:	f002 fda1 	bl	800402c <HAL_Init>
	SystemClock_Config();
 80014ea:	f000 f8a9 	bl	8001640 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 80014ee:	f000 f971 	bl	80017d4 <_Z24PeriphCommonClock_Configv>

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80014f2:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <main+0x160>)
 80014f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001634 <main+0x160>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001502:	4b4c      	ldr	r3, [pc, #304]	@ (8001634 <main+0x160>)
 8001504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); // used for SD card detect
 8001510:	f000 fa24 	bl	800195c <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001514:	f000 f9c2 	bl	800189c <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();
 8001518:	f000 f994 	bl	8001844 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800151c:	f00c fb10 	bl	800db40 <MX_FATFS_Init>


	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001520:	4b45      	ldr	r3, [pc, #276]	@ (8001638 <main+0x164>)
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	2201      	movs	r2, #1
 8001528:	2100      	movs	r1, #0
 800152a:	4844      	ldr	r0, [pc, #272]	@ (800163c <main+0x168>)
 800152c:	f00f fa5c 	bl	80109e8 <iprintf>

	readJsonConfig();	// FatFS fales to work if chche is enabled
 8001530:	f7ff fe94 	bl	800125c <_Z14readJsonConfigv>
	deserialiseJSON();
 8001534:	f7ff ff56 	bl	80013e4 <_Z15deserialiseJSONv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001538:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <main+0x15c>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d11b      	bne.n	8001586 <main+0xb2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800154e:	f3bf 8f4f 	dsb	sy
}
 8001552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001554:	f3bf 8f6f 	isb	sy
}
 8001558:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800155a:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <main+0x15c>)
 800155c:	2200      	movs	r2, #0
 800155e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
}
 8001566:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001568:	f3bf 8f6f 	isb	sy
}
 800156c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800156e:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <main+0x15c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a2f      	ldr	r2, [pc, #188]	@ (8001630 <main+0x15c>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001578:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001580:	f3bf 8f6f 	isb	sy
}
 8001584:	e000      	b.n	8001588 <main+0xb4>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001586:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <main+0x15c>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d142      	bne.n	8001624 <main+0x150>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <main+0x15c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015a6:	f3bf 8f4f 	dsb	sy
}
 80015aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <main+0x15c>)
 80015ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015b2:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	0b5b      	lsrs	r3, r3, #13
 80015b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015bc:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015d0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d6:	4916      	ldr	r1, [pc, #88]	@ (8001630 <main+0x15c>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ea      	bne.n	80015c8 <main+0xf4>
    } while(sets-- != 0U);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1db      	bne.n	80015be <main+0xea>
  __ASM volatile ("dsb 0xF":::"memory");
 8001606:	f3bf 8f4f 	dsb	sy
}
 800160a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <main+0x15c>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <main+0x15c>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001616:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
}
 800161c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800161e:	f3bf 8f6f 	isb	sy
}
 8001622:	e000      	b.n	8001626 <main+0x152>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001624:	bf00      	nop


	SCB_EnableICache();
	SCB_EnableDCache();

	setup();
 8001626:	f7ff ff3f 	bl	80014a8 <_Z5setupv>

	while (1)
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <main+0x156>
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	58024400 	.word	0x58024400
 8001638:	080119d4 	.word	0x080119d4
 800163c:	080119a8 	.word	0x080119a8

08001640 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09e      	sub	sp, #120	@ 0x78
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800164a:	224c      	movs	r2, #76	@ 0x4c
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00f fb34 	bl	8010cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2220      	movs	r2, #32
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00f fb2d 	bl	8010cbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001662:	2002      	movs	r0, #2
 8001664:	f004 fdb4 	bl	80061d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b56      	ldr	r3, [pc, #344]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	4a55      	ldr	r2, [pc, #340]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001678:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a51      	ldr	r2, [pc, #324]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 8001688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b4f      	ldr	r3, [pc, #316]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800169a:	bf00      	nop
 800169c:	4b4b      	ldr	r3, [pc, #300]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f3      	bne.n	800169c <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b4:	4b46      	ldr	r3, [pc, #280]	@ (80017d0 <_Z18SystemClock_Configv+0x190>)
 80016b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ba:	4a45      	ldr	r2, [pc, #276]	@ (80017d0 <_Z18SystemClock_Configv+0x190>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016c4:	4b42      	ldr	r3, [pc, #264]	@ (80017d0 <_Z18SystemClock_Configv+0x190>)
 80016c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a3c      	ldr	r2, [pc, #240]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 80016dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	4a35      	ldr	r2, [pc, #212]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016f8:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <_Z18SystemClock_Configv+0x188>)
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001704:	bf00      	nop
 8001706:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <_Z18SystemClock_Configv+0x18c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800170e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f3      	bne.n	8001706 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800171e:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <_Z18SystemClock_Configv+0x190>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <_Z18SystemClock_Configv+0x190>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172e:	2301      	movs	r3, #1
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001738:	2302      	movs	r3, #2
 800173a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173c:	2302      	movs	r3, #2
 800173e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001740:	2305      	movs	r3, #5
 8001742:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001744:	23c0      	movs	r3, #192	@ 0xc0
 8001746:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001754:	2308      	movs	r3, #8
 8001756:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001758:	2300      	movs	r3, #0
 800175a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fd6d 	bl	8006244 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800177a:	f000 f977 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	233f      	movs	r3, #63	@ 0x3f
 8001780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	2303      	movs	r3, #3
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800178a:	2308      	movs	r3, #8
 800178c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800178e:	2340      	movs	r3, #64	@ 0x40
 8001790:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800179c:	2340      	movs	r3, #64	@ 0x40
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2104      	movs	r1, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 f9a6 	bl	8006af8 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 80017bc:	f000 f956 	bl	8001a6c <Error_Handler>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3778      	adds	r7, #120	@ 0x78
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	58000400 	.word	0x58000400
 80017cc:	58024800 	.word	0x58024800
 80017d0:	58024400 	.word	0x58024400

080017d4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0b0      	sub	sp, #192	@ 0xc0
 80017d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	22c0      	movs	r2, #192	@ 0xc0
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00f fa6b 	bl	8010cbc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80017e6:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80017f6:	230c      	movs	r3, #12
 80017f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80017fe:	230a      	movs	r3, #10
 8001800:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001806:	23c0      	movs	r3, #192	@ 0xc0
 8001808:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800180a:	2320      	movs	r3, #32
 800180c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001816:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f005 fcf5 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8001836:	f000 f919 	bl	8001a6c <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	37c0      	adds	r7, #192	@ 0xc0
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001856:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800185e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001862:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800186c:	2208      	movs	r2, #8
 800186e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001870:	4807      	ldr	r0, [pc, #28]	@ (8001890 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001872:	f008 f9cb 	bl	8009c0c <HAL_SD_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8001886:	4804      	ldr	r0, [pc, #16]	@ (8001898 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8001888:	f00f f91e 	bl	8010ac8 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24000420 	.word	0x24000420
 8001894:	52007000 	.word	0x52007000
 8001898:	080119dc 	.word	0x080119dc

0800189c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001958 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e4:	481b      	ldr	r0, [pc, #108]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018e6:	f00a f9f6 	bl	800bcd6 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80018fa:	f000 f8b7 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4814      	ldr	r0, [pc, #80]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001902:	f00b fa88 	bl	800ce16 <HAL_UARTEx_SetTxFifoThreshold>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001916:	f000 f8a9 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191a:	2100      	movs	r1, #0
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800191e:	f00b fab8 	bl	800ce92 <HAL_UARTEx_SetRxFifoThreshold>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001932:	f000 f89b 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001936:	4807      	ldr	r0, [pc, #28]	@ (8001954 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001938:	f00b fa34 	bl	800cda4 <HAL_UARTEx_DisableFifoMode>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800194c:	f000 f88e 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2400049c 	.word	0x2400049c
 8001958:	40011000 	.word	0x40011000

0800195c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001978:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 800197a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001996:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b4:	4a15      	ldr	r2, [pc, #84]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <_ZL12MX_GPIO_Initv+0xb0>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ea:	2310      	movs	r3, #16
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <_ZL12MX_GPIO_Initv+0xb4>)
 80019fe:	f004 fa37 	bl	8005e70 <HAL_GPIO_Init>

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020800 	.word	0x58020800

08001a14 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a26:	f002 fcd3 	bl	80043d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a36:	231f      	movs	r3, #31
 8001a38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a3a:	2387      	movs	r3, #135	@ 0x87
 8001a3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a42:	2300      	movs	r3, #0
 8001a44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fcf1 	bl	8004440 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a5e:	2004      	movs	r0, #4
 8001a60:	f002 fcce 	bl	8004400 <HAL_MPU_Enable>

}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <Error_Handler+0x14>)
 8001a72:	f00e ffb9 	bl	80109e8 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a76:	b672      	cpsid	i
}
 8001a78:	bf00      	nop

  __disable_irq();
  while (1)
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <Error_Handler+0xe>
 8001a7e:	bf00      	nop
 8001a80:	080119ec 	.word	0x080119ec

08001a84 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
  }
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff f8a0 	bl	8000bec <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8001aac:	4603      	mov	r3, r0
  }
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f85c 	bl	8001b82 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8001af2:	b590      	push	{r4, r7, lr}
 8001af4:	b08b      	sub	sp, #44	@ 0x2c
 8001af6:	af02      	add	r7, sp, #8
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4621      	mov	r1, r4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f865 	bl	8001bd2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f103 0408 	add.w	r4, r3, #8
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f842 	bl	8001ba0 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7ff f965 	bl	8000df6 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}

08001b36 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f00e fda7 	bl	801069a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2101      	movs	r1, #1
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f00e fd7a 	bl	801064c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8001b58:	bf00      	nop
    }
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8001b6e:	793a      	ldrb	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f839 	bl	8001bea <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	601a      	str	r2, [r3, #0]
  }
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe ff70 	bl	8000a92 <_ZN19ArduinoJson6101_11010addPaddingEj>
 8001bb2:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f848 	bl	8001c4e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7fe ff74 	bl	8000ab2 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	7039      	strb	r1, [r7, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8001bea:	b5b0      	push	{r4, r5, r7, lr}
 8001bec:	b08a      	sub	sp, #40	@ 0x28
 8001bee:	af02      	add	r7, sp, #8
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff f8d5 	bl	8000da6 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff f8e3 	bl	8000dc8 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c02:	4604      	mov	r4, r0
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f000 f831 	bl	8001c6c <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff f8db 	bl	8000dc8 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f837 	bl	8001c8a <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	793b      	ldrb	r3, [r7, #4]
 8001c20:	f107 0010 	add.w	r0, r7, #16
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	462a      	mov	r2, r5
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	f000 f83c 	bl	8001ca8 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff f8d4 	bl	8000dde <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f845 	bl	8001cce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}

08001c4e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f8e7 	bl	8000e30 <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8001c62:	4603      	mov	r3, r0
  }
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f9d0 	bl	8001020 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f863 	bl	8001d64 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8001c9e:	4603      	mov	r3, r0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8001cb6:	7e3b      	ldrb	r3, [r7, #24]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f85f 	bl	8001d84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f871 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	f107 020c 	add.w	r2, r7, #12
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9e3 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8001d06:	2300      	movs	r3, #0
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8001d12:	7b3b      	ldrb	r3, [r7, #12]
 8001d14:	e022      	b.n	8001d5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f932 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d20:	d002      	beq.n	8001d28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8001d22:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d24:	d00a      	beq.n	8001d3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8001d26:	e013      	b.n	8001d50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8001d28:	6838      	ldr	r0, [r7, #0]
 8001d2a:	f7fe fff5 	bl	8000d18 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f94d 	bl	8001fd2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	e00f      	b.n	8001d5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7fe fffc 	bl	8000d3a <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fa6a 	bl	8002220 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	e005      	b.n	8001d5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fc27 	bl	80025a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	bf00      	nop
  }
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f934 	bl	8000fe2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
  }
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	7e3a      	ldrb	r2, [r7, #24]
 8001da8:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	739a      	strb	r2, [r3, #14]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8d9 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001dd2:	f200 80c7 	bhi.w	8001f64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e9d 	.word	0x08001e9d
 8001de0:	08001f65 	.word	0x08001f65
 8001de4:	08001f65 	.word	0x08001f65
 8001de8:	08001f65 	.word	0x08001f65
 8001dec:	08001f65 	.word	0x08001f65
 8001df0:	08001f65 	.word	0x08001f65
 8001df4:	08001f65 	.word	0x08001f65
 8001df8:	08001f65 	.word	0x08001f65
 8001dfc:	08001f65 	.word	0x08001f65
 8001e00:	08001ead 	.word	0x08001ead
 8001e04:	08001ead 	.word	0x08001ead
 8001e08:	08001f65 	.word	0x08001f65
 8001e0c:	08001f65 	.word	0x08001f65
 8001e10:	08001ead 	.word	0x08001ead
 8001e14:	08001f65 	.word	0x08001f65
 8001e18:	08001f65 	.word	0x08001f65
 8001e1c:	08001f65 	.word	0x08001f65
 8001e20:	08001f65 	.word	0x08001f65
 8001e24:	08001f65 	.word	0x08001f65
 8001e28:	08001f65 	.word	0x08001f65
 8001e2c:	08001f65 	.word	0x08001f65
 8001e30:	08001f65 	.word	0x08001f65
 8001e34:	08001f65 	.word	0x08001f65
 8001e38:	08001f65 	.word	0x08001f65
 8001e3c:	08001f65 	.word	0x08001f65
 8001e40:	08001f65 	.word	0x08001f65
 8001e44:	08001f65 	.word	0x08001f65
 8001e48:	08001f65 	.word	0x08001f65
 8001e4c:	08001f65 	.word	0x08001f65
 8001e50:	08001f65 	.word	0x08001f65
 8001e54:	08001f65 	.word	0x08001f65
 8001e58:	08001f65 	.word	0x08001f65
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001f65 	.word	0x08001f65
 8001e64:	08001f65 	.word	0x08001f65
 8001e68:	08001f65 	.word	0x08001f65
 8001e6c:	08001f65 	.word	0x08001f65
 8001e70:	08001f65 	.word	0x08001f65
 8001e74:	08001f65 	.word	0x08001f65
 8001e78:	08001f65 	.word	0x08001f65
 8001e7c:	08001f65 	.word	0x08001f65
 8001e80:	08001f65 	.word	0x08001f65
 8001e84:	08001f65 	.word	0x08001f65
 8001e88:	08001f65 	.word	0x08001f65
 8001e8c:	08001f65 	.word	0x08001f65
 8001e90:	08001f65 	.word	0x08001f65
 8001e94:	08001f65 	.word	0x08001f65
 8001e98:	08001eb5 	.word	0x08001eb5
          return DeserializationError::IncompleteInput;
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f8f7 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ea8:	7b3b      	ldrb	r3, [r7, #12]
 8001eaa:	e064      	b.n	8001f76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb99 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8001eb2:	e05f      	b.n	8001f74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fb95 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f860 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ec4:	d002      	beq.n	8001ecc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8001ec6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ec8:	d02a      	beq.n	8001f20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8001eca:	e042      	b.n	8001f52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb89 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f852 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001edc:	4603      	mov	r3, r0
 8001ede:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001ee0:	7f7b      	ldrb	r3, [r7, #29]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	2101      	movs	r1, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f8d2 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ef2:	7c3b      	ldrb	r3, [r7, #16]
 8001ef4:	e03f      	b.n	8001f76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8001ef6:	7f7b      	ldrb	r3, [r7, #29]
 8001ef8:	2b2f      	cmp	r3, #47	@ 0x2f
 8001efa:	d107      	bne.n	8001f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fb6e 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8001f08:	bf00      	nop
              break;
 8001f0a:	e02a      	b.n	8001f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8001f0c:	7f7b      	ldrb	r3, [r7, #29]
 8001f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
                move();
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb63 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8001f1e:	e7da      	b.n	8001ed6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb5f 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f82a 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001f30:	7fbb      	ldrb	r3, [r7, #30]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8aa 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f42:	7d3b      	ldrb	r3, [r7, #20]
 8001f44:	e017      	b.n	8001f76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8001f46:	7fbb      	ldrb	r3, [r7, #30]
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d000      	beq.n	8001f4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8001f4c:	e7e8      	b.n	8001f20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8001f4e:	bf00      	nop
              break;
 8001f50:	e007      	b.n	8001f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	2102      	movs	r1, #2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f89c 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f5e:	7e3b      	ldrb	r3, [r7, #24]
 8001f60:	e009      	b.n	8001f76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8001f62:	e007      	b.n	8001f74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f893 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f70:	7f3b      	ldrb	r3, [r7, #28]
 8001f72:	e000      	b.n	8001f76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8001f74:	e728      	b.n	8001dc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop

08001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b9b      	ldrb	r3, [r3, #14]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f866 	bl	800106c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	735a      	strb	r2, [r3, #13]
 8001fac:	e008      	b.n	8001fc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f84a 	bl	800104c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	739a      	strb	r2, [r3, #14]
    return _current;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7b5b      	ldrb	r3, [r3, #13]
  }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b098      	sub	sp, #96	@ 0x60
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2105      	movs	r1, #5
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f853 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ff0:	7c3b      	ldrb	r3, [r7, #16]
 8001ff2:	e111      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ff8:	235b      	movs	r3, #91	@ 0x5b
 8001ffa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8001ffe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002000:	f7ff ffbe 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800200c:	4293      	cmp	r3, r2
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 800201a:	2300      	movs	r3, #0
 800201c:	e003      	b.n	8002026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 800201e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002020:	f000 fae0 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002024:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2102      	movs	r1, #2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f82d 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800203c:	7d3b      	ldrb	r3, [r7, #20]
 800203e:	e0eb      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff febd 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002046:	4603      	mov	r3, r0
 8002048:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f82f 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 800206e:	2300      	movs	r3, #0
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 800207a:	7b3b      	ldrb	r3, [r7, #12]
 800207c:	e0cc      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	653b      	str	r3, [r7, #80]	@ 0x50
 8002082:	235d      	movs	r3, #93	@ 0x5d
 8002084:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8002088:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800208a:	f7ff ff79 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002096:	4293      	cmp	r3, r2
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 80020a4:	2300      	movs	r3, #0
 80020a6:	e003      	b.n	80020b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 80020a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020aa:	f000 fa9b 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80020ae:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ffeb 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020c4:	e0a8      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f7fe fef2 	bl	8000eb6 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 80020d2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 80020d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 80020da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020de:	2103      	movs	r1, #3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe ffd8 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80020e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ea:	e095      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7b1b      	ldrb	r3, [r3, #12]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 80020f8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fde7 	bl	8001cce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002100:	4603      	mov	r3, r0
 8002102:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	3301      	adds	r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002110:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002114:	f107 020c 	add.w	r2, r7, #12
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe ffcc 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002134:	2300      	movs	r3, #0
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002140:	7b3b      	ldrb	r3, [r7, #12]
 8002142:	e069      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fe3b 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800214a:	4603      	mov	r3, r0
 800214c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800214e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002152:	f107 020c 	add.w	r2, r7, #12
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ffad 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002172:	2300      	movs	r3, #0
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 800217e:	7b3b      	ldrb	r3, [r7, #12]
 8002180:	e04a      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002186:	235d      	movs	r3, #93	@ 0x5d
 8002188:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 800218c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800218e:	f7ff fef7 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800219a:	4293      	cmp	r3, r2
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 80021a8:	2300      	movs	r3, #0
 80021aa:	e003      	b.n	80021b4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 80021ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80021ae:	f000 fa19 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80021b2:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 80021b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ff69 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80021c4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80021c8:	e026      	b.n	8002218 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80021ce:	232c      	movs	r3, #44	@ 0x2c
 80021d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 80021d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021d6:	f7ff fed3 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 80021f0:	2300      	movs	r3, #0
 80021f2:	e003      	b.n	80021fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 80021f4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021f6:	f000 f9f5 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80021fa:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	f43f af5f 	beq.w	80020c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002208:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ff41 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002214:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8002218:	4618      	mov	r0, r3
 800221a:	3760      	adds	r7, #96	@ 0x60
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b0a3      	sub	sp, #140	@ 0x8c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7b1b      	ldrb	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	2105      	movs	r1, #5
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ff2c 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800223e:	7c3b      	ldrb	r3, [r7, #16]
 8002240:	e1ad      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002248:	237b      	movs	r3, #123	@ 0x7b
 800224a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 800224e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002252:	f7ff fe95 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800225e:	4293      	cmp	r3, r2
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 800226c:	2300      	movs	r3, #0
 800226e:	e004      	b.n	800227a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8002270:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002274:	f000 f9b6 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002278:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe ff03 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002290:	7d3b      	ldrb	r3, [r7, #20]
 8002292:	e184      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fd93 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800229a:	4603      	mov	r3, r0
 800229c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ff05 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 80022c2:	2300      	movs	r3, #0
 80022c4:	f083 0301 	eor.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 80022ce:	7b3b      	ldrb	r3, [r7, #12]
 80022d0:	e165      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022d6:	237d      	movs	r3, #125	@ 0x7d
 80022d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 80022dc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80022de:	f7ff fe4f 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80022ea:	4293      	cmp	r3, r2
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 80022f8:	2300      	movs	r3, #0
 80022fa:	e003      	b.n	8002304 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80022fc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80022fe:	f000 f971 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002302:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fec1 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002314:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002318:	e141      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4619      	mov	r1, r3
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f7fe fd9e 	bl	8000e62 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8002326:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 800232a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800232e:	2b00      	cmp	r3, #0
 8002330:	d108      	bne.n	8002344 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8002332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002336:	2103      	movs	r1, #3
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe feac 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800233e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002342:	e12c      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f957 	bl	80025fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8002350:	4603      	mov	r3, r0
 8002352:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe feaa 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800236a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8002378:	2300      	movs	r3, #0
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8002384:	7b3b      	ldrb	r3, [r7, #12]
 8002386:	e10a      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8002388:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fb91 	bl	8001ab6 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8002394:	4603      	mov	r3, r0
 8002396:	4619      	mov	r1, r3
 8002398:	4620      	mov	r0, r4
 800239a:	f7fe fb50 	bl	8000a3e <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fd0e 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 80023a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ac:	f107 020c 	add.w	r2, r7, #12
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fe80 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 80023d8:	7b3b      	ldrb	r3, [r7, #12]
 80023da:	e0e0      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	673b      	str	r3, [r7, #112]	@ 0x70
 80023e0:	233a      	movs	r3, #58	@ 0x3a
 80023e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 80023e6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80023e8:	f7ff fdca 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 8002402:	2300      	movs	r3, #0
 8002404:	e003      	b.n	800240e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 8002406:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002408:	f000 f8ec 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800240c:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 8002418:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fe39 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002424:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002428:	e0b9      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7b1b      	ldrb	r3, [r3, #12]
 800242e:	3b01      	subs	r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8002436:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800243a:	f7fe fae3 	bl	8000a04 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fc43 	bl	8001cce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002448:	4603      	mov	r3, r0
 800244a:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7b1b      	ldrb	r3, [r3, #12]
 8002450:	3301      	adds	r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002458:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fe28 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 800246e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 800247c:	2300      	movs	r3, #0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8002488:	7b3b      	ldrb	r3, [r7, #12]
 800248a:	e088      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fc97 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002492:	4603      	mov	r3, r0
 8002494:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002496:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800249a:	f107 020c 	add.w	r2, r7, #12
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fe09 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80024a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80024ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 80024ba:	2300      	movs	r3, #0
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	e069      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ce:	237d      	movs	r3, #125	@ 0x7d
 80024d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 80024d4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80024d6:	f7ff fd53 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024e2:	4293      	cmp	r3, r2
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80024f0:	2300      	movs	r3, #0
 80024f2:	e003      	b.n	80024fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80024f4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80024f6:	f000 f875 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80024fa:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 8002500:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fdc5 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800250c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002510:	e045      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	663b      	str	r3, [r7, #96]	@ 0x60
 8002516:	232c      	movs	r3, #44	@ 0x2c
 8002518:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 800251c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800251e:	f7ff fd2f 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800252a:	4293      	cmp	r3, r2
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8002538:	2300      	movs	r3, #0
 800253a:	e003      	b.n	8002544 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 800253c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800253e:	f000 f851 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002542:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 800254e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002552:	2102      	movs	r1, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fd9e 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800255a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800255e:	e01e      	b.n	800259e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff fc2d 	bl	8001dc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002566:	4603      	mov	r3, r0
 8002568:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800256a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800256e:	f107 020c 	add.w	r2, r7, #12
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd9f 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800257a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8002580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 800258e:	2300      	movs	r3, #0
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f43f aebf 	beq.w	800231a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800259c:	7b3b      	ldrb	r3, [r7, #12]
  }
 800259e:	4618      	mov	r0, r3
 80025a0:	378c      	adds	r7, #140	@ 0x8c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}

080025a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fce5 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f83f 	bl	800263c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f84c 	bl	8002664 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 80025cc:	4603      	mov	r3, r0
 80025ce:	e005      	b.n	80025dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f881 	bl	80026da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80025d8:	4603      	mov	r3, r0
 80025da:	bf00      	nop
  }
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    _loaded = false;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	739a      	strb	r2, [r3, #14]
  }
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fcb9 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800260e:	4603      	mov	r3, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f813 	bl	800263c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f92f 	bl	8002882 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8002624:	4603      	mov	r3, r0
 8002626:	e005      	b.n	8002634 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9c1 	bl	80029b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8002630:	4603      	mov	r3, r0
 8002632:	bf00      	nop
  }
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b27      	cmp	r3, #39	@ 0x27
 800264a:	d002      	beq.n	8002652 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	2b22      	cmp	r3, #34	@ 0x22
 8002650:	d101      	bne.n	8002656 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 8002656:	2300      	movs	r3, #0
  }
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f904 	bl	8002882 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 800267a:	4603      	mov	r3, r0
 800267c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	f107 020c 	add.w	r2, r7, #12
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fd15 	bl	80010b8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80026a2:	2300      	movs	r3, #0
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	e00f      	b.n	80026d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f9fe 	bl	8001ab6 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4619      	mov	r1, r3
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	f7fe fb16 	bl	8000cf0 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fce3 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80026d0:	7f3b      	ldrb	r3, [r7, #28]
  }
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 80026da:	b580      	push	{r7, lr}
 80026dc:	b0a0      	sub	sp, #128	@ 0x80
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fc48 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 80026f6:	e013      	b.n	8002720 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff73 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 80026fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 8002708:	3380      	adds	r3, #128	@ 0x80
 800270a:	443b      	add	r3, r7
 800270c:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8002710:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fc33 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8002720:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f9af 	bl	8002a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8002730:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002734:	2b3e      	cmp	r3, #62	@ 0x3e
 8002736:	d801      	bhi.n	800273c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 800273c:	2300      	movs	r3, #0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1da      	bne.n	80026f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8002742:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002746:	3380      	adds	r3, #128	@ 0x80
 8002748:	443b      	add	r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8002750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002754:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 8002758:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800275c:	2b74      	cmp	r3, #116	@ 0x74
 800275e:	d114      	bne.n	800278a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8002760:	2101      	movs	r1, #1
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	f7fe fa6a 	bl	8000c3c <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 8002768:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800276c:	2b04      	cmp	r3, #4
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8002776:	461a      	mov	r2, r3
 8002778:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fc89 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002784:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002788:	e077      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 800278a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800278e:	2b66      	cmp	r3, #102	@ 0x66
 8002790:	d114      	bne.n	80027bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8002792:	2100      	movs	r1, #0
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f7fe fa51 	bl	8000c3c <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 800279a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800279e:	2b05      	cmp	r3, #5
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027a8:	461a      	mov	r2, r3
 80027aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fc70 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027b6:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80027ba:	e05e      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 80027bc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80027c2:	d110      	bne.n	80027e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 80027c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027d2:	461a      	mov	r2, r3
 80027d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fc5b 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027e0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80027e4:	e049      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f979 	bl	8002ae8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fb7a 	bl	8002ef4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8002800:	4603      	mov	r3, r0
 8002802:	2b08      	cmp	r3, #8
 8002804:	d021      	beq.n	800284a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 8002806:	2b08      	cmp	r3, #8
 8002808:	dc2f      	bgt.n	800286a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 800280a:	2b06      	cmp	r3, #6
 800280c:	d00f      	beq.n	800282e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 800280e:	2b07      	cmp	r3, #7
 8002810:	d12b      	bne.n	800286a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8002812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f7fe fa4b 	bl	8000cb2 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 800281c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc37 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002828:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800282c:	e025      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 800282e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	f7fe fa2a 	bl	8000c8c <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8002838:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fc29 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002844:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002848:	e017      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 800284a:	ed97 7b04 	vldr	d7, [r7, #16]
 800284e:	eeb0 0b47 	vmov.f64	d0, d7
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f7fe fa07 	bl	8000c66 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8002858:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fc19 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002864:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002868:	e007      	b.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 800286a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fc10 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002876:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 800287a:	4618      	mov	r0, r3
 800287c:	3780      	adds	r7, #128	@ 0x80
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b08c      	sub	sp, #48	@ 0x30
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 0208 	add.w	r2, r3, #8
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fbb1 	bl	8001000 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fb6e 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fe9a 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fb65 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fe91 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 80028c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80028c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d04f      	beq.n	800296e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 80028ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 80028d6:	f107 0318 	add.w	r3, r7, #24
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fbda 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028e2:	7e3b      	ldrb	r3, [r7, #24]
 80028e4:	e061      	b.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 80028e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028ea:	2b5c      	cmp	r3, #92	@ 0x5c
 80028ec:	d136      	bne.n	800295c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fb46 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 80028fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fbc4 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800290e:	7f3b      	ldrb	r3, [r7, #28]
 8002910:	e04b      	b.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 8002912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002916:	2b75      	cmp	r3, #117	@ 0x75
 8002918:	d108      	bne.n	800292c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 800291a:	f107 0320 	add.w	r3, r7, #32
 800291e:	2104      	movs	r1, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fbb8 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800292a:	e03e      	b.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 800292c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fc33 	bl	800119c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 800293c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8002944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fba3 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002950:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002954:	e029      	b.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fe44 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 800295c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fafa 	bl	8000f60 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 800296c:	e7a0      	b.n	80028b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 800296e:	bf00      	nop
    result = builder.complete();
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fb18 	bl	8000faa <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 800297a:	4602      	mov	r2, r0
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 8002988:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800298c:	2103      	movs	r1, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fb81 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002994:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002998:	e007      	b.n	80029aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 800299a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fb78 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 80029aa:	4618      	mov	r0, r3
 80029ac:	3730      	adds	r7, #48	@ 0x30
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	@ 0x28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 0208 	add.w	r2, r3, #8
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fb19 	bl	8001000 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fad6 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fb54 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029ee:	7e3b      	ldrb	r3, [r7, #24]
 80029f0:	e046      	b.n	8002a80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 80029f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f846 	bl	8002a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fdee 	bl	80025e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8002a08:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe faa4 	bl	8000f60 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fab1 	bl	8001f80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f82d 	bl	8002a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e6      	bne.n	8002a02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8002a34:	e007      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fb2a 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a42:	7f3b      	ldrb	r3, [r7, #28]
 8002a44:	e01c      	b.n	8002a80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe faad 	bl	8000faa <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8002a50:	4602      	mov	r2, r0
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8002a5e:	f107 0320 	add.w	r3, r7, #32
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fb16 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a6e:	e007      	b.n	8002a80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8002a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fb0d 	bl	8001096 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	@ 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	2239      	movs	r2, #57	@ 0x39
 8002a96:	2130      	movs	r1, #48	@ 0x30
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa37 	bl	8002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002a9e:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11a      	bne.n	8002ada <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	227a      	movs	r2, #122	@ 0x7a
 8002aa8:	215f      	movs	r1, #95	@ 0x5f
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa2e 	bl	8002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d111      	bne.n	8002ada <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	225a      	movs	r2, #90	@ 0x5a
 8002aba:	2141      	movs	r1, #65	@ 0x41
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fa25 	bl	8002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002ac2:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b2b      	cmp	r3, #43	@ 0x2b
 8002acc:	d005      	beq.n	8002ada <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ad2:	d002      	beq.n	8002ada <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ad8:	d101      	bne.n	8002ade <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8002ade:	2300      	movs	r3, #0
  }
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b0a2      	sub	sp, #136	@ 0x88
 8002aee:	af02      	add	r7, sp, #8
 8002af0:	6478      	str	r0, [r7, #68]	@ 0x44
 8002af2:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8002afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b00:	d008      	beq.n	8002b14 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8002b02:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b04:	d10a      	bne.n	8002b1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0e:	3301      	adds	r3, #1
 8002b10:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b12:	e003      	b.n	8002b1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8002b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b16:	3301      	adds	r3, #1
 8002b18:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b1a:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b6e      	cmp	r3, #110	@ 0x6e
 8002b22:	d003      	beq.n	8002b2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8002b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b2a:	d109      	bne.n	8002b40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8002b2c:	f000 fa08 	bl	8002f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8002b30:	eeb0 7b40 	vmov.f64	d7, d0
 8002b34:	eeb0 0b47 	vmov.f64	d0, d7
 8002b38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b3a:	f000 fa0f 	bl	8002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002b3e:	e1d4      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8002b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b69      	cmp	r3, #105	@ 0x69
 8002b46:	d003      	beq.n	8002b50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8002b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b49      	cmp	r3, #73	@ 0x49
 8002b4e:	d114      	bne.n	8002b7a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8002b50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8002b58:	f000 fa16 	bl	8002f88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b60:	eeb1 7b47 	vneg.f64	d7, d7
 8002b64:	e003      	b.n	8002b6e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8002b66:	f000 fa0f 	bl	8002f88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8002b72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b74:	f000 f9f2 	bl	8002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002b78:	e1b7      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f9bb 	bl	8000efa <_ZN19ArduinoJson6101_1107isdigitEc>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b96:	d001      	beq.n	8002b9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8002ba2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ba4:	f000 f9fe 	bl	8002fa4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002ba8:	e19f      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8002bc8:	e054      	b.n	8002c74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8002bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3b30      	subs	r3, #48	@ 0x30
 8002bd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8002bd4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bd8:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002bdc:	49b2      	ldr	r1, [pc, #712]	@ (8002ea8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8002bde:	418b      	sbcs	r3, r1
 8002be0:	d251      	bcs.n	8002c86 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8002be2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002be6:	4622      	mov	r2, r4
 8002be8:	462b      	mov	r3, r5
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	0099      	lsls	r1, r3, #2
 8002bf4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002bf8:	0090      	lsls	r0, r2, #2
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	eb12 0804 	adds.w	r8, r2, r4
 8002c02:	eb43 0905 	adc.w	r9, r3, r5
 8002c06:	eb18 0308 	adds.w	r3, r8, r8
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	eb49 0309 	adc.w	r3, r9, r9
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c16:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8002c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c1e:	2200      	movs	r2, #0
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c22:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002c28:	460b      	mov	r3, r1
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2e:	4613      	mov	r3, r2
 8002c30:	43db      	mvns	r3, r3
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c34:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4291      	cmp	r1, r2
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c46:	d320      	bcc.n	8002c8a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8002c48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c56:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	1851      	adds	r1, r2, r1
 8002c5e:	6139      	str	r1, [r7, #16]
 8002c60:	4629      	mov	r1, r5
 8002c62:	414b      	adcs	r3, r1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c6a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c70:	3301      	adds	r3, #1
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe f93e 	bl	8000efa <_ZN19ArduinoJson6101_1107isdigitEc>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1a2      	bne.n	8002bca <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8002c84:	e002      	b.n	8002c8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8002c8a:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11b      	bne.n	8002ccc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8002c94:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ca0:	f000 f99c 	bl	8002fdc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8002ca4:	e121      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002ca6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002caa:	f04f 020a 	mov.w	r2, #10
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	f7fd fd21 	bl	80006f8 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8002cbe:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8002ccc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cd4:	d2e7      	bcs.n	8002ca6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002cd6:	e009      	b.n	8002cec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8002cd8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce8:	3301      	adds	r3, #1
 8002cea:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe f902 	bl	8000efa <_ZN19ArduinoJson6101_1107isdigitEc>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ed      	bne.n	8002cd8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d02:	d14c      	bne.n	8002d9e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8002d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d06:	3301      	adds	r3, #1
 8002d08:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d0a:	e040      	b.n	8002d8e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8002d0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d10:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002d14:	4965      	ldr	r1, [pc, #404]	@ (8002eac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8002d16:	418b      	sbcs	r3, r1
 8002d18:	d236      	bcs.n	8002d88 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002d1a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002d30:	0090      	lsls	r0, r2, #2
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	eb12 0a04 	adds.w	sl, r2, r4
 8002d3a:	eb43 0b05 	adc.w	fp, r3, r5
 8002d3e:	eb1a 030a 	adds.w	r3, sl, sl
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	eb4b 030b 	adc.w	r3, fp, fp
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d4e:	4652      	mov	r2, sl
 8002d50:	465b      	mov	r3, fp
 8002d52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d54:	7809      	ldrb	r1, [r1, #0]
 8002d56:	3930      	subs	r1, #48	@ 0x30
 8002d58:	b2c9      	uxtb	r1, r1
 8002d5a:	b2c9      	uxtb	r1, r1
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	6239      	str	r1, [r7, #32]
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d66:	4621      	mov	r1, r4
 8002d68:	1851      	adds	r1, r2, r1
 8002d6a:	6039      	str	r1, [r7, #0]
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	414b      	adcs	r3, r1
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d76:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8002d7a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8002d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f8b1 	bl	8000efa <_ZN19ArduinoJson6101_1107isdigitEc>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1b6      	bne.n	8002d0c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8002da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b65      	cmp	r3, #101	@ 0x65
 8002da8:	d003      	beq.n	8002db2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8002daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b45      	cmp	r3, #69	@ 0x45
 8002db0:	d164      	bne.n	8002e7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8002db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db4:	3301      	adds	r3, #1
 8002db6:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8002dc4:	d106      	bne.n	8002dd4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8002dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dce:	3301      	adds	r3, #1
 8002dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dd2:	e044      	b.n	8002e5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b2b      	cmp	r3, #43	@ 0x2b
 8002dda:	d140      	bne.n	8002e5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dde:	3301      	adds	r3, #1
 8002de0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8002de2:	e03c      	b.n	8002e5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8002de4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	461a      	mov	r2, r3
 8002df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b30      	subs	r3, #48	@ 0x30
 8002df6:	4413      	add	r3, r2
 8002df8:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8002dfa:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e00:	4413      	add	r3, r2
 8002e02:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002e06:	dd27      	ble.n	8002e58 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8002e08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8002e10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8002e18:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8002e98 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8002e1c:	e001      	b.n	8002e22 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8002e1e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8002ea0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8002e22:	eeb0 0b47 	vmov.f64	d0, d7
 8002e26:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e28:	f000 f898 	bl	8002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002e2c:	e05d      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8002e2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8002e36:	f000 f8a7 	bl	8002f88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e3e:	eeb1 7b47 	vneg.f64	d7, d7
 8002e42:	e003      	b.n	8002e4c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8002e44:	f000 f8a0 	bl	8002f88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002e48:	eeb0 7b40 	vmov.f64	d7, d0
 8002e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8002e50:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e52:	f000 f883 	bl	8002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002e56:	e048      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8002e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f849 	bl	8000efa <_ZN19ArduinoJson6101_1107isdigitEc>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ba      	bne.n	8002de4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8002e6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8002e76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e78:	425b      	negs	r3, r3
 8002e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8002e7c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002e80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e82:	4413      	add	r3, r2
 8002e84:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8002e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8002e8e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e90:	f000 f888 	bl	8002fa4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002e94:	e029      	b.n	8002eea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8002e96:	bf00      	nop
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	80000000 	.word	0x80000000
	...
 8002ea8:	19999999 	.word	0x19999999
 8002eac:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8002eb0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002eb4:	f7fd fbea 	bl	800068c <__aeabi_ul2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002ebe:	ec43 2b10 	vmov	d0, r2, r3
 8002ec2:	f000 f8ac 	bl	800301e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8002ec6:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8002eca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8002ed2:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002ed6:	eeb1 7b47 	vneg.f64	d7, d7
 8002eda:	e001      	b.n	8002ee0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8002edc:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002ee0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ee4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ee6:	f000 f839 	bl	8002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8002eea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002eec:	3780      	adds	r7, #128	@ 0x80
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ef4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    return _type;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7c1b      	ldrb	r3, [r3, #16]
  }
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8002f1e:	79ba      	ldrb	r2, [r7, #6]
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d805      	bhi.n	8002f32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	797b      	ldrb	r3, [r7, #5]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d801      	bhi.n	8002f32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8002f32:	2300      	movs	r3, #0
  }
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8002f44:	2100      	movs	r1, #0
 8002f46:	4804      	ldr	r0, [pc, #16]	@ (8002f58 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8002f48:	f000 f8b9 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002f4c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002f50:	eeb0 0b47 	vmov.f64	d0, d7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	7ff80000 	.word	0x7ff80000

08002f5c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	ed87 0b00 	vstr	d0, [r7]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2208      	movs	r2, #8
 8002f76:	741a      	strb	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4804      	ldr	r0, [pc, #16]	@ (8002fa0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8002f90:	f000 f895 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002f94:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002f98:	eeb0 0b47 	vmov.f64	d0, d7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	7ff00000 	.word	0x7ff00000

08002fa4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9c1 2300 	strd	r2, r3, [r1]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	741a      	strb	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8002ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff6:	f7fd fb49 	bl	800068c <__aeabi_ul2d>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8003004:	7e3b      	ldrb	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 800300a:	2207      	movs	r2, #7
 800300c:	e000      	b.n	8003010 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 800300e:	2206      	movs	r2, #6
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	ed87 0b02 	vstr	d0, [r7, #8]
 8003028:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	dd1d      	ble.n	800306c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
 8003034:	e016      	b.n	8003064 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f860 	bl	8003108 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8003048:	eeb0 6b40 	vmov.f64	d6, d0
 800304c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003050:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003054:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	105b      	asrs	r3, r3, #1
 800305c:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	3301      	adds	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e5      	bne.n	8003036 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 800306a:	e01f      	b.n	80030ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	425b      	negs	r3, r3
 8003070:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8003072:	2300      	movs	r3, #0
 8003074:	75bb      	strb	r3, [r7, #22]
 8003076:	e016      	b.n	80030a6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8003082:	7dbb      	ldrb	r3, [r7, #22]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f8a3 	bl	80031d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 800308a:	eeb0 6b40 	vmov.f64	d6, d0
 800308e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003096:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	105b      	asrs	r3, r3, #1
 800309e:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030a0:	7dbb      	ldrb	r3, [r7, #22]
 80030a2:	3301      	adds	r3, #1
 80030a4:	75bb      	strb	r3, [r7, #22]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 80030ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b0:	ec43 2b17 	vmov	d7, r2, r3
  }
 80030b4:	eeb0 0b47 	vmov.f64	d0, d7
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 80030be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	469a      	mov	sl, r3
 80030d0:	4693      	mov	fp, r2
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	4653      	mov	r3, sl
 80030dc:	2200      	movs	r2, #0
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	2000      	movs	r0, #0
 80030e2:	460c      	mov	r4, r1
 80030e4:	4605      	mov	r5, r0
 80030e6:	ea42 0804 	orr.w	r8, r2, r4
 80030ea:	ea43 0905 	orr.w	r9, r3, r5
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f000 f913 	bl	800331c <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 80030f6:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80030fa:	eeb0 0b47 	vmov.f64	d0, d7
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003108 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003110:	4b25      	ldr	r3, [pc, #148]	@ (80031a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3bf 8f5b 	dmb	ish
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d031      	beq.n	800318e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 800312a:	481f      	ldr	r0, [pc, #124]	@ (80031a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800312c:	f00d f927 	bl	801037e <__cxa_guard_acquire>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d026      	beq.n	800318e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8003140:	491a      	ldr	r1, [pc, #104]	@ (80031ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8003142:	481b      	ldr	r0, [pc, #108]	@ (80031b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8003144:	f7ff ffbb 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003148:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800314e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8003152:	4919      	ldr	r1, [pc, #100]	@ (80031b8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8003154:	4819      	ldr	r0, [pc, #100]	@ (80031bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8003156:	f7ff ffb2 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800315a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003160:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8003164:	4916      	ldr	r1, [pc, #88]	@ (80031c0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8003166:	4817      	ldr	r0, [pc, #92]	@ (80031c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8003168:	f7ff ffa9 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800316c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003170:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003172:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8003176:	4914      	ldr	r1, [pc, #80]	@ (80031c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8003178:	4814      	ldr	r0, [pc, #80]	@ (80031cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 800317a:	f7ff ffa0 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800317e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003184:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003188:	4807      	ldr	r0, [pc, #28]	@ (80031a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800318a:	f00d f904 	bl	8010396 <__cxa_guard_release>
    return factors[index];
 800318e:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	ec43 2b17 	vmov	d7, r2, r3
  }
 800319e:	eeb0 0b47 	vmov.f64	d0, d7
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	24000534 	.word	0x24000534
 80031ac:	b5056e17 	.word	0xb5056e17
 80031b0:	4693b8b5 	.word	0x4693b8b5
 80031b4:	24000008 	.word	0x24000008
 80031b8:	e93ff9f5 	.word	0xe93ff9f5
 80031bc:	4d384f03 	.word	0x4d384f03
 80031c0:	f9301d32 	.word	0xf9301d32
 80031c4:	5a827748 	.word	0x5a827748
 80031c8:	7f73bf3c 	.word	0x7f73bf3c
 80031cc:	75154fdd 	.word	0x75154fdd

080031d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 80031d8:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3bf 8f5b 	dmb	ish
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d05e      	beq.n	80032b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 80031f2:	4836      	ldr	r0, [pc, #216]	@ (80032cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80031f4:	f00d f8c3 	bl	801037e <__cxa_guard_acquire>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d053      	beq.n	80032b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8003208:	4931      	ldr	r1, [pc, #196]	@ (80032d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 800320a:	4832      	ldr	r0, [pc, #200]	@ (80032d4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 800320c:	f7ff ff57 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003210:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003214:	4b30      	ldr	r3, [pc, #192]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003216:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 800321a:	4930      	ldr	r1, [pc, #192]	@ (80032dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 800321c:	4830      	ldr	r0, [pc, #192]	@ (80032e0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 800321e:	f7ff ff4e 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003222:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003228:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 800322c:	492d      	ldr	r1, [pc, #180]	@ (80032e4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 800322e:	482e      	ldr	r0, [pc, #184]	@ (80032e8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 8003230:	f7ff ff45 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003234:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003238:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800323a:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 800323e:	492b      	ldr	r1, [pc, #172]	@ (80032ec <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 8003240:	482b      	ldr	r0, [pc, #172]	@ (80032f0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 8003242:	f7ff ff3c 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003246:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800324c:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8003250:	4928      	ldr	r1, [pc, #160]	@ (80032f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8003252:	4829      	ldr	r0, [pc, #164]	@ (80032f8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8003254:	f7ff ff33 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003258:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800325c:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800325e:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 8003262:	4926      	ldr	r1, [pc, #152]	@ (80032fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8003264:	4826      	ldr	r0, [pc, #152]	@ (8003300 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8003266:	f7ff ff2a 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800326a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003270:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8003274:	4923      	ldr	r1, [pc, #140]	@ (8003304 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8003276:	4824      	ldr	r0, [pc, #144]	@ (8003308 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8003278:	f7ff ff21 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800327c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003280:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003282:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 8003286:	4921      	ldr	r1, [pc, #132]	@ (800330c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8003288:	4821      	ldr	r0, [pc, #132]	@ (8003310 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 800328a:	f7ff ff18 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800328e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003294:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8003298:	491e      	ldr	r1, [pc, #120]	@ (8003314 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 800329a:	481f      	ldr	r0, [pc, #124]	@ (8003318 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 800329c:	f7ff ff0f 	bl	80030be <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032a0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032a6:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80032aa:	4808      	ldr	r0, [pc, #32]	@ (80032cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80032ac:	f00d f873 	bl	8010396 <__cxa_guard_release>
    return factors[index];
 80032b0:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	ec43 2b17 	vmov	d7, r2, r3
  }
 80032c0:	eeb0 0b47 	vmov.f64	d0, d7
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	24000580 	.word	0x24000580
 80032d0:	9999999a 	.word	0x9999999a
 80032d4:	3fb99999 	.word	0x3fb99999
 80032d8:	24000538 	.word	0x24000538
 80032dc:	47ae147b 	.word	0x47ae147b
 80032e0:	3f847ae1 	.word	0x3f847ae1
 80032e4:	eb1c432d 	.word	0xeb1c432d
 80032e8:	3f1a36e2 	.word	0x3f1a36e2
 80032ec:	e2308c3a 	.word	0xe2308c3a
 80032f0:	3e45798e 	.word	0x3e45798e
 80032f4:	97d889bc 	.word	0x97d889bc
 80032f8:	3c9cd2b2 	.word	0x3c9cd2b2
 80032fc:	d5a8a733 	.word	0xd5a8a733
 8003300:	3949f623 	.word	0x3949f623
 8003304:	44f4a73d 	.word	0x44f4a73d
 8003308:	32a50ffd 	.word	0x32a50ffd
 800330c:	cf8c979d 	.word	0xcf8c979d
 8003310:	255bba08 	.word	0x255bba08
 8003314:	64ac6f43 	.word	0x64ac6f43
 8003318:	0ac80628 	.word	0x0ac80628

0800331c <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8003326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800332e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003332:	ec43 2b17 	vmov	d7, r2, r3
}
 8003336:	eeb0 0b47 	vmov.f64	d0, d7
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d12d      	bne.n	80033b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800335a:	4293      	cmp	r3, r2
 800335c:	d128      	bne.n	80033b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::string strJson;
 800335e:	481d      	ldr	r0, [pc, #116]	@ (80033d4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003360:	f00d f89f 	bl	80104a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8003364:	4622      	mov	r2, r4
 8003366:	f242 7110 	movw	r1, #10000	@ 0x2710
 800336a:	481b      	ldr	r0, [pc, #108]	@ (80033d8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800336c:	f7fe fbc1 	bl	8001af2 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fbad 	bl	8001ad4 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800337a:	4b18      	ldr	r3, [pc, #96]	@ (80033dc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fba5 	bl	8001ad4 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 8003390:	f44f 7020 	mov.w	r0, #640	@ 0x280
 8003394:	f00d f802 	bl	801039c <_Znwj>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80033a6:	4620      	mov	r0, r4
 80033a8:	f000 fb88 	bl	8003abc <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 80033ac:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80033ae:	601c      	str	r4, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <_Z41__static_initialization_and_destruction_0ii+0x88>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033bc:	4293      	cmp	r3, r2
 80033be:	d105      	bne.n	80033cc <_Z41__static_initialization_and_destruction_0ii+0x88>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80033c0:	4805      	ldr	r0, [pc, #20]	@ (80033d8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80033c2:	f000 f817 	bl	80033f4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 80033c6:	4803      	ldr	r0, [pc, #12]	@ (80033d4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80033c8:	f00d f872 	bl	80104b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	24000330 	.word	0x24000330
 80033d8:	24000348 	.word	0x24000348
 80033dc:	24000370 	.word	0x24000370
 80033e0:	24000378 	.word	0x24000378
 80033e4:	24000000 	.word	0x24000000
 80033e8:	24000004 	.word	0x24000004
 80033ec:	40013000 	.word	0x40013000
 80033f0:	24000530 	.word	0x24000530

080033f4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    freePool();
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f805 	bl	800340c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8003414:	687c      	ldr	r4, [r7, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3308      	adds	r3, #8
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fcd4 	bl	8000dc8 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003420:	4603      	mov	r3, r0
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fb6c 	bl	8000b00 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8003428:	4603      	mov	r3, r0
 800342a:	4619      	mov	r1, r3
 800342c:	4620      	mov	r0, r4
 800342e:	f000 f804 	bl	800343a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}

0800343a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fcfe 	bl	8000e4a <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 8003456:	b580      	push	{r7, lr}
 8003458:	af00      	add	r7, sp, #0
 800345a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800345e:	2001      	movs	r0, #1
 8003460:	f7ff ff70 	bl	8003344 <_Z41__static_initialization_and_destruction_0ii>
 8003464:	bd80      	pop	{r7, pc}

08003466 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
 800346a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800346e:	2000      	movs	r0, #0
 8003470:	f7ff ff68 	bl	8003344 <_Z41__static_initialization_and_destruction_0ii>
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_MspInit+0x30>)
 8003480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003484:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <HAL_MspInit+0x30>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_MspInit+0x30>)
 8003490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58024400 	.word	0x58024400

080034ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0bc      	sub	sp, #240	@ 0xf0
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	22c0      	movs	r2, #192	@ 0xc0
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f00d fbf5 	bl	8010cbc <memset>
  if(hsd->Instance==SDMMC1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3c      	ldr	r2, [pc, #240]	@ (80035c8 <HAL_SD_MspInit+0x11c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d171      	bne.n	80035c0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80034dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ec:	f107 0318 	add.w	r3, r7, #24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fe8d 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80034fc:	f7fe fab6 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003500:	4b32      	ldr	r3, [pc, #200]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003506:	4a31      	ldr	r2, [pc, #196]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003510:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351e:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003524:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003526:	f043 0304 	orr.w	r3, r3, #4
 800352a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800352e:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800353c:	4b23      	ldr	r3, [pc, #140]	@ (80035cc <HAL_SD_MspInit+0x120>)
 800353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_SD_MspInit+0x120>)
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800354c:	4b1f      	ldr	r3, [pc, #124]	@ (80035cc <HAL_SD_MspInit+0x120>)
 800354e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800355a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356e:	2303      	movs	r3, #3
 8003570:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003574:	230c      	movs	r3, #12
 8003576:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800357e:	4619      	mov	r1, r3
 8003580:	4813      	ldr	r0, [pc, #76]	@ (80035d0 <HAL_SD_MspInit+0x124>)
 8003582:	f002 fc75 	bl	8005e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003586:	2304      	movs	r3, #4
 8003588:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800359e:	230c      	movs	r3, #12
 80035a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035a8:	4619      	mov	r1, r3
 80035aa:	480a      	ldr	r0, [pc, #40]	@ (80035d4 <HAL_SD_MspInit+0x128>)
 80035ac:	f002 fc60 	bl	8005e70 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2031      	movs	r0, #49	@ 0x31
 80035b6:	f000 fed6 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80035ba:	2031      	movs	r0, #49	@ 0x31
 80035bc:	f000 feed 	bl	800439a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80035c0:	bf00      	nop
 80035c2:	37f0      	adds	r7, #240	@ 0xf0
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	52007000 	.word	0x52007000
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020c00 	.word	0x58020c00

080035d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0ba      	sub	sp, #232	@ 0xe8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	22c0      	movs	r2, #192	@ 0xc0
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f00d fb5f 	bl	8010cbc <memset>
  if(huart->Instance==USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <HAL_UART_MspInit+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d146      	bne.n	8003696 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003608:	f04f 0201 	mov.w	r2, #1
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800361a:	f107 0310 	add.w	r3, r7, #16
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fdf6 	bl	8007210 <HAL_RCCEx_PeriphCLKConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800362a:	f7fe fa1f 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 8003630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 8003636:	f043 0310 	orr.w	r3, r3, #16
 800363a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800363e:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 8003640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 800364e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003652:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_UART_MspInit+0xcc>)
 800365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800366a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003684:	2307      	movs	r3, #7
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800368e:	4619      	mov	r1, r3
 8003690:	4805      	ldr	r0, [pc, #20]	@ (80036a8 <HAL_UART_MspInit+0xd0>)
 8003692:	f002 fbed 	bl	8005e70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003696:	bf00      	nop
 8003698:	37e8      	adds	r7, #232	@ 0xe8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40011000 	.word	0x40011000
 80036a4:	58024400 	.word	0x58024400
 80036a8:	58020000 	.word	0x58020000

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <NMI_Handler+0x4>

080036b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <MemManage_Handler+0x4>

080036c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003702:	f000 fd05 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}

0800370a <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003738:	4802      	ldr	r0, [pc, #8]	@ (8003744 <SDMMC1_IRQHandler+0x10>)
 800373a:	f006 fcd7 	bl	800a0ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	24000420 	.word	0x24000420

08003748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
	return 1;
 800374c:	2301      	movs	r3, #1
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_kill>:

int _kill(int pid, int sig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003762:	f00d fb4d 	bl	8010e00 <__errno>
 8003766:	4603      	mov	r3, r0
 8003768:	2216      	movs	r2, #22
 800376a:	601a      	str	r2, [r3, #0]
	return -1;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_exit>:

void _exit (int status)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ffe7 	bl	8003758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <_exit+0x12>

0800378e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e00a      	b.n	80037b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037a0:	f3af 8000 	nop.w
 80037a4:	4601      	mov	r1, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	60ba      	str	r2, [r7, #8]
 80037ac:	b2ca      	uxtb	r2, r1
 80037ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	dbf0      	blt.n	80037a0 <_read+0x12>
	}

return len;
 80037be:	687b      	ldr	r3, [r7, #4]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e009      	b.n	80037ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	60ba      	str	r2, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fd28 	bl	8001238 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	dbf1      	blt.n	80037da <_write+0x12>
	}
	return len;
 80037f6:	687b      	ldr	r3, [r7, #4]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_close>:

int _close(int file)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	return -1;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003828:	605a      	str	r2, [r3, #4]
	return 0;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_isatty>:

int _isatty(int file)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	return 1;
 8003840:	2301      	movs	r3, #1
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
	return 0;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <_sbrk+0x5c>)
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <_sbrk+0x60>)
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <_sbrk+0x64>)
 8003886:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <_sbrk+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388a:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003898:	f00d fab2 	bl	8010e00 <__errno>
 800389c:	4603      	mov	r3, r0
 800389e:	220c      	movs	r2, #12
 80038a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	e009      	b.n	80038bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <_sbrk+0x64>)
 80038b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	24080000 	.word	0x24080000
 80038c8:	00000400 	.word	0x00000400
 80038cc:	24000584 	.word	0x24000584
 80038d0:	24000d80 	.word	0x24000d80

080038d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038d8:	4b37      	ldr	r3, [pc, #220]	@ (80039b8 <SystemInit+0xe4>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	4a36      	ldr	r2, [pc, #216]	@ (80039b8 <SystemInit+0xe4>)
 80038e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038e8:	4b34      	ldr	r3, [pc, #208]	@ (80039bc <SystemInit+0xe8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d807      	bhi.n	8003904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038f4:	4b31      	ldr	r3, [pc, #196]	@ (80039bc <SystemInit+0xe8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 030f 	bic.w	r3, r3, #15
 80038fc:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <SystemInit+0xe8>)
 80038fe:	f043 0307 	orr.w	r3, r3, #7
 8003902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003904:	4b2e      	ldr	r3, [pc, #184]	@ (80039c0 <SystemInit+0xec>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <SystemInit+0xec>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003910:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <SystemInit+0xec>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003916:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <SystemInit+0xec>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4929      	ldr	r1, [pc, #164]	@ (80039c0 <SystemInit+0xec>)
 800391c:	4b29      	ldr	r3, [pc, #164]	@ (80039c4 <SystemInit+0xf0>)
 800391e:	4013      	ands	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003922:	4b26      	ldr	r3, [pc, #152]	@ (80039bc <SystemInit+0xe8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <SystemInit+0xe8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 030f 	bic.w	r3, r3, #15
 8003936:	4a21      	ldr	r2, [pc, #132]	@ (80039bc <SystemInit+0xe8>)
 8003938:	f043 0307 	orr.w	r3, r3, #7
 800393c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800393e:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <SystemInit+0xec>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003944:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <SystemInit+0xec>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800394a:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <SystemInit+0xec>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <SystemInit+0xec>)
 8003952:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <SystemInit+0xf4>)
 8003954:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003956:	4b1a      	ldr	r3, [pc, #104]	@ (80039c0 <SystemInit+0xec>)
 8003958:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <SystemInit+0xf8>)
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800395c:	4b18      	ldr	r3, [pc, #96]	@ (80039c0 <SystemInit+0xec>)
 800395e:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <SystemInit+0xfc>)
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003962:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <SystemInit+0xec>)
 8003964:	2200      	movs	r2, #0
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003968:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <SystemInit+0xec>)
 800396a:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <SystemInit+0xfc>)
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800396e:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <SystemInit+0xec>)
 8003970:	2200      	movs	r2, #0
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <SystemInit+0xec>)
 8003976:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <SystemInit+0xfc>)
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800397a:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <SystemInit+0xec>)
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <SystemInit+0xec>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <SystemInit+0xec>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800398a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800398c:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <SystemInit+0xec>)
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <SystemInit+0x100>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <SystemInit+0x104>)
 8003998:	4013      	ands	r3, r2
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800399e:	d202      	bcs.n	80039a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <SystemInit+0x108>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <SystemInit+0x10c>)
 80039a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039ac:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00
 80039bc:	52002000 	.word	0x52002000
 80039c0:	58024400 	.word	0x58024400
 80039c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80039c8:	02020200 	.word	0x02020200
 80039cc:	01ff0000 	.word	0x01ff0000
 80039d0:	01010280 	.word	0x01010280
 80039d4:	5c001000 	.word	0x5c001000
 80039d8:	ffff0000 	.word	0xffff0000
 80039dc:	51008108 	.word	0x51008108
 80039e0:	52004000 	.word	0x52004000

080039e4 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <_ZN6ModuleC1Ev+0x2c>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 80039fe:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <_ZN6ModuleC1Ev+0x30>)
 8003a00:	f00d f862 	bl	8010ac8 <puts>
}
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	08011af8 	.word	0x08011af8
 8003a14:	080119f4 	.word	0x080119f4

08003a18 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <_ZN6ModuleD1Ev+0x1c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	08011af8 	.word	0x08011af8

08003a38 <_ZN6ModuleD0Ev>:
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffe9 	bl	8003a18 <_ZN6ModuleD1Ev>
 8003a46:	2114      	movs	r1, #20
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f00c fc96 	bl	801037a <_ZdlPvj>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_ZN6Module9configureEv>:
void Module::configure(){}
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff89 	bl	80039e4 <_ZN6ModuleC1Ev>
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	220a      	movs	r2, #10
 8003af6:	849a      	strh	r2, [r3, #36]	@ 0x24


}
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	08011b1c 	.word	0x08011b1c

08003b08 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	@ 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	4a7b      	ldr	r2, [pc, #492]	@ (8003d14 <_ZN11RemoraComms4initEv+0x20c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	f040 80f0 	bne.w	8003d0c <_ZN11RemoraComms4initEv+0x204>
    {
        printf("Initialising SPI1 slave\n");
 8003b2c:	487a      	ldr	r0, [pc, #488]	@ (8003d18 <_ZN11RemoraComms4initEv+0x210>)
 8003b2e:	f00c ffcb 	bl	8010ac8 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2207      	movs	r2, #7
 8003b42:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3328      	adds	r3, #40	@ 0x28
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f007 fc8f 	bl	800b4d4 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8003bb6:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bbc:	4a57      	ldr	r2, [pc, #348]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003bbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]

		printf("Initialising GPIO for SPI\n");
 8003bd4:	4852      	ldr	r0, [pc, #328]	@ (8003d20 <_ZN11RemoraComms4initEv+0x218>)
 8003bd6:	f00c ff77 	bl	8010ac8 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	4b50      	ldr	r3, [pc, #320]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be0:	4a4e      	ldr	r2, [pc, #312]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bea:	4b4c      	ldr	r3, [pc, #304]	@ (8003d1c <_ZN11RemoraComms4initEv+0x214>)
 8003bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bf8:	23f0      	movs	r3, #240	@ 0xf0
 8003bfa:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c08:	2305      	movs	r3, #5
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	4844      	ldr	r0, [pc, #272]	@ (8003d24 <_ZN11RemoraComms4initEv+0x21c>)
 8003c14:	f002 f92c 	bl	8005e70 <HAL_GPIO_Init>

        printf("Initialising DMA for SPI\n");
 8003c18:	4843      	ldr	r0, [pc, #268]	@ (8003d28 <_ZN11RemoraComms4initEv+0x220>)
 8003c1a:	f00c ff55 	bl	8010ac8 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <_ZN11RemoraComms4initEv+0x224>)
 8003c22:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2225      	movs	r2, #37	@ 0x25
 8003c2a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c44:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c5e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fc21 	bl	80044c0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <_ZN11RemoraComms4initEv+0x228>)
 8003c9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2226      	movs	r2, #38	@ 0x26
 8003ca2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2240      	movs	r2, #64	@ 0x40
 8003caa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cd6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	33b0      	adds	r3, #176	@ 0xb0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fbe6 	bl	80044c0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    interruptPtr = new ModuleInterrupt(this->irq, this);
	HAL_NVIC_SetPriority(this->irq, 5, 0);
    HAL_NVIC_EnableIRQ(this->irq);
*/
}
 8003d0c:	bf00      	nop
 8003d0e:	3728      	adds	r7, #40	@ 0x28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40013000 	.word	0x40013000
 8003d18:	08011a4c 	.word	0x08011a4c
 8003d1c:	58024400 	.word	0x58024400
 8003d20:	08011a64 	.word	0x08011a64
 8003d24:	58020000 	.word	0x58020000
 8003d28:	08011a80 	.word	0x08011a80
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020010 	.word	0x40020010

08003d34 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
    this->ptrTxData->header = PRU_DATA;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <_ZN11RemoraComms5startEv+0xd8>)
 8003d42:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f023 031f 	bic.w	r3, r3, #31
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	2340      	movs	r3, #64	@ 0x40
 8003d50:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	dd1d      	ble.n	8003d94 <_ZN11RemoraComms5startEv+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003d6e:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <_ZN11RemoraComms5startEv+0xdc>)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3320      	adds	r3, #32
 8003d7a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b20      	subs	r3, #32
 8003d80:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dcf2      	bgt.n	8003d6e <_ZN11RemoraComms5startEv+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d88:	f3bf 8f4f 	dsb	sy
}
 8003d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d8e:	f3bf 8f6f 	isb	sy
}
 8003d92:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8003d94:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003d9c:	f023 031f 	bic.w	r3, r3, #31
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	2340      	movs	r3, #64	@ 0x40
 8003da4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dd1d      	ble.n	8003de8 <_ZN11RemoraComms5startEv+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	4413      	add	r3, r2
 8003db6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dbc:	f3bf 8f4f 	dsb	sy
}
 8003dc0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <_ZN11RemoraComms5startEv+0xdc>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3320      	adds	r3, #32
 8003dce:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3b20      	subs	r3, #32
 8003dd4:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dcf2      	bgt.n	8003dc2 <_ZN11RemoraComms5startEv+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ddc:	f3bf 8f4f 	dsb	sy
}
 8003de0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003de2:	f3bf 8f6f 	isb	sy
}
 8003de6:	bf00      	nop
}
 8003de8:	bf00      	nop
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	4619      	mov	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8003dfc:	2340      	movs	r3, #64	@ 0x40
 8003dfe:	f007 fc97 	bl	800b730 <HAL_SPI_TransmitReceive_DMA>
}
 8003e02:	bf00      	nop
 8003e04:	3728      	adds	r7, #40	@ 0x28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	64617461 	.word	0x64617461
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <_ZN11RemoraComms15handleInterruptEv>:


void RemoraComms::handleInterrupt()
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	@ 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	//printf("RemoraComms interrupt\n");

	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003e22:	f023 031f 	bic.w	r3, r3, #31
 8003e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e28:	2340      	movs	r3, #64	@ 0x40
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dd1d      	ble.n	8003e6e <_ZN11RemoraComms15handleInterruptEv+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	4413      	add	r3, r2
 8003e3c:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e42:	f3bf 8f4f 	dsb	sy
}
 8003e46:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003e48:	4a49      	ldr	r2, [pc, #292]	@ (8003f70 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3320      	adds	r3, #32
 8003e54:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	3b20      	subs	r3, #32
 8003e5a:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	dcf2      	bgt.n	8003e48 <_ZN11RemoraComms15handleInterruptEv+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e62:	f3bf 8f4f 	dsb	sy
}
 8003e66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e68:	f3bf 8f6f 	isb	sy
}
 8003e6c:	bf00      	nop
}
 8003e6e:	bf00      	nop

	switch (this->spiRxBuffer.header)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003e76:	4a3f      	ldr	r2, [pc, #252]	@ (8003f74 <_ZN11RemoraComms15handleInterruptEv+0x160>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <_ZN11RemoraComms15handleInterruptEv+0x70>
 8003e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f78 <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <_ZN11RemoraComms15handleInterruptEv+0x82>
 8003e82:	e02a      	b.n	8003eda <_ZN11RemoraComms15handleInterruptEv+0xc6>
	{
	  case PRU_READ:
		this->SPIdata = true;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		// READ so do nothing with the received data
		break;
 8003e94:	e032      	b.n	8003efc <_ZN11RemoraComms15handleInterruptEv+0xe8>

	  case PRU_WRITE:
		this->SPIdata = true;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea6:	b672      	cpsid	i
}
 8003ea8:	bf00      	nop

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eae:	e00e      	b.n	8003ece <_ZN11RemoraComms15handleInterruptEv+0xba>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003ebe:	7819      	ldrb	r1, [r3, #0]
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	4413      	add	r3, r2
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ed2:	dded      	ble.n	8003eb0 <_ZN11RemoraComms15handleInterruptEv+0x9c>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ed4:	b662      	cpsie	i
}
 8003ed6:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 8003ed8:	e010      	b.n	8003efc <_ZN11RemoraComms15handleInterruptEv+0xe8>

	  default:
		this->rejectCnt++;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		if (this->rejectCnt > 5)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d903      	bls.n	8003efc <_ZN11RemoraComms15handleInterruptEv+0xe8>
		{
			this->SPIdataError = true;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
		}
		// reset SPI somehow
	}

    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 031f 	bic.w	r3, r3, #31
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	2340      	movs	r3, #64	@ 0x40
 8003f08:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dd1d      	ble.n	8003f4c <_ZN11RemoraComms15handleInterruptEv+0x138>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 021f 	and.w	r2, r3, #31
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4413      	add	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f20:	f3bf 8f4f 	dsb	sy
}
 8003f24:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003f26:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3320      	adds	r3, #32
 8003f32:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3b20      	subs	r3, #32
 8003f38:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dcf2      	bgt.n	8003f26 <_ZN11RemoraComms15handleInterruptEv+0x112>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f40:	f3bf 8f4f 	dsb	sy
}
 8003f44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f46:	f3bf 8f6f 	isb	sy
}
 8003f4a:	bf00      	nop
}
 8003f4c:	bf00      	nop
	HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8003f60:	2340      	movs	r3, #64	@ 0x40
 8003f62:	f007 fbe5 	bl	800b730 <HAL_SPI_TransmitReceive_DMA>
}
 8003f66:	bf00      	nop
 8003f68:	3730      	adds	r7, #48	@ 0x30
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00
 8003f74:	72656164 	.word	0x72656164
 8003f78:	77726974 	.word	0x77726974

08003f7c <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <_ZN11RemoraCommsD1Ev+0x20>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fd39 	bl	8003a18 <_ZN6ModuleD1Ev>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08011b1c 	.word	0x08011b1c

08003fb4 <_ZN11RemoraCommsD0Ev>:
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ffe7 	bl	8003f90 <_ZN11RemoraCommsD1Ev>
 8003fc2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f00c f9d7 	bl	801037a <_ZdlPvj>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f7ff fc7a 	bl	80038d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	@ (8004014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	@ (8004018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8004024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004006:	f00c ff01 	bl	8010e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400a:	f7fd fa63 	bl	80014d4 <main>
  bx  lr
 800400e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004018:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 800401c:	08011c7c 	.word	0x08011c7c
  ldr r2, =_sbss
 8004020:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8004024:	24000d80 	.word	0x24000d80

08004028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC3_IRQHandler>
	...

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004032:	2003      	movs	r0, #3
 8004034:	f000 f98c 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004038:	f002 ff14 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_Init+0x68>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4913      	ldr	r1, [pc, #76]	@ (8004098 <HAL_Init+0x6c>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_Init+0x68>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a0e      	ldr	r2, [pc, #56]	@ (8004098 <HAL_Init+0x6c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	4a0b      	ldr	r2, [pc, #44]	@ (800409c <HAL_Init+0x70>)
 800406e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004070:	4a0b      	ldr	r2, [pc, #44]	@ (80040a0 <HAL_Init+0x74>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004076:	200f      	movs	r0, #15
 8004078:	f000 f814 	bl	80040a4 <HAL_InitTick>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e002      	b.n	800408c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004086:	f7ff f9f7 	bl	8003478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58024400 	.word	0x58024400
 8004098:	08011ae0 	.word	0x08011ae0
 800409c:	24000054 	.word	0x24000054
 80040a0:	24000050 	.word	0x24000050

080040a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040ac:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <HAL_InitTick+0x60>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e021      	b.n	80040fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <HAL_InitTick+0x64>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_InitTick+0x60>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f971 	bl	80043b6 <HAL_SYSTICK_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00e      	b.n	80040fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d80a      	bhi.n	80040fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f000 f93b 	bl	8004366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4a06      	ldr	r2, [pc, #24]	@ (800410c <HAL_InitTick+0x68>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2400005c 	.word	0x2400005c
 8004108:	24000050 	.word	0x24000050
 800410c:	24000058 	.word	0x24000058

08004110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_IncTick+0x20>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_IncTick+0x24>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <HAL_IncTick+0x24>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2400005c 	.word	0x2400005c
 8004134:	24000588 	.word	0x24000588

08004138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b03      	ldr	r3, [pc, #12]	@ (800414c <HAL_GetTick+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	24000588 	.word	0x24000588

08004150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff ffee 	bl	8004138 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d005      	beq.n	8004176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800416a:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <HAL_Delay+0x44>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004176:	bf00      	nop
 8004178:	f7ff ffde 	bl	8004138 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d8f7      	bhi.n	8004178 <HAL_Delay+0x28>
  {
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2400005c 	.word	0x2400005c

08004198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_GetREVID+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0c1b      	lsrs	r3, r3, #16
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	5c001000 	.word	0x5c001000

080041b0 <__NVIC_SetPriorityGrouping>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <__NVIC_SetPriorityGrouping+0x40>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041de:	4a04      	ldr	r2, [pc, #16]	@ (80041f0 <__NVIC_SetPriorityGrouping+0x40>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60d3      	str	r3, [r2, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00
 80041f4:	05fa0000 	.word	0x05fa0000

080041f8 <__NVIC_GetPriorityGrouping>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_EnableIRQ>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	@ (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	@ (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	@ 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	@ 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800431c:	d301      	bcc.n	8004322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431e:	2301      	movs	r3, #1
 8004320:	e00f      	b.n	8004342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004322:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <SysTick_Config+0x40>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432a:	210f      	movs	r1, #15
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f7ff ff8e 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <SysTick_Config+0x40>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433a:	4b04      	ldr	r3, [pc, #16]	@ (800434c <SysTick_Config+0x40>)
 800433c:	2207      	movs	r2, #7
 800433e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	e000e010 	.word	0xe000e010

08004350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff29 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004374:	f7ff ff40 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 8004378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff90 	bl	80042a4 <NVIC_EncodePriority>
 8004384:	4602      	mov	r2, r0
 8004386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff5f 	bl	8004250 <__NVIC_SetPriority>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff33 	bl	8004214 <__NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffa4 	bl	800430c <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80043d4:	f3bf 8f5f 	dmb	sy
}
 80043d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80043da:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <HAL_MPU_Disable+0x28>)
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4a06      	ldr	r2, [pc, #24]	@ (80043f8 <HAL_MPU_Disable+0x28>)
 80043e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_MPU_Disable+0x2c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	605a      	str	r2, [r3, #4]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000ed00 	.word	0xe000ed00
 80043fc:	e000ed90 	.word	0xe000ed90

08004400 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004408:	4a0b      	ldr	r2, [pc, #44]	@ (8004438 <HAL_MPU_Enable+0x38>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_MPU_Enable+0x3c>)
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <HAL_MPU_Enable+0x3c>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800441e:	f3bf 8f4f 	dsb	sy
}
 8004422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004424:	f3bf 8f6f 	isb	sy
}
 8004428:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000ed90 	.word	0xe000ed90
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	785a      	ldrb	r2, [r3, #1]
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_MPU_ConfigRegion+0x7c>)
 800444e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004450:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <HAL_MPU_ConfigRegion+0x7c>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <HAL_MPU_ConfigRegion+0x7c>)
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800445c:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <HAL_MPU_ConfigRegion+0x7c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7b1b      	ldrb	r3, [r3, #12]
 8004468:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	7adb      	ldrb	r3, [r3, #11]
 800446e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004470:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7a9b      	ldrb	r3, [r3, #10]
 8004476:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004478:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7b5b      	ldrb	r3, [r3, #13]
 800447e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004480:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7b9b      	ldrb	r3, [r3, #14]
 8004486:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004488:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7bdb      	ldrb	r3, [r3, #15]
 800448e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004490:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7a5b      	ldrb	r3, [r3, #9]
 8004496:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004498:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7a1b      	ldrb	r3, [r3, #8]
 800449e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80044a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80044aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044ac:	6113      	str	r3, [r2, #16]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	e000ed90 	.word	0xe000ed90

080044c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7ff fe36 	bl	8004138 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e316      	b.n	8004b06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a66      	ldr	r2, [pc, #408]	@ (8004678 <HAL_DMA_Init+0x1b8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d04a      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a65      	ldr	r2, [pc, #404]	@ (800467c <HAL_DMA_Init+0x1bc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d045      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a63      	ldr	r2, [pc, #396]	@ (8004680 <HAL_DMA_Init+0x1c0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d040      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a62      	ldr	r2, [pc, #392]	@ (8004684 <HAL_DMA_Init+0x1c4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d03b      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a60      	ldr	r2, [pc, #384]	@ (8004688 <HAL_DMA_Init+0x1c8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d036      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5f      	ldr	r2, [pc, #380]	@ (800468c <HAL_DMA_Init+0x1cc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d031      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5d      	ldr	r2, [pc, #372]	@ (8004690 <HAL_DMA_Init+0x1d0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d02c      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5c      	ldr	r2, [pc, #368]	@ (8004694 <HAL_DMA_Init+0x1d4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d027      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5a      	ldr	r2, [pc, #360]	@ (8004698 <HAL_DMA_Init+0x1d8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a59      	ldr	r2, [pc, #356]	@ (800469c <HAL_DMA_Init+0x1dc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d01d      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a57      	ldr	r2, [pc, #348]	@ (80046a0 <HAL_DMA_Init+0x1e0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a56      	ldr	r2, [pc, #344]	@ (80046a4 <HAL_DMA_Init+0x1e4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a54      	ldr	r2, [pc, #336]	@ (80046a8 <HAL_DMA_Init+0x1e8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a53      	ldr	r2, [pc, #332]	@ (80046ac <HAL_DMA_Init+0x1ec>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a51      	ldr	r2, [pc, #324]	@ (80046b0 <HAL_DMA_Init+0x1f0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_DMA_Init+0xb8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a50      	ldr	r2, [pc, #320]	@ (80046b4 <HAL_DMA_Init+0x1f4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_DMA_Init+0xbc>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_DMA_Init+0xbe>
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 813b 	beq.w	80047fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a37      	ldr	r2, [pc, #220]	@ (8004678 <HAL_DMA_Init+0x1b8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04a      	beq.n	8004634 <HAL_DMA_Init+0x174>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a36      	ldr	r2, [pc, #216]	@ (800467c <HAL_DMA_Init+0x1bc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d045      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a34      	ldr	r2, [pc, #208]	@ (8004680 <HAL_DMA_Init+0x1c0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d040      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a33      	ldr	r2, [pc, #204]	@ (8004684 <HAL_DMA_Init+0x1c4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d03b      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a31      	ldr	r2, [pc, #196]	@ (8004688 <HAL_DMA_Init+0x1c8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d036      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a30      	ldr	r2, [pc, #192]	@ (800468c <HAL_DMA_Init+0x1cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004690 <HAL_DMA_Init+0x1d0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02c      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2d      	ldr	r2, [pc, #180]	@ (8004694 <HAL_DMA_Init+0x1d4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d027      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004698 <HAL_DMA_Init+0x1d8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2a      	ldr	r2, [pc, #168]	@ (800469c <HAL_DMA_Init+0x1dc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01d      	beq.n	8004634 <HAL_DMA_Init+0x174>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a28      	ldr	r2, [pc, #160]	@ (80046a0 <HAL_DMA_Init+0x1e0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_DMA_Init+0x174>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a27      	ldr	r2, [pc, #156]	@ (80046a4 <HAL_DMA_Init+0x1e4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_DMA_Init+0x174>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a25      	ldr	r2, [pc, #148]	@ (80046a8 <HAL_DMA_Init+0x1e8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_DMA_Init+0x174>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a24      	ldr	r2, [pc, #144]	@ (80046ac <HAL_DMA_Init+0x1ec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_DMA_Init+0x174>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <HAL_DMA_Init+0x1f0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_DMA_Init+0x174>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_DMA_Init+0x1f4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_DMA_Init+0x186>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e007      	b.n	8004656 <HAL_DMA_Init+0x196>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004656:	e02f      	b.n	80046b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004658:	f7ff fd6e 	bl	8004138 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b05      	cmp	r3, #5
 8004664:	d928      	bls.n	80046b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2203      	movs	r2, #3
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e246      	b.n	8004b06 <HAL_DMA_Init+0x646>
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1c8      	bne.n	8004658 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4b83      	ldr	r3, [pc, #524]	@ (80048e0 <HAL_DMA_Init+0x420>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80046de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	2b04      	cmp	r3, #4
 800470a:	d107      	bne.n	800471c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	4313      	orrs	r3, r2
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800471c:	4b71      	ldr	r3, [pc, #452]	@ (80048e4 <HAL_DMA_Init+0x424>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b71      	ldr	r3, [pc, #452]	@ (80048e8 <HAL_DMA_Init+0x428>)
 8004722:	4013      	ands	r3, r2
 8004724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004728:	d328      	bcc.n	800477c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b28      	cmp	r3, #40	@ 0x28
 8004730:	d903      	bls.n	800473a <HAL_DMA_Init+0x27a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b2e      	cmp	r3, #46	@ 0x2e
 8004738:	d917      	bls.n	800476a <HAL_DMA_Init+0x2aa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004740:	d903      	bls.n	800474a <HAL_DMA_Init+0x28a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b42      	cmp	r3, #66	@ 0x42
 8004748:	d90f      	bls.n	800476a <HAL_DMA_Init+0x2aa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b46      	cmp	r3, #70	@ 0x46
 8004750:	d903      	bls.n	800475a <HAL_DMA_Init+0x29a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b48      	cmp	r3, #72	@ 0x48
 8004758:	d907      	bls.n	800476a <HAL_DMA_Init+0x2aa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004760:	d905      	bls.n	800476e <HAL_DMA_Init+0x2ae>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b52      	cmp	r3, #82	@ 0x52
 8004768:	d801      	bhi.n	800476e <HAL_DMA_Init+0x2ae>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_DMA_Init+0x2b0>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0307 	bic.w	r3, r3, #7
 8004792:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d117      	bne.n	80047d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 f9cf 	bl	8005b5c <DMA_CheckFifoParam>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e197      	b.n	8004b06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 f90a 	bl	80059f8 <DMA_CalcBaseAndBitshift>
 80047e4:	4603      	mov	r3, r0
 80047e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	223f      	movs	r2, #63	@ 0x3f
 80047f2:	409a      	lsls	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	e0cd      	b.n	8004996 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3b      	ldr	r2, [pc, #236]	@ (80048ec <HAL_DMA_Init+0x42c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_Init+0x38a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a39      	ldr	r2, [pc, #228]	@ (80048f0 <HAL_DMA_Init+0x430>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_Init+0x38a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <HAL_DMA_Init+0x434>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_Init+0x38a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	@ (80048f8 <HAL_DMA_Init+0x438>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_Init+0x38a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <HAL_DMA_Init+0x43c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_Init+0x38a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	@ (8004900 <HAL_DMA_Init+0x440>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_Init+0x38a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <HAL_DMA_Init+0x444>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_Init+0x38a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <HAL_DMA_Init+0x448>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_DMA_Init+0x38e>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_DMA_Init+0x390>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8097 	beq.w	8004984 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a24      	ldr	r2, [pc, #144]	@ (80048ec <HAL_DMA_Init+0x42c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d021      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <HAL_DMA_Init+0x430>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01c      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a21      	ldr	r2, [pc, #132]	@ (80048f4 <HAL_DMA_Init+0x434>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d017      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <HAL_DMA_Init+0x438>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d012      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <HAL_DMA_Init+0x43c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00d      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <HAL_DMA_Init+0x440>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d008      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1b      	ldr	r2, [pc, #108]	@ (8004904 <HAL_DMA_Init+0x444>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_Init+0x3e4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <HAL_DMA_Init+0x448>)
 80048a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4b13      	ldr	r3, [pc, #76]	@ (800490c <HAL_DMA_Init+0x44c>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b40      	cmp	r3, #64	@ 0x40
 80048ca:	d021      	beq.n	8004910 <HAL_DMA_Init+0x450>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b80      	cmp	r3, #128	@ 0x80
 80048d2:	d102      	bne.n	80048da <HAL_DMA_Init+0x41a>
 80048d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048d8:	e01b      	b.n	8004912 <HAL_DMA_Init+0x452>
 80048da:	2300      	movs	r3, #0
 80048dc:	e019      	b.n	8004912 <HAL_DMA_Init+0x452>
 80048de:	bf00      	nop
 80048e0:	fe10803f 	.word	0xfe10803f
 80048e4:	5c001000 	.word	0x5c001000
 80048e8:	ffff0000 	.word	0xffff0000
 80048ec:	58025408 	.word	0x58025408
 80048f0:	5802541c 	.word	0x5802541c
 80048f4:	58025430 	.word	0x58025430
 80048f8:	58025444 	.word	0x58025444
 80048fc:	58025458 	.word	0x58025458
 8004900:	5802546c 	.word	0x5802546c
 8004904:	58025480 	.word	0x58025480
 8004908:	58025494 	.word	0x58025494
 800490c:	fffe000f 	.word	0xfffe000f
 8004910:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004940:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	4b6e      	ldr	r3, [pc, #440]	@ (8004b10 <HAL_DMA_Init+0x650>)
 8004958:	4413      	add	r3, r2
 800495a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b14 <HAL_DMA_Init+0x654>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f845 	bl	80059f8 <DMA_CalcBaseAndBitshift>
 800496e:	4603      	mov	r3, r0
 8004970:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2201      	movs	r2, #1
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e008      	b.n	8004996 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2240      	movs	r2, #64	@ 0x40
 8004988:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0b7      	b.n	8004b06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5f      	ldr	r2, [pc, #380]	@ (8004b18 <HAL_DMA_Init+0x658>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d072      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b1c <HAL_DMA_Init+0x65c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d06d      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004b20 <HAL_DMA_Init+0x660>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d068      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b24 <HAL_DMA_Init+0x664>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d063      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a59      	ldr	r2, [pc, #356]	@ (8004b28 <HAL_DMA_Init+0x668>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d05e      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a57      	ldr	r2, [pc, #348]	@ (8004b2c <HAL_DMA_Init+0x66c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d059      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a56      	ldr	r2, [pc, #344]	@ (8004b30 <HAL_DMA_Init+0x670>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d054      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a54      	ldr	r2, [pc, #336]	@ (8004b34 <HAL_DMA_Init+0x674>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04f      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a53      	ldr	r2, [pc, #332]	@ (8004b38 <HAL_DMA_Init+0x678>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d04a      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a51      	ldr	r2, [pc, #324]	@ (8004b3c <HAL_DMA_Init+0x67c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d045      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_DMA_Init+0x680>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <HAL_DMA_Init+0x684>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d03b      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4d      	ldr	r2, [pc, #308]	@ (8004b48 <HAL_DMA_Init+0x688>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d036      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b4c <HAL_DMA_Init+0x68c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d031      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	@ (8004b50 <HAL_DMA_Init+0x690>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d02c      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a48      	ldr	r2, [pc, #288]	@ (8004b54 <HAL_DMA_Init+0x694>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d027      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a47      	ldr	r2, [pc, #284]	@ (8004b58 <HAL_DMA_Init+0x698>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a45      	ldr	r2, [pc, #276]	@ (8004b5c <HAL_DMA_Init+0x69c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a44      	ldr	r2, [pc, #272]	@ (8004b60 <HAL_DMA_Init+0x6a0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a42      	ldr	r2, [pc, #264]	@ (8004b64 <HAL_DMA_Init+0x6a4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a41      	ldr	r2, [pc, #260]	@ (8004b68 <HAL_DMA_Init+0x6a8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b6c <HAL_DMA_Init+0x6ac>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3e      	ldr	r2, [pc, #248]	@ (8004b70 <HAL_DMA_Init+0x6b0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_DMA_Init+0x5c6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3c      	ldr	r2, [pc, #240]	@ (8004b74 <HAL_DMA_Init+0x6b4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <HAL_DMA_Init+0x5ca>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_DMA_Init+0x5cc>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d032      	beq.n	8004af6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 f8df 	bl	8005c54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b80      	cmp	r3, #128	@ 0x80
 8004a9c:	d102      	bne.n	8004aa4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ab8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d010      	beq.n	8004ae4 <HAL_DMA_Init+0x624>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d80c      	bhi.n	8004ae4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 f95c 	bl	8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e008      	b.n	8004af6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	a7fdabf8 	.word	0xa7fdabf8
 8004b14:	cccccccd 	.word	0xcccccccd
 8004b18:	40020010 	.word	0x40020010
 8004b1c:	40020028 	.word	0x40020028
 8004b20:	40020040 	.word	0x40020040
 8004b24:	40020058 	.word	0x40020058
 8004b28:	40020070 	.word	0x40020070
 8004b2c:	40020088 	.word	0x40020088
 8004b30:	400200a0 	.word	0x400200a0
 8004b34:	400200b8 	.word	0x400200b8
 8004b38:	40020410 	.word	0x40020410
 8004b3c:	40020428 	.word	0x40020428
 8004b40:	40020440 	.word	0x40020440
 8004b44:	40020458 	.word	0x40020458
 8004b48:	40020470 	.word	0x40020470
 8004b4c:	40020488 	.word	0x40020488
 8004b50:	400204a0 	.word	0x400204a0
 8004b54:	400204b8 	.word	0x400204b8
 8004b58:	58025408 	.word	0x58025408
 8004b5c:	5802541c 	.word	0x5802541c
 8004b60:	58025430 	.word	0x58025430
 8004b64:	58025444 	.word	0x58025444
 8004b68:	58025458 	.word	0x58025458
 8004b6c:	5802546c 	.word	0x5802546c
 8004b70:	58025480 	.word	0x58025480
 8004b74:	58025494 	.word	0x58025494

08004b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e226      	b.n	8004fe2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_DMA_Start_IT+0x2a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e21f      	b.n	8004fe2 <HAL_DMA_Start_IT+0x46a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 820a 	bne.w	8004fcc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <HAL_DMA_Start_IT+0x1f4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d04a      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a66      	ldr	r2, [pc, #408]	@ (8004d70 <HAL_DMA_Start_IT+0x1f8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d045      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a65      	ldr	r2, [pc, #404]	@ (8004d74 <HAL_DMA_Start_IT+0x1fc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d040      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a63      	ldr	r2, [pc, #396]	@ (8004d78 <HAL_DMA_Start_IT+0x200>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d03b      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a62      	ldr	r2, [pc, #392]	@ (8004d7c <HAL_DMA_Start_IT+0x204>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d036      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a60      	ldr	r2, [pc, #384]	@ (8004d80 <HAL_DMA_Start_IT+0x208>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d031      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5f      	ldr	r2, [pc, #380]	@ (8004d84 <HAL_DMA_Start_IT+0x20c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d02c      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5d      	ldr	r2, [pc, #372]	@ (8004d88 <HAL_DMA_Start_IT+0x210>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d027      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8004d8c <HAL_DMA_Start_IT+0x214>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d022      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5a      	ldr	r2, [pc, #360]	@ (8004d90 <HAL_DMA_Start_IT+0x218>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01d      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a59      	ldr	r2, [pc, #356]	@ (8004d94 <HAL_DMA_Start_IT+0x21c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d018      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a57      	ldr	r2, [pc, #348]	@ (8004d98 <HAL_DMA_Start_IT+0x220>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_DMA_Start_IT+0x224>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a54      	ldr	r2, [pc, #336]	@ (8004da0 <HAL_DMA_Start_IT+0x228>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a53      	ldr	r2, [pc, #332]	@ (8004da4 <HAL_DMA_Start_IT+0x22c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_DMA_Start_IT+0xee>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a51      	ldr	r2, [pc, #324]	@ (8004da8 <HAL_DMA_Start_IT+0x230>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <HAL_DMA_Start_IT+0x100>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e007      	b.n	8004c88 <HAL_DMA_Start_IT+0x110>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fd06 	bl	80056a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <HAL_DMA_Start_IT+0x1f4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04a      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <HAL_DMA_Start_IT+0x1f8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d045      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a31      	ldr	r2, [pc, #196]	@ (8004d74 <HAL_DMA_Start_IT+0x1fc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d040      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <HAL_DMA_Start_IT+0x200>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d03b      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <HAL_DMA_Start_IT+0x204>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d036      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <HAL_DMA_Start_IT+0x208>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d031      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d84 <HAL_DMA_Start_IT+0x20c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2a      	ldr	r2, [pc, #168]	@ (8004d88 <HAL_DMA_Start_IT+0x210>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a28      	ldr	r2, [pc, #160]	@ (8004d8c <HAL_DMA_Start_IT+0x214>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a27      	ldr	r2, [pc, #156]	@ (8004d90 <HAL_DMA_Start_IT+0x218>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	@ (8004d94 <HAL_DMA_Start_IT+0x21c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <HAL_DMA_Start_IT+0x220>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a22      	ldr	r2, [pc, #136]	@ (8004d9c <HAL_DMA_Start_IT+0x224>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a21      	ldr	r2, [pc, #132]	@ (8004da0 <HAL_DMA_Start_IT+0x228>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_DMA_Start_IT+0x22c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_DMA_Start_IT+0x1bc>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <HAL_DMA_Start_IT+0x230>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <HAL_DMA_Start_IT+0x1c0>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <HAL_DMA_Start_IT+0x1c2>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d036      	beq.n	8004dac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 021e 	bic.w	r2, r3, #30
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0216 	orr.w	r2, r2, #22
 8004d50:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03e      	beq.n	8004dd8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0208 	orr.w	r2, r2, #8
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e035      	b.n	8004dd8 <HAL_DMA_Start_IT+0x260>
 8004d6c:	40020010 	.word	0x40020010
 8004d70:	40020028 	.word	0x40020028
 8004d74:	40020040 	.word	0x40020040
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	40020070 	.word	0x40020070
 8004d80:	40020088 	.word	0x40020088
 8004d84:	400200a0 	.word	0x400200a0
 8004d88:	400200b8 	.word	0x400200b8
 8004d8c:	40020410 	.word	0x40020410
 8004d90:	40020428 	.word	0x40020428
 8004d94:	40020440 	.word	0x40020440
 8004d98:	40020458 	.word	0x40020458
 8004d9c:	40020470 	.word	0x40020470
 8004da0:	40020488 	.word	0x40020488
 8004da4:	400204a0 	.word	0x400204a0
 8004da8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 020e 	bic.w	r2, r3, #14
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 020a 	orr.w	r2, r2, #10
 8004dbe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a83      	ldr	r2, [pc, #524]	@ (8004fec <HAL_DMA_Start_IT+0x474>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d072      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a82      	ldr	r2, [pc, #520]	@ (8004ff0 <HAL_DMA_Start_IT+0x478>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d06d      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a80      	ldr	r2, [pc, #512]	@ (8004ff4 <HAL_DMA_Start_IT+0x47c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d068      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8004ff8 <HAL_DMA_Start_IT+0x480>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d063      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7d      	ldr	r2, [pc, #500]	@ (8004ffc <HAL_DMA_Start_IT+0x484>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d05e      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005000 <HAL_DMA_Start_IT+0x488>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d059      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7a      	ldr	r2, [pc, #488]	@ (8005004 <HAL_DMA_Start_IT+0x48c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d054      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a79      	ldr	r2, [pc, #484]	@ (8005008 <HAL_DMA_Start_IT+0x490>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04f      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a77      	ldr	r2, [pc, #476]	@ (800500c <HAL_DMA_Start_IT+0x494>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a76      	ldr	r2, [pc, #472]	@ (8005010 <HAL_DMA_Start_IT+0x498>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a74      	ldr	r2, [pc, #464]	@ (8005014 <HAL_DMA_Start_IT+0x49c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a73      	ldr	r2, [pc, #460]	@ (8005018 <HAL_DMA_Start_IT+0x4a0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a71      	ldr	r2, [pc, #452]	@ (800501c <HAL_DMA_Start_IT+0x4a4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a70      	ldr	r2, [pc, #448]	@ (8005020 <HAL_DMA_Start_IT+0x4a8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6e      	ldr	r2, [pc, #440]	@ (8005024 <HAL_DMA_Start_IT+0x4ac>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6d      	ldr	r2, [pc, #436]	@ (8005028 <HAL_DMA_Start_IT+0x4b0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6b      	ldr	r2, [pc, #428]	@ (800502c <HAL_DMA_Start_IT+0x4b4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6a      	ldr	r2, [pc, #424]	@ (8005030 <HAL_DMA_Start_IT+0x4b8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a68      	ldr	r2, [pc, #416]	@ (8005034 <HAL_DMA_Start_IT+0x4bc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a67      	ldr	r2, [pc, #412]	@ (8005038 <HAL_DMA_Start_IT+0x4c0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a65      	ldr	r2, [pc, #404]	@ (800503c <HAL_DMA_Start_IT+0x4c4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a64      	ldr	r2, [pc, #400]	@ (8005040 <HAL_DMA_Start_IT+0x4c8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a62      	ldr	r2, [pc, #392]	@ (8005044 <HAL_DMA_Start_IT+0x4cc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x350>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a61      	ldr	r2, [pc, #388]	@ (8005048 <HAL_DMA_Start_IT+0x4d0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_DMA_Start_IT+0x354>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_DMA_Start_IT+0x356>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01a      	beq.n	8004f08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a37      	ldr	r2, [pc, #220]	@ (8004fec <HAL_DMA_Start_IT+0x474>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a36      	ldr	r2, [pc, #216]	@ (8004ff0 <HAL_DMA_Start_IT+0x478>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a34      	ldr	r2, [pc, #208]	@ (8004ff4 <HAL_DMA_Start_IT+0x47c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a33      	ldr	r2, [pc, #204]	@ (8004ff8 <HAL_DMA_Start_IT+0x480>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a31      	ldr	r2, [pc, #196]	@ (8004ffc <HAL_DMA_Start_IT+0x484>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a30      	ldr	r2, [pc, #192]	@ (8005000 <HAL_DMA_Start_IT+0x488>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2e      	ldr	r2, [pc, #184]	@ (8005004 <HAL_DMA_Start_IT+0x48c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2d      	ldr	r2, [pc, #180]	@ (8005008 <HAL_DMA_Start_IT+0x490>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800500c <HAL_DMA_Start_IT+0x494>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <HAL_DMA_Start_IT+0x498>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a28      	ldr	r2, [pc, #160]	@ (8005014 <HAL_DMA_Start_IT+0x49c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a27      	ldr	r2, [pc, #156]	@ (8005018 <HAL_DMA_Start_IT+0x4a0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a25      	ldr	r2, [pc, #148]	@ (800501c <HAL_DMA_Start_IT+0x4a4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a24      	ldr	r2, [pc, #144]	@ (8005020 <HAL_DMA_Start_IT+0x4a8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a22      	ldr	r2, [pc, #136]	@ (8005024 <HAL_DMA_Start_IT+0x4ac>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x430>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <HAL_DMA_Start_IT+0x4b0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <HAL_DMA_Start_IT+0x442>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e012      	b.n	8004fe0 <HAL_DMA_Start_IT+0x468>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e009      	b.n	8004fe0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40020010 	.word	0x40020010
 8004ff0:	40020028 	.word	0x40020028
 8004ff4:	40020040 	.word	0x40020040
 8004ff8:	40020058 	.word	0x40020058
 8004ffc:	40020070 	.word	0x40020070
 8005000:	40020088 	.word	0x40020088
 8005004:	400200a0 	.word	0x400200a0
 8005008:	400200b8 	.word	0x400200b8
 800500c:	40020410 	.word	0x40020410
 8005010:	40020428 	.word	0x40020428
 8005014:	40020440 	.word	0x40020440
 8005018:	40020458 	.word	0x40020458
 800501c:	40020470 	.word	0x40020470
 8005020:	40020488 	.word	0x40020488
 8005024:	400204a0 	.word	0x400204a0
 8005028:	400204b8 	.word	0x400204b8
 800502c:	58025408 	.word	0x58025408
 8005030:	5802541c 	.word	0x5802541c
 8005034:	58025430 	.word	0x58025430
 8005038:	58025444 	.word	0x58025444
 800503c:	58025458 	.word	0x58025458
 8005040:	5802546c 	.word	0x5802546c
 8005044:	58025480 	.word	0x58025480
 8005048:	58025494 	.word	0x58025494

0800504c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005054:	f7ff f870 	bl	8004138 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e2dc      	b.n	800561e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d008      	beq.n	8005082 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e2cd      	b.n	800561e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a76      	ldr	r2, [pc, #472]	@ (8005260 <HAL_DMA_Abort+0x214>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d04a      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a74      	ldr	r2, [pc, #464]	@ (8005264 <HAL_DMA_Abort+0x218>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d045      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a73      	ldr	r2, [pc, #460]	@ (8005268 <HAL_DMA_Abort+0x21c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d040      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a71      	ldr	r2, [pc, #452]	@ (800526c <HAL_DMA_Abort+0x220>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d03b      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a70      	ldr	r2, [pc, #448]	@ (8005270 <HAL_DMA_Abort+0x224>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d036      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005274 <HAL_DMA_Abort+0x228>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d031      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005278 <HAL_DMA_Abort+0x22c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d02c      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_DMA_Abort+0x230>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d027      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_DMA_Abort+0x234>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <HAL_DMA_Abort+0x238>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01d      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <HAL_DMA_Abort+0x23c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d018      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_DMA_Abort+0x240>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a64      	ldr	r2, [pc, #400]	@ (8005290 <HAL_DMA_Abort+0x244>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00e      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_DMA_Abort+0x248>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a61      	ldr	r2, [pc, #388]	@ (8005298 <HAL_DMA_Abort+0x24c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <HAL_DMA_Abort+0xd6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5f      	ldr	r2, [pc, #380]	@ (800529c <HAL_DMA_Abort+0x250>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_DMA_Abort+0xda>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_DMA_Abort+0xdc>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 021e 	bic.w	r2, r2, #30
 800513a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800514a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e00a      	b.n	800516a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 020e 	bic.w	r2, r2, #14
 8005162:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3c      	ldr	r2, [pc, #240]	@ (8005260 <HAL_DMA_Abort+0x214>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d072      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <HAL_DMA_Abort+0x218>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d06d      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a39      	ldr	r2, [pc, #228]	@ (8005268 <HAL_DMA_Abort+0x21c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d068      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a37      	ldr	r2, [pc, #220]	@ (800526c <HAL_DMA_Abort+0x220>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d063      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a36      	ldr	r2, [pc, #216]	@ (8005270 <HAL_DMA_Abort+0x224>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d05e      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a34      	ldr	r2, [pc, #208]	@ (8005274 <HAL_DMA_Abort+0x228>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d059      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a33      	ldr	r2, [pc, #204]	@ (8005278 <HAL_DMA_Abort+0x22c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d054      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a31      	ldr	r2, [pc, #196]	@ (800527c <HAL_DMA_Abort+0x230>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d04f      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a30      	ldr	r2, [pc, #192]	@ (8005280 <HAL_DMA_Abort+0x234>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d04a      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005284 <HAL_DMA_Abort+0x238>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d045      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005288 <HAL_DMA_Abort+0x23c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d040      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2b      	ldr	r2, [pc, #172]	@ (800528c <HAL_DMA_Abort+0x240>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d03b      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005290 <HAL_DMA_Abort+0x244>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d036      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a28      	ldr	r2, [pc, #160]	@ (8005294 <HAL_DMA_Abort+0x248>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d031      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a27      	ldr	r2, [pc, #156]	@ (8005298 <HAL_DMA_Abort+0x24c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d02c      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a25      	ldr	r2, [pc, #148]	@ (800529c <HAL_DMA_Abort+0x250>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d027      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <HAL_DMA_Abort+0x254>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d022      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <HAL_DMA_Abort+0x258>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a21      	ldr	r2, [pc, #132]	@ (80052a8 <HAL_DMA_Abort+0x25c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d018      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <HAL_DMA_Abort+0x260>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <HAL_DMA_Abort+0x264>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	@ (80052b4 <HAL_DMA_Abort+0x268>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <HAL_DMA_Abort+0x26c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_DMA_Abort+0x20e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	@ (80052bc <HAL_DMA_Abort+0x270>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d132      	bne.n	80052c0 <HAL_DMA_Abort+0x274>
 800525a:	2301      	movs	r3, #1
 800525c:	e031      	b.n	80052c2 <HAL_DMA_Abort+0x276>
 800525e:	bf00      	nop
 8005260:	40020010 	.word	0x40020010
 8005264:	40020028 	.word	0x40020028
 8005268:	40020040 	.word	0x40020040
 800526c:	40020058 	.word	0x40020058
 8005270:	40020070 	.word	0x40020070
 8005274:	40020088 	.word	0x40020088
 8005278:	400200a0 	.word	0x400200a0
 800527c:	400200b8 	.word	0x400200b8
 8005280:	40020410 	.word	0x40020410
 8005284:	40020428 	.word	0x40020428
 8005288:	40020440 	.word	0x40020440
 800528c:	40020458 	.word	0x40020458
 8005290:	40020470 	.word	0x40020470
 8005294:	40020488 	.word	0x40020488
 8005298:	400204a0 	.word	0x400204a0
 800529c:	400204b8 	.word	0x400204b8
 80052a0:	58025408 	.word	0x58025408
 80052a4:	5802541c 	.word	0x5802541c
 80052a8:	58025430 	.word	0x58025430
 80052ac:	58025444 	.word	0x58025444
 80052b0:	58025458 	.word	0x58025458
 80052b4:	5802546c 	.word	0x5802546c
 80052b8:	58025480 	.word	0x58025480
 80052bc:	58025494 	.word	0x58025494
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6d      	ldr	r2, [pc, #436]	@ (8005490 <HAL_DMA_Abort+0x444>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d04a      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005494 <HAL_DMA_Abort+0x448>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d045      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005498 <HAL_DMA_Abort+0x44c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d040      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	@ (800549c <HAL_DMA_Abort+0x450>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d03b      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a67      	ldr	r2, [pc, #412]	@ (80054a0 <HAL_DMA_Abort+0x454>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d036      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a65      	ldr	r2, [pc, #404]	@ (80054a4 <HAL_DMA_Abort+0x458>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d031      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a64      	ldr	r2, [pc, #400]	@ (80054a8 <HAL_DMA_Abort+0x45c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d02c      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a62      	ldr	r2, [pc, #392]	@ (80054ac <HAL_DMA_Abort+0x460>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d027      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a61      	ldr	r2, [pc, #388]	@ (80054b0 <HAL_DMA_Abort+0x464>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a5f      	ldr	r2, [pc, #380]	@ (80054b4 <HAL_DMA_Abort+0x468>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5e      	ldr	r2, [pc, #376]	@ (80054b8 <HAL_DMA_Abort+0x46c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5c      	ldr	r2, [pc, #368]	@ (80054bc <HAL_DMA_Abort+0x470>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a5b      	ldr	r2, [pc, #364]	@ (80054c0 <HAL_DMA_Abort+0x474>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a59      	ldr	r2, [pc, #356]	@ (80054c4 <HAL_DMA_Abort+0x478>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a58      	ldr	r2, [pc, #352]	@ (80054c8 <HAL_DMA_Abort+0x47c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_DMA_Abort+0x32a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_DMA_Abort+0x480>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <HAL_DMA_Abort+0x33c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e007      	b.n	8005398 <HAL_DMA_Abort+0x34c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005398:	e013      	b.n	80053c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800539a:	f7fe fecd 	bl	8004138 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d90c      	bls.n	80053c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2203      	movs	r2, #3
 80053b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e12d      	b.n	800561e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005490 <HAL_DMA_Abort+0x444>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d04a      	beq.n	800546e <HAL_DMA_Abort+0x422>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005494 <HAL_DMA_Abort+0x448>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d045      	beq.n	800546e <HAL_DMA_Abort+0x422>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <HAL_DMA_Abort+0x44c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d040      	beq.n	800546e <HAL_DMA_Abort+0x422>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2a      	ldr	r2, [pc, #168]	@ (800549c <HAL_DMA_Abort+0x450>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d03b      	beq.n	800546e <HAL_DMA_Abort+0x422>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a29      	ldr	r2, [pc, #164]	@ (80054a0 <HAL_DMA_Abort+0x454>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d036      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <HAL_DMA_Abort+0x458>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d031      	beq.n	800546e <HAL_DMA_Abort+0x422>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <HAL_DMA_Abort+0x45c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d02c      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a24      	ldr	r2, [pc, #144]	@ (80054ac <HAL_DMA_Abort+0x460>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d027      	beq.n	800546e <HAL_DMA_Abort+0x422>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a23      	ldr	r2, [pc, #140]	@ (80054b0 <HAL_DMA_Abort+0x464>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d022      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <HAL_DMA_Abort+0x468>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01d      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <HAL_DMA_Abort+0x46c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d018      	beq.n	800546e <HAL_DMA_Abort+0x422>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1e      	ldr	r2, [pc, #120]	@ (80054bc <HAL_DMA_Abort+0x470>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_DMA_Abort+0x474>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <HAL_DMA_Abort+0x478>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_DMA_Abort+0x422>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_DMA_Abort+0x47c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_DMA_Abort+0x422>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <HAL_DMA_Abort+0x480>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Abort+0x426>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_DMA_Abort+0x428>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02b      	beq.n	80054d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	223f      	movs	r2, #63	@ 0x3f
 8005488:	409a      	lsls	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	e02a      	b.n	80054e6 <HAL_DMA_Abort+0x49a>
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2201      	movs	r2, #1
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4f      	ldr	r2, [pc, #316]	@ (8005628 <HAL_DMA_Abort+0x5dc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d072      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a4d      	ldr	r2, [pc, #308]	@ (800562c <HAL_DMA_Abort+0x5e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d06d      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005630 <HAL_DMA_Abort+0x5e4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d068      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a4a      	ldr	r2, [pc, #296]	@ (8005634 <HAL_DMA_Abort+0x5e8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d063      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a49      	ldr	r2, [pc, #292]	@ (8005638 <HAL_DMA_Abort+0x5ec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d05e      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a47      	ldr	r2, [pc, #284]	@ (800563c <HAL_DMA_Abort+0x5f0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d059      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a46      	ldr	r2, [pc, #280]	@ (8005640 <HAL_DMA_Abort+0x5f4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d054      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a44      	ldr	r2, [pc, #272]	@ (8005644 <HAL_DMA_Abort+0x5f8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d04f      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a43      	ldr	r2, [pc, #268]	@ (8005648 <HAL_DMA_Abort+0x5fc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d04a      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a41      	ldr	r2, [pc, #260]	@ (800564c <HAL_DMA_Abort+0x600>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d045      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a40      	ldr	r2, [pc, #256]	@ (8005650 <HAL_DMA_Abort+0x604>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d040      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a3e      	ldr	r2, [pc, #248]	@ (8005654 <HAL_DMA_Abort+0x608>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d03b      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a3d      	ldr	r2, [pc, #244]	@ (8005658 <HAL_DMA_Abort+0x60c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d036      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3b      	ldr	r2, [pc, #236]	@ (800565c <HAL_DMA_Abort+0x610>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d031      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3a      	ldr	r2, [pc, #232]	@ (8005660 <HAL_DMA_Abort+0x614>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d02c      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a38      	ldr	r2, [pc, #224]	@ (8005664 <HAL_DMA_Abort+0x618>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a37      	ldr	r2, [pc, #220]	@ (8005668 <HAL_DMA_Abort+0x61c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a35      	ldr	r2, [pc, #212]	@ (800566c <HAL_DMA_Abort+0x620>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01d      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a34      	ldr	r2, [pc, #208]	@ (8005670 <HAL_DMA_Abort+0x624>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a32      	ldr	r2, [pc, #200]	@ (8005674 <HAL_DMA_Abort+0x628>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a31      	ldr	r2, [pc, #196]	@ (8005678 <HAL_DMA_Abort+0x62c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <HAL_DMA_Abort+0x630>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005680 <HAL_DMA_Abort+0x634>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_DMA_Abort+0x58a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <HAL_DMA_Abort+0x638>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d101      	bne.n	80055da <HAL_DMA_Abort+0x58e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_DMA_Abort+0x590>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005600:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800560a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
 8005668:	58025408 	.word	0x58025408
 800566c:	5802541c 	.word	0x5802541c
 8005670:	58025430 	.word	0x58025430
 8005674:	58025444 	.word	0x58025444
 8005678:	58025458 	.word	0x58025458
 800567c:	5802546c 	.word	0x5802546c
 8005680:	58025480 	.word	0x58025480
 8005684:	58025494 	.word	0x58025494

08005688 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7f      	ldr	r2, [pc, #508]	@ (80058bc <DMA_SetConfig+0x21c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d072      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7d      	ldr	r2, [pc, #500]	@ (80058c0 <DMA_SetConfig+0x220>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d06d      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	@ (80058c4 <DMA_SetConfig+0x224>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d068      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a7a      	ldr	r2, [pc, #488]	@ (80058c8 <DMA_SetConfig+0x228>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d063      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a79      	ldr	r2, [pc, #484]	@ (80058cc <DMA_SetConfig+0x22c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d05e      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a77      	ldr	r2, [pc, #476]	@ (80058d0 <DMA_SetConfig+0x230>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d059      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a76      	ldr	r2, [pc, #472]	@ (80058d4 <DMA_SetConfig+0x234>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d054      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a74      	ldr	r2, [pc, #464]	@ (80058d8 <DMA_SetConfig+0x238>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04f      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a73      	ldr	r2, [pc, #460]	@ (80058dc <DMA_SetConfig+0x23c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d04a      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a71      	ldr	r2, [pc, #452]	@ (80058e0 <DMA_SetConfig+0x240>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d045      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a70      	ldr	r2, [pc, #448]	@ (80058e4 <DMA_SetConfig+0x244>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d040      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6e      	ldr	r2, [pc, #440]	@ (80058e8 <DMA_SetConfig+0x248>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d03b      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6d      	ldr	r2, [pc, #436]	@ (80058ec <DMA_SetConfig+0x24c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d036      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6b      	ldr	r2, [pc, #428]	@ (80058f0 <DMA_SetConfig+0x250>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d031      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6a      	ldr	r2, [pc, #424]	@ (80058f4 <DMA_SetConfig+0x254>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d02c      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a68      	ldr	r2, [pc, #416]	@ (80058f8 <DMA_SetConfig+0x258>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d027      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a67      	ldr	r2, [pc, #412]	@ (80058fc <DMA_SetConfig+0x25c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a65      	ldr	r2, [pc, #404]	@ (8005900 <DMA_SetConfig+0x260>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a64      	ldr	r2, [pc, #400]	@ (8005904 <DMA_SetConfig+0x264>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a62      	ldr	r2, [pc, #392]	@ (8005908 <DMA_SetConfig+0x268>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a61      	ldr	r2, [pc, #388]	@ (800590c <DMA_SetConfig+0x26c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <DMA_SetConfig+0x10a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5f      	ldr	r2, [pc, #380]	@ (8005910 <DMA_SetConfig+0x270>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <DMA_SetConfig+0x10a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5e      	ldr	r2, [pc, #376]	@ (8005914 <DMA_SetConfig+0x274>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <DMA_SetConfig+0x10a>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005918 <DMA_SetConfig+0x278>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <DMA_SetConfig+0x10e>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <DMA_SetConfig+0x110>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a39      	ldr	r2, [pc, #228]	@ (80058bc <DMA_SetConfig+0x21c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d04a      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a38      	ldr	r2, [pc, #224]	@ (80058c0 <DMA_SetConfig+0x220>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d045      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a36      	ldr	r2, [pc, #216]	@ (80058c4 <DMA_SetConfig+0x224>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d040      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <DMA_SetConfig+0x228>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d03b      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <DMA_SetConfig+0x22c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d036      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <DMA_SetConfig+0x230>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d031      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <DMA_SetConfig+0x234>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02c      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <DMA_SetConfig+0x238>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d027      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <DMA_SetConfig+0x23c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d022      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <DMA_SetConfig+0x240>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01d      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2a      	ldr	r2, [pc, #168]	@ (80058e4 <DMA_SetConfig+0x244>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a29      	ldr	r2, [pc, #164]	@ (80058e8 <DMA_SetConfig+0x248>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a27      	ldr	r2, [pc, #156]	@ (80058ec <DMA_SetConfig+0x24c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a26      	ldr	r2, [pc, #152]	@ (80058f0 <DMA_SetConfig+0x250>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a24      	ldr	r2, [pc, #144]	@ (80058f4 <DMA_SetConfig+0x254>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <DMA_SetConfig+0x1d0>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a23      	ldr	r2, [pc, #140]	@ (80058f8 <DMA_SetConfig+0x258>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <DMA_SetConfig+0x1d4>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <DMA_SetConfig+0x1d6>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d059      	beq.n	800592e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	223f      	movs	r2, #63	@ 0x3f
 8005884:	409a      	lsls	r2, r3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005898:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b40      	cmp	r3, #64	@ 0x40
 80058a8:	d138      	bne.n	800591c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058ba:	e086      	b.n	80059ca <DMA_SetConfig+0x32a>
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8
 80058fc:	58025408 	.word	0x58025408
 8005900:	5802541c 	.word	0x5802541c
 8005904:	58025430 	.word	0x58025430
 8005908:	58025444 	.word	0x58025444
 800590c:	58025458 	.word	0x58025458
 8005910:	5802546c 	.word	0x5802546c
 8005914:	58025480 	.word	0x58025480
 8005918:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
}
 800592c:	e04d      	b.n	80059ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a29      	ldr	r2, [pc, #164]	@ (80059d8 <DMA_SetConfig+0x338>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a27      	ldr	r2, [pc, #156]	@ (80059dc <DMA_SetConfig+0x33c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01d      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <DMA_SetConfig+0x340>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <DMA_SetConfig+0x2de>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a24      	ldr	r2, [pc, #144]	@ (80059e4 <DMA_SetConfig+0x344>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <DMA_SetConfig+0x348>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <DMA_SetConfig+0x34c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <DMA_SetConfig+0x2de>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <DMA_SetConfig+0x350>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <DMA_SetConfig+0x2de>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <DMA_SetConfig+0x354>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <DMA_SetConfig+0x2e2>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <DMA_SetConfig+0x2e4>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d108      	bne.n	80059ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	60da      	str	r2, [r3, #12]
}
 80059b8:	e007      	b.n	80059ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494

080059f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a42      	ldr	r2, [pc, #264]	@ (8005b10 <DMA_CalcBaseAndBitshift+0x118>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04a      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a41      	ldr	r2, [pc, #260]	@ (8005b14 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d045      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3f      	ldr	r2, [pc, #252]	@ (8005b18 <DMA_CalcBaseAndBitshift+0x120>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d040      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3e      	ldr	r2, [pc, #248]	@ (8005b1c <DMA_CalcBaseAndBitshift+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d03b      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b20 <DMA_CalcBaseAndBitshift+0x128>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3b      	ldr	r2, [pc, #236]	@ (8005b24 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d031      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a39      	ldr	r2, [pc, #228]	@ (8005b28 <DMA_CalcBaseAndBitshift+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02c      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a38      	ldr	r2, [pc, #224]	@ (8005b2c <DMA_CalcBaseAndBitshift+0x134>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d027      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a36      	ldr	r2, [pc, #216]	@ (8005b30 <DMA_CalcBaseAndBitshift+0x138>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a35      	ldr	r2, [pc, #212]	@ (8005b34 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a33      	ldr	r2, [pc, #204]	@ (8005b38 <DMA_CalcBaseAndBitshift+0x140>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a32      	ldr	r2, [pc, #200]	@ (8005b3c <DMA_CalcBaseAndBitshift+0x144>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a30      	ldr	r2, [pc, #192]	@ (8005b40 <DMA_CalcBaseAndBitshift+0x148>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <DMA_CalcBaseAndBitshift+0x150>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <DMA_CalcBaseAndBitshift+0x154>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <DMA_CalcBaseAndBitshift+0xac>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <DMA_CalcBaseAndBitshift+0xae>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d024      	beq.n	8005af4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	3b10      	subs	r3, #16
 8005ab2:	4a27      	ldr	r2, [pc, #156]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x158>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	4a24      	ldr	r2, [pc, #144]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d908      	bls.n	8005ae4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x160>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	1d1a      	adds	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ae2:	e00d      	b.n	8005b00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x160>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af2:	e005      	b.n	8005b00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	aaaaaaab 	.word	0xaaaaaaab
 8005b54:	08011b38 	.word	0x08011b38
 8005b58:	fffffc00 	.word	0xfffffc00

08005b5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d120      	bne.n	8005bb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d858      	bhi.n	8005c2a <DMA_CheckFifoParam+0xce>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <DMA_CheckFifoParam+0x24>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b91 	.word	0x08005b91
 8005b84:	08005ba3 	.word	0x08005ba3
 8005b88:	08005b91 	.word	0x08005b91
 8005b8c:	08005c2b 	.word	0x08005c2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d048      	beq.n	8005c2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba0:	e045      	b.n	8005c2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005baa:	d142      	bne.n	8005c32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bb0:	e03f      	b.n	8005c32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bba:	d123      	bne.n	8005c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d838      	bhi.n	8005c36 <DMA_CheckFifoParam+0xda>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <DMA_CheckFifoParam+0x70>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005be3 	.word	0x08005be3
 8005bd4:	08005bdd 	.word	0x08005bdd
 8005bd8:	08005bf5 	.word	0x08005bf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
        break;
 8005be0:	e030      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d025      	beq.n	8005c3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bf2:	e022      	b.n	8005c3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bfc:	d11f      	bne.n	8005c3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c02:	e01c      	b.n	8005c3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d902      	bls.n	8005c12 <DMA_CheckFifoParam+0xb6>
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d003      	beq.n	8005c18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c10:	e018      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
        break;
 8005c16:	e015      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
    break;
 8005c28:	e00b      	b.n	8005c42 <DMA_CheckFifoParam+0xe6>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e00a      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e008      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c32:	bf00      	nop
 8005c34:	e006      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c36:	bf00      	nop
 8005c38:	e004      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <DMA_CheckFifoParam+0xe8>
    break;
 8005c42:	bf00      	nop
    }
  }

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a38      	ldr	r2, [pc, #224]	@ (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a36      	ldr	r2, [pc, #216]	@ (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a35      	ldr	r2, [pc, #212]	@ (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a32      	ldr	r2, [pc, #200]	@ (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a30      	ldr	r2, [pc, #192]	@ (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	3b08      	subs	r3, #8
 8005cc4:	4a28      	ldr	r2, [pc, #160]	@ (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a24      	ldr	r2, [pc, #144]	@ (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ce0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005cf0:	e024      	b.n	8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	3b10      	subs	r3, #16
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d806      	bhi.n	8005d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d902      	bls.n	8005d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3308      	adds	r3, #8
 8005d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	@ (8005d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2201      	movs	r2, #1
 8005d36:	409a      	lsls	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	58025408 	.word	0x58025408
 8005d4c:	5802541c 	.word	0x5802541c
 8005d50:	58025430 	.word	0x58025430
 8005d54:	58025444 	.word	0x58025444
 8005d58:	58025458 	.word	0x58025458
 8005d5c:	5802546c 	.word	0x5802546c
 8005d60:	58025480 	.word	0x58025480
 8005d64:	58025494 	.word	0x58025494
 8005d68:	cccccccd 	.word	0xcccccccd
 8005d6c:	16009600 	.word	0x16009600
 8005d70:	58025880 	.word	0x58025880
 8005d74:	aaaaaaab 	.word	0xaaaaaaab
 8005d78:	400204b8 	.word	0x400204b8
 8005d7c:	4002040f 	.word	0x4002040f
 8005d80:	10008200 	.word	0x10008200
 8005d84:	40020880 	.word	0x40020880

08005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04a      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d847      	bhi.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a25      	ldr	r2, [pc, #148]	@ (8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a24      	ldr	r2, [pc, #144]	@ (8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d01d      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	@ (8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	@ (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d101      	bne.n	8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e10:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e12:	e009      	b.n	8005e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a11      	ldr	r2, [pc, #68]	@ (8005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e26:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	58025408 	.word	0x58025408
 8005e44:	5802541c 	.word	0x5802541c
 8005e48:	58025430 	.word	0x58025430
 8005e4c:	58025444 	.word	0x58025444
 8005e50:	58025458 	.word	0x58025458
 8005e54:	5802546c 	.word	0x5802546c
 8005e58:	58025480 	.word	0x58025480
 8005e5c:	58025494 	.word	0x58025494
 8005e60:	1600963f 	.word	0x1600963f
 8005e64:	58025940 	.word	0x58025940
 8005e68:	1000823f 	.word	0x1000823f
 8005e6c:	40020940 	.word	0x40020940

08005e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	@ 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e7e:	4b89      	ldr	r3, [pc, #548]	@ (80060a4 <HAL_GPIO_Init+0x234>)
 8005e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e82:	e194      	b.n	80061ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8186 	beq.w	80061a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d005      	beq.n	8005eb4 <HAL_GPIO_Init+0x44>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d130      	bne.n	8005f16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eea:	2201      	movs	r2, #1
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0201 	and.w	r2, r3, #1
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d017      	beq.n	8005f52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d123      	bne.n	8005fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	08da      	lsrs	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3208      	adds	r2, #8
 8005f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	220f      	movs	r2, #15
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	08da      	lsrs	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3208      	adds	r2, #8
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f003 0203 	and.w	r2, r3, #3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80e0 	beq.w	80061a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fee:	4a2e      	ldr	r2, [pc, #184]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80060a8 <HAL_GPIO_Init+0x238>)
 8005ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006006:	4a29      	ldr	r2, [pc, #164]	@ (80060ac <HAL_GPIO_Init+0x23c>)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	3302      	adds	r3, #2
 800600e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	220f      	movs	r2, #15
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a20      	ldr	r2, [pc, #128]	@ (80060b0 <HAL_GPIO_Init+0x240>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d052      	beq.n	80060d8 <HAL_GPIO_Init+0x268>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1f      	ldr	r2, [pc, #124]	@ (80060b4 <HAL_GPIO_Init+0x244>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d031      	beq.n	800609e <HAL_GPIO_Init+0x22e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <HAL_GPIO_Init+0x248>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02b      	beq.n	800609a <HAL_GPIO_Init+0x22a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_GPIO_Init+0x24c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d025      	beq.n	8006096 <HAL_GPIO_Init+0x226>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_GPIO_Init+0x250>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01f      	beq.n	8006092 <HAL_GPIO_Init+0x222>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_GPIO_Init+0x254>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d019      	beq.n	800608e <HAL_GPIO_Init+0x21e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_GPIO_Init+0x258>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_GPIO_Init+0x21a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <HAL_GPIO_Init+0x25c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00d      	beq.n	8006086 <HAL_GPIO_Init+0x216>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <HAL_GPIO_Init+0x260>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <HAL_GPIO_Init+0x212>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <HAL_GPIO_Init+0x264>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_GPIO_Init+0x20e>
 800607a:	2309      	movs	r3, #9
 800607c:	e02d      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800607e:	230a      	movs	r3, #10
 8006080:	e02b      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006082:	2308      	movs	r3, #8
 8006084:	e029      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006086:	2307      	movs	r3, #7
 8006088:	e027      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800608a:	2306      	movs	r3, #6
 800608c:	e025      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800608e:	2305      	movs	r3, #5
 8006090:	e023      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006092:	2304      	movs	r3, #4
 8006094:	e021      	b.n	80060da <HAL_GPIO_Init+0x26a>
 8006096:	2303      	movs	r3, #3
 8006098:	e01f      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800609a:	2302      	movs	r3, #2
 800609c:	e01d      	b.n	80060da <HAL_GPIO_Init+0x26a>
 800609e:	2301      	movs	r3, #1
 80060a0:	e01b      	b.n	80060da <HAL_GPIO_Init+0x26a>
 80060a2:	bf00      	nop
 80060a4:	58000080 	.word	0x58000080
 80060a8:	58024400 	.word	0x58024400
 80060ac:	58000400 	.word	0x58000400
 80060b0:	58020000 	.word	0x58020000
 80060b4:	58020400 	.word	0x58020400
 80060b8:	58020800 	.word	0x58020800
 80060bc:	58020c00 	.word	0x58020c00
 80060c0:	58021000 	.word	0x58021000
 80060c4:	58021400 	.word	0x58021400
 80060c8:	58021800 	.word	0x58021800
 80060cc:	58021c00 	.word	0x58021c00
 80060d0:	58022000 	.word	0x58022000
 80060d4:	58022400 	.word	0x58022400
 80060d8:	2300      	movs	r3, #0
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	f002 0203 	and.w	r2, r2, #3
 80060e0:	0092      	lsls	r2, r2, #2
 80060e2:	4093      	lsls	r3, r2
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ea:	4938      	ldr	r1, [pc, #224]	@ (80061cc <HAL_GPIO_Init+0x35c>)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	3302      	adds	r3, #2
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800614c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f47f ae63 	bne.w	8005e84 <HAL_GPIO_Init+0x14>
  }
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	3724      	adds	r7, #36	@ 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	58000400 	.word	0x58000400

080061d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061d8:	4b19      	ldr	r3, [pc, #100]	@ (8006240 <HAL_PWREx_ConfigSupply+0x70>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d00a      	beq.n	80061fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061e4:	4b16      	ldr	r3, [pc, #88]	@ (8006240 <HAL_PWREx_ConfigSupply+0x70>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d001      	beq.n	80061f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e01f      	b.n	8006236 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e01d      	b.n	8006236 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061fa:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <HAL_PWREx_ConfigSupply+0x70>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 0207 	bic.w	r2, r3, #7
 8006202:	490f      	ldr	r1, [pc, #60]	@ (8006240 <HAL_PWREx_ConfigSupply+0x70>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800620a:	f7fd ff95 	bl	8004138 <HAL_GetTick>
 800620e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006210:	e009      	b.n	8006226 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006212:	f7fd ff91 	bl	8004138 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006220:	d901      	bls.n	8006226 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e007      	b.n	8006236 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_PWREx_ConfigSupply+0x70>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006232:	d1ee      	bne.n	8006212 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	58024800 	.word	0x58024800

08006244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	@ 0x30
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f000 bc48 	b.w	8006ae8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8088 	beq.w	8006376 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006266:	4b99      	ldr	r3, [pc, #612]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800626e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006270:	4b96      	ldr	r3, [pc, #600]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006278:	2b10      	cmp	r3, #16
 800627a:	d007      	beq.n	800628c <HAL_RCC_OscConfig+0x48>
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	2b18      	cmp	r3, #24
 8006280:	d111      	bne.n	80062a6 <HAL_RCC_OscConfig+0x62>
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d10c      	bne.n	80062a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	4b8f      	ldr	r3, [pc, #572]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d06d      	beq.n	8006374 <HAL_RCC_OscConfig+0x130>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d169      	bne.n	8006374 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f000 bc21 	b.w	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ae:	d106      	bne.n	80062be <HAL_RCC_OscConfig+0x7a>
 80062b0:	4b86      	ldr	r3, [pc, #536]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a85      	ldr	r2, [pc, #532]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	e02e      	b.n	800631c <HAL_RCC_OscConfig+0xd8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x9c>
 80062c6:	4b81      	ldr	r3, [pc, #516]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a80      	ldr	r2, [pc, #512]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4b7e      	ldr	r3, [pc, #504]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a7d      	ldr	r2, [pc, #500]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e01d      	b.n	800631c <HAL_RCC_OscConfig+0xd8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0xc0>
 80062ea:	4b78      	ldr	r3, [pc, #480]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a77      	ldr	r2, [pc, #476]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	4b75      	ldr	r3, [pc, #468]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a74      	ldr	r2, [pc, #464]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0xd8>
 8006304:	4b71      	ldr	r3, [pc, #452]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a70      	ldr	r2, [pc, #448]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b6e      	ldr	r3, [pc, #440]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a6d      	ldr	r2, [pc, #436]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800631a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fd ff08 	bl	8004138 <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800632c:	f7fd ff04 	bl	8004138 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b64      	cmp	r3, #100	@ 0x64
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e3d4      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800633e:	4b63      	ldr	r3, [pc, #396]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0xe8>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fd fef4 	bl	8004138 <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006354:	f7fd fef0 	bl	8004138 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	@ 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e3c0      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006366:	4b59      	ldr	r3, [pc, #356]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x110>
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80ca 	beq.w	8006518 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006384:	4b51      	ldr	r3, [pc, #324]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800638c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800638e:	4b4f      	ldr	r3, [pc, #316]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006392:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_RCC_OscConfig+0x166>
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2b18      	cmp	r3, #24
 800639e:	d156      	bne.n	800644e <HAL_RCC_OscConfig+0x20a>
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d151      	bne.n	800644e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063aa:	4b48      	ldr	r3, [pc, #288]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_RCC_OscConfig+0x17e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e392      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063c2:	4b42      	ldr	r3, [pc, #264]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 0219 	bic.w	r2, r3, #25
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	493f      	ldr	r1, [pc, #252]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fd feb0 	bl	8004138 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fd feac 	bl	8004138 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e37c      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ee:	4b37      	ldr	r3, [pc, #220]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	f7fd fecd 	bl	8004198 <HAL_GetREVID>
 80063fe:	4603      	mov	r3, r0
 8006400:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006404:	4293      	cmp	r3, r2
 8006406:	d817      	bhi.n	8006438 <HAL_RCC_OscConfig+0x1f4>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d108      	bne.n	8006422 <HAL_RCC_OscConfig+0x1de>
 8006410:	4b2e      	ldr	r3, [pc, #184]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006418:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006420:	e07a      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006422:	4b2a      	ldr	r3, [pc, #168]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	031b      	lsls	r3, r3, #12
 8006430:	4926      	ldr	r1, [pc, #152]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006432:	4313      	orrs	r3, r2
 8006434:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006436:	e06f      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006438:	4b24      	ldr	r3, [pc, #144]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	061b      	lsls	r3, r3, #24
 8006446:	4921      	ldr	r1, [pc, #132]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006448:	4313      	orrs	r3, r2
 800644a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800644c:	e064      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d047      	beq.n	80064e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006456:	4b1d      	ldr	r3, [pc, #116]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 0219 	bic.w	r2, r3, #25
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	491a      	ldr	r1, [pc, #104]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fd fe66 	bl	8004138 <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006470:	f7fd fe62 	bl	8004138 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e332      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006482:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648e:	f7fd fe83 	bl	8004198 <HAL_GetREVID>
 8006492:	4603      	mov	r3, r0
 8006494:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006498:	4293      	cmp	r3, r2
 800649a:	d819      	bhi.n	80064d0 <HAL_RCC_OscConfig+0x28c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	d108      	bne.n	80064b6 <HAL_RCC_OscConfig+0x272>
 80064a4:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80064ac:	4a07      	ldr	r2, [pc, #28]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80064ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b2:	6053      	str	r3, [r2, #4]
 80064b4:	e030      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
 80064b6:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	031b      	lsls	r3, r3, #12
 80064c4:	4901      	ldr	r1, [pc, #4]	@ (80064cc <HAL_RCC_OscConfig+0x288>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	604b      	str	r3, [r1, #4]
 80064ca:	e025      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
 80064cc:	58024400 	.word	0x58024400
 80064d0:	4b9a      	ldr	r3, [pc, #616]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	4997      	ldr	r1, [pc, #604]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	e018      	b.n	8006518 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e6:	4b95      	ldr	r3, [pc, #596]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a94      	ldr	r2, [pc, #592]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fd fe21 	bl	8004138 <HAL_GetTick>
 80064f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064fa:	f7fd fe1d 	bl	8004138 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e2ed      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800650c:	4b8b      	ldr	r3, [pc, #556]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80a9 	beq.w	8006678 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006526:	4b85      	ldr	r3, [pc, #532]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800652e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006530:	4b82      	ldr	r3, [pc, #520]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d007      	beq.n	800654c <HAL_RCC_OscConfig+0x308>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b18      	cmp	r3, #24
 8006540:	d13a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x374>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d135      	bne.n	80065b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800654c:	4b7b      	ldr	r3, [pc, #492]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <HAL_RCC_OscConfig+0x320>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	2b80      	cmp	r3, #128	@ 0x80
 800655e:	d001      	beq.n	8006564 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e2c1      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006564:	f7fd fe18 	bl	8004198 <HAL_GetREVID>
 8006568:	4603      	mov	r3, r0
 800656a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800656e:	4293      	cmp	r3, r2
 8006570:	d817      	bhi.n	80065a2 <HAL_RCC_OscConfig+0x35e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	2b20      	cmp	r3, #32
 8006578:	d108      	bne.n	800658c <HAL_RCC_OscConfig+0x348>
 800657a:	4b70      	ldr	r3, [pc, #448]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006582:	4a6e      	ldr	r2, [pc, #440]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006588:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800658a:	e075      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800658c:	4b6b      	ldr	r3, [pc, #428]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	069b      	lsls	r3, r3, #26
 800659a:	4968      	ldr	r1, [pc, #416]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800659c:	4313      	orrs	r3, r2
 800659e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065a0:	e06a      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065a2:	4b66      	ldr	r3, [pc, #408]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	4962      	ldr	r1, [pc, #392]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065b6:	e05f      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d042      	beq.n	8006646 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065c0:	4b5e      	ldr	r3, [pc, #376]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5d      	ldr	r2, [pc, #372]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80065c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fd fdb4 	bl	8004138 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065d4:	f7fd fdb0 	bl	8004138 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e280      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065e6:	4b55      	ldr	r3, [pc, #340]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f2:	f7fd fdd1 	bl	8004198 <HAL_GetREVID>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d817      	bhi.n	8006630 <HAL_RCC_OscConfig+0x3ec>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	2b20      	cmp	r3, #32
 8006606:	d108      	bne.n	800661a <HAL_RCC_OscConfig+0x3d6>
 8006608:	4b4c      	ldr	r3, [pc, #304]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006610:	4a4a      	ldr	r2, [pc, #296]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006616:	6053      	str	r3, [r2, #4]
 8006618:	e02e      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
 800661a:	4b48      	ldr	r3, [pc, #288]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	069b      	lsls	r3, r3, #26
 8006628:	4944      	ldr	r1, [pc, #272]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800662a:	4313      	orrs	r3, r2
 800662c:	604b      	str	r3, [r1, #4]
 800662e:	e023      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
 8006630:	4b42      	ldr	r3, [pc, #264]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	061b      	lsls	r3, r3, #24
 800663e:	493f      	ldr	r1, [pc, #252]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006640:	4313      	orrs	r3, r2
 8006642:	60cb      	str	r3, [r1, #12]
 8006644:	e018      	b.n	8006678 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006646:	4b3d      	ldr	r3, [pc, #244]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a3c      	ldr	r2, [pc, #240]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800664c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006652:	f7fd fd71 	bl	8004138 <HAL_GetTick>
 8006656:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800665a:	f7fd fd6d 	bl	8004138 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e23d      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800666c:	4b33      	ldr	r3, [pc, #204]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f0      	bne.n	800665a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d036      	beq.n	80066f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d019      	beq.n	80066c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800668c:	4b2b      	ldr	r3, [pc, #172]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800668e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006690:	4a2a      	ldr	r2, [pc, #168]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006698:	f7fd fd4e 	bl	8004138 <HAL_GetTick>
 800669c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a0:	f7fd fd4a 	bl	8004138 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e21a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066b2:	4b22      	ldr	r3, [pc, #136]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x45c>
 80066be:	e018      	b.n	80066f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066c0:	4b1e      	ldr	r3, [pc, #120]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80066c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c4:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fd fd34 	bl	8004138 <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d4:	f7fd fd30 	bl	8004138 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e200      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066e6:	4b15      	ldr	r3, [pc, #84]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d039      	beq.n	8006772 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01c      	beq.n	8006740 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006706:	4b0d      	ldr	r3, [pc, #52]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a0c      	ldr	r2, [pc, #48]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800670c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006710:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006712:	f7fd fd11 	bl	8004138 <HAL_GetTick>
 8006716:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800671a:	f7fd fd0d 	bl	8004138 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e1dd      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800672c:	4b03      	ldr	r3, [pc, #12]	@ (800673c <HAL_RCC_OscConfig+0x4f8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x4d6>
 8006738:	e01b      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006740:	4b9b      	ldr	r3, [pc, #620]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a9a      	ldr	r2, [pc, #616]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800674a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800674c:	f7fd fcf4 	bl	8004138 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006754:	f7fd fcf0 	bl	8004138 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1c0      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006766:	4b92      	ldr	r3, [pc, #584]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8081 	beq.w	8006882 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006780:	4b8c      	ldr	r3, [pc, #560]	@ (80069b4 <HAL_RCC_OscConfig+0x770>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a8b      	ldr	r2, [pc, #556]	@ (80069b4 <HAL_RCC_OscConfig+0x770>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800678c:	f7fd fcd4 	bl	8004138 <HAL_GetTick>
 8006790:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fd fcd0 	bl	8004138 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	@ 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1a0      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a6:	4b83      	ldr	r3, [pc, #524]	@ (80069b4 <HAL_RCC_OscConfig+0x770>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d106      	bne.n	80067c8 <HAL_RCC_OscConfig+0x584>
 80067ba:	4b7d      	ldr	r3, [pc, #500]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	4a7c      	ldr	r2, [pc, #496]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c6:	e02d      	b.n	8006824 <HAL_RCC_OscConfig+0x5e0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <HAL_RCC_OscConfig+0x5a6>
 80067d0:	4b77      	ldr	r3, [pc, #476]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	4a76      	ldr	r2, [pc, #472]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	@ 0x70
 80067dc:	4b74      	ldr	r3, [pc, #464]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e0:	4a73      	ldr	r2, [pc, #460]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067e2:	f023 0304 	bic.w	r3, r3, #4
 80067e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e8:	e01c      	b.n	8006824 <HAL_RCC_OscConfig+0x5e0>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0x5c8>
 80067f2:	4b6f      	ldr	r3, [pc, #444]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f6:	4a6e      	ldr	r2, [pc, #440]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80067f8:	f043 0304 	orr.w	r3, r3, #4
 80067fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067fe:	4b6c      	ldr	r3, [pc, #432]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006802:	4a6b      	ldr	r2, [pc, #428]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6713      	str	r3, [r2, #112]	@ 0x70
 800680a:	e00b      	b.n	8006824 <HAL_RCC_OscConfig+0x5e0>
 800680c:	4b68      	ldr	r3, [pc, #416]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006810:	4a67      	ldr	r2, [pc, #412]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	6713      	str	r3, [r2, #112]	@ 0x70
 8006818:	4b65      	ldr	r3, [pc, #404]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681c:	4a64      	ldr	r2, [pc, #400]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800681e:	f023 0304 	bic.w	r3, r3, #4
 8006822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fd fc84 	bl	8004138 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fd fc80 	bl	8004138 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e14e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684a:	4b59      	ldr	r3, [pc, #356]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0ee      	beq.n	8006834 <HAL_RCC_OscConfig+0x5f0>
 8006856:	e014      	b.n	8006882 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fd fc6e 	bl	8004138 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800685e:	e00a      	b.n	8006876 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006860:	f7fd fc6a 	bl	8004138 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e138      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006876:	4b4e      	ldr	r3, [pc, #312]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ee      	bne.n	8006860 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 812d 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800688c:	4b48      	ldr	r3, [pc, #288]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006894:	2b18      	cmp	r3, #24
 8006896:	f000 80bd 	beq.w	8006a14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f040 809e 	bne.w	80069e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a4:	4b42      	ldr	r3, [pc, #264]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a41      	ldr	r2, [pc, #260]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80068aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fd fc42 	bl	8004138 <HAL_GetTick>
 80068b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b8:	f7fd fc3e 	bl	8004138 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e10e      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f0      	bne.n	80068b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d6:	4b36      	ldr	r3, [pc, #216]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80068d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068da:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <HAL_RCC_OscConfig+0x774>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	430a      	orrs	r2, r1
 80068ea:	4931      	ldr	r1, [pc, #196]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	3b01      	subs	r3, #1
 80068f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fe:	3b01      	subs	r3, #1
 8006900:	025b      	lsls	r3, r3, #9
 8006902:	b29b      	uxth	r3, r3
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	3b01      	subs	r3, #1
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	3b01      	subs	r3, #1
 800691a:	061b      	lsls	r3, r3, #24
 800691c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006920:	4923      	ldr	r1, [pc, #140]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006922:	4313      	orrs	r3, r2
 8006924:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006926:	4b22      	ldr	r3, [pc, #136]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	4a21      	ldr	r2, [pc, #132]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006932:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006936:	4b21      	ldr	r3, [pc, #132]	@ (80069bc <HAL_RCC_OscConfig+0x778>)
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800693e:	00d2      	lsls	r2, r2, #3
 8006940:	491b      	ldr	r1, [pc, #108]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006946:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	f023 020c 	bic.w	r2, r3, #12
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	4917      	ldr	r1, [pc, #92]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006958:	4b15      	ldr	r3, [pc, #84]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	f023 0202 	bic.w	r2, r3, #2
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006964:	4912      	ldr	r1, [pc, #72]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800696a:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	4a10      	ldr	r2, [pc, #64]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	4a0d      	ldr	r2, [pc, #52]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800697c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006982:	4b0b      	ldr	r3, [pc, #44]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a0a      	ldr	r2, [pc, #40]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800698c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800698e:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	4a07      	ldr	r2, [pc, #28]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800699a:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <HAL_RCC_OscConfig+0x76c>)
 80069a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a6:	f7fd fbc7 	bl	8004138 <HAL_GetTick>
 80069aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069ac:	e011      	b.n	80069d2 <HAL_RCC_OscConfig+0x78e>
 80069ae:	bf00      	nop
 80069b0:	58024400 	.word	0x58024400
 80069b4:	58024800 	.word	0x58024800
 80069b8:	fffffc0c 	.word	0xfffffc0c
 80069bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fd fbba 	bl	8004138 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e08a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069d2:	4b47      	ldr	r3, [pc, #284]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x77c>
 80069de:	e082      	b.n	8006ae6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e0:	4b43      	ldr	r3, [pc, #268]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a42      	ldr	r2, [pc, #264]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd fba4 	bl	8004138 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fd fba0 	bl	8004138 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e070      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a06:	4b3a      	ldr	r3, [pc, #232]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x7b0>
 8006a12:	e068      	b.n	8006ae6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a14:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a1a:	4b35      	ldr	r3, [pc, #212]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d031      	beq.n	8006a8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f003 0203 	and.w	r2, r3, #3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d12a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d122      	bne.n	8006a8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d11a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	0a5b      	lsrs	r3, r3, #9
 8006a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d111      	bne.n	8006a8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d108      	bne.n	8006a8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	0e1b      	lsrs	r3, r3, #24
 8006a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e02b      	b.n	8006ae8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a90:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d01f      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006aa6:	4b12      	ldr	r3, [pc, #72]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	4a11      	ldr	r2, [pc, #68]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ab2:	f7fd fb41 	bl	8004138 <HAL_GetTick>
 8006ab6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ab8:	bf00      	nop
 8006aba:	f7fd fb3d 	bl	8004138 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d0f9      	beq.n	8006aba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aca:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <HAL_RCC_OscConfig+0x8b0>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ad2:	00d2      	lsls	r2, r2, #3
 8006ad4:	4906      	ldr	r1, [pc, #24]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ada:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <HAL_RCC_OscConfig+0x8ac>)
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3730      	adds	r7, #48	@ 0x30
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	58024400 	.word	0x58024400
 8006af4:	ffff0007 	.word	0xffff0007

08006af8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e19c      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b87      	ldr	r3, [pc, #540]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 020f 	bic.w	r2, r3, #15
 8006b22:	4985      	ldr	r1, [pc, #532]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b83      	ldr	r3, [pc, #524]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e184      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d908      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b58:	4b78      	ldr	r3, [pc, #480]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	4975      	ldr	r1, [pc, #468]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	4b70      	ldr	r3, [pc, #448]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d908      	bls.n	8006b98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b86:	4b6d      	ldr	r3, [pc, #436]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	496a      	ldr	r1, [pc, #424]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	4b64      	ldr	r3, [pc, #400]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d908      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bb4:	4b61      	ldr	r3, [pc, #388]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	495e      	ldr	r1, [pc, #376]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	4b59      	ldr	r3, [pc, #356]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d908      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006be2:	4b56      	ldr	r3, [pc, #344]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4953      	ldr	r1, [pc, #332]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	4b4d      	ldr	r3, [pc, #308]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d908      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c10:	4b4a      	ldr	r3, [pc, #296]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f023 020f 	bic.w	r2, r3, #15
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4947      	ldr	r1, [pc, #284]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d055      	beq.n	8006cda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c2e:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4940      	ldr	r1, [pc, #256]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c48:	4b3c      	ldr	r3, [pc, #240]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d121      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0f6      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c60:	4b36      	ldr	r3, [pc, #216]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d115      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0ea      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c78:	4b30      	ldr	r3, [pc, #192]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0de      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c88:	4b2c      	ldr	r3, [pc, #176]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0d6      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c98:	4b28      	ldr	r3, [pc, #160]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f023 0207 	bic.w	r2, r3, #7
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4925      	ldr	r1, [pc, #148]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006caa:	f7fd fa45 	bl	8004138 <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb2:	f7fd fa41 	bl	8004138 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0be      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d1eb      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d208      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf6:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f023 020f 	bic.w	r2, r3, #15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	490e      	ldr	r1, [pc, #56]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d08:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d214      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b08      	ldr	r3, [pc, #32]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 020f 	bic.w	r2, r3, #15
 8006d1e:	4906      	ldr	r1, [pc, #24]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b04      	ldr	r3, [pc, #16]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e086      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
 8006d38:	52002000 	.word	0x52002000
 8006d3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	4b3f      	ldr	r3, [pc, #252]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d208      	bcs.n	8006d6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4939      	ldr	r1, [pc, #228]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	4b34      	ldr	r3, [pc, #208]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d208      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d8a:	4b31      	ldr	r3, [pc, #196]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	492e      	ldr	r1, [pc, #184]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d208      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db8:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	4922      	ldr	r1, [pc, #136]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	4b1d      	ldr	r3, [pc, #116]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d208      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4917      	ldr	r1, [pc, #92]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006df8:	f000 f834 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b14      	ldr	r3, [pc, #80]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	4912      	ldr	r1, [pc, #72]	@ (8006e54 <HAL_RCC_ClockConfig+0x35c>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
 8006e14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e16:	4b0e      	ldr	r3, [pc, #56]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006e54 <HAL_RCC_ClockConfig+0x35c>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <HAL_RCC_ClockConfig+0x360>)
 8006e2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e30:	4a0a      	ldr	r2, [pc, #40]	@ (8006e5c <HAL_RCC_ClockConfig+0x364>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <HAL_RCC_ClockConfig+0x368>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fd f932 	bl	80040a4 <HAL_InitTick>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
 8006e54:	08011ae0 	.word	0x08011ae0
 8006e58:	24000054 	.word	0x24000054
 8006e5c:	24000050 	.word	0x24000050
 8006e60:	24000058 	.word	0x24000058

08006e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	@ 0x24
 8006e68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6a:	4bb3      	ldr	r3, [pc, #716]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e72:	2b18      	cmp	r3, #24
 8006e74:	f200 8155 	bhi.w	8007122 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e78:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08007123 	.word	0x08007123
 8006e88:	08007123 	.word	0x08007123
 8006e8c:	08007123 	.word	0x08007123
 8006e90:	08007123 	.word	0x08007123
 8006e94:	08007123 	.word	0x08007123
 8006e98:	08007123 	.word	0x08007123
 8006e9c:	08007123 	.word	0x08007123
 8006ea0:	08006f0b 	.word	0x08006f0b
 8006ea4:	08007123 	.word	0x08007123
 8006ea8:	08007123 	.word	0x08007123
 8006eac:	08007123 	.word	0x08007123
 8006eb0:	08007123 	.word	0x08007123
 8006eb4:	08007123 	.word	0x08007123
 8006eb8:	08007123 	.word	0x08007123
 8006ebc:	08007123 	.word	0x08007123
 8006ec0:	08006f11 	.word	0x08006f11
 8006ec4:	08007123 	.word	0x08007123
 8006ec8:	08007123 	.word	0x08007123
 8006ecc:	08007123 	.word	0x08007123
 8006ed0:	08007123 	.word	0x08007123
 8006ed4:	08007123 	.word	0x08007123
 8006ed8:	08007123 	.word	0x08007123
 8006edc:	08007123 	.word	0x08007123
 8006ee0:	08006f17 	.word	0x08006f17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee4:	4b94      	ldr	r3, [pc, #592]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef0:	4b91      	ldr	r3, [pc, #580]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	4a90      	ldr	r2, [pc, #576]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f02:	e111      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f04:	4b8d      	ldr	r3, [pc, #564]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f06:	61bb      	str	r3, [r7, #24]
      break;
 8006f08:	e10e      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f0c:	61bb      	str	r3, [r7, #24]
      break;
 8006f0e:	e10b      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f10:	4b8c      	ldr	r3, [pc, #560]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f12:	61bb      	str	r3, [r7, #24]
      break;
 8006f14:	e108      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f16:	4b88      	ldr	r3, [pc, #544]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f20:	4b85      	ldr	r3, [pc, #532]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f2c:	4b82      	ldr	r3, [pc, #520]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f36:	4b80      	ldr	r3, [pc, #512]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80e1 	beq.w	800711c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	f000 8083 	beq.w	8007068 <HAL_RCC_GetSysClockFreq+0x204>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	f200 80a1 	bhi.w	80070ac <HAL_RCC_GetSysClockFreq+0x248>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_RCC_GetSysClockFreq+0x114>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d056      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f76:	e099      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f78:	4b6f      	ldr	r3, [pc, #444]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b6c      	ldr	r3, [pc, #432]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b62      	ldr	r3, [pc, #392]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fde:	e087      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b51      	ldr	r3, [pc, #324]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a02 	vldr	s12, [r7, #8]
 8007006:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007022:	e065      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007150 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b40      	ldr	r3, [pc, #256]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a02 	vldr	s12, [r7, #8]
 800704a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007066:	e043      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007154 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b2f      	ldr	r3, [pc, #188]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a02 	vldr	s12, [r7, #8]
 800708e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070aa:	e021      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007150 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b1e      	ldr	r3, [pc, #120]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070f0:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	0a5b      	lsrs	r3, r3, #9
 80070f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fa:	3301      	adds	r3, #1
 80070fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007108:	edd7 6a07 	vldr	s13, [r7, #28]
 800710c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007114:	ee17 3a90 	vmov	r3, s15
 8007118:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800711a:	e005      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
      break;
 8007120:	e002      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007124:	61bb      	str	r3, [r7, #24]
      break;
 8007126:	bf00      	nop
  }

  return sysclockfreq;
 8007128:	69bb      	ldr	r3, [r7, #24]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3724      	adds	r7, #36	@ 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
 800713c:	03d09000 	.word	0x03d09000
 8007140:	003d0900 	.word	0x003d0900
 8007144:	017d7840 	.word	0x017d7840
 8007148:	46000000 	.word	0x46000000
 800714c:	4c742400 	.word	0x4c742400
 8007150:	4a742400 	.word	0x4a742400
 8007154:	4bbebc20 	.word	0x4bbebc20

08007158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800715e:	f7ff fe81 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 8007162:	4602      	mov	r2, r0
 8007164:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	0a1b      	lsrs	r3, r3, #8
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	490f      	ldr	r1, [pc, #60]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007170:	5ccb      	ldrb	r3, [r1, r3]
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800717c:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	4a09      	ldr	r2, [pc, #36]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	4a07      	ldr	r2, [pc, #28]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007194:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007196:	4a07      	ldr	r2, [pc, #28]	@ (80071b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800719c:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800719e:	681b      	ldr	r3, [r3, #0]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	58024400 	.word	0x58024400
 80071ac:	08011ae0 	.word	0x08011ae0
 80071b0:	24000054 	.word	0x24000054
 80071b4:	24000050 	.word	0x24000050

080071b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071bc:	f7ff ffcc 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	4904      	ldr	r1, [pc, #16]	@ (80071e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	58024400 	.word	0x58024400
 80071e0:	08011ae0 	.word	0x08011ae0

080071e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071e8:	f7ff ffb6 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4904      	ldr	r1, [pc, #16]	@ (800720c <HAL_RCC_GetPCLK2Freq+0x28>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	58024400 	.word	0x58024400
 800720c:	08011ae0 	.word	0x08011ae0

08007210 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007214:	b0ca      	sub	sp, #296	@ 0x128
 8007216:	af00      	add	r7, sp, #0
 8007218:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007234:	2500      	movs	r5, #0
 8007236:	ea54 0305 	orrs.w	r3, r4, r5
 800723a:	d049      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007242:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007246:	d02f      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007248:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800724c:	d828      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800724e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007252:	d01a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007258:	d822      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007262:	d007      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007264:	e01c      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007266:	4bb8      	ldr	r3, [pc, #736]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	4ab7      	ldr	r2, [pc, #732]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800726c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007270:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007272:	e01a      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007278:	3308      	adds	r3, #8
 800727a:	2102      	movs	r1, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f002 fb61 	bl	8009944 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007288:	e00f      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	3328      	adds	r3, #40	@ 0x28
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f002 fc08 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800729e:	e004      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072a6:	e000      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80072a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072b2:	4ba5      	ldr	r3, [pc, #660]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c0:	4aa1      	ldr	r2, [pc, #644]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80072dc:	f04f 0900 	mov.w	r9, #0
 80072e0:	ea58 0309 	orrs.w	r3, r8, r9
 80072e4:	d047      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d82a      	bhi.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80072f0:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	0800730d 	.word	0x0800730d
 80072fc:	0800731b 	.word	0x0800731b
 8007300:	08007331 	.word	0x08007331
 8007304:	0800734f 	.word	0x0800734f
 8007308:	0800734f 	.word	0x0800734f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730c:	4b8e      	ldr	r3, [pc, #568]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	4a8d      	ldr	r2, [pc, #564]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007318:	e01a      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800731a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731e:	3308      	adds	r3, #8
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f002 fb0e 	bl	8009944 <RCCEx_PLL2_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800732e:	e00f      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	3328      	adds	r3, #40	@ 0x28
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f002 fbb5 	bl	8009aa8 <RCCEx_PLL3_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800734e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007358:	4b7b      	ldr	r3, [pc, #492]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735c:	f023 0107 	bic.w	r1, r3, #7
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	4a78      	ldr	r2, [pc, #480]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007368:	430b      	orrs	r3, r1
 800736a:	6513      	str	r3, [r2, #80]	@ 0x50
 800736c:	e003      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007382:	f04f 0b00 	mov.w	fp, #0
 8007386:	ea5a 030b 	orrs.w	r3, sl, fp
 800738a:	d04c      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007396:	d030      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800739c:	d829      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800739e:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a0:	d02d      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80073a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073a4:	d825      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073a6:	2b80      	cmp	r3, #128	@ 0x80
 80073a8:	d018      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80073aa:	2b80      	cmp	r3, #128	@ 0x80
 80073ac:	d821      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d007      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80073b6:	e01c      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b8:	4b63      	ldr	r3, [pc, #396]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073bc:	4a62      	ldr	r2, [pc, #392]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80073c4:	e01c      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	3308      	adds	r3, #8
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fab8 	bl	8009944 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80073da:	e011      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	3328      	adds	r3, #40	@ 0x28
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f002 fb5f 	bl	8009aa8 <RCCEx_PLL3_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80073f0:	e006      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f8:	e002      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80073fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007408:	4b4f      	ldr	r3, [pc, #316]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800740a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007416:	4a4c      	ldr	r2, [pc, #304]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007418:	430b      	orrs	r3, r1
 800741a:	6513      	str	r3, [r2, #80]	@ 0x50
 800741c:	e003      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007432:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007436:	2300      	movs	r3, #0
 8007438:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800743c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d053      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800744e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007452:	d035      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007458:	d82e      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800745a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800745e:	d031      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007460:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007464:	d828      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800746a:	d01a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800746c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007470:	d822      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800747a:	d007      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800747c:	e01c      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4b32      	ldr	r3, [pc, #200]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	4a31      	ldr	r2, [pc, #196]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800748a:	e01c      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	3308      	adds	r3, #8
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f002 fa55 	bl	8009944 <RCCEx_PLL2_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074a0:	e011      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a6:	3328      	adds	r3, #40	@ 0x28
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f002 fafc 	bl	8009aa8 <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074b6:	e006      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074be:	e002      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80074c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80074de:	4a1a      	ldr	r2, [pc, #104]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80074fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007504:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007508:	460b      	mov	r3, r1
 800750a:	4313      	orrs	r3, r2
 800750c:	d056      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800751a:	d038      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800751c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007520:	d831      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007522:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007526:	d034      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007528:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800752c:	d82b      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800752e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007532:	d01d      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007538:	d825      	bhi.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d006      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800753e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007542:	d00a      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007544:	e01f      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800754c:	4ba2      	ldr	r3, [pc, #648]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007550:	4aa1      	ldr	r2, [pc, #644]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007558:	e01c      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	3308      	adds	r3, #8
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f002 f9ee 	bl	8009944 <RCCEx_PLL2_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800756e:	e011      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	3328      	adds	r3, #40	@ 0x28
 8007576:	2100      	movs	r1, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f002 fa95 	bl	8009aa8 <RCCEx_PLL3_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007584:	e006      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800758c:	e002      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800758e:	bf00      	nop
 8007590:	e000      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800759c:	4b8e      	ldr	r3, [pc, #568]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800759e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075ac:	4a8a      	ldr	r2, [pc, #552]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80075c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	d03a      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e2:	2b30      	cmp	r3, #48	@ 0x30
 80075e4:	d01f      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80075e6:	2b30      	cmp	r3, #48	@ 0x30
 80075e8:	d819      	bhi.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d00c      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d815      	bhi.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d019      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d111      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075fa:	4b77      	ldr	r3, [pc, #476]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	4a76      	ldr	r2, [pc, #472]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007606:	e011      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760c:	3308      	adds	r3, #8
 800760e:	2102      	movs	r1, #2
 8007610:	4618      	mov	r0, r3
 8007612:	f002 f997 	bl	8009944 <RCCEx_PLL2_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800761c:	e006      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800762a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007634:	4b68      	ldr	r3, [pc, #416]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007638:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007642:	4a65      	ldr	r2, [pc, #404]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007644:	430b      	orrs	r3, r1
 8007646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007648:	e003      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800765e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007662:	2300      	movs	r3, #0
 8007664:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007668:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800766c:	460b      	mov	r3, r1
 800766e:	4313      	orrs	r3, r2
 8007670:	d051      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767c:	d035      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800767e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007682:	d82e      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007688:	d031      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800768a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800768e:	d828      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007694:	d01a      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800769a:	d822      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076a4:	d007      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80076a6:	e01c      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a8:	4b4b      	ldr	r3, [pc, #300]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a4a      	ldr	r2, [pc, #296]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076b4:	e01c      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	3308      	adds	r3, #8
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f002 f940 	bl	8009944 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076ca:	e011      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	3328      	adds	r3, #40	@ 0x28
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 f9e7 	bl	8009aa8 <RCCEx_PLL3_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076e0:	e006      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80076ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076f8:	4b37      	ldr	r3, [pc, #220]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007706:	4a34      	ldr	r2, [pc, #208]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007708:	430b      	orrs	r3, r1
 800770a:	6513      	str	r3, [r2, #80]	@ 0x50
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800772c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d056      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800773c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007740:	d033      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007746:	d82c      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007748:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800774c:	d02f      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800774e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007752:	d826      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007758:	d02b      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800775a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800775e:	d820      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007764:	d012      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800776a:	d81a      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d022      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007774:	d115      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	3308      	adds	r3, #8
 800777c:	2101      	movs	r1, #1
 800777e:	4618      	mov	r0, r3
 8007780:	f002 f8e0 	bl	8009944 <RCCEx_PLL2_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800778a:	e015      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	3328      	adds	r3, #40	@ 0x28
 8007792:	2101      	movs	r1, #1
 8007794:	4618      	mov	r0, r3
 8007796:	f002 f987 	bl	8009aa8 <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077a0:	e00a      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e004      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80077b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10d      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ce:	4a02      	ldr	r2, [pc, #8]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80077d4:	e006      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80077f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80077fe:	460b      	mov	r3, r1
 8007800:	4313      	orrs	r3, r2
 8007802:	d055      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800780c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007810:	d033      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007816:	d82c      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781c:	d02f      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007822:	d826      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007824:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007828:	d02b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800782a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800782e:	d820      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007834:	d012      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783a:	d81a      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d022      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007844:	d115      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3308      	adds	r3, #8
 800784c:	2101      	movs	r1, #1
 800784e:	4618      	mov	r0, r3
 8007850:	f002 f878 	bl	8009944 <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800785a:	e015      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	3328      	adds	r3, #40	@ 0x28
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f002 f91f 	bl	8009aa8 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007870:	e00a      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007878:	e006      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800787e:	bf00      	nop
 8007880:	e002      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007890:	4ba3      	ldr	r3, [pc, #652]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007894:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078a0:	4a9f      	ldr	r2, [pc, #636]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078ca:	460b      	mov	r3, r1
 80078cc:	4313      	orrs	r3, r2
 80078ce:	d037      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078da:	d00e      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80078dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e0:	d816      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d111      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ec:	4b8c      	ldr	r3, [pc, #560]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	4a8b      	ldr	r2, [pc, #556]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078f8:	e00f      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fe:	3308      	adds	r3, #8
 8007900:	2101      	movs	r1, #1
 8007902:	4618      	mov	r0, r3
 8007904:	f002 f81e 	bl	8009944 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007922:	4b7f      	ldr	r3, [pc, #508]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007926:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007930:	4a7b      	ldr	r2, [pc, #492]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007932:	430b      	orrs	r3, r1
 8007934:	6513      	str	r3, [r2, #80]	@ 0x50
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800794c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007950:	2300      	movs	r3, #0
 8007952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007956:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d039      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007966:	2b03      	cmp	r3, #3
 8007968:	d81c      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079ad 	.word	0x080079ad
 8007974:	08007981 	.word	0x08007981
 8007978:	0800798f 	.word	0x0800798f
 800797c:	080079ad 	.word	0x080079ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007980:	4b67      	ldr	r3, [pc, #412]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	4a66      	ldr	r2, [pc, #408]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800798c:	e00f      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007992:	3308      	adds	r3, #8
 8007994:	2102      	movs	r1, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 ffd4 	bl	8009944 <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079a2:	e004      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079aa:	e000      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80079ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079b6:	4b5a      	ldr	r3, [pc, #360]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ba:	f023 0103 	bic.w	r1, r3, #3
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c4:	4a56      	ldr	r2, [pc, #344]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c6:	430b      	orrs	r3, r1
 80079c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079ca:	e003      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80079e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80079ee:	460b      	mov	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f000 809f 	beq.w	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f6:	4b4b      	ldr	r3, [pc, #300]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80079fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a02:	f7fc fb99 	bl	8004138 <HAL_GetTick>
 8007a06:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fc fb94 	bl	8004138 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b64      	cmp	r3, #100	@ 0x64
 8007a1a:	d903      	bls.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a22:	e005      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a24:	4b3f      	ldr	r3, [pc, #252]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0ed      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d179      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a38:	4b39      	ldr	r3, [pc, #228]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a44:	4053      	eors	r3, r2
 8007a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d015      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a4e:	4b34      	ldr	r3, [pc, #208]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a5a:	4b31      	ldr	r3, [pc, #196]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5e:	4a30      	ldr	r2, [pc, #192]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a66:	4b2e      	ldr	r3, [pc, #184]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a72:	4a2b      	ldr	r2, [pc, #172]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007a78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a86:	d118      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fc fb56 	bl	8004138 <HAL_GetTick>
 8007a8c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a90:	e00d      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a92:	f7fc fb51 	bl	8004138 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a9c:	1ad2      	subs	r2, r2, r3
 8007a9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d903      	bls.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007aac:	e005      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aae:	4b1c      	ldr	r3, [pc, #112]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0eb      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d129      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ad2:	d10e      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ad4:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ae4:	091a      	lsrs	r2, r3, #4
 8007ae6:	4b10      	ldr	r3, [pc, #64]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	4a0d      	ldr	r2, [pc, #52]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6113      	str	r3, [r2, #16]
 8007af0:	e005      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007af2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	4a0a      	ldr	r2, [pc, #40]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007afc:	6113      	str	r3, [r2, #16]
 8007afe:	4b08      	ldr	r3, [pc, #32]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b0e:	4a04      	ldr	r2, [pc, #16]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b10:	430b      	orrs	r3, r1
 8007b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b14:	e00e      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007b1e:	e009      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007b20:	58024400 	.word	0x58024400
 8007b24:	58024800 	.word	0x58024800
 8007b28:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f002 0301 	and.w	r3, r2, #1
 8007b40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f000 8089 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b5c:	2b28      	cmp	r3, #40	@ 0x28
 8007b5e:	d86b      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007b60:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007c41 	.word	0x08007c41
 8007b6c:	08007c39 	.word	0x08007c39
 8007b70:	08007c39 	.word	0x08007c39
 8007b74:	08007c39 	.word	0x08007c39
 8007b78:	08007c39 	.word	0x08007c39
 8007b7c:	08007c39 	.word	0x08007c39
 8007b80:	08007c39 	.word	0x08007c39
 8007b84:	08007c39 	.word	0x08007c39
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007c39 	.word	0x08007c39
 8007b90:	08007c39 	.word	0x08007c39
 8007b94:	08007c39 	.word	0x08007c39
 8007b98:	08007c39 	.word	0x08007c39
 8007b9c:	08007c39 	.word	0x08007c39
 8007ba0:	08007c39 	.word	0x08007c39
 8007ba4:	08007c39 	.word	0x08007c39
 8007ba8:	08007c23 	.word	0x08007c23
 8007bac:	08007c39 	.word	0x08007c39
 8007bb0:	08007c39 	.word	0x08007c39
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c41 	.word	0x08007c41
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c39 	.word	0x08007c39
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c41 	.word	0x08007c41
 8007bec:	08007c39 	.word	0x08007c39
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c39 	.word	0x08007c39
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c39 	.word	0x08007c39
 8007c00:	08007c39 	.word	0x08007c39
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c41 	.word	0x08007c41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	3308      	adds	r3, #8
 8007c12:	2101      	movs	r1, #1
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 fe95 	bl	8009944 <RCCEx_PLL2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c20:	e00f      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c26:	3328      	adds	r3, #40	@ 0x28
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 ff3c 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c36:	e004      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c3e:	e000      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c4a:	4bbf      	ldr	r3, [pc, #764]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c58:	4abb      	ldr	r2, [pc, #748]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f002 0302 	and.w	r3, r2, #2
 8007c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c82:	460b      	mov	r3, r1
 8007c84:	4313      	orrs	r3, r2
 8007c86:	d041      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d824      	bhi.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007c92:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007ce5 	.word	0x08007ce5
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cc7 	.word	0x08007cc7
 8007ca4:	08007ce5 	.word	0x08007ce5
 8007ca8:	08007ce5 	.word	0x08007ce5
 8007cac:	08007ce5 	.word	0x08007ce5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 fe43 	bl	8009944 <RCCEx_PLL2_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cc4:	e00f      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cca:	3328      	adds	r3, #40	@ 0x28
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 feea 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cda:	e004      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cee:	4b96      	ldr	r3, [pc, #600]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	f023 0107 	bic.w	r1, r3, #7
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cfc:	4a92      	ldr	r2, [pc, #584]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d02:	e003      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f002 0304 	and.w	r3, r2, #4
 8007d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d044      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	d825      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d8d 	.word	0x08007d8d
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d6f 	.word	0x08007d6f
 8007d4c:	08007d8d 	.word	0x08007d8d
 8007d50:	08007d8d 	.word	0x08007d8d
 8007d54:	08007d8d 	.word	0x08007d8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fdef 	bl	8009944 <RCCEx_PLL2_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d6c:	e00f      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	3328      	adds	r3, #40	@ 0x28
 8007d74:	2101      	movs	r1, #1
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fe96 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d82:	e004      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d8a:	e000      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10b      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d96:	4b6c      	ldr	r3, [pc, #432]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9a:	f023 0107 	bic.w	r1, r3, #7
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007da6:	4a68      	ldr	r2, [pc, #416]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dac:	e003      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f002 0320 	and.w	r3, r2, #32
 8007dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	d055      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de2:	d033      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de8:	d82c      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dee:	d02f      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df4:	d826      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dfa:	d02b      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007dfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e00:	d820      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e06:	d012      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0c:	d81a      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d022      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e16:	d115      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 fd8f 	bl	8009944 <RCCEx_PLL2_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e2c:	e015      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	3328      	adds	r3, #40	@ 0x28
 8007e34:	2102      	movs	r1, #2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fe36 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e42:	e00a      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e4a:	e006      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e4c:	bf00      	nop
 8007e4e:	e004      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e50:	bf00      	nop
 8007e52:	e002      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e62:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	4a35      	ldr	r2, [pc, #212]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d058      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eaa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eae:	d033      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007eb0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eb4:	d82c      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d02f      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec0:	d826      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ec6:	d02b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ec8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ecc:	d820      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ed2:	d012      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ed8:	d81a      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d022      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee2:	d115      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	3308      	adds	r3, #8
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fd29 	bl	8009944 <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ef8:	e015      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	3328      	adds	r3, #40	@ 0x28
 8007f00:	2102      	movs	r1, #2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 fdd0 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f16:	e006      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10e      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f2e:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f3e:	4a02      	ldr	r2, [pc, #8]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d055      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f80:	d033      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007f82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f86:	d82c      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8c:	d02f      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f92:	d826      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f98:	d02b      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007f9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f9e:	d820      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa4:	d012      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007fa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007faa:	d81a      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d022      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb4:	d115      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	3308      	adds	r3, #8
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fcc0 	bl	8009944 <RCCEx_PLL2_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fca:	e015      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd0:	3328      	adds	r3, #40	@ 0x28
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fd67 	bl	8009aa8 <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fe8:	e006      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007fea:	bf00      	nop
 8007fec:	e004      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007fee:	bf00      	nop
 8007ff0:	e002      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008000:	4ba1      	ldr	r3, [pc, #644]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008004:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008010:	4a9d      	ldr	r2, [pc, #628]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008012:	430b      	orrs	r3, r1
 8008014:	6593      	str	r3, [r2, #88]	@ 0x58
 8008016:	e003      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f002 0308 	and.w	r3, r2, #8
 800802c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008030:	2300      	movs	r3, #0
 8008032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008036:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800803a:	460b      	mov	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	d01e      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804c:	d10c      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	3328      	adds	r3, #40	@ 0x28
 8008054:	2102      	movs	r1, #2
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fd26 	bl	8009aa8 <RCCEx_PLL3_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008068:	4b87      	ldr	r3, [pc, #540]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800806a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008078:	4a83      	ldr	r2, [pc, #524]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800807a:	430b      	orrs	r3, r1
 800807c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f002 0310 	and.w	r3, r2, #16
 800808a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800808e:	2300      	movs	r3, #0
 8008090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008094:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008098:	460b      	mov	r3, r1
 800809a:	4313      	orrs	r3, r2
 800809c:	d01e      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080aa:	d10c      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	3328      	adds	r3, #40	@ 0x28
 80080b2:	2102      	movs	r1, #2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fcf7 	bl	8009aa8 <RCCEx_PLL3_Config>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080c6:	4b70      	ldr	r3, [pc, #448]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080d6:	4a6c      	ldr	r2, [pc, #432]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d8:	430b      	orrs	r3, r1
 80080da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080f6:	460b      	mov	r3, r1
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d03e      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008108:	d022      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800810a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810e:	d81b      	bhi.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008118:	d00b      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800811a:	e015      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	3308      	adds	r3, #8
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fc0d 	bl	8009944 <RCCEx_PLL2_Config>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008130:	e00f      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	3328      	adds	r3, #40	@ 0x28
 8008138:	2102      	movs	r1, #2
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fcb4 	bl	8009aa8 <RCCEx_PLL3_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008146:	e004      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800814e:	e000      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10b      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800815a:	4b4b      	ldr	r3, [pc, #300]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800816a:	4a47      	ldr	r2, [pc, #284]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800816c:	430b      	orrs	r3, r1
 800816e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008170:	e003      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008188:	2300      	movs	r3, #0
 800818a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800818c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008190:	460b      	mov	r3, r1
 8008192:	4313      	orrs	r3, r2
 8008194:	d03b      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081a2:	d01f      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80081a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081a8:	d818      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80081aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ae:	d003      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80081b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081b4:	d007      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80081b6:	e011      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b8:	4b33      	ldr	r3, [pc, #204]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	4a32      	ldr	r2, [pc, #200]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081c4:	e00f      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	3328      	adds	r3, #40	@ 0x28
 80081cc:	2101      	movs	r1, #1
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 fc6a 	bl	8009aa8 <RCCEx_PLL3_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80081da:	e004      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081e2:	e000      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80081e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081ee:	4b26      	ldr	r3, [pc, #152]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fe:	4a22      	ldr	r2, [pc, #136]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008200:	430b      	orrs	r3, r1
 8008202:	6553      	str	r3, [r2, #84]	@ 0x54
 8008204:	e003      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800820a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800821a:	673b      	str	r3, [r7, #112]	@ 0x70
 800821c:	2300      	movs	r3, #0
 800821e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008220:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008224:	460b      	mov	r3, r1
 8008226:	4313      	orrs	r3, r2
 8008228:	d034      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008238:	d007      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800823a:	e011      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800823c:	4b12      	ldr	r3, [pc, #72]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	4a11      	ldr	r2, [pc, #68]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008248:	e00e      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	3308      	adds	r3, #8
 8008250:	2102      	movs	r1, #2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 fb76 	bl	8009944 <RCCEx_PLL2_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800825e:	e003      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008270:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008274:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827e:	4a02      	ldr	r2, [pc, #8]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008280:	430b      	orrs	r3, r1
 8008282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008284:	e006      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80082a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082a2:	2300      	movs	r3, #0
 80082a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80082aa:	460b      	mov	r3, r1
 80082ac:	4313      	orrs	r3, r2
 80082ae:	d00c      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	3328      	adds	r3, #40	@ 0x28
 80082b6:	2102      	movs	r1, #2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fbf5 	bl	8009aa8 <RCCEx_PLL3_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80082d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80082d8:	2300      	movs	r3, #0
 80082da:	667b      	str	r3, [r7, #100]	@ 0x64
 80082dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082e0:	460b      	mov	r3, r1
 80082e2:	4313      	orrs	r3, r2
 80082e4:	d038      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f2:	d018      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80082f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f8:	d811      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80082fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082fe:	d014      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008304:	d80b      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800830a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830e:	d106      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008310:	4bc3      	ldr	r3, [pc, #780]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	4ac2      	ldr	r2, [pc, #776]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800831a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800831c:	e008      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008324:	e004      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008326:	bf00      	nop
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800832e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008338:	4bb9      	ldr	r3, [pc, #740]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800833a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	4ab5      	ldr	r2, [pc, #724]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6553      	str	r3, [r2, #84]	@ 0x54
 800834e:	e003      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008364:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008366:	2300      	movs	r3, #0
 8008368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800836a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d009      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008374:	4baa      	ldr	r3, [pc, #680]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008382:	4aa7      	ldr	r2, [pc, #668]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008384:	430b      	orrs	r3, r1
 8008386:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008394:	653b      	str	r3, [r7, #80]	@ 0x50
 8008396:	2300      	movs	r3, #0
 8008398:	657b      	str	r3, [r7, #84]	@ 0x54
 800839a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d00a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083b4:	4a9a      	ldr	r2, [pc, #616]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b6:	430b      	orrs	r3, r1
 80083b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c8:	2300      	movs	r3, #0
 80083ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80083d0:	460b      	mov	r3, r1
 80083d2:	4313      	orrs	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083d6:	4b92      	ldr	r3, [pc, #584]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f8:	2300      	movs	r3, #0
 80083fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80083fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d00e      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008406:	4b86      	ldr	r3, [pc, #536]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	4a85      	ldr	r2, [pc, #532]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800840c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008410:	6113      	str	r3, [r2, #16]
 8008412:	4b83      	ldr	r3, [pc, #524]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008414:	6919      	ldr	r1, [r3, #16]
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800841e:	4a80      	ldr	r2, [pc, #512]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008420:	430b      	orrs	r3, r1
 8008422:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008432:	2300      	movs	r3, #0
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008436:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800843a:	460b      	mov	r3, r1
 800843c:	4313      	orrs	r3, r2
 800843e:	d009      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008440:	4b77      	ldr	r3, [pc, #476]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008444:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844e:	4a74      	ldr	r2, [pc, #464]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008450:	430b      	orrs	r3, r1
 8008452:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008460:	633b      	str	r3, [r7, #48]	@ 0x30
 8008462:	2300      	movs	r3, #0
 8008464:	637b      	str	r3, [r7, #52]	@ 0x34
 8008466:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800846a:	460b      	mov	r3, r1
 800846c:	4313      	orrs	r3, r2
 800846e:	d00a      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008470:	4b6b      	ldr	r3, [pc, #428]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008474:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008480:	4a67      	ldr	r2, [pc, #412]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008482:	430b      	orrs	r3, r1
 8008484:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	2100      	movs	r1, #0
 8008490:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008498:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800849c:	460b      	mov	r3, r1
 800849e:	4313      	orrs	r3, r2
 80084a0:	d011      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a6:	3308      	adds	r3, #8
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fa4a 	bl	8009944 <RCCEx_PLL2_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	2100      	movs	r1, #0
 80084d0:	6239      	str	r1, [r7, #32]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80084dc:	460b      	mov	r3, r1
 80084de:	4313      	orrs	r3, r2
 80084e0:	d011      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e6:	3308      	adds	r3, #8
 80084e8:	2101      	movs	r1, #1
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fa2a 	bl	8009944 <RCCEx_PLL2_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	2100      	movs	r1, #0
 8008510:	61b9      	str	r1, [r7, #24]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800851c:	460b      	mov	r3, r1
 800851e:	4313      	orrs	r3, r2
 8008520:	d011      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008526:	3308      	adds	r3, #8
 8008528:	2102      	movs	r1, #2
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fa0a 	bl	8009944 <RCCEx_PLL2_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	2100      	movs	r1, #0
 8008550:	6139      	str	r1, [r7, #16]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800855c:	460b      	mov	r3, r1
 800855e:	4313      	orrs	r3, r2
 8008560:	d011      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	3328      	adds	r3, #40	@ 0x28
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fa9c 	bl	8009aa8 <RCCEx_PLL3_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	2100      	movs	r1, #0
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800859c:	460b      	mov	r3, r1
 800859e:	4313      	orrs	r3, r2
 80085a0:	d011      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a6:	3328      	adds	r3, #40	@ 0x28
 80085a8:	2101      	movs	r1, #1
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fa7c 	bl	8009aa8 <RCCEx_PLL3_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	2100      	movs	r1, #0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085dc:	460b      	mov	r3, r1
 80085de:	4313      	orrs	r3, r2
 80085e0:	d011      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	3328      	adds	r3, #40	@ 0x28
 80085e8:	2102      	movs	r1, #2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fa5c 	bl	8009aa8 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008606:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	e000      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
}
 8008614:	4618      	mov	r0, r3
 8008616:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800861a:	46bd      	mov	sp, r7
 800861c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008620:	58024400 	.word	0x58024400

08008624 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b090      	sub	sp, #64	@ 0x40
 8008628:	af00      	add	r7, sp, #0
 800862a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008636:	430b      	orrs	r3, r1
 8008638:	f040 8094 	bne.w	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800863c:	4b9e      	ldr	r3, [pc, #632]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800863e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	2b04      	cmp	r3, #4
 800864a:	f200 8087 	bhi.w	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008669 	.word	0x08008669
 8008658:	08008691 	.word	0x08008691
 800865c:	080086b9 	.word	0x080086b9
 8008660:	08008755 	.word	0x08008755
 8008664:	080086e1 	.word	0x080086e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008668:	4b93      	ldr	r3, [pc, #588]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008674:	d108      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f810 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008684:	f000 bd45 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	f000 bd41 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008690:	4b89      	ldr	r3, [pc, #548]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d108      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0318 	add.w	r3, r7, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fd54 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	f000 bd31 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b4:	f000 bd2d 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b8:	4b7f      	ldr	r3, [pc, #508]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c4:	d108      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fe94 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d4:	f000 bd1d 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086dc:	f000 bd19 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086e0:	4b75      	ldr	r3, [pc, #468]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ea:	4b73      	ldr	r3, [pc, #460]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d10c      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80086f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d109      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086fc:	4b6e      	ldr	r3, [pc, #440]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	4a6d      	ldr	r2, [pc, #436]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008708:	fa22 f303 	lsr.w	r3, r2, r3
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800870e:	e01f      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008710:	4b69      	ldr	r3, [pc, #420]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871c:	d106      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008724:	d102      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008726:	4b66      	ldr	r3, [pc, #408]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872a:	e011      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800872c:	4b62      	ldr	r3, [pc, #392]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008738:	d106      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800873a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008740:	d102      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008742:	4b60      	ldr	r3, [pc, #384]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800874c:	f000 bce1 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008750:	f000 bcdf 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008754:	4b5c      	ldr	r3, [pc, #368]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008758:	f000 bcdb 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008760:	f000 bcd7 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800876c:	430b      	orrs	r3, r1
 800876e:	f040 80ad 	bne.w	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008772:	4b51      	ldr	r3, [pc, #324]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008776:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800877a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008782:	d056      	beq.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800878a:	f200 8090 	bhi.w	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	2bc0      	cmp	r3, #192	@ 0xc0
 8008792:	f000 8088 	beq.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	2bc0      	cmp	r3, #192	@ 0xc0
 800879a:	f200 8088 	bhi.w	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	2b80      	cmp	r3, #128	@ 0x80
 80087a2:	d032      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a6:	2b80      	cmp	r3, #128	@ 0x80
 80087a8:	f200 8081 	bhi.w	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	2b40      	cmp	r3, #64	@ 0x40
 80087b6:	d014      	beq.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80087b8:	e079      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087ba:	4b3f      	ldr	r3, [pc, #252]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c6:	d108      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 ff67 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d6:	f000 bc9c 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087de:	f000 bc98 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087e2:	4b35      	ldr	r3, [pc, #212]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ee:	d108      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f0:	f107 0318 	add.w	r3, r7, #24
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fcab 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fe:	f000 bc88 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	f000 bc84 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800880a:	4b2b      	ldr	r3, [pc, #172]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008816:	d108      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008818:	f107 030c 	add.w	r3, r7, #12
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fdeb 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	f000 bc74 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882e:	f000 bc70 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008832:	4b21      	ldr	r3, [pc, #132]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008836:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800883c:	4b1e      	ldr	r3, [pc, #120]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b04      	cmp	r3, #4
 8008846:	d10c      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800884e:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	08db      	lsrs	r3, r3, #3
 8008854:	f003 0303 	and.w	r3, r3, #3
 8008858:	4a18      	ldr	r2, [pc, #96]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800885a:	fa22 f303 	lsr.w	r3, r2, r3
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008860:	e01f      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008862:	4b15      	ldr	r3, [pc, #84]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800886e:	d106      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008876:	d102      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008878:	4b11      	ldr	r3, [pc, #68]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800887c:	e011      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800887e:	4b0e      	ldr	r3, [pc, #56]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800888a:	d106      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800888c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008892:	d102      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008894:	4b0b      	ldr	r3, [pc, #44]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800889e:	f000 bc38 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088a2:	f000 bc36 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088a6:	4b08      	ldr	r3, [pc, #32]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088aa:	f000 bc32 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b2:	f000 bc2e 	b.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088b6:	bf00      	nop
 80088b8:	58024400 	.word	0x58024400
 80088bc:	03d09000 	.word	0x03d09000
 80088c0:	003d0900 	.word	0x003d0900
 80088c4:	017d7840 	.word	0x017d7840
 80088c8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80088cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80088d4:	430b      	orrs	r3, r1
 80088d6:	f040 809c 	bne.w	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80088da:	4b9e      	ldr	r3, [pc, #632]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80088e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ea:	d054      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088f2:	f200 808b 	bhi.w	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088fc:	f000 8083 	beq.w	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008906:	f200 8081 	bhi.w	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008910:	d02f      	beq.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008918:	d878      	bhi.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008926:	d012      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008928:	e070      	b.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800892a:	4b8a      	ldr	r3, [pc, #552]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008936:	d107      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800893c:	4618      	mov	r0, r3
 800893e:	f000 feaf 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008946:	e3e4      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894c:	e3e1      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800894e:	4b81      	ldr	r3, [pc, #516]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800895a:	d107      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895c:	f107 0318 	add.w	r3, r7, #24
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fbf5 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896a:	e3d2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008970:	e3cf      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008972:	4b78      	ldr	r3, [pc, #480]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897e:	d107      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008980:	f107 030c 	add.w	r3, r7, #12
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fd37 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898e:	e3c0      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008994:	e3bd      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008996:	4b6f      	ldr	r3, [pc, #444]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800899a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a0:	4b6c      	ldr	r3, [pc, #432]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d10c      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b2:	4b68      	ldr	r3, [pc, #416]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	08db      	lsrs	r3, r3, #3
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	4a66      	ldr	r2, [pc, #408]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089be:	fa22 f303 	lsr.w	r3, r2, r3
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c4:	e01e      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089c6:	4b63      	ldr	r3, [pc, #396]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d2:	d106      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80089d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089da:	d102      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089dc:	4b5f      	ldr	r3, [pc, #380]	@ (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e0:	e010      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ee:	d106      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80089f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f6:	d102      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089f8:	4b59      	ldr	r3, [pc, #356]	@ (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089fc:	e002      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a02:	e386      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a04:	e385      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a06:	4b57      	ldr	r3, [pc, #348]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0a:	e382      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e37f      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a16:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	f040 80a7 	bne.w	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008a20:	4b4c      	ldr	r3, [pc, #304]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a24:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008a28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a30:	d055      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a38:	f200 8096 	bhi.w	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a42:	f000 8084 	beq.w	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a4c:	f200 808c 	bhi.w	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a56:	d030      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a5e:	f200 8083 	bhi.w	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a6e:	d012      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008a70:	e07a      	b.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a72:	4b38      	ldr	r3, [pc, #224]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fe0b 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8e:	e340      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e33d      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a96:	4b2f      	ldr	r3, [pc, #188]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa4:	f107 0318 	add.w	r3, r7, #24
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fb51 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab2:	e32e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab8:	e32b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aba:	4b26      	ldr	r3, [pc, #152]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac8:	f107 030c 	add.w	r3, r7, #12
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fc93 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad6:	e31c      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008adc:	e319      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ade:	4b1d      	ldr	r3, [pc, #116]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ae6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d10c      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008afa:	4b16      	ldr	r3, [pc, #88]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	08db      	lsrs	r3, r3, #3
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	4a14      	ldr	r2, [pc, #80]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b06:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b0c:	e01e      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b0e:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b1a:	d106      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b22:	d102      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b24:	4b0d      	ldr	r3, [pc, #52]	@ (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b28:	e010      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b36:	d106      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b3e:	d102      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b40:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b44:	e002      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b4a:	e2e2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b4c:	e2e1      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b4e:	4b05      	ldr	r3, [pc, #20]	@ (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b52:	e2de      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b54:	58024400 	.word	0x58024400
 8008b58:	03d09000 	.word	0x03d09000
 8008b5c:	003d0900 	.word	0x003d0900
 8008b60:	017d7840 	.word	0x017d7840
 8008b64:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6c:	e2d1      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b72:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008b76:	430b      	orrs	r3, r1
 8008b78:	f040 809c 	bne.w	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008b7c:	4b93      	ldr	r3, [pc, #588]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b80:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b8c:	d054      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b94:	f200 808b 	bhi.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b9e:	f000 8083 	beq.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ba8:	f200 8081 	bhi.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bb2:	d02f      	beq.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bba:	d878      	bhi.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bc8:	d012      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008bca:	e070      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bcc:	4b7f      	ldr	r3, [pc, #508]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bd8:	d107      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fd5e 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be8:	e293      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bee:	e290      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bf0:	4b76      	ldr	r3, [pc, #472]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bfc:	d107      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bfe:	f107 0318 	add.w	r3, r7, #24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 faa4 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c0c:	e281      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c12:	e27e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c14:	4b6d      	ldr	r3, [pc, #436]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c20:	d107      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fbe6 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c30:	e26f      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e26c      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c38:	4b64      	ldr	r3, [pc, #400]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c42:	4b62      	ldr	r3, [pc, #392]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d10c      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c54:	4b5d      	ldr	r3, [pc, #372]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	08db      	lsrs	r3, r3, #3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a5c      	ldr	r2, [pc, #368]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c66:	e01e      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c68:	4b58      	ldr	r3, [pc, #352]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c74:	d106      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c7c:	d102      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c7e:	4b55      	ldr	r3, [pc, #340]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c82:	e010      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c84:	4b51      	ldr	r3, [pc, #324]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c90:	d106      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c98:	d102      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c9e:	e002      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ca4:	e235      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ca6:	e234      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cac:	e231      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb2:	e22e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	f040 808f 	bne.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008cc2:	4b42      	ldr	r3, [pc, #264]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008cca:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cd2:	d06b      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cda:	d874      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ce2:	d056      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008cea:	d86c      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cf2:	d03b      	beq.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cfa:	d864      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d02:	d021      	beq.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d0a:	d85c      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d18:	d004      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008d1a:	e054      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d1c:	f7fe fa4c 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8008d20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d22:	e1f6      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d24:	4b29      	ldr	r3, [pc, #164]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d30:	d107      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d32:	f107 0318 	add.w	r3, r7, #24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fa0a 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d40:	e1e7      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d46:	e1e4      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d48:	4b20      	ldr	r3, [pc, #128]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d54:	d107      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d56:	f107 030c 	add.w	r3, r7, #12
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fb4c 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d64:	e1d5      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6a:	e1d2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d6c:	4b17      	ldr	r3, [pc, #92]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d109      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d78:	4b14      	ldr	r3, [pc, #80]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	08db      	lsrs	r3, r3, #3
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	4a13      	ldr	r2, [pc, #76]	@ (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	e1c2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e1bf      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d92:	4b0e      	ldr	r3, [pc, #56]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9e:	d102      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008da0:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da4:	e1b5      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008daa:	e1b2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008dac:	4b07      	ldr	r3, [pc, #28]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db8:	d102      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dbe:	e1a8      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	e1a5      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dca:	e1a2      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	017d7840 	.word	0x017d7840
 8008ddc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008de8:	430b      	orrs	r3, r1
 8008dea:	d173      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008dec:	4b9c      	ldr	r3, [pc, #624]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008df4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dfc:	d02f      	beq.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e04:	d863      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e12:	d012      	beq.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008e14:	e05b      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e16:	4b92      	ldr	r3, [pc, #584]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e22:	d107      	bne.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e24:	f107 0318 	add.w	r3, r7, #24
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f991 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e32:	e16e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e38:	e16b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e3a:	4b89      	ldr	r3, [pc, #548]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e46:	d107      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e48:	f107 030c 	add.w	r3, r7, #12
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fad3 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e56:	e15c      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5c:	e159      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e5e:	4b80      	ldr	r3, [pc, #512]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e68:	4b7d      	ldr	r3, [pc, #500]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d10c      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e7a:	4b79      	ldr	r3, [pc, #484]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	08db      	lsrs	r3, r3, #3
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	4a77      	ldr	r2, [pc, #476]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e86:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e8c:	e01e      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e8e:	4b74      	ldr	r3, [pc, #464]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9a:	d106      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ea4:	4b70      	ldr	r3, [pc, #448]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea8:	e010      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb6:	d106      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ebe:	d102      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec4:	e002      	b.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008eca:	e122      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ecc:	e121      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed2:	e11e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008edc:	430b      	orrs	r3, r1
 8008ede:	d133      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ee8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef6:	d012      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008ef8:	e023      	b.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008efa:	4b59      	ldr	r3, [pc, #356]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fbc7 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f16:	e0fc      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e0f9      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f1e:	4b50      	ldr	r3, [pc, #320]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2c:	f107 0318 	add.w	r3, r7, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f90d 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3a:	e0ea      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f40:	e0e7      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f46:	e0e4      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008f50:	430b      	orrs	r3, r1
 8008f52:	f040 808d 	bne.w	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008f56:	4b42      	ldr	r3, [pc, #264]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008f5e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f66:	d06b      	beq.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f6e:	d874      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f76:	d056      	beq.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f7e:	d86c      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f86:	d03b      	beq.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f8e:	d864      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f96:	d021      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f9e:	d85c      	bhi.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fac:	d004      	beq.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008fae:	e054      	b.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008fb0:	f000 f8b8 	bl	8009124 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb6:	e0ac      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fb8:	4b29      	ldr	r3, [pc, #164]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc6:	f107 0318 	add.w	r3, r7, #24
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f8c0 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd4:	e09d      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fda:	e09a      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fdc:	4b20      	ldr	r3, [pc, #128]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fa02 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff8:	e08b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffe:	e088      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009000:	4b17      	ldr	r3, [pc, #92]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d109      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800900c:	4b14      	ldr	r3, [pc, #80]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	08db      	lsrs	r3, r3, #3
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	4a13      	ldr	r2, [pc, #76]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009018:	fa22 f303 	lsr.w	r3, r2, r3
 800901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800901e:	e078      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009024:	e075      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009026:	4b0e      	ldr	r3, [pc, #56]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800902e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009032:	d102      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009034:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009038:	e06b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903e:	e068      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009040:	4b07      	ldr	r3, [pc, #28]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904c:	d102      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800904e:	4b07      	ldr	r3, [pc, #28]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009052:	e05e      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009058:	e05b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905e:	e058      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009060:	58024400 	.word	0x58024400
 8009064:	03d09000 	.word	0x03d09000
 8009068:	003d0900 	.word	0x003d0900
 800906c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009078:	430b      	orrs	r3, r1
 800907a:	d148      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800907c:	4b27      	ldr	r3, [pc, #156]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800907e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009080:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009084:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800908c:	d02a      	beq.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009094:	d838      	bhi.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090a2:	d00d      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80090a4:	e030      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090a6:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b2:	d102      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80090b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b8:	e02b      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090be:	e028      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090c0:	4b16      	ldr	r3, [pc, #88]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090cc:	d107      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fae4 	bl	80096a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090dc:	e019      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e2:	e016      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090e4:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090f0:	d107      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f2:	f107 0318 	add.w	r3, r7, #24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f82a 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009100:	e007      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009106:	e004      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009114:	4618      	mov	r0, r3
 8009116:	3740      	adds	r7, #64	@ 0x40
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	58024400 	.word	0x58024400
 8009120:	017d7840 	.word	0x017d7840

08009124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009128:	f7fe f816 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 800912c:	4602      	mov	r2, r0
 800912e:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	091b      	lsrs	r3, r3, #4
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	4904      	ldr	r1, [pc, #16]	@ (800914c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800913a:	5ccb      	ldrb	r3, [r1, r3]
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58024400 	.word	0x58024400
 800914c:	08011ae0 	.word	0x08011ae0

08009150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009150:	b480      	push	{r7}
 8009152:	b089      	sub	sp, #36	@ 0x24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009158:	4ba1      	ldr	r3, [pc, #644]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009162:	4b9f      	ldr	r3, [pc, #636]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009166:	0b1b      	lsrs	r3, r3, #12
 8009168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800916c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800916e:	4b9c      	ldr	r3, [pc, #624]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800917a:	4b99      	ldr	r3, [pc, #612]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	fb02 f303 	mul.w	r3, r2, r3
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8111 	beq.w	80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	f000 8083 	beq.w	80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	f200 80a1 	bhi.w	80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d056      	beq.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091ba:	e099      	b.n	80092f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091bc:	4b88      	ldr	r3, [pc, #544]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02d      	beq.n	8009224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091c8:	4b85      	ldr	r3, [pc, #532]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	08db      	lsrs	r3, r3, #3
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	4a84      	ldr	r2, [pc, #528]	@ (80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b7b      	ldr	r3, [pc, #492]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a03 	vldr	s12, [r7, #12]
 8009206:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009222:	e087      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80093ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b6a      	ldr	r3, [pc, #424]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a03 	vldr	s12, [r7, #12]
 800924a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009266:	e065      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927a:	4b59      	ldr	r3, [pc, #356]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928a:	ed97 6a03 	vldr	s12, [r7, #12]
 800928e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800929e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092aa:	e043      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092be:	4b48      	ldr	r3, [pc, #288]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80092d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092ee:	e021      	b.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009302:	4b37      	ldr	r3, [pc, #220]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	ed97 6a03 	vldr	s12, [r7, #12]
 8009316:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800931a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009334:	4b2a      	ldr	r3, [pc, #168]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009338:	0a5b      	lsrs	r3, r3, #9
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800934a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800935a:	ee17 2a90 	vmov	r2, s15
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009362:	4b1f      	ldr	r3, [pc, #124]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	0c1b      	lsrs	r3, r3, #16
 8009368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800937c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009388:	ee17 2a90 	vmov	r2, s15
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009390:	4b13      	ldr	r3, [pc, #76]	@ (80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009394:	0e1b      	lsrs	r3, r3, #24
 8009396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b6:	ee17 2a90 	vmov	r2, s15
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093be:	e008      	b.n	80093d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	609a      	str	r2, [r3, #8]
}
 80093d2:	bf00      	nop
 80093d4:	3724      	adds	r7, #36	@ 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
 80093e4:	03d09000 	.word	0x03d09000
 80093e8:	46000000 	.word	0x46000000
 80093ec:	4c742400 	.word	0x4c742400
 80093f0:	4a742400 	.word	0x4a742400
 80093f4:	4bbebc20 	.word	0x4bbebc20

080093f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	@ 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009400:	4ba1      	ldr	r3, [pc, #644]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800940a:	4b9f      	ldr	r3, [pc, #636]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940e:	0d1b      	lsrs	r3, r3, #20
 8009410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009416:	4b9c      	ldr	r3, [pc, #624]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009422:	4b99      	ldr	r3, [pc, #612]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009426:	08db      	lsrs	r3, r3, #3
 8009428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8111 	beq.w	8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b02      	cmp	r3, #2
 800944a:	f000 8083 	beq.w	8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b02      	cmp	r3, #2
 8009452:	f200 80a1 	bhi.w	8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d056      	beq.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009462:	e099      	b.n	8009598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009464:	4b88      	ldr	r3, [pc, #544]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02d      	beq.n	80094cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009470:	4b85      	ldr	r3, [pc, #532]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a84      	ldr	r2, [pc, #528]	@ (800968c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949a:	4b7b      	ldr	r3, [pc, #492]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094ca:	e087      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80094da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094de:	4b6a      	ldr	r3, [pc, #424]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800950e:	e065      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800951e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009522:	4b59      	ldr	r3, [pc, #356]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009532:	ed97 6a03 	vldr	s12, [r7, #12]
 8009536:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800953a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800954a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009552:	e043      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800969c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009566:	4b48      	ldr	r3, [pc, #288]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009576:	ed97 6a03 	vldr	s12, [r7, #12]
 800957a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800957e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800958a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009596:	e021      	b.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095aa:	4b37      	ldr	r3, [pc, #220]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80095be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80095dc:	4b2a      	ldr	r3, [pc, #168]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	0a5b      	lsrs	r3, r3, #9
 80095e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009602:	ee17 2a90 	vmov	r2, s15
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800960a:	4b1f      	ldr	r3, [pc, #124]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	0c1b      	lsrs	r3, r3, #16
 8009610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009624:	edd7 6a07 	vldr	s13, [r7, #28]
 8009628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800962c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009630:	ee17 2a90 	vmov	r2, s15
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009638:	4b13      	ldr	r3, [pc, #76]	@ (8009688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	0e1b      	lsrs	r3, r3, #24
 800963e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800964e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009652:	edd7 6a07 	vldr	s13, [r7, #28]
 8009656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800965a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800965e:	ee17 2a90 	vmov	r2, s15
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009666:	e008      	b.n	800967a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	609a      	str	r2, [r3, #8]
}
 800967a:	bf00      	nop
 800967c:	3724      	adds	r7, #36	@ 0x24
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	58024400 	.word	0x58024400
 800968c:	03d09000 	.word	0x03d09000
 8009690:	46000000 	.word	0x46000000
 8009694:	4c742400 	.word	0x4c742400
 8009698:	4a742400 	.word	0x4a742400
 800969c:	4bbebc20 	.word	0x4bbebc20

080096a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b089      	sub	sp, #36	@ 0x24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096a8:	4ba0      	ldr	r3, [pc, #640]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80096b2:	4b9e      	ldr	r3, [pc, #632]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b6:	091b      	lsrs	r3, r3, #4
 80096b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096be:	4b9b      	ldr	r3, [pc, #620]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80096c8:	4b98      	ldr	r3, [pc, #608]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096cc:	08db      	lsrs	r3, r3, #3
 80096ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	fb02 f303 	mul.w	r3, r2, r3
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8111 	beq.w	800990e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	f000 8083 	beq.w	80097fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	f200 80a1 	bhi.w	800983e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d056      	beq.n	80097b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009708:	e099      	b.n	800983e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800970a:	4b88      	ldr	r3, [pc, #544]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	d02d      	beq.n	8009772 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009716:	4b85      	ldr	r3, [pc, #532]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	08db      	lsrs	r3, r3, #3
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	4a83      	ldr	r2, [pc, #524]	@ (8009930 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009722:	fa22 f303 	lsr.w	r3, r2, r3
 8009726:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	ee07 3a90 	vmov	s15, r3
 8009738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009740:	4b7a      	ldr	r3, [pc, #488]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009750:	ed97 6a03 	vldr	s12, [r7, #12]
 8009754:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009934 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009770:	e087      	b.n	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009938 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009784:	4b69      	ldr	r3, [pc, #420]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009794:	ed97 6a03 	vldr	s12, [r7, #12]
 8009798:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009934 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800979c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b4:	e065      	b.n	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800993c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80097c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c8:	4b58      	ldr	r3, [pc, #352]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80097dc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009934 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f8:	e043      	b.n	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009804:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009940 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980c:	4b47      	ldr	r3, [pc, #284]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009820:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009934 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800983c:	e021      	b.n	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	ee07 3a90 	vmov	s15, r3
 8009844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009848:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009938 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800984c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009850:	4b36      	ldr	r3, [pc, #216]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009860:	ed97 6a03 	vldr	s12, [r7, #12]
 8009864:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009934 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009880:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009882:	4b2a      	ldr	r3, [pc, #168]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009886:	0a5b      	lsrs	r3, r3, #9
 8009888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800989c:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a8:	ee17 2a90 	vmov	r2, s15
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80098b0:	4b1e      	ldr	r3, [pc, #120]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b4:	0c1b      	lsrs	r3, r3, #16
 80098b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d6:	ee17 2a90 	vmov	r2, s15
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80098de:	4b13      	ldr	r3, [pc, #76]	@ (800992c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e2:	0e1b      	lsrs	r3, r3, #24
 80098e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80098fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009904:	ee17 2a90 	vmov	r2, s15
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800990c:	e008      	b.n	8009920 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	609a      	str	r2, [r3, #8]
}
 8009920:	bf00      	nop
 8009922:	3724      	adds	r7, #36	@ 0x24
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	58024400 	.word	0x58024400
 8009930:	03d09000 	.word	0x03d09000
 8009934:	46000000 	.word	0x46000000
 8009938:	4c742400 	.word	0x4c742400
 800993c:	4a742400 	.word	0x4a742400
 8009940:	4bbebc20 	.word	0x4bbebc20

08009944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009952:	4b53      	ldr	r3, [pc, #332]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d101      	bne.n	8009962 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e099      	b.n	8009a96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009962:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a4e      	ldr	r2, [pc, #312]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009968:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800996c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800996e:	f7fa fbe3 	bl	8004138 <HAL_GetTick>
 8009972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009974:	e008      	b.n	8009988 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009976:	f7fa fbdf 	bl	8004138 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d901      	bls.n	8009988 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e086      	b.n	8009a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009988:	4b45      	ldr	r3, [pc, #276]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1f0      	bne.n	8009976 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009994:	4b42      	ldr	r3, [pc, #264]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	031b      	lsls	r3, r3, #12
 80099a2:	493f      	ldr	r1, [pc, #252]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	025b      	lsls	r3, r3, #9
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	061b      	lsls	r3, r3, #24
 80099d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099d8:	4931      	ldr	r1, [pc, #196]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099de:	4b30      	ldr	r3, [pc, #192]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	492d      	ldr	r1, [pc, #180]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099f0:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f4:	f023 0220 	bic.w	r2, r3, #32
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	4928      	ldr	r1, [pc, #160]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a02:	4b27      	ldr	r3, [pc, #156]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	4a26      	ldr	r2, [pc, #152]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a08:	f023 0310 	bic.w	r3, r3, #16
 8009a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a0e:	4b24      	ldr	r3, [pc, #144]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a12:	4b24      	ldr	r3, [pc, #144]	@ (8009aa4 <RCCEx_PLL2_Config+0x160>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	69d2      	ldr	r2, [r2, #28]
 8009a1a:	00d2      	lsls	r2, r2, #3
 8009a1c:	4920      	ldr	r1, [pc, #128]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a22:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	f043 0310 	orr.w	r3, r3, #16
 8009a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a34:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a38:	4a19      	ldr	r2, [pc, #100]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a40:	e00f      	b.n	8009a62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d106      	bne.n	8009a56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a48:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	4a14      	ldr	r2, [pc, #80]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a54:	e005      	b.n	8009a62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a56:	4b12      	ldr	r3, [pc, #72]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	4a11      	ldr	r2, [pc, #68]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a62:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a0e      	ldr	r2, [pc, #56]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a6e:	f7fa fb63 	bl	8004138 <HAL_GetTick>
 8009a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a74:	e008      	b.n	8009a88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a76:	f7fa fb5f 	bl	8004138 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e006      	b.n	8009a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a88:	4b05      	ldr	r3, [pc, #20]	@ (8009aa0 <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0f0      	beq.n	8009a76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	ffff0007 	.word	0xffff0007

08009aa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ab6:	4b53      	ldr	r3, [pc, #332]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d101      	bne.n	8009ac6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e099      	b.n	8009bfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ac6:	4b4f      	ldr	r3, [pc, #316]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a4e      	ldr	r2, [pc, #312]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad2:	f7fa fb31 	bl	8004138 <HAL_GetTick>
 8009ad6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ad8:	e008      	b.n	8009aec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ada:	f7fa fb2d 	bl	8004138 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d901      	bls.n	8009aec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e086      	b.n	8009bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009aec:	4b45      	ldr	r3, [pc, #276]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1f0      	bne.n	8009ada <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009af8:	4b42      	ldr	r3, [pc, #264]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	051b      	lsls	r3, r3, #20
 8009b06:	493f      	ldr	r1, [pc, #252]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	025b      	lsls	r3, r3, #9
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b3c:	4931      	ldr	r1, [pc, #196]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b42:	4b30      	ldr	r3, [pc, #192]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	492d      	ldr	r1, [pc, #180]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b54:	4b2b      	ldr	r3, [pc, #172]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	4928      	ldr	r1, [pc, #160]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b66:	4b27      	ldr	r3, [pc, #156]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6a:	4a26      	ldr	r2, [pc, #152]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b72:	4b24      	ldr	r3, [pc, #144]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b76:	4b24      	ldr	r3, [pc, #144]	@ (8009c08 <RCCEx_PLL3_Config+0x160>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	69d2      	ldr	r2, [r2, #28]
 8009b7e:	00d2      	lsls	r2, r2, #3
 8009b80:	4920      	ldr	r1, [pc, #128]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b86:	4b1f      	ldr	r3, [pc, #124]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d106      	bne.n	8009ba6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b98:	4b1a      	ldr	r3, [pc, #104]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	4a19      	ldr	r2, [pc, #100]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009b9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ba4:	e00f      	b.n	8009bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d106      	bne.n	8009bba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bac:	4b15      	ldr	r3, [pc, #84]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb0:	4a14      	ldr	r2, [pc, #80]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bb8:	e005      	b.n	8009bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bba:	4b12      	ldr	r3, [pc, #72]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a0e      	ldr	r2, [pc, #56]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bd2:	f7fa fab1 	bl	8004138 <HAL_GetTick>
 8009bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bd8:	e008      	b.n	8009bec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bda:	f7fa faad 	bl	8004138 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e006      	b.n	8009bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0f0      	beq.n	8009bda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	58024400 	.word	0x58024400
 8009c08:	ffff0007 	.word	0xffff0007

08009c0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	@ 0x28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e075      	b.n	8009d0a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7f9 fc3b 	bl	80034ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2204      	movs	r2, #4
 8009c3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f868 	bl	8009d14 <HAL_SD_InitCard>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e05d      	b.n	8009d0a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fdaf 	bl	800a7b8 <HAL_SD_GetCardStatus>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e052      	b.n	8009d0a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009c64:	7e3b      	ldrb	r3, [r7, #24]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009c6a:	7e7b      	ldrb	r3, [r7, #25]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d10a      	bne.n	8009c8e <HAL_SD_Init+0x82>
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <HAL_SD_Init+0x78>
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8009c8c:	e00b      	b.n	8009ca6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d104      	bne.n	8009ca0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009c9e:	e002      	b.n	8009ca6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fe6d 	bl	800a98c <HAL_SD_ConfigWideBusOperation>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e026      	b.n	8009d0a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009cbc:	f7fa fa3c 	bl	8004138 <HAL_GetTick>
 8009cc0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009cc2:	e011      	b.n	8009ce8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cc4:	f7fa fa38 	bl	8004138 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d109      	bne.n	8009ce8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cda:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e010      	b.n	8009d0a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 ff61 	bl	800abb0 <HAL_SD_GetCardState>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d1e7      	bne.n	8009cc4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3728      	adds	r7, #40	@ 0x28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b08d      	sub	sp, #52	@ 0x34
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009d2c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	f7fe fc76 	bl	8008624 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d38:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d109      	bne.n	8009d54 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009d4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e070      	b.n	8009e36 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	4a39      	ldr	r2, [pc, #228]	@ (8009e40 <HAL_SD_InitCard+0x12c>)
 8009d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5e:	091b      	lsrs	r3, r3, #4
 8009d60:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681c      	ldr	r4, [r3, #0]
 8009d66:	466a      	mov	r2, sp
 8009d68:	f107 0318 	add.w	r3, r7, #24
 8009d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d70:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f003 f916 	bl	800cfac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 f959 	bl	800d03c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009da2:	4a28      	ldr	r2, [pc, #160]	@ (8009e44 <HAL_SD_InitCard+0x130>)
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	3301      	adds	r3, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fa f9cf 	bl	8004150 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 ffea 	bl	800ad8c <SD_PowerON>
 8009db8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e02e      	b.n	8009e36 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 ff09 	bl	800abf0 <SD_InitCard>
 8009dde:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e01b      	b.n	8009e36 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e06:	4618      	mov	r0, r3
 8009e08:	f003 f9ae 	bl	800d168 <SDMMC_CmdBlockLength>
 8009e0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00f      	beq.n	8009e34 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a0b      	ldr	r2, [pc, #44]	@ (8009e48 <HAL_SD_InitCard+0x134>)
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e000      	b.n	8009e36 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	372c      	adds	r7, #44	@ 0x2c
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	014f8b59 	.word	0x014f8b59
 8009e44:	00012110 	.word	0x00012110
 8009e48:	1fe00fff 	.word	0x1fe00fff

08009e4c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08c      	sub	sp, #48	@ 0x30
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d107      	bne.n	8009e74 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e08d      	b.n	8009f90 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	f040 8086 	bne.w	8009f8e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	441a      	add	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d907      	bls.n	8009ea6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e074      	b.n	8009f90 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2203      	movs	r2, #3
 8009eaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	025a      	lsls	r2, r3, #9
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d002      	beq.n	8009ed2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	025b      	lsls	r3, r3, #9
 8009ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	025b      	lsls	r3, r3, #9
 8009edc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ede:	2390      	movs	r3, #144	@ 0x90
 8009ee0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f107 0210 	add.w	r2, r7, #16
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f003 f909 	bl	800d110 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f0c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d90a      	bls.n	8009f3a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2282      	movs	r2, #130	@ 0x82
 8009f28:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f30:	4618      	mov	r0, r3
 8009f32:	f003 f95f 	bl	800d1f4 <SDMMC_CmdReadMultiBlock>
 8009f36:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f38:	e009      	b.n	8009f4e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2281      	movs	r2, #129	@ 0x81
 8009f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f46:	4618      	mov	r0, r3
 8009f48:	f003 f931 	bl	800d1ae <SDMMC_CmdReadSingleBlock>
 8009f4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d012      	beq.n	8009f7a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a0f      	ldr	r2, [pc, #60]	@ (8009f98 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009f5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e00a      	b.n	8009f90 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009f88:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e000      	b.n	8009f90 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
  }
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3730      	adds	r7, #48	@ 0x30
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	1fe00fff 	.word	0x1fe00fff

08009f9c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08c      	sub	sp, #48	@ 0x30
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d107      	bne.n	8009fc4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e08d      	b.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f040 8086 	bne.w	800a0de <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	441a      	add	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d907      	bls.n	8009ff6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e074      	b.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	025a      	lsls	r2, r3, #9
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d002      	beq.n	800a022 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01e:	025b      	lsls	r3, r3, #9
 800a020:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
 800a026:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	025b      	lsls	r3, r3, #9
 800a02c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a02e:	2390      	movs	r3, #144	@ 0x90
 800a030:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a032:	2300      	movs	r3, #0
 800a034:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a036:	2300      	movs	r3, #0
 800a038:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f107 0210 	add.w	r2, r7, #16
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f003 f861 	bl	800d110 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a05c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2201      	movs	r2, #1
 800a06c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d90a      	bls.n	800a08a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	22a0      	movs	r2, #160	@ 0xa0
 800a078:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a080:	4618      	mov	r0, r3
 800a082:	f003 f8fd 	bl	800d280 <SDMMC_CmdWriteMultiBlock>
 800a086:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a088:	e009      	b.n	800a09e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2290      	movs	r2, #144	@ 0x90
 800a08e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a096:	4618      	mov	r0, r3
 800a098:	f003 f8cf 	bl	800d23a <SDMMC_CmdWriteSingleBlock>
 800a09c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d012      	beq.n	800a0ca <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a0aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e00a      	b.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800a0d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e000      	b.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a0de:	2302      	movs	r3, #2
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3730      	adds	r7, #48	@ 0x30
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	1fe00fff 	.word	0x1fe00fff

0800a0ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d008      	beq.n	800a11a <HAL_SD_IRQHandler+0x2e>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 f926 	bl	800b364 <SD_Read_IT>
 800a118:	e19a      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80ac 	beq.w	800a282 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a132:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	4b59      	ldr	r3, [pc, #356]	@ (800a2a4 <HAL_SD_IRQHandler+0x1b8>)
 800a140:	400b      	ands	r3, r1
 800a142:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a152:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a162:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f003 0308 	and.w	r3, r3, #8
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d038      	beq.n	800a1e0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d104      	bne.n	800a182 <HAL_SD_IRQHandler+0x96>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f003 0320 	and.w	r3, r3, #32
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4618      	mov	r0, r3
 800a188:	f003 f89e 	bl	800d2c8 <SDMMC_CmdStopTransfer>
 800a18c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d008      	beq.n	800a1a6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f95b 	bl	800a45c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a3f      	ldr	r2, [pc, #252]	@ (800a2a8 <HAL_SD_IRQHandler+0x1bc>)
 800a1ac:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d104      	bne.n	800a1d0 <HAL_SD_IRQHandler+0xe4>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f003 fd2b 	bl	800dc2c <HAL_SD_RxCpltCallback>
 800a1d6:	e13b      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f003 fd1d 	bl	800dc18 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1de:	e137      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 8132 	beq.w	800a450 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2200      	movs	r2, #0
 800a202:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d104      	bne.n	800a218 <HAL_SD_IRQHandler+0x12c>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f003 0320 	and.w	r3, r3, #32
 800a214:	2b00      	cmp	r3, #0
 800a216:	d011      	beq.n	800a23c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f003 f853 	bl	800d2c8 <SDMMC_CmdStopTransfer>
 800a222:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d008      	beq.n	800a23c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f910 	bl	800a45c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <HAL_SD_IRQHandler+0x172>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f003 fcda 	bl	800dc18 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <HAL_SD_IRQHandler+0x18e>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80eb 	beq.w	800a450 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f003 fcd6 	bl	800dc2c <HAL_SD_RxCpltCallback>
}
 800a280:	e0e6      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00d      	beq.n	800a2ac <HAL_SD_IRQHandler+0x1c0>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f003 0308 	and.w	r3, r3, #8
 800a296:	2b00      	cmp	r3, #0
 800a298:	d008      	beq.n	800a2ac <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 f8a8 	bl	800b3f0 <SD_Write_IT>
 800a2a0:	e0d6      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
 800a2a2:	bf00      	nop
 800a2a4:	ffff3ec5 	.word	0xffff3ec5
 800a2a8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 809d 	beq.w	800a3f6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ce:	f043 0202 	orr.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2dc:	f003 0308 	and.w	r3, r3, #8
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e8:	f043 0208 	orr.w	r2, r3, #8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f6:	f003 0320 	and.w	r3, r3, #32
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d005      	beq.n	800a30a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a302:	f043 0220 	orr.w	r2, r3, #32
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31c:	f043 0210 	orr.w	r2, r3, #16
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a4b      	ldr	r2, [pc, #300]	@ (800a458 <HAL_SD_IRQHandler+0x36c>)
 800a32a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a33a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a34a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a35a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a36a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f002 ffa9 	bl	800d2c8 <SDMMC_CmdStopTransfer>
 800a376:	4602      	mov	r2, r0
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a390:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a39a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0308 	and.w	r3, r3, #8
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f851 	bl	800a45c <HAL_SD_ErrorCallback>
}
 800a3ba:	e049      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d044      	beq.n	800a450 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d040      	beq.n	800a450 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a3dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f834 	bl	800a45c <HAL_SD_ErrorCallback>
}
 800a3f4:	e02c      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d025      	beq.n	800a450 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10c      	bne.n	800a436 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 f84a 	bl	800b4c0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a42c:	e010      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 f832 	bl	800b498 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a434:	e00c      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f003 0320 	and.w	r3, r3, #32
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 f833 	bl	800b4ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a446:	e003      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f001 f81b 	bl	800b484 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a44e:	e7ff      	b.n	800a450 <HAL_SD_IRQHandler+0x364>
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	18000f3a 	.word	0x18000f3a

0800a45c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a47e:	0f9b      	lsrs	r3, r3, #30
 800a480:	b2da      	uxtb	r2, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a48a:	0e9b      	lsrs	r3, r3, #26
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	f003 030f 	and.w	r3, r3, #15
 800a492:	b2da      	uxtb	r2, r3
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a49c:	0e1b      	lsrs	r3, r3, #24
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ae:	0c1b      	lsrs	r3, r3, #16
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4d0:	0d1b      	lsrs	r3, r3, #20
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4dc:	0c1b      	lsrs	r3, r3, #16
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f003 030f 	and.w	r3, r3, #15
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ee:	0bdb      	lsrs	r3, r3, #15
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a500:	0b9b      	lsrs	r3, r3, #14
 800a502:	b2db      	uxtb	r3, r3
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a512:	0b5b      	lsrs	r3, r3, #13
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a524:	0b1b      	lsrs	r3, r3, #12
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2200      	movs	r2, #0
 800a536:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d163      	bne.n	800a608 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a544:	009a      	lsls	r2, r3, #2
 800a546:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a54a:	4013      	ands	r3, r2
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a550:	0f92      	lsrs	r2, r2, #30
 800a552:	431a      	orrs	r2, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a55c:	0edb      	lsrs	r3, r3, #27
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	b2da      	uxtb	r2, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56e:	0e1b      	lsrs	r3, r3, #24
 800a570:	b2db      	uxtb	r3, r3
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	b2da      	uxtb	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a580:	0d5b      	lsrs	r3, r3, #21
 800a582:	b2db      	uxtb	r3, r3
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a592:	0c9b      	lsrs	r3, r3, #18
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a4:	0bdb      	lsrs	r3, r3, #15
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	7e1b      	ldrb	r3, [r3, #24]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a5d2:	fb03 f202 	mul.w	r2, r3, r2
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	7a1b      	ldrb	r3, [r3, #8]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	f003 030f 	and.w	r3, r3, #15
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	409a      	lsls	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a5f4:	0a52      	lsrs	r2, r2, #9
 800a5f6:	fb03 f202 	mul.w	r2, r3, r2
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a604:	655a      	str	r2, [r3, #84]	@ 0x54
 800a606:	e031      	b.n	800a66c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d11d      	bne.n	800a64c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a614:	041b      	lsls	r3, r3, #16
 800a616:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61e:	0c1b      	lsrs	r3, r3, #16
 800a620:	431a      	orrs	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	3301      	adds	r3, #1
 800a62c:	029a      	lsls	r2, r3, #10
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a640:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	655a      	str	r2, [r3, #84]	@ 0x54
 800a64a:	e00f      	b.n	800a66c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a58      	ldr	r2, [pc, #352]	@ (800a7b4 <HAL_SD_GetCardCSD+0x344>)
 800a652:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a658:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e09d      	b.n	800a7a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a670:	0b9b      	lsrs	r3, r3, #14
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a682:	09db      	lsrs	r3, r3, #7
 800a684:	b2db      	uxtb	r3, r3
 800a686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6a4:	0fdb      	lsrs	r3, r3, #31
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6b0:	0f5b      	lsrs	r3, r3, #29
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6c2:	0e9b      	lsrs	r3, r3, #26
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6d4:	0d9b      	lsrs	r3, r3, #22
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 030f 	and.w	r3, r3, #15
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e6:	0d5b      	lsrs	r3, r3, #21
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a716:	0bdb      	lsrs	r3, r3, #15
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a72a:	0b9b      	lsrs	r3, r3, #14
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	b2da      	uxtb	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a73e:	0b5b      	lsrs	r3, r3, #13
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	b2da      	uxtb	r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a752:	0b1b      	lsrs	r3, r3, #12
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a766:	0a9b      	lsrs	r3, r3, #10
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a796:	b2da      	uxtb	r2, r3
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	1fe00fff 	.word	0x1fe00fff

0800a7b8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b094      	sub	sp, #80	@ 0x50
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d101      	bne.n	800a7d8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e0a7      	b.n	800a928 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fb62 	bl	800aea8 <SD_SendSDStatus>
 800a7e4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d011      	beq.n	800a810 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a4f      	ldr	r2, [pc, #316]	@ (800a930 <HAL_SD_GetCardStatus+0x178>)
 800a7f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a80e:	e070      	b.n	800a8f2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	099b      	lsrs	r3, r3, #6
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	095b      	lsrs	r3, r3, #5
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	b29b      	uxth	r3, r3
 800a836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	0e1b      	lsrs	r3, r3, #24
 800a840:	b29b      	uxth	r3, r3
 800a842:	4313      	orrs	r3, r2
 800a844:	b29a      	uxth	r2, r3
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	061a      	lsls	r2, r3, #24
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a856:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a860:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	0e1b      	lsrs	r3, r3, #24
 800a866:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	0a1b      	lsrs	r3, r3, #8
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	0d1b      	lsrs	r3, r3, #20
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	0c1b      	lsrs	r3, r3, #16
 800a892:	b29b      	uxth	r3, r3
 800a894:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a898:	b29a      	uxth	r2, r3
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	0a9b      	lsrs	r3, r3, #10
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	0a1b      	lsrs	r3, r3, #8
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	091b      	lsrs	r3, r3, #4
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f003 030f 	and.w	r3, r3, #15
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	0e1b      	lsrs	r3, r3, #24
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f002 fc34 	bl	800d168 <SDMMC_CmdBlockLength>
 800a900:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00d      	beq.n	800a924 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a08      	ldr	r2, [pc, #32]	@ (800a930 <HAL_SD_GetCardStatus+0x178>)
 800a90e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a914:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800a924:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3750      	adds	r7, #80	@ 0x50
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	1fe00fff 	.word	0x1fe00fff

0800a934 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a98c:	b590      	push	{r4, r7, lr}
 800a98e:	b08d      	sub	sp, #52	@ 0x34
 800a990:	af02      	add	r7, sp, #8
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2203      	movs	r2, #3
 800a9a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d02e      	beq.n	800aa0a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9b2:	d106      	bne.n	800a9c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9c0:	e029      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9c8:	d10a      	bne.n	800a9e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fb64 	bl	800b098 <SD_WideBus_Enable>
 800a9d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9de:	e01a      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10a      	bne.n	800a9fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fba1 	bl	800b12e <SD_WideBus_Disable>
 800a9ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9fa:	e00c      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa08:	e005      	b.n	800aa16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d007      	beq.n	800aa2e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a5f      	ldr	r2, [pc, #380]	@ (800aba0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa24:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa2c:	e096      	b.n	800ab5c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aa2e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800aa32:	f04f 0100 	mov.w	r1, #0
 800aa36:	f7fd fdf5 	bl	8008624 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa3a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8083 	beq.w	800ab4a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695a      	ldr	r2, [r3, #20]
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	4950      	ldr	r1, [pc, #320]	@ (800aba4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aa62:	fba1 1303 	umull	r1, r3, r1, r3
 800aa66:	0e1b      	lsrs	r3, r3, #24
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d303      	bcc.n	800aa74 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	61bb      	str	r3, [r7, #24]
 800aa72:	e05a      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa7c:	d103      	bne.n	800aa86 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	61bb      	str	r3, [r7, #24]
 800aa84:	e051      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa8e:	d126      	bne.n	800aade <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10e      	bne.n	800aab6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	4a43      	ldr	r2, [pc, #268]	@ (800aba8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d906      	bls.n	800aaae <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	4a40      	ldr	r2, [pc, #256]	@ (800aba4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaa4:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa8:	0e5b      	lsrs	r3, r3, #25
 800aaaa:	61bb      	str	r3, [r7, #24]
 800aaac:	e03d      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	61bb      	str	r3, [r7, #24]
 800aab4:	e039      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	69fa      	ldr	r2, [r7, #28]
 800aabe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac2:	4a39      	ldr	r2, [pc, #228]	@ (800aba8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d906      	bls.n	800aad6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	4a36      	ldr	r2, [pc, #216]	@ (800aba4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aacc:	fba2 2303 	umull	r2, r3, r2, r3
 800aad0:	0e5b      	lsrs	r3, r3, #25
 800aad2:	61bb      	str	r3, [r7, #24]
 800aad4:	e029      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	61bb      	str	r3, [r7, #24]
 800aadc:	e025      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10e      	bne.n	800ab04 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	4a30      	ldr	r2, [pc, #192]	@ (800abac <HAL_SD_ConfigWideBusOperation+0x220>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d906      	bls.n	800aafc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	4a2c      	ldr	r2, [pc, #176]	@ (800aba4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf6:	0e1b      	lsrs	r3, r3, #24
 800aaf8:	61bb      	str	r3, [r7, #24]
 800aafa:	e016      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	61bb      	str	r3, [r7, #24]
 800ab02:	e012      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	69fa      	ldr	r2, [r7, #28]
 800ab0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab10:	4a26      	ldr	r2, [pc, #152]	@ (800abac <HAL_SD_ConfigWideBusOperation+0x220>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d906      	bls.n	800ab24 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4a22      	ldr	r2, [pc, #136]	@ (800aba4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1e:	0e1b      	lsrs	r3, r3, #24
 800ab20:	61bb      	str	r3, [r7, #24]
 800ab22:	e002      	b.n	800ab2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681c      	ldr	r4, [r3, #0]
 800ab2e:	466a      	mov	r2, sp
 800ab30:	f107 0314 	add.w	r3, r7, #20
 800ab34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab38:	e882 0003 	stmia.w	r2, {r0, r1}
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab42:	4620      	mov	r0, r4
 800ab44:	f002 fa32 	bl	800cfac <SDMMC_Init>
 800ab48:	e008      	b.n	800ab5c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 faff 	bl	800d168 <SDMMC_CmdBlockLength>
 800ab6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00c      	beq.n	800ab8c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a0a      	ldr	r2, [pc, #40]	@ (800aba0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800ab94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	372c      	adds	r7, #44	@ 0x2c
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}
 800aba0:	1fe00fff 	.word	0x1fe00fff
 800aba4:	55e63b89 	.word	0x55e63b89
 800aba8:	02faf080 	.word	0x02faf080
 800abac:	017d7840 	.word	0x017d7840

0800abb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa40 	bl	800b048 <SD_SendStatus>
 800abc8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	431a      	orrs	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	0a5b      	lsrs	r3, r3, #9
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800abe6:	693b      	ldr	r3, [r7, #16]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b090      	sub	sp, #64	@ 0x40
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800abfc:	f7f9 fa9c 	bl	8004138 <HAL_GetTick>
 800ac00:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f002 fa29 	bl	800d05e <SDMMC_GetPowerState>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d102      	bne.n	800ac18 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ac16:	e0b5      	b.n	800ad84 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d02e      	beq.n	800ac7e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f002 fc74 	bl	800d512 <SDMMC_CmdSendCID>
 800ac2a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <SD_InitCard+0x46>
    {
      return errorstate;
 800ac32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac34:	e0a6      	b.n	800ad84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fa54 	bl	800d0ea <SDMMC_GetResponse>
 800ac42:	4602      	mov	r2, r0
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 fa4b 	bl	800d0ea <SDMMC_GetResponse>
 800ac54:	4602      	mov	r2, r0
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2108      	movs	r1, #8
 800ac60:	4618      	mov	r0, r3
 800ac62:	f002 fa42 	bl	800d0ea <SDMMC_GetResponse>
 800ac66:	4602      	mov	r2, r0
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	210c      	movs	r1, #12
 800ac72:	4618      	mov	r0, r3
 800ac74:	f002 fa39 	bl	800d0ea <SDMMC_GetResponse>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d01d      	beq.n	800acc2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ac86:	e019      	b.n	800acbc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f107 020a 	add.w	r2, r7, #10
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f002 fc7c 	bl	800d590 <SDMMC_CmdSetRelAdd>
 800ac98:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	e06f      	b.n	800ad84 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800aca4:	f7f9 fa48 	bl	8004138 <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	f241 3287 	movw	r2, #4999	@ 0x1387
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d902      	bls.n	800acbc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800acb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acba:	e063      	b.n	800ad84 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800acbc:	897b      	ldrh	r3, [r7, #10]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0e2      	beq.n	800ac88 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d036      	beq.n	800ad38 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acca:	897b      	ldrh	r3, [r7, #10]
 800accc:	461a      	mov	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acda:	041b      	lsls	r3, r3, #16
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f002 fc36 	bl	800d550 <SDMMC_CmdSendCSD>
 800ace4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <SD_InitCard+0x100>
    {
      return errorstate;
 800acec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acee:	e049      	b.n	800ad84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f002 f9f7 	bl	800d0ea <SDMMC_GetResponse>
 800acfc:	4602      	mov	r2, r0
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2104      	movs	r1, #4
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 f9ee 	bl	800d0ea <SDMMC_GetResponse>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2108      	movs	r1, #8
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 f9e5 	bl	800d0ea <SDMMC_GetResponse>
 800ad20:	4602      	mov	r2, r0
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	210c      	movs	r1, #12
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f002 f9dc 	bl	800d0ea <SDMMC_GetResponse>
 800ad32:	4602      	mov	r2, r0
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2104      	movs	r1, #4
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f002 f9d3 	bl	800d0ea <SDMMC_GetResponse>
 800ad44:	4603      	mov	r3, r0
 800ad46:	0d1a      	lsrs	r2, r3, #20
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad4c:	f107 030c 	add.w	r3, r7, #12
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fb8c 	bl	800a470 <HAL_SD_GetCardCSD>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ad62:	e00f      	b.n	800ad84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad6c:	041b      	lsls	r3, r3, #16
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	f002 fae5 	bl	800d340 <SDMMC_CmdSelDesel>
 800ad76:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <SD_InitCard+0x192>
  {
    return errorstate;
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	e000      	b.n	800ad84 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3740      	adds	r7, #64	@ 0x40
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f002 faee 	bl	800d386 <SDMMC_CmdGoIdleState>
 800adaa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	e072      	b.n	800ae9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f002 fb01 	bl	800d3c2 <SDMMC_CmdOperCond>
 800adc0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc8:	d10d      	bne.n	800ade6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f002 fad6 	bl	800d386 <SDMMC_CmdGoIdleState>
 800adda:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d004      	beq.n	800adec <SD_PowerON+0x60>
    {
      return errorstate;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	e05a      	b.n	800ae9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d137      	bne.n	800ae64 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2100      	movs	r1, #0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f002 fb01 	bl	800d402 <SDMMC_CmdAppCommand>
 800ae00:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d02d      	beq.n	800ae64 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae0c:	e046      	b.n	800ae9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f002 faf4 	bl	800d402 <SDMMC_CmdAppCommand>
 800ae1a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <SD_PowerON+0x9a>
    {
      return errorstate;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	e03a      	b.n	800ae9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	491e      	ldr	r1, [pc, #120]	@ (800aea4 <SD_PowerON+0x118>)
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 fb0b 	bl	800d448 <SDMMC_CmdAppOperCommand>
 800ae32:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae3e:	e02d      	b.n	800ae9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f002 f94f 	bl	800d0ea <SDMMC_GetResponse>
 800ae4c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	0fdb      	lsrs	r3, r3, #31
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d101      	bne.n	800ae5a <SD_PowerON+0xce>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <SD_PowerON+0xd0>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	613b      	str	r3, [r7, #16]

    count++;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	3301      	adds	r3, #1
 800ae62:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d802      	bhi.n	800ae74 <SD_PowerON+0xe8>
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0cc      	beq.n	800ae0e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d902      	bls.n	800ae84 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae82:	e00b      	b.n	800ae9c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	c1100000 	.word	0xc1100000

0800aea8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08c      	sub	sp, #48	@ 0x30
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aeb2:	f7f9 f941 	bl	8004138 <HAL_GetTick>
 800aeb6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f002 f911 	bl	800d0ea <SDMMC_GetResponse>
 800aec8:	4603      	mov	r3, r0
 800aeca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aed2:	d102      	bne.n	800aeda <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aed4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aed8:	e0b0      	b.n	800b03c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2140      	movs	r1, #64	@ 0x40
 800aee0:	4618      	mov	r0, r3
 800aee2:	f002 f941 	bl	800d168 <SDMMC_CmdBlockLength>
 800aee6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	e0a0      	b.n	800b03c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af02:	041b      	lsls	r3, r3, #16
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f002 fa7b 	bl	800d402 <SDMMC_CmdAppCommand>
 800af0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	e08d      	b.n	800b03c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800af26:	2340      	movs	r3, #64	@ 0x40
 800af28:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800af2a:	2360      	movs	r3, #96	@ 0x60
 800af2c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af2e:	2302      	movs	r3, #2
 800af30:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af32:	2300      	movs	r3, #0
 800af34:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af36:	2301      	movs	r3, #1
 800af38:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f107 0208 	add.w	r2, r7, #8
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f002 f8e3 	bl	800d110 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 fb63 	bl	800d61a <SDMMC_CmdStatusRegister>
 800af54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d02b      	beq.n	800afb4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	e069      	b.n	800b03c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d013      	beq.n	800af9e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800af76:	2300      	movs	r3, #0
 800af78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af7a:	e00d      	b.n	800af98 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f002 f83d 	bl	800d000 <SDMMC_ReadFIFO>
 800af86:	4602      	mov	r2, r0
 800af88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8a:	601a      	str	r2, [r3, #0]
        pData++;
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	3304      	adds	r3, #4
 800af90:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	3301      	adds	r3, #1
 800af96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	2b07      	cmp	r3, #7
 800af9c:	d9ee      	bls.n	800af7c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af9e:	f7f9 f8cb 	bl	8004138 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afac:	d102      	bne.n	800afb4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800afae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afb2:	e043      	b.n	800b03c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afba:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0d2      	beq.n	800af68 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc8:	f003 0308 	and.w	r3, r3, #8
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800afd0:	2308      	movs	r3, #8
 800afd2:	e033      	b.n	800b03c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800afe2:	2302      	movs	r3, #2
 800afe4:	e02a      	b.n	800b03c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d017      	beq.n	800b024 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800aff4:	2320      	movs	r3, #32
 800aff6:	e021      	b.n	800b03c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4618      	mov	r0, r3
 800affe:	f001 ffff 	bl	800d000 <SDMMC_ReadFIFO>
 800b002:	4602      	mov	r2, r0
 800b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b006:	601a      	str	r2, [r3, #0]
    pData++;
 800b008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00a:	3304      	adds	r3, #4
 800b00c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b00e:	f7f9 f893 	bl	8004138 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01c:	d102      	bne.n	800b024 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b01e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b022:	e00b      	b.n	800b03c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b02a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e2      	bne.n	800aff8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a03      	ldr	r2, [pc, #12]	@ (800b044 <SD_SendSDStatus+0x19c>)
 800b038:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3730      	adds	r7, #48	@ 0x30
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	18000f3a 	.word	0x18000f3a

0800b048 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d102      	bne.n	800b05e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b058:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b05c:	e018      	b.n	800b090 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b066:	041b      	lsls	r3, r3, #16
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f002 fab2 	bl	800d5d4 <SDMMC_CmdSendStatus>
 800b070:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	e009      	b.n	800b090 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f831 	bl	800d0ea <SDMMC_GetResponse>
 800b088:	4602      	mov	r2, r0
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 f81b 	bl	800d0ea <SDMMC_GetResponse>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0be:	d102      	bne.n	800b0c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b0c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0c4:	e02f      	b.n	800b126 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b0c6:	f107 030c 	add.w	r3, r7, #12
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f879 	bl	800b1c4 <SD_FindSCR>
 800b0d2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	e023      	b.n	800b126 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01c      	beq.n	800b122 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f002 f984 	bl	800d402 <SDMMC_CmdAppCommand>
 800b0fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	e00f      	b.n	800b126 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2102      	movs	r1, #2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 f9bb 	bl	800d488 <SDMMC_CmdBusWidth>
 800b112:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	e003      	b.n	800b126 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b11e:	2300      	movs	r3, #0
 800b120:	e001      	b.n	800b126 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b122:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b136:	2300      	movs	r3, #0
 800b138:	60fb      	str	r3, [r7, #12]
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2100      	movs	r1, #0
 800b144:	4618      	mov	r0, r3
 800b146:	f001 ffd0 	bl	800d0ea <SDMMC_GetResponse>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b154:	d102      	bne.n	800b15c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b156:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b15a:	e02f      	b.n	800b1bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b15c:	f107 030c 	add.w	r3, r7, #12
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f82e 	bl	800b1c4 <SD_FindSCR>
 800b168:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	e023      	b.n	800b1bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d01c      	beq.n	800b1b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b186:	041b      	lsls	r3, r3, #16
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f002 f939 	bl	800d402 <SDMMC_CmdAppCommand>
 800b190:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	e00f      	b.n	800b1bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f002 f970 	bl	800d488 <SDMMC_CmdBusWidth>
 800b1a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	e003      	b.n	800b1bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e001      	b.n	800b1bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1b8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08e      	sub	sp, #56	@ 0x38
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1ce:	f7f8 ffb3 	bl	8004138 <HAL_GetTick>
 800b1d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60bb      	str	r3, [r7, #8]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2108      	movs	r1, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f001 ffbc 	bl	800d168 <SDMMC_CmdBlockLength>
 800b1f0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	e0ad      	b.n	800b358 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b204:	041b      	lsls	r3, r3, #16
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f002 f8fa 	bl	800d402 <SDMMC_CmdAppCommand>
 800b20e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	e09e      	b.n	800b358 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b21a:	f04f 33ff 	mov.w	r3, #4294967295
 800b21e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b220:	2308      	movs	r3, #8
 800b222:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b224:	2330      	movs	r3, #48	@ 0x30
 800b226:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b228:	2302      	movs	r3, #2
 800b22a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b230:	2301      	movs	r3, #1
 800b232:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f107 0210 	add.w	r2, r7, #16
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f001 ff66 	bl	800d110 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 f940 	bl	800d4ce <SDMMC_CmdSendSCR>
 800b24e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b252:	2b00      	cmp	r3, #0
 800b254:	d027      	beq.n	800b2a6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	e07e      	b.n	800b358 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d113      	bne.n	800b290 <SD_FindSCR+0xcc>
 800b268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d110      	bne.n	800b290 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fec4 	bl	800d000 <SDMMC_ReadFIFO>
 800b278:	4603      	mov	r3, r0
 800b27a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4618      	mov	r0, r3
 800b282:	f001 febd 	bl	800d000 <SDMMC_ReadFIFO>
 800b286:	4603      	mov	r3, r0
 800b288:	60fb      	str	r3, [r7, #12]
      index++;
 800b28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28c:	3301      	adds	r3, #1
 800b28e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b290:	f7f8 ff52 	bl	8004138 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d102      	bne.n	800b2a6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2a4:	e058      	b.n	800b358 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2ac:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0d1      	beq.n	800b25a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d005      	beq.n	800b2d0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	e043      	b.n	800b358 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e036      	b.n	800b358 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d005      	beq.n	800b304 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b300:	2320      	movs	r3, #32
 800b302:	e029      	b.n	800b358 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a15      	ldr	r2, [pc, #84]	@ (800b360 <SD_FindSCR+0x19c>)
 800b30a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b318:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b322:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	0e1b      	lsrs	r3, r3, #24
 800b328:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32c:	601a      	str	r2, [r3, #0]
    scr++;
 800b32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b330:	3304      	adds	r3, #4
 800b332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	061a      	lsls	r2, r3, #24
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b340:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	0a1b      	lsrs	r3, r3, #8
 800b346:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b34a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	0e1b      	lsrs	r3, r3, #24
 800b350:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b354:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3738      	adds	r7, #56	@ 0x38
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	18000f3a 	.word	0x18000f3a

0800b364 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b370:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b376:	2b1f      	cmp	r3, #31
 800b378:	d936      	bls.n	800b3e8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e027      	b.n	800b3d0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4618      	mov	r0, r3
 800b386:	f001 fe3b 	bl	800d000 <SDMMC_ReadFIFO>
 800b38a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	3301      	adds	r3, #1
 800b398:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	0a1b      	lsrs	r3, r3, #8
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	0c1b      	lsrs	r3, r3, #16
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	0e1b      	lsrs	r3, r3, #24
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b07      	cmp	r3, #7
 800b3d4:	d9d4      	bls.n	800b380 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e0:	f1a3 0220 	sub.w	r2, r3, #32
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	2b1f      	cmp	r3, #31
 800b404:	d93a      	bls.n	800b47c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	e02b      	b.n	800b464 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	3301      	adds	r3, #1
 800b416:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	021a      	lsls	r2, r3, #8
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3301      	adds	r3, #1
 800b428:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	041a      	lsls	r2, r3, #16
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4313      	orrs	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	3301      	adds	r3, #1
 800b43a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	061a      	lsls	r2, r3, #24
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	3301      	adds	r3, #1
 800b44c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f107 020c 	add.w	r2, r7, #12
 800b456:	4611      	mov	r1, r2
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 fdde 	bl	800d01a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	3301      	adds	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2b07      	cmp	r3, #7
 800b468:	d9d0      	bls.n	800b40c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	f1a3 0220 	sub.w	r2, r3, #32
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	621a      	str	r2, [r3, #32]
  }
}
 800b47c:	bf00      	nop
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e10f      	b.n	800b706 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a87      	ldr	r2, [pc, #540]	@ (800b710 <HAL_SPI_Init+0x23c>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00f      	beq.n	800b516 <HAL_SPI_Init+0x42>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a86      	ldr	r2, [pc, #536]	@ (800b714 <HAL_SPI_Init+0x240>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d00a      	beq.n	800b516 <HAL_SPI_Init+0x42>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a84      	ldr	r2, [pc, #528]	@ (800b718 <HAL_SPI_Init+0x244>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d005      	beq.n	800b516 <HAL_SPI_Init+0x42>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	2b0f      	cmp	r3, #15
 800b510:	d901      	bls.n	800b516 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e0f7      	b.n	800b706 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fbc2 	bl	800bca0 <SPI_GetPacketSize>
 800b51c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a7b      	ldr	r2, [pc, #492]	@ (800b710 <HAL_SPI_Init+0x23c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d00c      	beq.n	800b542 <HAL_SPI_Init+0x6e>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a79      	ldr	r2, [pc, #484]	@ (800b714 <HAL_SPI_Init+0x240>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d007      	beq.n	800b542 <HAL_SPI_Init+0x6e>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a78      	ldr	r2, [pc, #480]	@ (800b718 <HAL_SPI_Init+0x244>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d002      	beq.n	800b542 <HAL_SPI_Init+0x6e>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b08      	cmp	r3, #8
 800b540:	d811      	bhi.n	800b566 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b546:	4a72      	ldr	r2, [pc, #456]	@ (800b710 <HAL_SPI_Init+0x23c>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a70      	ldr	r2, [pc, #448]	@ (800b714 <HAL_SPI_Init+0x240>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d004      	beq.n	800b560 <HAL_SPI_Init+0x8c>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a6f      	ldr	r2, [pc, #444]	@ (800b718 <HAL_SPI_Init+0x244>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d104      	bne.n	800b56a <HAL_SPI_Init+0x96>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b10      	cmp	r3, #16
 800b564:	d901      	bls.n	800b56a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e0cd      	b.n	800b706 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f8cc 	bl	800b71c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0201 	bic.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b5a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5b0:	d119      	bne.n	800b5e6 <HAL_SPI_Init+0x112>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5ba:	d103      	bne.n	800b5c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d008      	beq.n	800b5d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10c      	bne.n	800b5e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5d4:	d107      	bne.n	800b5e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b5e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00f      	beq.n	800b612 <HAL_SPI_Init+0x13e>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	2b06      	cmp	r3, #6
 800b5f8:	d90b      	bls.n	800b612 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	e007      	b.n	800b622 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b620:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69da      	ldr	r2, [r3, #28]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62a:	431a      	orrs	r2, r3
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	431a      	orrs	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b634:	ea42 0103 	orr.w	r1, r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68da      	ldr	r2, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b676:	431a      	orrs	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	431a      	orrs	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b682:	ea42 0103 	orr.w	r1, r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	430a      	orrs	r2, r1
 800b690:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d113      	bne.n	800b6c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b6c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f022 0201 	bic.w	r2, r2, #1
 800b6d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	40013000 	.word	0x40013000
 800b714:	40003800 	.word	0x40003800
 800b718:	40003c00 	.word	0x40003c00

0800b71c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b01      	cmp	r3, #1
 800b748:	d001      	beq.n	800b74e <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800b74a:	2302      	movs	r3, #2
 800b74c:	e18a      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d005      	beq.n	800b760 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b75a:	887b      	ldrh	r3, [r7, #2]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e17f      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_SPI_TransmitReceive_DMA+0x42>
 800b76e:	2302      	movs	r3, #2
 800b770:	e178      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2205      	movs	r2, #5
 800b77e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	887a      	ldrh	r2, [r7, #2]
 800b794:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	887a      	ldrh	r2, [r7, #2]
 800b79c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	887a      	ldrh	r2, [r7, #2]
 800b7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	887a      	ldrh	r2, [r7, #2]
 800b7b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b7d0:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b7e0:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d905      	bls.n	800b7f6 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7f4:	d10f      	bne.n	800b816 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7fa:	2b07      	cmp	r3, #7
 800b7fc:	d911      	bls.n	800b822 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b808:	d00b      	beq.n	800b822 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b80e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b814:	d005      	beq.n	800b822 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e120      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	2b07      	cmp	r3, #7
 800b828:	d840      	bhi.n	800b8ac <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b834:	d109      	bne.n	800b84a <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3301      	adds	r3, #1
 800b840:	105b      	asrs	r3, r3, #1
 800b842:	b29a      	uxth	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b854:	d109      	bne.n	800b86a <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	3303      	adds	r3, #3
 800b860:	109b      	asrs	r3, r3, #2
 800b862:	b29a      	uxth	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b874:	d109      	bne.n	800b88a <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	3301      	adds	r3, #1
 800b880:	105b      	asrs	r3, r3, #1
 800b882:	b29a      	uxth	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b894:	d12e      	bne.n	800b8f4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	3303      	adds	r3, #3
 800b8a0:	109b      	asrs	r3, r3, #2
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b8aa:	e023      	b.n	800b8f4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	2b0f      	cmp	r3, #15
 800b8b2:	d81f      	bhi.n	800b8f4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8be:	d109      	bne.n	800b8d4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	105b      	asrs	r3, r3, #1
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8de:	d109      	bne.n	800b8f4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	105b      	asrs	r3, r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8f8:	4a5c      	ldr	r2, [pc, #368]	@ (800ba6c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800b8fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b900:	4a5b      	ldr	r2, [pc, #364]	@ (800ba70 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800b902:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b908:	4a5a      	ldr	r2, [pc, #360]	@ (800ba74 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b90a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b910:	2200      	movs	r2, #0
 800b912:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3330      	adds	r3, #48	@ 0x30
 800b91e:	4619      	mov	r1, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b924:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b92c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b92e:	f7f9 f923 	bl	8004b78 <HAL_DMA_Start_IT>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d011      	beq.n	800b95c <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b93e:	f043 0210 	orr.w	r2, r3, #16
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e083      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689a      	ldr	r2, [r3, #8]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b96a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b970:	2200      	movs	r2, #0
 800b972:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b978:	2200      	movs	r2, #0
 800b97a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b980:	2200      	movs	r2, #0
 800b982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b988:	4a3a      	ldr	r2, [pc, #232]	@ (800ba74 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800b98a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b994:	4619      	mov	r1, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3320      	adds	r3, #32
 800b99c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b9a6:	f7f9 f8e7 	bl	8004b78 <HAL_DMA_Start_IT>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d016      	beq.n	800b9de <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7f9 fb49 	bl	800504c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9c0:	f043 0210 	orr.w	r2, r3, #16
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e042      	b.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9e8:	d108      	bne.n	800b9fc <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6859      	ldr	r1, [r3, #4]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	4b20      	ldr	r3, [pc, #128]	@ (800ba78 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800b9f6:	400b      	ands	r3, r1
 800b9f8:	6053      	str	r3, [r2, #4]
 800b9fa:	e009      	b.n	800ba10 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	4b1d      	ldr	r3, [pc, #116]	@ (800ba78 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	8879      	ldrh	r1, [r7, #2]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	6812      	ldr	r2, [r2, #0]
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba1e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	691a      	ldr	r2, [r3, #16]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800ba2e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f042 0201 	orr.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba48:	d107      	bne.n	800ba5a <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba58:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	0800baff 	.word	0x0800baff
 800ba70:	0800bab9 	.word	0x0800bab9
 800ba74:	0800bb1b 	.word	0x0800bb1b
 800ba78:	ffff0000 	.word	0xffff0000

0800ba7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b07      	cmp	r3, #7
 800bad0:	d011      	beq.n	800baf6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800badc:	d103      	bne.n	800bae6 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff ffcc 	bl	800ba7c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bae4:	e007      	b.n	800baf6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f042 0208 	orr.w	r2, r2, #8
 800baf4:	611a      	str	r2, [r3, #16]
}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb0a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f7ff ffbf 	bl	800ba90 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb12:	bf00      	nop
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb26:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7f9 fdad 	bl	8005688 <HAL_DMA_GetError>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d011      	beq.n	800bb58 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f813 	bl	800bb60 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb40:	f043 0210 	orr.w	r2, r3, #16
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff ffa6 	bl	800baa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bb58:	bf00      	nop
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	699a      	ldr	r2, [r3, #24]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0208 	orr.w	r2, r2, #8
 800bb7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699a      	ldr	r2, [r3, #24]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f042 0210 	orr.w	r2, r2, #16
 800bb8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f022 0201 	bic.w	r2, r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6919      	ldr	r1, [r3, #16]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b3c      	ldr	r3, [pc, #240]	@ (800bc9c <SPI_CloseTransfer+0x13c>)
 800bbac:	400b      	ands	r3, r1
 800bbae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689a      	ldr	r2, [r3, #8]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	d014      	beq.n	800bbf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f003 0320 	and.w	r3, r3, #32
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00f      	beq.n	800bbf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f042 0220 	orr.w	r2, r2, #32
 800bbf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d014      	beq.n	800bc2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00f      	beq.n	800bc2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc12:	f043 0204 	orr.w	r2, r3, #4
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	699a      	ldr	r2, [r3, #24]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00f      	beq.n	800bc56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc3c:	f043 0201 	orr.w	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	699a      	ldr	r2, [r3, #24]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00f      	beq.n	800bc80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc66:	f043 0208 	orr.w	r2, r3, #8
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	699a      	ldr	r2, [r3, #24]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bc90:	bf00      	nop
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	fffffc90 	.word	0xfffffc90

0800bca0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	3307      	adds	r3, #7
 800bcbe:	08db      	lsrs	r3, r3, #3
 800bcc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e042      	b.n	800bd6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7f7 fc6c 	bl	80035d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2224      	movs	r2, #36	@ 0x24
 800bd04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 0201 	bic.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fe1f 	bl	800c964 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f8b4 	bl	800be94 <UART_SetConfig>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d101      	bne.n	800bd36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e01b      	b.n	800bd6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f042 0201 	orr.w	r2, r2, #1
 800bd64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fe9e 	bl	800caa8 <UART_CheckIdleState>
 800bd6c:	4603      	mov	r3, r0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b08a      	sub	sp, #40	@ 0x28
 800bd7a:	af02      	add	r7, sp, #8
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	603b      	str	r3, [r7, #0]
 800bd82:	4613      	mov	r3, r2
 800bd84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd8c:	2b20      	cmp	r3, #32
 800bd8e:	d17b      	bne.n	800be88 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <HAL_UART_Transmit+0x26>
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e074      	b.n	800be8a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2221      	movs	r2, #33	@ 0x21
 800bdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdb0:	f7f8 f9c2 	bl	8004138 <HAL_GetTick>
 800bdb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	88fa      	ldrh	r2, [r7, #6]
 800bdba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	88fa      	ldrh	r2, [r7, #6]
 800bdc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdce:	d108      	bne.n	800bde2 <HAL_UART_Transmit+0x6c>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	e003      	b.n	800bdea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bdea:	e030      	b.n	800be4e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2180      	movs	r1, #128	@ 0x80
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 ff00 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d005      	beq.n	800be0e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2220      	movs	r2, #32
 800be06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e03d      	b.n	800be8a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10b      	bne.n	800be2c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	3302      	adds	r3, #2
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	e007      	b.n	800be3c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	781a      	ldrb	r2, [r3, #0]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	3301      	adds	r3, #1
 800be3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800be42:	b29b      	uxth	r3, r3
 800be44:	3b01      	subs	r3, #1
 800be46:	b29a      	uxth	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800be54:	b29b      	uxth	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1c8      	bne.n	800bdec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2200      	movs	r2, #0
 800be62:	2140      	movs	r1, #64	@ 0x40
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fec9 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d005      	beq.n	800be7c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2220      	movs	r2, #32
 800be74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e006      	b.n	800be8a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	e000      	b.n	800be8a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800be88:	2302      	movs	r3, #2
  }
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3720      	adds	r7, #32
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be98:	b092      	sub	sp, #72	@ 0x48
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	431a      	orrs	r2, r3
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	4313      	orrs	r3, r2
 800beba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	4bbe      	ldr	r3, [pc, #760]	@ (800c1bc <UART_SetConfig+0x328>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800becc:	430b      	orrs	r3, r1
 800bece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	68da      	ldr	r2, [r3, #12]
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4ab3      	ldr	r2, [pc, #716]	@ (800c1c0 <UART_SetConfig+0x32c>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d004      	beq.n	800bf00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800befc:	4313      	orrs	r3, r2
 800befe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689a      	ldr	r2, [r3, #8]
 800bf06:	4baf      	ldr	r3, [pc, #700]	@ (800c1c4 <UART_SetConfig+0x330>)
 800bf08:	4013      	ands	r3, r2
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	6812      	ldr	r2, [r2, #0]
 800bf0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf10:	430b      	orrs	r3, r1
 800bf12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	f023 010f 	bic.w	r1, r3, #15
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4aa6      	ldr	r2, [pc, #664]	@ (800c1c8 <UART_SetConfig+0x334>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d177      	bne.n	800c024 <UART_SetConfig+0x190>
 800bf34:	4ba5      	ldr	r3, [pc, #660]	@ (800c1cc <UART_SetConfig+0x338>)
 800bf36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf3c:	2b28      	cmp	r3, #40	@ 0x28
 800bf3e:	d86d      	bhi.n	800c01c <UART_SetConfig+0x188>
 800bf40:	a201      	add	r2, pc, #4	@ (adr r2, 800bf48 <UART_SetConfig+0xb4>)
 800bf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf46:	bf00      	nop
 800bf48:	0800bfed 	.word	0x0800bfed
 800bf4c:	0800c01d 	.word	0x0800c01d
 800bf50:	0800c01d 	.word	0x0800c01d
 800bf54:	0800c01d 	.word	0x0800c01d
 800bf58:	0800c01d 	.word	0x0800c01d
 800bf5c:	0800c01d 	.word	0x0800c01d
 800bf60:	0800c01d 	.word	0x0800c01d
 800bf64:	0800c01d 	.word	0x0800c01d
 800bf68:	0800bff5 	.word	0x0800bff5
 800bf6c:	0800c01d 	.word	0x0800c01d
 800bf70:	0800c01d 	.word	0x0800c01d
 800bf74:	0800c01d 	.word	0x0800c01d
 800bf78:	0800c01d 	.word	0x0800c01d
 800bf7c:	0800c01d 	.word	0x0800c01d
 800bf80:	0800c01d 	.word	0x0800c01d
 800bf84:	0800c01d 	.word	0x0800c01d
 800bf88:	0800bffd 	.word	0x0800bffd
 800bf8c:	0800c01d 	.word	0x0800c01d
 800bf90:	0800c01d 	.word	0x0800c01d
 800bf94:	0800c01d 	.word	0x0800c01d
 800bf98:	0800c01d 	.word	0x0800c01d
 800bf9c:	0800c01d 	.word	0x0800c01d
 800bfa0:	0800c01d 	.word	0x0800c01d
 800bfa4:	0800c01d 	.word	0x0800c01d
 800bfa8:	0800c005 	.word	0x0800c005
 800bfac:	0800c01d 	.word	0x0800c01d
 800bfb0:	0800c01d 	.word	0x0800c01d
 800bfb4:	0800c01d 	.word	0x0800c01d
 800bfb8:	0800c01d 	.word	0x0800c01d
 800bfbc:	0800c01d 	.word	0x0800c01d
 800bfc0:	0800c01d 	.word	0x0800c01d
 800bfc4:	0800c01d 	.word	0x0800c01d
 800bfc8:	0800c00d 	.word	0x0800c00d
 800bfcc:	0800c01d 	.word	0x0800c01d
 800bfd0:	0800c01d 	.word	0x0800c01d
 800bfd4:	0800c01d 	.word	0x0800c01d
 800bfd8:	0800c01d 	.word	0x0800c01d
 800bfdc:	0800c01d 	.word	0x0800c01d
 800bfe0:	0800c01d 	.word	0x0800c01d
 800bfe4:	0800c01d 	.word	0x0800c01d
 800bfe8:	0800c015 	.word	0x0800c015
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff2:	e222      	b.n	800c43a <UART_SetConfig+0x5a6>
 800bff4:	2304      	movs	r3, #4
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffa:	e21e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800bffc:	2308      	movs	r3, #8
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c002:	e21a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c004:	2310      	movs	r3, #16
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00a:	e216      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c00c:	2320      	movs	r3, #32
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c012:	e212      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c014:	2340      	movs	r3, #64	@ 0x40
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01a:	e20e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c01c:	2380      	movs	r3, #128	@ 0x80
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c022:	e20a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a69      	ldr	r2, [pc, #420]	@ (800c1d0 <UART_SetConfig+0x33c>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d130      	bne.n	800c090 <UART_SetConfig+0x1fc>
 800c02e:	4b67      	ldr	r3, [pc, #412]	@ (800c1cc <UART_SetConfig+0x338>)
 800c030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c032:	f003 0307 	and.w	r3, r3, #7
 800c036:	2b05      	cmp	r3, #5
 800c038:	d826      	bhi.n	800c088 <UART_SetConfig+0x1f4>
 800c03a:	a201      	add	r2, pc, #4	@ (adr r2, 800c040 <UART_SetConfig+0x1ac>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c059 	.word	0x0800c059
 800c044:	0800c061 	.word	0x0800c061
 800c048:	0800c069 	.word	0x0800c069
 800c04c:	0800c071 	.word	0x0800c071
 800c050:	0800c079 	.word	0x0800c079
 800c054:	0800c081 	.word	0x0800c081
 800c058:	2300      	movs	r3, #0
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05e:	e1ec      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c060:	2304      	movs	r3, #4
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c066:	e1e8      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c068:	2308      	movs	r3, #8
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06e:	e1e4      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c070:	2310      	movs	r3, #16
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c076:	e1e0      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c078:	2320      	movs	r3, #32
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07e:	e1dc      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c080:	2340      	movs	r3, #64	@ 0x40
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c086:	e1d8      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c088:	2380      	movs	r3, #128	@ 0x80
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08e:	e1d4      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a4f      	ldr	r2, [pc, #316]	@ (800c1d4 <UART_SetConfig+0x340>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d130      	bne.n	800c0fc <UART_SetConfig+0x268>
 800c09a:	4b4c      	ldr	r3, [pc, #304]	@ (800c1cc <UART_SetConfig+0x338>)
 800c09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b05      	cmp	r3, #5
 800c0a4:	d826      	bhi.n	800c0f4 <UART_SetConfig+0x260>
 800c0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ac <UART_SetConfig+0x218>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c0cd 	.word	0x0800c0cd
 800c0b4:	0800c0d5 	.word	0x0800c0d5
 800c0b8:	0800c0dd 	.word	0x0800c0dd
 800c0bc:	0800c0e5 	.word	0x0800c0e5
 800c0c0:	0800c0ed 	.word	0x0800c0ed
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ca:	e1b6      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0cc:	2304      	movs	r3, #4
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e1b2      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0d4:	2308      	movs	r3, #8
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e1ae      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0dc:	2310      	movs	r3, #16
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e2:	e1aa      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0e4:	2320      	movs	r3, #32
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ea:	e1a6      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0ec:	2340      	movs	r3, #64	@ 0x40
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f2:	e1a2      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0f4:	2380      	movs	r3, #128	@ 0x80
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fa:	e19e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a35      	ldr	r2, [pc, #212]	@ (800c1d8 <UART_SetConfig+0x344>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d130      	bne.n	800c168 <UART_SetConfig+0x2d4>
 800c106:	4b31      	ldr	r3, [pc, #196]	@ (800c1cc <UART_SetConfig+0x338>)
 800c108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c10a:	f003 0307 	and.w	r3, r3, #7
 800c10e:	2b05      	cmp	r3, #5
 800c110:	d826      	bhi.n	800c160 <UART_SetConfig+0x2cc>
 800c112:	a201      	add	r2, pc, #4	@ (adr r2, 800c118 <UART_SetConfig+0x284>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c131 	.word	0x0800c131
 800c11c:	0800c139 	.word	0x0800c139
 800c120:	0800c141 	.word	0x0800c141
 800c124:	0800c149 	.word	0x0800c149
 800c128:	0800c151 	.word	0x0800c151
 800c12c:	0800c159 	.word	0x0800c159
 800c130:	2300      	movs	r3, #0
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c136:	e180      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c138:	2304      	movs	r3, #4
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e17c      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c140:	2308      	movs	r3, #8
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e178      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c148:	2310      	movs	r3, #16
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e174      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c150:	2320      	movs	r3, #32
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c156:	e170      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c158:	2340      	movs	r3, #64	@ 0x40
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15e:	e16c      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c160:	2380      	movs	r3, #128	@ 0x80
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c166:	e168      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a1b      	ldr	r2, [pc, #108]	@ (800c1dc <UART_SetConfig+0x348>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d142      	bne.n	800c1f8 <UART_SetConfig+0x364>
 800c172:	4b16      	ldr	r3, [pc, #88]	@ (800c1cc <UART_SetConfig+0x338>)
 800c174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	d838      	bhi.n	800c1f0 <UART_SetConfig+0x35c>
 800c17e:	a201      	add	r2, pc, #4	@ (adr r2, 800c184 <UART_SetConfig+0x2f0>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c19d 	.word	0x0800c19d
 800c188:	0800c1a5 	.word	0x0800c1a5
 800c18c:	0800c1ad 	.word	0x0800c1ad
 800c190:	0800c1b5 	.word	0x0800c1b5
 800c194:	0800c1e1 	.word	0x0800c1e1
 800c198:	0800c1e9 	.word	0x0800c1e9
 800c19c:	2300      	movs	r3, #0
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a2:	e14a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e146      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e142      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e13e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1bc:	cfff69f3 	.word	0xcfff69f3
 800c1c0:	58000c00 	.word	0x58000c00
 800c1c4:	11fff4ff 	.word	0x11fff4ff
 800c1c8:	40011000 	.word	0x40011000
 800c1cc:	58024400 	.word	0x58024400
 800c1d0:	40004400 	.word	0x40004400
 800c1d4:	40004800 	.word	0x40004800
 800c1d8:	40004c00 	.word	0x40004c00
 800c1dc:	40005000 	.word	0x40005000
 800c1e0:	2320      	movs	r3, #32
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e6:	e128      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1e8:	2340      	movs	r3, #64	@ 0x40
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ee:	e124      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1f0:	2380      	movs	r3, #128	@ 0x80
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f6:	e120      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4acb      	ldr	r2, [pc, #812]	@ (800c52c <UART_SetConfig+0x698>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d176      	bne.n	800c2f0 <UART_SetConfig+0x45c>
 800c202:	4bcb      	ldr	r3, [pc, #812]	@ (800c530 <UART_SetConfig+0x69c>)
 800c204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c20a:	2b28      	cmp	r3, #40	@ 0x28
 800c20c:	d86c      	bhi.n	800c2e8 <UART_SetConfig+0x454>
 800c20e:	a201      	add	r2, pc, #4	@ (adr r2, 800c214 <UART_SetConfig+0x380>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c2b9 	.word	0x0800c2b9
 800c218:	0800c2e9 	.word	0x0800c2e9
 800c21c:	0800c2e9 	.word	0x0800c2e9
 800c220:	0800c2e9 	.word	0x0800c2e9
 800c224:	0800c2e9 	.word	0x0800c2e9
 800c228:	0800c2e9 	.word	0x0800c2e9
 800c22c:	0800c2e9 	.word	0x0800c2e9
 800c230:	0800c2e9 	.word	0x0800c2e9
 800c234:	0800c2c1 	.word	0x0800c2c1
 800c238:	0800c2e9 	.word	0x0800c2e9
 800c23c:	0800c2e9 	.word	0x0800c2e9
 800c240:	0800c2e9 	.word	0x0800c2e9
 800c244:	0800c2e9 	.word	0x0800c2e9
 800c248:	0800c2e9 	.word	0x0800c2e9
 800c24c:	0800c2e9 	.word	0x0800c2e9
 800c250:	0800c2e9 	.word	0x0800c2e9
 800c254:	0800c2c9 	.word	0x0800c2c9
 800c258:	0800c2e9 	.word	0x0800c2e9
 800c25c:	0800c2e9 	.word	0x0800c2e9
 800c260:	0800c2e9 	.word	0x0800c2e9
 800c264:	0800c2e9 	.word	0x0800c2e9
 800c268:	0800c2e9 	.word	0x0800c2e9
 800c26c:	0800c2e9 	.word	0x0800c2e9
 800c270:	0800c2e9 	.word	0x0800c2e9
 800c274:	0800c2d1 	.word	0x0800c2d1
 800c278:	0800c2e9 	.word	0x0800c2e9
 800c27c:	0800c2e9 	.word	0x0800c2e9
 800c280:	0800c2e9 	.word	0x0800c2e9
 800c284:	0800c2e9 	.word	0x0800c2e9
 800c288:	0800c2e9 	.word	0x0800c2e9
 800c28c:	0800c2e9 	.word	0x0800c2e9
 800c290:	0800c2e9 	.word	0x0800c2e9
 800c294:	0800c2d9 	.word	0x0800c2d9
 800c298:	0800c2e9 	.word	0x0800c2e9
 800c29c:	0800c2e9 	.word	0x0800c2e9
 800c2a0:	0800c2e9 	.word	0x0800c2e9
 800c2a4:	0800c2e9 	.word	0x0800c2e9
 800c2a8:	0800c2e9 	.word	0x0800c2e9
 800c2ac:	0800c2e9 	.word	0x0800c2e9
 800c2b0:	0800c2e9 	.word	0x0800c2e9
 800c2b4:	0800c2e1 	.word	0x0800c2e1
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2be:	e0bc      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c6:	e0b8      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2c8:	2308      	movs	r3, #8
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ce:	e0b4      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e0b0      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2d8:	2320      	movs	r3, #32
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2de:	e0ac      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2e0:	2340      	movs	r3, #64	@ 0x40
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e6:	e0a8      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2e8:	2380      	movs	r3, #128	@ 0x80
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e0a4      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a8f      	ldr	r2, [pc, #572]	@ (800c534 <UART_SetConfig+0x6a0>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d130      	bne.n	800c35c <UART_SetConfig+0x4c8>
 800c2fa:	4b8d      	ldr	r3, [pc, #564]	@ (800c530 <UART_SetConfig+0x69c>)
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	2b05      	cmp	r3, #5
 800c304:	d826      	bhi.n	800c354 <UART_SetConfig+0x4c0>
 800c306:	a201      	add	r2, pc, #4	@ (adr r2, 800c30c <UART_SetConfig+0x478>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c325 	.word	0x0800c325
 800c310:	0800c32d 	.word	0x0800c32d
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c33d 	.word	0x0800c33d
 800c31c:	0800c345 	.word	0x0800c345
 800c320:	0800c34d 	.word	0x0800c34d
 800c324:	2300      	movs	r3, #0
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32a:	e086      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c32c:	2304      	movs	r3, #4
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c332:	e082      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c334:	2308      	movs	r3, #8
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33a:	e07e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c33c:	2310      	movs	r3, #16
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e07a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c344:	2320      	movs	r3, #32
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34a:	e076      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c34c:	2340      	movs	r3, #64	@ 0x40
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c352:	e072      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c354:	2380      	movs	r3, #128	@ 0x80
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35a:	e06e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a75      	ldr	r2, [pc, #468]	@ (800c538 <UART_SetConfig+0x6a4>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d130      	bne.n	800c3c8 <UART_SetConfig+0x534>
 800c366:	4b72      	ldr	r3, [pc, #456]	@ (800c530 <UART_SetConfig+0x69c>)
 800c368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	2b05      	cmp	r3, #5
 800c370:	d826      	bhi.n	800c3c0 <UART_SetConfig+0x52c>
 800c372:	a201      	add	r2, pc, #4	@ (adr r2, 800c378 <UART_SetConfig+0x4e4>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c391 	.word	0x0800c391
 800c37c:	0800c399 	.word	0x0800c399
 800c380:	0800c3a1 	.word	0x0800c3a1
 800c384:	0800c3a9 	.word	0x0800c3a9
 800c388:	0800c3b1 	.word	0x0800c3b1
 800c38c:	0800c3b9 	.word	0x0800c3b9
 800c390:	2300      	movs	r3, #0
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c396:	e050      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c398:	2304      	movs	r3, #4
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39e:	e04c      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a6:	e048      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3a8:	2310      	movs	r3, #16
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ae:	e044      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b6:	e040      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3b8:	2340      	movs	r3, #64	@ 0x40
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3be:	e03c      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3c0:	2380      	movs	r3, #128	@ 0x80
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e038      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a5b      	ldr	r2, [pc, #364]	@ (800c53c <UART_SetConfig+0x6a8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d130      	bne.n	800c434 <UART_SetConfig+0x5a0>
 800c3d2:	4b57      	ldr	r3, [pc, #348]	@ (800c530 <UART_SetConfig+0x69c>)
 800c3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	d826      	bhi.n	800c42c <UART_SetConfig+0x598>
 800c3de:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e4 <UART_SetConfig+0x550>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c3fd 	.word	0x0800c3fd
 800c3e8:	0800c405 	.word	0x0800c405
 800c3ec:	0800c40d 	.word	0x0800c40d
 800c3f0:	0800c415 	.word	0x0800c415
 800c3f4:	0800c41d 	.word	0x0800c41d
 800c3f8:	0800c425 	.word	0x0800c425
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c402:	e01a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c404:	2304      	movs	r3, #4
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40a:	e016      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c40c:	2308      	movs	r3, #8
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c412:	e012      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c414:	2310      	movs	r3, #16
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e00e      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c41c:	2320      	movs	r3, #32
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e00a      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c424:	2340      	movs	r3, #64	@ 0x40
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e006      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c42c:	2380      	movs	r3, #128	@ 0x80
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e002      	b.n	800c43a <UART_SetConfig+0x5a6>
 800c434:	2380      	movs	r3, #128	@ 0x80
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a3f      	ldr	r2, [pc, #252]	@ (800c53c <UART_SetConfig+0x6a8>)
 800c440:	4293      	cmp	r3, r2
 800c442:	f040 80f8 	bne.w	800c636 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c446:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c44a:	2b20      	cmp	r3, #32
 800c44c:	dc46      	bgt.n	800c4dc <UART_SetConfig+0x648>
 800c44e:	2b02      	cmp	r3, #2
 800c450:	f2c0 8082 	blt.w	800c558 <UART_SetConfig+0x6c4>
 800c454:	3b02      	subs	r3, #2
 800c456:	2b1e      	cmp	r3, #30
 800c458:	d87e      	bhi.n	800c558 <UART_SetConfig+0x6c4>
 800c45a:	a201      	add	r2, pc, #4	@ (adr r2, 800c460 <UART_SetConfig+0x5cc>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c4e3 	.word	0x0800c4e3
 800c464:	0800c559 	.word	0x0800c559
 800c468:	0800c4eb 	.word	0x0800c4eb
 800c46c:	0800c559 	.word	0x0800c559
 800c470:	0800c559 	.word	0x0800c559
 800c474:	0800c559 	.word	0x0800c559
 800c478:	0800c4fb 	.word	0x0800c4fb
 800c47c:	0800c559 	.word	0x0800c559
 800c480:	0800c559 	.word	0x0800c559
 800c484:	0800c559 	.word	0x0800c559
 800c488:	0800c559 	.word	0x0800c559
 800c48c:	0800c559 	.word	0x0800c559
 800c490:	0800c559 	.word	0x0800c559
 800c494:	0800c559 	.word	0x0800c559
 800c498:	0800c50b 	.word	0x0800c50b
 800c49c:	0800c559 	.word	0x0800c559
 800c4a0:	0800c559 	.word	0x0800c559
 800c4a4:	0800c559 	.word	0x0800c559
 800c4a8:	0800c559 	.word	0x0800c559
 800c4ac:	0800c559 	.word	0x0800c559
 800c4b0:	0800c559 	.word	0x0800c559
 800c4b4:	0800c559 	.word	0x0800c559
 800c4b8:	0800c559 	.word	0x0800c559
 800c4bc:	0800c559 	.word	0x0800c559
 800c4c0:	0800c559 	.word	0x0800c559
 800c4c4:	0800c559 	.word	0x0800c559
 800c4c8:	0800c559 	.word	0x0800c559
 800c4cc:	0800c559 	.word	0x0800c559
 800c4d0:	0800c559 	.word	0x0800c559
 800c4d4:	0800c559 	.word	0x0800c559
 800c4d8:	0800c54b 	.word	0x0800c54b
 800c4dc:	2b40      	cmp	r3, #64	@ 0x40
 800c4de:	d037      	beq.n	800c550 <UART_SetConfig+0x6bc>
 800c4e0:	e03a      	b.n	800c558 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c4e2:	f7fc fe1f 	bl	8009124 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4e8:	e03c      	b.n	800c564 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fc fe2e 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f8:	e034      	b.n	800c564 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4fa:	f107 0318 	add.w	r3, r7, #24
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fc ff7a 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c508:	e02c      	b.n	800c564 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c50a:	4b09      	ldr	r3, [pc, #36]	@ (800c530 <UART_SetConfig+0x69c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	d016      	beq.n	800c544 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c516:	4b06      	ldr	r3, [pc, #24]	@ (800c530 <UART_SetConfig+0x69c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	08db      	lsrs	r3, r3, #3
 800c51c:	f003 0303 	and.w	r3, r3, #3
 800c520:	4a07      	ldr	r2, [pc, #28]	@ (800c540 <UART_SetConfig+0x6ac>)
 800c522:	fa22 f303 	lsr.w	r3, r2, r3
 800c526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c528:	e01c      	b.n	800c564 <UART_SetConfig+0x6d0>
 800c52a:	bf00      	nop
 800c52c:	40011400 	.word	0x40011400
 800c530:	58024400 	.word	0x58024400
 800c534:	40007800 	.word	0x40007800
 800c538:	40007c00 	.word	0x40007c00
 800c53c:	58000c00 	.word	0x58000c00
 800c540:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c544:	4b9d      	ldr	r3, [pc, #628]	@ (800c7bc <UART_SetConfig+0x928>)
 800c546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c548:	e00c      	b.n	800c564 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c54a:	4b9d      	ldr	r3, [pc, #628]	@ (800c7c0 <UART_SetConfig+0x92c>)
 800c54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c54e:	e009      	b.n	800c564 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c556:	e005      	b.n	800c564 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c562:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c566:	2b00      	cmp	r3, #0
 800c568:	f000 81de 	beq.w	800c928 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c570:	4a94      	ldr	r2, [pc, #592]	@ (800c7c4 <UART_SetConfig+0x930>)
 800c572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c576:	461a      	mov	r2, r3
 800c578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c57e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	4413      	add	r3, r2
 800c58a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d305      	bcc.n	800c59c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c598:	429a      	cmp	r2, r3
 800c59a:	d903      	bls.n	800c5a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c5a2:	e1c1      	b.n	800c928 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	60bb      	str	r3, [r7, #8]
 800c5aa:	60fa      	str	r2, [r7, #12]
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b0:	4a84      	ldr	r2, [pc, #528]	@ (800c7c4 <UART_SetConfig+0x930>)
 800c5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	607a      	str	r2, [r7, #4]
 800c5be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c5c6:	f7f4 f897 	bl	80006f8 <__aeabi_uldivmod>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	020b      	lsls	r3, r1, #8
 800c5dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5e0:	0202      	lsls	r2, r0, #8
 800c5e2:	6979      	ldr	r1, [r7, #20]
 800c5e4:	6849      	ldr	r1, [r1, #4]
 800c5e6:	0849      	lsrs	r1, r1, #1
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	eb12 0804 	adds.w	r8, r2, r4
 800c5f2:	eb43 0905 	adc.w	r9, r3, r5
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	4693      	mov	fp, r2
 800c600:	4652      	mov	r2, sl
 800c602:	465b      	mov	r3, fp
 800c604:	4640      	mov	r0, r8
 800c606:	4649      	mov	r1, r9
 800c608:	f7f4 f876 	bl	80006f8 <__aeabi_uldivmod>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4613      	mov	r3, r2
 800c612:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c61a:	d308      	bcc.n	800c62e <UART_SetConfig+0x79a>
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c622:	d204      	bcs.n	800c62e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c62a:	60da      	str	r2, [r3, #12]
 800c62c:	e17c      	b.n	800c928 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c634:	e178      	b.n	800c928 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c63e:	f040 80c5 	bne.w	800c7cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c642:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c646:	2b20      	cmp	r3, #32
 800c648:	dc48      	bgt.n	800c6dc <UART_SetConfig+0x848>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	db7b      	blt.n	800c746 <UART_SetConfig+0x8b2>
 800c64e:	2b20      	cmp	r3, #32
 800c650:	d879      	bhi.n	800c746 <UART_SetConfig+0x8b2>
 800c652:	a201      	add	r2, pc, #4	@ (adr r2, 800c658 <UART_SetConfig+0x7c4>)
 800c654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c658:	0800c6e3 	.word	0x0800c6e3
 800c65c:	0800c6eb 	.word	0x0800c6eb
 800c660:	0800c747 	.word	0x0800c747
 800c664:	0800c747 	.word	0x0800c747
 800c668:	0800c6f3 	.word	0x0800c6f3
 800c66c:	0800c747 	.word	0x0800c747
 800c670:	0800c747 	.word	0x0800c747
 800c674:	0800c747 	.word	0x0800c747
 800c678:	0800c703 	.word	0x0800c703
 800c67c:	0800c747 	.word	0x0800c747
 800c680:	0800c747 	.word	0x0800c747
 800c684:	0800c747 	.word	0x0800c747
 800c688:	0800c747 	.word	0x0800c747
 800c68c:	0800c747 	.word	0x0800c747
 800c690:	0800c747 	.word	0x0800c747
 800c694:	0800c747 	.word	0x0800c747
 800c698:	0800c713 	.word	0x0800c713
 800c69c:	0800c747 	.word	0x0800c747
 800c6a0:	0800c747 	.word	0x0800c747
 800c6a4:	0800c747 	.word	0x0800c747
 800c6a8:	0800c747 	.word	0x0800c747
 800c6ac:	0800c747 	.word	0x0800c747
 800c6b0:	0800c747 	.word	0x0800c747
 800c6b4:	0800c747 	.word	0x0800c747
 800c6b8:	0800c747 	.word	0x0800c747
 800c6bc:	0800c747 	.word	0x0800c747
 800c6c0:	0800c747 	.word	0x0800c747
 800c6c4:	0800c747 	.word	0x0800c747
 800c6c8:	0800c747 	.word	0x0800c747
 800c6cc:	0800c747 	.word	0x0800c747
 800c6d0:	0800c747 	.word	0x0800c747
 800c6d4:	0800c747 	.word	0x0800c747
 800c6d8:	0800c739 	.word	0x0800c739
 800c6dc:	2b40      	cmp	r3, #64	@ 0x40
 800c6de:	d02e      	beq.n	800c73e <UART_SetConfig+0x8aa>
 800c6e0:	e031      	b.n	800c746 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6e2:	f7fa fd69 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 800c6e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6e8:	e033      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6ea:	f7fa fd7b 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 800c6ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6f0:	e02f      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fc fd2a 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c700:	e027      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c702:	f107 0318 	add.w	r3, r7, #24
 800c706:	4618      	mov	r0, r3
 800c708:	f7fc fe76 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c710:	e01f      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c712:	4b2d      	ldr	r3, [pc, #180]	@ (800c7c8 <UART_SetConfig+0x934>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 0320 	and.w	r3, r3, #32
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c71e:	4b2a      	ldr	r3, [pc, #168]	@ (800c7c8 <UART_SetConfig+0x934>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	08db      	lsrs	r3, r3, #3
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	4a24      	ldr	r2, [pc, #144]	@ (800c7bc <UART_SetConfig+0x928>)
 800c72a:	fa22 f303 	lsr.w	r3, r2, r3
 800c72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c730:	e00f      	b.n	800c752 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c732:	4b22      	ldr	r3, [pc, #136]	@ (800c7bc <UART_SetConfig+0x928>)
 800c734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c736:	e00c      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c738:	4b21      	ldr	r3, [pc, #132]	@ (800c7c0 <UART_SetConfig+0x92c>)
 800c73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c73c:	e009      	b.n	800c752 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c73e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c744:	e005      	b.n	800c752 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 80e7 	beq.w	800c928 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c75e:	4a19      	ldr	r2, [pc, #100]	@ (800c7c4 <UART_SetConfig+0x930>)
 800c760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c764:	461a      	mov	r2, r3
 800c766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c768:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76c:	005a      	lsls	r2, r3, #1
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	085b      	lsrs	r3, r3, #1
 800c774:	441a      	add	r2, r3
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c77e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	2b0f      	cmp	r3, #15
 800c784:	d916      	bls.n	800c7b4 <UART_SetConfig+0x920>
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c78c:	d212      	bcs.n	800c7b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c790:	b29b      	uxth	r3, r3
 800c792:	f023 030f 	bic.w	r3, r3, #15
 800c796:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	085b      	lsrs	r3, r3, #1
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	f003 0307 	and.w	r3, r3, #7
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c7b0:	60da      	str	r2, [r3, #12]
 800c7b2:	e0b9      	b.n	800c928 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c7ba:	e0b5      	b.n	800c928 <UART_SetConfig+0xa94>
 800c7bc:	03d09000 	.word	0x03d09000
 800c7c0:	003d0900 	.word	0x003d0900
 800c7c4:	08011b40 	.word	0x08011b40
 800c7c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7d0:	2b20      	cmp	r3, #32
 800c7d2:	dc49      	bgt.n	800c868 <UART_SetConfig+0x9d4>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	db7c      	blt.n	800c8d2 <UART_SetConfig+0xa3e>
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	d87a      	bhi.n	800c8d2 <UART_SetConfig+0xa3e>
 800c7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e4 <UART_SetConfig+0x950>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c86f 	.word	0x0800c86f
 800c7e8:	0800c877 	.word	0x0800c877
 800c7ec:	0800c8d3 	.word	0x0800c8d3
 800c7f0:	0800c8d3 	.word	0x0800c8d3
 800c7f4:	0800c87f 	.word	0x0800c87f
 800c7f8:	0800c8d3 	.word	0x0800c8d3
 800c7fc:	0800c8d3 	.word	0x0800c8d3
 800c800:	0800c8d3 	.word	0x0800c8d3
 800c804:	0800c88f 	.word	0x0800c88f
 800c808:	0800c8d3 	.word	0x0800c8d3
 800c80c:	0800c8d3 	.word	0x0800c8d3
 800c810:	0800c8d3 	.word	0x0800c8d3
 800c814:	0800c8d3 	.word	0x0800c8d3
 800c818:	0800c8d3 	.word	0x0800c8d3
 800c81c:	0800c8d3 	.word	0x0800c8d3
 800c820:	0800c8d3 	.word	0x0800c8d3
 800c824:	0800c89f 	.word	0x0800c89f
 800c828:	0800c8d3 	.word	0x0800c8d3
 800c82c:	0800c8d3 	.word	0x0800c8d3
 800c830:	0800c8d3 	.word	0x0800c8d3
 800c834:	0800c8d3 	.word	0x0800c8d3
 800c838:	0800c8d3 	.word	0x0800c8d3
 800c83c:	0800c8d3 	.word	0x0800c8d3
 800c840:	0800c8d3 	.word	0x0800c8d3
 800c844:	0800c8d3 	.word	0x0800c8d3
 800c848:	0800c8d3 	.word	0x0800c8d3
 800c84c:	0800c8d3 	.word	0x0800c8d3
 800c850:	0800c8d3 	.word	0x0800c8d3
 800c854:	0800c8d3 	.word	0x0800c8d3
 800c858:	0800c8d3 	.word	0x0800c8d3
 800c85c:	0800c8d3 	.word	0x0800c8d3
 800c860:	0800c8d3 	.word	0x0800c8d3
 800c864:	0800c8c5 	.word	0x0800c8c5
 800c868:	2b40      	cmp	r3, #64	@ 0x40
 800c86a:	d02e      	beq.n	800c8ca <UART_SetConfig+0xa36>
 800c86c:	e031      	b.n	800c8d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86e:	f7fa fca3 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 800c872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c874:	e033      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c876:	f7fa fcb5 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 800c87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c87c:	e02f      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc fc64 	bl	8009150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c88c:	e027      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88e:	f107 0318 	add.w	r3, r7, #24
 800c892:	4618      	mov	r0, r3
 800c894:	f7fc fdb0 	bl	80093f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c89c:	e01f      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c89e:	4b2d      	ldr	r3, [pc, #180]	@ (800c954 <UART_SetConfig+0xac0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <UART_SetConfig+0xac0>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	08db      	lsrs	r3, r3, #3
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	4a28      	ldr	r2, [pc, #160]	@ (800c958 <UART_SetConfig+0xac4>)
 800c8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8bc:	e00f      	b.n	800c8de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c8be:	4b26      	ldr	r3, [pc, #152]	@ (800c958 <UART_SetConfig+0xac4>)
 800c8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c2:	e00c      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8c4:	4b25      	ldr	r3, [pc, #148]	@ (800c95c <UART_SetConfig+0xac8>)
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c8:	e009      	b.n	800c8de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d0:	e005      	b.n	800c8de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8dc:	bf00      	nop
    }

    if (pclk != 0U)
 800c8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d021      	beq.n	800c928 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c960 <UART_SetConfig+0xacc>)
 800c8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	085b      	lsrs	r3, r3, #1
 800c8fc:	441a      	add	r2, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	fbb2 f3f3 	udiv	r3, r2, r3
 800c906:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	2b0f      	cmp	r3, #15
 800c90c:	d909      	bls.n	800c922 <UART_SetConfig+0xa8e>
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c914:	d205      	bcs.n	800c922 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c918:	b29a      	uxth	r2, r3
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	60da      	str	r2, [r3, #12]
 800c920:	e002      	b.n	800c928 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2201      	movs	r2, #1
 800c934:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	2200      	movs	r2, #0
 800c93c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2200      	movs	r2, #0
 800c942:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c944:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3748      	adds	r7, #72	@ 0x48
 800c94c:	46bd      	mov	sp, r7
 800c94e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c952:	bf00      	nop
 800c954:	58024400 	.word	0x58024400
 800c958:	03d09000 	.word	0x03d09000
 800c95c:	003d0900 	.word	0x003d0900
 800c960:	08011b40 	.word	0x08011b40

0800c964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00a      	beq.n	800c98e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f8:	f003 0310 	and.w	r3, r3, #16
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1a:	f003 0320 	and.w	r3, r3, #32
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01a      	beq.n	800ca7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca62:	d10a      	bne.n	800ca7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00a      	beq.n	800ca9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	605a      	str	r2, [r3, #4]
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b098      	sub	sp, #96	@ 0x60
 800caac:	af02      	add	r7, sp, #8
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cab8:	f7f7 fb3e 	bl	8004138 <HAL_GetTick>
 800cabc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0308 	and.w	r3, r3, #8
 800cac8:	2b08      	cmp	r3, #8
 800caca:	d12f      	bne.n	800cb2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cacc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad4:	2200      	movs	r2, #0
 800cad6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f88e 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d022      	beq.n	800cb2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caee:	e853 3f00 	ldrex	r3, [r3]
 800caf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cafa:	653b      	str	r3, [r7, #80]	@ 0x50
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb04:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb0c:	e841 2300 	strex	r3, r2, [r1]
 800cb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1e6      	bne.n	800cae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e063      	b.n	800cbf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0304 	and.w	r3, r3, #4
 800cb36:	2b04      	cmp	r3, #4
 800cb38:	d149      	bne.n	800cbce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb42:	2200      	movs	r2, #0
 800cb44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f857 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d03c      	beq.n	800cbce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	623b      	str	r3, [r7, #32]
   return(result);
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb72:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e6      	bne.n	800cb54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 0301 	bic.w	r3, r3, #1
 800cb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3308      	adds	r3, #8
 800cba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cba6:	61fa      	str	r2, [r7, #28]
 800cba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	69b9      	ldr	r1, [r7, #24]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e5      	bne.n	800cb86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2220      	movs	r2, #32
 800cbbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e012      	b.n	800cbf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3758      	adds	r7, #88	@ 0x58
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc0c:	e04f      	b.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d04b      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc16:	f7f7 fa8f 	bl	8004138 <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d302      	bcc.n	800cc2c <UART_WaitOnFlagUntilTimeout+0x30>
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e04e      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d037      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b80      	cmp	r3, #128	@ 0x80
 800cc42:	d034      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b40      	cmp	r3, #64	@ 0x40
 800cc48:	d031      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	69db      	ldr	r3, [r3, #28]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	d110      	bne.n	800cc7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2208      	movs	r2, #8
 800cc5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 f839 	bl	800ccd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2208      	movs	r2, #8
 800cc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e029      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc88:	d111      	bne.n	800ccae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 f81f 	bl	800ccd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e00f      	b.n	800ccce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	69da      	ldr	r2, [r3, #28]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	bf0c      	ite	eq
 800ccbe:	2301      	moveq	r3, #1
 800ccc0:	2300      	movne	r3, #0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d0a0      	beq.n	800cc0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b095      	sub	sp, #84	@ 0x54
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce8:	e853 3f00 	ldrex	r3, [r3]
 800ccec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e6      	bne.n	800cce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	e853 3f00 	ldrex	r3, [r3]
 800cd20:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd22:	69fa      	ldr	r2, [r7, #28]
 800cd24:	4b1e      	ldr	r3, [pc, #120]	@ (800cda0 <UART_EndRxTransfer+0xc8>)
 800cd26:	4013      	ands	r3, r2
 800cd28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd3a:	e841 2300 	strex	r3, r2, [r1]
 800cd3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1e5      	bne.n	800cd12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d118      	bne.n	800cd80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	e853 3f00 	ldrex	r3, [r3]
 800cd5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f023 0310 	bic.w	r3, r3, #16
 800cd62:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd6c:	61bb      	str	r3, [r7, #24]
 800cd6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd70:	6979      	ldr	r1, [r7, #20]
 800cd72:	69ba      	ldr	r2, [r7, #24]
 800cd74:	e841 2300 	strex	r3, r2, [r1]
 800cd78:	613b      	str	r3, [r7, #16]
   return(result);
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1e6      	bne.n	800cd4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd94:	bf00      	nop
 800cd96:	3754      	adds	r7, #84	@ 0x54
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	effffffe 	.word	0xeffffffe

0800cda4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <HAL_UARTEx_DisableFifoMode+0x16>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e027      	b.n	800ce0a <HAL_UARTEx_DisableFifoMode+0x66>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2224      	movs	r2, #36	@ 0x24
 800cdc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0201 	bic.w	r2, r2, #1
 800cde0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cde8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2220      	movs	r2, #32
 800cdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d101      	bne.n	800ce2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	e02d      	b.n	800ce8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2224      	movs	r2, #36	@ 0x24
 800ce3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f022 0201 	bic.w	r2, r2, #1
 800ce54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f850 	bl	800cf10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d101      	bne.n	800ceaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cea6:	2302      	movs	r3, #2
 800cea8:	e02d      	b.n	800cf06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2224      	movs	r2, #36	@ 0x24
 800ceb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0201 	bic.w	r2, r2, #1
 800ced0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f812 	bl	800cf10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2220      	movs	r2, #32
 800cef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d108      	bne.n	800cf32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf30:	e031      	b.n	800cf96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf32:	2310      	movs	r3, #16
 800cf34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf36:	2310      	movs	r3, #16
 800cf38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	0e5b      	lsrs	r3, r3, #25
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	f003 0307 	and.w	r3, r3, #7
 800cf48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	0f5b      	lsrs	r3, r3, #29
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	f003 0307 	and.w	r3, r3, #7
 800cf58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	7b3a      	ldrb	r2, [r7, #12]
 800cf5e:	4911      	ldr	r1, [pc, #68]	@ (800cfa4 <UARTEx_SetNbDataToProcess+0x94>)
 800cf60:	5c8a      	ldrb	r2, [r1, r2]
 800cf62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf66:	7b3a      	ldrb	r2, [r7, #12]
 800cf68:	490f      	ldr	r1, [pc, #60]	@ (800cfa8 <UARTEx_SetNbDataToProcess+0x98>)
 800cf6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	7b7a      	ldrb	r2, [r7, #13]
 800cf7c:	4909      	ldr	r1, [pc, #36]	@ (800cfa4 <UARTEx_SetNbDataToProcess+0x94>)
 800cf7e:	5c8a      	ldrb	r2, [r1, r2]
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf84:	7b7a      	ldrb	r2, [r7, #13]
 800cf86:	4908      	ldr	r1, [pc, #32]	@ (800cfa8 <UARTEx_SetNbDataToProcess+0x98>)
 800cf88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf96:	bf00      	nop
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	08011b58 	.word	0x08011b58
 800cfa8:	08011b60 	.word	0x08011b60

0800cfac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cfac:	b084      	sub	sp, #16
 800cfae:	b480      	push	{r7}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	f107 001c 	add.w	r0, r7, #28
 800cfba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cfc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cfc6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800cfca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800cfce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800cfd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	4b07      	ldr	r3, [pc, #28]	@ (800cffc <SDMMC_Init+0x50>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	431a      	orrs	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	b004      	add	sp, #16
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	ffc02c00 	.word	0xffc02c00

0800d000 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b083      	sub	sp, #12
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f043 0203 	orr.w	r2, r3, #3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d05e:	b480      	push	{r7}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 0303 	and.w	r3, r3, #3
}
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
	...

0800d07c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d09a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d0a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d0a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68da      	ldr	r2, [r3, #12]
 800d0b2:	4b06      	ldr	r3, [pc, #24]	@ (800d0cc <SDMMC_SendCommand+0x50>)
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	fffee0c0 	.word	0xfffee0c0

0800d0d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	b2db      	uxtb	r3, r3
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr

0800d0ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b085      	sub	sp, #20
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3314      	adds	r3, #20
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d136:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d13c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d142:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	4313      	orrs	r3, r2
 800d148:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	431a      	orrs	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d15a:	2300      	movs	r3, #0

}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d176:	2310      	movs	r3, #16
 800d178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d17a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d180:	2300      	movs	r3, #0
 800d182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d18a:	f107 0308 	add.w	r3, r7, #8
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ff73 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d19a:	2110      	movs	r1, #16
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fa5f 	bl	800d660 <SDMMC_GetCmdResp1>
 800d1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b088      	sub	sp, #32
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d1bc:	2311      	movs	r3, #17
 800d1be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1d0:	f107 0308 	add.w	r3, r7, #8
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff ff50 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d1dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1e0:	2111      	movs	r1, #17
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fa3c 	bl	800d660 <SDMMC_GetCmdResp1>
 800d1e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1ea:	69fb      	ldr	r3, [r7, #28]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3720      	adds	r7, #32
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d202:	2312      	movs	r3, #18
 800d204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d20a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d216:	f107 0308 	add.w	r3, r7, #8
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ff2d 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d222:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d226:	2112      	movs	r1, #18
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fa19 	bl	800d660 <SDMMC_GetCmdResp1>
 800d22e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d230:	69fb      	ldr	r3, [r7, #28]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b088      	sub	sp, #32
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d248:	2318      	movs	r3, #24
 800d24a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d24c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d252:	2300      	movs	r3, #0
 800d254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d25a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d25c:	f107 0308 	add.w	r3, r7, #8
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff ff0a 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d26c:	2118      	movs	r1, #24
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f9f6 	bl	800d660 <SDMMC_GetCmdResp1>
 800d274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d276:	69fb      	ldr	r3, [r7, #28]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3720      	adds	r7, #32
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d28e:	2319      	movs	r3, #25
 800d290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d298:	2300      	movs	r3, #0
 800d29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d29c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2a2:	f107 0308 	add.w	r3, r7, #8
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7ff fee7 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2b2:	2119      	movs	r1, #25
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f9d3 	bl	800d660 <SDMMC_GetCmdResp1>
 800d2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2bc:	69fb      	ldr	r3, [r7, #28]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b088      	sub	sp, #32
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d300:	f107 0308 	add.w	r3, r7, #8
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7ff feb8 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d30c:	4a0b      	ldr	r2, [pc, #44]	@ (800d33c <SDMMC_CmdStopTransfer+0x74>)
 800d30e:	210c      	movs	r1, #12
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f9a5 	bl	800d660 <SDMMC_GetCmdResp1>
 800d316:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d32a:	d101      	bne.n	800d330 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d32c:	2300      	movs	r3, #0
 800d32e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d330:	69fb      	ldr	r3, [r7, #28]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	05f5e100 	.word	0x05f5e100

0800d340 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d34e:	2307      	movs	r3, #7
 800d350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d358:	2300      	movs	r3, #0
 800d35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d35c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d362:	f107 0308 	add.w	r3, r7, #8
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fe87 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d36e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d372:	2107      	movs	r1, #7
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f973 	bl	800d660 <SDMMC_GetCmdResp1>
 800d37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d37c:	69fb      	ldr	r3, [r7, #28]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3720      	adds	r7, #32
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b088      	sub	sp, #32
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d39a:	2300      	movs	r3, #0
 800d39c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d39e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3a4:	f107 0308 	add.w	r3, r7, #8
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff fe66 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fb97 	bl	800dae4 <SDMMC_GetCmdError>
 800d3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3b8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b088      	sub	sp, #32
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d3ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d3ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d3d0:	2308      	movs	r3, #8
 800d3d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3e4:	f107 0308 	add.w	r3, r7, #8
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7ff fe46 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fb29 	bl	800da48 <SDMMC_GetCmdResp7>
 800d3f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b088      	sub	sp, #32
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d410:	2337      	movs	r3, #55	@ 0x37
 800d412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d41a:	2300      	movs	r3, #0
 800d41c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d41e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d424:	f107 0308 	add.w	r3, r7, #8
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f7ff fe26 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d430:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d434:	2137      	movs	r1, #55	@ 0x37
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f912 	bl	800d660 <SDMMC_GetCmdResp1>
 800d43c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d43e:	69fb      	ldr	r3, [r7, #28]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3720      	adds	r7, #32
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d456:	2329      	movs	r3, #41	@ 0x29
 800d458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d45a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d460:	2300      	movs	r3, #0
 800d462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d46a:	f107 0308 	add.w	r3, r7, #8
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff fe03 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa2e 	bl	800d8d8 <SDMMC_GetCmdResp3>
 800d47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d47e:	69fb      	ldr	r3, [r7, #28]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d496:	2306      	movs	r3, #6
 800d498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d49a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff fde3 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4ba:	2106      	movs	r1, #6
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f8cf 	bl	800d660 <SDMMC_GetCmdResp1>
 800d4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b088      	sub	sp, #32
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d4da:	2333      	movs	r3, #51	@ 0x33
 800d4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fdc1 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4fe:	2133      	movs	r1, #51	@ 0x33
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f8ad 	bl	800d660 <SDMMC_GetCmdResp1>
 800d506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d508:	69fb      	ldr	r3, [r7, #28]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b088      	sub	sp, #32
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d51e:	2302      	movs	r3, #2
 800d520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d522:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d528:	2300      	movs	r3, #0
 800d52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d52c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d532:	f107 0308 	add.w	r3, r7, #8
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff fd9f 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f980 	bl	800d844 <SDMMC_GetCmdResp2>
 800d544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d55e:	2309      	movs	r3, #9
 800d560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d562:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d568:	2300      	movs	r3, #0
 800d56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d56c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d572:	f107 0308 	add.w	r3, r7, #8
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff fd7f 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f960 	bl	800d844 <SDMMC_GetCmdResp2>
 800d584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b2:	f107 0308 	add.w	r3, r7, #8
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff fd5f 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	2103      	movs	r1, #3
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f9c8 	bl	800d958 <SDMMC_GetCmdResp6>
 800d5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d5e2:	230d      	movs	r3, #13
 800d5e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff fd3d 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d602:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d606:	210d      	movs	r1, #13
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f829 	bl	800d660 <SDMMC_GetCmdResp1>
 800d60e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d610:	69fb      	ldr	r3, [r7, #28]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b088      	sub	sp, #32
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d622:	2300      	movs	r3, #0
 800d624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d626:	230d      	movs	r3, #13
 800d628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d62a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d63a:	f107 0308 	add.w	r3, r7, #8
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff fd1b 	bl	800d07c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d64a:	210d      	movs	r1, #13
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f807 	bl	800d660 <SDMMC_GetCmdResp1>
 800d652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d654:	69fb      	ldr	r3, [r7, #28]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3720      	adds	r7, #32
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	460b      	mov	r3, r1
 800d66a:	607a      	str	r2, [r7, #4]
 800d66c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d66e:	4b70      	ldr	r3, [pc, #448]	@ (800d830 <SDMMC_GetCmdResp1+0x1d0>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a70      	ldr	r2, [pc, #448]	@ (800d834 <SDMMC_GetCmdResp1+0x1d4>)
 800d674:	fba2 2303 	umull	r2, r3, r2, r3
 800d678:	0a5a      	lsrs	r2, r3, #9
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	fb02 f303 	mul.w	r3, r2, r3
 800d680:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	1e5a      	subs	r2, r3, #1
 800d686:	61fa      	str	r2, [r7, #28]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d68c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d690:	e0c9      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d696:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d698:	69ba      	ldr	r2, [r7, #24]
 800d69a:	4b67      	ldr	r3, [pc, #412]	@ (800d838 <SDMMC_GetCmdResp1+0x1d8>)
 800d69c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0ef      	beq.n	800d682 <SDMMC_GetCmdResp1+0x22>
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1ea      	bne.n	800d682 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6be:	2304      	movs	r3, #4
 800d6c0:	e0b1      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e0a6      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	4a58      	ldr	r2, [pc, #352]	@ (800d83c <SDMMC_GetCmdResp1+0x1dc>)
 800d6dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff fcf6 	bl	800d0d0 <SDMMC_GetCommandResponse>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	7afb      	ldrb	r3, [r7, #11]
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d001      	beq.n	800d6f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e099      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fcf8 	bl	800d0ea <SDMMC_GetResponse>
 800d6fa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	4b50      	ldr	r3, [pc, #320]	@ (800d840 <SDMMC_GetCmdResp1+0x1e0>)
 800d700:	4013      	ands	r3, r2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d706:	2300      	movs	r3, #0
 800d708:	e08d      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	da02      	bge.n	800d716 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d710:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d714:	e087      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d720:	2340      	movs	r3, #64	@ 0x40
 800d722:	e080      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d72e:	2380      	movs	r3, #128	@ 0x80
 800d730:	e079      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d73c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d740:	e071      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d74c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d750:	e069      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d75c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d760:	e061      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d76c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d770:	e059      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d77c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d780:	e051      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d78c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d790:	e049      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d79c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d7a0:	e041      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7b0:	e039      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d7bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d7c0:	e031      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d7cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d7d0:	e029      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d7dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7e0:	e021      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d7ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d7f0:	e019      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d7fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d800:	e011      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d80c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d810:	e009      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f003 0308 	and.w	r3, r3, #8
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d81c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d820:	e001      	b.n	800d826 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d826:	4618      	mov	r0, r3
 800d828:	3720      	adds	r7, #32
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	24000050 	.word	0x24000050
 800d834:	10624dd3 	.word	0x10624dd3
 800d838:	00200045 	.word	0x00200045
 800d83c:	002000c5 	.word	0x002000c5
 800d840:	fdffe008 	.word	0xfdffe008

0800d844 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d84c:	4b1f      	ldr	r3, [pc, #124]	@ (800d8cc <SDMMC_GetCmdResp2+0x88>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d0 <SDMMC_GetCmdResp2+0x8c>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	0a5b      	lsrs	r3, r3, #9
 800d858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d85c:	fb02 f303 	mul.w	r3, r2, r3
 800d860:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	60fa      	str	r2, [r7, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d86c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d870:	e026      	b.n	800d8c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d876:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0ef      	beq.n	800d862 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1ea      	bne.n	800d862 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2204      	movs	r2, #4
 800d89c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d89e:	2304      	movs	r3, #4
 800d8a0:	e00e      	b.n	800d8c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e003      	b.n	800d8c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a06      	ldr	r2, [pc, #24]	@ (800d8d4 <SDMMC_GetCmdResp2+0x90>)
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3714      	adds	r7, #20
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	24000050 	.word	0x24000050
 800d8d0:	10624dd3 	.word	0x10624dd3
 800d8d4:	002000c5 	.word	0x002000c5

0800d8d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d94c <SDMMC_GetCmdResp3+0x74>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a1a      	ldr	r2, [pc, #104]	@ (800d950 <SDMMC_GetCmdResp3+0x78>)
 800d8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ea:	0a5b      	lsrs	r3, r3, #9
 800d8ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8f0:	fb02 f303 	mul.w	r3, r2, r3
 800d8f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	1e5a      	subs	r2, r3, #1
 800d8fa:	60fa      	str	r2, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d102      	bne.n	800d906 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d900:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d904:	e01b      	b.n	800d93e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d90a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0ef      	beq.n	800d8f6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1ea      	bne.n	800d8f6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d924:	f003 0304 	and.w	r3, r3, #4
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2204      	movs	r2, #4
 800d930:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d932:	2304      	movs	r3, #4
 800d934:	e003      	b.n	800d93e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a06      	ldr	r2, [pc, #24]	@ (800d954 <SDMMC_GetCmdResp3+0x7c>)
 800d93a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	24000050 	.word	0x24000050
 800d950:	10624dd3 	.word	0x10624dd3
 800d954:	002000c5 	.word	0x002000c5

0800d958 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	460b      	mov	r3, r1
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d966:	4b35      	ldr	r3, [pc, #212]	@ (800da3c <SDMMC_GetCmdResp6+0xe4>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a35      	ldr	r2, [pc, #212]	@ (800da40 <SDMMC_GetCmdResp6+0xe8>)
 800d96c:	fba2 2303 	umull	r2, r3, r2, r3
 800d970:	0a5b      	lsrs	r3, r3, #9
 800d972:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d976:	fb02 f303 	mul.w	r3, r2, r3
 800d97a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	1e5a      	subs	r2, r3, #1
 800d980:	61fa      	str	r2, [r7, #28]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d102      	bne.n	800d98c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d986:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d98a:	e052      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d990:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0ef      	beq.n	800d97c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1ea      	bne.n	800d97c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9aa:	f003 0304 	and.w	r3, r3, #4
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2204      	movs	r2, #4
 800d9b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9b8:	2304      	movs	r3, #4
 800d9ba:	e03a      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c0:	f003 0301 	and.w	r3, r3, #1
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d004      	beq.n	800d9d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e02f      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f7ff fb7c 	bl	800d0d0 <SDMMC_GetCommandResponse>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	461a      	mov	r2, r3
 800d9dc:	7afb      	ldrb	r3, [r7, #11]
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d001      	beq.n	800d9e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e025      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	4a16      	ldr	r2, [pc, #88]	@ (800da44 <SDMMC_GetCmdResp6+0xec>)
 800d9ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f7ff fb7b 	bl	800d0ea <SDMMC_GetResponse>
 800d9f4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d106      	bne.n	800da0e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	0c1b      	lsrs	r3, r3, #16
 800da04:	b29a      	uxth	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e011      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da1c:	e009      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da2c:	e001      	b.n	800da32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da32:	4618      	mov	r0, r3
 800da34:	3720      	adds	r7, #32
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	24000050 	.word	0x24000050
 800da40:	10624dd3 	.word	0x10624dd3
 800da44:	002000c5 	.word	0x002000c5

0800da48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da50:	4b22      	ldr	r3, [pc, #136]	@ (800dadc <SDMMC_GetCmdResp7+0x94>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a22      	ldr	r2, [pc, #136]	@ (800dae0 <SDMMC_GetCmdResp7+0x98>)
 800da56:	fba2 2303 	umull	r2, r3, r2, r3
 800da5a:	0a5b      	lsrs	r3, r3, #9
 800da5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da60:	fb02 f303 	mul.w	r3, r2, r3
 800da64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	1e5a      	subs	r2, r3, #1
 800da6a:	60fa      	str	r2, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d102      	bne.n	800da76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da74:	e02c      	b.n	800dad0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0ef      	beq.n	800da66 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1ea      	bne.n	800da66 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da94:	f003 0304 	and.w	r3, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d004      	beq.n	800daa6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2204      	movs	r2, #4
 800daa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa2:	2304      	movs	r3, #4
 800daa4:	e014      	b.n	800dad0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2201      	movs	r2, #1
 800dab6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dab8:	2301      	movs	r3, #1
 800daba:	e009      	b.n	800dad0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2240      	movs	r2, #64	@ 0x40
 800dacc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dace:	2300      	movs	r3, #0

}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3714      	adds	r7, #20
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	24000050 	.word	0x24000050
 800dae0:	10624dd3 	.word	0x10624dd3

0800dae4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800daec:	4b11      	ldr	r3, [pc, #68]	@ (800db34 <SDMMC_GetCmdError+0x50>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a11      	ldr	r2, [pc, #68]	@ (800db38 <SDMMC_GetCmdError+0x54>)
 800daf2:	fba2 2303 	umull	r2, r3, r2, r3
 800daf6:	0a5b      	lsrs	r3, r3, #9
 800daf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dafc:	fb02 f303 	mul.w	r3, r2, r3
 800db00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	1e5a      	subs	r2, r3, #1
 800db06:	60fa      	str	r2, [r7, #12]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d102      	bne.n	800db12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db10:	e009      	b.n	800db26 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0f1      	beq.n	800db02 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a06      	ldr	r2, [pc, #24]	@ (800db3c <SDMMC_GetCmdError+0x58>)
 800db22:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	24000050 	.word	0x24000050
 800db38:	10624dd3 	.word	0x10624dd3
 800db3c:	002000c5 	.word	0x002000c5

0800db40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db44:	4904      	ldr	r1, [pc, #16]	@ (800db58 <MX_FATFS_Init+0x18>)
 800db46:	4805      	ldr	r0, [pc, #20]	@ (800db5c <MX_FATFS_Init+0x1c>)
 800db48:	f002 fc08 	bl	801035c <FATFS_LinkDriver>
 800db4c:	4603      	mov	r3, r0
 800db4e:	461a      	mov	r2, r3
 800db50:	4b03      	ldr	r3, [pc, #12]	@ (800db60 <MX_FATFS_Init+0x20>)
 800db52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db54:	bf00      	nop
 800db56:	bd80      	pop	{r7, pc}
 800db58:	24000590 	.word	0x24000590
 800db5c:	08011b68 	.word	0x08011b68
 800db60:	2400058c 	.word	0x2400058c

0800db64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800db68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68ba      	ldr	r2, [r7, #8]
 800db88:	68f9      	ldr	r1, [r7, #12]
 800db8a:	4806      	ldr	r0, [pc, #24]	@ (800dba4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800db8c:	f7fc f95e 	bl	8009e4c <HAL_SD_ReadBlocks_DMA>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	24000420 	.word	0x24000420

0800dba8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	68f9      	ldr	r1, [r7, #12]
 800dbbe:	4806      	ldr	r0, [pc, #24]	@ (800dbd8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dbc0:	f7fc f9ec 	bl	8009f9c <HAL_SD_WriteBlocks_DMA>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	24000420 	.word	0x24000420

0800dbdc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbe0:	4805      	ldr	r0, [pc, #20]	@ (800dbf8 <BSP_SD_GetCardState+0x1c>)
 800dbe2:	f7fc ffe5 	bl	800abb0 <HAL_SD_GetCardState>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	bf14      	ite	ne
 800dbec:	2301      	movne	r3, #1
 800dbee:	2300      	moveq	r3, #0
 800dbf0:	b2db      	uxtb	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	24000420 	.word	0x24000420

0800dbfc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc04:	6879      	ldr	r1, [r7, #4]
 800dc06:	4803      	ldr	r0, [pc, #12]	@ (800dc14 <BSP_SD_GetCardInfo+0x18>)
 800dc08:	f7fc fe94 	bl	800a934 <HAL_SD_GetCardInfo>
}
 800dc0c:	bf00      	nop
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	24000420 	.word	0x24000420

0800dc18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dc20:	f000 fa14 	bl	800e04c <BSP_SD_WriteCpltCallback>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dc34:	f000 fa16 	bl	800e064 <BSP_SD_ReadCpltCallback>
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dc48:	f7f6 fa76 	bl	8004138 <HAL_GetTick>
 800dc4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dc4e:	e006      	b.n	800dc5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc50:	f7ff ffc4 	bl	800dbdc <BSP_SD_GetCardState>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	e009      	b.n	800dc72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dc5e:	f7f6 fa6b 	bl	8004138 <HAL_GetTick>
 800dc62:	4602      	mov	r2, r0
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d8f0      	bhi.n	800dc50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dc6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
	...

0800dc7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc86:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb4 <SD_CheckStatus+0x38>)
 800dc88:	2201      	movs	r2, #1
 800dc8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dc8c:	f7ff ffa6 	bl	800dbdc <BSP_SD_GetCardState>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d107      	bne.n	800dca6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc96:	4b07      	ldr	r3, [pc, #28]	@ (800dcb4 <SD_CheckStatus+0x38>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	f023 0301 	bic.w	r3, r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	4b04      	ldr	r3, [pc, #16]	@ (800dcb4 <SD_CheckStatus+0x38>)
 800dca4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dca6:	4b03      	ldr	r3, [pc, #12]	@ (800dcb4 <SD_CheckStatus+0x38>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	b2db      	uxtb	r3, r3
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	2400005d 	.word	0x2400005d

0800dcb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff ffd9 	bl	800dc7c <SD_CheckStatus>
 800dcca:	4603      	mov	r3, r0
 800dccc:	461a      	mov	r2, r3
 800dcce:	4b04      	ldr	r3, [pc, #16]	@ (800dce0 <SD_initialize+0x28>)
 800dcd0:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800dcd2:	4b03      	ldr	r3, [pc, #12]	@ (800dce0 <SD_initialize+0x28>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b2db      	uxtb	r3, r3
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	2400005d 	.word	0x2400005d

0800dce4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff ffc3 	bl	800dc7c <SD_CheckStatus>
 800dcf6:	4603      	mov	r3, r0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
 800dd0a:	603b      	str	r3, [r7, #0]
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd14:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dd18:	f7ff ff92 	bl	800dc40 <SD_CheckStatusWithTimeout>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da01      	bge.n	800dd26 <SD_read+0x26>
  {
    return res;
 800dd22:	7ffb      	ldrb	r3, [r7, #31]
 800dd24:	e08b      	b.n	800de3e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f003 0303 	and.w	r3, r3, #3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d13b      	bne.n	800dda8 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	68b8      	ldr	r0, [r7, #8]
 800dd36:	f7ff ff1d 	bl	800db74 <BSP_SD_ReadBlocks_DMA>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d17d      	bne.n	800de3c <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800dd40:	4b41      	ldr	r3, [pc, #260]	@ (800de48 <SD_read+0x148>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dd46:	f7f6 f9f7 	bl	8004138 <HAL_GetTick>
 800dd4a:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dd4c:	bf00      	nop
 800dd4e:	4b3e      	ldr	r3, [pc, #248]	@ (800de48 <SD_read+0x148>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d108      	bne.n	800dd68 <SD_read+0x68>
 800dd56:	f7f6 f9ef 	bl	8004138 <HAL_GetTick>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d9f2      	bls.n	800dd4e <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800dd68:	4b37      	ldr	r3, [pc, #220]	@ (800de48 <SD_read+0x148>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <SD_read+0x76>
      {
        res = RES_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	77fb      	strb	r3, [r7, #31]
 800dd74:	e062      	b.n	800de3c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800dd76:	4b34      	ldr	r3, [pc, #208]	@ (800de48 <SD_read+0x148>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dd7c:	f7f6 f9dc 	bl	8004138 <HAL_GetTick>
 800dd80:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd82:	e007      	b.n	800dd94 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd84:	f7ff ff2a 	bl	800dbdc <BSP_SD_GetCardState>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <SD_read+0x94>
          {
            res = RES_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dd92:	e053      	b.n	800de3c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dd94:	f7f6 f9d0 	bl	8004138 <HAL_GetTick>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d9ee      	bls.n	800dd84 <SD_read+0x84>
 800dda6:	e049      	b.n	800de3c <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61bb      	str	r3, [r7, #24]
 800ddac:	e037      	b.n	800de1e <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4824      	ldr	r0, [pc, #144]	@ (800de4c <SD_read+0x14c>)
 800ddba:	f7ff fedb 	bl	800db74 <BSP_SD_ReadBlocks_DMA>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800ddc2:	7fbb      	ldrb	r3, [r7, #30]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d12f      	bne.n	800de28 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800ddc8:	f7f6 f9b6 	bl	8004138 <HAL_GetTick>
 800ddcc:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ddce:	bf00      	nop
 800ddd0:	4b1d      	ldr	r3, [pc, #116]	@ (800de48 <SD_read+0x148>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d108      	bne.n	800ddea <SD_read+0xea>
 800ddd8:	f7f6 f9ae 	bl	8004138 <HAL_GetTick>
 800dddc:	4602      	mov	r2, r0
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d9f2      	bls.n	800ddd0 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 800ddea:	4b17      	ldr	r3, [pc, #92]	@ (800de48 <SD_read+0x148>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d102      	bne.n	800ddf8 <SD_read+0xf8>
          {
            res = RES_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	77fb      	strb	r3, [r7, #31]
            break;
 800ddf6:	e018      	b.n	800de2a <SD_read+0x12a>
          }
          ReadStatus = 0;
 800ddf8:	4b13      	ldr	r3, [pc, #76]	@ (800de48 <SD_read+0x148>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	4a12      	ldr	r2, [pc, #72]	@ (800de4c <SD_read+0x14c>)
 800de02:	4618      	mov	r0, r3
 800de04:	4611      	mov	r1, r2
 800de06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de0a:	461a      	mov	r2, r3
 800de0c:	f003 f825 	bl	8010e5a <memcpy>
          buff += BLOCKSIZE;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800de16:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	3301      	adds	r3, #1
 800de1c:	61bb      	str	r3, [r7, #24]
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d8c3      	bhi.n	800ddae <SD_read+0xae>
 800de26:	e000      	b.n	800de2a <SD_read+0x12a>
        }
        else
        {
          break;
 800de28:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d104      	bne.n	800de3c <SD_read+0x13c>
 800de32:	7fbb      	ldrb	r3, [r7, #30]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d101      	bne.n	800de3c <SD_read+0x13c>
        res = RES_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 800de3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3720      	adds	r7, #32
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	24000bf8 	.word	0x24000bf8
 800de4c:	240009f4 	.word	0x240009f4

0800de50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af00      	add	r7, sp, #0
 800de56:	60b9      	str	r1, [r7, #8]
 800de58:	607a      	str	r2, [r7, #4]
 800de5a:	603b      	str	r3, [r7, #0]
 800de5c:	4603      	mov	r3, r0
 800de5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800de64:	4b4b      	ldr	r3, [pc, #300]	@ (800df94 <SD_write+0x144>)
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de6a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800de6e:	f7ff fee7 	bl	800dc40 <SD_CheckStatusWithTimeout>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	da01      	bge.n	800de7c <SD_write+0x2c>
  {
    return res;
 800de78:	7ffb      	ldrb	r3, [r7, #31]
 800de7a:	e087      	b.n	800df8c <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	f003 0303 	and.w	r3, r3, #3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d138      	bne.n	800def8 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	68b8      	ldr	r0, [r7, #8]
 800de8c:	f7ff fe8c 	bl	800dba8 <BSP_SD_WriteBlocks_DMA>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d179      	bne.n	800df8a <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800de96:	f7f6 f94f 	bl	8004138 <HAL_GetTick>
 800de9a:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de9c:	bf00      	nop
 800de9e:	4b3d      	ldr	r3, [pc, #244]	@ (800df94 <SD_write+0x144>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d108      	bne.n	800deb8 <SD_write+0x68>
 800dea6:	f7f6 f947 	bl	8004138 <HAL_GetTick>
 800deaa:	4602      	mov	r2, r0
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d9f2      	bls.n	800de9e <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800deb8:	4b36      	ldr	r3, [pc, #216]	@ (800df94 <SD_write+0x144>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d102      	bne.n	800dec6 <SD_write+0x76>
      {
        res = RES_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	77fb      	strb	r3, [r7, #31]
 800dec4:	e061      	b.n	800df8a <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 800dec6:	4b33      	ldr	r3, [pc, #204]	@ (800df94 <SD_write+0x144>)
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800decc:	f7f6 f934 	bl	8004138 <HAL_GetTick>
 800ded0:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ded2:	e007      	b.n	800dee4 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ded4:	f7ff fe82 	bl	800dbdc <BSP_SD_GetCardState>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d102      	bne.n	800dee4 <SD_write+0x94>
          {
            res = RES_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	77fb      	strb	r3, [r7, #31]
            break;
 800dee2:	e052      	b.n	800df8a <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dee4:	f7f6 f928 	bl	8004138 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f247 522f 	movw	r2, #29999	@ 0x752f
 800def2:	4293      	cmp	r3, r2
 800def4:	d9ee      	bls.n	800ded4 <SD_write+0x84>
 800def6:	e048      	b.n	800df8a <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800def8:	2300      	movs	r3, #0
 800defa:	61bb      	str	r3, [r7, #24]
 800defc:	e034      	b.n	800df68 <SD_write+0x118>
      {
        WriteStatus = 0;
 800defe:	4b25      	ldr	r3, [pc, #148]	@ (800df94 <SD_write+0x144>)
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800df04:	4a24      	ldr	r2, [pc, #144]	@ (800df98 <SD_write+0x148>)
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4610      	mov	r0, r2
 800df0a:	4619      	mov	r1, r3
 800df0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df10:	461a      	mov	r2, r3
 800df12:	f002 ffa2 	bl	8010e5a <memcpy>
        buff += BLOCKSIZE;
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800df1c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	4619      	mov	r1, r3
 800df28:	481b      	ldr	r0, [pc, #108]	@ (800df98 <SD_write+0x148>)
 800df2a:	f7ff fe3d 	bl	800dba8 <BSP_SD_WriteBlocks_DMA>
 800df2e:	4603      	mov	r3, r0
 800df30:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800df32:	7fbb      	ldrb	r3, [r7, #30]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d11c      	bne.n	800df72 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800df38:	f7f6 f8fe 	bl	8004138 <HAL_GetTick>
 800df3c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df3e:	bf00      	nop
 800df40:	4b14      	ldr	r3, [pc, #80]	@ (800df94 <SD_write+0x144>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d108      	bne.n	800df5a <SD_write+0x10a>
 800df48:	f7f6 f8f6 	bl	8004138 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	f247 522f 	movw	r2, #29999	@ 0x752f
 800df56:	4293      	cmp	r3, r2
 800df58:	d9f2      	bls.n	800df40 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 800df5a:	4b0e      	ldr	r3, [pc, #56]	@ (800df94 <SD_write+0x144>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d009      	beq.n	800df76 <SD_write+0x126>
      for (i = 0; i < count; i++)
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	3301      	adds	r3, #1
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d8c6      	bhi.n	800defe <SD_write+0xae>
 800df70:	e002      	b.n	800df78 <SD_write+0x128>
          }

        }
        else
        {
          break;
 800df72:	bf00      	nop
 800df74:	e000      	b.n	800df78 <SD_write+0x128>
            break;
 800df76:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d104      	bne.n	800df8a <SD_write+0x13a>
 800df80:	7fbb      	ldrb	r3, [r7, #30]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <SD_write+0x13a>
        res = RES_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 800df8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3720      	adds	r7, #32
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	24000bf4 	.word	0x24000bf4
 800df98:	240009f4 	.word	0x240009f4

0800df9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08c      	sub	sp, #48	@ 0x30
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	603a      	str	r2, [r7, #0]
 800dfa6:	71fb      	strb	r3, [r7, #7]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dfb2:	4b25      	ldr	r3, [pc, #148]	@ (800e048 <SD_ioctl+0xac>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <SD_ioctl+0x28>
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e03c      	b.n	800e03e <SD_ioctl+0xa2>

  switch (cmd)
 800dfc4:	79bb      	ldrb	r3, [r7, #6]
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d834      	bhi.n	800e034 <SD_ioctl+0x98>
 800dfca:	a201      	add	r2, pc, #4	@ (adr r2, 800dfd0 <SD_ioctl+0x34>)
 800dfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd0:	0800dfe1 	.word	0x0800dfe1
 800dfd4:	0800dfe9 	.word	0x0800dfe9
 800dfd8:	0800e001 	.word	0x0800e001
 800dfdc:	0800e01b 	.word	0x0800e01b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dfe6:	e028      	b.n	800e03a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dfe8:	f107 0308 	add.w	r3, r7, #8
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7ff fe05 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dff2:	6a3a      	ldr	r2, [r7, #32]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dffe:	e01c      	b.n	800e03a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e000:	f107 0308 	add.w	r3, r7, #8
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff fdf9 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e012:	2300      	movs	r3, #0
 800e014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e018:	e00f      	b.n	800e03a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e01a:	f107 0308 	add.w	r3, r7, #8
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff fdec 	bl	800dbfc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e026:	0a5a      	lsrs	r2, r3, #9
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e032:	e002      	b.n	800e03a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e034:	2304      	movs	r3, #4
 800e036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e03a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3730      	adds	r7, #48	@ 0x30
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	2400005d 	.word	0x2400005d

0800e04c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e050:	4b03      	ldr	r3, [pc, #12]	@ (800e060 <BSP_SD_WriteCpltCallback+0x14>)
 800e052:	2201      	movs	r2, #1
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	24000bf4 	.word	0x24000bf4

0800e064 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e064:	b480      	push	{r7}
 800e066:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e068:	4b03      	ldr	r3, [pc, #12]	@ (800e078 <BSP_SD_ReadCpltCallback+0x14>)
 800e06a:	2201      	movs	r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
}
 800e06e:	bf00      	nop
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	24000bf8 	.word	0x24000bf8

0800e07c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	4603      	mov	r3, r0
 800e084:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	4a08      	ldr	r2, [pc, #32]	@ (800e0ac <disk_status+0x30>)
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	79fa      	ldrb	r2, [r7, #7]
 800e094:	4905      	ldr	r1, [pc, #20]	@ (800e0ac <disk_status+0x30>)
 800e096:	440a      	add	r2, r1
 800e098:	7a12      	ldrb	r2, [r2, #8]
 800e09a:	4610      	mov	r0, r2
 800e09c:	4798      	blx	r3
 800e09e:	4603      	mov	r3, r0
 800e0a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	24000c24 	.word	0x24000c24

0800e0b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	4a0e      	ldr	r2, [pc, #56]	@ (800e0fc <disk_initialize+0x4c>)
 800e0c2:	5cd3      	ldrb	r3, [r2, r3]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d114      	bne.n	800e0f2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	4a0c      	ldr	r2, [pc, #48]	@ (800e0fc <disk_initialize+0x4c>)
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	79fa      	ldrb	r2, [r7, #7]
 800e0d6:	4909      	ldr	r1, [pc, #36]	@ (800e0fc <disk_initialize+0x4c>)
 800e0d8:	440a      	add	r2, r1
 800e0da:	7a12      	ldrb	r2, [r2, #8]
 800e0dc:	4610      	mov	r0, r2
 800e0de:	4798      	blx	r3
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d103      	bne.n	800e0f2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	4a03      	ldr	r2, [pc, #12]	@ (800e0fc <disk_initialize+0x4c>)
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	24000c24 	.word	0x24000c24

0800e100 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b087      	sub	sp, #28
 800e104:	af00      	add	r7, sp, #0
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	607a      	str	r2, [r7, #4]
 800e10a:	603b      	str	r3, [r7, #0]
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	4a0a      	ldr	r2, [pc, #40]	@ (800e13c <disk_read+0x3c>)
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	689c      	ldr	r4, [r3, #8]
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
 800e11e:	4a07      	ldr	r2, [pc, #28]	@ (800e13c <disk_read+0x3c>)
 800e120:	4413      	add	r3, r2
 800e122:	7a18      	ldrb	r0, [r3, #8]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	47a0      	blx	r4
 800e12c:	4603      	mov	r3, r0
 800e12e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e130:	7dfb      	ldrb	r3, [r7, #23]
}
 800e132:	4618      	mov	r0, r3
 800e134:	371c      	adds	r7, #28
 800e136:	46bd      	mov	sp, r7
 800e138:	bd90      	pop	{r4, r7, pc}
 800e13a:	bf00      	nop
 800e13c:	24000c24 	.word	0x24000c24

0800e140 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b087      	sub	sp, #28
 800e144:	af00      	add	r7, sp, #0
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	607a      	str	r2, [r7, #4]
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	4603      	mov	r3, r0
 800e14e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e150:	7bfb      	ldrb	r3, [r7, #15]
 800e152:	4a0a      	ldr	r2, [pc, #40]	@ (800e17c <disk_write+0x3c>)
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	68dc      	ldr	r4, [r3, #12]
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	4a07      	ldr	r2, [pc, #28]	@ (800e17c <disk_write+0x3c>)
 800e160:	4413      	add	r3, r2
 800e162:	7a18      	ldrb	r0, [r3, #8]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	68b9      	ldr	r1, [r7, #8]
 800e16a:	47a0      	blx	r4
 800e16c:	4603      	mov	r3, r0
 800e16e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e170:	7dfb      	ldrb	r3, [r7, #23]
}
 800e172:	4618      	mov	r0, r3
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	bd90      	pop	{r4, r7, pc}
 800e17a:	bf00      	nop
 800e17c:	24000c24 	.word	0x24000c24

0800e180 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	4603      	mov	r3, r0
 800e188:	603a      	str	r2, [r7, #0]
 800e18a:	71fb      	strb	r3, [r7, #7]
 800e18c:	460b      	mov	r3, r1
 800e18e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e190:	79fb      	ldrb	r3, [r7, #7]
 800e192:	4a09      	ldr	r2, [pc, #36]	@ (800e1b8 <disk_ioctl+0x38>)
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	79fa      	ldrb	r2, [r7, #7]
 800e19e:	4906      	ldr	r1, [pc, #24]	@ (800e1b8 <disk_ioctl+0x38>)
 800e1a0:	440a      	add	r2, r1
 800e1a2:	7a10      	ldrb	r0, [r2, #8]
 800e1a4:	79b9      	ldrb	r1, [r7, #6]
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	4798      	blx	r3
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	24000c24 	.word	0x24000c24

0800e1bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e1cc:	89fb      	ldrh	r3, [r7, #14]
 800e1ce:	021b      	lsls	r3, r3, #8
 800e1d0:	b21a      	sxth	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	b21b      	sxth	r3, r3
 800e1dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e1de:	89fb      	ldrh	r3, [r7, #14]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3714      	adds	r7, #20
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3303      	adds	r3, #3
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	3202      	adds	r2, #2
 800e204:	7812      	ldrb	r2, [r2, #0]
 800e206:	4313      	orrs	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	3201      	adds	r2, #1
 800e212:	7812      	ldrb	r2, [r2, #0]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	021b      	lsls	r3, r3, #8
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	7812      	ldrb	r2, [r2, #0]
 800e220:	4313      	orrs	r3, r2
 800e222:	60fb      	str	r3, [r7, #12]
	return rv;
 800e224:	68fb      	ldr	r3, [r7, #12]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e232:	b480      	push	{r7}
 800e234:	b083      	sub	sp, #12
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	460b      	mov	r3, r1
 800e23c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	887a      	ldrh	r2, [r7, #2]
 800e246:	b2d2      	uxtb	r2, r2
 800e248:	701a      	strb	r2, [r3, #0]
 800e24a:	887b      	ldrh	r3, [r7, #2]
 800e24c:	0a1b      	lsrs	r3, r3, #8
 800e24e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	1c5a      	adds	r2, r3, #1
 800e254:	607a      	str	r2, [r7, #4]
 800e256:	887a      	ldrh	r2, [r7, #2]
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
}
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	0a1b      	lsrs	r3, r3, #8
 800e282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	1c5a      	adds	r2, r3, #1
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	b2d2      	uxtb	r2, r2
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	0a1b      	lsrs	r3, r3, #8
 800e294:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	701a      	strb	r2, [r3, #0]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	0a1b      	lsrs	r3, r3, #8
 800e2a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	607a      	str	r2, [r7, #4]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	b2d2      	uxtb	r2, r2
 800e2b2:	701a      	strb	r2, [r3, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e2c0:	b480      	push	{r7}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00d      	beq.n	800e2f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	1c53      	adds	r3, r2, #1
 800e2de:	613b      	str	r3, [r7, #16]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	1c59      	adds	r1, r3, #1
 800e2e4:	6179      	str	r1, [r7, #20]
 800e2e6:	7812      	ldrb	r2, [r2, #0]
 800e2e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	607b      	str	r3, [r7, #4]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1f1      	bne.n	800e2da <mem_cpy+0x1a>
	}
}
 800e2f6:	bf00      	nop
 800e2f8:	371c      	adds	r7, #28
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e302:	b480      	push	{r7}
 800e304:	b087      	sub	sp, #28
 800e306:	af00      	add	r7, sp, #0
 800e308:	60f8      	str	r0, [r7, #12]
 800e30a:	60b9      	str	r1, [r7, #8]
 800e30c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	617a      	str	r2, [r7, #20]
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	3b01      	subs	r3, #1
 800e322:	607b      	str	r3, [r7, #4]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1f3      	bne.n	800e312 <mem_set+0x10>
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	371c      	adds	r7, #28
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e338:	b480      	push	{r7}
 800e33a:	b089      	sub	sp, #36	@ 0x24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	61fb      	str	r3, [r7, #28]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	61fa      	str	r2, [r7, #28]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	4619      	mov	r1, r3
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	61ba      	str	r2, [r7, #24]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	1acb      	subs	r3, r1, r3
 800e364:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3b01      	subs	r3, #1
 800e36a:	607b      	str	r3, [r7, #4]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <mem_cmp+0x40>
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d0eb      	beq.n	800e350 <mem_cmp+0x18>

	return r;
 800e378:	697b      	ldr	r3, [r7, #20]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3724      	adds	r7, #36	@ 0x24
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e386:	b480      	push	{r7}
 800e388:	b083      	sub	sp, #12
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e390:	e002      	b.n	800e398 <chk_chr+0x12>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3301      	adds	r3, #1
 800e396:	607b      	str	r3, [r7, #4]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d005      	beq.n	800e3ac <chk_chr+0x26>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d1f2      	bne.n	800e392 <chk_chr+0xc>
	return *str;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60bb      	str	r3, [r7, #8]
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	e029      	b.n	800e424 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e3d0:	4a27      	ldr	r2, [pc, #156]	@ (800e470 <chk_lock+0xb4>)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	4413      	add	r3, r2
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d01d      	beq.n	800e41a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3de:	4a24      	ldr	r2, [pc, #144]	@ (800e470 <chk_lock+0xb4>)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	011b      	lsls	r3, r3, #4
 800e3e4:	4413      	add	r3, r2
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d116      	bne.n	800e41e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e3f0:	4a1f      	ldr	r2, [pc, #124]	@ (800e470 <chk_lock+0xb4>)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	011b      	lsls	r3, r3, #4
 800e3f6:	4413      	add	r3, r2
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e400:	429a      	cmp	r2, r3
 800e402:	d10c      	bne.n	800e41e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e404:	4a1a      	ldr	r2, [pc, #104]	@ (800e470 <chk_lock+0xb4>)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	4413      	add	r3, r2
 800e40c:	3308      	adds	r3, #8
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e414:	429a      	cmp	r2, r3
 800e416:	d102      	bne.n	800e41e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e418:	e007      	b.n	800e42a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e41a:	2301      	movs	r3, #1
 800e41c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d9d2      	bls.n	800e3d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d109      	bne.n	800e444 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d102      	bne.n	800e43c <chk_lock+0x80>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d101      	bne.n	800e440 <chk_lock+0x84>
 800e43c:	2300      	movs	r3, #0
 800e43e:	e010      	b.n	800e462 <chk_lock+0xa6>
 800e440:	2312      	movs	r3, #18
 800e442:	e00e      	b.n	800e462 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d108      	bne.n	800e45c <chk_lock+0xa0>
 800e44a:	4a09      	ldr	r2, [pc, #36]	@ (800e470 <chk_lock+0xb4>)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	011b      	lsls	r3, r3, #4
 800e450:	4413      	add	r3, r2
 800e452:	330c      	adds	r3, #12
 800e454:	881b      	ldrh	r3, [r3, #0]
 800e456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e45a:	d101      	bne.n	800e460 <chk_lock+0xa4>
 800e45c:	2310      	movs	r3, #16
 800e45e:	e000      	b.n	800e462 <chk_lock+0xa6>
 800e460:	2300      	movs	r3, #0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	24000c04 	.word	0x24000c04

0800e474 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e47a:	2300      	movs	r3, #0
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	e002      	b.n	800e486 <enq_lock+0x12>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3301      	adds	r3, #1
 800e484:	607b      	str	r3, [r7, #4]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d806      	bhi.n	800e49a <enq_lock+0x26>
 800e48c:	4a09      	ldr	r2, [pc, #36]	@ (800e4b4 <enq_lock+0x40>)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	011b      	lsls	r3, r3, #4
 800e492:	4413      	add	r3, r2
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1f2      	bne.n	800e480 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	bf14      	ite	ne
 800e4a0:	2301      	movne	r3, #1
 800e4a2:	2300      	moveq	r3, #0
 800e4a4:	b2db      	uxtb	r3, r3
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	24000c04 	.word	0x24000c04

0800e4b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	e01f      	b.n	800e508 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e4c8:	4a41      	ldr	r2, [pc, #260]	@ (800e5d0 <inc_lock+0x118>)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	011b      	lsls	r3, r3, #4
 800e4ce:	4413      	add	r3, r2
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d113      	bne.n	800e502 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e4da:	4a3d      	ldr	r2, [pc, #244]	@ (800e5d0 <inc_lock+0x118>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	011b      	lsls	r3, r3, #4
 800e4e0:	4413      	add	r3, r2
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d109      	bne.n	800e502 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e4ee:	4a38      	ldr	r2, [pc, #224]	@ (800e5d0 <inc_lock+0x118>)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	4413      	add	r3, r2
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d006      	beq.n	800e510 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d9dc      	bls.n	800e4c8 <inc_lock+0x10>
 800e50e:	e000      	b.n	800e512 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e510:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2b02      	cmp	r3, #2
 800e516:	d132      	bne.n	800e57e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e518:	2300      	movs	r3, #0
 800e51a:	60fb      	str	r3, [r7, #12]
 800e51c:	e002      	b.n	800e524 <inc_lock+0x6c>
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3301      	adds	r3, #1
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d806      	bhi.n	800e538 <inc_lock+0x80>
 800e52a:	4a29      	ldr	r2, [pc, #164]	@ (800e5d0 <inc_lock+0x118>)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	011b      	lsls	r3, r3, #4
 800e530:	4413      	add	r3, r2
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1f2      	bne.n	800e51e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d101      	bne.n	800e542 <inc_lock+0x8a>
 800e53e:	2300      	movs	r3, #0
 800e540:	e040      	b.n	800e5c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	4922      	ldr	r1, [pc, #136]	@ (800e5d0 <inc_lock+0x118>)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	011b      	lsls	r3, r3, #4
 800e54c:	440b      	add	r3, r1
 800e54e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689a      	ldr	r2, [r3, #8]
 800e554:	491e      	ldr	r1, [pc, #120]	@ (800e5d0 <inc_lock+0x118>)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	011b      	lsls	r3, r3, #4
 800e55a:	440b      	add	r3, r1
 800e55c:	3304      	adds	r3, #4
 800e55e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	695a      	ldr	r2, [r3, #20]
 800e564:	491a      	ldr	r1, [pc, #104]	@ (800e5d0 <inc_lock+0x118>)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	011b      	lsls	r3, r3, #4
 800e56a:	440b      	add	r3, r1
 800e56c:	3308      	adds	r3, #8
 800e56e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e570:	4a17      	ldr	r2, [pc, #92]	@ (800e5d0 <inc_lock+0x118>)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	011b      	lsls	r3, r3, #4
 800e576:	4413      	add	r3, r2
 800e578:	330c      	adds	r3, #12
 800e57a:	2200      	movs	r2, #0
 800e57c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d009      	beq.n	800e598 <inc_lock+0xe0>
 800e584:	4a12      	ldr	r2, [pc, #72]	@ (800e5d0 <inc_lock+0x118>)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	011b      	lsls	r3, r3, #4
 800e58a:	4413      	add	r3, r2
 800e58c:	330c      	adds	r3, #12
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <inc_lock+0xe0>
 800e594:	2300      	movs	r3, #0
 800e596:	e015      	b.n	800e5c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d108      	bne.n	800e5b0 <inc_lock+0xf8>
 800e59e:	4a0c      	ldr	r2, [pc, #48]	@ (800e5d0 <inc_lock+0x118>)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	011b      	lsls	r3, r3, #4
 800e5a4:	4413      	add	r3, r2
 800e5a6:	330c      	adds	r3, #12
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	e001      	b.n	800e5b4 <inc_lock+0xfc>
 800e5b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e5b4:	4906      	ldr	r1, [pc, #24]	@ (800e5d0 <inc_lock+0x118>)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	011b      	lsls	r3, r3, #4
 800e5ba:	440b      	add	r3, r1
 800e5bc:	330c      	adds	r3, #12
 800e5be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3301      	adds	r3, #1
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3714      	adds	r7, #20
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	24000c04 	.word	0x24000c04

0800e5d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d825      	bhi.n	800e634 <dec_lock+0x60>
		n = Files[i].ctr;
 800e5e8:	4a17      	ldr	r2, [pc, #92]	@ (800e648 <dec_lock+0x74>)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	011b      	lsls	r3, r3, #4
 800e5ee:	4413      	add	r3, r2
 800e5f0:	330c      	adds	r3, #12
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e5f6:	89fb      	ldrh	r3, [r7, #14]
 800e5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5fc:	d101      	bne.n	800e602 <dec_lock+0x2e>
 800e5fe:	2300      	movs	r3, #0
 800e600:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e602:	89fb      	ldrh	r3, [r7, #14]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <dec_lock+0x3a>
 800e608:	89fb      	ldrh	r3, [r7, #14]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e60e:	4a0e      	ldr	r2, [pc, #56]	@ (800e648 <dec_lock+0x74>)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	011b      	lsls	r3, r3, #4
 800e614:	4413      	add	r3, r2
 800e616:	330c      	adds	r3, #12
 800e618:	89fa      	ldrh	r2, [r7, #14]
 800e61a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e61c:	89fb      	ldrh	r3, [r7, #14]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <dec_lock+0x5a>
 800e622:	4a09      	ldr	r2, [pc, #36]	@ (800e648 <dec_lock+0x74>)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	011b      	lsls	r3, r3, #4
 800e628:	4413      	add	r3, r2
 800e62a:	2200      	movs	r2, #0
 800e62c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	737b      	strb	r3, [r7, #13]
 800e632:	e001      	b.n	800e638 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e634:	2302      	movs	r3, #2
 800e636:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e638:	7b7b      	ldrb	r3, [r7, #13]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	24000c04 	.word	0x24000c04

0800e64c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e654:	2300      	movs	r3, #0
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	e010      	b.n	800e67c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e65a:	4a0d      	ldr	r2, [pc, #52]	@ (800e690 <clear_lock+0x44>)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	011b      	lsls	r3, r3, #4
 800e660:	4413      	add	r3, r2
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	429a      	cmp	r2, r3
 800e668:	d105      	bne.n	800e676 <clear_lock+0x2a>
 800e66a:	4a09      	ldr	r2, [pc, #36]	@ (800e690 <clear_lock+0x44>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	011b      	lsls	r3, r3, #4
 800e670:	4413      	add	r3, r2
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d9eb      	bls.n	800e65a <clear_lock+0xe>
	}
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	24000c04 	.word	0x24000c04

0800e694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	78db      	ldrb	r3, [r3, #3]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d034      	beq.n	800e712 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	7858      	ldrb	r0, [r3, #1]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	f7ff fd40 	bl	800e140 <disk_write>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	73fb      	strb	r3, [r7, #15]
 800e6ca:	e022      	b.n	800e712 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	1ad2      	subs	r2, r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d217      	bcs.n	800e712 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	789b      	ldrb	r3, [r3, #2]
 800e6e6:	613b      	str	r3, [r7, #16]
 800e6e8:	e010      	b.n	800e70c <sync_window+0x78>
					wsect += fs->fsize;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	699b      	ldr	r3, [r3, #24]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	7858      	ldrb	r0, [r3, #1]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6fe:	2301      	movs	r3, #1
 800e700:	697a      	ldr	r2, [r7, #20]
 800e702:	f7ff fd1d 	bl	800e140 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	3b01      	subs	r3, #1
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d8eb      	bhi.n	800e6ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e712:	7bfb      	ldrb	r3, [r7, #15]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e726:	2300      	movs	r3, #0
 800e728:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d01b      	beq.n	800e76c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff ffad 	bl	800e694 <sync_window>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d113      	bne.n	800e76c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	7858      	ldrb	r0, [r3, #1]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e74e:	2301      	movs	r3, #1
 800e750:	683a      	ldr	r2, [r7, #0]
 800e752:	f7ff fcd5 	bl	800e100 <disk_read>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d004      	beq.n	800e766 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e75c:	f04f 33ff 	mov.w	r3, #4294967295
 800e760:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e762:	2301      	movs	r3, #1
 800e764:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff ff87 	bl	800e694 <sync_window>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d158      	bne.n	800e842 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	2b03      	cmp	r3, #3
 800e796:	d148      	bne.n	800e82a <sync_fs+0xb2>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	791b      	ldrb	r3, [r3, #4]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d144      	bne.n	800e82a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3330      	adds	r3, #48	@ 0x30
 800e7a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff fda9 	bl	800e302 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3330      	adds	r3, #48	@ 0x30
 800e7b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e7b8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7ff fd38 	bl	800e232 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3330      	adds	r3, #48	@ 0x30
 800e7c6:	4921      	ldr	r1, [pc, #132]	@ (800e84c <sync_fs+0xd4>)
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7ff fd4d 	bl	800e268 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	3330      	adds	r3, #48	@ 0x30
 800e7d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e7d6:	491e      	ldr	r1, [pc, #120]	@ (800e850 <sync_fs+0xd8>)
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fd45 	bl	800e268 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3330      	adds	r3, #48	@ 0x30
 800e7e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7ff fd3b 	bl	800e268 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	3330      	adds	r3, #48	@ 0x30
 800e7f6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	4619      	mov	r1, r3
 800e800:	4610      	mov	r0, r2
 800e802:	f7ff fd31 	bl	800e268 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	69db      	ldr	r3, [r3, #28]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	7858      	ldrb	r0, [r3, #1]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e81e:	2301      	movs	r3, #1
 800e820:	f7ff fc8e 	bl	800e140 <disk_write>
			fs->fsi_flag = 0;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	785b      	ldrb	r3, [r3, #1]
 800e82e:	2200      	movs	r2, #0
 800e830:	2100      	movs	r1, #0
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fca4 	bl	800e180 <disk_ioctl>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <sync_fs+0xca>
 800e83e:	2301      	movs	r3, #1
 800e840:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e842:	7bfb      	ldrb	r3, [r7, #15]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	41615252 	.word	0x41615252
 800e850:	61417272 	.word	0x61417272

0800e854 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	3b02      	subs	r3, #2
 800e862:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	3b02      	subs	r3, #2
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d301      	bcc.n	800e874 <clust2sect+0x20>
 800e870:	2300      	movs	r3, #0
 800e872:	e008      	b.n	800e886 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	895b      	ldrh	r3, [r3, #10]
 800e878:	461a      	mov	r2, r3
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	fb03 f202 	mul.w	r2, r3, r2
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e884:	4413      	add	r3, r2
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b086      	sub	sp, #24
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d904      	bls.n	800e8b2 <get_fat+0x20>
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d302      	bcc.n	800e8b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	617b      	str	r3, [r7, #20]
 800e8b6:	e08e      	b.n	800e9d6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d061      	beq.n	800e98a <get_fat+0xf8>
 800e8c6:	2b03      	cmp	r3, #3
 800e8c8:	dc7b      	bgt.n	800e9c2 <get_fat+0x130>
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d002      	beq.n	800e8d4 <get_fat+0x42>
 800e8ce:	2b02      	cmp	r3, #2
 800e8d0:	d041      	beq.n	800e956 <get_fat+0xc4>
 800e8d2:	e076      	b.n	800e9c2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	085b      	lsrs	r3, r3, #1
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	6a1a      	ldr	r2, [r3, #32]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	0a5b      	lsrs	r3, r3, #9
 800e8ea:	4413      	add	r3, r2
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6938      	ldr	r0, [r7, #16]
 800e8f0:	f7ff ff14 	bl	800e71c <move_window>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d166      	bne.n	800e9c8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	1c5a      	adds	r2, r3, #1
 800e8fe:	60fa      	str	r2, [r7, #12]
 800e900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	4413      	add	r3, r2
 800e908:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e90c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	6a1a      	ldr	r2, [r3, #32]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	0a5b      	lsrs	r3, r3, #9
 800e916:	4413      	add	r3, r2
 800e918:	4619      	mov	r1, r3
 800e91a:	6938      	ldr	r0, [r7, #16]
 800e91c:	f7ff fefe 	bl	800e71c <move_window>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d152      	bne.n	800e9cc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e92c:	693a      	ldr	r2, [r7, #16]
 800e92e:	4413      	add	r3, r2
 800e930:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e934:	021b      	lsls	r3, r3, #8
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	4313      	orrs	r3, r2
 800e93a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <get_fat+0xba>
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	091b      	lsrs	r3, r3, #4
 800e94a:	e002      	b.n	800e952 <get_fat+0xc0>
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e952:	617b      	str	r3, [r7, #20]
			break;
 800e954:	e03f      	b.n	800e9d6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	6a1a      	ldr	r2, [r3, #32]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	0a1b      	lsrs	r3, r3, #8
 800e95e:	4413      	add	r3, r2
 800e960:	4619      	mov	r1, r3
 800e962:	6938      	ldr	r0, [r7, #16]
 800e964:	f7ff feda 	bl	800e71c <move_window>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d130      	bne.n	800e9d0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e97c:	4413      	add	r3, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	f7ff fc1c 	bl	800e1bc <ld_word>
 800e984:	4603      	mov	r3, r0
 800e986:	617b      	str	r3, [r7, #20]
			break;
 800e988:	e025      	b.n	800e9d6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	6a1a      	ldr	r2, [r3, #32]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	09db      	lsrs	r3, r3, #7
 800e992:	4413      	add	r3, r2
 800e994:	4619      	mov	r1, r3
 800e996:	6938      	ldr	r0, [r7, #16]
 800e998:	f7ff fec0 	bl	800e71c <move_window>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d118      	bne.n	800e9d4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e9b0:	4413      	add	r3, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fc1a 	bl	800e1ec <ld_dword>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e9be:	617b      	str	r3, [r7, #20]
			break;
 800e9c0:	e009      	b.n	800e9d6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	617b      	str	r3, [r7, #20]
 800e9c6:	e006      	b.n	800e9d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e9c8:	bf00      	nop
 800e9ca:	e004      	b.n	800e9d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e9cc:	bf00      	nop
 800e9ce:	e002      	b.n	800e9d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e9d0:	bf00      	nop
 800e9d2:	e000      	b.n	800e9d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e9d4:	bf00      	nop
		}
	}

	return val;
 800e9d6:	697b      	ldr	r3, [r7, #20]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3718      	adds	r7, #24
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e9e0:	b590      	push	{r4, r7, lr}
 800e9e2:	b089      	sub	sp, #36	@ 0x24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e9ec:	2302      	movs	r3, #2
 800e9ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	f240 80d9 	bls.w	800ebaa <put_fat+0x1ca>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	f080 80d3 	bcs.w	800ebaa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	f000 8096 	beq.w	800eb3a <put_fat+0x15a>
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	f300 80cb 	bgt.w	800ebaa <put_fat+0x1ca>
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d002      	beq.n	800ea1e <put_fat+0x3e>
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d06e      	beq.n	800eafa <put_fat+0x11a>
 800ea1c:	e0c5      	b.n	800ebaa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	085b      	lsrs	r3, r3, #1
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	4413      	add	r3, r2
 800ea2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6a1a      	ldr	r2, [r3, #32]
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	0a5b      	lsrs	r3, r3, #9
 800ea34:	4413      	add	r3, r2
 800ea36:	4619      	mov	r1, r3
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	f7ff fe6f 	bl	800e71c <move_window>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea42:	7ffb      	ldrb	r3, [r7, #31]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f040 80a9 	bne.w	800eb9c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	1c59      	adds	r1, r3, #1
 800ea54:	61b9      	str	r1, [r7, #24]
 800ea56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5a:	4413      	add	r3, r2
 800ea5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	f003 0301 	and.w	r3, r3, #1
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00d      	beq.n	800ea84 <put_fat+0xa4>
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	b25b      	sxtb	r3, r3
 800ea6e:	f003 030f 	and.w	r3, r3, #15
 800ea72:	b25a      	sxtb	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	011b      	lsls	r3, r3, #4
 800ea7a:	b25b      	sxtb	r3, r3
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	b25b      	sxtb	r3, r3
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	e001      	b.n	800ea88 <put_fat+0xa8>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6a1a      	ldr	r2, [r3, #32]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	0a5b      	lsrs	r3, r3, #9
 800ea9a:	4413      	add	r3, r2
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7ff fe3c 	bl	800e71c <move_window>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eaa8:	7ffb      	ldrb	r3, [r7, #31]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d178      	bne.n	800eba0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaba:	4413      	add	r3, r2
 800eabc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f003 0301 	and.w	r3, r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d003      	beq.n	800ead0 <put_fat+0xf0>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	091b      	lsrs	r3, r3, #4
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	e00e      	b.n	800eaee <put_fat+0x10e>
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	f023 030f 	bic.w	r3, r3, #15
 800eada:	b25a      	sxtb	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	0a1b      	lsrs	r3, r3, #8
 800eae0:	b25b      	sxtb	r3, r3
 800eae2:	f003 030f 	and.w	r3, r3, #15
 800eae6:	b25b      	sxtb	r3, r3
 800eae8:	4313      	orrs	r3, r2
 800eaea:	b25b      	sxtb	r3, r3
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	70da      	strb	r2, [r3, #3]
			break;
 800eaf8:	e057      	b.n	800ebaa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6a1a      	ldr	r2, [r3, #32]
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	0a1b      	lsrs	r3, r3, #8
 800eb02:	4413      	add	r3, r2
 800eb04:	4619      	mov	r1, r3
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7ff fe08 	bl	800e71c <move_window>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb10:	7ffb      	ldrb	r3, [r7, #31]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d146      	bne.n	800eba4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eb24:	4413      	add	r3, r2
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	b292      	uxth	r2, r2
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7ff fb80 	bl	800e232 <st_word>
			fs->wflag = 1;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2201      	movs	r2, #1
 800eb36:	70da      	strb	r2, [r3, #3]
			break;
 800eb38:	e037      	b.n	800ebaa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6a1a      	ldr	r2, [r3, #32]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	09db      	lsrs	r3, r3, #7
 800eb42:	4413      	add	r3, r2
 800eb44:	4619      	mov	r1, r3
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f7ff fde8 	bl	800e71c <move_window>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb50:	7ffb      	ldrb	r3, [r7, #31]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d128      	bne.n	800eba8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eb6a:	4413      	add	r3, r2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7ff fb3d 	bl	800e1ec <ld_dword>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800eb78:	4323      	orrs	r3, r4
 800eb7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eb8a:	4413      	add	r3, r2
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff fb6a 	bl	800e268 <st_dword>
			fs->wflag = 1;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2201      	movs	r2, #1
 800eb98:	70da      	strb	r2, [r3, #3]
			break;
 800eb9a:	e006      	b.n	800ebaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eb9c:	bf00      	nop
 800eb9e:	e004      	b.n	800ebaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eba0:	bf00      	nop
 800eba2:	e002      	b.n	800ebaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eba4:	bf00      	nop
 800eba6:	e000      	b.n	800ebaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eba8:	bf00      	nop
		}
	}
	return res;
 800ebaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3724      	adds	r7, #36	@ 0x24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd90      	pop	{r4, r7, pc}

0800ebb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d904      	bls.n	800ebda <remove_chain+0x26>
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d301      	bcc.n	800ebde <remove_chain+0x2a>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e04b      	b.n	800ec76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	6879      	ldr	r1, [r7, #4]
 800ebea:	69b8      	ldr	r0, [r7, #24]
 800ebec:	f7ff fef8 	bl	800e9e0 <put_fat>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ebf4:	7ffb      	ldrb	r3, [r7, #31]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <remove_chain+0x4a>
 800ebfa:	7ffb      	ldrb	r3, [r7, #31]
 800ebfc:	e03b      	b.n	800ec76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7ff fe46 	bl	800e892 <get_fat>
 800ec06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d031      	beq.n	800ec72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <remove_chain+0x64>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e02e      	b.n	800ec76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d101      	bne.n	800ec24 <remove_chain+0x70>
 800ec20:	2301      	movs	r3, #1
 800ec22:	e028      	b.n	800ec76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ec24:	2200      	movs	r2, #0
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	69b8      	ldr	r0, [r7, #24]
 800ec2a:	f7ff fed9 	bl	800e9e0 <put_fat>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ec32:	7ffb      	ldrb	r3, [r7, #31]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d001      	beq.n	800ec3c <remove_chain+0x88>
 800ec38:	7ffb      	ldrb	r3, [r7, #31]
 800ec3a:	e01c      	b.n	800ec76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	691a      	ldr	r2, [r3, #16]
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	3b02      	subs	r3, #2
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d20b      	bcs.n	800ec62 <remove_chain+0xae>
			fs->free_clst++;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	791b      	ldrb	r3, [r3, #4]
 800ec58:	f043 0301 	orr.w	r3, r3, #1
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	695b      	ldr	r3, [r3, #20]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d3c6      	bcc.n	800ebfe <remove_chain+0x4a>
 800ec70:	e000      	b.n	800ec74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ec72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b088      	sub	sp, #32
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10d      	bne.n	800ecb0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d004      	beq.n	800ecaa <create_chain+0x2c>
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	695b      	ldr	r3, [r3, #20]
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d31b      	bcc.n	800ece2 <create_chain+0x64>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	e018      	b.n	800ece2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fded 	bl	800e892 <get_fat>
 800ecb8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d801      	bhi.n	800ecc4 <create_chain+0x46>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e070      	b.n	800eda6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d101      	bne.n	800ecd0 <create_chain+0x52>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	e06a      	b.n	800eda6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	695b      	ldr	r3, [r3, #20]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d201      	bcs.n	800ecde <create_chain+0x60>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	e063      	b.n	800eda6 <create_chain+0x128>
		scl = clst;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	3301      	adds	r3, #1
 800ecea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	69fa      	ldr	r2, [r7, #28]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d307      	bcc.n	800ed06 <create_chain+0x88>
				ncl = 2;
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d901      	bls.n	800ed06 <create_chain+0x88>
 800ed02:	2300      	movs	r3, #0
 800ed04:	e04f      	b.n	800eda6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ed06:	69f9      	ldr	r1, [r7, #28]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff fdc2 	bl	800e892 <get_fat>
 800ed0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00e      	beq.n	800ed34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d003      	beq.n	800ed24 <create_chain+0xa6>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d101      	bne.n	800ed28 <create_chain+0xaa>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	e03e      	b.n	800eda6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d1da      	bne.n	800ece6 <create_chain+0x68>
 800ed30:	2300      	movs	r3, #0
 800ed32:	e038      	b.n	800eda6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ed34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	69f9      	ldr	r1, [r7, #28]
 800ed3c:	6938      	ldr	r0, [r7, #16]
 800ed3e:	f7ff fe4f 	bl	800e9e0 <put_fat>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d109      	bne.n	800ed60 <create_chain+0xe2>
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d006      	beq.n	800ed60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6938      	ldr	r0, [r7, #16]
 800ed58:	f7ff fe42 	bl	800e9e0 <put_fat>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d116      	bne.n	800ed94 <create_chain+0x116>
		fs->last_clst = ncl;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	691a      	ldr	r2, [r3, #16]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	695b      	ldr	r3, [r3, #20]
 800ed74:	3b02      	subs	r3, #2
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d804      	bhi.n	800ed84 <create_chain+0x106>
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	1e5a      	subs	r2, r3, #1
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	791b      	ldrb	r3, [r3, #4]
 800ed88:	f043 0301 	orr.w	r3, r3, #1
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	711a      	strb	r2, [r3, #4]
 800ed92:	e007      	b.n	800eda4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d102      	bne.n	800eda0 <create_chain+0x122>
 800ed9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9e:	e000      	b.n	800eda2 <create_chain+0x124>
 800eda0:	2301      	movs	r3, #1
 800eda2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eda4:	69fb      	ldr	r3, [r7, #28]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800edae:	b480      	push	{r7}
 800edb0:	b087      	sub	sp, #28
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	3304      	adds	r3, #4
 800edc4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	0a5b      	lsrs	r3, r3, #9
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	8952      	ldrh	r2, [r2, #10]
 800edce:	fbb3 f3f2 	udiv	r3, r3, r2
 800edd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	1d1a      	adds	r2, r3, #4
 800edd8:	613a      	str	r2, [r7, #16]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <clmt_clust+0x3a>
 800ede4:	2300      	movs	r3, #0
 800ede6:	e010      	b.n	800ee0a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ede8:	697a      	ldr	r2, [r7, #20]
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	429a      	cmp	r2, r3
 800edee:	d307      	bcc.n	800ee00 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800edf0:	697a      	ldr	r2, [r7, #20]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	617b      	str	r3, [r7, #20]
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	3304      	adds	r3, #4
 800edfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edfe:	e7e9      	b.n	800edd4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ee00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	4413      	add	r3, r2
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b086      	sub	sp, #24
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee2c:	d204      	bcs.n	800ee38 <dir_sdi+0x22>
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	f003 031f 	and.w	r3, r3, #31
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <dir_sdi+0x26>
		return FR_INT_ERR;
 800ee38:	2302      	movs	r3, #2
 800ee3a:	e063      	b.n	800ef04 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d106      	bne.n	800ee5c <dir_sdi+0x46>
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d902      	bls.n	800ee5c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10c      	bne.n	800ee7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	095b      	lsrs	r3, r3, #5
 800ee66:	693a      	ldr	r2, [r7, #16]
 800ee68:	8912      	ldrh	r2, [r2, #8]
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d301      	bcc.n	800ee72 <dir_sdi+0x5c>
 800ee6e:	2302      	movs	r3, #2
 800ee70:	e048      	b.n	800ef04 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	61da      	str	r2, [r3, #28]
 800ee7a:	e029      	b.n	800eed0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	895b      	ldrh	r3, [r3, #10]
 800ee80:	025b      	lsls	r3, r3, #9
 800ee82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee84:	e019      	b.n	800eeba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6979      	ldr	r1, [r7, #20]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff fd01 	bl	800e892 <get_fat>
 800ee90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee98:	d101      	bne.n	800ee9e <dir_sdi+0x88>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e032      	b.n	800ef04 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d904      	bls.n	800eeae <dir_sdi+0x98>
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	695b      	ldr	r3, [r3, #20]
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d301      	bcc.n	800eeb2 <dir_sdi+0x9c>
 800eeae:	2302      	movs	r3, #2
 800eeb0:	e028      	b.n	800ef04 <dir_sdi+0xee>
			ofs -= csz;
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d2e1      	bcs.n	800ee86 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800eec2:	6979      	ldr	r1, [r7, #20]
 800eec4:	6938      	ldr	r0, [r7, #16]
 800eec6:	f7ff fcc5 	bl	800e854 <clust2sect>
 800eeca:	4602      	mov	r2, r0
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <dir_sdi+0xcc>
 800eede:	2302      	movs	r3, #2
 800eee0:	e010      	b.n	800ef04 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	69da      	ldr	r2, [r3, #28]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	0a5b      	lsrs	r3, r3, #9
 800eeea:	441a      	add	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eefc:	441a      	add	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3718      	adds	r7, #24
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	695b      	ldr	r3, [r3, #20]
 800ef20:	3320      	adds	r3, #32
 800ef22:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <dir_next+0x28>
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef32:	d301      	bcc.n	800ef38 <dir_next+0x2c>
 800ef34:	2304      	movs	r3, #4
 800ef36:	e0aa      	b.n	800f08e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f040 8098 	bne.w	800f074 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	69db      	ldr	r3, [r3, #28]
 800ef48:	1c5a      	adds	r2, r3, #1
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d10b      	bne.n	800ef6e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	095b      	lsrs	r3, r3, #5
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	8912      	ldrh	r2, [r2, #8]
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	f0c0 8088 	bcc.w	800f074 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	61da      	str	r2, [r3, #28]
 800ef6a:	2304      	movs	r3, #4
 800ef6c:	e08f      	b.n	800f08e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	0a5b      	lsrs	r3, r3, #9
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	8952      	ldrh	r2, [r2, #10]
 800ef76:	3a01      	subs	r2, #1
 800ef78:	4013      	ands	r3, r2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d17a      	bne.n	800f074 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	699b      	ldr	r3, [r3, #24]
 800ef84:	4619      	mov	r1, r3
 800ef86:	4610      	mov	r0, r2
 800ef88:	f7ff fc83 	bl	800e892 <get_fat>
 800ef8c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d801      	bhi.n	800ef98 <dir_next+0x8c>
 800ef94:	2302      	movs	r3, #2
 800ef96:	e07a      	b.n	800f08e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9e:	d101      	bne.n	800efa4 <dir_next+0x98>
 800efa0:	2301      	movs	r3, #1
 800efa2:	e074      	b.n	800f08e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	695b      	ldr	r3, [r3, #20]
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d358      	bcc.n	800f060 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d104      	bne.n	800efbe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	61da      	str	r2, [r3, #28]
 800efba:	2304      	movs	r3, #4
 800efbc:	e067      	b.n	800f08e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	f7ff fe59 	bl	800ec7e <create_chain>
 800efcc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d101      	bne.n	800efd8 <dir_next+0xcc>
 800efd4:	2307      	movs	r3, #7
 800efd6:	e05a      	b.n	800f08e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d101      	bne.n	800efe2 <dir_next+0xd6>
 800efde:	2302      	movs	r3, #2
 800efe0:	e055      	b.n	800f08e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe8:	d101      	bne.n	800efee <dir_next+0xe2>
 800efea:	2301      	movs	r3, #1
 800efec:	e04f      	b.n	800f08e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff fb50 	bl	800e694 <sync_window>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <dir_next+0xf2>
 800effa:	2301      	movs	r3, #1
 800effc:	e047      	b.n	800f08e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3330      	adds	r3, #48	@ 0x30
 800f002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f006:	2100      	movs	r1, #0
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff f97a 	bl	800e302 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f00e:	2300      	movs	r3, #0
 800f010:	613b      	str	r3, [r7, #16]
 800f012:	6979      	ldr	r1, [r7, #20]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff fc1d 	bl	800e854 <clust2sect>
 800f01a:	4602      	mov	r2, r0
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f020:	e012      	b.n	800f048 <dir_next+0x13c>
						fs->wflag = 1;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f7ff fb33 	bl	800e694 <sync_window>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <dir_next+0x12c>
 800f034:	2301      	movs	r3, #1
 800f036:	e02a      	b.n	800f08e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	3301      	adds	r3, #1
 800f03c:	613b      	str	r3, [r7, #16]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	895b      	ldrh	r3, [r3, #10]
 800f04c:	461a      	mov	r2, r3
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	4293      	cmp	r3, r2
 800f052:	d3e6      	bcc.n	800f022 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	1ad2      	subs	r2, r2, r3
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	697a      	ldr	r2, [r7, #20]
 800f064:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f066:	6979      	ldr	r1, [r7, #20]
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7ff fbf3 	bl	800e854 <clust2sect>
 800f06e:	4602      	mov	r2, r0
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f086:	441a      	add	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b086      	sub	sp, #24
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff feb4 	bl	800ee16 <dir_sdi>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0b2:	7dfb      	ldrb	r3, [r7, #23]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d12b      	bne.n	800f110 <dir_alloc+0x7a>
		n = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff fb2a 	bl	800e71c <move_window>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d11d      	bne.n	800f10e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a1b      	ldr	r3, [r3, #32]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	2be5      	cmp	r3, #229	@ 0xe5
 800f0da:	d004      	beq.n	800f0e6 <dir_alloc+0x50>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a1b      	ldr	r3, [r3, #32]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d107      	bne.n	800f0f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	613b      	str	r3, [r7, #16]
 800f0ec:	693a      	ldr	r2, [r7, #16]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d102      	bne.n	800f0fa <dir_alloc+0x64>
 800f0f4:	e00c      	b.n	800f110 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff ff05 	bl	800ef0c <dir_next>
 800f102:	4603      	mov	r3, r0
 800f104:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d0d7      	beq.n	800f0bc <dir_alloc+0x26>
 800f10c:	e000      	b.n	800f110 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f10e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f110:	7dfb      	ldrb	r3, [r7, #23]
 800f112:	2b04      	cmp	r3, #4
 800f114:	d101      	bne.n	800f11a <dir_alloc+0x84>
 800f116:	2307      	movs	r3, #7
 800f118:	75fb      	strb	r3, [r7, #23]
	return res;
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	331a      	adds	r3, #26
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff f842 	bl	800e1bc <ld_word>
 800f138:	4603      	mov	r3, r0
 800f13a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b03      	cmp	r3, #3
 800f142:	d109      	bne.n	800f158 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	3314      	adds	r3, #20
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff f837 	bl	800e1bc <ld_word>
 800f14e:	4603      	mov	r3, r0
 800f150:	041b      	lsls	r3, r3, #16
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	4313      	orrs	r3, r2
 800f156:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f158:	68fb      	ldr	r3, [r7, #12]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	331a      	adds	r3, #26
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	b292      	uxth	r2, r2
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f7ff f85a 	bl	800e232 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	2b03      	cmp	r3, #3
 800f184:	d109      	bne.n	800f19a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f103 0214 	add.w	r2, r3, #20
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	0c1b      	lsrs	r3, r3, #16
 800f190:	b29b      	uxth	r3, r3
 800f192:	4619      	mov	r1, r3
 800f194:	4610      	mov	r0, r2
 800f196:	f7ff f84c 	bl	800e232 <st_word>
	}
}
 800f19a:	bf00      	nop
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b086      	sub	sp, #24
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff fe2f 	bl	800ee16 <dir_sdi>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <dir_find+0x24>
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	e03e      	b.n	800f244 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	69db      	ldr	r3, [r3, #28]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	6938      	ldr	r0, [r7, #16]
 800f1ce:	f7ff faa5 	bl	800e71c <move_window>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1d6:	7dfb      	ldrb	r3, [r7, #23]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d12f      	bne.n	800f23c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a1b      	ldr	r3, [r3, #32]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <dir_find+0x4e>
 800f1ea:	2304      	movs	r3, #4
 800f1ec:	75fb      	strb	r3, [r7, #23]
 800f1ee:	e028      	b.n	800f242 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a1b      	ldr	r3, [r3, #32]
 800f1f4:	330b      	adds	r3, #11
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1fc:	b2da      	uxtb	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	330b      	adds	r3, #11
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 0308 	and.w	r3, r3, #8
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10a      	bne.n	800f228 <dir_find+0x86>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a18      	ldr	r0, [r3, #32]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	3324      	adds	r3, #36	@ 0x24
 800f21a:	220b      	movs	r2, #11
 800f21c:	4619      	mov	r1, r3
 800f21e:	f7ff f88b 	bl	800e338 <mem_cmp>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f228:	2100      	movs	r1, #0
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7ff fe6e 	bl	800ef0c <dir_next>
 800f230:	4603      	mov	r3, r0
 800f232:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f234:	7dfb      	ldrb	r3, [r7, #23]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d0c5      	beq.n	800f1c6 <dir_find+0x24>
 800f23a:	e002      	b.n	800f242 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f23c:	bf00      	nop
 800f23e:	e000      	b.n	800f242 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f240:	bf00      	nop

	return res;
 800f242:	7dfb      	ldrb	r3, [r7, #23]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f25a:	2101      	movs	r1, #1
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ff1a 	bl	800f096 <dir_alloc>
 800f262:	4603      	mov	r3, r0
 800f264:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d11c      	bne.n	800f2a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	4619      	mov	r1, r3
 800f272:	68b8      	ldr	r0, [r7, #8]
 800f274:	f7ff fa52 	bl	800e71c <move_window>
 800f278:	4603      	mov	r3, r0
 800f27a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f27c:	7bfb      	ldrb	r3, [r7, #15]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d111      	bne.n	800f2a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	2220      	movs	r2, #32
 800f288:	2100      	movs	r1, #0
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff f839 	bl	800e302 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6a18      	ldr	r0, [r3, #32]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3324      	adds	r3, #36	@ 0x24
 800f298:	220b      	movs	r2, #11
 800f29a:	4619      	mov	r1, r3
 800f29c:	f7ff f810 	bl	800e2c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3324      	adds	r3, #36	@ 0x24
 800f2c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f2c6:	220b      	movs	r2, #11
 800f2c8:	2120      	movs	r1, #32
 800f2ca:	68b8      	ldr	r0, [r7, #8]
 800f2cc:	f7ff f819 	bl	800e302 <mem_set>
	si = i = 0; ni = 8;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	613b      	str	r3, [r7, #16]
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	61fb      	str	r3, [r7, #28]
 800f2d8:	2308      	movs	r3, #8
 800f2da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	1c5a      	adds	r2, r3, #1
 800f2e0:	61fa      	str	r2, [r7, #28]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f2ea:	7efb      	ldrb	r3, [r7, #27]
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	d94e      	bls.n	800f38e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f2f0:	7efb      	ldrb	r3, [r7, #27]
 800f2f2:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2f4:	d006      	beq.n	800f304 <create_name+0x54>
 800f2f6:	7efb      	ldrb	r3, [r7, #27]
 800f2f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f2fa:	d110      	bne.n	800f31e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f2fc:	e002      	b.n	800f304 <create_name+0x54>
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	3301      	adds	r3, #1
 800f302:	61fb      	str	r3, [r7, #28]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	4413      	add	r3, r2
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f30e:	d0f6      	beq.n	800f2fe <create_name+0x4e>
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	4413      	add	r3, r2
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2b5c      	cmp	r3, #92	@ 0x5c
 800f31a:	d0f0      	beq.n	800f2fe <create_name+0x4e>
			break;
 800f31c:	e038      	b.n	800f390 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f31e:	7efb      	ldrb	r3, [r7, #27]
 800f320:	2b2e      	cmp	r3, #46	@ 0x2e
 800f322:	d003      	beq.n	800f32c <create_name+0x7c>
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d30c      	bcc.n	800f346 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b0b      	cmp	r3, #11
 800f330:	d002      	beq.n	800f338 <create_name+0x88>
 800f332:	7efb      	ldrb	r3, [r7, #27]
 800f334:	2b2e      	cmp	r3, #46	@ 0x2e
 800f336:	d001      	beq.n	800f33c <create_name+0x8c>
 800f338:	2306      	movs	r3, #6
 800f33a:	e044      	b.n	800f3c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f33c:	2308      	movs	r3, #8
 800f33e:	613b      	str	r3, [r7, #16]
 800f340:	230b      	movs	r3, #11
 800f342:	617b      	str	r3, [r7, #20]
			continue;
 800f344:	e022      	b.n	800f38c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f346:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	da04      	bge.n	800f358 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f34e:	7efb      	ldrb	r3, [r7, #27]
 800f350:	3b80      	subs	r3, #128	@ 0x80
 800f352:	4a1f      	ldr	r2, [pc, #124]	@ (800f3d0 <create_name+0x120>)
 800f354:	5cd3      	ldrb	r3, [r2, r3]
 800f356:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f358:	7efb      	ldrb	r3, [r7, #27]
 800f35a:	4619      	mov	r1, r3
 800f35c:	481d      	ldr	r0, [pc, #116]	@ (800f3d4 <create_name+0x124>)
 800f35e:	f7ff f812 	bl	800e386 <chk_chr>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <create_name+0xbc>
 800f368:	2306      	movs	r3, #6
 800f36a:	e02c      	b.n	800f3c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f36c:	7efb      	ldrb	r3, [r7, #27]
 800f36e:	2b60      	cmp	r3, #96	@ 0x60
 800f370:	d905      	bls.n	800f37e <create_name+0xce>
 800f372:	7efb      	ldrb	r3, [r7, #27]
 800f374:	2b7a      	cmp	r3, #122	@ 0x7a
 800f376:	d802      	bhi.n	800f37e <create_name+0xce>
 800f378:	7efb      	ldrb	r3, [r7, #27]
 800f37a:	3b20      	subs	r3, #32
 800f37c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	613a      	str	r2, [r7, #16]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	4413      	add	r3, r2
 800f388:	7efa      	ldrb	r2, [r7, #27]
 800f38a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f38c:	e7a6      	b.n	800f2dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f38e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	441a      	add	r2, r3
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d101      	bne.n	800f3a4 <create_name+0xf4>
 800f3a0:	2306      	movs	r3, #6
 800f3a2:	e010      	b.n	800f3c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	2be5      	cmp	r3, #229	@ 0xe5
 800f3aa:	d102      	bne.n	800f3b2 <create_name+0x102>
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2205      	movs	r2, #5
 800f3b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f3b2:	7efb      	ldrb	r3, [r7, #27]
 800f3b4:	2b20      	cmp	r3, #32
 800f3b6:	d801      	bhi.n	800f3bc <create_name+0x10c>
 800f3b8:	2204      	movs	r2, #4
 800f3ba:	e000      	b.n	800f3be <create_name+0x10e>
 800f3bc:	2200      	movs	r2, #0
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	330b      	adds	r3, #11
 800f3c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f3c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3720      	adds	r7, #32
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	08011b7c 	.word	0x08011b7c
 800f3d4:	08011a9c 	.word	0x08011a9c

0800f3d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f3ec:	e002      	b.n	800f3f4 <follow_path+0x1c>
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	603b      	str	r3, [r7, #0]
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f3fa:	d0f8      	beq.n	800f3ee <follow_path+0x16>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b5c      	cmp	r3, #92	@ 0x5c
 800f402:	d0f4      	beq.n	800f3ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	2200      	movs	r2, #0
 800f408:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	2b1f      	cmp	r3, #31
 800f410:	d80a      	bhi.n	800f428 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2280      	movs	r2, #128	@ 0x80
 800f416:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f41a:	2100      	movs	r1, #0
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff fcfa 	bl	800ee16 <dir_sdi>
 800f422:	4603      	mov	r3, r0
 800f424:	75fb      	strb	r3, [r7, #23]
 800f426:	e043      	b.n	800f4b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f428:	463b      	mov	r3, r7
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ff3f 	bl	800f2b0 <create_name>
 800f432:	4603      	mov	r3, r0
 800f434:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f436:	7dfb      	ldrb	r3, [r7, #23]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d134      	bne.n	800f4a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff feb0 	bl	800f1a2 <dir_find>
 800f442:	4603      	mov	r3, r0
 800f444:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f44c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00a      	beq.n	800f46a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f454:	7dfb      	ldrb	r3, [r7, #23]
 800f456:	2b04      	cmp	r3, #4
 800f458:	d127      	bne.n	800f4aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f45a:	7afb      	ldrb	r3, [r7, #11]
 800f45c:	f003 0304 	and.w	r3, r3, #4
 800f460:	2b00      	cmp	r3, #0
 800f462:	d122      	bne.n	800f4aa <follow_path+0xd2>
 800f464:	2305      	movs	r3, #5
 800f466:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f468:	e01f      	b.n	800f4aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f46a:	7afb      	ldrb	r3, [r7, #11]
 800f46c:	f003 0304 	and.w	r3, r3, #4
 800f470:	2b00      	cmp	r3, #0
 800f472:	d11c      	bne.n	800f4ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	799b      	ldrb	r3, [r3, #6]
 800f478:	f003 0310 	and.w	r3, r3, #16
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f480:	2305      	movs	r3, #5
 800f482:	75fb      	strb	r3, [r7, #23]
 800f484:	e014      	b.n	800f4b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f494:	4413      	add	r3, r2
 800f496:	4619      	mov	r1, r3
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f7ff fe43 	bl	800f124 <ld_clust>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4a4:	e7c0      	b.n	800f428 <follow_path+0x50>
			if (res != FR_OK) break;
 800f4a6:	bf00      	nop
 800f4a8:	e002      	b.n	800f4b0 <follow_path+0xd8>
				break;
 800f4aa:	bf00      	nop
 800f4ac:	e000      	b.n	800f4b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4ae:	bf00      	nop
			}
		}
	}

	return res;
 800f4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b087      	sub	sp, #28
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d031      	beq.n	800f534 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	617b      	str	r3, [r7, #20]
 800f4d6:	e002      	b.n	800f4de <get_ldnumber+0x24>
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	617b      	str	r3, [r7, #20]
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	2b20      	cmp	r3, #32
 800f4e4:	d903      	bls.n	800f4ee <get_ldnumber+0x34>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b3a      	cmp	r3, #58	@ 0x3a
 800f4ec:	d1f4      	bne.n	800f4d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f4f4:	d11c      	bne.n	800f530 <get_ldnumber+0x76>
			tp = *path;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	60fa      	str	r2, [r7, #12]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	3b30      	subs	r3, #48	@ 0x30
 800f506:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	2b09      	cmp	r3, #9
 800f50c:	d80e      	bhi.n	800f52c <get_ldnumber+0x72>
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	429a      	cmp	r2, r3
 800f514:	d10a      	bne.n	800f52c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d107      	bne.n	800f52c <get_ldnumber+0x72>
					vol = (int)i;
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	3301      	adds	r3, #1
 800f524:	617b      	str	r3, [r7, #20]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	e002      	b.n	800f536 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f530:	2300      	movs	r3, #0
 800f532:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f534:	693b      	ldr	r3, [r7, #16]
}
 800f536:	4618      	mov	r0, r3
 800f538:	371c      	adds	r7, #28
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
	...

0800f544 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	70da      	strb	r2, [r3, #3]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f04f 32ff 	mov.w	r2, #4294967295
 800f55a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff f8dc 	bl	800e71c <move_window>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <check_fs+0x2a>
 800f56a:	2304      	movs	r3, #4
 800f56c:	e038      	b.n	800f5e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3330      	adds	r3, #48	@ 0x30
 800f572:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe fe20 	bl	800e1bc <ld_word>
 800f57c:	4603      	mov	r3, r0
 800f57e:	461a      	mov	r2, r3
 800f580:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f584:	429a      	cmp	r2, r3
 800f586:	d001      	beq.n	800f58c <check_fs+0x48>
 800f588:	2303      	movs	r3, #3
 800f58a:	e029      	b.n	800f5e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f592:	2be9      	cmp	r3, #233	@ 0xe9
 800f594:	d009      	beq.n	800f5aa <check_fs+0x66>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f59c:	2beb      	cmp	r3, #235	@ 0xeb
 800f59e:	d11e      	bne.n	800f5de <check_fs+0x9a>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f5a6:	2b90      	cmp	r3, #144	@ 0x90
 800f5a8:	d119      	bne.n	800f5de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	3330      	adds	r3, #48	@ 0x30
 800f5ae:	3336      	adds	r3, #54	@ 0x36
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fe fe1b 	bl	800e1ec <ld_dword>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f5bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f5e8 <check_fs+0xa4>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d101      	bne.n	800f5c6 <check_fs+0x82>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	e00c      	b.n	800f5e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3330      	adds	r3, #48	@ 0x30
 800f5ca:	3352      	adds	r3, #82	@ 0x52
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fe0d 	bl	800e1ec <ld_dword>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4a05      	ldr	r2, [pc, #20]	@ (800f5ec <check_fs+0xa8>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d101      	bne.n	800f5de <check_fs+0x9a>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	e000      	b.n	800f5e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f5de:	2302      	movs	r3, #2
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	00544146 	.word	0x00544146
 800f5ec:	33544146 	.word	0x33544146

0800f5f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b096      	sub	sp, #88	@ 0x58
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	2200      	movs	r2, #0
 800f602:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f7ff ff58 	bl	800f4ba <get_ldnumber>
 800f60a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	da01      	bge.n	800f616 <find_volume+0x26>
 800f612:	230b      	movs	r3, #11
 800f614:	e22d      	b.n	800fa72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f616:	4aa1      	ldr	r2, [pc, #644]	@ (800f89c <find_volume+0x2ac>)
 800f618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f61e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f622:	2b00      	cmp	r3, #0
 800f624:	d101      	bne.n	800f62a <find_volume+0x3a>
 800f626:	230c      	movs	r3, #12
 800f628:	e223      	b.n	800fa72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f62e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	f023 0301 	bic.w	r3, r3, #1
 800f636:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d01a      	beq.n	800f676 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f642:	785b      	ldrb	r3, [r3, #1]
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fd19 	bl	800e07c <disk_status>
 800f64a:	4603      	mov	r3, r0
 800f64c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10c      	bne.n	800f676 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f65c:	79fb      	ldrb	r3, [r7, #7]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d007      	beq.n	800f672 <find_volume+0x82>
 800f662:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f666:	f003 0304 	and.w	r3, r3, #4
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d001      	beq.n	800f672 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f66e:	230a      	movs	r3, #10
 800f670:	e1ff      	b.n	800fa72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f672:	2300      	movs	r3, #0
 800f674:	e1fd      	b.n	800fa72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f678:	2200      	movs	r2, #0
 800f67a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f67e:	b2da      	uxtb	r2, r3
 800f680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f682:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f686:	785b      	ldrb	r3, [r3, #1]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fe fd11 	bl	800e0b0 <disk_initialize>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f694:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f698:	f003 0301 	and.w	r3, r3, #1
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	e1e6      	b.n	800fa72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f6a4:	79fb      	ldrb	r3, [r7, #7]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d007      	beq.n	800f6ba <find_volume+0xca>
 800f6aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f6ae:	f003 0304 	and.w	r3, r3, #4
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f6b6:	230a      	movs	r3, #10
 800f6b8:	e1db      	b.n	800fa72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f6be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f6c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f6c2:	f7ff ff3f 	bl	800f544 <check_fs>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d149      	bne.n	800f768 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6d8:	e01e      	b.n	800f718 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6e2:	011b      	lsls	r3, r3, #4
 800f6e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f6e8:	4413      	add	r3, r2
 800f6ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <find_volume+0x114>
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f8:	3308      	adds	r3, #8
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fe fd76 	bl	800e1ec <ld_dword>
 800f700:	4602      	mov	r2, r0
 800f702:	e000      	b.n	800f706 <find_volume+0x116>
 800f704:	2200      	movs	r2, #0
 800f706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	3358      	adds	r3, #88	@ 0x58
 800f70c:	443b      	add	r3, r7
 800f70e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f714:	3301      	adds	r3, #1
 800f716:	643b      	str	r3, [r7, #64]	@ 0x40
 800f718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f71a:	2b03      	cmp	r3, #3
 800f71c:	d9dd      	bls.n	800f6da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f71e:	2300      	movs	r3, #0
 800f720:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <find_volume+0x13e>
 800f728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f72a:	3b01      	subs	r3, #1
 800f72c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	3358      	adds	r3, #88	@ 0x58
 800f734:	443b      	add	r3, r7
 800f736:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f73a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f73c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <find_volume+0x15e>
 800f742:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f744:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f746:	f7ff fefd 	bl	800f544 <check_fs>
 800f74a:	4603      	mov	r3, r0
 800f74c:	e000      	b.n	800f750 <find_volume+0x160>
 800f74e:	2303      	movs	r3, #3
 800f750:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d905      	bls.n	800f768 <find_volume+0x178>
 800f75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f75e:	3301      	adds	r3, #1
 800f760:	643b      	str	r3, [r7, #64]	@ 0x40
 800f762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f764:	2b03      	cmp	r3, #3
 800f766:	d9e2      	bls.n	800f72e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f76c:	2b04      	cmp	r3, #4
 800f76e:	d101      	bne.n	800f774 <find_volume+0x184>
 800f770:	2301      	movs	r3, #1
 800f772:	e17e      	b.n	800fa72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d901      	bls.n	800f780 <find_volume+0x190>
 800f77c:	230d      	movs	r3, #13
 800f77e:	e178      	b.n	800fa72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f782:	3330      	adds	r3, #48	@ 0x30
 800f784:	330b      	adds	r3, #11
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe fd18 	bl	800e1bc <ld_word>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f792:	d001      	beq.n	800f798 <find_volume+0x1a8>
 800f794:	230d      	movs	r3, #13
 800f796:	e16c      	b.n	800fa72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79a:	3330      	adds	r3, #48	@ 0x30
 800f79c:	3316      	adds	r3, #22
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe fd0c 	bl	800e1bc <ld_word>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f7a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d106      	bne.n	800f7bc <find_volume+0x1cc>
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b0:	3330      	adds	r3, #48	@ 0x30
 800f7b2:	3324      	adds	r3, #36	@ 0x24
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fe fd19 	bl	800e1ec <ld_dword>
 800f7ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f7c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ce:	789b      	ldrb	r3, [r3, #2]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d005      	beq.n	800f7e0 <find_volume+0x1f0>
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d6:	789b      	ldrb	r3, [r3, #2]
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	d001      	beq.n	800f7e0 <find_volume+0x1f0>
 800f7dc:	230d      	movs	r3, #13
 800f7de:	e148      	b.n	800fa72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	789b      	ldrb	r3, [r3, #2]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7e8:	fb02 f303 	mul.w	r3, r2, r3
 800f7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fc:	895b      	ldrh	r3, [r3, #10]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d008      	beq.n	800f814 <find_volume+0x224>
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	895b      	ldrh	r3, [r3, #10]
 800f806:	461a      	mov	r2, r3
 800f808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80a:	895b      	ldrh	r3, [r3, #10]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	4013      	ands	r3, r2
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <find_volume+0x228>
 800f814:	230d      	movs	r3, #13
 800f816:	e12c      	b.n	800fa72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	3330      	adds	r3, #48	@ 0x30
 800f81c:	3311      	adds	r3, #17
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe fccc 	bl	800e1bc <ld_word>
 800f824:	4603      	mov	r3, r0
 800f826:	461a      	mov	r2, r3
 800f828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	891b      	ldrh	r3, [r3, #8]
 800f830:	f003 030f 	and.w	r3, r3, #15
 800f834:	b29b      	uxth	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d001      	beq.n	800f83e <find_volume+0x24e>
 800f83a:	230d      	movs	r3, #13
 800f83c:	e119      	b.n	800fa72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f840:	3330      	adds	r3, #48	@ 0x30
 800f842:	3313      	adds	r3, #19
 800f844:	4618      	mov	r0, r3
 800f846:	f7fe fcb9 	bl	800e1bc <ld_word>
 800f84a:	4603      	mov	r3, r0
 800f84c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f84e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <find_volume+0x272>
 800f854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f856:	3330      	adds	r3, #48	@ 0x30
 800f858:	3320      	adds	r3, #32
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fcc6 	bl	800e1ec <ld_dword>
 800f860:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f864:	3330      	adds	r3, #48	@ 0x30
 800f866:	330e      	adds	r3, #14
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe fca7 	bl	800e1bc <ld_word>
 800f86e:	4603      	mov	r3, r0
 800f870:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f872:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f874:	2b00      	cmp	r3, #0
 800f876:	d101      	bne.n	800f87c <find_volume+0x28c>
 800f878:	230d      	movs	r3, #13
 800f87a:	e0fa      	b.n	800fa72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f87c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f87e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f880:	4413      	add	r3, r2
 800f882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f884:	8912      	ldrh	r2, [r2, #8]
 800f886:	0912      	lsrs	r2, r2, #4
 800f888:	b292      	uxth	r2, r2
 800f88a:	4413      	add	r3, r2
 800f88c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f88e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f892:	429a      	cmp	r2, r3
 800f894:	d204      	bcs.n	800f8a0 <find_volume+0x2b0>
 800f896:	230d      	movs	r3, #13
 800f898:	e0eb      	b.n	800fa72 <find_volume+0x482>
 800f89a:	bf00      	nop
 800f89c:	24000bfc 	.word	0x24000bfc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f8a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f8a8:	8952      	ldrh	r2, [r2, #10]
 800f8aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <find_volume+0x2ca>
 800f8b6:	230d      	movs	r3, #13
 800f8b8:	e0db      	b.n	800fa72 <find_volume+0x482>
		fmt = FS_FAT32;
 800f8ba:	2303      	movs	r3, #3
 800f8bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d802      	bhi.n	800f8d0 <find_volume+0x2e0>
 800f8ca:	2302      	movs	r3, #2
 800f8cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d802      	bhi.n	800f8e0 <find_volume+0x2f0>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e2:	1c9a      	adds	r2, r3, #2
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f8ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8f2:	441a      	add	r2, r3
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f8f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fc:	441a      	add	r2, r3
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f900:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f902:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f906:	2b03      	cmp	r3, #3
 800f908:	d11e      	bne.n	800f948 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f90c:	3330      	adds	r3, #48	@ 0x30
 800f90e:	332a      	adds	r3, #42	@ 0x2a
 800f910:	4618      	mov	r0, r3
 800f912:	f7fe fc53 	bl	800e1bc <ld_word>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <find_volume+0x330>
 800f91c:	230d      	movs	r3, #13
 800f91e:	e0a8      	b.n	800fa72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f922:	891b      	ldrh	r3, [r3, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <find_volume+0x33c>
 800f928:	230d      	movs	r3, #13
 800f92a:	e0a2      	b.n	800fa72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92e:	3330      	adds	r3, #48	@ 0x30
 800f930:	332c      	adds	r3, #44	@ 0x2c
 800f932:	4618      	mov	r0, r3
 800f934:	f7fe fc5a 	bl	800e1ec <ld_dword>
 800f938:	4602      	mov	r2, r0
 800f93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f940:	695b      	ldr	r3, [r3, #20]
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	647b      	str	r3, [r7, #68]	@ 0x44
 800f946:	e01f      	b.n	800f988 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <find_volume+0x364>
 800f950:	230d      	movs	r3, #13
 800f952:	e08e      	b.n	800fa72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f956:	6a1a      	ldr	r2, [r3, #32]
 800f958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f95a:	441a      	add	r2, r3
 800f95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f960:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f964:	2b02      	cmp	r3, #2
 800f966:	d103      	bne.n	800f970 <find_volume+0x380>
 800f968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96a:	695b      	ldr	r3, [r3, #20]
 800f96c:	005b      	lsls	r3, r3, #1
 800f96e:	e00a      	b.n	800f986 <find_volume+0x396>
 800f970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f972:	695a      	ldr	r2, [r3, #20]
 800f974:	4613      	mov	r3, r2
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	4413      	add	r3, r2
 800f97a:	085a      	lsrs	r2, r3, #1
 800f97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97e:	695b      	ldr	r3, [r3, #20]
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f986:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98a:	699a      	ldr	r2, [r3, #24]
 800f98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f98e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f992:	0a5b      	lsrs	r3, r3, #9
 800f994:	429a      	cmp	r2, r3
 800f996:	d201      	bcs.n	800f99c <find_volume+0x3ac>
 800f998:	230d      	movs	r3, #13
 800f99a:	e06a      	b.n	800fa72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99e:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a2:	611a      	str	r2, [r3, #16]
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a6:	691a      	ldr	r2, [r3, #16]
 800f9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ae:	2280      	movs	r2, #128	@ 0x80
 800f9b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f9b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f9b6:	2b03      	cmp	r3, #3
 800f9b8:	d149      	bne.n	800fa4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	3330      	adds	r3, #48	@ 0x30
 800f9be:	3330      	adds	r3, #48	@ 0x30
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fe fbfb 	bl	800e1bc <ld_word>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d140      	bne.n	800fa4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f9cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f9d4:	f7fe fea2 	bl	800e71c <move_window>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d137      	bne.n	800fa4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e6:	3330      	adds	r3, #48	@ 0x30
 800f9e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fe fbe5 	bl	800e1bc <ld_word>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d127      	bne.n	800fa4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	3330      	adds	r3, #48	@ 0x30
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe fbf2 	bl	800e1ec <ld_dword>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	4a1c      	ldr	r2, [pc, #112]	@ (800fa7c <find_volume+0x48c>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d11e      	bne.n	800fa4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa12:	3330      	adds	r3, #48	@ 0x30
 800fa14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7fe fbe7 	bl	800e1ec <ld_dword>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4a17      	ldr	r2, [pc, #92]	@ (800fa80 <find_volume+0x490>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d113      	bne.n	800fa4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa28:	3330      	adds	r3, #48	@ 0x30
 800fa2a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fe fbdc 	bl	800e1ec <ld_dword>
 800fa34:	4602      	mov	r2, r0
 800fa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa3c:	3330      	adds	r3, #48	@ 0x30
 800fa3e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe fbd2 	bl	800e1ec <ld_dword>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa50:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fa54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa56:	4b0b      	ldr	r3, [pc, #44]	@ (800fa84 <find_volume+0x494>)
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	4b09      	ldr	r3, [pc, #36]	@ (800fa84 <find_volume+0x494>)
 800fa60:	801a      	strh	r2, [r3, #0]
 800fa62:	4b08      	ldr	r3, [pc, #32]	@ (800fa84 <find_volume+0x494>)
 800fa64:	881a      	ldrh	r2, [r3, #0]
 800fa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa6c:	f7fe fdee 	bl	800e64c <clear_lock>
#endif
	return FR_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3758      	adds	r7, #88	@ 0x58
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	41615252 	.word	0x41615252
 800fa80:	61417272 	.word	0x61417272
 800fa84:	24000c00 	.word	0x24000c00

0800fa88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fa92:	2309      	movs	r3, #9
 800fa94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d01c      	beq.n	800fad6 <validate+0x4e>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d018      	beq.n	800fad6 <validate+0x4e>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d013      	beq.n	800fad6 <validate+0x4e>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	889a      	ldrh	r2, [r3, #4]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	88db      	ldrh	r3, [r3, #6]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d10c      	bne.n	800fad6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	785b      	ldrb	r3, [r3, #1]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe fada 	bl	800e07c <disk_status>
 800fac8:	4603      	mov	r3, r0
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <validate+0x4e>
			res = FR_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fad6:	7bfb      	ldrb	r3, [r7, #15]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d102      	bne.n	800fae2 <validate+0x5a>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	e000      	b.n	800fae4 <validate+0x5c>
 800fae2:	2300      	movs	r3, #0
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	6013      	str	r3, [r2, #0]
	return res;
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	4613      	mov	r3, r2
 800fb00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb06:	f107 0310 	add.w	r3, r7, #16
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7ff fcd5 	bl	800f4ba <get_ldnumber>
 800fb10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	da01      	bge.n	800fb1c <f_mount+0x28>
 800fb18:	230b      	movs	r3, #11
 800fb1a:	e02b      	b.n	800fb74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb1c:	4a17      	ldr	r2, [pc, #92]	@ (800fb7c <f_mount+0x88>)
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d005      	beq.n	800fb38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb2c:	69b8      	ldr	r0, [r7, #24]
 800fb2e:	f7fe fd8d 	bl	800e64c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	2200      	movs	r2, #0
 800fb36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d002      	beq.n	800fb44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2200      	movs	r2, #0
 800fb42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	490d      	ldr	r1, [pc, #52]	@ (800fb7c <f_mount+0x88>)
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <f_mount+0x66>
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d001      	beq.n	800fb5e <f_mount+0x6a>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	e00a      	b.n	800fb74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fb5e:	f107 010c 	add.w	r1, r7, #12
 800fb62:	f107 0308 	add.w	r3, r7, #8
 800fb66:	2200      	movs	r2, #0
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff fd41 	bl	800f5f0 <find_volume>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3720      	adds	r7, #32
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	24000bfc 	.word	0x24000bfc

0800fb80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b098      	sub	sp, #96	@ 0x60
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d101      	bne.n	800fb98 <f_open+0x18>
 800fb94:	2309      	movs	r3, #9
 800fb96:	e1a9      	b.n	800feec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fba0:	79fa      	ldrb	r2, [r7, #7]
 800fba2:	f107 0110 	add.w	r1, r7, #16
 800fba6:	f107 0308 	add.w	r3, r7, #8
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fd20 	bl	800f5f0 <find_volume>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800fbb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f040 818d 	bne.w	800feda <f_open+0x35a>
		dj.obj.fs = fs;
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	f107 0314 	add.w	r3, r7, #20
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff fc03 	bl	800f3d8 <follow_path>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fbd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d118      	bne.n	800fc12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fbe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbe4:	b25b      	sxtb	r3, r3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	da03      	bge.n	800fbf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fbea:	2306      	movs	r3, #6
 800fbec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fbf0:	e00f      	b.n	800fc12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	bf8c      	ite	hi
 800fbf8:	2301      	movhi	r3, #1
 800fbfa:	2300      	movls	r3, #0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f107 0314 	add.w	r3, r7, #20
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fbd8 	bl	800e3bc <chk_lock>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc12:	79fb      	ldrb	r3, [r7, #7]
 800fc14:	f003 031c 	and.w	r3, r3, #28
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d07f      	beq.n	800fd1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fc1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d017      	beq.n	800fc54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fc24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc28:	2b04      	cmp	r3, #4
 800fc2a:	d10e      	bne.n	800fc4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fc2c:	f7fe fc22 	bl	800e474 <enq_lock>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d006      	beq.n	800fc44 <f_open+0xc4>
 800fc36:	f107 0314 	add.w	r3, r7, #20
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fb06 	bl	800f24c <dir_register>
 800fc40:	4603      	mov	r3, r0
 800fc42:	e000      	b.n	800fc46 <f_open+0xc6>
 800fc44:	2312      	movs	r3, #18
 800fc46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	f043 0308 	orr.w	r3, r3, #8
 800fc50:	71fb      	strb	r3, [r7, #7]
 800fc52:	e010      	b.n	800fc76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fc54:	7ebb      	ldrb	r3, [r7, #26]
 800fc56:	f003 0311 	and.w	r3, r3, #17
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <f_open+0xe6>
					res = FR_DENIED;
 800fc5e:	2307      	movs	r3, #7
 800fc60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc64:	e007      	b.n	800fc76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fc66:	79fb      	ldrb	r3, [r7, #7]
 800fc68:	f003 0304 	and.w	r3, r3, #4
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d002      	beq.n	800fc76 <f_open+0xf6>
 800fc70:	2308      	movs	r3, #8
 800fc72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d168      	bne.n	800fd50 <f_open+0x1d0>
 800fc7e:	79fb      	ldrb	r3, [r7, #7]
 800fc80:	f003 0308 	and.w	r3, r3, #8
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d063      	beq.n	800fd50 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fc88:	f7fd ff6c 	bl	800db64 <get_fattime>
 800fc8c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fc8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc90:	330e      	adds	r3, #14
 800fc92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fe fae7 	bl	800e268 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc9c:	3316      	adds	r3, #22
 800fc9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe fae1 	bl	800e268 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fca8:	330b      	adds	r3, #11
 800fcaa:	2220      	movs	r2, #32
 800fcac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fcb2:	4611      	mov	r1, r2
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7ff fa35 	bl	800f124 <ld_clust>
 800fcba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff fa4d 	bl	800f162 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcca:	331c      	adds	r3, #28
 800fccc:	2100      	movs	r1, #0
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe faca 	bl	800e268 <st_dword>
					fs->wflag = 1;
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fcda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d037      	beq.n	800fd50 <f_open+0x1d0>
						dw = fs->winsect;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fce6:	f107 0314 	add.w	r3, r7, #20
 800fcea:	2200      	movs	r2, #0
 800fcec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe ff60 	bl	800ebb4 <remove_chain>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fcfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d126      	bne.n	800fd50 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe fd08 	bl	800e71c <move_window>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd16:	3a01      	subs	r2, #1
 800fd18:	60da      	str	r2, [r3, #12]
 800fd1a:	e019      	b.n	800fd50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d115      	bne.n	800fd50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd24:	7ebb      	ldrb	r3, [r7, #26]
 800fd26:	f003 0310 	and.w	r3, r3, #16
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <f_open+0x1b6>
					res = FR_NO_FILE;
 800fd2e:	2304      	movs	r3, #4
 800fd30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fd34:	e00c      	b.n	800fd50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	f003 0302 	and.w	r3, r3, #2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d007      	beq.n	800fd50 <f_open+0x1d0>
 800fd40:	7ebb      	ldrb	r3, [r7, #26]
 800fd42:	f003 0301 	and.w	r3, r3, #1
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <f_open+0x1d0>
						res = FR_DENIED;
 800fd4a:	2307      	movs	r3, #7
 800fd4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d126      	bne.n	800fda6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	f003 0308 	and.w	r3, r3, #8
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fd72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	bf8c      	ite	hi
 800fd7e:	2301      	movhi	r3, #1
 800fd80:	2300      	movls	r3, #0
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	f107 0314 	add.w	r3, r7, #20
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fe fb93 	bl	800e4b8 <inc_lock>
 800fd92:	4602      	mov	r2, r0
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <f_open+0x226>
 800fda0:	2302      	movs	r3, #2
 800fda2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fda6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f040 8095 	bne.w	800feda <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff f9b4 	bl	800f124 <ld_clust>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fdc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc4:	331c      	adds	r3, #28
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fe fa10 	bl	800e1ec <ld_dword>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	88da      	ldrh	r2, [r3, #6]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	79fa      	ldrb	r2, [r7, #7]
 800fdea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3330      	adds	r3, #48	@ 0x30
 800fe02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe06:	2100      	movs	r1, #0
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fa7a 	bl	800e302 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe0e:	79fb      	ldrb	r3, [r7, #7]
 800fe10:	f003 0320 	and.w	r3, r3, #32
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d060      	beq.n	800feda <f_open+0x35a>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d05c      	beq.n	800feda <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	68da      	ldr	r2, [r3, #12]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	895b      	ldrh	r3, [r3, #10]
 800fe2c:	025b      	lsls	r3, r3, #9
 800fe2e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe3c:	e016      	b.n	800fe6c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fe fd25 	bl	800e892 <get_fat>
 800fe48:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fe4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d802      	bhi.n	800fe56 <f_open+0x2d6>
 800fe50:	2302      	movs	r3, #2
 800fe52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5c:	d102      	bne.n	800fe64 <f_open+0x2e4>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d103      	bne.n	800fe7c <f_open+0x2fc>
 800fe74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d8e0      	bhi.n	800fe3e <f_open+0x2be>
				}
				fp->clust = clst;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fe82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d127      	bne.n	800feda <f_open+0x35a>
 800fe8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d022      	beq.n	800feda <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fe fcdb 	bl	800e854 <clust2sect>
 800fe9e:	6478      	str	r0, [r7, #68]	@ 0x44
 800fea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d103      	bne.n	800feae <f_open+0x32e>
						res = FR_INT_ERR;
 800fea6:	2302      	movs	r3, #2
 800fea8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800feac:	e015      	b.n	800feda <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800feae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feb0:	0a5a      	lsrs	r2, r3, #9
 800feb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feb4:	441a      	add	r2, r3
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	7858      	ldrb	r0, [r3, #1]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1a      	ldr	r2, [r3, #32]
 800fec8:	2301      	movs	r3, #1
 800feca:	f7fe f919 	bl	800e100 <disk_read>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <f_open+0x35a>
 800fed4:	2301      	movs	r3, #1
 800fed6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800feda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d002      	beq.n	800fee8 <f_open+0x368>
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fee8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800feec:	4618      	mov	r0, r3
 800feee:	3760      	adds	r7, #96	@ 0x60
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b08e      	sub	sp, #56	@ 0x38
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f107 0214 	add.w	r2, r7, #20
 800ff12:	4611      	mov	r1, r2
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7ff fdb7 	bl	800fa88 <validate>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ff20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d107      	bne.n	800ff38 <f_read+0x44>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	7d5b      	ldrb	r3, [r3, #21]
 800ff2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ff30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <f_read+0x4a>
 800ff38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff3c:	e115      	b.n	801016a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d101      	bne.n	800ff4e <f_read+0x5a>
 800ff4a:	2307      	movs	r3, #7
 800ff4c:	e10d      	b.n	801016a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	68da      	ldr	r2, [r3, #12]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	699b      	ldr	r3, [r3, #24]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	f240 80fe 	bls.w	8010160 <f_read+0x26c>
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ff68:	e0fa      	b.n	8010160 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	699b      	ldr	r3, [r3, #24]
 800ff6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f040 80c6 	bne.w	8010104 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	0a5b      	lsrs	r3, r3, #9
 800ff7e:	697a      	ldr	r2, [r7, #20]
 800ff80:	8952      	ldrh	r2, [r2, #10]
 800ff82:	3a01      	subs	r2, #1
 800ff84:	4013      	ands	r3, r2
 800ff86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d12f      	bne.n	800ffee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	699b      	ldr	r3, [r3, #24]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d103      	bne.n	800ff9e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff9c:	e013      	b.n	800ffc6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d007      	beq.n	800ffb6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	4619      	mov	r1, r3
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7fe fefe 	bl	800edae <clmt_clust>
 800ffb2:	6338      	str	r0, [r7, #48]	@ 0x30
 800ffb4:	e007      	b.n	800ffc6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	4610      	mov	r0, r2
 800ffc0:	f7fe fc67 	bl	800e892 <get_fat>
 800ffc4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d804      	bhi.n	800ffd6 <f_read+0xe2>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2202      	movs	r2, #2
 800ffd0:	755a      	strb	r2, [r3, #21]
 800ffd2:	2302      	movs	r3, #2
 800ffd4:	e0c9      	b.n	801016a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffdc:	d104      	bne.n	800ffe8 <f_read+0xf4>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	755a      	strb	r2, [r3, #21]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e0c0      	b.n	801016a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	69db      	ldr	r3, [r3, #28]
 800fff4:	4619      	mov	r1, r3
 800fff6:	4610      	mov	r0, r2
 800fff8:	f7fe fc2c 	bl	800e854 <clust2sect>
 800fffc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d104      	bne.n	801000e <f_read+0x11a>
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2202      	movs	r2, #2
 8010008:	755a      	strb	r2, [r3, #21]
 801000a:	2302      	movs	r3, #2
 801000c:	e0ad      	b.n	801016a <f_read+0x276>
			sect += csect;
 801000e:	69ba      	ldr	r2, [r7, #24]
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	4413      	add	r3, r2
 8010014:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	0a5b      	lsrs	r3, r3, #9
 801001a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801001c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001e:	2b00      	cmp	r3, #0
 8010020:	d039      	beq.n	8010096 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010026:	4413      	add	r3, r2
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	8952      	ldrh	r2, [r2, #10]
 801002c:	4293      	cmp	r3, r2
 801002e:	d905      	bls.n	801003c <f_read+0x148>
					cc = fs->csize - csect;
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	895b      	ldrh	r3, [r3, #10]
 8010034:	461a      	mov	r2, r3
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	7858      	ldrb	r0, [r3, #1]
 8010040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010046:	f7fe f85b 	bl	800e100 <disk_read>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d004      	beq.n	801005a <f_read+0x166>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2201      	movs	r2, #1
 8010054:	755a      	strb	r2, [r3, #21]
 8010056:	2301      	movs	r3, #1
 8010058:	e087      	b.n	801016a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7d1b      	ldrb	r3, [r3, #20]
 801005e:	b25b      	sxtb	r3, r3
 8010060:	2b00      	cmp	r3, #0
 8010062:	da14      	bge.n	801008e <f_read+0x19a>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6a1a      	ldr	r2, [r3, #32]
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801006e:	429a      	cmp	r2, r3
 8010070:	d90d      	bls.n	801008e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6a1a      	ldr	r2, [r3, #32]
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	025b      	lsls	r3, r3, #9
 801007c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801007e:	18d0      	adds	r0, r2, r3
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	3330      	adds	r3, #48	@ 0x30
 8010084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010088:	4619      	mov	r1, r3
 801008a:	f7fe f919 	bl	800e2c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801008e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010090:	025b      	lsls	r3, r3, #9
 8010092:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010094:	e050      	b.n	8010138 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6a1b      	ldr	r3, [r3, #32]
 801009a:	69ba      	ldr	r2, [r7, #24]
 801009c:	429a      	cmp	r2, r3
 801009e:	d02e      	beq.n	80100fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	7d1b      	ldrb	r3, [r3, #20]
 80100a4:	b25b      	sxtb	r3, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	da18      	bge.n	80100dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	7858      	ldrb	r0, [r3, #1]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6a1a      	ldr	r2, [r3, #32]
 80100b8:	2301      	movs	r3, #1
 80100ba:	f7fe f841 	bl	800e140 <disk_write>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d004      	beq.n	80100ce <f_read+0x1da>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2201      	movs	r2, #1
 80100c8:	755a      	strb	r2, [r3, #21]
 80100ca:	2301      	movs	r3, #1
 80100cc:	e04d      	b.n	801016a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	7d1b      	ldrb	r3, [r3, #20]
 80100d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100d6:	b2da      	uxtb	r2, r3
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	7858      	ldrb	r0, [r3, #1]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80100e6:	2301      	movs	r3, #1
 80100e8:	69ba      	ldr	r2, [r7, #24]
 80100ea:	f7fe f809 	bl	800e100 <disk_read>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d004      	beq.n	80100fe <f_read+0x20a>
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2201      	movs	r2, #1
 80100f8:	755a      	strb	r2, [r3, #21]
 80100fa:	2301      	movs	r3, #1
 80100fc:	e035      	b.n	801016a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801010c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010110:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	429a      	cmp	r2, r3
 8010118:	d901      	bls.n	801011e <f_read+0x22a>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801012c:	4413      	add	r3, r2
 801012e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010130:	4619      	mov	r1, r3
 8010132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010134:	f7fe f8c4 	bl	800e2c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801013a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013c:	4413      	add	r3, r2
 801013e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	699a      	ldr	r2, [r3, #24]
 8010144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010146:	441a      	add	r2, r3
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	619a      	str	r2, [r3, #24]
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010152:	441a      	add	r2, r3
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f47f af01 	bne.w	800ff6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3738      	adds	r7, #56	@ 0x38
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b086      	sub	sp, #24
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f107 0208 	add.w	r2, r7, #8
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff fc80 	bl	800fa88 <validate>
 8010188:	4603      	mov	r3, r0
 801018a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801018c:	7dfb      	ldrb	r3, [r7, #23]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d168      	bne.n	8010264 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	7d1b      	ldrb	r3, [r3, #20]
 8010196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801019a:	2b00      	cmp	r3, #0
 801019c:	d062      	beq.n	8010264 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	b25b      	sxtb	r3, r3
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	da15      	bge.n	80101d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	7858      	ldrb	r0, [r3, #1]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6a1a      	ldr	r2, [r3, #32]
 80101b6:	2301      	movs	r3, #1
 80101b8:	f7fd ffc2 	bl	800e140 <disk_write>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d001      	beq.n	80101c6 <f_sync+0x54>
 80101c2:	2301      	movs	r3, #1
 80101c4:	e04f      	b.n	8010266 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80101d4:	f7fd fcc6 	bl	800db64 <get_fattime>
 80101d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101e0:	4619      	mov	r1, r3
 80101e2:	4610      	mov	r0, r2
 80101e4:	f7fe fa9a 	bl	800e71c <move_window>
 80101e8:	4603      	mov	r3, r0
 80101ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d138      	bne.n	8010264 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	330b      	adds	r3, #11
 80101fc:	781a      	ldrb	r2, [r3, #0]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	330b      	adds	r3, #11
 8010202:	f042 0220 	orr.w	r2, r2, #32
 8010206:	b2d2      	uxtb	r2, r2
 8010208:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	461a      	mov	r2, r3
 8010214:	68f9      	ldr	r1, [r7, #12]
 8010216:	f7fe ffa4 	bl	800f162 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f103 021c 	add.w	r2, r3, #28
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	4619      	mov	r1, r3
 8010226:	4610      	mov	r0, r2
 8010228:	f7fe f81e 	bl	800e268 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	3316      	adds	r3, #22
 8010230:	6939      	ldr	r1, [r7, #16]
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe f818 	bl	800e268 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3312      	adds	r3, #18
 801023c:	2100      	movs	r1, #0
 801023e:	4618      	mov	r0, r3
 8010240:	f7fd fff7 	bl	800e232 <st_word>
					fs->wflag = 1;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	2201      	movs	r2, #1
 8010248:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	4618      	mov	r0, r3
 801024e:	f7fe fa93 	bl	800e778 <sync_fs>
 8010252:	4603      	mov	r3, r0
 8010254:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	7d1b      	ldrb	r3, [r3, #20]
 801025a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801025e:	b2da      	uxtb	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010264:	7dfb      	ldrb	r3, [r7, #23]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b084      	sub	sp, #16
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff ff7b 	bl	8010172 <f_sync>
 801027c:	4603      	mov	r3, r0
 801027e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010280:	7bfb      	ldrb	r3, [r7, #15]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d118      	bne.n	80102b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f107 0208 	add.w	r2, r7, #8
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff fbfa 	bl	800fa88 <validate>
 8010294:	4603      	mov	r3, r0
 8010296:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d10c      	bne.n	80102b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe f996 	bl	800e5d4 <dec_lock>
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d102      	bne.n	80102b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80102b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
	...

080102c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b087      	sub	sp, #28
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	4613      	mov	r3, r2
 80102d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80102d2:	2301      	movs	r3, #1
 80102d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80102da:	4b1f      	ldr	r3, [pc, #124]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 80102dc:	7a5b      	ldrb	r3, [r3, #9]
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d131      	bne.n	8010348 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80102e4:	4b1c      	ldr	r3, [pc, #112]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 80102e6:	7a5b      	ldrb	r3, [r3, #9]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	461a      	mov	r2, r3
 80102ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 80102ee:	2100      	movs	r1, #0
 80102f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80102f2:	4b19      	ldr	r3, [pc, #100]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 80102f4:	7a5b      	ldrb	r3, [r3, #9]
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	4a17      	ldr	r2, [pc, #92]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4413      	add	r3, r2
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010302:	4b15      	ldr	r3, [pc, #84]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 8010304:	7a5b      	ldrb	r3, [r3, #9]
 8010306:	b2db      	uxtb	r3, r3
 8010308:	461a      	mov	r2, r3
 801030a:	4b13      	ldr	r3, [pc, #76]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 801030c:	4413      	add	r3, r2
 801030e:	79fa      	ldrb	r2, [r7, #7]
 8010310:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010312:	4b11      	ldr	r3, [pc, #68]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 8010314:	7a5b      	ldrb	r3, [r3, #9]
 8010316:	b2db      	uxtb	r3, r3
 8010318:	1c5a      	adds	r2, r3, #1
 801031a:	b2d1      	uxtb	r1, r2
 801031c:	4a0e      	ldr	r2, [pc, #56]	@ (8010358 <FATFS_LinkDriverEx+0x94>)
 801031e:	7251      	strb	r1, [r2, #9]
 8010320:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010322:	7dbb      	ldrb	r3, [r7, #22]
 8010324:	3330      	adds	r3, #48	@ 0x30
 8010326:	b2da      	uxtb	r2, r3
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	3301      	adds	r3, #1
 8010330:	223a      	movs	r2, #58	@ 0x3a
 8010332:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	3302      	adds	r3, #2
 8010338:	222f      	movs	r2, #47	@ 0x2f
 801033a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	3303      	adds	r3, #3
 8010340:	2200      	movs	r2, #0
 8010342:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010348:	7dfb      	ldrb	r3, [r7, #23]
}
 801034a:	4618      	mov	r0, r3
 801034c:	371c      	adds	r7, #28
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	24000c24 	.word	0x24000c24

0801035c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010366:	2200      	movs	r2, #0
 8010368:	6839      	ldr	r1, [r7, #0]
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7ff ffaa 	bl	80102c4 <FATFS_LinkDriverEx>
 8010370:	4603      	mov	r3, r0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <_ZdlPvj>:
 801037a:	f000 b99c 	b.w	80106b6 <_ZdlPv>

0801037e <__cxa_guard_acquire>:
 801037e:	6802      	ldr	r2, [r0, #0]
 8010380:	07d2      	lsls	r2, r2, #31
 8010382:	4603      	mov	r3, r0
 8010384:	d405      	bmi.n	8010392 <__cxa_guard_acquire+0x14>
 8010386:	7842      	ldrb	r2, [r0, #1]
 8010388:	b102      	cbz	r2, 801038c <__cxa_guard_acquire+0xe>
 801038a:	deff      	udf	#255	@ 0xff
 801038c:	2001      	movs	r0, #1
 801038e:	7058      	strb	r0, [r3, #1]
 8010390:	4770      	bx	lr
 8010392:	2000      	movs	r0, #0
 8010394:	4770      	bx	lr

08010396 <__cxa_guard_release>:
 8010396:	2301      	movs	r3, #1
 8010398:	6003      	str	r3, [r0, #0]
 801039a:	4770      	bx	lr

0801039c <_Znwj>:
 801039c:	2801      	cmp	r0, #1
 801039e:	bf38      	it	cc
 80103a0:	2001      	movcc	r0, #1
 80103a2:	b510      	push	{r4, lr}
 80103a4:	4604      	mov	r4, r0
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f99e 	bl	80106e8 <malloc>
 80103ac:	b100      	cbz	r0, 80103b0 <_Znwj+0x14>
 80103ae:	bd10      	pop	{r4, pc}
 80103b0:	f000 f984 	bl	80106bc <_ZSt15get_new_handlerv>
 80103b4:	b908      	cbnz	r0, 80103ba <_Znwj+0x1e>
 80103b6:	f000 f98f 	bl	80106d8 <abort>
 80103ba:	4780      	blx	r0
 80103bc:	e7f3      	b.n	80103a6 <_Znwj+0xa>

080103be <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80103be:	b10a      	cbz	r2, 80103c4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80103c0:	f000 bd4b 	b.w	8010e5a <memcpy>
 80103c4:	4770      	bx	lr

080103c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80103c6:	f850 3b08 	ldr.w	r3, [r0], #8
 80103ca:	1a1b      	subs	r3, r3, r0
 80103cc:	4258      	negs	r0, r3
 80103ce:	4158      	adcs	r0, r3
 80103d0:	4770      	bx	lr
	...

080103d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80103d4:	b508      	push	{r3, lr}
 80103d6:	680b      	ldr	r3, [r1, #0]
 80103d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103dc:	d302      	bcc.n	80103e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80103de:	480d      	ldr	r0, [pc, #52]	@ (8010414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80103e0:	f000 f977 	bl	80106d2 <_ZSt20__throw_length_errorPKc>
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d90b      	bls.n	8010400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80103e8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80103ec:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80103f0:	d206      	bcs.n	8010400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80103f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80103f6:	bf2a      	itet	cs
 80103f8:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80103fc:	6008      	strcc	r0, [r1, #0]
 80103fe:	600b      	strcs	r3, [r1, #0]
 8010400:	6808      	ldr	r0, [r1, #0]
 8010402:	3001      	adds	r0, #1
 8010404:	d501      	bpl.n	801040a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8010406:	f000 f961 	bl	80106cc <_ZSt17__throw_bad_allocv>
 801040a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801040e:	f7ff bfc5 	b.w	801039c <_Znwj>
 8010412:	bf00      	nop
 8010414:	08011bfc 	.word	0x08011bfc

08010418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010418:	b510      	push	{r4, lr}
 801041a:	4604      	mov	r4, r0
 801041c:	f7ff ffd3 	bl	80103c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010420:	b920      	cbnz	r0, 801042c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8010422:	6820      	ldr	r0, [r4, #0]
 8010424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010428:	f000 b945 	b.w	80106b6 <_ZdlPv>
 801042c:	bd10      	pop	{r4, pc}

0801042e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801042e:	6840      	ldr	r0, [r0, #4]
 8010430:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8010434:	3901      	subs	r1, #1
 8010436:	1a09      	subs	r1, r1, r0
 8010438:	4291      	cmp	r1, r2
 801043a:	b508      	push	{r3, lr}
 801043c:	d202      	bcs.n	8010444 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f947 	bl	80106d2 <_ZSt20__throw_length_errorPKc>
 8010444:	bd08      	pop	{r3, pc}

08010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010446:	2a01      	cmp	r2, #1
 8010448:	b410      	push	{r4}
 801044a:	d104      	bne.n	8010456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801044c:	780a      	ldrb	r2, [r1, #0]
 801044e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010452:	7002      	strb	r2, [r0, #0]
 8010454:	4770      	bx	lr
 8010456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801045a:	f7ff bfb0 	b.w	80103be <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801045e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801045e:	2a01      	cmp	r2, #1
 8010460:	b430      	push	{r4, r5}
 8010462:	d103      	bne.n	801046c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010464:	780b      	ldrb	r3, [r1, #0]
 8010466:	7003      	strb	r3, [r0, #0]
 8010468:	bc30      	pop	{r4, r5}
 801046a:	4770      	bx	lr
 801046c:	2a00      	cmp	r2, #0
 801046e:	d0fb      	beq.n	8010468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8010470:	bc30      	pop	{r4, r5}
 8010472:	f000 bc09 	b.w	8010c88 <memmove>

08010476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8010476:	460b      	mov	r3, r1
 8010478:	2b01      	cmp	r3, #1
 801047a:	b410      	push	{r4}
 801047c:	4611      	mov	r1, r2
 801047e:	4604      	mov	r4, r0
 8010480:	d103      	bne.n	801048a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8010482:	7022      	strb	r2, [r4, #0]
 8010484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	2b00      	cmp	r3, #0
 801048c:	d0fa      	beq.n	8010484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801048e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010492:	461a      	mov	r2, r3
 8010494:	f000 bc12 	b.w	8010cbc <memset>

08010498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8010498:	b508      	push	{r3, lr}
 801049a:	1a52      	subs	r2, r2, r1
 801049c:	f7ff ffd3 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80104a0:	bd08      	pop	{r3, pc}

080104a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80104a2:	f100 0208 	add.w	r2, r0, #8
 80104a6:	6002      	str	r2, [r0, #0]
 80104a8:	2200      	movs	r2, #0
 80104aa:	6042      	str	r2, [r0, #4]
 80104ac:	7202      	strb	r2, [r0, #8]
 80104ae:	4770      	bx	lr

080104b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	4604      	mov	r4, r0
 80104b4:	f7ff ffb0 	bl	8010418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80104b8:	4620      	mov	r0, r4
 80104ba:	bd10      	pop	{r4, pc}

080104bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	460c      	mov	r4, r1
 80104c0:	4605      	mov	r5, r0
 80104c2:	f7ff ff80 	bl	80103c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80104c6:	4606      	mov	r6, r0
 80104c8:	4620      	mov	r0, r4
 80104ca:	f7ff ff7c 	bl	80103c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80104ce:	b190      	cbz	r0, 80104f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 80104d0:	42a5      	cmp	r5, r4
 80104d2:	d00a      	beq.n	80104ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80104d4:	6862      	ldr	r2, [r4, #4]
 80104d6:	b11a      	cbz	r2, 80104e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 80104d8:	6821      	ldr	r1, [r4, #0]
 80104da:	6828      	ldr	r0, [r5, #0]
 80104dc:	f7ff ffb3 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80104e0:	6863      	ldr	r3, [r4, #4]
 80104e2:	682a      	ldr	r2, [r5, #0]
 80104e4:	606b      	str	r3, [r5, #4]
 80104e6:	2100      	movs	r1, #0
 80104e8:	54d1      	strb	r1, [r2, r3]
 80104ea:	6822      	ldr	r2, [r4, #0]
 80104ec:	2300      	movs	r3, #0
 80104ee:	6063      	str	r3, [r4, #4]
 80104f0:	7013      	strb	r3, [r2, #0]
 80104f2:	4628      	mov	r0, r5
 80104f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104f6:	b90e      	cbnz	r6, 80104fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80104f8:	6828      	ldr	r0, [r5, #0]
 80104fa:	68af      	ldr	r7, [r5, #8]
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	602b      	str	r3, [r5, #0]
 8010500:	6863      	ldr	r3, [r4, #4]
 8010502:	606b      	str	r3, [r5, #4]
 8010504:	68a3      	ldr	r3, [r4, #8]
 8010506:	60ab      	str	r3, [r5, #8]
 8010508:	b110      	cbz	r0, 8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801050a:	6020      	str	r0, [r4, #0]
 801050c:	60a7      	str	r7, [r4, #8]
 801050e:	e7ec      	b.n	80104ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010510:	f104 0308 	add.w	r3, r4, #8
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	e7e8      	b.n	80104ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08010518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8010518:	b510      	push	{r4, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	f7ff ff53 	bl	80103c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010520:	b908      	cbnz	r0, 8010526 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8010522:	68a0      	ldr	r0, [r4, #8]
 8010524:	bd10      	pop	{r4, pc}
 8010526:	200f      	movs	r0, #15
 8010528:	e7fc      	b.n	8010524 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801052a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801052a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801052e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010530:	461f      	mov	r7, r3
 8010532:	6843      	ldr	r3, [r0, #4]
 8010534:	eb01 0802 	add.w	r8, r1, r2
 8010538:	1ab2      	subs	r2, r6, r2
 801053a:	441a      	add	r2, r3
 801053c:	4604      	mov	r4, r0
 801053e:	460d      	mov	r5, r1
 8010540:	eba3 0908 	sub.w	r9, r3, r8
 8010544:	9201      	str	r2, [sp, #4]
 8010546:	f7ff ffe7 	bl	8010518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801054a:	a901      	add	r1, sp, #4
 801054c:	4602      	mov	r2, r0
 801054e:	4620      	mov	r0, r4
 8010550:	f7ff ff40 	bl	80103d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010554:	4682      	mov	sl, r0
 8010556:	b11d      	cbz	r5, 8010560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8010558:	6821      	ldr	r1, [r4, #0]
 801055a:	462a      	mov	r2, r5
 801055c:	f7ff ff73 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010560:	b137      	cbz	r7, 8010570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010562:	b12e      	cbz	r6, 8010570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010564:	4632      	mov	r2, r6
 8010566:	4639      	mov	r1, r7
 8010568:	eb0a 0005 	add.w	r0, sl, r5
 801056c:	f7ff ff6b 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010570:	f1b9 0f00 	cmp.w	r9, #0
 8010574:	d007      	beq.n	8010586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8010576:	6821      	ldr	r1, [r4, #0]
 8010578:	4435      	add	r5, r6
 801057a:	464a      	mov	r2, r9
 801057c:	4441      	add	r1, r8
 801057e:	eb0a 0005 	add.w	r0, sl, r5
 8010582:	f7ff ff60 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010586:	4620      	mov	r0, r4
 8010588:	f7ff ff46 	bl	8010418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801058c:	9b01      	ldr	r3, [sp, #4]
 801058e:	f8c4 a000 	str.w	sl, [r4]
 8010592:	60a3      	str	r3, [r4, #8]
 8010594:	b002      	add	sp, #8
 8010596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801059a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801059a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801059c:	4604      	mov	r4, r0
 801059e:	9101      	str	r1, [sp, #4]
 80105a0:	f7ff ffba 	bl	8010518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80105a4:	9b01      	ldr	r3, [sp, #4]
 80105a6:	4283      	cmp	r3, r0
 80105a8:	4602      	mov	r2, r0
 80105aa:	d90f      	bls.n	80105cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80105ac:	a901      	add	r1, sp, #4
 80105ae:	4620      	mov	r0, r4
 80105b0:	f7ff ff10 	bl	80103d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80105b4:	6862      	ldr	r2, [r4, #4]
 80105b6:	6821      	ldr	r1, [r4, #0]
 80105b8:	3201      	adds	r2, #1
 80105ba:	4605      	mov	r5, r0
 80105bc:	f7ff ff43 	bl	8010446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80105c0:	4620      	mov	r0, r4
 80105c2:	f7ff ff29 	bl	8010418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80105c6:	9b01      	ldr	r3, [sp, #4]
 80105c8:	6025      	str	r5, [r4, #0]
 80105ca:	60a3      	str	r3, [r4, #8]
 80105cc:	b003      	add	sp, #12
 80105ce:	bd30      	pop	{r4, r5, pc}

080105d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80105d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105d4:	4616      	mov	r6, r2
 80105d6:	461d      	mov	r5, r3
 80105d8:	4604      	mov	r4, r0
 80105da:	4b1b      	ldr	r3, [pc, #108]	@ (8010648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80105dc:	462a      	mov	r2, r5
 80105de:	460f      	mov	r7, r1
 80105e0:	4631      	mov	r1, r6
 80105e2:	f7ff ff24 	bl	801042e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80105e6:	4620      	mov	r0, r4
 80105e8:	f7ff ff96 	bl	8010518 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80105ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80105f0:	eba5 0806 	sub.w	r8, r5, r6
 80105f4:	44c8      	add	r8, r9
 80105f6:	4540      	cmp	r0, r8
 80105f8:	d31d      	bcc.n	8010636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80105fa:	19f3      	adds	r3, r6, r7
 80105fc:	ebb9 0203 	subs.w	r2, r9, r3
 8010600:	d007      	beq.n	8010612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010602:	42ae      	cmp	r6, r5
 8010604:	d005      	beq.n	8010612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010606:	6820      	ldr	r0, [r4, #0]
 8010608:	4438      	add	r0, r7
 801060a:	1981      	adds	r1, r0, r6
 801060c:	4428      	add	r0, r5
 801060e:	f7ff ff26 	bl	801045e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010612:	b135      	cbz	r5, 8010622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8010614:	6820      	ldr	r0, [r4, #0]
 8010616:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801061a:	4629      	mov	r1, r5
 801061c:	4438      	add	r0, r7
 801061e:	f7ff ff2a 	bl	8010476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	f8c4 8004 	str.w	r8, [r4, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	4620      	mov	r0, r4
 801062c:	f803 2008 	strb.w	r2, [r3, r8]
 8010630:	b003      	add	sp, #12
 8010632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010636:	9500      	str	r5, [sp, #0]
 8010638:	2300      	movs	r3, #0
 801063a:	4632      	mov	r2, r6
 801063c:	4639      	mov	r1, r7
 801063e:	4620      	mov	r0, r4
 8010640:	f7ff ff73 	bl	801052a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010644:	e7e5      	b.n	8010612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010646:	bf00      	nop
 8010648:	08011c14 	.word	0x08011c14

0801064c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801064c:	b507      	push	{r0, r1, r2, lr}
 801064e:	9200      	str	r2, [sp, #0]
 8010650:	460b      	mov	r3, r1
 8010652:	2200      	movs	r2, #0
 8010654:	6841      	ldr	r1, [r0, #4]
 8010656:	f7ff ffbb 	bl	80105d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801065a:	b003      	add	sp, #12
 801065c:	f85d fb04 	ldr.w	pc, [sp], #4

08010660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010660:	6800      	ldr	r0, [r0, #0]
 8010662:	4770      	bx	lr

08010664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8010664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010666:	1a53      	subs	r3, r2, r1
 8010668:	2b0f      	cmp	r3, #15
 801066a:	4604      	mov	r4, r0
 801066c:	460d      	mov	r5, r1
 801066e:	4616      	mov	r6, r2
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	d906      	bls.n	8010682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8010674:	2200      	movs	r2, #0
 8010676:	a901      	add	r1, sp, #4
 8010678:	f7ff feac 	bl	80103d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801067c:	9b01      	ldr	r3, [sp, #4]
 801067e:	6020      	str	r0, [r4, #0]
 8010680:	60a3      	str	r3, [r4, #8]
 8010682:	4632      	mov	r2, r6
 8010684:	4629      	mov	r1, r5
 8010686:	6820      	ldr	r0, [r4, #0]
 8010688:	f7ff ff06 	bl	8010498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	6822      	ldr	r2, [r4, #0]
 8010690:	6063      	str	r3, [r4, #4]
 8010692:	2100      	movs	r1, #0
 8010694:	54d1      	strb	r1, [r2, r3]
 8010696:	b002      	add	sp, #8
 8010698:	bd70      	pop	{r4, r5, r6, pc}

0801069a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801069a:	f100 0208 	add.w	r2, r0, #8
 801069e:	b510      	push	{r4, lr}
 80106a0:	6002      	str	r2, [r0, #0]
 80106a2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80106a6:	4604      	mov	r4, r0
 80106a8:	f04f 0300 	mov.w	r3, #0
 80106ac:	440a      	add	r2, r1
 80106ae:	f7ff ffd9 	bl	8010664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80106b2:	4620      	mov	r0, r4
 80106b4:	bd10      	pop	{r4, pc}

080106b6 <_ZdlPv>:
 80106b6:	f000 b81f 	b.w	80106f8 <free>
	...

080106bc <_ZSt15get_new_handlerv>:
 80106bc:	4b02      	ldr	r3, [pc, #8]	@ (80106c8 <_ZSt15get_new_handlerv+0xc>)
 80106be:	6818      	ldr	r0, [r3, #0]
 80106c0:	f3bf 8f5b 	dmb	ish
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	24000c30 	.word	0x24000c30

080106cc <_ZSt17__throw_bad_allocv>:
 80106cc:	b508      	push	{r3, lr}
 80106ce:	f000 f803 	bl	80106d8 <abort>

080106d2 <_ZSt20__throw_length_errorPKc>:
 80106d2:	b508      	push	{r3, lr}
 80106d4:	f000 f800 	bl	80106d8 <abort>

080106d8 <abort>:
 80106d8:	b508      	push	{r3, lr}
 80106da:	2006      	movs	r0, #6
 80106dc:	f000 fb1e 	bl	8010d1c <raise>
 80106e0:	2001      	movs	r0, #1
 80106e2:	f7f3 f849 	bl	8003778 <_exit>
	...

080106e8 <malloc>:
 80106e8:	4b02      	ldr	r3, [pc, #8]	@ (80106f4 <malloc+0xc>)
 80106ea:	4601      	mov	r1, r0
 80106ec:	6818      	ldr	r0, [r3, #0]
 80106ee:	f000 b82d 	b.w	801074c <_malloc_r>
 80106f2:	bf00      	nop
 80106f4:	2400006c 	.word	0x2400006c

080106f8 <free>:
 80106f8:	4b02      	ldr	r3, [pc, #8]	@ (8010704 <free+0xc>)
 80106fa:	4601      	mov	r1, r0
 80106fc:	6818      	ldr	r0, [r3, #0]
 80106fe:	f000 bbbb 	b.w	8010e78 <_free_r>
 8010702:	bf00      	nop
 8010704:	2400006c 	.word	0x2400006c

08010708 <sbrk_aligned>:
 8010708:	b570      	push	{r4, r5, r6, lr}
 801070a:	4e0f      	ldr	r6, [pc, #60]	@ (8010748 <sbrk_aligned+0x40>)
 801070c:	460c      	mov	r4, r1
 801070e:	6831      	ldr	r1, [r6, #0]
 8010710:	4605      	mov	r5, r0
 8010712:	b911      	cbnz	r1, 801071a <sbrk_aligned+0x12>
 8010714:	f000 fb52 	bl	8010dbc <_sbrk_r>
 8010718:	6030      	str	r0, [r6, #0]
 801071a:	4621      	mov	r1, r4
 801071c:	4628      	mov	r0, r5
 801071e:	f000 fb4d 	bl	8010dbc <_sbrk_r>
 8010722:	1c43      	adds	r3, r0, #1
 8010724:	d103      	bne.n	801072e <sbrk_aligned+0x26>
 8010726:	f04f 34ff 	mov.w	r4, #4294967295
 801072a:	4620      	mov	r0, r4
 801072c:	bd70      	pop	{r4, r5, r6, pc}
 801072e:	1cc4      	adds	r4, r0, #3
 8010730:	f024 0403 	bic.w	r4, r4, #3
 8010734:	42a0      	cmp	r0, r4
 8010736:	d0f8      	beq.n	801072a <sbrk_aligned+0x22>
 8010738:	1a21      	subs	r1, r4, r0
 801073a:	4628      	mov	r0, r5
 801073c:	f000 fb3e 	bl	8010dbc <_sbrk_r>
 8010740:	3001      	adds	r0, #1
 8010742:	d1f2      	bne.n	801072a <sbrk_aligned+0x22>
 8010744:	e7ef      	b.n	8010726 <sbrk_aligned+0x1e>
 8010746:	bf00      	nop
 8010748:	24000c34 	.word	0x24000c34

0801074c <_malloc_r>:
 801074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010750:	1ccd      	adds	r5, r1, #3
 8010752:	f025 0503 	bic.w	r5, r5, #3
 8010756:	3508      	adds	r5, #8
 8010758:	2d0c      	cmp	r5, #12
 801075a:	bf38      	it	cc
 801075c:	250c      	movcc	r5, #12
 801075e:	2d00      	cmp	r5, #0
 8010760:	4606      	mov	r6, r0
 8010762:	db01      	blt.n	8010768 <_malloc_r+0x1c>
 8010764:	42a9      	cmp	r1, r5
 8010766:	d904      	bls.n	8010772 <_malloc_r+0x26>
 8010768:	230c      	movs	r3, #12
 801076a:	6033      	str	r3, [r6, #0]
 801076c:	2000      	movs	r0, #0
 801076e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010848 <_malloc_r+0xfc>
 8010776:	f000 f869 	bl	801084c <__malloc_lock>
 801077a:	f8d8 3000 	ldr.w	r3, [r8]
 801077e:	461c      	mov	r4, r3
 8010780:	bb44      	cbnz	r4, 80107d4 <_malloc_r+0x88>
 8010782:	4629      	mov	r1, r5
 8010784:	4630      	mov	r0, r6
 8010786:	f7ff ffbf 	bl	8010708 <sbrk_aligned>
 801078a:	1c43      	adds	r3, r0, #1
 801078c:	4604      	mov	r4, r0
 801078e:	d158      	bne.n	8010842 <_malloc_r+0xf6>
 8010790:	f8d8 4000 	ldr.w	r4, [r8]
 8010794:	4627      	mov	r7, r4
 8010796:	2f00      	cmp	r7, #0
 8010798:	d143      	bne.n	8010822 <_malloc_r+0xd6>
 801079a:	2c00      	cmp	r4, #0
 801079c:	d04b      	beq.n	8010836 <_malloc_r+0xea>
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	4639      	mov	r1, r7
 80107a2:	4630      	mov	r0, r6
 80107a4:	eb04 0903 	add.w	r9, r4, r3
 80107a8:	f000 fb08 	bl	8010dbc <_sbrk_r>
 80107ac:	4581      	cmp	r9, r0
 80107ae:	d142      	bne.n	8010836 <_malloc_r+0xea>
 80107b0:	6821      	ldr	r1, [r4, #0]
 80107b2:	1a6d      	subs	r5, r5, r1
 80107b4:	4629      	mov	r1, r5
 80107b6:	4630      	mov	r0, r6
 80107b8:	f7ff ffa6 	bl	8010708 <sbrk_aligned>
 80107bc:	3001      	adds	r0, #1
 80107be:	d03a      	beq.n	8010836 <_malloc_r+0xea>
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	442b      	add	r3, r5
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	f8d8 3000 	ldr.w	r3, [r8]
 80107ca:	685a      	ldr	r2, [r3, #4]
 80107cc:	bb62      	cbnz	r2, 8010828 <_malloc_r+0xdc>
 80107ce:	f8c8 7000 	str.w	r7, [r8]
 80107d2:	e00f      	b.n	80107f4 <_malloc_r+0xa8>
 80107d4:	6822      	ldr	r2, [r4, #0]
 80107d6:	1b52      	subs	r2, r2, r5
 80107d8:	d420      	bmi.n	801081c <_malloc_r+0xd0>
 80107da:	2a0b      	cmp	r2, #11
 80107dc:	d917      	bls.n	801080e <_malloc_r+0xc2>
 80107de:	1961      	adds	r1, r4, r5
 80107e0:	42a3      	cmp	r3, r4
 80107e2:	6025      	str	r5, [r4, #0]
 80107e4:	bf18      	it	ne
 80107e6:	6059      	strne	r1, [r3, #4]
 80107e8:	6863      	ldr	r3, [r4, #4]
 80107ea:	bf08      	it	eq
 80107ec:	f8c8 1000 	streq.w	r1, [r8]
 80107f0:	5162      	str	r2, [r4, r5]
 80107f2:	604b      	str	r3, [r1, #4]
 80107f4:	4630      	mov	r0, r6
 80107f6:	f000 f82f 	bl	8010858 <__malloc_unlock>
 80107fa:	f104 000b 	add.w	r0, r4, #11
 80107fe:	1d23      	adds	r3, r4, #4
 8010800:	f020 0007 	bic.w	r0, r0, #7
 8010804:	1ac2      	subs	r2, r0, r3
 8010806:	bf1c      	itt	ne
 8010808:	1a1b      	subne	r3, r3, r0
 801080a:	50a3      	strne	r3, [r4, r2]
 801080c:	e7af      	b.n	801076e <_malloc_r+0x22>
 801080e:	6862      	ldr	r2, [r4, #4]
 8010810:	42a3      	cmp	r3, r4
 8010812:	bf0c      	ite	eq
 8010814:	f8c8 2000 	streq.w	r2, [r8]
 8010818:	605a      	strne	r2, [r3, #4]
 801081a:	e7eb      	b.n	80107f4 <_malloc_r+0xa8>
 801081c:	4623      	mov	r3, r4
 801081e:	6864      	ldr	r4, [r4, #4]
 8010820:	e7ae      	b.n	8010780 <_malloc_r+0x34>
 8010822:	463c      	mov	r4, r7
 8010824:	687f      	ldr	r7, [r7, #4]
 8010826:	e7b6      	b.n	8010796 <_malloc_r+0x4a>
 8010828:	461a      	mov	r2, r3
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	42a3      	cmp	r3, r4
 801082e:	d1fb      	bne.n	8010828 <_malloc_r+0xdc>
 8010830:	2300      	movs	r3, #0
 8010832:	6053      	str	r3, [r2, #4]
 8010834:	e7de      	b.n	80107f4 <_malloc_r+0xa8>
 8010836:	230c      	movs	r3, #12
 8010838:	6033      	str	r3, [r6, #0]
 801083a:	4630      	mov	r0, r6
 801083c:	f000 f80c 	bl	8010858 <__malloc_unlock>
 8010840:	e794      	b.n	801076c <_malloc_r+0x20>
 8010842:	6005      	str	r5, [r0, #0]
 8010844:	e7d6      	b.n	80107f4 <_malloc_r+0xa8>
 8010846:	bf00      	nop
 8010848:	24000c38 	.word	0x24000c38

0801084c <__malloc_lock>:
 801084c:	4801      	ldr	r0, [pc, #4]	@ (8010854 <__malloc_lock+0x8>)
 801084e:	f000 bb02 	b.w	8010e56 <__retarget_lock_acquire_recursive>
 8010852:	bf00      	nop
 8010854:	24000d7c 	.word	0x24000d7c

08010858 <__malloc_unlock>:
 8010858:	4801      	ldr	r0, [pc, #4]	@ (8010860 <__malloc_unlock+0x8>)
 801085a:	f000 bafd 	b.w	8010e58 <__retarget_lock_release_recursive>
 801085e:	bf00      	nop
 8010860:	24000d7c 	.word	0x24000d7c

08010864 <std>:
 8010864:	2300      	movs	r3, #0
 8010866:	b510      	push	{r4, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	e9c0 3300 	strd	r3, r3, [r0]
 801086e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010872:	6083      	str	r3, [r0, #8]
 8010874:	8181      	strh	r1, [r0, #12]
 8010876:	6643      	str	r3, [r0, #100]	@ 0x64
 8010878:	81c2      	strh	r2, [r0, #14]
 801087a:	6183      	str	r3, [r0, #24]
 801087c:	4619      	mov	r1, r3
 801087e:	2208      	movs	r2, #8
 8010880:	305c      	adds	r0, #92	@ 0x5c
 8010882:	f000 fa1b 	bl	8010cbc <memset>
 8010886:	4b0d      	ldr	r3, [pc, #52]	@ (80108bc <std+0x58>)
 8010888:	6263      	str	r3, [r4, #36]	@ 0x24
 801088a:	4b0d      	ldr	r3, [pc, #52]	@ (80108c0 <std+0x5c>)
 801088c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801088e:	4b0d      	ldr	r3, [pc, #52]	@ (80108c4 <std+0x60>)
 8010890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010892:	4b0d      	ldr	r3, [pc, #52]	@ (80108c8 <std+0x64>)
 8010894:	6323      	str	r3, [r4, #48]	@ 0x30
 8010896:	4b0d      	ldr	r3, [pc, #52]	@ (80108cc <std+0x68>)
 8010898:	6224      	str	r4, [r4, #32]
 801089a:	429c      	cmp	r4, r3
 801089c:	d006      	beq.n	80108ac <std+0x48>
 801089e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80108a2:	4294      	cmp	r4, r2
 80108a4:	d002      	beq.n	80108ac <std+0x48>
 80108a6:	33d0      	adds	r3, #208	@ 0xd0
 80108a8:	429c      	cmp	r4, r3
 80108aa:	d105      	bne.n	80108b8 <std+0x54>
 80108ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80108b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108b4:	f000 bace 	b.w	8010e54 <__retarget_lock_init_recursive>
 80108b8:	bd10      	pop	{r4, pc}
 80108ba:	bf00      	nop
 80108bc:	08010ad9 	.word	0x08010ad9
 80108c0:	08010afb 	.word	0x08010afb
 80108c4:	08010b33 	.word	0x08010b33
 80108c8:	08010b57 	.word	0x08010b57
 80108cc:	24000c3c 	.word	0x24000c3c

080108d0 <stdio_exit_handler>:
 80108d0:	4a02      	ldr	r2, [pc, #8]	@ (80108dc <stdio_exit_handler+0xc>)
 80108d2:	4903      	ldr	r1, [pc, #12]	@ (80108e0 <stdio_exit_handler+0x10>)
 80108d4:	4803      	ldr	r0, [pc, #12]	@ (80108e4 <stdio_exit_handler+0x14>)
 80108d6:	f000 b869 	b.w	80109ac <_fwalk_sglue>
 80108da:	bf00      	nop
 80108dc:	24000060 	.word	0x24000060
 80108e0:	080115b5 	.word	0x080115b5
 80108e4:	24000070 	.word	0x24000070

080108e8 <cleanup_stdio>:
 80108e8:	6841      	ldr	r1, [r0, #4]
 80108ea:	4b0c      	ldr	r3, [pc, #48]	@ (801091c <cleanup_stdio+0x34>)
 80108ec:	4299      	cmp	r1, r3
 80108ee:	b510      	push	{r4, lr}
 80108f0:	4604      	mov	r4, r0
 80108f2:	d001      	beq.n	80108f8 <cleanup_stdio+0x10>
 80108f4:	f000 fe5e 	bl	80115b4 <_fflush_r>
 80108f8:	68a1      	ldr	r1, [r4, #8]
 80108fa:	4b09      	ldr	r3, [pc, #36]	@ (8010920 <cleanup_stdio+0x38>)
 80108fc:	4299      	cmp	r1, r3
 80108fe:	d002      	beq.n	8010906 <cleanup_stdio+0x1e>
 8010900:	4620      	mov	r0, r4
 8010902:	f000 fe57 	bl	80115b4 <_fflush_r>
 8010906:	68e1      	ldr	r1, [r4, #12]
 8010908:	4b06      	ldr	r3, [pc, #24]	@ (8010924 <cleanup_stdio+0x3c>)
 801090a:	4299      	cmp	r1, r3
 801090c:	d004      	beq.n	8010918 <cleanup_stdio+0x30>
 801090e:	4620      	mov	r0, r4
 8010910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010914:	f000 be4e 	b.w	80115b4 <_fflush_r>
 8010918:	bd10      	pop	{r4, pc}
 801091a:	bf00      	nop
 801091c:	24000c3c 	.word	0x24000c3c
 8010920:	24000ca4 	.word	0x24000ca4
 8010924:	24000d0c 	.word	0x24000d0c

08010928 <global_stdio_init.part.0>:
 8010928:	b510      	push	{r4, lr}
 801092a:	4b0b      	ldr	r3, [pc, #44]	@ (8010958 <global_stdio_init.part.0+0x30>)
 801092c:	4c0b      	ldr	r4, [pc, #44]	@ (801095c <global_stdio_init.part.0+0x34>)
 801092e:	4a0c      	ldr	r2, [pc, #48]	@ (8010960 <global_stdio_init.part.0+0x38>)
 8010930:	601a      	str	r2, [r3, #0]
 8010932:	4620      	mov	r0, r4
 8010934:	2200      	movs	r2, #0
 8010936:	2104      	movs	r1, #4
 8010938:	f7ff ff94 	bl	8010864 <std>
 801093c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010940:	2201      	movs	r2, #1
 8010942:	2109      	movs	r1, #9
 8010944:	f7ff ff8e 	bl	8010864 <std>
 8010948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801094c:	2202      	movs	r2, #2
 801094e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010952:	2112      	movs	r1, #18
 8010954:	f7ff bf86 	b.w	8010864 <std>
 8010958:	24000d74 	.word	0x24000d74
 801095c:	24000c3c 	.word	0x24000c3c
 8010960:	080108d1 	.word	0x080108d1

08010964 <__sfp_lock_acquire>:
 8010964:	4801      	ldr	r0, [pc, #4]	@ (801096c <__sfp_lock_acquire+0x8>)
 8010966:	f000 ba76 	b.w	8010e56 <__retarget_lock_acquire_recursive>
 801096a:	bf00      	nop
 801096c:	24000d7d 	.word	0x24000d7d

08010970 <__sfp_lock_release>:
 8010970:	4801      	ldr	r0, [pc, #4]	@ (8010978 <__sfp_lock_release+0x8>)
 8010972:	f000 ba71 	b.w	8010e58 <__retarget_lock_release_recursive>
 8010976:	bf00      	nop
 8010978:	24000d7d 	.word	0x24000d7d

0801097c <__sinit>:
 801097c:	b510      	push	{r4, lr}
 801097e:	4604      	mov	r4, r0
 8010980:	f7ff fff0 	bl	8010964 <__sfp_lock_acquire>
 8010984:	6a23      	ldr	r3, [r4, #32]
 8010986:	b11b      	cbz	r3, 8010990 <__sinit+0x14>
 8010988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801098c:	f7ff bff0 	b.w	8010970 <__sfp_lock_release>
 8010990:	4b04      	ldr	r3, [pc, #16]	@ (80109a4 <__sinit+0x28>)
 8010992:	6223      	str	r3, [r4, #32]
 8010994:	4b04      	ldr	r3, [pc, #16]	@ (80109a8 <__sinit+0x2c>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1f5      	bne.n	8010988 <__sinit+0xc>
 801099c:	f7ff ffc4 	bl	8010928 <global_stdio_init.part.0>
 80109a0:	e7f2      	b.n	8010988 <__sinit+0xc>
 80109a2:	bf00      	nop
 80109a4:	080108e9 	.word	0x080108e9
 80109a8:	24000d74 	.word	0x24000d74

080109ac <_fwalk_sglue>:
 80109ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b0:	4607      	mov	r7, r0
 80109b2:	4688      	mov	r8, r1
 80109b4:	4614      	mov	r4, r2
 80109b6:	2600      	movs	r6, #0
 80109b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109bc:	f1b9 0901 	subs.w	r9, r9, #1
 80109c0:	d505      	bpl.n	80109ce <_fwalk_sglue+0x22>
 80109c2:	6824      	ldr	r4, [r4, #0]
 80109c4:	2c00      	cmp	r4, #0
 80109c6:	d1f7      	bne.n	80109b8 <_fwalk_sglue+0xc>
 80109c8:	4630      	mov	r0, r6
 80109ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ce:	89ab      	ldrh	r3, [r5, #12]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d907      	bls.n	80109e4 <_fwalk_sglue+0x38>
 80109d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109d8:	3301      	adds	r3, #1
 80109da:	d003      	beq.n	80109e4 <_fwalk_sglue+0x38>
 80109dc:	4629      	mov	r1, r5
 80109de:	4638      	mov	r0, r7
 80109e0:	47c0      	blx	r8
 80109e2:	4306      	orrs	r6, r0
 80109e4:	3568      	adds	r5, #104	@ 0x68
 80109e6:	e7e9      	b.n	80109bc <_fwalk_sglue+0x10>

080109e8 <iprintf>:
 80109e8:	b40f      	push	{r0, r1, r2, r3}
 80109ea:	b507      	push	{r0, r1, r2, lr}
 80109ec:	4906      	ldr	r1, [pc, #24]	@ (8010a08 <iprintf+0x20>)
 80109ee:	ab04      	add	r3, sp, #16
 80109f0:	6808      	ldr	r0, [r1, #0]
 80109f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f6:	6881      	ldr	r1, [r0, #8]
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	f000 fab1 	bl	8010f60 <_vfiprintf_r>
 80109fe:	b003      	add	sp, #12
 8010a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a04:	b004      	add	sp, #16
 8010a06:	4770      	bx	lr
 8010a08:	2400006c 	.word	0x2400006c

08010a0c <putchar>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	@ (8010a18 <putchar+0xc>)
 8010a0e:	4601      	mov	r1, r0
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	6882      	ldr	r2, [r0, #8]
 8010a14:	f000 be58 	b.w	80116c8 <_putc_r>
 8010a18:	2400006c 	.word	0x2400006c

08010a1c <_puts_r>:
 8010a1c:	6a03      	ldr	r3, [r0, #32]
 8010a1e:	b570      	push	{r4, r5, r6, lr}
 8010a20:	6884      	ldr	r4, [r0, #8]
 8010a22:	4605      	mov	r5, r0
 8010a24:	460e      	mov	r6, r1
 8010a26:	b90b      	cbnz	r3, 8010a2c <_puts_r+0x10>
 8010a28:	f7ff ffa8 	bl	801097c <__sinit>
 8010a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a2e:	07db      	lsls	r3, r3, #31
 8010a30:	d405      	bmi.n	8010a3e <_puts_r+0x22>
 8010a32:	89a3      	ldrh	r3, [r4, #12]
 8010a34:	0598      	lsls	r0, r3, #22
 8010a36:	d402      	bmi.n	8010a3e <_puts_r+0x22>
 8010a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a3a:	f000 fa0c 	bl	8010e56 <__retarget_lock_acquire_recursive>
 8010a3e:	89a3      	ldrh	r3, [r4, #12]
 8010a40:	0719      	lsls	r1, r3, #28
 8010a42:	d502      	bpl.n	8010a4a <_puts_r+0x2e>
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d135      	bne.n	8010ab6 <_puts_r+0x9a>
 8010a4a:	4621      	mov	r1, r4
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f000 f8c5 	bl	8010bdc <__swsetup_r>
 8010a52:	b380      	cbz	r0, 8010ab6 <_puts_r+0x9a>
 8010a54:	f04f 35ff 	mov.w	r5, #4294967295
 8010a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a5a:	07da      	lsls	r2, r3, #31
 8010a5c:	d405      	bmi.n	8010a6a <_puts_r+0x4e>
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	059b      	lsls	r3, r3, #22
 8010a62:	d402      	bmi.n	8010a6a <_puts_r+0x4e>
 8010a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a66:	f000 f9f7 	bl	8010e58 <__retarget_lock_release_recursive>
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	bd70      	pop	{r4, r5, r6, pc}
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	da04      	bge.n	8010a7c <_puts_r+0x60>
 8010a72:	69a2      	ldr	r2, [r4, #24]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	dc17      	bgt.n	8010aa8 <_puts_r+0x8c>
 8010a78:	290a      	cmp	r1, #10
 8010a7a:	d015      	beq.n	8010aa8 <_puts_r+0x8c>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	6022      	str	r2, [r4, #0]
 8010a82:	7019      	strb	r1, [r3, #0]
 8010a84:	68a3      	ldr	r3, [r4, #8]
 8010a86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	60a3      	str	r3, [r4, #8]
 8010a8e:	2900      	cmp	r1, #0
 8010a90:	d1ed      	bne.n	8010a6e <_puts_r+0x52>
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	da11      	bge.n	8010aba <_puts_r+0x9e>
 8010a96:	4622      	mov	r2, r4
 8010a98:	210a      	movs	r1, #10
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f000 f85f 	bl	8010b5e <__swbuf_r>
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	d0d7      	beq.n	8010a54 <_puts_r+0x38>
 8010aa4:	250a      	movs	r5, #10
 8010aa6:	e7d7      	b.n	8010a58 <_puts_r+0x3c>
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f000 f857 	bl	8010b5e <__swbuf_r>
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d1e7      	bne.n	8010a84 <_puts_r+0x68>
 8010ab4:	e7ce      	b.n	8010a54 <_puts_r+0x38>
 8010ab6:	3e01      	subs	r6, #1
 8010ab8:	e7e4      	b.n	8010a84 <_puts_r+0x68>
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	1c5a      	adds	r2, r3, #1
 8010abe:	6022      	str	r2, [r4, #0]
 8010ac0:	220a      	movs	r2, #10
 8010ac2:	701a      	strb	r2, [r3, #0]
 8010ac4:	e7ee      	b.n	8010aa4 <_puts_r+0x88>
	...

08010ac8 <puts>:
 8010ac8:	4b02      	ldr	r3, [pc, #8]	@ (8010ad4 <puts+0xc>)
 8010aca:	4601      	mov	r1, r0
 8010acc:	6818      	ldr	r0, [r3, #0]
 8010ace:	f7ff bfa5 	b.w	8010a1c <_puts_r>
 8010ad2:	bf00      	nop
 8010ad4:	2400006c 	.word	0x2400006c

08010ad8 <__sread>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	460c      	mov	r4, r1
 8010adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ae0:	f000 f946 	bl	8010d70 <_read_r>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	bfab      	itete	ge
 8010ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010aea:	89a3      	ldrhlt	r3, [r4, #12]
 8010aec:	181b      	addge	r3, r3, r0
 8010aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010af2:	bfac      	ite	ge
 8010af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010af6:	81a3      	strhlt	r3, [r4, #12]
 8010af8:	bd10      	pop	{r4, pc}

08010afa <__swrite>:
 8010afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010afe:	461f      	mov	r7, r3
 8010b00:	898b      	ldrh	r3, [r1, #12]
 8010b02:	05db      	lsls	r3, r3, #23
 8010b04:	4605      	mov	r5, r0
 8010b06:	460c      	mov	r4, r1
 8010b08:	4616      	mov	r6, r2
 8010b0a:	d505      	bpl.n	8010b18 <__swrite+0x1e>
 8010b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b10:	2302      	movs	r3, #2
 8010b12:	2200      	movs	r2, #0
 8010b14:	f000 f91a 	bl	8010d4c <_lseek_r>
 8010b18:	89a3      	ldrh	r3, [r4, #12]
 8010b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b22:	81a3      	strh	r3, [r4, #12]
 8010b24:	4632      	mov	r2, r6
 8010b26:	463b      	mov	r3, r7
 8010b28:	4628      	mov	r0, r5
 8010b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2e:	f000 b955 	b.w	8010ddc <_write_r>

08010b32 <__sseek>:
 8010b32:	b510      	push	{r4, lr}
 8010b34:	460c      	mov	r4, r1
 8010b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b3a:	f000 f907 	bl	8010d4c <_lseek_r>
 8010b3e:	1c43      	adds	r3, r0, #1
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	bf15      	itete	ne
 8010b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010b4e:	81a3      	strheq	r3, [r4, #12]
 8010b50:	bf18      	it	ne
 8010b52:	81a3      	strhne	r3, [r4, #12]
 8010b54:	bd10      	pop	{r4, pc}

08010b56 <__sclose>:
 8010b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5a:	f000 b8e7 	b.w	8010d2c <_close_r>

08010b5e <__swbuf_r>:
 8010b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b60:	460e      	mov	r6, r1
 8010b62:	4614      	mov	r4, r2
 8010b64:	4605      	mov	r5, r0
 8010b66:	b118      	cbz	r0, 8010b70 <__swbuf_r+0x12>
 8010b68:	6a03      	ldr	r3, [r0, #32]
 8010b6a:	b90b      	cbnz	r3, 8010b70 <__swbuf_r+0x12>
 8010b6c:	f7ff ff06 	bl	801097c <__sinit>
 8010b70:	69a3      	ldr	r3, [r4, #24]
 8010b72:	60a3      	str	r3, [r4, #8]
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	071a      	lsls	r2, r3, #28
 8010b78:	d501      	bpl.n	8010b7e <__swbuf_r+0x20>
 8010b7a:	6923      	ldr	r3, [r4, #16]
 8010b7c:	b943      	cbnz	r3, 8010b90 <__swbuf_r+0x32>
 8010b7e:	4621      	mov	r1, r4
 8010b80:	4628      	mov	r0, r5
 8010b82:	f000 f82b 	bl	8010bdc <__swsetup_r>
 8010b86:	b118      	cbz	r0, 8010b90 <__swbuf_r+0x32>
 8010b88:	f04f 37ff 	mov.w	r7, #4294967295
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	6922      	ldr	r2, [r4, #16]
 8010b94:	1a98      	subs	r0, r3, r2
 8010b96:	6963      	ldr	r3, [r4, #20]
 8010b98:	b2f6      	uxtb	r6, r6
 8010b9a:	4283      	cmp	r3, r0
 8010b9c:	4637      	mov	r7, r6
 8010b9e:	dc05      	bgt.n	8010bac <__swbuf_r+0x4e>
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f000 fd06 	bl	80115b4 <_fflush_r>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d1ed      	bne.n	8010b88 <__swbuf_r+0x2a>
 8010bac:	68a3      	ldr	r3, [r4, #8]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	60a3      	str	r3, [r4, #8]
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	6022      	str	r2, [r4, #0]
 8010bb8:	701e      	strb	r6, [r3, #0]
 8010bba:	6962      	ldr	r2, [r4, #20]
 8010bbc:	1c43      	adds	r3, r0, #1
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d004      	beq.n	8010bcc <__swbuf_r+0x6e>
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	07db      	lsls	r3, r3, #31
 8010bc6:	d5e1      	bpl.n	8010b8c <__swbuf_r+0x2e>
 8010bc8:	2e0a      	cmp	r6, #10
 8010bca:	d1df      	bne.n	8010b8c <__swbuf_r+0x2e>
 8010bcc:	4621      	mov	r1, r4
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f000 fcf0 	bl	80115b4 <_fflush_r>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d0d9      	beq.n	8010b8c <__swbuf_r+0x2e>
 8010bd8:	e7d6      	b.n	8010b88 <__swbuf_r+0x2a>
	...

08010bdc <__swsetup_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4b29      	ldr	r3, [pc, #164]	@ (8010c84 <__swsetup_r+0xa8>)
 8010be0:	4605      	mov	r5, r0
 8010be2:	6818      	ldr	r0, [r3, #0]
 8010be4:	460c      	mov	r4, r1
 8010be6:	b118      	cbz	r0, 8010bf0 <__swsetup_r+0x14>
 8010be8:	6a03      	ldr	r3, [r0, #32]
 8010bea:	b90b      	cbnz	r3, 8010bf0 <__swsetup_r+0x14>
 8010bec:	f7ff fec6 	bl	801097c <__sinit>
 8010bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf4:	0719      	lsls	r1, r3, #28
 8010bf6:	d422      	bmi.n	8010c3e <__swsetup_r+0x62>
 8010bf8:	06da      	lsls	r2, r3, #27
 8010bfa:	d407      	bmi.n	8010c0c <__swsetup_r+0x30>
 8010bfc:	2209      	movs	r2, #9
 8010bfe:	602a      	str	r2, [r5, #0]
 8010c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c04:	81a3      	strh	r3, [r4, #12]
 8010c06:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0a:	e033      	b.n	8010c74 <__swsetup_r+0x98>
 8010c0c:	0758      	lsls	r0, r3, #29
 8010c0e:	d512      	bpl.n	8010c36 <__swsetup_r+0x5a>
 8010c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c12:	b141      	cbz	r1, 8010c26 <__swsetup_r+0x4a>
 8010c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c18:	4299      	cmp	r1, r3
 8010c1a:	d002      	beq.n	8010c22 <__swsetup_r+0x46>
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	f000 f92b 	bl	8010e78 <_free_r>
 8010c22:	2300      	movs	r3, #0
 8010c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c26:	89a3      	ldrh	r3, [r4, #12]
 8010c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c2c:	81a3      	strh	r3, [r4, #12]
 8010c2e:	2300      	movs	r3, #0
 8010c30:	6063      	str	r3, [r4, #4]
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	6023      	str	r3, [r4, #0]
 8010c36:	89a3      	ldrh	r3, [r4, #12]
 8010c38:	f043 0308 	orr.w	r3, r3, #8
 8010c3c:	81a3      	strh	r3, [r4, #12]
 8010c3e:	6923      	ldr	r3, [r4, #16]
 8010c40:	b94b      	cbnz	r3, 8010c56 <__swsetup_r+0x7a>
 8010c42:	89a3      	ldrh	r3, [r4, #12]
 8010c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c4c:	d003      	beq.n	8010c56 <__swsetup_r+0x7a>
 8010c4e:	4621      	mov	r1, r4
 8010c50:	4628      	mov	r0, r5
 8010c52:	f000 fcfd 	bl	8011650 <__smakebuf_r>
 8010c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5a:	f013 0201 	ands.w	r2, r3, #1
 8010c5e:	d00a      	beq.n	8010c76 <__swsetup_r+0x9a>
 8010c60:	2200      	movs	r2, #0
 8010c62:	60a2      	str	r2, [r4, #8]
 8010c64:	6962      	ldr	r2, [r4, #20]
 8010c66:	4252      	negs	r2, r2
 8010c68:	61a2      	str	r2, [r4, #24]
 8010c6a:	6922      	ldr	r2, [r4, #16]
 8010c6c:	b942      	cbnz	r2, 8010c80 <__swsetup_r+0xa4>
 8010c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c72:	d1c5      	bne.n	8010c00 <__swsetup_r+0x24>
 8010c74:	bd38      	pop	{r3, r4, r5, pc}
 8010c76:	0799      	lsls	r1, r3, #30
 8010c78:	bf58      	it	pl
 8010c7a:	6962      	ldrpl	r2, [r4, #20]
 8010c7c:	60a2      	str	r2, [r4, #8]
 8010c7e:	e7f4      	b.n	8010c6a <__swsetup_r+0x8e>
 8010c80:	2000      	movs	r0, #0
 8010c82:	e7f7      	b.n	8010c74 <__swsetup_r+0x98>
 8010c84:	2400006c 	.word	0x2400006c

08010c88 <memmove>:
 8010c88:	4288      	cmp	r0, r1
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	eb01 0402 	add.w	r4, r1, r2
 8010c90:	d902      	bls.n	8010c98 <memmove+0x10>
 8010c92:	4284      	cmp	r4, r0
 8010c94:	4623      	mov	r3, r4
 8010c96:	d807      	bhi.n	8010ca8 <memmove+0x20>
 8010c98:	1e43      	subs	r3, r0, #1
 8010c9a:	42a1      	cmp	r1, r4
 8010c9c:	d008      	beq.n	8010cb0 <memmove+0x28>
 8010c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ca6:	e7f8      	b.n	8010c9a <memmove+0x12>
 8010ca8:	4402      	add	r2, r0
 8010caa:	4601      	mov	r1, r0
 8010cac:	428a      	cmp	r2, r1
 8010cae:	d100      	bne.n	8010cb2 <memmove+0x2a>
 8010cb0:	bd10      	pop	{r4, pc}
 8010cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cba:	e7f7      	b.n	8010cac <memmove+0x24>

08010cbc <memset>:
 8010cbc:	4402      	add	r2, r0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d100      	bne.n	8010cc6 <memset+0xa>
 8010cc4:	4770      	bx	lr
 8010cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8010cca:	e7f9      	b.n	8010cc0 <memset+0x4>

08010ccc <_raise_r>:
 8010ccc:	291f      	cmp	r1, #31
 8010cce:	b538      	push	{r3, r4, r5, lr}
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	d904      	bls.n	8010ce0 <_raise_r+0x14>
 8010cd6:	2316      	movs	r3, #22
 8010cd8:	6003      	str	r3, [r0, #0]
 8010cda:	f04f 30ff 	mov.w	r0, #4294967295
 8010cde:	bd38      	pop	{r3, r4, r5, pc}
 8010ce0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ce2:	b112      	cbz	r2, 8010cea <_raise_r+0x1e>
 8010ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ce8:	b94b      	cbnz	r3, 8010cfe <_raise_r+0x32>
 8010cea:	4628      	mov	r0, r5
 8010cec:	f000 f864 	bl	8010db8 <_getpid_r>
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	4601      	mov	r1, r0
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cfa:	f000 b84b 	b.w	8010d94 <_kill_r>
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d00a      	beq.n	8010d18 <_raise_r+0x4c>
 8010d02:	1c59      	adds	r1, r3, #1
 8010d04:	d103      	bne.n	8010d0e <_raise_r+0x42>
 8010d06:	2316      	movs	r3, #22
 8010d08:	6003      	str	r3, [r0, #0]
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	e7e7      	b.n	8010cde <_raise_r+0x12>
 8010d0e:	2100      	movs	r1, #0
 8010d10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d14:	4620      	mov	r0, r4
 8010d16:	4798      	blx	r3
 8010d18:	2000      	movs	r0, #0
 8010d1a:	e7e0      	b.n	8010cde <_raise_r+0x12>

08010d1c <raise>:
 8010d1c:	4b02      	ldr	r3, [pc, #8]	@ (8010d28 <raise+0xc>)
 8010d1e:	4601      	mov	r1, r0
 8010d20:	6818      	ldr	r0, [r3, #0]
 8010d22:	f7ff bfd3 	b.w	8010ccc <_raise_r>
 8010d26:	bf00      	nop
 8010d28:	2400006c 	.word	0x2400006c

08010d2c <_close_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d06      	ldr	r5, [pc, #24]	@ (8010d48 <_close_r+0x1c>)
 8010d30:	2300      	movs	r3, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	4608      	mov	r0, r1
 8010d36:	602b      	str	r3, [r5, #0]
 8010d38:	f7f2 fd62 	bl	8003800 <_close>
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	d102      	bne.n	8010d46 <_close_r+0x1a>
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	b103      	cbz	r3, 8010d46 <_close_r+0x1a>
 8010d44:	6023      	str	r3, [r4, #0]
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	24000d78 	.word	0x24000d78

08010d4c <_lseek_r>:
 8010d4c:	b538      	push	{r3, r4, r5, lr}
 8010d4e:	4d07      	ldr	r5, [pc, #28]	@ (8010d6c <_lseek_r+0x20>)
 8010d50:	4604      	mov	r4, r0
 8010d52:	4608      	mov	r0, r1
 8010d54:	4611      	mov	r1, r2
 8010d56:	2200      	movs	r2, #0
 8010d58:	602a      	str	r2, [r5, #0]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	f7f2 fd77 	bl	800384e <_lseek>
 8010d60:	1c43      	adds	r3, r0, #1
 8010d62:	d102      	bne.n	8010d6a <_lseek_r+0x1e>
 8010d64:	682b      	ldr	r3, [r5, #0]
 8010d66:	b103      	cbz	r3, 8010d6a <_lseek_r+0x1e>
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	24000d78 	.word	0x24000d78

08010d70 <_read_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d07      	ldr	r5, [pc, #28]	@ (8010d90 <_read_r+0x20>)
 8010d74:	4604      	mov	r4, r0
 8010d76:	4608      	mov	r0, r1
 8010d78:	4611      	mov	r1, r2
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	602a      	str	r2, [r5, #0]
 8010d7e:	461a      	mov	r2, r3
 8010d80:	f7f2 fd05 	bl	800378e <_read>
 8010d84:	1c43      	adds	r3, r0, #1
 8010d86:	d102      	bne.n	8010d8e <_read_r+0x1e>
 8010d88:	682b      	ldr	r3, [r5, #0]
 8010d8a:	b103      	cbz	r3, 8010d8e <_read_r+0x1e>
 8010d8c:	6023      	str	r3, [r4, #0]
 8010d8e:	bd38      	pop	{r3, r4, r5, pc}
 8010d90:	24000d78 	.word	0x24000d78

08010d94 <_kill_r>:
 8010d94:	b538      	push	{r3, r4, r5, lr}
 8010d96:	4d07      	ldr	r5, [pc, #28]	@ (8010db4 <_kill_r+0x20>)
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	4608      	mov	r0, r1
 8010d9e:	4611      	mov	r1, r2
 8010da0:	602b      	str	r3, [r5, #0]
 8010da2:	f7f2 fcd9 	bl	8003758 <_kill>
 8010da6:	1c43      	adds	r3, r0, #1
 8010da8:	d102      	bne.n	8010db0 <_kill_r+0x1c>
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	b103      	cbz	r3, 8010db0 <_kill_r+0x1c>
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	bd38      	pop	{r3, r4, r5, pc}
 8010db2:	bf00      	nop
 8010db4:	24000d78 	.word	0x24000d78

08010db8 <_getpid_r>:
 8010db8:	f7f2 bcc6 	b.w	8003748 <_getpid>

08010dbc <_sbrk_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d06      	ldr	r5, [pc, #24]	@ (8010dd8 <_sbrk_r+0x1c>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f7f2 fd4e 	bl	8003868 <_sbrk>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_sbrk_r+0x1a>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_sbrk_r+0x1a>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	24000d78 	.word	0x24000d78

08010ddc <_write_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d07      	ldr	r5, [pc, #28]	@ (8010dfc <_write_r+0x20>)
 8010de0:	4604      	mov	r4, r0
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	2200      	movs	r2, #0
 8010de8:	602a      	str	r2, [r5, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	f7f2 fcec 	bl	80037c8 <_write>
 8010df0:	1c43      	adds	r3, r0, #1
 8010df2:	d102      	bne.n	8010dfa <_write_r+0x1e>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	b103      	cbz	r3, 8010dfa <_write_r+0x1e>
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	24000d78 	.word	0x24000d78

08010e00 <__errno>:
 8010e00:	4b01      	ldr	r3, [pc, #4]	@ (8010e08 <__errno+0x8>)
 8010e02:	6818      	ldr	r0, [r3, #0]
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	2400006c 	.word	0x2400006c

08010e0c <__libc_init_array>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8010e44 <__libc_init_array+0x38>)
 8010e10:	4c0d      	ldr	r4, [pc, #52]	@ (8010e48 <__libc_init_array+0x3c>)
 8010e12:	1b64      	subs	r4, r4, r5
 8010e14:	10a4      	asrs	r4, r4, #2
 8010e16:	2600      	movs	r6, #0
 8010e18:	42a6      	cmp	r6, r4
 8010e1a:	d109      	bne.n	8010e30 <__libc_init_array+0x24>
 8010e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8010e4c <__libc_init_array+0x40>)
 8010e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8010e50 <__libc_init_array+0x44>)
 8010e20:	f000 fca8 	bl	8011774 <_init>
 8010e24:	1b64      	subs	r4, r4, r5
 8010e26:	10a4      	asrs	r4, r4, #2
 8010e28:	2600      	movs	r6, #0
 8010e2a:	42a6      	cmp	r6, r4
 8010e2c:	d105      	bne.n	8010e3a <__libc_init_array+0x2e>
 8010e2e:	bd70      	pop	{r4, r5, r6, pc}
 8010e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e34:	4798      	blx	r3
 8010e36:	3601      	adds	r6, #1
 8010e38:	e7ee      	b.n	8010e18 <__libc_init_array+0xc>
 8010e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e3e:	4798      	blx	r3
 8010e40:	3601      	adds	r6, #1
 8010e42:	e7f2      	b.n	8010e2a <__libc_init_array+0x1e>
 8010e44:	08011c6c 	.word	0x08011c6c
 8010e48:	08011c6c 	.word	0x08011c6c
 8010e4c:	08011c6c 	.word	0x08011c6c
 8010e50:	08011c74 	.word	0x08011c74

08010e54 <__retarget_lock_init_recursive>:
 8010e54:	4770      	bx	lr

08010e56 <__retarget_lock_acquire_recursive>:
 8010e56:	4770      	bx	lr

08010e58 <__retarget_lock_release_recursive>:
 8010e58:	4770      	bx	lr

08010e5a <memcpy>:
 8010e5a:	440a      	add	r2, r1
 8010e5c:	4291      	cmp	r1, r2
 8010e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e62:	d100      	bne.n	8010e66 <memcpy+0xc>
 8010e64:	4770      	bx	lr
 8010e66:	b510      	push	{r4, lr}
 8010e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e70:	4291      	cmp	r1, r2
 8010e72:	d1f9      	bne.n	8010e68 <memcpy+0xe>
 8010e74:	bd10      	pop	{r4, pc}
	...

08010e78 <_free_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	2900      	cmp	r1, #0
 8010e7e:	d041      	beq.n	8010f04 <_free_r+0x8c>
 8010e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e84:	1f0c      	subs	r4, r1, #4
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	bfb8      	it	lt
 8010e8a:	18e4      	addlt	r4, r4, r3
 8010e8c:	f7ff fcde 	bl	801084c <__malloc_lock>
 8010e90:	4a1d      	ldr	r2, [pc, #116]	@ (8010f08 <_free_r+0x90>)
 8010e92:	6813      	ldr	r3, [r2, #0]
 8010e94:	b933      	cbnz	r3, 8010ea4 <_free_r+0x2c>
 8010e96:	6063      	str	r3, [r4, #4]
 8010e98:	6014      	str	r4, [r2, #0]
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ea0:	f7ff bcda 	b.w	8010858 <__malloc_unlock>
 8010ea4:	42a3      	cmp	r3, r4
 8010ea6:	d908      	bls.n	8010eba <_free_r+0x42>
 8010ea8:	6820      	ldr	r0, [r4, #0]
 8010eaa:	1821      	adds	r1, r4, r0
 8010eac:	428b      	cmp	r3, r1
 8010eae:	bf01      	itttt	eq
 8010eb0:	6819      	ldreq	r1, [r3, #0]
 8010eb2:	685b      	ldreq	r3, [r3, #4]
 8010eb4:	1809      	addeq	r1, r1, r0
 8010eb6:	6021      	streq	r1, [r4, #0]
 8010eb8:	e7ed      	b.n	8010e96 <_free_r+0x1e>
 8010eba:	461a      	mov	r2, r3
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	b10b      	cbz	r3, 8010ec4 <_free_r+0x4c>
 8010ec0:	42a3      	cmp	r3, r4
 8010ec2:	d9fa      	bls.n	8010eba <_free_r+0x42>
 8010ec4:	6811      	ldr	r1, [r2, #0]
 8010ec6:	1850      	adds	r0, r2, r1
 8010ec8:	42a0      	cmp	r0, r4
 8010eca:	d10b      	bne.n	8010ee4 <_free_r+0x6c>
 8010ecc:	6820      	ldr	r0, [r4, #0]
 8010ece:	4401      	add	r1, r0
 8010ed0:	1850      	adds	r0, r2, r1
 8010ed2:	4283      	cmp	r3, r0
 8010ed4:	6011      	str	r1, [r2, #0]
 8010ed6:	d1e0      	bne.n	8010e9a <_free_r+0x22>
 8010ed8:	6818      	ldr	r0, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	6053      	str	r3, [r2, #4]
 8010ede:	4408      	add	r0, r1
 8010ee0:	6010      	str	r0, [r2, #0]
 8010ee2:	e7da      	b.n	8010e9a <_free_r+0x22>
 8010ee4:	d902      	bls.n	8010eec <_free_r+0x74>
 8010ee6:	230c      	movs	r3, #12
 8010ee8:	602b      	str	r3, [r5, #0]
 8010eea:	e7d6      	b.n	8010e9a <_free_r+0x22>
 8010eec:	6820      	ldr	r0, [r4, #0]
 8010eee:	1821      	adds	r1, r4, r0
 8010ef0:	428b      	cmp	r3, r1
 8010ef2:	bf04      	itt	eq
 8010ef4:	6819      	ldreq	r1, [r3, #0]
 8010ef6:	685b      	ldreq	r3, [r3, #4]
 8010ef8:	6063      	str	r3, [r4, #4]
 8010efa:	bf04      	itt	eq
 8010efc:	1809      	addeq	r1, r1, r0
 8010efe:	6021      	streq	r1, [r4, #0]
 8010f00:	6054      	str	r4, [r2, #4]
 8010f02:	e7ca      	b.n	8010e9a <_free_r+0x22>
 8010f04:	bd38      	pop	{r3, r4, r5, pc}
 8010f06:	bf00      	nop
 8010f08:	24000c38 	.word	0x24000c38

08010f0c <__sfputc_r>:
 8010f0c:	6893      	ldr	r3, [r2, #8]
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	b410      	push	{r4}
 8010f14:	6093      	str	r3, [r2, #8]
 8010f16:	da08      	bge.n	8010f2a <__sfputc_r+0x1e>
 8010f18:	6994      	ldr	r4, [r2, #24]
 8010f1a:	42a3      	cmp	r3, r4
 8010f1c:	db01      	blt.n	8010f22 <__sfputc_r+0x16>
 8010f1e:	290a      	cmp	r1, #10
 8010f20:	d103      	bne.n	8010f2a <__sfputc_r+0x1e>
 8010f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f26:	f7ff be1a 	b.w	8010b5e <__swbuf_r>
 8010f2a:	6813      	ldr	r3, [r2, #0]
 8010f2c:	1c58      	adds	r0, r3, #1
 8010f2e:	6010      	str	r0, [r2, #0]
 8010f30:	7019      	strb	r1, [r3, #0]
 8010f32:	4608      	mov	r0, r1
 8010f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <__sfputs_r>:
 8010f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	460f      	mov	r7, r1
 8010f40:	4614      	mov	r4, r2
 8010f42:	18d5      	adds	r5, r2, r3
 8010f44:	42ac      	cmp	r4, r5
 8010f46:	d101      	bne.n	8010f4c <__sfputs_r+0x12>
 8010f48:	2000      	movs	r0, #0
 8010f4a:	e007      	b.n	8010f5c <__sfputs_r+0x22>
 8010f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f50:	463a      	mov	r2, r7
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7ff ffda 	bl	8010f0c <__sfputc_r>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d1f3      	bne.n	8010f44 <__sfputs_r+0xa>
 8010f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f60 <_vfiprintf_r>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	460d      	mov	r5, r1
 8010f66:	b09d      	sub	sp, #116	@ 0x74
 8010f68:	4614      	mov	r4, r2
 8010f6a:	4698      	mov	r8, r3
 8010f6c:	4606      	mov	r6, r0
 8010f6e:	b118      	cbz	r0, 8010f78 <_vfiprintf_r+0x18>
 8010f70:	6a03      	ldr	r3, [r0, #32]
 8010f72:	b90b      	cbnz	r3, 8010f78 <_vfiprintf_r+0x18>
 8010f74:	f7ff fd02 	bl	801097c <__sinit>
 8010f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f7a:	07d9      	lsls	r1, r3, #31
 8010f7c:	d405      	bmi.n	8010f8a <_vfiprintf_r+0x2a>
 8010f7e:	89ab      	ldrh	r3, [r5, #12]
 8010f80:	059a      	lsls	r2, r3, #22
 8010f82:	d402      	bmi.n	8010f8a <_vfiprintf_r+0x2a>
 8010f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f86:	f7ff ff66 	bl	8010e56 <__retarget_lock_acquire_recursive>
 8010f8a:	89ab      	ldrh	r3, [r5, #12]
 8010f8c:	071b      	lsls	r3, r3, #28
 8010f8e:	d501      	bpl.n	8010f94 <_vfiprintf_r+0x34>
 8010f90:	692b      	ldr	r3, [r5, #16]
 8010f92:	b99b      	cbnz	r3, 8010fbc <_vfiprintf_r+0x5c>
 8010f94:	4629      	mov	r1, r5
 8010f96:	4630      	mov	r0, r6
 8010f98:	f7ff fe20 	bl	8010bdc <__swsetup_r>
 8010f9c:	b170      	cbz	r0, 8010fbc <_vfiprintf_r+0x5c>
 8010f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fa0:	07dc      	lsls	r4, r3, #31
 8010fa2:	d504      	bpl.n	8010fae <_vfiprintf_r+0x4e>
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	b01d      	add	sp, #116	@ 0x74
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	89ab      	ldrh	r3, [r5, #12]
 8010fb0:	0598      	lsls	r0, r3, #22
 8010fb2:	d4f7      	bmi.n	8010fa4 <_vfiprintf_r+0x44>
 8010fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fb6:	f7ff ff4f 	bl	8010e58 <__retarget_lock_release_recursive>
 8010fba:	e7f3      	b.n	8010fa4 <_vfiprintf_r+0x44>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fc0:	2320      	movs	r3, #32
 8010fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fca:	2330      	movs	r3, #48	@ 0x30
 8010fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801117c <_vfiprintf_r+0x21c>
 8010fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010fd4:	f04f 0901 	mov.w	r9, #1
 8010fd8:	4623      	mov	r3, r4
 8010fda:	469a      	mov	sl, r3
 8010fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fe0:	b10a      	cbz	r2, 8010fe6 <_vfiprintf_r+0x86>
 8010fe2:	2a25      	cmp	r2, #37	@ 0x25
 8010fe4:	d1f9      	bne.n	8010fda <_vfiprintf_r+0x7a>
 8010fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8010fea:	d00b      	beq.n	8011004 <_vfiprintf_r+0xa4>
 8010fec:	465b      	mov	r3, fp
 8010fee:	4622      	mov	r2, r4
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	f7ff ffa1 	bl	8010f3a <__sfputs_r>
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	f000 80a7 	beq.w	801114c <_vfiprintf_r+0x1ec>
 8010ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011000:	445a      	add	r2, fp
 8011002:	9209      	str	r2, [sp, #36]	@ 0x24
 8011004:	f89a 3000 	ldrb.w	r3, [sl]
 8011008:	2b00      	cmp	r3, #0
 801100a:	f000 809f 	beq.w	801114c <_vfiprintf_r+0x1ec>
 801100e:	2300      	movs	r3, #0
 8011010:	f04f 32ff 	mov.w	r2, #4294967295
 8011014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011018:	f10a 0a01 	add.w	sl, sl, #1
 801101c:	9304      	str	r3, [sp, #16]
 801101e:	9307      	str	r3, [sp, #28]
 8011020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011024:	931a      	str	r3, [sp, #104]	@ 0x68
 8011026:	4654      	mov	r4, sl
 8011028:	2205      	movs	r2, #5
 801102a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801102e:	4853      	ldr	r0, [pc, #332]	@ (801117c <_vfiprintf_r+0x21c>)
 8011030:	f7ef f956 	bl	80002e0 <memchr>
 8011034:	9a04      	ldr	r2, [sp, #16]
 8011036:	b9d8      	cbnz	r0, 8011070 <_vfiprintf_r+0x110>
 8011038:	06d1      	lsls	r1, r2, #27
 801103a:	bf44      	itt	mi
 801103c:	2320      	movmi	r3, #32
 801103e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011042:	0713      	lsls	r3, r2, #28
 8011044:	bf44      	itt	mi
 8011046:	232b      	movmi	r3, #43	@ 0x2b
 8011048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801104c:	f89a 3000 	ldrb.w	r3, [sl]
 8011050:	2b2a      	cmp	r3, #42	@ 0x2a
 8011052:	d015      	beq.n	8011080 <_vfiprintf_r+0x120>
 8011054:	9a07      	ldr	r2, [sp, #28]
 8011056:	4654      	mov	r4, sl
 8011058:	2000      	movs	r0, #0
 801105a:	f04f 0c0a 	mov.w	ip, #10
 801105e:	4621      	mov	r1, r4
 8011060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011064:	3b30      	subs	r3, #48	@ 0x30
 8011066:	2b09      	cmp	r3, #9
 8011068:	d94b      	bls.n	8011102 <_vfiprintf_r+0x1a2>
 801106a:	b1b0      	cbz	r0, 801109a <_vfiprintf_r+0x13a>
 801106c:	9207      	str	r2, [sp, #28]
 801106e:	e014      	b.n	801109a <_vfiprintf_r+0x13a>
 8011070:	eba0 0308 	sub.w	r3, r0, r8
 8011074:	fa09 f303 	lsl.w	r3, r9, r3
 8011078:	4313      	orrs	r3, r2
 801107a:	9304      	str	r3, [sp, #16]
 801107c:	46a2      	mov	sl, r4
 801107e:	e7d2      	b.n	8011026 <_vfiprintf_r+0xc6>
 8011080:	9b03      	ldr	r3, [sp, #12]
 8011082:	1d19      	adds	r1, r3, #4
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	9103      	str	r1, [sp, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	bfbb      	ittet	lt
 801108c:	425b      	neglt	r3, r3
 801108e:	f042 0202 	orrlt.w	r2, r2, #2
 8011092:	9307      	strge	r3, [sp, #28]
 8011094:	9307      	strlt	r3, [sp, #28]
 8011096:	bfb8      	it	lt
 8011098:	9204      	strlt	r2, [sp, #16]
 801109a:	7823      	ldrb	r3, [r4, #0]
 801109c:	2b2e      	cmp	r3, #46	@ 0x2e
 801109e:	d10a      	bne.n	80110b6 <_vfiprintf_r+0x156>
 80110a0:	7863      	ldrb	r3, [r4, #1]
 80110a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80110a4:	d132      	bne.n	801110c <_vfiprintf_r+0x1ac>
 80110a6:	9b03      	ldr	r3, [sp, #12]
 80110a8:	1d1a      	adds	r2, r3, #4
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	9203      	str	r2, [sp, #12]
 80110ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110b2:	3402      	adds	r4, #2
 80110b4:	9305      	str	r3, [sp, #20]
 80110b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801118c <_vfiprintf_r+0x22c>
 80110ba:	7821      	ldrb	r1, [r4, #0]
 80110bc:	2203      	movs	r2, #3
 80110be:	4650      	mov	r0, sl
 80110c0:	f7ef f90e 	bl	80002e0 <memchr>
 80110c4:	b138      	cbz	r0, 80110d6 <_vfiprintf_r+0x176>
 80110c6:	9b04      	ldr	r3, [sp, #16]
 80110c8:	eba0 000a 	sub.w	r0, r0, sl
 80110cc:	2240      	movs	r2, #64	@ 0x40
 80110ce:	4082      	lsls	r2, r0
 80110d0:	4313      	orrs	r3, r2
 80110d2:	3401      	adds	r4, #1
 80110d4:	9304      	str	r3, [sp, #16]
 80110d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110da:	4829      	ldr	r0, [pc, #164]	@ (8011180 <_vfiprintf_r+0x220>)
 80110dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110e0:	2206      	movs	r2, #6
 80110e2:	f7ef f8fd 	bl	80002e0 <memchr>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	d03f      	beq.n	801116a <_vfiprintf_r+0x20a>
 80110ea:	4b26      	ldr	r3, [pc, #152]	@ (8011184 <_vfiprintf_r+0x224>)
 80110ec:	bb1b      	cbnz	r3, 8011136 <_vfiprintf_r+0x1d6>
 80110ee:	9b03      	ldr	r3, [sp, #12]
 80110f0:	3307      	adds	r3, #7
 80110f2:	f023 0307 	bic.w	r3, r3, #7
 80110f6:	3308      	adds	r3, #8
 80110f8:	9303      	str	r3, [sp, #12]
 80110fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110fc:	443b      	add	r3, r7
 80110fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011100:	e76a      	b.n	8010fd8 <_vfiprintf_r+0x78>
 8011102:	fb0c 3202 	mla	r2, ip, r2, r3
 8011106:	460c      	mov	r4, r1
 8011108:	2001      	movs	r0, #1
 801110a:	e7a8      	b.n	801105e <_vfiprintf_r+0xfe>
 801110c:	2300      	movs	r3, #0
 801110e:	3401      	adds	r4, #1
 8011110:	9305      	str	r3, [sp, #20]
 8011112:	4619      	mov	r1, r3
 8011114:	f04f 0c0a 	mov.w	ip, #10
 8011118:	4620      	mov	r0, r4
 801111a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801111e:	3a30      	subs	r2, #48	@ 0x30
 8011120:	2a09      	cmp	r2, #9
 8011122:	d903      	bls.n	801112c <_vfiprintf_r+0x1cc>
 8011124:	2b00      	cmp	r3, #0
 8011126:	d0c6      	beq.n	80110b6 <_vfiprintf_r+0x156>
 8011128:	9105      	str	r1, [sp, #20]
 801112a:	e7c4      	b.n	80110b6 <_vfiprintf_r+0x156>
 801112c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011130:	4604      	mov	r4, r0
 8011132:	2301      	movs	r3, #1
 8011134:	e7f0      	b.n	8011118 <_vfiprintf_r+0x1b8>
 8011136:	ab03      	add	r3, sp, #12
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	462a      	mov	r2, r5
 801113c:	4b12      	ldr	r3, [pc, #72]	@ (8011188 <_vfiprintf_r+0x228>)
 801113e:	a904      	add	r1, sp, #16
 8011140:	4630      	mov	r0, r6
 8011142:	f3af 8000 	nop.w
 8011146:	4607      	mov	r7, r0
 8011148:	1c78      	adds	r0, r7, #1
 801114a:	d1d6      	bne.n	80110fa <_vfiprintf_r+0x19a>
 801114c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801114e:	07d9      	lsls	r1, r3, #31
 8011150:	d405      	bmi.n	801115e <_vfiprintf_r+0x1fe>
 8011152:	89ab      	ldrh	r3, [r5, #12]
 8011154:	059a      	lsls	r2, r3, #22
 8011156:	d402      	bmi.n	801115e <_vfiprintf_r+0x1fe>
 8011158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801115a:	f7ff fe7d 	bl	8010e58 <__retarget_lock_release_recursive>
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	065b      	lsls	r3, r3, #25
 8011162:	f53f af1f 	bmi.w	8010fa4 <_vfiprintf_r+0x44>
 8011166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011168:	e71e      	b.n	8010fa8 <_vfiprintf_r+0x48>
 801116a:	ab03      	add	r3, sp, #12
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	462a      	mov	r2, r5
 8011170:	4b05      	ldr	r3, [pc, #20]	@ (8011188 <_vfiprintf_r+0x228>)
 8011172:	a904      	add	r1, sp, #16
 8011174:	4630      	mov	r0, r6
 8011176:	f000 f879 	bl	801126c <_printf_i>
 801117a:	e7e4      	b.n	8011146 <_vfiprintf_r+0x1e6>
 801117c:	08011c31 	.word	0x08011c31
 8011180:	08011c3b 	.word	0x08011c3b
 8011184:	00000000 	.word	0x00000000
 8011188:	08010f3b 	.word	0x08010f3b
 801118c:	08011c37 	.word	0x08011c37

08011190 <_printf_common>:
 8011190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011194:	4616      	mov	r6, r2
 8011196:	4698      	mov	r8, r3
 8011198:	688a      	ldr	r2, [r1, #8]
 801119a:	690b      	ldr	r3, [r1, #16]
 801119c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80111a0:	4293      	cmp	r3, r2
 80111a2:	bfb8      	it	lt
 80111a4:	4613      	movlt	r3, r2
 80111a6:	6033      	str	r3, [r6, #0]
 80111a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80111ac:	4607      	mov	r7, r0
 80111ae:	460c      	mov	r4, r1
 80111b0:	b10a      	cbz	r2, 80111b6 <_printf_common+0x26>
 80111b2:	3301      	adds	r3, #1
 80111b4:	6033      	str	r3, [r6, #0]
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	0699      	lsls	r1, r3, #26
 80111ba:	bf42      	ittt	mi
 80111bc:	6833      	ldrmi	r3, [r6, #0]
 80111be:	3302      	addmi	r3, #2
 80111c0:	6033      	strmi	r3, [r6, #0]
 80111c2:	6825      	ldr	r5, [r4, #0]
 80111c4:	f015 0506 	ands.w	r5, r5, #6
 80111c8:	d106      	bne.n	80111d8 <_printf_common+0x48>
 80111ca:	f104 0a19 	add.w	sl, r4, #25
 80111ce:	68e3      	ldr	r3, [r4, #12]
 80111d0:	6832      	ldr	r2, [r6, #0]
 80111d2:	1a9b      	subs	r3, r3, r2
 80111d4:	42ab      	cmp	r3, r5
 80111d6:	dc26      	bgt.n	8011226 <_printf_common+0x96>
 80111d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80111dc:	6822      	ldr	r2, [r4, #0]
 80111de:	3b00      	subs	r3, #0
 80111e0:	bf18      	it	ne
 80111e2:	2301      	movne	r3, #1
 80111e4:	0692      	lsls	r2, r2, #26
 80111e6:	d42b      	bmi.n	8011240 <_printf_common+0xb0>
 80111e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80111ec:	4641      	mov	r1, r8
 80111ee:	4638      	mov	r0, r7
 80111f0:	47c8      	blx	r9
 80111f2:	3001      	adds	r0, #1
 80111f4:	d01e      	beq.n	8011234 <_printf_common+0xa4>
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	6922      	ldr	r2, [r4, #16]
 80111fa:	f003 0306 	and.w	r3, r3, #6
 80111fe:	2b04      	cmp	r3, #4
 8011200:	bf02      	ittt	eq
 8011202:	68e5      	ldreq	r5, [r4, #12]
 8011204:	6833      	ldreq	r3, [r6, #0]
 8011206:	1aed      	subeq	r5, r5, r3
 8011208:	68a3      	ldr	r3, [r4, #8]
 801120a:	bf0c      	ite	eq
 801120c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011210:	2500      	movne	r5, #0
 8011212:	4293      	cmp	r3, r2
 8011214:	bfc4      	itt	gt
 8011216:	1a9b      	subgt	r3, r3, r2
 8011218:	18ed      	addgt	r5, r5, r3
 801121a:	2600      	movs	r6, #0
 801121c:	341a      	adds	r4, #26
 801121e:	42b5      	cmp	r5, r6
 8011220:	d11a      	bne.n	8011258 <_printf_common+0xc8>
 8011222:	2000      	movs	r0, #0
 8011224:	e008      	b.n	8011238 <_printf_common+0xa8>
 8011226:	2301      	movs	r3, #1
 8011228:	4652      	mov	r2, sl
 801122a:	4641      	mov	r1, r8
 801122c:	4638      	mov	r0, r7
 801122e:	47c8      	blx	r9
 8011230:	3001      	adds	r0, #1
 8011232:	d103      	bne.n	801123c <_printf_common+0xac>
 8011234:	f04f 30ff 	mov.w	r0, #4294967295
 8011238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123c:	3501      	adds	r5, #1
 801123e:	e7c6      	b.n	80111ce <_printf_common+0x3e>
 8011240:	18e1      	adds	r1, r4, r3
 8011242:	1c5a      	adds	r2, r3, #1
 8011244:	2030      	movs	r0, #48	@ 0x30
 8011246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801124a:	4422      	add	r2, r4
 801124c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011254:	3302      	adds	r3, #2
 8011256:	e7c7      	b.n	80111e8 <_printf_common+0x58>
 8011258:	2301      	movs	r3, #1
 801125a:	4622      	mov	r2, r4
 801125c:	4641      	mov	r1, r8
 801125e:	4638      	mov	r0, r7
 8011260:	47c8      	blx	r9
 8011262:	3001      	adds	r0, #1
 8011264:	d0e6      	beq.n	8011234 <_printf_common+0xa4>
 8011266:	3601      	adds	r6, #1
 8011268:	e7d9      	b.n	801121e <_printf_common+0x8e>
	...

0801126c <_printf_i>:
 801126c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011270:	7e0f      	ldrb	r7, [r1, #24]
 8011272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011274:	2f78      	cmp	r7, #120	@ 0x78
 8011276:	4691      	mov	r9, r2
 8011278:	4680      	mov	r8, r0
 801127a:	460c      	mov	r4, r1
 801127c:	469a      	mov	sl, r3
 801127e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011282:	d807      	bhi.n	8011294 <_printf_i+0x28>
 8011284:	2f62      	cmp	r7, #98	@ 0x62
 8011286:	d80a      	bhi.n	801129e <_printf_i+0x32>
 8011288:	2f00      	cmp	r7, #0
 801128a:	f000 80d2 	beq.w	8011432 <_printf_i+0x1c6>
 801128e:	2f58      	cmp	r7, #88	@ 0x58
 8011290:	f000 80b9 	beq.w	8011406 <_printf_i+0x19a>
 8011294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801129c:	e03a      	b.n	8011314 <_printf_i+0xa8>
 801129e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80112a2:	2b15      	cmp	r3, #21
 80112a4:	d8f6      	bhi.n	8011294 <_printf_i+0x28>
 80112a6:	a101      	add	r1, pc, #4	@ (adr r1, 80112ac <_printf_i+0x40>)
 80112a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112ac:	08011305 	.word	0x08011305
 80112b0:	08011319 	.word	0x08011319
 80112b4:	08011295 	.word	0x08011295
 80112b8:	08011295 	.word	0x08011295
 80112bc:	08011295 	.word	0x08011295
 80112c0:	08011295 	.word	0x08011295
 80112c4:	08011319 	.word	0x08011319
 80112c8:	08011295 	.word	0x08011295
 80112cc:	08011295 	.word	0x08011295
 80112d0:	08011295 	.word	0x08011295
 80112d4:	08011295 	.word	0x08011295
 80112d8:	08011419 	.word	0x08011419
 80112dc:	08011343 	.word	0x08011343
 80112e0:	080113d3 	.word	0x080113d3
 80112e4:	08011295 	.word	0x08011295
 80112e8:	08011295 	.word	0x08011295
 80112ec:	0801143b 	.word	0x0801143b
 80112f0:	08011295 	.word	0x08011295
 80112f4:	08011343 	.word	0x08011343
 80112f8:	08011295 	.word	0x08011295
 80112fc:	08011295 	.word	0x08011295
 8011300:	080113db 	.word	0x080113db
 8011304:	6833      	ldr	r3, [r6, #0]
 8011306:	1d1a      	adds	r2, r3, #4
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	6032      	str	r2, [r6, #0]
 801130c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011314:	2301      	movs	r3, #1
 8011316:	e09d      	b.n	8011454 <_printf_i+0x1e8>
 8011318:	6833      	ldr	r3, [r6, #0]
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	1d19      	adds	r1, r3, #4
 801131e:	6031      	str	r1, [r6, #0]
 8011320:	0606      	lsls	r6, r0, #24
 8011322:	d501      	bpl.n	8011328 <_printf_i+0xbc>
 8011324:	681d      	ldr	r5, [r3, #0]
 8011326:	e003      	b.n	8011330 <_printf_i+0xc4>
 8011328:	0645      	lsls	r5, r0, #25
 801132a:	d5fb      	bpl.n	8011324 <_printf_i+0xb8>
 801132c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011330:	2d00      	cmp	r5, #0
 8011332:	da03      	bge.n	801133c <_printf_i+0xd0>
 8011334:	232d      	movs	r3, #45	@ 0x2d
 8011336:	426d      	negs	r5, r5
 8011338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801133c:	4859      	ldr	r0, [pc, #356]	@ (80114a4 <_printf_i+0x238>)
 801133e:	230a      	movs	r3, #10
 8011340:	e011      	b.n	8011366 <_printf_i+0xfa>
 8011342:	6821      	ldr	r1, [r4, #0]
 8011344:	6833      	ldr	r3, [r6, #0]
 8011346:	0608      	lsls	r0, r1, #24
 8011348:	f853 5b04 	ldr.w	r5, [r3], #4
 801134c:	d402      	bmi.n	8011354 <_printf_i+0xe8>
 801134e:	0649      	lsls	r1, r1, #25
 8011350:	bf48      	it	mi
 8011352:	b2ad      	uxthmi	r5, r5
 8011354:	2f6f      	cmp	r7, #111	@ 0x6f
 8011356:	4853      	ldr	r0, [pc, #332]	@ (80114a4 <_printf_i+0x238>)
 8011358:	6033      	str	r3, [r6, #0]
 801135a:	bf14      	ite	ne
 801135c:	230a      	movne	r3, #10
 801135e:	2308      	moveq	r3, #8
 8011360:	2100      	movs	r1, #0
 8011362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011366:	6866      	ldr	r6, [r4, #4]
 8011368:	60a6      	str	r6, [r4, #8]
 801136a:	2e00      	cmp	r6, #0
 801136c:	bfa2      	ittt	ge
 801136e:	6821      	ldrge	r1, [r4, #0]
 8011370:	f021 0104 	bicge.w	r1, r1, #4
 8011374:	6021      	strge	r1, [r4, #0]
 8011376:	b90d      	cbnz	r5, 801137c <_printf_i+0x110>
 8011378:	2e00      	cmp	r6, #0
 801137a:	d04b      	beq.n	8011414 <_printf_i+0x1a8>
 801137c:	4616      	mov	r6, r2
 801137e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011382:	fb03 5711 	mls	r7, r3, r1, r5
 8011386:	5dc7      	ldrb	r7, [r0, r7]
 8011388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801138c:	462f      	mov	r7, r5
 801138e:	42bb      	cmp	r3, r7
 8011390:	460d      	mov	r5, r1
 8011392:	d9f4      	bls.n	801137e <_printf_i+0x112>
 8011394:	2b08      	cmp	r3, #8
 8011396:	d10b      	bne.n	80113b0 <_printf_i+0x144>
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	07df      	lsls	r7, r3, #31
 801139c:	d508      	bpl.n	80113b0 <_printf_i+0x144>
 801139e:	6923      	ldr	r3, [r4, #16]
 80113a0:	6861      	ldr	r1, [r4, #4]
 80113a2:	4299      	cmp	r1, r3
 80113a4:	bfde      	ittt	le
 80113a6:	2330      	movle	r3, #48	@ 0x30
 80113a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80113b0:	1b92      	subs	r2, r2, r6
 80113b2:	6122      	str	r2, [r4, #16]
 80113b4:	f8cd a000 	str.w	sl, [sp]
 80113b8:	464b      	mov	r3, r9
 80113ba:	aa03      	add	r2, sp, #12
 80113bc:	4621      	mov	r1, r4
 80113be:	4640      	mov	r0, r8
 80113c0:	f7ff fee6 	bl	8011190 <_printf_common>
 80113c4:	3001      	adds	r0, #1
 80113c6:	d14a      	bne.n	801145e <_printf_i+0x1f2>
 80113c8:	f04f 30ff 	mov.w	r0, #4294967295
 80113cc:	b004      	add	sp, #16
 80113ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d2:	6823      	ldr	r3, [r4, #0]
 80113d4:	f043 0320 	orr.w	r3, r3, #32
 80113d8:	6023      	str	r3, [r4, #0]
 80113da:	4833      	ldr	r0, [pc, #204]	@ (80114a8 <_printf_i+0x23c>)
 80113dc:	2778      	movs	r7, #120	@ 0x78
 80113de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80113e2:	6823      	ldr	r3, [r4, #0]
 80113e4:	6831      	ldr	r1, [r6, #0]
 80113e6:	061f      	lsls	r7, r3, #24
 80113e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80113ec:	d402      	bmi.n	80113f4 <_printf_i+0x188>
 80113ee:	065f      	lsls	r7, r3, #25
 80113f0:	bf48      	it	mi
 80113f2:	b2ad      	uxthmi	r5, r5
 80113f4:	6031      	str	r1, [r6, #0]
 80113f6:	07d9      	lsls	r1, r3, #31
 80113f8:	bf44      	itt	mi
 80113fa:	f043 0320 	orrmi.w	r3, r3, #32
 80113fe:	6023      	strmi	r3, [r4, #0]
 8011400:	b11d      	cbz	r5, 801140a <_printf_i+0x19e>
 8011402:	2310      	movs	r3, #16
 8011404:	e7ac      	b.n	8011360 <_printf_i+0xf4>
 8011406:	4827      	ldr	r0, [pc, #156]	@ (80114a4 <_printf_i+0x238>)
 8011408:	e7e9      	b.n	80113de <_printf_i+0x172>
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	f023 0320 	bic.w	r3, r3, #32
 8011410:	6023      	str	r3, [r4, #0]
 8011412:	e7f6      	b.n	8011402 <_printf_i+0x196>
 8011414:	4616      	mov	r6, r2
 8011416:	e7bd      	b.n	8011394 <_printf_i+0x128>
 8011418:	6833      	ldr	r3, [r6, #0]
 801141a:	6825      	ldr	r5, [r4, #0]
 801141c:	6961      	ldr	r1, [r4, #20]
 801141e:	1d18      	adds	r0, r3, #4
 8011420:	6030      	str	r0, [r6, #0]
 8011422:	062e      	lsls	r6, r5, #24
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	d501      	bpl.n	801142c <_printf_i+0x1c0>
 8011428:	6019      	str	r1, [r3, #0]
 801142a:	e002      	b.n	8011432 <_printf_i+0x1c6>
 801142c:	0668      	lsls	r0, r5, #25
 801142e:	d5fb      	bpl.n	8011428 <_printf_i+0x1bc>
 8011430:	8019      	strh	r1, [r3, #0]
 8011432:	2300      	movs	r3, #0
 8011434:	6123      	str	r3, [r4, #16]
 8011436:	4616      	mov	r6, r2
 8011438:	e7bc      	b.n	80113b4 <_printf_i+0x148>
 801143a:	6833      	ldr	r3, [r6, #0]
 801143c:	1d1a      	adds	r2, r3, #4
 801143e:	6032      	str	r2, [r6, #0]
 8011440:	681e      	ldr	r6, [r3, #0]
 8011442:	6862      	ldr	r2, [r4, #4]
 8011444:	2100      	movs	r1, #0
 8011446:	4630      	mov	r0, r6
 8011448:	f7ee ff4a 	bl	80002e0 <memchr>
 801144c:	b108      	cbz	r0, 8011452 <_printf_i+0x1e6>
 801144e:	1b80      	subs	r0, r0, r6
 8011450:	6060      	str	r0, [r4, #4]
 8011452:	6863      	ldr	r3, [r4, #4]
 8011454:	6123      	str	r3, [r4, #16]
 8011456:	2300      	movs	r3, #0
 8011458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801145c:	e7aa      	b.n	80113b4 <_printf_i+0x148>
 801145e:	6923      	ldr	r3, [r4, #16]
 8011460:	4632      	mov	r2, r6
 8011462:	4649      	mov	r1, r9
 8011464:	4640      	mov	r0, r8
 8011466:	47d0      	blx	sl
 8011468:	3001      	adds	r0, #1
 801146a:	d0ad      	beq.n	80113c8 <_printf_i+0x15c>
 801146c:	6823      	ldr	r3, [r4, #0]
 801146e:	079b      	lsls	r3, r3, #30
 8011470:	d413      	bmi.n	801149a <_printf_i+0x22e>
 8011472:	68e0      	ldr	r0, [r4, #12]
 8011474:	9b03      	ldr	r3, [sp, #12]
 8011476:	4298      	cmp	r0, r3
 8011478:	bfb8      	it	lt
 801147a:	4618      	movlt	r0, r3
 801147c:	e7a6      	b.n	80113cc <_printf_i+0x160>
 801147e:	2301      	movs	r3, #1
 8011480:	4632      	mov	r2, r6
 8011482:	4649      	mov	r1, r9
 8011484:	4640      	mov	r0, r8
 8011486:	47d0      	blx	sl
 8011488:	3001      	adds	r0, #1
 801148a:	d09d      	beq.n	80113c8 <_printf_i+0x15c>
 801148c:	3501      	adds	r5, #1
 801148e:	68e3      	ldr	r3, [r4, #12]
 8011490:	9903      	ldr	r1, [sp, #12]
 8011492:	1a5b      	subs	r3, r3, r1
 8011494:	42ab      	cmp	r3, r5
 8011496:	dcf2      	bgt.n	801147e <_printf_i+0x212>
 8011498:	e7eb      	b.n	8011472 <_printf_i+0x206>
 801149a:	2500      	movs	r5, #0
 801149c:	f104 0619 	add.w	r6, r4, #25
 80114a0:	e7f5      	b.n	801148e <_printf_i+0x222>
 80114a2:	bf00      	nop
 80114a4:	08011c42 	.word	0x08011c42
 80114a8:	08011c53 	.word	0x08011c53

080114ac <__sflush_r>:
 80114ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b4:	0716      	lsls	r6, r2, #28
 80114b6:	4605      	mov	r5, r0
 80114b8:	460c      	mov	r4, r1
 80114ba:	d454      	bmi.n	8011566 <__sflush_r+0xba>
 80114bc:	684b      	ldr	r3, [r1, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	dc02      	bgt.n	80114c8 <__sflush_r+0x1c>
 80114c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	dd48      	ble.n	801155a <__sflush_r+0xae>
 80114c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114ca:	2e00      	cmp	r6, #0
 80114cc:	d045      	beq.n	801155a <__sflush_r+0xae>
 80114ce:	2300      	movs	r3, #0
 80114d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114d4:	682f      	ldr	r7, [r5, #0]
 80114d6:	6a21      	ldr	r1, [r4, #32]
 80114d8:	602b      	str	r3, [r5, #0]
 80114da:	d030      	beq.n	801153e <__sflush_r+0x92>
 80114dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114de:	89a3      	ldrh	r3, [r4, #12]
 80114e0:	0759      	lsls	r1, r3, #29
 80114e2:	d505      	bpl.n	80114f0 <__sflush_r+0x44>
 80114e4:	6863      	ldr	r3, [r4, #4]
 80114e6:	1ad2      	subs	r2, r2, r3
 80114e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114ea:	b10b      	cbz	r3, 80114f0 <__sflush_r+0x44>
 80114ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114ee:	1ad2      	subs	r2, r2, r3
 80114f0:	2300      	movs	r3, #0
 80114f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114f4:	6a21      	ldr	r1, [r4, #32]
 80114f6:	4628      	mov	r0, r5
 80114f8:	47b0      	blx	r6
 80114fa:	1c43      	adds	r3, r0, #1
 80114fc:	89a3      	ldrh	r3, [r4, #12]
 80114fe:	d106      	bne.n	801150e <__sflush_r+0x62>
 8011500:	6829      	ldr	r1, [r5, #0]
 8011502:	291d      	cmp	r1, #29
 8011504:	d82b      	bhi.n	801155e <__sflush_r+0xb2>
 8011506:	4a2a      	ldr	r2, [pc, #168]	@ (80115b0 <__sflush_r+0x104>)
 8011508:	410a      	asrs	r2, r1
 801150a:	07d6      	lsls	r6, r2, #31
 801150c:	d427      	bmi.n	801155e <__sflush_r+0xb2>
 801150e:	2200      	movs	r2, #0
 8011510:	6062      	str	r2, [r4, #4]
 8011512:	04d9      	lsls	r1, r3, #19
 8011514:	6922      	ldr	r2, [r4, #16]
 8011516:	6022      	str	r2, [r4, #0]
 8011518:	d504      	bpl.n	8011524 <__sflush_r+0x78>
 801151a:	1c42      	adds	r2, r0, #1
 801151c:	d101      	bne.n	8011522 <__sflush_r+0x76>
 801151e:	682b      	ldr	r3, [r5, #0]
 8011520:	b903      	cbnz	r3, 8011524 <__sflush_r+0x78>
 8011522:	6560      	str	r0, [r4, #84]	@ 0x54
 8011524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011526:	602f      	str	r7, [r5, #0]
 8011528:	b1b9      	cbz	r1, 801155a <__sflush_r+0xae>
 801152a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801152e:	4299      	cmp	r1, r3
 8011530:	d002      	beq.n	8011538 <__sflush_r+0x8c>
 8011532:	4628      	mov	r0, r5
 8011534:	f7ff fca0 	bl	8010e78 <_free_r>
 8011538:	2300      	movs	r3, #0
 801153a:	6363      	str	r3, [r4, #52]	@ 0x34
 801153c:	e00d      	b.n	801155a <__sflush_r+0xae>
 801153e:	2301      	movs	r3, #1
 8011540:	4628      	mov	r0, r5
 8011542:	47b0      	blx	r6
 8011544:	4602      	mov	r2, r0
 8011546:	1c50      	adds	r0, r2, #1
 8011548:	d1c9      	bne.n	80114de <__sflush_r+0x32>
 801154a:	682b      	ldr	r3, [r5, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d0c6      	beq.n	80114de <__sflush_r+0x32>
 8011550:	2b1d      	cmp	r3, #29
 8011552:	d001      	beq.n	8011558 <__sflush_r+0xac>
 8011554:	2b16      	cmp	r3, #22
 8011556:	d11e      	bne.n	8011596 <__sflush_r+0xea>
 8011558:	602f      	str	r7, [r5, #0]
 801155a:	2000      	movs	r0, #0
 801155c:	e022      	b.n	80115a4 <__sflush_r+0xf8>
 801155e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011562:	b21b      	sxth	r3, r3
 8011564:	e01b      	b.n	801159e <__sflush_r+0xf2>
 8011566:	690f      	ldr	r7, [r1, #16]
 8011568:	2f00      	cmp	r7, #0
 801156a:	d0f6      	beq.n	801155a <__sflush_r+0xae>
 801156c:	0793      	lsls	r3, r2, #30
 801156e:	680e      	ldr	r6, [r1, #0]
 8011570:	bf08      	it	eq
 8011572:	694b      	ldreq	r3, [r1, #20]
 8011574:	600f      	str	r7, [r1, #0]
 8011576:	bf18      	it	ne
 8011578:	2300      	movne	r3, #0
 801157a:	eba6 0807 	sub.w	r8, r6, r7
 801157e:	608b      	str	r3, [r1, #8]
 8011580:	f1b8 0f00 	cmp.w	r8, #0
 8011584:	dde9      	ble.n	801155a <__sflush_r+0xae>
 8011586:	6a21      	ldr	r1, [r4, #32]
 8011588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801158a:	4643      	mov	r3, r8
 801158c:	463a      	mov	r2, r7
 801158e:	4628      	mov	r0, r5
 8011590:	47b0      	blx	r6
 8011592:	2800      	cmp	r0, #0
 8011594:	dc08      	bgt.n	80115a8 <__sflush_r+0xfc>
 8011596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801159a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801159e:	81a3      	strh	r3, [r4, #12]
 80115a0:	f04f 30ff 	mov.w	r0, #4294967295
 80115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a8:	4407      	add	r7, r0
 80115aa:	eba8 0800 	sub.w	r8, r8, r0
 80115ae:	e7e7      	b.n	8011580 <__sflush_r+0xd4>
 80115b0:	dfbffffe 	.word	0xdfbffffe

080115b4 <_fflush_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	690b      	ldr	r3, [r1, #16]
 80115b8:	4605      	mov	r5, r0
 80115ba:	460c      	mov	r4, r1
 80115bc:	b913      	cbnz	r3, 80115c4 <_fflush_r+0x10>
 80115be:	2500      	movs	r5, #0
 80115c0:	4628      	mov	r0, r5
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	b118      	cbz	r0, 80115ce <_fflush_r+0x1a>
 80115c6:	6a03      	ldr	r3, [r0, #32]
 80115c8:	b90b      	cbnz	r3, 80115ce <_fflush_r+0x1a>
 80115ca:	f7ff f9d7 	bl	801097c <__sinit>
 80115ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0f3      	beq.n	80115be <_fflush_r+0xa>
 80115d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115d8:	07d0      	lsls	r0, r2, #31
 80115da:	d404      	bmi.n	80115e6 <_fflush_r+0x32>
 80115dc:	0599      	lsls	r1, r3, #22
 80115de:	d402      	bmi.n	80115e6 <_fflush_r+0x32>
 80115e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115e2:	f7ff fc38 	bl	8010e56 <__retarget_lock_acquire_recursive>
 80115e6:	4628      	mov	r0, r5
 80115e8:	4621      	mov	r1, r4
 80115ea:	f7ff ff5f 	bl	80114ac <__sflush_r>
 80115ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115f0:	07da      	lsls	r2, r3, #31
 80115f2:	4605      	mov	r5, r0
 80115f4:	d4e4      	bmi.n	80115c0 <_fflush_r+0xc>
 80115f6:	89a3      	ldrh	r3, [r4, #12]
 80115f8:	059b      	lsls	r3, r3, #22
 80115fa:	d4e1      	bmi.n	80115c0 <_fflush_r+0xc>
 80115fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115fe:	f7ff fc2b 	bl	8010e58 <__retarget_lock_release_recursive>
 8011602:	e7dd      	b.n	80115c0 <_fflush_r+0xc>

08011604 <__swhatbuf_r>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	460c      	mov	r4, r1
 8011608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801160c:	2900      	cmp	r1, #0
 801160e:	b096      	sub	sp, #88	@ 0x58
 8011610:	4615      	mov	r5, r2
 8011612:	461e      	mov	r6, r3
 8011614:	da0d      	bge.n	8011632 <__swhatbuf_r+0x2e>
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801161c:	f04f 0100 	mov.w	r1, #0
 8011620:	bf14      	ite	ne
 8011622:	2340      	movne	r3, #64	@ 0x40
 8011624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011628:	2000      	movs	r0, #0
 801162a:	6031      	str	r1, [r6, #0]
 801162c:	602b      	str	r3, [r5, #0]
 801162e:	b016      	add	sp, #88	@ 0x58
 8011630:	bd70      	pop	{r4, r5, r6, pc}
 8011632:	466a      	mov	r2, sp
 8011634:	f000 f87c 	bl	8011730 <_fstat_r>
 8011638:	2800      	cmp	r0, #0
 801163a:	dbec      	blt.n	8011616 <__swhatbuf_r+0x12>
 801163c:	9901      	ldr	r1, [sp, #4]
 801163e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011646:	4259      	negs	r1, r3
 8011648:	4159      	adcs	r1, r3
 801164a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801164e:	e7eb      	b.n	8011628 <__swhatbuf_r+0x24>

08011650 <__smakebuf_r>:
 8011650:	898b      	ldrh	r3, [r1, #12]
 8011652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011654:	079d      	lsls	r5, r3, #30
 8011656:	4606      	mov	r6, r0
 8011658:	460c      	mov	r4, r1
 801165a:	d507      	bpl.n	801166c <__smakebuf_r+0x1c>
 801165c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	6123      	str	r3, [r4, #16]
 8011664:	2301      	movs	r3, #1
 8011666:	6163      	str	r3, [r4, #20]
 8011668:	b003      	add	sp, #12
 801166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801166c:	ab01      	add	r3, sp, #4
 801166e:	466a      	mov	r2, sp
 8011670:	f7ff ffc8 	bl	8011604 <__swhatbuf_r>
 8011674:	9f00      	ldr	r7, [sp, #0]
 8011676:	4605      	mov	r5, r0
 8011678:	4639      	mov	r1, r7
 801167a:	4630      	mov	r0, r6
 801167c:	f7ff f866 	bl	801074c <_malloc_r>
 8011680:	b948      	cbnz	r0, 8011696 <__smakebuf_r+0x46>
 8011682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011686:	059a      	lsls	r2, r3, #22
 8011688:	d4ee      	bmi.n	8011668 <__smakebuf_r+0x18>
 801168a:	f023 0303 	bic.w	r3, r3, #3
 801168e:	f043 0302 	orr.w	r3, r3, #2
 8011692:	81a3      	strh	r3, [r4, #12]
 8011694:	e7e2      	b.n	801165c <__smakebuf_r+0xc>
 8011696:	89a3      	ldrh	r3, [r4, #12]
 8011698:	6020      	str	r0, [r4, #0]
 801169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801169e:	81a3      	strh	r3, [r4, #12]
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80116a6:	b15b      	cbz	r3, 80116c0 <__smakebuf_r+0x70>
 80116a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116ac:	4630      	mov	r0, r6
 80116ae:	f000 f851 	bl	8011754 <_isatty_r>
 80116b2:	b128      	cbz	r0, 80116c0 <__smakebuf_r+0x70>
 80116b4:	89a3      	ldrh	r3, [r4, #12]
 80116b6:	f023 0303 	bic.w	r3, r3, #3
 80116ba:	f043 0301 	orr.w	r3, r3, #1
 80116be:	81a3      	strh	r3, [r4, #12]
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	431d      	orrs	r5, r3
 80116c4:	81a5      	strh	r5, [r4, #12]
 80116c6:	e7cf      	b.n	8011668 <__smakebuf_r+0x18>

080116c8 <_putc_r>:
 80116c8:	b570      	push	{r4, r5, r6, lr}
 80116ca:	460d      	mov	r5, r1
 80116cc:	4614      	mov	r4, r2
 80116ce:	4606      	mov	r6, r0
 80116d0:	b118      	cbz	r0, 80116da <_putc_r+0x12>
 80116d2:	6a03      	ldr	r3, [r0, #32]
 80116d4:	b90b      	cbnz	r3, 80116da <_putc_r+0x12>
 80116d6:	f7ff f951 	bl	801097c <__sinit>
 80116da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80116dc:	07d8      	lsls	r0, r3, #31
 80116de:	d405      	bmi.n	80116ec <_putc_r+0x24>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	0599      	lsls	r1, r3, #22
 80116e4:	d402      	bmi.n	80116ec <_putc_r+0x24>
 80116e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80116e8:	f7ff fbb5 	bl	8010e56 <__retarget_lock_acquire_recursive>
 80116ec:	68a3      	ldr	r3, [r4, #8]
 80116ee:	3b01      	subs	r3, #1
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	60a3      	str	r3, [r4, #8]
 80116f4:	da05      	bge.n	8011702 <_putc_r+0x3a>
 80116f6:	69a2      	ldr	r2, [r4, #24]
 80116f8:	4293      	cmp	r3, r2
 80116fa:	db12      	blt.n	8011722 <_putc_r+0x5a>
 80116fc:	b2eb      	uxtb	r3, r5
 80116fe:	2b0a      	cmp	r3, #10
 8011700:	d00f      	beq.n	8011722 <_putc_r+0x5a>
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	1c5a      	adds	r2, r3, #1
 8011706:	6022      	str	r2, [r4, #0]
 8011708:	701d      	strb	r5, [r3, #0]
 801170a:	b2ed      	uxtb	r5, r5
 801170c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801170e:	07da      	lsls	r2, r3, #31
 8011710:	d405      	bmi.n	801171e <_putc_r+0x56>
 8011712:	89a3      	ldrh	r3, [r4, #12]
 8011714:	059b      	lsls	r3, r3, #22
 8011716:	d402      	bmi.n	801171e <_putc_r+0x56>
 8011718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801171a:	f7ff fb9d 	bl	8010e58 <__retarget_lock_release_recursive>
 801171e:	4628      	mov	r0, r5
 8011720:	bd70      	pop	{r4, r5, r6, pc}
 8011722:	4629      	mov	r1, r5
 8011724:	4622      	mov	r2, r4
 8011726:	4630      	mov	r0, r6
 8011728:	f7ff fa19 	bl	8010b5e <__swbuf_r>
 801172c:	4605      	mov	r5, r0
 801172e:	e7ed      	b.n	801170c <_putc_r+0x44>

08011730 <_fstat_r>:
 8011730:	b538      	push	{r3, r4, r5, lr}
 8011732:	4d07      	ldr	r5, [pc, #28]	@ (8011750 <_fstat_r+0x20>)
 8011734:	2300      	movs	r3, #0
 8011736:	4604      	mov	r4, r0
 8011738:	4608      	mov	r0, r1
 801173a:	4611      	mov	r1, r2
 801173c:	602b      	str	r3, [r5, #0]
 801173e:	f7f2 f86b 	bl	8003818 <_fstat>
 8011742:	1c43      	adds	r3, r0, #1
 8011744:	d102      	bne.n	801174c <_fstat_r+0x1c>
 8011746:	682b      	ldr	r3, [r5, #0]
 8011748:	b103      	cbz	r3, 801174c <_fstat_r+0x1c>
 801174a:	6023      	str	r3, [r4, #0]
 801174c:	bd38      	pop	{r3, r4, r5, pc}
 801174e:	bf00      	nop
 8011750:	24000d78 	.word	0x24000d78

08011754 <_isatty_r>:
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	4d06      	ldr	r5, [pc, #24]	@ (8011770 <_isatty_r+0x1c>)
 8011758:	2300      	movs	r3, #0
 801175a:	4604      	mov	r4, r0
 801175c:	4608      	mov	r0, r1
 801175e:	602b      	str	r3, [r5, #0]
 8011760:	f7f2 f86a 	bl	8003838 <_isatty>
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	d102      	bne.n	801176e <_isatty_r+0x1a>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	b103      	cbz	r3, 801176e <_isatty_r+0x1a>
 801176c:	6023      	str	r3, [r4, #0]
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	24000d78 	.word	0x24000d78

08011774 <_init>:
 8011774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011776:	bf00      	nop
 8011778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801177a:	bc08      	pop	{r3}
 801177c:	469e      	mov	lr, r3
 801177e:	4770      	bx	lr

08011780 <_fini>:
 8011780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011782:	bf00      	nop
 8011784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011786:	bc08      	pop	{r3}
 8011788:	469e      	mov	lr, r3
 801178a:	4770      	bx	lr
