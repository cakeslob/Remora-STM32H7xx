
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000209a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  08020c48  08020c48  00021c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021d94  08021d94  00022d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08021d9c  08021d9c  00022d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08021da8  08021da8  00022da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  08021dac  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b84  24000088  08021e34  00023088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c0c  08021e34  00023c0c  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY
 11 .debug_info   0011fd60  00000000  00000000  000230b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00011380  00000000  00000000  00142e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00005d10  00000000  00000000  00154198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00004716  00000000  00000000  00159ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004cb36  00000000  00000000  0015e5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00066bca  00000000  00000000  001ab0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001bb466  00000000  00000000  00211cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  003cd124  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0001c960  00000000  00000000  003cd168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  003e9ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020c2c 	.word	0x08020c2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08020c2c 	.word	0x08020c2c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00d ff2c 	bl	800ebe4 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08021710 	.word	0x08021710

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f01e fadc 	bl	801f36a <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	080216e0 	.word	0x080216e0
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	080216e0 	.word	0x080216e0

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f01e fa85 	bl	801f36a <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f014 fa52 	bl	801536c <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f01f f851 	bl	801ff70 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f019 fd68 	bl	801aa34 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f01e fff4 	bl	801ff70 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f014 f9cb 	bl	801536c <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f01e ffca 	bl	801ff70 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f011 fe59 	bl	8012cec <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f011 fe1d 	bl	8012cec <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f01e ff50 	bl	801ff70 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f011 fdd2 	bl	8012cec <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	08020c48 	.word	0x08020c48
 8001160:	08020c64 	.word	0x08020c64
 8001164:	08020c80 	.word	0x08020c80
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	08020c9c 	.word	0x08020c9c
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f01e f903 	bl	801f38c <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f011 fce8 	bl	8012b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f011 fcfc 	bl	8012bbe <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f01e f8e0 	bl	801f38c <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f011 fcc5 	bl	8012b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f011 fcd9 	bl	8012bbe <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f01e f8bd 	bl	801f38c <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f011 fca2 	bl	8012b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f011 fcb6 	bl	8012bbe <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f01e fe18 	bl	801ff70 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	08020ccc 	.word	0x08020ccc

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f013 fb29 	bl	8014b44 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f013 fafd 	bl	8014b44 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f012 f840 	bl	80135e4 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f010 fef9 	bl	8012bbe <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f01e f877 	bl	801ff70 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f010 fe98 	bl	8012bbe <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	08020cdc 	.word	0x08020cdc

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f011 fa62 	bl	80133a4 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f011 fe8d 	bl	8013c20 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f011 fb62 	bl	80135e4 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fba9 	bl	800269c <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fba4 	bl	80026bc <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	080216d4 	.word	0x080216d4

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f01d f9f6 	bl	801f3de <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00c fd3a 	bl	800ebac <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08021710 	.word	0x08021710

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f01d fa8d 	bl	801f714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4904      	ldr	r1, [pc, #16]	@ (8002214 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8002206:	f000 fa04 	bl	8002612 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800220a:	4603      	mov	r3, r0
					__idx, __base); }
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08020cf0 	.word	0x08020cf0
 8002218:	0801fcf9 	.word	0x0801fcf9

0800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f01d fa90 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	761a      	strb	r2, [r3, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	765a      	strb	r2, [r3, #25]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	332c      	adds	r3, #44	@ 0x2c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
    configurePin();
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f835 	bl	80022c0 <_ZN3Pin12configurePinEv>
    enableClock();
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8a8 	bl	80023ac <_ZN3Pin11enableClockEv>
    initialisePin();
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f949 	bl	80024f4 <_ZN3Pin13initialisePinEv>
}
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f01d fa67 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	761a      	strb	r2, [r3, #24]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	765a      	strb	r2, [r3, #25]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	332c      	adds	r3, #44	@ 0x2c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
    configurePin();
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f80b 	bl	80022c0 <_ZN3Pin12configurePinEv>
    enableClock();
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f87e 	bl	80023ac <_ZN3Pin11enableClockEv>
    initialisePin();
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f91f 	bl	80024f4 <_ZN3Pin13initialisePinEv>
}
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b090      	sub	sp, #64	@ 0x40
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <_ZN3Pin12configurePinEv+0xe4>)
 80022ca:	f107 0408 	add.w	r4, r7, #8
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f01d f9cc 	bl	801f67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022e6:	4603      	mov	r3, r0
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b50      	cmp	r3, #80	@ 0x50
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d042      	beq.n	800237e <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f01d f9be 	bl	801f67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002302:	4603      	mov	r3, r0
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b41      	subs	r3, #65	@ 0x41
 8002308:	b2da      	uxtb	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	2203      	movs	r2, #3
 800231a:	f01d fa4b 	bl	801f7b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800231e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002322:	220a      	movs	r2, #10
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff5e 	bl	80021e8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	839a      	strh	r2, [r3, #28]
 8002334:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002338:	4618      	mov	r0, r3
 800233a:	f01d f90b 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8b9b      	ldrh	r3, [r3, #28]
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	4093      	lsls	r3, r2
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e9b      	ldrb	r3, [r3, #26]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	3340      	adds	r3, #64	@ 0x40
 8002356:	443b      	add	r3, r7
 8002358:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e5b      	ldrb	r3, [r3, #25]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d00c      	beq.n	8002396 <_ZN3Pin12configurePinEv+0xd6>
 800237c:	e003      	b.n	8002386 <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 800237e:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <_ZN3Pin12configurePinEv+0xe8>)
 8002380:	f01d fdf6 	bl	801ff70 <puts>
 8002384:	e00a      	b.n	800239c <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 800238a:	2b03      	cmp	r3, #3
 800238c:	d101      	bne.n	8002392 <_ZN3Pin12configurePinEv+0xd2>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <_ZN3Pin12configurePinEv+0xd8>
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <_ZN3Pin12configurePinEv+0xd8>
 8002396:	2301      	movs	r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 800239c:	3740      	adds	r7, #64	@ 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bdb0      	pop	{r4, r5, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	08020d18 	.word	0x08020d18
 80023a8:	08020cf8 	.word	0x08020cf8

080023ac <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 80023ac:	b480      	push	{r7}
 80023ae:	b08b      	sub	sp, #44	@ 0x2c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e9b      	ldrb	r3, [r3, #26]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	f200 8093 	bhi.w	80024e4 <_ZN3Pin11enableClockEv+0x138>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <_ZN3Pin11enableClockEv+0x18>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023e5 	.word	0x080023e5
 80023c8:	08002405 	.word	0x08002405
 80023cc:	08002425 	.word	0x08002425
 80023d0:	08002445 	.word	0x08002445
 80023d4:	08002465 	.word	0x08002465
 80023d8:	08002485 	.word	0x08002485
 80023dc:	080024a5 	.word	0x080024a5
 80023e0:	080024c5 	.word	0x080024c5
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ea:	4a41      	ldr	r2, [pc, #260]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023f4:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	e06f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240a:	4a39      	ldr	r2, [pc, #228]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002414:	4b36      	ldr	r3, [pc, #216]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	e05f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242a:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	e04f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8002444:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	e03f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8002464:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800246a:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002474:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	e02f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 800248c:	f043 0320 	orr.w	r3, r3, #32
 8002490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 8002496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	e01f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	e00f      	b.n	80024e4 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <_ZN3Pin11enableClockEv+0x144>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	bf00      	nop
    }
}
 80024e4:	bf00      	nop
 80024e6:	372c      	adds	r7, #44	@ 0x2c
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	58024400 	.word	0x58024400

080024f4 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8bdb      	ldrh	r3, [r3, #30]
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	f013 f8f8 	bl	80156fc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8bdb      	ldrh	r3, [r3, #30]
 8002510:	461a      	mov	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1a      	ldr	r2, [r3, #32]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	332c      	adds	r3, #44	@ 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f012 ff18 	bl	801536c <HAL_GPIO_Init>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8bdb      	ldrh	r3, [r3, #30]
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f013 f8b8 	bl	80156cc <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8bd9      	ldrh	r1, [r3, #30]
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <_ZN3Pin3setEb+0x1e>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <_ZN3Pin3setEb+0x20>
 800258e:	2300      	movs	r3, #0
 8002590:	461a      	mov	r2, r3
 8002592:	f013 f8b3 	bl	80156fc <HAL_GPIO_WritePin>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	f01d fe7f 	bl	80202a8 <__errno>
 80025aa:	4603      	mov	r3, r0
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f01d fe79 	bl	80202a8 <__errno>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	f01d fe6b 	bl	80202a8 <__errno>
 80025d2:	4603      	mov	r3, r0
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681c      	ldr	r4, [r3, #0]
 80025e8:	f01d fe5e 	bl	80202a8 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	601c      	str	r4, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}

080025fa <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002604:	2300      	movs	r3, #0
	  }
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b08b      	sub	sp, #44	@ 0x2c
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ffba 	bl	800259e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f107 0118 	add.w	r1, r7, #24
 8002630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d102      	bne.n	8002646 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8002640:	68b8      	ldr	r0, [r7, #8]
 8002642:	f01c febf 	bl	801f3c4 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002646:	f01d fe2f 	bl	80202a8 <__errno>
 800264a:	4603      	mov	r3, r0
 800264c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800264e:	2b22      	cmp	r3, #34	@ 0x22
 8002650:	d006      	beq.n	8002660 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8002652:	4621      	mov	r1, r4
 8002654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002656:	f7ff ffd0 	bl	80025fa <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002664:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800266a:	68b8      	ldr	r0, [r7, #8]
 800266c:	f01c feb0 	bl	801f3d0 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	461a      	mov	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]

      return __ret;
 8002686:	6a3c      	ldr	r4, [r7, #32]
    }
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff9a 	bl	80025c6 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002692:	4623      	mov	r3, r4
    }
 8002694:	4618      	mov	r0, r3
 8002696:	372c      	adds	r7, #44	@ 0x2c
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}

0800269c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <_ZN9InterruptC1Ev+0x1c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	08021740 	.word	0x08021740

080026bc <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 80026ca:	f01d fbe1 	bl	801fe90 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 80026ce:	4905      	ldr	r1, [pc, #20]	@ (80026e4 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	08020d38 	.word	0x08020d38
 80026e4:	240000a4 	.word	0x240000a4

080026e8 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a02      	ldr	r2, [pc, #8]	@ (8002700 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80026f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026f8:	4610      	mov	r0, r2
 80026fa:	4798      	blx	r3
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	240000a4 	.word	0x240000a4

08002704 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a02      	ldr	r2, [pc, #8]	@ (800271c <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8002712:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002714:	4610      	mov	r0, r2
 8002716:	4798      	blx	r3
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	240000a4 	.word	0x240000a4

08002720 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a02      	ldr	r2, [pc, #8]	@ (8002738 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 800272e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002730:	4610      	mov	r0, r2
 8002732:	4798      	blx	r3
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	240000a4 	.word	0x240000a4

0800273c <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a02      	ldr	r2, [pc, #8]	@ (8002754 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800274a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800274c:	4610      	mov	r0, r2
 800274e:	4798      	blx	r3
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	240000a4 	.word	0x240000a4

08002758 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a02      	ldr	r2, [pc, #8]	@ (8002770 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8002766:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002768:	4610      	mov	r0, r2
 800276a:	4798      	blx	r3
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	240000a4 	.word	0x240000a4

08002774 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800277a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a02      	ldr	r2, [pc, #8]	@ (800278c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8002782:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8002784:	4610      	mov	r0, r2
 8002786:	4798      	blx	r3
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	240000a4 	.word	0x240000a4

08002790 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8002794:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 80027a8:	f7ff fff2 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f002 f948 	bl	8004a48 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 80027b8:	4603      	mov	r3, r0
 80027ba:	e004      	b.n	80027c6 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd fdef 	bl	80003a0 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	bf00      	nop
      }
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
    return malloc(size);
 80027d8:	6838      	ldr	r0, [r7, #0]
 80027da:	f01d f91f 	bl	801fa1c <malloc>
 80027de:	4603      	mov	r3, r0
  }
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
    free(ptr);
 80027f2:	6838      	ldr	r0, [r7, #0]
 80027f4:	f01d f91a 	bl	801fa2c <free>
  }
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68b8      	ldr	r0, [r7, #8]
 8002810:	f01d f9c2 	bl	801fb98 <realloc>
 8002814:	4603      	mov	r3, r0
  }
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	24000000 	.word	0x24000000

08002834 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3309      	adds	r3, #9
  }
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d301      	bcc.n	8002862 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 800285e:	2300      	movs	r3, #0
 8002860:	e01b      	b.n	800289a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffe6 	bl	8002834 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002868:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d201      	bcs.n	8002876 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002872:	2300      	movs	r3, #0
 8002874:	e011      	b.n	800289a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	4798      	blx	r3
 8002882:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	b29a      	uxth	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2201      	movs	r2, #1
 8002896:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002898:	68bb      	ldr	r3, [r7, #8]
  }
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 80028a2:	b5b0      	push	{r4, r5, r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b4:	d20e      	bcs.n	80028d4 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3308      	adds	r3, #8
 80028bc:	681c      	ldr	r4, [r3, #0]
 80028be:	687d      	ldr	r5, [r7, #4]
 80028c0:	68b8      	ldr	r0, [r7, #8]
 80028c2:	f7ff ffb7 	bl	8002834 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	68f9      	ldr	r1, [r7, #12]
 80028cc:	4628      	mov	r0, r5
 80028ce:	47a0      	blx	r4
 80028d0:	6178      	str	r0, [r7, #20]
 80028d2:	e001      	b.n	80028d8 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
    if (newNode)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	80da      	strh	r2, [r3, #6]
 80028e6:	e006      	b.n	80028f6 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
    return newNode;
 80028f6:	697b      	ldr	r3, [r7, #20]
  }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}

08002900 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3304      	adds	r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	4798      	blx	r3
  }
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	721a      	strb	r2, [r3, #8]
  }
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    return !str_;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
  }
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    return size_;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
  }
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    return str_;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
  }
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    while (strings_) {
 80029aa:	e00a      	b.n	80029c2 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff ff9f 	bl	8002900 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	601a      	str	r2, [r3, #0]
    strings_ = node;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	601a      	str	r2, [r3, #0]
  }
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e029      	b.n	8002a64 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3308      	adds	r3, #8
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d11f      	bne.n	8002a5a <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	889b      	ldrh	r3, [r3, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	809a      	strh	r2, [r3, #4]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e003      	b.n	8002a50 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	6938      	ldr	r0, [r7, #16]
 8002a54:	f7ff ff54 	bl	8002900 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002a58:	e008      	b.n	8002a6c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1d2      	bne.n	8002a10 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 8002a6a:	e000      	b.n	8002a6e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8002a6c:	bf00      	nop
    }
  }
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	f7ff ff4c 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8002a92:	b590      	push	{r4, r7, lr}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8002aa0:	68fc      	ldr	r4, [r7, #12]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f7fd fc79 	bl	80003a0 <strlen>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	e000      	b.n	8002ab4 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff ff31 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}

08002ac8 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    return str_.data();
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff58 	bl	8002988 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8002ad8:	4603      	mov	r3, r0
  }
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
    return s.str_;
 8002aea:	687b      	ldr	r3, [r7, #4]
  }
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b0c:	809a      	strh	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
  }
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
  }
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f805 	bl	8002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002b74:	4603      	mov	r3, r0
  }
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
  }
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
    return p;
 8002ba0:	683b      	ldr	r3, [r7, #0]
  }
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
    return p;
 8002c16:	683b      	ldr	r3, [r7, #0]
  }
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ffe1 	bl	8002bf6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	711a      	strb	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c40:	80da      	strh	r2, [r3, #6]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    return next_;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	88db      	ldrh	r3, [r3, #6]
  }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	80da      	strh	r2, [r3, #6]
  }
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f85f 	bl	8002d4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	e000      	b.n	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 8002c9a:	2300      	movs	r3, #0
  }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f85f 	bl	8002d70 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	e000      	b.n	8002cbe <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8002cbc:	2300      	movs	r3, #0
  }
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f86c 	bl	8002dac <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	e000      	b.n	8002ce0 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8002cde:	2300      	movs	r3, #0
  }
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ffe8 	bl	8002cc6 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002cf6:	4603      	mov	r3, r0
  }
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	791b      	ldrb	r3, [r3, #4]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d002      	beq.n	8002d18 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d008      	beq.n	8002d28 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8002d16:	e013      	b.n	8002d40 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff feb6 	bl	8002a92 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8002d26:	e00e      	b.n	8002d46 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	88da      	ldrh	r2, [r3, #6]
 8002d36:	2300      	movs	r3, #0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f001 fea5 	bl	8004a88 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 8002d3e:	e002      	b.n	8002d46 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fe97 	bl	8002a74 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	791b      	ldrb	r3, [r3, #4]
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
  }
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	2160      	movs	r1, #96	@ 0x60
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff22 	bl	8002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002d84:	4603      	mov	r3, r0
  }
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff13 	bl	8002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002da2:	4603      	mov	r3, r0
  }
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	791b      	ldrb	r3, [r3, #4]
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
  }
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	711a      	strb	r2, [r3, #4]
  }
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2206      	movs	r2, #6
 8002df8:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	701a      	strb	r2, [r3, #0]
  }
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f805 	bl	8002e2a <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8002e20:	2301      	movs	r3, #1
  }
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2205      	movs	r2, #5
 8002e38:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	601a      	str	r2, [r3, #0]
  }
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e5a:	801a      	strh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e62:	805a      	strh	r2, [r3, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ffe5 	bl	8002e4c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	2004      	movs	r0, #4
 8002ea0:	f7ff fe79 	bl	8002b96 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 8002eaa:	2200      	movs	r2, #0
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	805a      	strh	r2, [r3, #2]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffdd 	bl	8002e72 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8002eb8:	687b      	ldr	r3, [r7, #4]
  }
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffbd 	bl	8002e4c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4619      	mov	r1, r3
 8002eee:	2004      	movs	r0, #4
 8002ef0:	f7ff fe51 	bl	8002b96 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8002efa:	2200      	movs	r2, #0
 8002efc:	801a      	strh	r2, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	805a      	strh	r2, [r3, #2]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ffdd 	bl	8002ec2 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8002f08:	687b      	ldr	r3, [r7, #4]
  }
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	849a      	strh	r2, [r3, #36]	@ 0x24
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2204      	movs	r2, #4
 8002f46:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	711a      	strb	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3308      	adds	r3, #8
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ffca 	bl	8002f12 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	330c      	adds	r3, #12
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ffd3 	bl	8002f2e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	6839      	ldr	r1, [r7, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd16 	bl	80029d4 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6838      	ldr	r0, [r7, #0]
 8002fc2:	f7ff fc43 	bl	800284c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8002fc6:	60f8      	str	r0, [r7, #12]
    if (!node)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	711a      	strb	r2, [r3, #4]
    return node;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
  }
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f7ff fc55 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8002ff8:	60b8      	str	r0, [r7, #8]
    if (!node)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	711a      	strb	r2, [r3, #4]
    return node;
 8003006:	68bb      	ldr	r3, [r7, #8]
  }
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f7ff fc6d 	bl	8002900 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f103 0008 	add.w	r0, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	f7ff fcd7 	bl	80029f8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f103 020c 	add.w	r2, r3, #12
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f001 fd24 	bl	8004ab4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0208 	add.w	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7ff fc8e 	bl	80029a0 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 020c 	add.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f001 fd3f 	bl	8004b24 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    return data_;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
  }
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    return resources_;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
  }
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
    return resources_;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
  }
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
    return data_;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
  }
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	463b      	mov	r3, r7
 8003162:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8003166:	463b      	mov	r3, r7
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fd13 	bl	8004b94 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800316e:	60f8      	str	r0, [r7, #12]
    return !!data;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
  }
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fcb2 	bl	8002af8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	1d38      	adds	r0, r7, #4
 80031a8:	e880 0006 	stmia.w	r0, {r1, r2}
 80031ac:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	461a      	mov	r2, r3
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fcce 	bl	8002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80031e2:	4601      	mov	r1, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff8a 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fc98 	bl	8002b3e <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 800320e:	4603      	mov	r3, r0
  }
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 f936 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 800322e:	687b      	ldr	r3, [r7, #4]
  }
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
    if (!data_)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff76 	bl	8003184 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8003298:	e011      	b.n	80032be <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f919 	bl	80034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	ca06      	ldmia	r2, {r1, r2}
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff70 	bl	800319e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
    return iterator();
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff57 	bl	8003184 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
    return resources_;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
  }
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fc2f 	bl	8002bae <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003350:	4603      	mov	r3, r0
  }
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fdf8 	bl	8002f5e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3338      	adds	r3, #56	@ 0x38
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fc56 	bl	8002c24 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fe7d 	bl	800308c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
    resources_.clear();
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe54 	bl	8003052 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3338      	adds	r3, #56	@ 0x38
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fd0d 	bl	8002dce <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    return &resources_;
 80033c4:	687b      	ldr	r3, [r7, #4]
  }
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    return &data_;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3338      	adds	r3, #56	@ 0x38
  }
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
    return &data_;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3338      	adds	r3, #56	@ 0x38
  }
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f93e 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fbdd 	bl	8004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8003422:	4603      	mov	r3, r0
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 800342e:	2300      	movs	r3, #0
 8003430:	e00d      	b.n	800344e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f107 0208 	add.w	r2, r7, #8
 800343a:	ca06      	ldmia	r2, {r1, r2}
 800343c:	f000 f867 	bl	800350e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8003440:	f107 0308 	add.w	r3, r7, #8
 8003444:	4618      	mov	r0, r3
 8003446:	f001 fbda 	bl	8004bfe <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800344a:	4603      	mov	r3, r0
 800344c:	bf00      	nop
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	4613      	mov	r3, r2
 8003462:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fbe5 	bl	8002c4c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	e001      	b.n	800348c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	80da      	strh	r2, [r3, #6]
}
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	88db      	ldrh	r3, [r3, #6]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6838      	ldr	r0, [r7, #0]
 80034ac:	f000 f965 	bl	800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	88da      	ldrh	r2, [r3, #6]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	809a      	strh	r2, [r3, #4]
  if (slot_)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fbbe 	bl	8002c4c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	80da      	strh	r2, [r3, #6]
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f941 	bl	800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80034f8:	4601      	mov	r1, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff ffa8 	bl	8003456 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 800350e:	b590      	push	{r4, r7, lr}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	1d38      	adds	r0, r7, #4
 8003518:	e880 0006 	stmia.w	r0, {r1, r2}
 800351c:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	885b      	ldrh	r3, [r3, #2]
 8003522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	885b      	ldrh	r3, [r3, #2]
 800352e:	4619      	mov	r1, r3
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	f000 f922 	bl	800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003536:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8003538:	697c      	ldr	r4, [r7, #20]
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fb6a 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4619      	mov	r1, r3
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fb8c 	bl	8002c64 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb61 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 800355c:	e00f      	b.n	800357e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fb58 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fb50 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	805a      	strh	r2, [r3, #2]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}

08003586 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8003586:	b082      	sub	sp, #8
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	1d38      	adds	r0, r7, #4
 8003592:	e880 0006 	stmia.w	r0, {r1, r2}
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fb47 	bl	8004c2e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80035a0:	4604      	mov	r4, r0
 80035a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fb35 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4619      	mov	r1, r3
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fb57 	bl	8002c64 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	885b      	ldrh	r3, [r3, #2]
 80035ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01a      	beq.n	80035f8 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	885b      	ldrh	r3, [r3, #2]
 80035c6:	4619      	mov	r1, r3
 80035c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035ca:	f000 f8d6 	bl	800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80035ce:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 80035d0:	697c      	ldr	r4, [r7, #20]
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fb1e 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80035da:	4603      	mov	r3, r0
 80035dc:	4619      	mov	r1, r3
 80035de:	4620      	mov	r0, r4
 80035e0:	f7ff fb40 	bl	8002c64 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 80035e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fb14 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 80035f6:	e010      	b.n	800361a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fb0b 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8003608:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fb02 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	805a      	strh	r2, [r3, #2]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003624:	b002      	add	sp, #8
 8003626:	4770      	bx	lr

08003628 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8003638:	e01b      	b.n	8003672 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 800363e:	8afb      	ldrh	r3, [r7, #22]
 8003640:	4619      	mov	r1, r3
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	f000 f899 	bl	800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003648:	6138      	str	r0, [r7, #16]
    next = slot->next();
 800364a:	6938      	ldr	r0, [r7, #16]
 800364c:	f7ff fafe 	bl	8002c4c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003650:	4603      	mov	r3, r0
 8003652:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003654:	683c      	ldr	r4, [r7, #0]
 8003656:	8aba      	ldrh	r2, [r7, #20]
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	6939      	ldr	r1, [r7, #16]
 800365e:	4618      	mov	r0, r3
 8003660:	f001 faf1 	bl	8004c46 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	e893 0006 	ldmia.w	r3, {r1, r2}
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f851 	bl	8003714 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003672:	8afb      	ldrh	r3, [r7, #22]
 8003674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003678:	4293      	cmp	r3, r2
 800367a:	d1de      	bne.n	800363a <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003682:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800368a:	805a      	strh	r2, [r3, #2]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f103 010c 	add.w	r1, r3, #12
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 faf0 	bl	8004c92 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 80036b2:	f107 0308 	add.w	r3, r7, #8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fb2e 	bl	8004d18 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 80036bc:	4603      	mov	r3, r0
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	711a      	strb	r2, [r3, #4]
    return {};
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f001 facd 	bl	8004c6e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 80036d4:	e01a      	b.n	800370c <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 80036d6:	f107 0308 	add.w	r3, r7, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fb2d 	bl	8004d3a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4619      	mov	r1, r3
 80036e4:	2008      	movs	r0, #8
 80036e6:	f7ff fa91 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 80036ea:	4604      	mov	r4, r0
 80036ec:	2c00      	cmp	r4, #0
 80036ee:	d002      	beq.n	80036f6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff fa97 	bl	8002c24 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fb29 	bl	8004d52 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	4621      	mov	r1, r4
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f001 fa9d 	bl	8004c46 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}

08003714 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8003714:	b5b0      	push	{r4, r5, r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fa82 	bl	8004c2e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800372a:	4603      	mov	r3, r0
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa1c 	bl	8003b6c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f103 040c 	add.w	r4, r3, #12
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fa5e 	bl	8004bfe <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8003742:	4603      	mov	r3, r0
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fb10 	bl	8004d6a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 800374a:	4605      	mov	r5, r0
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fa61 	bl	8004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4629      	mov	r1, r5
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fb10 	bl	8004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	e893 0006 	ldmia.w	r3, {r1, r2}
 800376c:	4620      	mov	r0, r4
 800376e:	f001 fb1d 	bl	8004dac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bdb0      	pop	{r4, r5, r7, pc}

0800377a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	330c      	adds	r3, #12
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fb28 	bl	8004de4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 800379e:	b590      	push	{r4, r7, lr}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f103 010c 	add.w	r1, r3, #12
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fa6b 	bl	8004c92 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 faa9 	bl	8004d18 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f083 0301 	eor.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	711a      	strb	r2, [r3, #4]
    return {};
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f001 fb27 	bl	8004e2c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 80037de:	e011      	b.n	8003804 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 faa8 	bl	8004d3a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461c      	mov	r4, r3
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 faad 	bl	8004d52 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4621      	mov	r1, r4
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 fb26 	bl	8004e50 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f816 	bl	800384e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8003822:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f103 040c 	add.w	r4, r3, #12
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	4618      	mov	r0, r3
 8003834:	f001 faa6 	bl	8004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003840:	4620      	mov	r0, r4
 8003842:	f001 fab3 	bl	8004dac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd90      	pop	{r4, r7, pc}

0800384e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	330c      	adds	r3, #12
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fabe 	bl	8004de4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 800387c:	2000      	movs	r0, #0
 800387e:	f000 f819 	bl	80038b4 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8003882:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 800388c:	2300      	movs	r3, #0
 800388e:	e00c      	b.n	80038aa <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	79fa      	ldrb	r2, [r7, #7]
 8003896:	429a      	cmp	r2, r3
 8003898:	d103      	bne.n	80038a2 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3301      	adds	r3, #1
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	e003      	b.n	80038aa <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3302      	adds	r3, #2
 80038a6:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 80038a8:	e7ec      	b.n	8003884 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e000      	b.n	80038ca <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 80038c8:	2300      	movs	r3, #0
 80038ca:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 80038cc:	4413      	add	r3, r2
  }
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	08020d6c 	.word	0x08020d6c

080038e0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
    if (node_)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7ff fb73 	bl	8003010 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    size_ = 0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
    if (!node_)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	211f      	movs	r1, #31
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fb2d 	bl	8002fb0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]
  }
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4413      	add	r3, r2
 8003976:	2200      	movs	r2, #0
 8003978:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f103 0108 	add.w	r1, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa72 	bl	8004e78 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	4619      	mov	r1, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f001 fa7d 	bl	8004e9a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80039a0:	6178      	str	r0, [r7, #20]
    if (!node) {
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f7ff fb12 	bl	8002fde <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80039ba:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fae5 	bl	8002f92 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	e005      	b.n	80039dc <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	889b      	ldrh	r3, [r3, #4]
 80039d4:	3301      	adds	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	809a      	strh	r2, [r3, #4]
    }
    return node;
 80039dc:	697b      	ldr	r3, [r7, #20]
  }
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 80039e6:	b590      	push	{r4, r7, lr}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d014      	beq.n	8003a24 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6852      	ldr	r2, [r2, #4]
 8003a02:	88d2      	ldrh	r2, [r2, #6]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	3301      	adds	r3, #1
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f7ff fae0 	bl	8002fde <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
    if (node_)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 8003a2c:	78fc      	ldrb	r4, [r7, #3]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	1c58      	adds	r0, r3, #1
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6088      	str	r0, [r1, #8]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4622      	mov	r2, r4
 8003a40:	721a      	strb	r2, [r3, #8]
  }
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}

08003a4a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
  }
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4413      	add	r3, r2
 8003a80:	2200      	movs	r2, #0
 8003a82:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f103 0108 	add.w	r1, r3, #8
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	2300      	movs	r3, #0
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f001 fa11 	bl	8004eba <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8003aac:	463b      	mov	r3, r7
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f87c 	bl	8004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003ab4:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8003abc:	f107 0308 	add.w	r3, r7, #8
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f91c 	bl	8002d00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fffb 	bl	8002ac8 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	e000      	b.n	8003ad8 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8003ad6:	2300      	movs	r3, #0
  }
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f84f 	bl	8004b94 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8003af6:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f9ef 	bl	8004ede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003b00:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7ff f8ba 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	e000      	b.n	8003b14 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 8003b12:	2300      	movs	r3, #0
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fb9e 	bl	800325a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f82c 	bl	8004b94 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8003b3c:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f9cc 	bl	8004ede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003b46:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7ff f8b9 	bl	8002cc6 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e000      	b.n	8003b5a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fbce 	bl	8003300 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff f823 	bl	8002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f7ff fa4c 	bl	800302e <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff f813 	bl	8002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	6838      	ldr	r0, [r7, #0]
 8003bb0:	f7ff fe2c 	bl	800380c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff f875 	bl	8002ca4 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 8003bba:	60f8      	str	r0, [r7, #12]
  if (collection)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003bc2:	6839      	ldr	r1, [r7, #0]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fd2f 	bl	8003628 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	711a      	strb	r2, [r3, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	791b      	ldrb	r3, [r3, #4]
 8003be6:	2110      	movs	r1, #16
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ffed 	bl	8002bc8 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003bee:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6838      	ldr	r0, [r7, #0]
 8003bfc:	f7ff fe27 	bl	800384e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8003c00:	4603      	mov	r3, r0
             : nullptr;
 8003c02:	e000      	b.n	8003c06 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	70fb      	strb	r3, [r7, #3]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
    return code_;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	781b      	ldrb	r3, [r3, #0]
  }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8003c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	24000004 	.word	0x24000004

08003c6c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    return true;
 8003c74:	2301      	movs	r3, #1
  }
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
    return true;
 8003c8a:	2301      	movs	r3, #1
  }
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    return true;
 8003ca0:	2301      	movs	r3, #1
  }
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
    return true;
 8003cb6:	2301      	movs	r3, #1
  }
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	220a      	movs	r2, #10
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffe2 	bl	8003ce0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8003d1c:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
  }
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8003d50:	793b      	ldrb	r3, [r7, #4]
 8003d52:	737b      	strb	r3, [r7, #13]
 8003d54:	2300      	movs	r3, #0
 8003d56:	7b3a      	ldrb	r2, [r7, #12]
 8003d58:	f362 0307 	bfi	r3, r2, #0, #8
 8003d5c:	7b7a      	ldrb	r2, [r7, #13]
 8003d5e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fb03 	bl	8003382 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8003d94:	d305      	bcc.n	8003da2 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003d9c:	d201      	bcs.n	8003da2 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003dc0:	d305      	bcc.n	8003dce <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8003dc8:	d201      	bcs.n	8003dce <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffb9 	bl	8003d84 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	801a      	strh	r2, [r3, #0]
      return false;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e018      	b.n	8003e5a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffc0 	bl	8003db0 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	029a      	lsls	r2, r3, #10
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003e48:	461a      	mov	r2, r3
      codepoint_ =
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	605a      	str	r2, [r3, #4]
      return true;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e003      	b.n	8003e5a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]
    return true;
 8003e58:	2301      	movs	r3, #1
  }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
  }
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	2b2f      	cmp	r3, #47	@ 0x2f
 8003e88:	d904      	bls.n	8003e94 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b39      	cmp	r3, #57	@ 0x39
 8003e8e:	d801      	bhi.n	8003e94 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	ed87 0a00 	vstr	s0, [r7]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	e9c7 2300 	strd	r2, r3, [r7]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eea:	e9c1 2300 	strd	r2, r3, [r1]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	e9c7 2300 	strd	r2, r3, [r7]
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	ed87 0b00 	vstr	d0, [r7]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f32:	e9c1 2300 	strd	r2, r3, [r1]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3308      	adds	r3, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ffa3 	bl	8003ea2 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	ed87 0a00 	vstr	s0, [r7]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	ed97 0a00 	vldr	s0, [r7]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff99 	bl	8003eb8 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	e9c7 2300 	strd	r2, r3, [r7]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f103 0108 	add.w	r1, r3, #8
 8003fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fac:	4608      	mov	r0, r1
 8003fae:	f7ff ff93 	bl	8003ed8 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	e9c7 2300 	strd	r2, r3, [r7]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2203      	movs	r2, #3
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f103 0108 	add.w	r1, r3, #8
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	f7ff ff8f 	bl	8003efc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	ed87 0b00 	vstr	d0, [r7]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	ed97 0b00 	vldr	d0, [r7]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ff8c 	bl	8003f20 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
    return type_;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	781b      	ldrb	r3, [r3, #0]
  }
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	ee07 3a90 	vmov	s15, r3
  }
 8004072:	eeb0 0a67 	vmov.f32	s0, s15
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800408e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004092:	eeb0 0b47 	vmov.f64	d0, d7
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b0a6      	sub	sp, #152	@ 0x98
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80040aa:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 80040b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80040b8:	d008      	beq.n	80040cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 80040ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80040bc:	d10a      	bne.n	80040d4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 80040c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c6:	3301      	adds	r3, #1
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ca:	e003      	b.n	80040d4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 80040cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ce:	3301      	adds	r3, #1
 80040d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040d2:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 80040d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fece 	bl	8003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80040de:	4603      	mov	r3, r0
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 80040ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80040f0:	d001      	beq.n	80040f6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 80040fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80040fe:	f7ff ff21 	bl	8003f44 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8004102:	e1f5      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8004116:	f04f 32ff 	mov.w	r2, #4294967295
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8004122:	e054      	b.n	80041ce <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8004124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	3b30      	subs	r3, #48	@ 0x30
 800412a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 800412e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004132:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8004136:	49ae      	ldr	r1, [pc, #696]	@ (80043f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8004138:	418b      	sbcs	r3, r1
 800413a:	d251      	bcs.n	80041e0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 800413c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	0099      	lsls	r1, r3, #2
 800414e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004152:	0090      	lsls	r0, r2, #2
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	eb12 0804 	adds.w	r8, r2, r4
 800415c:	eb43 0905 	adc.w	r9, r3, r5
 8004160:	eb18 0308 	adds.w	r3, r8, r8
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	eb49 0309 	adc.w	r3, r9, r9
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004170:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8004174:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004178:	2200      	movs	r2, #0
 800417a:	643b      	str	r3, [r7, #64]	@ 0x40
 800417c:	647a      	str	r2, [r7, #68]	@ 0x44
 800417e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004182:	460b      	mov	r3, r1
 8004184:	43db      	mvns	r3, r3
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004188:	4613      	mov	r3, r2
 800418a:	43db      	mvns	r3, r3
 800418c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004192:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8004196:	4621      	mov	r1, r4
 8004198:	4291      	cmp	r1, r2
 800419a:	4629      	mov	r1, r5
 800419c:	eb71 0303 	sbcs.w	r3, r1, r3
 80041a0:	d320      	bcc.n	80041e4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 80041a2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80041a6:	2200      	movs	r2, #0
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80041ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80041b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041b4:	4621      	mov	r1, r4
 80041b6:	1851      	adds	r1, r2, r1
 80041b8:	6139      	str	r1, [r7, #16]
 80041ba:	4629      	mov	r1, r5
 80041bc:	414b      	adcs	r3, r1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80041c4:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 80041c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ca:	3301      	adds	r3, #1
 80041cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 80041ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe51 	bl	8003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1a2      	bne.n	8004124 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 80041de:	e002      	b.n	80041e6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 80041e4:	bf00      	nop
  }

  if (*s == '\0') {
 80041e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d136      	bne.n	800425c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 80041ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8004202:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004206:	2a01      	cmp	r2, #1
 8004208:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 800420c:	d226      	bcs.n	800425c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 800420e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004212:	2100      	movs	r1, #0
 8004214:	4250      	negs	r0, r2
 8004216:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004218:	eb61 0303 	sbc.w	r3, r1, r3
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800421e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004222:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004224:	f7ff feb4 	bl	8003f90 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8004228:	e162      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 800422a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800422e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004230:	f7ff fec4 	bl	8003fbc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8004234:	e15c      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8004236:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800423a:	f04f 020a 	mov.w	r2, #10
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f7fc fb7f 	bl	8000944 <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800424e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004252:	b29b      	uxth	r3, r3
 8004254:	3301      	adds	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 800425c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004264:	d2e7      	bcs.n	8004236 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004266:	e009      	b.n	800427c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8004268:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800426c:	b29b      	uxth	r3, r3
 800426e:	3301      	adds	r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8004276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004278:	3301      	adds	r3, #1
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800427c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fdfa 	bl	8003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ed      	bne.n	8004268 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 800428c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b2e      	cmp	r3, #46	@ 0x2e
 8004292:	d14c      	bne.n	800432e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8004294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004296:	3301      	adds	r3, #1
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800429a:	e040      	b.n	800431e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 800429c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80042a0:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 80042a4:	4953      	ldr	r1, [pc, #332]	@ (80043f4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 80042a6:	418b      	sbcs	r3, r1
 80042a8:	d236      	bcs.n	8004318 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 80042aa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	0099      	lsls	r1, r3, #2
 80042bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80042c0:	0090      	lsls	r0, r2, #2
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	eb12 0a04 	adds.w	sl, r2, r4
 80042ca:	eb43 0b05 	adc.w	fp, r3, r5
 80042ce:	eb1a 030a 	adds.w	r3, sl, sl
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	eb4b 030b 	adc.w	r3, fp, fp
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042de:	4652      	mov	r2, sl
 80042e0:	465b      	mov	r3, fp
 80042e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80042e4:	7809      	ldrb	r1, [r1, #0]
 80042e6:	3930      	subs	r1, #48	@ 0x30
 80042e8:	b2c9      	uxtb	r1, r1
 80042ea:	b2c9      	uxtb	r1, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	6239      	str	r1, [r7, #32]
 80042f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80042f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042f6:	4621      	mov	r1, r4
 80042f8:	1851      	adds	r1, r2, r1
 80042fa:	6039      	str	r1, [r7, #0]
 80042fc:	4629      	mov	r1, r5
 80042fe:	414b      	adcs	r3, r1
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004306:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 800430a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8004318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431a:	3301      	adds	r3, #1
 800431c:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800431e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fda9 	bl	8003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1b6      	bne.n	800429c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8004334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b65      	cmp	r3, #101	@ 0x65
 800433a:	d003      	beq.n	8004344 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 800433c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b45      	cmp	r3, #69	@ 0x45
 8004342:	d171      	bne.n	8004428 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8004344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004346:	3301      	adds	r3, #1
 8004348:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8004350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b2d      	cmp	r3, #45	@ 0x2d
 8004356:	d106      	bne.n	8004366 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800435e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004360:	3301      	adds	r3, #1
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004364:	e04f      	b.n	8004406 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8004366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b2b      	cmp	r3, #43	@ 0x2b
 800436c:	d14b      	bne.n	8004406 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 800436e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004370:	3301      	adds	r3, #1
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8004374:	e047      	b.n	8004406 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8004376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	461a      	mov	r2, r3
 8004384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3b30      	subs	r3, #48	@ 0x30
 800438a:	4413      	add	r3, r2
 800438c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8004390:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8004394:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004398:	4413      	add	r3, r2
 800439a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800439e:	dd2f      	ble.n	8004400 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 80043a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 80043a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 80043b0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80043f8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 80043b4:	e001      	b.n	80043ba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 80043b6:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80043fc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80043c0:	f7ff fdd1 	bl	8003f66 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 80043c4:	e094      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 80043c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 80043ce:	f000 fda7 	bl	8004f20 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 80043d2:	eeb0 7b40 	vmov.f64	d7, d0
 80043d6:	eeb1 7b47 	vneg.f64	d7, d7
 80043da:	e003      	b.n	80043e4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 80043dc:	f000 fda0 	bl	8004f20 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 80043e0:	eeb0 7b40 	vmov.f64	d7, d0
 80043e4:	eeb0 0b47 	vmov.f64	d0, d7
 80043e8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80043ea:	f7ff fdfd 	bl	8003fe8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80043ee:	e07f      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 80043f0:	19999999 	.word	0x19999999
 80043f4:	00019999 	.word	0x00019999
 80043f8:	80000000 	.word	0x80000000
 80043fc:	00000000 	.word	0x00000000
      }
      s++;
 8004400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004402:	3301      	adds	r3, #1
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8004406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fd35 	bl	8003e7a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1af      	bne.n	8004376 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8004416:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 800441e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004422:	425b      	negs	r3, r3
 8004424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8004428:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800442c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004430:	4413      	add	r3, r2
 8004432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8004436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 800443e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004440:	f7ff fd80 	bl	8003f44 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8004444:	e054      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8004446:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800444a:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 800444e:	db0a      	blt.n	8004466 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004454:	2b26      	cmp	r3, #38	@ 0x26
 8004456:	dc06      	bgt.n	8004466 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8004458:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800445c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004460:	f173 0300 	sbcs.w	r3, r3, #0
 8004464:	d301      	bcc.n	800446a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 800446a:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 800446c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01e      	beq.n	80044b6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8004478:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800447c:	f7fc f91e 	bl	80006bc <__aeabi_ul2d>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004488:	ec43 2b10 	vmov	d0, r2, r3
 800448c:	f000 fd56 	bl	8004f3c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8004490:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8004494:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 800449c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80044a0:	eeb1 7b47 	vneg.f64	d7, d7
 80044a4:	e001      	b.n	80044aa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 80044a6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80044aa:	eeb0 0b47 	vmov.f64	d0, d7
 80044ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044b0:	f7ff fd9a 	bl	8003fe8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80044b4:	e01c      	b.n	80044f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 80044b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80044ba:	f7fc f9fd 	bl	80008b8 <__aeabi_ul2f>
 80044be:	4603      	mov	r3, r0
 80044c0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80044c4:	ee00 3a10 	vmov	s0, r3
 80044c8:	f000 fd79 	bl	8004fbe <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 80044cc:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 80044d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 80044d8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80044dc:	eef1 7a67 	vneg.f32	s15, s15
 80044e0:	e001      	b.n	80044e6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 80044e2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80044e6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044ec:	f7ff fd3b 	bl	8003f66 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 80044f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044f2:	3798      	adds	r7, #152	@ 0x98
 80044f4:	46bd      	mov	sp, r7
 80044f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fa:	bf00      	nop

080044fc <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]
	configError(false)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1d1c      	adds	r4, r3, #4
 8004548:	f107 030c 	add.w	r3, r7, #12
 800454c:	4618      	mov	r0, r3
 800454e:	f01a ff2e 	bl	801f3ae <_ZNSaIcEC1Ev>
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	461a      	mov	r2, r3
 8004558:	4914      	ldr	r1, [pc, #80]	@ (80045ac <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 800455a:	4620      	mov	r0, r4
 800455c:	f000 fd70 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4618      	mov	r0, r3
 8004566:	f01a ff23 	bl	801f3b0 <_ZNSaIcED1Ev>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a10      	ldr	r2, [pc, #64]	@ (80045b0 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 800456e:	61da      	str	r2, [r3, #28]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f103 0420 	add.w	r4, r3, #32
 8004576:	f7fe f953 	bl	8002820 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 800457a:	4603      	mov	r3, r0
 800457c:	4619      	mov	r1, r3
 800457e:	4620      	mov	r0, r4
 8004580:	f7fe feeb 	bl	800335a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3360      	adds	r3, #96	@ 0x60
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fea8 	bl	80032de <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f80c 	bl	80045b4 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f82b 	bl	80045f8 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}
 80045ac:	08020dc4 	.word	0x08020dc4
 80045b0:	08020dc8 	.word	0x08020dc8

080045b4 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f01b f857 	bl	801f674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3320      	adds	r3, #32
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fee5 	bl	800339a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f903 	bl	80047dc <_ZN17JsonConfigHandler16readFileContentsEv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f083 0301 	eor.w	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e003      	b.n	80045ee <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f9c8 	bl	800497c <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 80045ec:	2301      	movs	r3, #1
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b0a1      	sub	sp, #132	@ 0x84
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 808e 	bne.w	8004728 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 800460c:	4848      	ldr	r0, [pc, #288]	@ (8004730 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 800460e:	f01b fcaf 	bl	801ff70 <puts>

    JsonArray Threads = doc["Threads"];
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f103 0120 	add.w	r1, r3, #32
 8004618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800461c:	4a45      	ldr	r2, [pc, #276]	@ (8004734 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd38 	bl	8005094 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fd49 	bl	80050c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	f107 021c 	add.w	r2, r7, #28
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fe1e 	bl	8003280 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8004644:	e05c      	b.n	8004700 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8004646:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800464a:	f107 0210 	add.w	r2, r7, #16
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fdbd 	bl	80031d0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8004656:	68fc      	ldr	r4, [r7, #12]
 8004658:	463b      	mov	r3, r7
 800465a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fd3f 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8004666:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800466a:	463a      	mov	r2, r7
 800466c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004670:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800467a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800467e:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fd3e 	bl	8005102 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004686:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd5e 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8004690:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800469c:	4a27      	ldr	r2, [pc, #156]	@ (800473c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fd60 	bl	8005164 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80046a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fd80 	bl	80051ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 80046ae:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 80046b0:	4923      	ldr	r1, [pc, #140]	@ (8004740 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 80046b2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80046b4:	f7fb fe14 	bl	80002e0 <strcmp>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 80046be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80046c0:	4820      	ldr	r0, [pc, #128]	@ (8004744 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 80046c2:	f01b fbe5 	bl	801fe90 <iprintf>
            remoraInstance->setBaseFreq(freq);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff15 	bl	80044fc <_ZN6Remora11setBaseFreqEm>
 80046d2:	e010      	b.n	80046f6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 80046d4:	491c      	ldr	r1, [pc, #112]	@ (8004748 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 80046d6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80046d8:	f7fb fe02 	bl	80002e0 <strcmp>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 80046e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80046e4:	4819      	ldr	r0, [pc, #100]	@ (800474c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 80046e6:	f01b fbd3 	bl	801fe90 <iprintf>
            remoraInstance->setServoFreq(freq);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff11 	bl	8004518 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fd8c 	bl	8003218 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8004700:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004704:	f107 021c 	add.w	r2, r7, #28
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fddb 	bl	80032c6 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8004710:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fd6c 	bl	80031f8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d18f      	bne.n	8004646 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8004726:	e000      	b.n	800472a <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8004728:	bf00      	nop
        }
    }
}
 800472a:	3784      	adds	r7, #132	@ 0x84
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}
 8004730:	08020dd4 	.word	0x08020dd4
 8004734:	08020df4 	.word	0x08020df4
 8004738:	08020dfc 	.word	0x08020dfc
 800473c:	08020e04 	.word	0x08020e04
 8004740:	08020e10 	.word	0x08020e10
 8004744:	08020e18 	.word	0x08020e18
 8004748:	08020e40 	.word	0x08020e40
 800474c:	08020e48 	.word	0x08020e48

08004750 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b08f      	sub	sp, #60	@ 0x3c
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f103 0120 	add.w	r1, r3, #32
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc94 	bl	8005094 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	637b      	str	r3, [r7, #52]	@ 0x34
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8004776:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004778:	f001 fc9a 	bl	80060b0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800477c:	4604      	mov	r4, r0
 800477e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004780:	f001 fca6 	bl	80060d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004784:	4602      	mov	r2, r0
 8004786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800478a:	4621      	mov	r1, r4
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fcb9 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8004792:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8004794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004798:	e893 0003 	ldmia.w	r3, {r0, r1}
 800479c:	f7fe fcdd 	bl	800315a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 80047a0:	4603      	mov	r3, r0
 80047a2:	bf00      	nop
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f103 0120 	add.w	r1, r3, #32
 80047ae:	f107 0318 	add.w	r3, r7, #24
 80047b2:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc6d 	bl	8005094 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f107 0218 	add.w	r2, r7, #24
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fcff 	bl	80051c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 80047c8:	e002      	b.n	80047d0 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe fd34 	bl	8003238 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	373c      	adds	r7, #60	@ 0x3c
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}
 80047d8:	08020e70 	.word	0x08020e70

080047dc <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 80047dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047e0:	b08f      	sub	sp, #60	@ 0x3c
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80047e6:	485a      	ldr	r0, [pc, #360]	@ (8004950 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 80047e8:	f01b fbc2 	bl	801ff70 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80047ec:	4859      	ldr	r0, [pc, #356]	@ (8004954 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80047ee:	f01b fbbf 	bl	801ff70 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80047f2:	2200      	movs	r2, #0
 80047f4:	4958      	ldr	r1, [pc, #352]	@ (8004958 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80047f6:	4859      	ldr	r0, [pc, #356]	@ (800495c <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80047f8:	f01a f974 	bl	801eae4 <f_mount>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 800480c:	4854      	ldr	r0, [pc, #336]	@ (8004960 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 800480e:	f01b fb3f 	bl	801fe90 <iprintf>
    	Error_Handler();
 8004812:	f003 fc4b 	bl	80080ac <Error_Handler>
 8004816:	e094      	b.n	8004942 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2201      	movs	r2, #1
 800481e:	4619      	mov	r1, r3
 8004820:	4850      	ldr	r0, [pc, #320]	@ (8004964 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004822:	f01a f9a5 	bl	801eb70 <f_open>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8004836:	484c      	ldr	r0, [pc, #304]	@ (8004968 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8004838:	f01b fb9a 	bl	801ff70 <puts>
			Error_Handler();
 800483c:	f003 fc36 	bl	80080ac <Error_Handler>
 8004840:	e07f      	b.n	8004942 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8004842:	466b      	mov	r3, sp
 8004844:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8004846:	4b47      	ldr	r3, [pc, #284]	@ (8004964 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 800484c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800484e:	4847      	ldr	r0, [pc, #284]	@ (800496c <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8004850:	f01b fb1e 	bl	801fe90 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8004854:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004856:	1e4b      	subs	r3, r1, #1
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485a:	460a      	mov	r2, r1
 800485c:	2300      	movs	r3, #0
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	460a      	mov	r2, r1
 8004878:	2300      	movs	r3, #0
 800487a:	4614      	mov	r4, r2
 800487c:	461d      	mov	r5, r3
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	00eb      	lsls	r3, r5, #3
 8004888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488c:	00e2      	lsls	r2, r4, #3
 800488e:	460b      	mov	r3, r1
 8004890:	3318      	adds	r3, #24
 8004892:	3307      	adds	r3, #7
 8004894:	08db      	lsrs	r3, r3, #3
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	ebad 0d03 	sub.w	sp, sp, r3
 800489c:	466b      	mov	r3, sp
 800489e:	331f      	adds	r3, #31
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	015b      	lsls	r3, r3, #5
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	f107 030c 	add.w	r3, r7, #12
 80048ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ae:	482d      	ldr	r0, [pc, #180]	@ (8004964 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80048b0:	f01a fb18 	bl	801eee4 <f_read>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 80048c4:	482a      	ldr	r0, [pc, #168]	@ (8004970 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 80048c6:	f01b fb53 	bl	801ff70 <puts>
 80048ca:	e036      	b.n	800493a <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 80048cc:	4829      	ldr	r0, [pc, #164]	@ (8004974 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 80048ce:	f01b fb4f 	bl	801ff70 <puts>
				jsonContent.reserve(length + 1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1d1a      	adds	r2, r3, #4
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	3301      	adds	r3, #1
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f01a feae 	bl	801f63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e6:	e01a      	b.n	800491e <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1d19      	adds	r1, r3, #4
 80048ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f0:	4413      	add	r3, r2
 80048f2:	781a      	ldrb	r2, [r3, #0]
 80048f4:	f107 0310 	add.w	r3, r7, #16
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fc88 	bl	800520e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3304      	adds	r3, #4
 8004902:	f107 0210 	add.w	r2, r7, #16
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f01a fe29 	bl	801f560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800490e:	f107 0310 	add.w	r3, r7, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f01a fe1e 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8004918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491a:	3301      	adds	r3, #1
 800491c:	637b      	str	r3, [r7, #52]	@ 0x34
 800491e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	429a      	cmp	r2, r3
 8004924:	dbe0      	blt.n	80048e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f01a fef2 	bl	801f714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004930:	4603      	mov	r3, r0
 8004932:	4619      	mov	r1, r3
 8004934:	4810      	ldr	r0, [pc, #64]	@ (8004978 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 8004936:	f01b faab 	bl	801fe90 <iprintf>
			f_close(&SDFile);
 800493a:	480a      	ldr	r0, [pc, #40]	@ (8004964 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 800493c:	f01a fc8f 	bl	801f25e <f_close>
 8004940:	46b5      	mov	sp, r6
    }

	return true;
 8004942:	2301      	movs	r3, #1
}
 8004944:	4618      	mov	r0, r3
 8004946:	373c      	adds	r7, #60	@ 0x3c
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800494e:	bf00      	nop
 8004950:	08020e78 	.word	0x08020e78
 8004954:	08020e9c 	.word	0x08020e9c
 8004958:	2400041c 	.word	0x2400041c
 800495c:	24000420 	.word	0x24000420
 8004960:	08020ebc 	.word	0x08020ebc
 8004964:	24000650 	.word	0x24000650
 8004968:	08020ed8 	.word	0x08020ed8
 800496c:	08020efc 	.word	0x08020efc
 8004970:	08020f20 	.word	0x08020f20
 8004974:	08020f40 	.word	0x08020f40
 8004978:	08020f60 	.word	0x08020f60

0800497c <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8004984:	482a      	ldr	r0, [pc, #168]	@ (8004a30 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8004986:	f01b faf3 	bl	801ff70 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3320      	adds	r3, #32
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fd03 	bl	800339a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f103 0420 	add.w	r4, r3, #32
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f01a feb8 	bl	801f714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4619      	mov	r1, r3
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 fc46 	bl	800523a <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 80049ae:	4603      	mov	r3, r0
 80049b0:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 80049b2:	4820      	ldr	r0, [pc, #128]	@ (8004a34 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 80049b4:	f01b fa6c 	bl	801fe90 <iprintf>

    switch (error.code())
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff f936 	bl	8003c2e <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d012      	beq.n	80049ee <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	dc18      	bgt.n	80049fe <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d004      	beq.n	80049de <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 80049d4:	e013      	b.n	80049fe <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 80049d6:	4818      	ldr	r0, [pc, #96]	@ (8004a38 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 80049d8:	f01b faca 	bl	801ff70 <puts>
            break;
 80049dc:	e023      	b.n	8004a26 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80049de:	4817      	ldr	r0, [pc, #92]	@ (8004a3c <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 80049e0:	f01b fac6 	bl	801ff70 <puts>
            configError = true;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80049ec:	e01b      	b.n	8004a26 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80049ee:	4814      	ldr	r0, [pc, #80]	@ (8004a40 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80049f0:	f01b fabe 	bl	801ff70 <puts>
            configError = true;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80049fc:	e013      	b.n	8004a26 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80049fe:	4811      	ldr	r0, [pc, #68]	@ (8004a44 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 8004a00:	f01b fa46 	bl	801fe90 <iprintf>
            printf(error.c_str());
 8004a04:	f107 030c 	add.w	r3, r7, #12
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff f91d 	bl	8003c48 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f01b fa3d 	bl	801fe90 <iprintf>
            printf("\n");
 8004a16:	200a      	movs	r0, #10
 8004a18:	f01b fa4c 	bl	801feb4 <putchar>
            configError = true;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8004a24:	bf00      	nop
    }

    return true;
 8004a26:	2301      	movs	r3, #1
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}
 8004a30:	08020f68 	.word	0x08020f68
 8004a34:	08020f8c 	.word	0x08020f8c
 8004a38:	08020fa8 	.word	0x08020fa8
 8004a3c:	08020fc4 	.word	0x08020fc4
 8004a40:	08020fd4 	.word	0x08020fd4
 8004a44:	08020fe8 	.word	0x08020fe8

08004a48 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004a54:	e002      	b.n	8004a5c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	72fa      	strb	r2, [r7, #11]
 8004a66:	f107 020b 	add.w	r2, r7, #11
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fbf7 	bl	8005260 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f083 0301 	eor.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1eb      	bne.n	8004a56 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
    }
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4611      	mov	r1, r2
 8004a94:	461a      	mov	r2, r3
 8004a96:	460b      	mov	r3, r1
 8004a98:	80fb      	strh	r3, [r7, #6]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	797b      	ldrb	r3, [r7, #5]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	f7fd ff3b 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	81fb      	strh	r3, [r7, #14]
 8004ac2:	e00b      	b.n	8004adc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	89fb      	ldrh	r3, [r7, #14]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fc40 	bl	8005356 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	81fb      	strh	r3, [r7, #14]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ae0:	89fa      	ldrh	r2, [r7, #14]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3ee      	bcc.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d00e      	beq.n	8004b1c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3304      	adds	r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6a12      	ldr	r2, [r2, #32]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	6838      	ldr	r0, [r7, #0]
 8004b0e:	4798      	blx	r3
      pools_ = preallocatedPools_;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004b44:	440b      	add	r3, r1
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fc2e 	bl	80053ae <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1a      	ldr	r2, [r3, #32]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d017      	beq.n	8004b8c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d011      	beq.n	8004b8c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6a11      	ldr	r1, [r2, #32]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004b78:	00d2      	lsls	r2, r2, #3
 8004b7a:	6838      	ldr	r0, [r7, #0]
 8004b7c:	4798      	blx	r3
 8004b7e:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fe fad0 	bl	8003142 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8004ba2:	4603      	mov	r3, r0
  }
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fe fa8d 	bl	80030d4 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 8004bba:	4603      	mov	r3, r0
  }
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fe fa8d 	bl	80030ec <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8004bd2:	4603      	mov	r3, r0
  }
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
  }
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
  }
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
    return id_;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	889b      	ldrh	r3, [r3, #4]
  }
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
  }
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	809a      	strh	r2, [r3, #4]
  }
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c82:	809a      	strh	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d005      	beq.n	8004cb6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fbda 	bl	8005468 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004cb4:	e02c      	b.n	8004d10 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fbec 	bl	80054a2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f822 	bl	8004d18 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ce6:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004cea:	e011      	b.n	8004d10 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	68b8      	ldr	r0, [r7, #8]
 8004cf0:	f000 fc14 	bl	800551c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004cf4:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fc49 	bl	8005594 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004d02:	e005      	b.n	8004d10 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fbca 	bl	80054a2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004d0e:	bf00      	nop
  }
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
  }
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
  }
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
    return id_;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	889b      	ldrh	r3, [r3, #4]
  }
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	809a      	strh	r2, [r3, #4]
  }
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004dbe:	1d3b      	adds	r3, r7, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fbf9 	bl	80055b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4622      	mov	r2, r4
 8004dca:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8004dcc:	1d3b      	adds	r3, r7, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ffbf 	bl	8004d52 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}

08004de4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e012      	b.n	8004e24 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8004dfe:	887b      	ldrh	r3, [r7, #2]
 8004e00:	09db      	lsrs	r3, r3, #7
 8004e02:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e0a:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	89ba      	ldrh	r2, [r7, #12]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fbd8 	bl	80055d0 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004e20:	4603      	mov	r3, r0
 8004e22:	bf00      	nop
  }
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e40:	809a      	strh	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	809a      	strh	r2, [r3, #4]
  }
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fbe6 	bl	800565c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004e90:	bf00      	nop
}
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fbe6 	bl	800567c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004eb0:	4603      	mov	r3, r0
  }
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	f7fd fd26 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fe f91f 	bl	800312a <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004eec:	4603      	mov	r3, r0
  }
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f000 fbf6 	bl	80056f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd fdea 	bl	8002ae2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	4903      	ldr	r1, [pc, #12]	@ (8004f38 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8004f2a:	f000 fc0d 	bl	8005748 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004f2e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004f32:	eeb0 0b47 	vmov.f64	d0, d7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	7ff00000 	.word	0x7ff00000

08004f3c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f46:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dd04      	ble.n	8004f58 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 8004f4e:	f000 fb51 	bl	80055f4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004f52:	4603      	mov	r3, r0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	e003      	b.n	8004f60 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004f58:	f000 fb70 	bl	800563c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc02      	bgt.n	8004f6c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	425b      	negs	r3, r3
 8004f6a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
 8004f70:	e019      	b.n	8004fa6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004f7c:	7dfa      	ldrb	r2, [r7, #23]
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fb45 	bl	8005614 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8004f8a:	eeb0 6b40 	vmov.f64	d6, d0
 8004f8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f96:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	105b      	asrs	r3, r3, #1
 8004f9e:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e2      	bne.n	8004f72 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	ed87 0a01 	vstr	s0, [r7, #4]
 8004fc8:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd04      	ble.n	8004fda <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004fd0:	f000 fbca 	bl	8005768 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	e003      	b.n	8004fe2 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004fda:	f000 fbd5 	bl	8005788 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dc02      	bgt.n	8004fee <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	425b      	negs	r3, r3
 8004fec:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e019      	b.n	8005028 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00e      	beq.n	800501c <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fbce 	bl	80057a8 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 800500c:	eeb0 7a40 	vmov.f32	s14, s0
 8005010:	edd7 7a01 	vldr	s15, [r7, #4]
 8005014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005018:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	105b      	asrs	r3, r3, #1
 8005020:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	3301      	adds	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e2      	bne.n	8004ff4 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	ee07 3a90 	vmov	s15, r3
}
 8005034:	eeb0 0a67 	vmov.f32	s0, s15
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 800504c:	68fc      	ldr	r4, [r7, #12]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f01a f9d6 	bl	801f400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8005054:	4603      	mov	r3, r0
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4619      	mov	r1, r3
 800505a:	4620      	mov	r0, r4
 800505c:	f01a fb5c 	bl	801f718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8005066:	480a      	ldr	r0, [pc, #40]	@ (8005090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8005068:	f01a f9a9 	bl	801f3be <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 800506c:	68b8      	ldr	r0, [r7, #8]
 800506e:	f7fd fb97 	bl	80027a0 <_ZNSt11char_traitsIcE6lengthEPKc>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4413      	add	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 800507a:	462b      	mov	r3, r5
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f922 	bl	80052ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bdb0      	pop	{r4, r5, r7, pc}
 8005090:	08021004 	.word	0x08021004

08005094 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	@ 0x28
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fb92 	bl	80057d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	cb0c      	ldmia	r3, {r2, r3}
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fb9c 	bl	80057f6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
    return as<T>();
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f876 	bl	80051c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 80050da:	bf00      	nop
  }
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
    return as<T>();
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb9b 	bl	800582e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 80050f8:	bf00      	nop
  }
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8005102:	b580      	push	{r7, lr}
 8005104:	b08c      	sub	sp, #48	@ 0x30
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005118:	e883 0003 	stmia.w	r3, {r0, r1}
 800511c:	f107 031c 	add.w	r3, r7, #28
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fba7 	bl	8005876 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8005128:	466a      	mov	r2, sp
 800512a:	f107 0320 	add.w	r3, r7, #32
 800512e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005132:	e882 0003 	stmia.w	r2, {r0, r1}
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f107 0214 	add.w	r2, r7, #20
 800513c:	ca06      	ldmia	r2, {r1, r2}
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f973 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	3728      	adds	r7, #40	@ 0x28
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
    return as<T>();
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fba1 	bl	800589c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 800515a:	4603      	mov	r3, r0
  }
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	f107 0314 	add.w	r3, r7, #20
 8005176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800517a:	e883 0003 	stmia.w	r3, {r0, r1}
 800517e:	f107 031c 	add.w	r3, r7, #28
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fbab 	bl	80058e0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800518a:	466a      	mov	r2, sp
 800518c:	f107 0320 	add.w	r3, r7, #32
 8005190:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005194:	e882 0003 	stmia.w	r2, {r0, r1}
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f107 0214 	add.w	r2, r7, #20
 800519e:	ca06      	ldmia	r2, {r1, r2}
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f942 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	3728      	adds	r7, #40	@ 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
    return as<T>();
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fba5 	bl	8005906 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 80051bc:	4603      	mov	r3, r0
  }
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80051c6:	b590      	push	{r4, r7, lr}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	f000 ff69 	bl	80060b0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 80051de:	4604      	mov	r4, r0
 80051e0:	6938      	ldr	r0, [r7, #16]
 80051e2:	f000 ff75 	bl	80060d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	4621      	mov	r1, r4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd ff88 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 80051f4:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f107 0308 	add.w	r3, r7, #8
 80051fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005200:	f7fe fc6e 	bl	8003ae0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8005204:	bf00      	nop
}
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}

0800520e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f01a fa97 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	461a      	mov	r2, r3
 8005228:	2101      	movs	r1, #1
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f01a fa68 	bl	801f700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8005230:	bf00      	nop
    }
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb80 	bl	800594a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800524a:	4602      	mov	r2, r0
 800524c:	463b      	mov	r3, r7
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fb85 	bl	8005960 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8005256:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f01a f8d2 	bl	801f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b088      	sub	sp, #32
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68b8      	ldr	r0, [r7, #8]
 80052dc:	f000 fb61 	bl	80059a2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80052e0:	4603      	mov	r3, r0
 80052e2:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d911      	bls.n	800530e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80052ea:	f107 0318 	add.w	r3, r7, #24
 80052ee:	2200      	movs	r2, #0
 80052f0:	4619      	mov	r1, r3
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f01a f894 	bl	801f420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4619      	mov	r1, r3
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f01a f87b 	bl	801f3f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4619      	mov	r1, r3
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f01a f87c 	bl	801f404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 800530c:	e005      	b.n	800531a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8005312:	69f8      	ldr	r0, [r7, #28]
 8005314:	f01a f874 	bl	801f400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8005318:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 800531a:	f107 0314 	add.w	r3, r7, #20
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ffb1 	bl	8005288 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f01a f868 	bl	801f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800532c:	4603      	mov	r3, r0
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f01a f8ea 	bl	801f50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	4619      	mov	r1, r3
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f01a f861 	bl	801f408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ffab 	bl	80052a6 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
    if (slots_)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6852      	ldr	r2, [r2, #4]
 8005374:	4611      	mov	r1, r2
 8005376:	6838      	ldr	r0, [r7, #0]
 8005378:	4798      	blx	r3
    slots_ = nullptr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	805a      	strh	r2, [r3, #2]
  }
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	00db      	lsls	r3, r3, #3
  }
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 80053ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	681c      	ldr	r4, [r3, #0]
 80053c0:	683d      	ldr	r5, [r7, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685e      	ldr	r6, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	885b      	ldrh	r3, [r3, #2]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ffe2 	bl	8005394 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47a0      	blx	r4
 80053da:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	885a      	ldrh	r2, [r3, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	801a      	strh	r2, [r3, #0]
  }
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053f8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	4638      	mov	r0, r7
 8005402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 800540c:	2300      	movs	r3, #0
 800540e:	e008      	b.n	8005422 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	463b      	mov	r3, r7
 8005418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800541a:	f000 fad6 	bl	80059ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800541e:	4603      	mov	r3, r0
 8005420:	bf00      	nop
  }
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800542a:	b082      	sub	sp, #8
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	1d38      	adds	r0, r7, #4
 8005436:	e880 0006 	stmia.w	r0, {r1, r2}
 800543a:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3304      	adds	r3, #4
 8005440:	1d3a      	adds	r2, r7, #4
 8005442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005446:	e883 0003 	stmia.w	r3, {r0, r1}
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	330c      	adds	r3, #12
 800544e:	f107 021c 	add.w	r2, r7, #28
 8005452:	ca07      	ldmia	r2, {r0, r1, r2}
 8005454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	b002      	add	sp, #8
 8005466:	4770      	bx	lr

08005468 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005476:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547c:	4619      	mov	r1, r3
 800547e:	6838      	ldr	r0, [r7, #0]
 8005480:	f7ff fcb0 	bl	8004de4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005484:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 800548e:	89fb      	ldrh	r3, [r7, #14]
 8005490:	461a      	mov	r2, r3
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fc75 	bl	8004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 80054a2:	b5b0      	push	{r4, r5, r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054b0:	3b01      	subs	r3, #1
 80054b2:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	441a      	add	r2, r3
 80054be:	f107 030c 	add.w	r3, r7, #12
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 faad 	bl	8005a24 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fc22 	bl	8004d18 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f857 	bl	8005594 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80054e6:	e015      	b.n	8005514 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f863 	bl	80055b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80054f2:	4605      	mov	r5, r0
 80054f4:	8afb      	ldrh	r3, [r7, #22]
 80054f6:	01db      	lsls	r3, r3, #7
 80054f8:	b29c      	uxth	r4, r3
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fc27 	bl	8004d52 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8005504:	4603      	mov	r3, r0
 8005506:	4423      	add	r3, r4
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	4629      	mov	r1, r5
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fc38 	bl	8004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bdb0      	pop	{r4, r5, r7, pc}

0800551c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800552e:	429a      	cmp	r2, r3
 8005530:	d10b      	bne.n	800554a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faa1 	bl	8005a7c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 800553a:	4603      	mov	r3, r0
 800553c:	f083 0301 	eor.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8005550:	2300      	movs	r3, #0
 8005552:	e01b      	b.n	800558c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800555c:	1c59      	adds	r1, r3, #1
 800555e:	b288      	uxth	r0, r1
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	8488      	strh	r0, [r1, #36]	@ 0x24
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005576:	d102      	bne.n	800557e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	3b01      	subs	r3, #1
 800557c:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	68b8      	ldr	r0, [r7, #8]
 8005586:	f000 fabe 	bl	8005b06 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 800558a:	68bb      	ldr	r3, [r7, #8]
  }
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055a8:	809a      	strh	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    return ptr_;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
  }
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	887b      	ldrh	r3, [r7, #2]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
  }
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	4904      	ldr	r1, [pc, #16]	@ (8005610 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 faa7 	bl	8005b52 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8005604:	687b      	ldr	r3, [r7, #4]
  }
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08021748 	.word	0x08021748

08005614 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 faa1 	bl	8005b70 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 800562e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005632:	eeb0 0b47 	vmov.f64	d0, d7
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	4904      	ldr	r1, [pc, #16]	@ (8005658 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa83 	bl	8005b52 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 800564c:	687b      	ldr	r3, [r7, #4]
  }
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	08021790 	.word	0x08021790

0800565c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8005668:	2300      	movs	r3, #0
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7fd f956 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 800567c:	b590      	push	{r4, r7, lr}
 800567e:	b089      	sub	sp, #36	@ 0x24
 8005680:	af02      	add	r7, sp, #8
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e01e      	b.n	80056cc <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f103 0108 	add.w	r1, r3, #8
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	88db      	ldrh	r3, [r3, #6]
 8005698:	461a      	mov	r2, r3
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fbea 	bl	8004e78 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	466c      	mov	r4, sp
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80056b8:	f000 fa6a 	bl	8005b90 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e006      	b.n	80056d4 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1dd      	bne.n	800568e <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 80056d2:	2300      	movs	r3, #0
  }
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd90      	pop	{r4, r7, pc}

080056dc <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80056e4:	687b      	ldr	r3, [r7, #4]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80056fa:	687b      	ldr	r3, [r7, #4]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa7f 	bl	8005c14 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8005716:	4603      	mov	r3, r0
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fa86 	bl	8005c2a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800571e:	4603      	mov	r3, r0
  }
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa6f 	bl	8005c14 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8005736:	4603      	mov	r3, r0
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fa82 	bl	8005c42 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800573e:	4603      	mov	r3, r0
  }
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005752:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005756:	f000 fa80 	bl	8005c5a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 800575a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800575e:	eeb0 0b47 	vmov.f64	d0, d7
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4904      	ldr	r1, [pc, #16]	@ (8005784 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fa85 	bl	8005c82 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005778:	687b      	ldr	r3, [r7, #4]
  }
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	080217d8 	.word	0x080217d8

08005788 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	4904      	ldr	r1, [pc, #16]	@ (80057a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fa75 	bl	8005c82 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005798:	687b      	ldr	r3, [r7, #4]
  }
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080217f0 	.word	0x080217f0

080057a8 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fa6f 	bl	8005ca0 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 80057c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80057c6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80057da:	6838      	ldr	r0, [r7, #0]
 80057dc:	f000 fa6f 	bl	8005cbe <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80057e0:	4602      	mov	r2, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa74 	bl	8005cd4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 80057ec:	bf00      	nop
}
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80057f6:	b082      	sub	sp, #8
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
 8005802:	f107 0110 	add.w	r1, r7, #16
 8005806:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	f107 0210 	add.w	r2, r7, #16
 8005818:	ca07      	ldmia	r2, {r0, r1, r2}
 800581a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	b002      	add	sp, #8
 800582c:	4770      	bx	lr

0800582e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800582e:	b590      	push	{r4, r7, lr}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f7ff ff71 	bl	8005728 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8005846:	4604      	mov	r4, r0
 8005848:	6938      	ldr	r0, [r7, #16]
 800584a:	f7ff ff5d 	bl	8005708 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800584e:	4602      	mov	r2, r0
 8005850:	f107 0308 	add.w	r3, r7, #8
 8005854:	4621      	mov	r1, r4
 8005856:	4618      	mov	r0, r3
 8005858:	f7fd fc54 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800585c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005868:	f7fe f95d 	bl	8003b26 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 800586c:	bf00      	nop
}
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}

08005876 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005880:	6838      	ldr	r0, [r7, #0]
 8005882:	f000 fa36 	bl	8005cf2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fa3b 	bl	8005d08 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8005892:	bf00      	nop
}
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80058ac:	6938      	ldr	r0, [r7, #16]
 80058ae:	f000 fcce 	bl	800624e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80058b2:	4604      	mov	r4, r0
 80058b4:	6938      	ldr	r0, [r7, #16]
 80058b6:	f000 fb58 	bl	8005f6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80058ba:	4602      	mov	r2, r0
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	4621      	mov	r1, r4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fd fbf3 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80058c8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058d2:	f7fe f8e5 	bl	8003aa0 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 80058d6:	4603      	mov	r3, r0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}

080058e0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80058ea:	6838      	ldr	r0, [r7, #0]
 80058ec:	f000 fa1b 	bl	8005d26 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fa20 	bl	8005d3c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 80058fc:	bf00      	nop
}
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8005906:	b590      	push	{r4, r7, lr}
 8005908:	b087      	sub	sp, #28
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8005916:	6938      	ldr	r0, [r7, #16]
 8005918:	f000 fc99 	bl	800624e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800591c:	4604      	mov	r4, r0
 800591e:	6938      	ldr	r0, [r7, #16]
 8005920:	f000 fb23 	bl	8005f6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8005924:	4602      	mov	r2, r0
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	4621      	mov	r1, r4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fd fbbe 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8005932:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800593c:	f000 fa0d 	bl	8005d5a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8005940:	4603      	mov	r3, r0
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}

0800594a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005952:	687b      	ldr	r3, [r7, #4]
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 800596a:	6838      	ldr	r0, [r7, #0]
 800596c:	f7ff feb6 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005970:	4603      	mov	r3, r0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa0f 	bl	8005d96 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8005978:	4604      	mov	r4, r0
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe f9a0 	bl	8003cc4 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8005984:	7a38      	ldrb	r0, [r7, #8]
 8005986:	f7fe f9df 	bl	8003d48 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800598a:	4603      	mov	r3, r0
 800598c:	81bb      	strh	r3, [r7, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4621      	mov	r1, r4
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa20 	bl	8005dd8 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8005998:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd90      	pop	{r4, r7, pc}

080059a2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80059a2:	b5b0      	push	{r4, r5, r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80059ac:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fa4a 	bl	8005e4a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80059b6:	462a      	mov	r2, r5
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fa4f 	bl	8005e5e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80059c0:	4603      	mov	r3, r0
    }
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bdb0      	pop	{r4, r5, r7, pc}

080059ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af02      	add	r7, sp, #8
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	4638      	mov	r0, r7
 80059d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 80059d8:	f107 0010 	add.w	r0, r7, #16
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	463b      	mov	r3, r7
 80059e6:	cb0c      	ldmia	r3, {r2, r3}
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	f000 fa47 	bl	8005e7c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80059ee:	f107 0310 	add.w	r3, r7, #16
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fd f892 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e00c      	b.n	8005a1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 8005a02:	f107 0310 	add.w	r3, r7, #16
 8005a06:	6a39      	ldr	r1, [r7, #32]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fd46 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 8005a0e:	f107 0310 	add.w	r3, r7, #16
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd f8b3 	bl	8002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	bf00      	nop
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
    if (!slots_)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d103      	bne.n	8005a3e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fdac 	bl	8005594 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005a3c:	e01a      	b.n	8005a74 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885a      	ldrh	r2, [r3, #2]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d303      	bcc.n	8005a52 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fda2 	bl	8005594 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005a50:	e010      	b.n	8005a74 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	885b      	ldrh	r3, [r3, #2]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	b291      	uxth	r1, r2
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	8051      	strh	r1, [r2, #2]
 8005a5e:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	89fb      	ldrh	r3, [r7, #14]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	89fa      	ldrh	r2, [r7, #14]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff f988 	bl	8004d84 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8e:	d101      	bne.n	8005a94 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e034      	b.n	8005afe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d114      	bne.n	8005ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	897a      	ldrh	r2, [r7, #10]
 8005aae:	00d2      	lsls	r2, r2, #3
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	6838      	ldr	r0, [r7, #0]
 8005ab4:	4798      	blx	r3
 8005ab6:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e01d      	b.n	8005afe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f01a fc1a 	bl	8020302 <memcpy>
 8005ace:	e00f      	b.n	8005af0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6a11      	ldr	r1, [r2, #32]
 8005adc:	897a      	ldrh	r2, [r7, #10]
 8005ade:	00d2      	lsls	r2, r2, #3
 8005ae0:	6838      	ldr	r0, [r7, #0]
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e006      	b.n	8005afe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	897a      	ldrh	r2, [r7, #10]
 8005afa:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8005afc:	2301      	movs	r3, #1
  }
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8005b06:	b5b0      	push	{r4, r5, r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681c      	ldr	r4, [r3, #0]
 8005b1a:	687d      	ldr	r5, [r7, #4]
 8005b1c:	897b      	ldrh	r3, [r7, #10]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fc38 	bl	8005394 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005b24:	4603      	mov	r3, r0
 8005b26:	4619      	mov	r1, r3
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47a0      	blx	r4
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8005b3a:	897a      	ldrh	r2, [r7, #10]
 8005b3c:	e000      	b.n	8005b40 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	805a      	strh	r2, [r3, #2]
  }
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bdb0      	pop	{r4, r5, r7, pc}

08005b52 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  return *p;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b82:	eeb0 0b47 	vmov.f64	d0, d7
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005b90:	b082      	sub	sp, #8
 8005b92:	b590      	push	{r4, r7, lr}
 8005b94:	b089      	sub	sp, #36	@ 0x24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	1d3c      	adds	r4, r7, #4
 8005b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fc fee4 	bl	8002970 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005ba8:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8005baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fc fede 	bl	8002970 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005bb4:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d001      	beq.n	8005bc2 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e021      	b.n	8005c06 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e019      	b.n	8005bfc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	69f9      	ldr	r1, [r7, #28]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fb f89b 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461c      	mov	r4, r3
 8005bd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005bda:	69f9      	ldr	r1, [r7, #28]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fb f893 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005be2:	4603      	mov	r3, r0
 8005be4:	429c      	cmp	r4, r3
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e007      	b.n	8005c06 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d3e1      	bcc.n	8005bc8 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3724      	adds	r7, #36	@ 0x24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005c10:	b002      	add	sp, #8
 8005c12:	4770      	bx	lr

08005c14 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8005c1c:	687b      	ldr	r3, [r7, #4]
  }
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fd fa79 	bl	800312a <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8005c38:	4603      	mov	r3, r0
  }
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
    return client.getData();
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fd fa79 	bl	8003142 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8005c50:	4603      	mov	r3, r0
  }
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8005c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c68:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8005c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c70:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c74:	eeb0 0b47 	vmov.f64	d0, d7
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  return *p;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	ee07 3a90 	vmov	s15, r3
}
 8005cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005cc6:	687b      	ldr	r3, [r7, #4]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005cde:	2301      	movs	r3, #1
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fc fe1b 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005cfa:	687b      	ldr	r3, [r7, #4]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005d12:	2301      	movs	r3, #1
 8005d14:	2206      	movs	r2, #6
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fc fe01 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005d2e:	687b      	ldr	r3, [r7, #4]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005d46:	2301      	movs	r3, #1
 8005d48:	2209      	movs	r2, #9
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fc fde7 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	463b      	mov	r3, r7
 8005d62:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005d66:	463b      	mov	r3, r7
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe ff1f 	bl	8004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005d6e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005d70:	463b      	mov	r3, r7
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe ff26 	bl	8004bc4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005d78:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f902 	bl	8005f8c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	e000      	b.n	8005d8e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8005d8c:	2300      	movs	r3, #0
  }
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fc9c 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005da4:	4603      	mov	r3, r0
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f99e 	bl	80060f0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd fd9e 	bl	800390a <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b0a1      	sub	sp, #132	@ 0x84
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f999 	bl	800611c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005dea:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8005dec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d107      	bne.n	8005e02 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8005df2:	f107 0318 	add.w	r3, r7, #24
 8005df6:	2104      	movs	r1, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd ff08 	bl	8003c0e <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005dfe:	7e3b      	ldrb	r3, [r7, #24]
 8005e00:	e01f      	b.n	8005e42 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f996 	bl	8006134 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005e08:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7fd fac5 	bl	800339a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8005e10:	f107 031c 	add.w	r3, r7, #28
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f997 	bl	800614c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8005e1e:	f107 001c 	add.w	r0, r7, #28
 8005e22:	797b      	ldrb	r3, [r7, #5]
 8005e24:	4622      	mov	r2, r4
 8005e26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e28:	f000 f9ac 	bl	8006184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8005e30:	f107 031c 	add.w	r3, r7, #28
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ffc2 	bl	8005dbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7fd ff97 	bl	8003d6e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8005e40:	7d3b      	ldrb	r3, [r7, #20]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3784      	adds	r7, #132	@ 0x84
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd90      	pop	{r4, r7, pc}

08005e4a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1ad3      	subs	r3, r2, r3
    }
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b08e      	sub	sp, #56	@ 0x38
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
 8005e88:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005e8c:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8005e90:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005e94:	f7fc fd5b 	bl	800294e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc fe2a 	bl	8002af8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005ea4:	e05a      	b.n	8005f5c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	f107 030c 	add.w	r3, r7, #12
 8005eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fd fb13 	bl	80034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005eba:	e041      	b.n	8005f40 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8005ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d025      	beq.n	8005f10 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fc fe4c 	bl	8002b66 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fc ff12 	bl	8002d00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005edc:	f107 0320 	add.w	r3, r7, #32
 8005ee0:	f107 0214 	add.w	r2, r7, #20
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f985 	bl	80061f6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8005eec:	466a      	mov	r2, sp
 8005eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ef2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ef6:	e882 0003 	stmia.w	r2, {r0, r1}
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005f00:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f02:	f7ff fe45 	bl	8005b90 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f22:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8005f26:	e019      	b.n	8005f5c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8005f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f2c:	f083 0301 	eor.w	r3, r3, #1
 8005f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd faad 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fc fde9 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f083 0301 	eor.w	r3, r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1b2      	bne.n	8005ebc <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc fdce 	bl	8002af8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	3730      	adds	r7, #48	@ 0x30
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f66:	b002      	add	sp, #8
 8005f68:	4770      	bx	lr

08005f6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f954 	bl	8006220 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f95b 	bl	8006236 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005f80:	4603      	mov	r3, r0
  }
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fd fe1d 	bl	8003bd8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005f9e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	2b1a      	cmp	r3, #26
 8005fa8:	d87c      	bhi.n	80060a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08006063 	.word	0x08006063
 8005fb4:	08006071 	.word	0x08006071
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	080060a5 	.word	0x080060a5
 8005fc0:	080060a5 	.word	0x080060a5
 8005fc4:	080060a5 	.word	0x080060a5
 8005fc8:	08006023 	.word	0x08006023
 8005fcc:	080060a5 	.word	0x080060a5
 8005fd0:	08006031 	.word	0x08006031
 8005fd4:	080060a5 	.word	0x080060a5
 8005fd8:	08006081 	.word	0x08006081
 8005fdc:	080060a5 	.word	0x080060a5
 8005fe0:	080060a5 	.word	0x080060a5
 8005fe4:	080060a5 	.word	0x080060a5
 8005fe8:	080060a5 	.word	0x080060a5
 8005fec:	080060a5 	.word	0x080060a5
 8005ff0:	080060a5 	.word	0x080060a5
 8005ff4:	080060a5 	.word	0x080060a5
 8005ff8:	080060a5 	.word	0x080060a5
 8005ffc:	080060a5 	.word	0x080060a5
 8006000:	080060a5 	.word	0x080060a5
 8006004:	080060a5 	.word	0x080060a5
 8006008:	0800603f 	.word	0x0800603f
 800600c:	080060a5 	.word	0x080060a5
 8006010:	08006051 	.word	0x08006051
 8006014:	080060a5 	.word	0x080060a5
 8006018:	08006093 	.word	0x08006093
        return content_.asBoolean;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	e041      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f921 	bl	800626e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 800602c:	4603      	mov	r3, r0
 800602e:	e03a      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f92b 	bl	8006290 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 800603a:	4603      	mov	r3, r0
 800603c:	e033      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	f000 f933 	bl	80062b2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 800604c:	4603      	mov	r3, r0
 800604e:	e02a      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	f000 f93d 	bl	80062d8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800605e:	4603      	mov	r3, r0
 8006060:	e021      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f949 	bl	80062fe <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 800606c:	4603      	mov	r3, r0
 800606e:	e01a      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f941 	bl	80062fe <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 800607c:	4603      	mov	r3, r0
 800607e:	e012      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	edd3 7a00 	vldr	s15, [r3]
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	f000 f94c 	bl	8006326 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 800608e:	4603      	mov	r3, r0
 8006090:	e009      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	ed93 7b00 	vldr	d7, [r3]
 8006098:	eeb0 0b47 	vmov.f64	d0, d7
 800609c:	f000 f95b 	bl	8006356 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	e000      	b.n	80060a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80060a4:	2300      	movs	r3, #0
  }
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f964 	bl	8006386 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80060be:	4603      	mov	r3, r0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f96b 	bl	800639c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 80060c6:	4603      	mov	r3, r0
  }
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f954 	bl	8006386 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80060de:	4603      	mov	r3, r0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f967 	bl	80063b4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80060e6:	4603      	mov	r3, r0
  }
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	e000      	b.n	8006106 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8006104:	4b04      	ldr	r3, [pc, #16]	@ (8006118 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	08020dc4 	.word	0x08020dc4

0800611c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fd f960 	bl	80033ea <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 800612a:	4603      	mov	r3, r0
  }
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fd f93d 	bl	80033bc <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8006142:	4603      	mov	r3, r0
  }
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	4618      	mov	r0, r3
 800615e:	f7fd fbbf 	bl	80038e0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3310      	adds	r3, #16
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f92c 	bl	80063cc <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	619a      	str	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b089      	sub	sp, #36	@ 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	713a      	strb	r2, [r7, #4]
 8006190:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8006192:	783b      	ldrb	r3, [r7, #0]
 8006194:	4622      	mov	r2, r4
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f929 	bl	80063f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800619e:	4603      	mov	r3, r0
 80061a0:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10f      	bne.n	80061c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3310      	adds	r3, #16
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fa0d 	bl	80065cc <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80061b8:	68b8      	ldr	r0, [r7, #8]
 80061ba:	f7fc fde8 	bl	8002d8e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 80061ce:	f107 0318 	add.w	r3, r7, #24
 80061d2:	2103      	movs	r1, #3
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fd fd1a 	bl	8003c0e <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 80061da:	7e3b      	ldrb	r3, [r7, #24]
 80061dc:	e007      	b.n	80061ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 80061de:	7dfa      	ldrb	r2, [r7, #23]
 80061e0:	f107 031c 	add.w	r3, r7, #28
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fd fd11 	bl	8003c0e <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 80061ec:	7f3b      	ldrb	r3, [r7, #28]
  }
 80061ee:	4618      	mov	r0, r3
 80061f0:	3724      	adds	r7, #36	@ 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd90      	pop	{r4, r7, pc}

080061f6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f000 f9ef 	bl	80065e4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8006206:	4603      	mov	r3, r0
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc fc6a 	bl	8002ae2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800620e:	4602      	mov	r2, r0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	ca07      	ldmia	r2, {r0, r1, r2}
 8006214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8006228:	687b      	ldr	r3, [r7, #4]
  }
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9db 	bl	80065fa <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8006244:	4603      	mov	r3, r0
  }
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ffe2 	bl	8006220 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 800625c:	4603      	mov	r3, r0
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f9d9 	bl	8006616 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8006264:	4603      	mov	r3, r0
  }
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9d9 	bl	800662e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	e000      	b.n	8006288 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9d9 	bl	8006650 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	e000      	b.n	80062aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80062bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c0:	f000 f9dc 	bl	800667c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	e000      	b.n	80062d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80062e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e6:	f000 f9e1 	bl	80066ac <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	e000      	b.n	80062f6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd fec7 	bl	80040a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8006312:	f107 0308 	add.w	r3, r7, #8
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f9e6 	bl	80066e8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 800631c:	4603      	mov	r3, r0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006330:	ed97 0a01 	vldr	s0, [r7, #4]
 8006334:	f000 fa1e 	bl	8006774 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 800633e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006346:	ee17 3a90 	vmov	r3, s15
 800634a:	e000      	b.n	800634e <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006360:	ed97 0b00 	vldr	d0, [r7]
 8006364:	f000 fa34 	bl	80067d0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 800636e:	ed97 7b00 	vldr	d7, [r7]
 8006372:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006376:	ee17 3a90 	vmov	r3, s15
 800637a:	e000      	b.n	800637e <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800638e:	687b      	ldr	r3, [r7, #4]
  }
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
    return client.getData();
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa39 	bl	800681c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 80063aa:	4603      	mov	r3, r0
  }
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa49 	bl	8006854 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 80063c2:	4603      	mov	r3, r0
  }
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	713a      	strb	r2, [r7, #4]
 80063fc:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fa36 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]
    if (err)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	e0d2      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fa62 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006418:	4603      	mov	r3, r0
 800641a:	2b7b      	cmp	r3, #123	@ 0x7b
 800641c:	f300 80ba 	bgt.w	8006594 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8006420:	2b5b      	cmp	r3, #91	@ 0x5b
 8006422:	da04      	bge.n	800642e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8006424:	2b22      	cmp	r3, #34	@ 0x22
 8006426:	d07b      	beq.n	8006520 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8006428:	2b27      	cmp	r3, #39	@ 0x27
 800642a:	d079      	beq.n	8006520 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800642c:	e0b2      	b.n	8006594 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800642e:	3b5b      	subs	r3, #91	@ 0x5b
 8006430:	2b20      	cmp	r3, #32
 8006432:	f200 80af 	bhi.w	8006594 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8006436:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	080064c1 	.word	0x080064c1
 8006440:	08006595 	.word	0x08006595
 8006444:	08006595 	.word	0x08006595
 8006448:	08006595 	.word	0x08006595
 800644c:	08006595 	.word	0x08006595
 8006450:	08006595 	.word	0x08006595
 8006454:	08006595 	.word	0x08006595
 8006458:	08006595 	.word	0x08006595
 800645c:	08006595 	.word	0x08006595
 8006460:	08006595 	.word	0x08006595
 8006464:	08006595 	.word	0x08006595
 8006468:	08006567 	.word	0x08006567
 800646c:	08006595 	.word	0x08006595
 8006470:	08006595 	.word	0x08006595
 8006474:	08006595 	.word	0x08006595
 8006478:	08006595 	.word	0x08006595
 800647c:	08006595 	.word	0x08006595
 8006480:	08006595 	.word	0x08006595
 8006484:	08006595 	.word	0x08006595
 8006488:	08006589 	.word	0x08006589
 800648c:	08006595 	.word	0x08006595
 8006490:	08006595 	.word	0x08006595
 8006494:	08006595 	.word	0x08006595
 8006498:	08006595 	.word	0x08006595
 800649c:	08006595 	.word	0x08006595
 80064a0:	08006545 	.word	0x08006545
 80064a4:	08006595 	.word	0x08006595
 80064a8:	08006595 	.word	0x08006595
 80064ac:	08006595 	.word	0x08006595
 80064b0:	08006595 	.word	0x08006595
 80064b4:	08006595 	.word	0x08006595
 80064b8:	08006595 	.word	0x08006595
 80064bc:	080064f1 	.word	0x080064f1
        if (filter.allowArray())
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd fbdd 	bl	8003c82 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f7fc fcdc 	bl	8002e8c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 80064d4:	4601      	mov	r1, r0
 80064d6:	783b      	ldrb	r3, [r7, #0]
 80064d8:	462a      	mov	r2, r5
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fa15 	bl	800690a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e069      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 80064e4:	7839      	ldrb	r1, [r7, #0]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa95 	bl	8006a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80064ec:	4603      	mov	r3, r0
 80064ee:	e063      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fd fbd0 	bl	8003c98 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7fc fcec 	bl	8002edc <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8006504:	4601      	mov	r1, r0
 8006506:	783b      	ldrb	r3, [r7, #0]
 8006508:	4622      	mov	r2, r4
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fac6 	bl	8006a9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8006510:	4603      	mov	r3, r0
 8006512:	e051      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8006514:	7839      	ldrb	r1, [r7, #0]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fbac 	bl	8006c74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800651c:	4603      	mov	r3, r0
 800651e:	e04b      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fbc3 	bl	8003cae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fc1f 	bl	8006d74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8006536:	4603      	mov	r3, r0
 8006538:	e03e      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fc3b 	bl	8006db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006540:	4603      	mov	r3, r0
 8006542:	e039      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	4618      	mov	r0, r3
 8006548:	f7fd fbb1 	bl	8003cae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8006552:	2101      	movs	r1, #1
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f7fc fc47 	bl	8002de8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800655a:	4919      	ldr	r1, [pc, #100]	@ (80065c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fc5f 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006562:	4603      	mov	r3, r0
 8006564:	e028      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7fd fba0 	bl	8003cae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8006574:	2100      	movs	r1, #0
 8006576:	68b8      	ldr	r0, [r7, #8]
 8006578:	f7fc fc36 	bl	8002de8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800657c:	4911      	ldr	r1, [pc, #68]	@ (80065c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fc4e 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006584:	4603      	mov	r3, r0
 8006586:	e017      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8006588:	490f      	ldr	r1, [pc, #60]	@ (80065c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fc48 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006590:	4603      	mov	r3, r0
 8006592:	e011      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fb89 	bl	8003cae <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fc61 	bl	8006e6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 80065aa:	4603      	mov	r3, r0
 80065ac:	e004      	b.n	80065b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fd04 	bl	8006fbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 80065b4:	4603      	mov	r3, r0
 80065b6:	bf00      	nop
  }
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bdb0      	pop	{r4, r5, r7, pc}
 80065c0:	08021038 	.word	0x08021038
 80065c4:	08021040 	.word	0x08021040
 80065c8:	08021048 	.word	0x08021048

080065cc <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
    return current_;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	791b      	ldrb	r3, [r3, #4]
  }
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80065ec:	687b      	ldr	r3, [r7, #4]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fcf6 	bl	8006ff8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 800660c:	4603      	mov	r3, r0
  }
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fd04 	bl	800702c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8006624:	4603      	mov	r3, r0
  }
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006636:	f000 f8c2 	bl	80067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800663a:	4602      	mov	r2, r0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4293      	cmp	r3, r2
 8006640:	bf94      	ite	ls
 8006642:	2301      	movls	r3, #1
 8006644:	2300      	movhi	r3, #0
 8006646:	b2db      	uxtb	r3, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	da01      	bge.n	8006662 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 800665e:	2300      	movs	r3, #0
 8006660:	e008      	b.n	8006674 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006662:	f000 f8ac 	bl	80067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006666:	4602      	mov	r2, r0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	bf2c      	ite	cs
 800666e:	2301      	movcs	r3, #1
 8006670:	2300      	movcc	r3, #0
 8006672:	b2db      	uxtb	r3, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800667c:	b5b0      	push	{r4, r5, r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006686:	f000 f89a 	bl	80067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800668a:	4603      	mov	r3, r0
 800668c:	2200      	movs	r2, #0
 800668e:	461c      	mov	r4, r3
 8006690:	4615      	mov	r5, r2
 8006692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006696:	4294      	cmp	r4, r2
 8006698:	eb75 0303 	sbcs.w	r3, r5, r3
 800669c:	bf2c      	ite	cs
 800669e:	2301      	movcs	r3, #1
 80066a0:	2300      	movcc	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bdb0      	pop	{r4, r5, r7, pc}

080066ac <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80066ac:	b5b0      	push	{r4, r5, r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 80066b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da01      	bge.n	80066c2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 80066be:	2300      	movs	r3, #0
 80066c0:	e00e      	b.n	80066e0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 80066c2:	f000 f87c 	bl	80067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2200      	movs	r2, #0
 80066ca:	461c      	mov	r4, r3
 80066cc:	4615      	mov	r5, r2
 80066ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d2:	4294      	cmp	r4, r2
 80066d4:	eb75 0303 	sbcs.w	r3, r5, r3
 80066d8:	bfac      	ite	ge
 80066da:	2301      	movge	r3, #1
 80066dc:	2300      	movlt	r3, #0
 80066de:	b2db      	uxtb	r3, r3
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bdb0      	pop	{r4, r5, r7, pc}

080066e8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d82e      	bhi.n	8006758 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006711 	.word	0x08006711
 8006704:	08006723 	.word	0x08006723
 8006708:	08006735 	.word	0x08006735
 800670c:	08006747 	.word	0x08006747
        return convertNumber<T>(value_.asFloat);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	edd3 7a02 	vldr	s15, [r3, #8]
 8006716:	eeb0 0a67 	vmov.f32	s0, s15
 800671a:	f7ff fe04 	bl	8006326 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 800671e:	4603      	mov	r3, r0
 8006720:	e01b      	b.n	800675a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f7ff fdd4 	bl	80062d8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8006730:	4603      	mov	r3, r0
 8006732:	e012      	b.n	800675a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	f7ff fdb8 	bl	80062b2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8006742:	4603      	mov	r3, r0
 8006744:	e009      	b.n	800675a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	ed93 7b02 	vldr	d7, [r3, #8]
 800674c:	eeb0 0b47 	vmov.f64	d0, d7
 8006750:	f7ff fe01 	bl	8006356 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8006754:	4603      	mov	r3, r0
 8006756:	e000      	b.n	800675a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8006758:	2300      	movs	r3, #0
  }
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop

08006764 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
    return 0;
 8006768:	2300      	movs	r3, #0
  }
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800677e:	f7ff fff1 	bl	8006764 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006782:	ee07 0a90 	vmov	s15, r0
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	ed97 7a01 	vldr	s14, [r7, #4]
 800678e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006796:	db0d      	blt.n	80067b4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8006798:	2000      	movs	r0, #0
 800679a:	f000 fc63 	bl	8007064 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 800679e:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 80067a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80067a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ae:	d801      	bhi.n	80067b4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 80067be:	b480      	push	{r7}
 80067c0:	af00      	add	r7, sp, #0
    return T(-1);
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80067c6:	4618      	mov	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 80067da:	f7ff ffc3 	bl	8006764 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 80067de:	ee07 0a90 	vmov	s15, r0
 80067e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80067e6:	ed97 6b00 	vldr	d6, [r7]
 80067ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f2:	db0e      	blt.n	8006812 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80067f4:	f7ff ffe3 	bl	80067be <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80067f8:	ee07 0a90 	vmov	s15, r0
 80067fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8006800:	ed97 6b00 	vldr	d6, [r7]
 8006804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680c:	d801      	bhi.n	8006812 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b085      	sub	sp, #20
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fc2b 	bl	8007084 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 800682e:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fc7d 	bl	8006134 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 800683a:	4602      	mov	r2, r0
    return VariantData::getMember(
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	9200      	str	r2, [sp, #0]
 8006840:	3304      	adds	r3, #4
 8006842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006844:	4620      	mov	r0, r4
 8006846:	f000 fc29 	bl	800709c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800684a:	4603      	mov	r3, r0
  }
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}

08006854 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fc67 	bl	8006134 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8006866:	4603      	mov	r3, r0
  }
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f82f 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d013      	beq.n	80068ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8006884:	2b00      	cmp	r3, #0
 8006886:	db1d      	blt.n	80068c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006888:	2b20      	cmp	r3, #32
 800688a:	dc1b      	bgt.n	80068c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800688c:	2b09      	cmp	r3, #9
 800688e:	db19      	blt.n	80068c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006890:	3b09      	subs	r3, #9
 8006892:	4a11      	ldr	r2, [pc, #68]	@ (80068d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d108      	bne.n	80068bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 80068aa:	e00b      	b.n	80068c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 80068b4:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 80068b6:	e00b      	b.n	80068d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80068b8:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 80068ba:	e009      	b.n	80068d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc06 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 80068c2:	e004      	b.n	80068ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 80068ce:	e7d3      	b.n	8006878 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	00800013 	.word	0x00800013

080068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3310      	adds	r3, #16
 80068e8:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	795b      	ldrb	r3, [r3, #5]
 80068ee:	f083 0301 	eor.w	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 ff1a 	bl	8007732 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	791b      	ldrb	r3, [r3, #4]
  }
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800690a:	b590      	push	{r4, r7, lr}
 800690c:	b089      	sub	sp, #36	@ 0x24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	713a      	strb	r2, [r7, #4]
 8006916:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8006918:	463b      	mov	r3, r7
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd fa03 	bl	8003d26 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8006926:	2305      	movs	r3, #5
 8006928:	e071      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fbcf 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff9d 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006936:	4603      	mov	r3, r0
 8006938:	77fb      	strb	r3, [r7, #31]
    if (err)
 800693a:	7ffb      	ldrb	r3, [r7, #31]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8006940:	7ffb      	ldrb	r3, [r7, #31]
 8006942:	e064      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8006944:	215d      	movs	r1, #93	@ 0x5d
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fbce 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8006952:	2300      	movs	r3, #0
 8006954:	e05b      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	f107 0214 	add.w	r2, r7, #20
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fbdd 	bl	8007122 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd f97d 	bl	8003c6c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01c      	beq.n	80069b2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	4619      	mov	r1, r3
 800697e:	68b8      	ldr	r0, [r7, #8]
 8006980:	f7fc fd3f 	bl	8003402 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8006984:	61b8      	str	r0, [r7, #24]
        if (!value)
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800698c:	2304      	movs	r3, #4
 800698e:	e03e      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8006990:	463b      	mov	r3, r7
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd f9b4 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006998:	4603      	mov	r3, r0
 800699a:	4622      	mov	r2, r4
 800699c:	69b9      	ldr	r1, [r7, #24]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fd26 	bl	80063f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80069a4:	4603      	mov	r3, r0
 80069a6:	77fb      	strb	r3, [r7, #31]
        if (err)
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d011      	beq.n	80069d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80069ae:	7ffb      	ldrb	r3, [r7, #31]
 80069b0:	e02d      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 80069b2:	463b      	mov	r3, r7
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fd f9a3 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4619      	mov	r1, r3
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fbbc 	bl	800713c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80069c4:	4603      	mov	r3, r0
 80069c6:	77fb      	strb	r3, [r7, #31]
        if (err)
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80069ce:	7ffb      	ldrb	r3, [r7, #31]
 80069d0:	e01d      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff ff4c 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80069d8:	4603      	mov	r3, r0
 80069da:	77fb      	strb	r3, [r7, #31]
      if (err)
 80069dc:	7ffb      	ldrb	r3, [r7, #31]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80069e2:	7ffb      	ldrb	r3, [r7, #31]
 80069e4:	e013      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80069e6:	215d      	movs	r1, #93	@ 0x5d
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fb7d 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e00a      	b.n	8006a0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80069f8:	212c      	movs	r1, #44	@ 0x2c
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fb74 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f083 0301 	eor.w	r3, r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ad      	beq.n	8006968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8006a0c:	2303      	movs	r3, #3
  }
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3724      	adds	r7, #36	@ 0x24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}

08006a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006a20:	463b      	mov	r3, r7
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd f97f 	bl	8003d26 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006a2e:	2305      	movs	r3, #5
 8006a30:	e030      	b.n	8006a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb4b 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8006a38:	463b      	mov	r3, r7
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd f960 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006a40:	4603      	mov	r3, r0
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fb79 	bl	800713c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	e01d      	b.n	8006a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff ff09 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	e013      	b.n	8006a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 8006a6c:	215d      	movs	r1, #93	@ 0x5d
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fb3a 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e00a      	b.n	8006a94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 8006a7e:	212c      	movs	r1, #44	@ 0x2c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb31 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f083 0301 	eor.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0d2      	beq.n	8006a38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8006a92:	2303      	movs	r3, #3
  }
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b091      	sub	sp, #68	@ 0x44
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	713a      	strb	r2, [r7, #4]
 8006aa8:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8006aaa:	463b      	mov	r3, r7
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fd f93a 	bl	8003d26 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8006ab8:	2305      	movs	r3, #5
 8006aba:	e0d7      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fb06 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fed4 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 8006ace:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8006ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ada:	e0c7      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8006adc:	217d      	movs	r1, #125	@ 0x7d
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fb02 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e0be      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fbba 	bl	8007268 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006afa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 8006b02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b06:	e0b1      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff feb1 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8006b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b20:	e0a4      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 8006b22:	213a      	movs	r1, #58	@ 0x3a
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fadf 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e098      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fc ff92 	bl	8003a6c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8006b48:	f107 0214 	add.w	r2, r7, #20
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fba9 	bl	80072a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8006b56:	f107 0310 	add.w	r3, r7, #16
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd f886 	bl	8003c6c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d040      	beq.n	8006be8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8006b66:	f107 0320 	add.w	r3, r7, #32
 8006b6a:	f107 0214 	add.w	r2, r7, #20
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe f9c0 	bl	8004ef6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	f107 0320 	add.w	r3, r7, #32
 8006b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f7fe ff21 	bl	80059ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006b88:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d111      	bne.n	8006bb4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fc fee6 	bl	8003964 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006b98:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	68b8      	ldr	r0, [r7, #8]
 8006ba4:	f000 fb8c 	bl	80072c0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8006ba8:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 8006baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	e05b      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006bbc:	f7fc ffd6 	bl	8003b6c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd f89c 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	4622      	mov	r2, r4
 8006bcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fc0e 	bl	80063f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8006bda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8006be2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006be6:	e041      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 8006be8:	463b      	mov	r3, r7
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd f888 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 faa1 	bl	800713c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8006c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8006c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c0c:	e02e      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff fe2e 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 8006c22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c26:	e021      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 8006c28:	217d      	movs	r1, #125	@ 0x7d
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa5c 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e018      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8006c3a:	212c      	movs	r1, #44	@ 0x2c
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fa53 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f083 0301 	eor.w	r3, r3, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e00c      	b.n	8006c6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff fe0c 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f43f af43 	beq.w	8006aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8006c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	373c      	adds	r7, #60	@ 0x3c
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd90      	pop	{r4, r7, pc}

08006c74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd f850 	bl	8003d26 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006c8c:	2305      	movs	r3, #5
 8006c8e:	e06d      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa1c 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fdea 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	e060      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8006caa:	217d      	movs	r1, #125	@ 0x7d
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa1b 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e057      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fb54 	bl	800736a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	e04d      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff fdcd 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	e043      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8006ce4:	213a      	movs	r1, #58	@ 0x3a
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9fe 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f083 0301 	eor.w	r3, r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e037      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fc fffe 	bl	8003d00 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006d04:	4603      	mov	r3, r0
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa17 	bl	800713c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	e027      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fda7 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006d22:	4603      	mov	r3, r0
 8006d24:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	e01d      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8006d30:	217d      	movs	r1, #125	@ 0x7d
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9d8 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e014      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8006d42:	212c      	movs	r1, #44	@ 0x2c
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f9cf 	bl	80070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f083 0301 	eor.w	r3, r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e008      	b.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fd88 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0a8      	beq.n	8006cbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
  }
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fc fdd7 	bl	8003934 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb0b 	bl	80073a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	e009      	b.n	8006dae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fc fde1 	bl	8003964 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4619      	mov	r1, r3
 8006da6:	6838      	ldr	r0, [r7, #0]
 8006da8:	f7fc f83f 	bl	8002e2a <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8006dac:	2300      	movs	r3, #0
  }
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff fd8c 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
    move();
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f980 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fd84 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]
      move();
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f978 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8006dde:	7bba      	ldrb	r2, [r7, #14]
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d016      	beq.n	8006e14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8006dec:	2302      	movs	r3, #2
 8006dee:	e013      	b.n	8006e18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006df4:	d1eb      	bne.n	8006dce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fd70 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0e0      	beq.n	8006dce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f95e 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8006e12:	e7dc      	b.n	8006dce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8006e14:	bf00      	nop
    return DeserializationError::Ok;
 8006e16:	2300      	movs	r3, #0
  }
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
    while (*s) {
 8006e2a:	e016      	b.n	8006e5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fd55 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e011      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d001      	beq.n	8006e4e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e00a      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	603b      	str	r3, [r7, #0]
      move();
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f93a 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e4      	bne.n	8006e2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 8006e62:	2300      	movs	r3, #0
  }
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fd2e 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006e84:	e00f      	b.n	8006ea6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f921 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8006e8c:	7fba      	ldrb	r2, [r7, #30]
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	77f9      	strb	r1, [r7, #31]
 8006e94:	4619      	mov	r1, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	440b      	add	r3, r1
 8006e9a:	771a      	strb	r2, [r3, #28]
      c = current();
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fd1d 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006ea6:	7fbb      	ldrb	r3, [r7, #30]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fafb 	bl	80074a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006eb4:	7ffb      	ldrb	r3, [r7, #31]
 8006eb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb8:	d801      	bhi.n	8006ebe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e0      	bne.n	8006e86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8006ec4:	7ffb      	ldrb	r3, [r7, #31]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f103 021c 	add.w	r2, r3, #28
 8006ed4:	f107 0308 	add.w	r3, r7, #8
 8006ed8:	4611      	mov	r1, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fd f8e0 	bl	80040a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fd f894 	bl	8004012 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8006eea:	4603      	mov	r3, r0
 8006eec:	3b01      	subs	r3, #1
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d85e      	bhi.n	8006fb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8006ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f59 	.word	0x08006f59
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f09 	.word	0x08006f09
 8006f04:	08006f85 	.word	0x08006f85
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8006f08:	f107 0308 	add.w	r3, r7, #8
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fd f89a 	bl	8004046 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	6989      	ldr	r1, [r1, #24]
 8006f1a:	9100      	str	r1, [sp, #0]
 8006f1c:	6838      	ldr	r0, [r7, #0]
 8006f1e:	f000 fae5 	bl	80074ec <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e042      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	e040      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 8006f30:	f107 0308 	add.w	r3, r7, #8
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd f878 	bl	800402a <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	6989      	ldr	r1, [r1, #24]
 8006f42:	9100      	str	r1, [sp, #0]
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f000 fb13 	bl	8007570 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e02e      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006f54:	2304      	movs	r3, #4
 8006f56:	e02c      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fd f880 	bl	8004062 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 8006f62:	eef0 7a40 	vmov.f32	s15, s0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f70:	6838      	ldr	r0, [r7, #0]
 8006f72:	f000 fb3f 	bl	80075f4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e018      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006f80:	2304      	movs	r3, #4
 8006f82:	e016      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd f879 	bl	8004080 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8006f8e:	eeb0 7b40 	vmov.f64	d7, d0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	4619      	mov	r1, r3
 8006f98:	eeb0 0b47 	vmov.f64	d0, d7
 8006f9c:	6838      	ldr	r0, [r7, #0]
 8006f9e:	f000 fb3d 	bl	800761c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e002      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006fac:	2304      	movs	r3, #4
 8006fae:	e000      	b.n	8006fb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8006fb0:	2303      	movs	r3, #3
  }
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop

08006fbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
    char c = current();
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff fc89 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006fce:	e007      	b.n	8006fe0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f87c 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fc80 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fa5e 	bl	80074a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8006fee:	2300      	movs	r3, #0
  }
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fc f990 	bl	8003326 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8007006:	4603      	mov	r3, r0
  }
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb4c 	bl	80076b6 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 800701e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007022:	eeb0 0a67 	vmov.f32	s0, s15
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b085      	sub	sp, #20
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb4c 	bl	80076d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800703e:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff ffd7 	bl	8006ff8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 800704a:	4602      	mov	r2, r0
    return VariantData::getMember(
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	9200      	str	r2, [sp, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007054:	4620      	mov	r0, r4
 8007056:	f000 f821 	bl	800709c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800705a:	4603      	mov	r3, r0
  }
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bd90      	pop	{r4, r7, pc}

08007064 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 800706c:	4804      	ldr	r0, [pc, #16]	@ (8007080 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 800706e:	f7ff ffcf 	bl	8007010 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8007072:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007076:	eeb0 0a67 	vmov.f32	s0, s15
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	4f7fffff 	.word	0x4f7fffff

08007084 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    return client.getData();
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fc f9a0 	bl	80033d2 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8007092:	4603      	mov	r3, r0
  }
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	4638      	mov	r0, r7
 80070a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e008      	b.n	80070c6 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	463b      	mov	r3, r7
 80070bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070be:	f000 fb16 	bl	80076ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 80070c2:	4603      	mov	r3, r0
 80070c4:	bf00      	nop
  }
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
    latch_.clear();
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3310      	adds	r3, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fb1c 	bl	8007718 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fbf1 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	4293      	cmp	r3, r2
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 800710e:	2300      	movs	r3, #0
 8007110:	e003      	b.n	800711a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff ffdb 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8007118:	2301      	movs	r3, #1
  }
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800712c:	bf00      	nop
  }
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fb92 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	e07c      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fbbe 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007160:	4603      	mov	r3, r0
 8007162:	2b7b      	cmp	r3, #123	@ 0x7b
 8007164:	dc71      	bgt.n	800724a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8007166:	2b5b      	cmp	r3, #91	@ 0x5b
 8007168:	da04      	bge.n	8007174 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 800716a:	2b22      	cmp	r3, #34	@ 0x22
 800716c:	d056      	beq.n	800721c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800716e:	2b27      	cmp	r3, #39	@ 0x27
 8007170:	d054      	beq.n	800721c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8007172:	e06a      	b.n	800724a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8007174:	3b5b      	subs	r3, #91	@ 0x5b
 8007176:	2b20      	cmp	r3, #32
 8007178:	d867      	bhi.n	800724a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800717a:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	08007205 	.word	0x08007205
 8007184:	0800724b 	.word	0x0800724b
 8007188:	0800724b 	.word	0x0800724b
 800718c:	0800724b 	.word	0x0800724b
 8007190:	0800724b 	.word	0x0800724b
 8007194:	0800724b 	.word	0x0800724b
 8007198:	0800724b 	.word	0x0800724b
 800719c:	0800724b 	.word	0x0800724b
 80071a0:	0800724b 	.word	0x0800724b
 80071a4:	0800724b 	.word	0x0800724b
 80071a8:	0800724b 	.word	0x0800724b
 80071ac:	08007233 	.word	0x08007233
 80071b0:	0800724b 	.word	0x0800724b
 80071b4:	0800724b 	.word	0x0800724b
 80071b8:	0800724b 	.word	0x0800724b
 80071bc:	0800724b 	.word	0x0800724b
 80071c0:	0800724b 	.word	0x0800724b
 80071c4:	0800724b 	.word	0x0800724b
 80071c8:	0800724b 	.word	0x0800724b
 80071cc:	0800723f 	.word	0x0800723f
 80071d0:	0800724b 	.word	0x0800724b
 80071d4:	0800724b 	.word	0x0800724b
 80071d8:	0800724b 	.word	0x0800724b
 80071dc:	0800724b 	.word	0x0800724b
 80071e0:	0800724b 	.word	0x0800724b
 80071e4:	08007227 	.word	0x08007227
 80071e8:	0800724b 	.word	0x0800724b
 80071ec:	0800724b 	.word	0x0800724b
 80071f0:	0800724b 	.word	0x0800724b
 80071f4:	0800724b 	.word	0x0800724b
 80071f8:	0800724b 	.word	0x0800724b
 80071fc:	0800724b 	.word	0x0800724b
 8007200:	08007211 	.word	0x08007211
        return skipArray(nestingLimit);
 8007204:	7839      	ldrb	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fc05 	bl	8006a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800720c:	4603      	mov	r3, r0
 800720e:	e021      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8007210:	7839      	ldrb	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fd2e 	bl	8006c74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8007218:	4603      	mov	r3, r0
 800721a:	e01b      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fdca 	bl	8006db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8007222:	4603      	mov	r3, r0
 8007224:	e016      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8007226:	490d      	ldr	r1, [pc, #52]	@ (800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fdf9 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 800722e:	4603      	mov	r3, r0
 8007230:	e010      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8007232:	490b      	ldr	r1, [pc, #44]	@ (8007260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fdf3 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 800723a:	4603      	mov	r3, r0
 800723c:	e00a      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800723e:	4909      	ldr	r1, [pc, #36]	@ (8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fded 	bl	8006e20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007246:	4603      	mov	r3, r0
 8007248:	e004      	b.n	8007254 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff feb6 	bl	8006fbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007250:	4603      	mov	r3, r0
 8007252:	bf00      	nop
  }
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	08021038 	.word	0x08021038
 8007260:	08021040 	.word	0x08021040
 8007264:	08021048 	.word	0x08021048

08007268 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fb5e 	bl	8003934 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff fb2f 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800727e:	4603      	mov	r3, r0
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fa6c 	bl	800775e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f888 	bl	80073a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8007292:	4603      	mov	r3, r0
 8007294:	e004      	b.n	80072a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa75 	bl	8007786 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 800729c:	4603      	mov	r3, r0
 800729e:	bf00      	nop
  }
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 80072b2:	bf00      	nop
  }
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	@ 0x28
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 80072cc:	f107 0318 	add.w	r3, r7, #24
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fc f9de 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 80072d8:	f107 0318 	add.w	r3, r7, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fd fc7d 	bl	8004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f083 0301 	eor.w	r3, r3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e037      	b.n	8007362 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80072f2:	f107 0310 	add.w	r3, r7, #16
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fc f9cb 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80072fe:	f107 0310 	add.w	r3, r7, #16
 8007302:	4618      	mov	r0, r3
 8007304:	f7fd fc6a 	bl	8004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8007308:	4603      	mov	r3, r0
 800730a:	f083 0301 	eor.w	r3, r3, #1
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8007314:	2300      	movs	r3, #0
 8007316:	e024      	b.n	8007362 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8007318:	f107 0318 	add.w	r3, r7, #24
 800731c:	4618      	mov	r0, r3
 800731e:	f7fd fc86 	bl	8004c2e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8007322:	4603      	mov	r3, r0
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	4618      	mov	r0, r3
 800732a:	f7fb fd6f 	bl	8002e0c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 800732e:	4603      	mov	r3, r0
 8007330:	f083 0301 	eor.w	r3, r3, #1
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 800733a:	2300      	movs	r3, #0
 800733c:	e011      	b.n	8007362 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f107 0218 	add.w	r2, r7, #24
 800734e:	ca06      	ldmia	r2, {r1, r2}
 8007350:	f7fc f919 	bl	8003586 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007354:	f107 0310 	add.w	r3, r7, #16
 8007358:	4618      	mov	r0, r3
 800735a:	f7fd fc50 	bl	8004bfe <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800735e:	4603      	mov	r3, r0
 8007360:	bf00      	nop
}
 8007362:	4618      	mov	r0, r3
 8007364:	3720      	adds	r7, #32
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fab2 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007378:	4603      	mov	r3, r0
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f9ef 	bl	800775e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fd15 	bl	8006db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800738c:	4603      	mov	r3, r0
 800738e:	e004      	b.n	800739a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa31 	bl	80077f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8007396:	4603      	mov	r3, r0
 8007398:	bf00      	nop
  }
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fc fd14 	bl	8003ddc <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff fa91 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75bb      	strb	r3, [r7, #22]
    move();
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fe85 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fa89 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
      move();
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff fe7d 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 80073d4:	7dfa      	ldrb	r2, [r7, #23]
 80073d6:	7dbb      	ldrb	r3, [r7, #22]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d051      	beq.n	8007480 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 80073e2:	2302      	movs	r3, #2
 80073e4:	e05a      	b.n	800749c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80073ea:	d140      	bne.n	800746e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fa75 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e04d      	b.n	800749c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b75      	cmp	r3, #117	@ 0x75
 8007404:	d125      	bne.n	8007452 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fe61 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 800740c:	f107 030a 	add.w	r3, r7, #10
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa0e 	bl	8007834 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8007418:	4603      	mov	r3, r0
 800741a:	757b      	strb	r3, [r7, #21]
          if (err)
 800741c:	7d7b      	ldrb	r3, [r7, #21]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8007422:	7d7b      	ldrb	r3, [r7, #21]
 8007424:	e03a      	b.n	800749c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8007426:	897a      	ldrh	r2, [r7, #10]
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc fce5 	bl	8003dfe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d020      	beq.n	800747c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	4618      	mov	r0, r3
 8007440:	f7fc fd0f 	bl	8003e62 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8007444:	4602      	mov	r2, r0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f000 fa2b 	bl	80078a6 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8007450:	e7b8      	b.n	80073c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	4618      	mov	r0, r3
 8007456:	f7fc fa0c 	bl	8003872 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 800745a:	4603      	mov	r3, r0
 800745c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8007464:	2303      	movs	r3, #3
 8007466:	e019      	b.n	800749c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fe30 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7dfa      	ldrb	r2, [r7, #23]
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f7fc fab6 	bl	80039e6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 800747a:	e7a3      	b.n	80073c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 800747c:	bf00      	nop
    for (;;) {
 800747e:	e7a1      	b.n	80073c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8007480:	bf00      	nop
    if (!stringBuilder_.isValid())
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fc fae0 	bl	8003a4a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800748a:	4603      	mov	r3, r0
 800748c:	f083 0301 	eor.w	r3, r3, #1
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8007496:	2304      	movs	r3, #4
 8007498:	e000      	b.n	800749c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800749a:	2300      	movs	r3, #0
  }
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	2239      	movs	r2, #57	@ 0x39
 80074b2:	2130      	movs	r1, #48	@ 0x30
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fa7a 	bl	80079ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 80074ba:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10e      	bne.n	80074de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b2b      	cmp	r3, #43	@ 0x2b
 80074c4:	d00b      	beq.n	80074de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80074ca:	d008      	beq.n	80074de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80074d0:	d005      	beq.n	80074de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	2b65      	cmp	r3, #101	@ 0x65
 80074d6:	d002      	beq.n	80074de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b45      	cmp	r3, #69	@ 0x45
 80074dc:	d101      	bne.n	80074e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 80074e2:	2300      	movs	r3, #0
  }
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 80074f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074fc:	f7ff f8be 	bl	800667c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	220a      	movs	r2, #10
 800750a:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e028      	b.n	8007566 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800751a:	4618      	mov	r0, r3
 800751c:	f7fc f93f 	bl	800379e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fa5c 	bl	80079e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800752a:	4603      	mov	r3, r0
 800752c:	f083 0301 	eor.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8007536:	2300      	movs	r3, #0
 8007538:	e016      	b.n	8007568 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	221a      	movs	r2, #26
 800753e:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007540:	f107 0310 	add.w	r3, r7, #16
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fa5d 	bl	8007a04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8007552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa5e 	bl	8007a1c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007560:	4603      	mov	r3, r0
 8007562:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8007566:	2301      	movs	r3, #1
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bdb0      	pop	{r4, r5, r7, pc}

08007570 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007570:	b5b0      	push	{r4, r5, r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 800757c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007580:	f000 fa58 	bl	8007a34 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	220c      	movs	r2, #12
 800758e:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e028      	b.n	80075ea <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8007598:	f107 0310 	add.w	r3, r7, #16
 800759c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fc f8fd 	bl	800379e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fa1a 	bl	80079e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f083 0301 	eor.w	r3, r3, #1
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e016      	b.n	80075ec <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	221c      	movs	r2, #28
 80075c2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 80075c4:	f107 0310 	add.w	r3, r7, #16
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fa1b 	bl	8007a04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 80075d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075da:	f107 0310 	add.w	r3, r7, #16
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fa1c 	bl	8007a1c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80075e4:	4603      	mov	r3, r0
 80075e6:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 80075ea:	2301      	movs	r3, #1
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bdb0      	pop	{r4, r5, r7, pc}

080075f4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007600:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	220e      	movs	r2, #14
 8007606:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	601a      	str	r2, [r3, #0]
    return true;
 800760e:	2301      	movs	r3, #1
  }
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 800761c:	b5b0      	push	{r4, r5, r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	ed87 0b00 	vstr	d0, [r7]
 8007628:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 800762a:	ed97 7b00 	vldr	d7, [r7]
 800762e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007632:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8007636:	edd7 7a07 	vldr	s15, [r7, #28]
 800763a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800763e:	ed97 6b00 	vldr	d6, [r7]
 8007642:	eeb4 6b47 	vcmp.f64	d6, d7
 8007646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764a:	d106      	bne.n	800765a <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	220e      	movs	r2, #14
 8007650:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e028      	b.n	80076ac <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fc f89c 	bl	800379e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007666:	f107 0314 	add.w	r3, r7, #20
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f9b9 	bl	80079e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007670:	4603      	mov	r3, r0
 8007672:	f083 0301 	eor.w	r3, r3, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 800767c:	2300      	movs	r3, #0
 800767e:	e016      	b.n	80076ae <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	221e      	movs	r2, #30
 8007684:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f9ba 	bl	8007a04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8007698:	e9d7 4500 	ldrd	r4, r5, [r7]
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f9bb 	bl	8007a1c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80076a6:	4603      	mov	r3, r0
 80076a8:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 80076ac:	2301      	movs	r3, #1
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bdb0      	pop	{r4, r5, r7, pc}

080076b6 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	ee07 3a90 	vmov	s15, r3
}
 80076c8:	eeb0 0a67 	vmov.f32	s0, s15
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fb fe2d 	bl	800333e <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 80076e4:	4603      	mov	r3, r0
  }
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af02      	add	r7, sp, #8
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	4638      	mov	r0, r7
 80076f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7fb faf3 	bl	8002ce8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	463b      	mov	r3, r7
 8007708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800770a:	f7fd fe75 	bl	80053f8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 800770e:	4603      	mov	r3, r0
  }
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	715a      	strb	r2, [r3, #5]
  }
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 f99f 	bl	8007a80 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8007742:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800774a:	b2da      	uxtb	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	715a      	strb	r2, [r3, #5]
  }
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	4603      	mov	r3, r0
 8007766:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	2b27      	cmp	r3, #39	@ 0x27
 800776c:	d002      	beq.n	8007774 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	2b22      	cmp	r3, #34	@ 0x22
 8007772:	d101      	bne.n	8007778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8007778:	2300      	movs	r3, #0
  }
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
    char c = current();
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff f8a4 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f980 	bl	8007aa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d015      	beq.n	80077d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fc91 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7bfa      	ldrb	r2, [r7, #15]
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fc f917 	bl	80039e6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff f88f 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f96b 	bl	8007aa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1ea      	bne.n	80077a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 80077d0:	e001      	b.n	80077d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e00c      	b.n	80077f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fc f936 	bl	8003a4a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 80077de:	4603      	mov	r3, r0
 80077e0:	f083 0301 	eor.w	r3, r3, #1
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 80077ea:	2304      	movs	r3, #4
 80077ec:	e000      	b.n	80077f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80077ee:	2300      	movs	r3, #0
  }
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
    char c = current();
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff f86b 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800780a:	e007      	b.n	800781c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fc5e 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff f862 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f93e 	bl	8007aa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 800782a:	2300      	movs	r3, #0
  }
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
    result = 0;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2200      	movs	r2, #0
 8007842:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e025      	b.n	8007896 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff f846 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800785a:	2302      	movs	r3, #2
 800785c:	e01f      	b.n	800789e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f944 	bl	8007aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8007866:	4603      	mov	r3, r0
 8007868:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800786a:	7b7b      	ldrb	r3, [r7, #13]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d901      	bls.n	8007874 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8007870:	2303      	movs	r3, #3
 8007872:	e014      	b.n	800789e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	b21a      	sxth	r2, r3
 800787c:	7b7b      	ldrb	r3, [r7, #13]
 800787e:	b21b      	sxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b21b      	sxth	r3, r3
 8007884:	b29a      	uxth	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	801a      	strh	r2, [r3, #0]
      move();
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fc1f 	bl	80070ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	3301      	adds	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d9d6      	bls.n	800784a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800789c:	2300      	movs	r3, #0
  }
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80078b4:	d806      	bhi.n	80078c4 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	6838      	ldr	r0, [r7, #0]
 80078be:	f7fc f892 	bl	80039e6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 80078c2:	e070      	b.n	80079a6 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 80078c4:	f107 030c 	add.w	r3, r7, #12
 80078c8:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	617a      	str	r2, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078e2:	b2d9      	uxtb	r1, r3
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	617a      	str	r2, [r7, #20]
 80078ea:	460a      	mov	r2, r1
 80078ec:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	099b      	lsrs	r3, r3, #6
 80078f2:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80078f4:	8a7b      	ldrh	r3, [r7, #18]
 80078f6:	2b1f      	cmp	r3, #31
 80078f8:	d80a      	bhi.n	8007910 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 80078fa:	8a7b      	ldrh	r3, [r7, #18]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8007902:	b2d9      	uxtb	r1, r3
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	617a      	str	r2, [r7, #20]
 800790a:	460a      	mov	r2, r1
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e03e      	b.n	800798e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8007910:	8a7b      	ldrh	r3, [r7, #18]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800791e:	b2d9      	uxtb	r1, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	617a      	str	r2, [r7, #20]
 8007926:	460a      	mov	r2, r1
 8007928:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800792a:	8a7b      	ldrh	r3, [r7, #18]
 800792c:	099b      	lsrs	r3, r3, #6
 800792e:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 8007930:	8a7b      	ldrh	r3, [r7, #18]
 8007932:	2b0f      	cmp	r3, #15
 8007934:	d80a      	bhi.n	800794c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 8007936:	8a7b      	ldrh	r3, [r7, #18]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f063 031f 	orn	r3, r3, #31
 800793e:	b2d9      	uxtb	r1, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	617a      	str	r2, [r7, #20]
 8007946:	460a      	mov	r2, r1
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e020      	b.n	800798e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800794c:	8a7b      	ldrh	r3, [r7, #18]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800795a:	b2d9      	uxtb	r1, r3
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	617a      	str	r2, [r7, #20]
 8007962:	460a      	mov	r2, r1
 8007964:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8007966:	8a7b      	ldrh	r3, [r7, #18]
 8007968:	099b      	lsrs	r3, r3, #6
 800796a:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800796c:	8a7b      	ldrh	r3, [r7, #18]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f063 030f 	orn	r3, r3, #15
 8007974:	b2d9      	uxtb	r1, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	617a      	str	r2, [r7, #20]
 800797c:	460a      	mov	r2, r1
 800797e:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8007980:	e005      	b.n	800798e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	6838      	ldr	r0, [r7, #0]
 800798a:	f7fc f82c 	bl	80039e6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	3b01      	subs	r3, #1
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf14      	ite	ne
 800799c:	2301      	movne	r3, #1
 800799e:	2300      	moveq	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1ed      	bne.n	8007982 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	4603      	mov	r3, r0
 80079b6:	71fb      	strb	r3, [r7, #7]
 80079b8:	460b      	mov	r3, r1
 80079ba:	71bb      	strb	r3, [r7, #6]
 80079bc:	4613      	mov	r3, r2
 80079be:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 80079c0:	79ba      	ldrb	r2, [r7, #6]
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d805      	bhi.n	80079d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 80079c8:	79fa      	ldrb	r2, [r7, #7]
 80079ca:	797b      	ldrb	r3, [r7, #5]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d801      	bhi.n	80079d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 80079d4:	2300      	movs	r3, #0
  }
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bf14      	ite	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	2300      	moveq	r3, #0
 80079f6:	b2db      	uxtb	r3, r3
  }
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
    return id_;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	889b      	ldrh	r3, [r3, #4]
  }
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
  }
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007a34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007a40:	f000 f86e 	bl	8007b20 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8007a44:	4603      	mov	r3, r0
 8007a46:	17da      	asrs	r2, r3, #31
 8007a48:	4698      	mov	r8, r3
 8007a4a:	4691      	mov	r9, r2
 8007a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a50:	4542      	cmp	r2, r8
 8007a52:	eb73 0309 	sbcs.w	r3, r3, r9
 8007a56:	db0d      	blt.n	8007a74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8007a58:	f000 f86b 	bl	8007b32 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	17da      	asrs	r2, r3, #31
 8007a60:	461c      	mov	r4, r3
 8007a62:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a68:	4294      	cmp	r4, r2
 8007a6a:	eb75 0303 	sbcs.w	r3, r5, r3
 8007a6e:	db01      	blt.n	8007a74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007a80 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	1c59      	adds	r1, r3, #1
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
  }
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	2239      	movs	r2, #57	@ 0x39
 8007aae:	2130      	movs	r1, #48	@ 0x30
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff ff7c 	bl	80079ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d111      	bne.n	8007ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	227a      	movs	r2, #122	@ 0x7a
 8007ac0:	215f      	movs	r1, #95	@ 0x5f
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff ff73 	bl	80079ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	225a      	movs	r2, #90	@ 0x5a
 8007ad2:	2141      	movs	r1, #65	@ 0x41
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff ff6a 	bl	80079ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007ada:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 8007ae4:	2300      	movs	r3, #0
  }
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	4603      	mov	r3, r0
 8007af6:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b40      	cmp	r3, #64	@ 0x40
 8007afc:	d803      	bhi.n	8007b06 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	3b30      	subs	r3, #48	@ 0x30
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	e006      	b.n	8007b14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f023 0320 	bic.w	r3, r3, #32
 8007b0c:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	3b37      	subs	r3, #55	@ 0x37
 8007b12:	b2db      	uxtb	r3, r3
  }
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8007b24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8007b28:	4618      	mov	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 8007b32:	b580      	push	{r7, lr}
 8007b34:	af00      	add	r7, sp, #0
    return T(~lowest());
 8007b36:	f7ff fff3 	bl	8007b20 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	43db      	mvns	r3, r3
  }
 8007b3e:	4618      	mov	r0, r3
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8007b4c:	1d39      	adds	r1, r7, #4
 8007b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b52:	2201      	movs	r2, #1
 8007b54:	4803      	ldr	r0, [pc, #12]	@ (8007b64 <__io_putchar+0x20>)
 8007b56:	f013 f906 	bl	801ad66 <HAL_UART_Transmit>
	  return ch;
 8007b5a:	687b      	ldr	r3, [r7, #4]
	}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	24000374 	.word	0x24000374

08007b68 <main>:
}

int main(void)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
	MPU_Config();
 8007b6e:	f000 fa55 	bl	800801c <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 8007b72:	f00a fe57 	bl	8012824 <HAL_Init>
	SystemClock_Config();
 8007b76:	f000 f867 	bl	8007c48 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8007b7a:	f000 f92f 	bl	8007ddc <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007b7e:	f3bf 8f4f 	dsb	sy
}
 8007b82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b84:	f3bf 8f6f 	isb	sy
}
 8007b88:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8007b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <main+0xd8>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007b92:	f3bf 8f4f 	dsb	sy
}
 8007b96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b98:	f3bf 8f6f 	isb	sy
}
 8007b9c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8007b9e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007ba0:	4b27      	ldr	r3, [pc, #156]	@ (8007c40 <main+0xd8>)
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d11b      	bne.n	8007bee <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8007bb6:	f3bf 8f4f 	dsb	sy
}
 8007bba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bbc:	f3bf 8f6f 	isb	sy
}
 8007bc0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c40 <main+0xd8>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007bca:	f3bf 8f4f 	dsb	sy
}
 8007bce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bd0:	f3bf 8f6f 	isb	sy
}
 8007bd4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c40 <main+0xd8>)
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	4a19      	ldr	r2, [pc, #100]	@ (8007c40 <main+0xd8>)
 8007bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007be2:	f3bf 8f4f 	dsb	sy
}
 8007be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007be8:	f3bf 8f6f 	isb	sy
}
 8007bec:	e000      	b.n	8007bf0 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007bee:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 8007bf0:	4b14      	ldr	r3, [pc, #80]	@ (8007c44 <main+0xdc>)
 8007bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bf6:	4a13      	ldr	r2, [pc, #76]	@ (8007c44 <main+0xdc>)
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007c00:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <main+0xdc>)
 8007c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 8007c0e:	f000 f9a9 	bl	8007f64 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8007c12:	f000 f947 	bl	8007ea4 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8007c16:	f000 f919 	bl	8007e4c <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8007c1a:	f014 ff89 	bl	801cb30 <MX_FATFS_Init>

	Remora *remora = new Remora();
 8007c1e:	2034      	movs	r0, #52	@ 0x34
 8007c20:	f017 fbb4 	bl	801f38c <_Znwj>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461c      	mov	r4, r3
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fe27 	bl	800887c <_ZN6RemoraC1Ev>
 8007c2e:	607c      	str	r4, [r7, #4]
	remora->run();
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f85f 	bl	8008cf4 <_ZN6Remora3runEv>
}
 8007c36:	2300      	movs	r3, #0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd90      	pop	{r4, r7, pc}
 8007c40:	e000ed00 	.word	0xe000ed00
 8007c44:	58024400 	.word	0x58024400

08007c48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b09e      	sub	sp, #120	@ 0x78
 8007c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c52:	224c      	movs	r2, #76	@ 0x4c
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f018 fa84 	bl	8020164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	2220      	movs	r2, #32
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f018 fa7d 	bl	8020164 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007c6a:	2002      	movs	r0, #2
 8007c6c:	f00d fd60 	bl	8015730 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c70:	2300      	movs	r3, #0
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	4b56      	ldr	r3, [pc, #344]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	4a55      	ldr	r2, [pc, #340]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c80:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	4b52      	ldr	r3, [pc, #328]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	4a51      	ldr	r2, [pc, #324]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c94:	6193      	str	r3, [r2, #24]
 8007c96:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c9e:	60bb      	str	r3, [r7, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007ca2:	bf00      	nop
 8007ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb0:	bf14      	ite	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	2300      	moveq	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1f3      	bne.n	8007ca4 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cbc:	4b46      	ldr	r3, [pc, #280]	@ (8007dd8 <_Z18SystemClock_Configv+0x190>)
 8007cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cc2:	4a45      	ldr	r2, [pc, #276]	@ (8007dd8 <_Z18SystemClock_Configv+0x190>)
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ccc:	4b42      	ldr	r3, [pc, #264]	@ (8007dd8 <_Z18SystemClock_Configv+0x190>)
 8007cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4b3d      	ldr	r3, [pc, #244]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce8:	6193      	str	r3, [r2, #24]
 8007cea:	4b3a      	ldr	r3, [pc, #232]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4b36      	ldr	r3, [pc, #216]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	4a35      	ldr	r2, [pc, #212]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d00:	4b33      	ldr	r3, [pc, #204]	@ (8007dd0 <_Z18SystemClock_Configv+0x188>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007d0c:	bf00      	nop
 8007d0e:	4b31      	ldr	r3, [pc, #196]	@ (8007dd4 <_Z18SystemClock_Configv+0x18c>)
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f3      	bne.n	8007d0e <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007d26:	4b2c      	ldr	r3, [pc, #176]	@ (8007dd8 <_Z18SystemClock_Configv+0x190>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd8 <_Z18SystemClock_Configv+0x190>)
 8007d30:	f043 0302 	orr.w	r3, r3, #2
 8007d34:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d36:	2301      	movs	r3, #1
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d40:	2302      	movs	r3, #2
 8007d42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d44:	2302      	movs	r3, #2
 8007d46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007d48:	2305      	movs	r3, #5
 8007d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007d4c:	23c0      	movs	r3, #192	@ 0xc0
 8007d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007d50:	2302      	movs	r3, #2
 8007d52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007d54:	2304      	movs	r3, #4
 8007d56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f00d fd19 	bl	80157a4 <HAL_RCC_OscConfig>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8007d82:	f000 f993 	bl	80080ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d86:	233f      	movs	r3, #63	@ 0x3f
 8007d88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007d92:	2308      	movs	r3, #8
 8007d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007d96:	2340      	movs	r3, #64	@ 0x40
 8007d98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007d9a:	2340      	movs	r3, #64	@ 0x40
 8007d9c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007da4:	2340      	movs	r3, #64	@ 0x40
 8007da6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007da8:	f107 030c 	add.w	r3, r7, #12
 8007dac:	2104      	movs	r1, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f00e f952 	bl	8016058 <HAL_RCC_ClockConfig>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bf14      	ite	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	2300      	moveq	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8007dc4:	f000 f972 	bl	80080ac <Error_Handler>
  }
}
 8007dc8:	bf00      	nop
 8007dca:	3778      	adds	r7, #120	@ 0x78
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58000400 	.word	0x58000400
 8007dd4:	58024800 	.word	0x58024800
 8007dd8:	58024400 	.word	0x58024400

08007ddc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b0b0      	sub	sp, #192	@ 0xc0
 8007de0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007de2:	463b      	mov	r3, r7
 8007de4:	22c0      	movs	r2, #192	@ 0xc0
 8007de6:	2100      	movs	r1, #0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f018 f9bb 	bl	8020164 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8007dee:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8007dfe:	230c      	movs	r3, #12
 8007e00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8007e06:	230a      	movs	r3, #10
 8007e08:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8007e0e:	23c0      	movs	r3, #192	@ 0xc0
 8007e10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007e12:	2320      	movs	r3, #32
 8007e14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8007e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007e1e:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8007e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e26:	463b      	mov	r3, r7
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f00e fca1 	bl	8016770 <HAL_RCCEx_PeriphCLKConfig>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bf14      	ite	ne
 8007e34:	2301      	movne	r3, #1
 8007e36:	2300      	moveq	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8007e3e:	f000 f935 	bl	80080ac <Error_Handler>
  }
}
 8007e42:	bf00      	nop
 8007e44:	37c0      	adds	r7, #192	@ 0xc0
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007e50:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e52:	4a12      	ldr	r2, [pc, #72]	@ (8007e9c <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8007e54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007e56:	4b10      	ldr	r3, [pc, #64]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007e62:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e6a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e74:	2208      	movs	r2, #8
 8007e76:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8007e78:	4807      	ldr	r0, [pc, #28]	@ (8007e98 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007e7a:	f011 f977 	bl	801916c <HAL_SD_Init>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf14      	ite	ne
 8007e84:	2301      	movne	r3, #1
 8007e86:	2300      	moveq	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8007e8e:	4804      	ldr	r0, [pc, #16]	@ (8007ea0 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8007e90:	f018 f86e 	bl	801ff70 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8007e94:	bf00      	nop
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	240002f8 	.word	0x240002f8
 8007e9c:	52007000 	.word	0x52007000
 8007ea0:	08021050 	.word	0x08021050

08007ea4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8007f60 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8007eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 8007eae:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007eb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007eb6:	4b29      	ldr	r3, [pc, #164]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007ebc:	4b27      	ldr	r3, [pc, #156]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ec2:	4b26      	ldr	r3, [pc, #152]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ec8:	4b24      	ldr	r3, [pc, #144]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007eca:	220c      	movs	r2, #12
 8007ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ece:	4b23      	ldr	r3, [pc, #140]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ed4:	4b21      	ldr	r3, [pc, #132]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007eda:	4b20      	ldr	r3, [pc, #128]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007eec:	481b      	ldr	r0, [pc, #108]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007eee:	f012 feea 	bl	801acc6 <HAL_UART_Init>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bf14      	ite	ne
 8007ef8:	2301      	movne	r3, #1
 8007efa:	2300      	moveq	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8007f02:	f000 f8d3 	bl	80080ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f06:	2100      	movs	r1, #0
 8007f08:	4814      	ldr	r0, [pc, #80]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007f0a:	f013 ff7c 	bl	801be06 <HAL_UARTEx_SetTxFifoThreshold>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bf14      	ite	ne
 8007f14:	2301      	movne	r3, #1
 8007f16:	2300      	moveq	r3, #0
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8007f1e:	f000 f8c5 	bl	80080ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f22:	2100      	movs	r1, #0
 8007f24:	480d      	ldr	r0, [pc, #52]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007f26:	f013 ffac 	bl	801be82 <HAL_UARTEx_SetRxFifoThreshold>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bf14      	ite	ne
 8007f30:	2301      	movne	r3, #1
 8007f32:	2300      	moveq	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8007f3a:	f000 f8b7 	bl	80080ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007f3e:	4807      	ldr	r0, [pc, #28]	@ (8007f5c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007f40:	f013 ff28 	bl	801bd94 <HAL_UARTEx_DisableFifoMode>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bf14      	ite	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	2300      	moveq	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8007f54:	f000 f8aa 	bl	80080ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f58:	bf00      	nop
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	24000374 	.word	0x24000374
 8007f60:	40011000 	.word	0x40011000

08007f64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	@ 0x28
 8007f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6a:	f107 0314 	add.w	r3, r7, #20
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	60da      	str	r2, [r3, #12]
 8007f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007f7a:	4b26      	ldr	r3, [pc, #152]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f80:	4a24      	ldr	r2, [pc, #144]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f8a:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f98:	4b1e      	ldr	r3, [pc, #120]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fa0:	f043 0304 	orr.w	r3, r3, #4
 8007fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fb6:	4b17      	ldr	r3, [pc, #92]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fbc:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fc6:	4b13      	ldr	r3, [pc, #76]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fda:	4a0e      	ldr	r2, [pc, #56]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fdc:	f043 0308 	orr.w	r3, r3, #8
 8007fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <_ZL12MX_GPIO_Initv+0xb0>)
 8007fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ffe:	f107 0314 	add.w	r3, r7, #20
 8008002:	4619      	mov	r1, r3
 8008004:	4804      	ldr	r0, [pc, #16]	@ (8008018 <_ZL12MX_GPIO_Initv+0xb4>)
 8008006:	f00d f9b1 	bl	801536c <HAL_GPIO_Init>

}
 800800a:	bf00      	nop
 800800c:	3728      	adds	r7, #40	@ 0x28
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	58024400 	.word	0x58024400
 8008018:	58020800 	.word	0x58020800

0800801c <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8008022:	463b      	mov	r3, r7
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	605a      	str	r2, [r3, #4]
 800802a:	609a      	str	r2, [r3, #8]
 800802c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800802e:	f00a fde5 	bl	8012bfc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008032:	2301      	movs	r3, #1
 8008034:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008036:	2300      	movs	r3, #0
 8008038:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800803a:	2300      	movs	r3, #0
 800803c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800803e:	231f      	movs	r3, #31
 8008040:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8008042:	2387      	movs	r3, #135	@ 0x87
 8008044:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008046:	2300      	movs	r3, #0
 8008048:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800804a:	2300      	movs	r3, #0
 800804c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800804e:	2301      	movs	r3, #1
 8008050:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008052:	2301      	movs	r3, #1
 8008054:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008056:	2300      	movs	r3, #0
 8008058:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800805e:	463b      	mov	r3, r7
 8008060:	4618      	mov	r0, r3
 8008062:	f00a fe03 	bl	8012c6c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008066:	2301      	movs	r3, #1
 8008068:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800806a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800806e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8008070:	2307      	movs	r3, #7
 8008072:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008074:	2303      	movs	r3, #3
 8008076:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008078:	2301      	movs	r3, #1
 800807a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008080:	2300      	movs	r3, #0
 8008082:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8008084:	2301      	movs	r3, #1
 8008086:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008088:	2300      	movs	r3, #0
 800808a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800808c:	2300      	movs	r3, #0
 800808e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008090:	2300      	movs	r3, #0
 8008092:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008094:	463b      	mov	r3, r7
 8008096:	4618      	mov	r0, r3
 8008098:	f00a fde8 	bl	8012c6c <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800809c:	2004      	movs	r0, #4
 800809e:	f00a fdc5 	bl	8012c2c <HAL_MPU_Enable>

}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 80080b0:	4803      	ldr	r0, [pc, #12]	@ (80080c0 <Error_Handler+0x14>)
 80080b2:	f017 feed 	bl	801fe90 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80080b6:	b672      	cpsid	i
}
 80080b8:	bf00      	nop

  __disable_irq();
  while (1)
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <Error_Handler+0xe>
 80080be:	bf00      	nop
 80080c0:	08021060 	.word	0x08021060

080080c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	1e5a      	subs	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d019      	beq.n	8008152 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	1e5a      	subs	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	609a      	str	r2, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf0c      	ite	eq
 800813c:	2301      	moveq	r3, #1
 800813e:	2300      	movne	r3, #0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
        }
    }
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	0802181c 	.word	0x0802181c

08008170 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
      header = 0;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
      inputs = 0;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e008      	b.n	800819c <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	2200      	movs	r2, #0
 8008194:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	3301      	adds	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b07      	cmp	r3, #7
 80081a0:	d9f3      	bls.n	800818a <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 80081a2:	2300      	movs	r3, #0
 80081a4:	73bb      	strb	r3, [r7, #14]
 80081a6:	e00b      	b.n	80081c0 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	3308      	adds	r3, #8
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	3301      	adds	r3, #1
 80081be:	73bb      	strb	r3, [r7, #14]
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	d9f0      	bls.n	80081a8 <_ZN8txData_tC1Ev+0x38>
     }
  }
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    return static_;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7a1b      	ldrb	r3, [r3, #8]
  }
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  }
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8008214:	2300      	movs	r3, #0
 8008216:	e006      	b.n	8008226 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f9ab 	bl	8008578 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8008222:	4603      	mov	r3, r0
 8008224:	bf00      	nop
  }
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fa fd23 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800823c:	4603      	mov	r3, r0
  }
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff ffeb 	bl	800822e <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008258:	4603      	mov	r3, r0
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff ffcf 	bl	8008202 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8008264:	4603      	mov	r3, r0
  }
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff ffde 	bl	8008246 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800828a:	4603      	mov	r3, r0
 800828c:	e000      	b.n	8008290 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800828e:	2300      	movs	r3, #0
  }
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f81d 	bl	80082e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7fa fdeb 	bl	8002e8c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 80082b6:	4603      	mov	r3, r0
 80082b8:	e003      	b.n	80082c2 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7fa fce1 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80082c0:	4603      	mov	r3, r0
 80082c2:	617b      	str	r3, [r7, #20]
    if (!array)
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e006      	b.n	80082dc <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	6978      	ldr	r0, [r7, #20]
 80082d4:	f000 f8ff 	bl	80084d6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 80082d8:	4603      	mov	r3, r0
 80082da:	bf00      	nop
  }
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	791b      	ldrb	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2301      	moveq	r3, #1
 80082f6:	2300      	movne	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
  }
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	2b04      	cmp	r3, #4
 8008314:	d003      	beq.n	800831e <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800831a:	2b05      	cmp	r3, #5
 800831c:	d101      	bne.n	8008322 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 8008322:	2300      	movs	r3, #0
  }
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
  }
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f103 0208 	add.w	r2, r3, #8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f7fa fb1a 	bl	80029a0 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f103 020c 	add.w	r2, r3, #12
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7fc fb9b 	bl	8004ab4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	330c      	adds	r3, #12
 8008382:	4618      	mov	r0, r3
 8008384:	f000 ffc7 	bl	8009316 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3308      	adds	r3, #8
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ff2d 	bl	80081ec <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	1d3b      	adds	r3, r7, #4
 80083a6:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	461a      	mov	r2, r3
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083b4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
  }
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f000 f8cf 	bl	80085a6 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 8008408:	4603      	mov	r3, r0
 800840a:	e000      	b.n	800840e <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 800840c:	2300      	movs	r3, #0
  }
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
    return resources_;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
  }
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7fa fbb7 	bl	8002bae <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008440:	4603      	mov	r3, r0
  }
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7fa fba9 	bl	8002bae <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800845c:	4603      	mov	r3, r0
  }
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff ff6e 	bl	8008352 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f7fb f823 	bl	80034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800849a:	e006      	b.n	80084aa <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7fa fffb 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7fa fb36 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f083 0301 	eor.w	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 80084c6:	2300      	movs	r3, #0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e7      	bne.n	800849c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 80084cc:	bf00      	nop
}
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b088      	sub	sp, #32
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa fff8 	bl	80034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 80084f0:	e008      	b.n	8008504 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 80084f2:	f107 0314 	add.w	r3, r7, #20
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fa ffce 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	3b01      	subs	r3, #1
 8008502:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	4618      	mov	r0, r3
 800850a:	f7fa fb07 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800850e:	4603      	mov	r3, r0
 8008510:	f083 0301 	eor.w	r3, r3, #1
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d004      	beq.n	8008524 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e3      	bne.n	80084f2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	4618      	mov	r0, r3
 8008530:	f7fa faf4 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3301      	adds	r3, #1
 800853e:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8008540:	f107 0314 	add.w	r3, r7, #20
 8008544:	4618      	mov	r0, r3
 8008546:	f7fa fb1a 	bl	8002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800854a:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800854c:	e00c      	b.n	8008568 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7fa ff56 	bl	8003402 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8008556:	61f8      	str	r0, [r7, #28]
    if (!element)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800855e:	2300      	movs	r3, #0
 8008560:	e006      	b.n	8008570 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	3b01      	subs	r3, #1
 8008566:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1ef      	bne.n	800854e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800856e:	69fb      	ldr	r3, [r7, #28]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8008584:	f107 0010 	add.w	r0, r7, #16
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	68f9      	ldr	r1, [r7, #12]
 800858e:	f7ff ff77 	bl	8008480 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8008592:	f107 0310 	add.w	r3, r7, #16
 8008596:	4618      	mov	r0, r3
 8008598:	f7fa faf1 	bl	8002b7e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800859c:	4603      	mov	r3, r0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fa ff8f 	bl	80034e0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80085c2:	e008      	b.n	80085d6 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	3301      	adds	r3, #1
 80085c8:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fa ff62 	bl	800349a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 80085d6:	f107 030c 	add.w	r3, r7, #12
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fa fa9e 	bl	8002b1c <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f083 0301 	eor.w	r3, r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1eb      	bne.n	80085c4 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 80085ec:	697b      	ldr	r3, [r7, #20]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	463b      	mov	r3, r7
 80085fe:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8008602:	463b      	mov	r3, r7
 8008604:	4618      	mov	r0, r3
 8008606:	f7fc fad1 	bl	8004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800860a:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fe77 	bl	8008306 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8008622:	2300      	movs	r3, #0
  }
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fe80 	bl	8009342 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff ffe5 	bl	800862c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8008676:	6838      	ldr	r0, [r7, #0]
 8008678:	f000 fe58 	bl	800932c <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800867c:	4602      	mov	r2, r0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3318      	adds	r3, #24
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff ffe1 	bl	800864c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7f9b      	ldrb	r3, [r3, #30]
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80086ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bf14      	ite	ne
 80086be:	2301      	movne	r3, #1
 80086c0:	2300      	moveq	r3, #0
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d006      	beq.n	80086d6 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80086c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086cc:	2210      	movs	r2, #16
 80086ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 80086d2:	f7fa f809 	bl	80026e8 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 80086d6:	bf00      	nop
 80086d8:	bd80      	pop	{r7, pc}

080086da <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 80086da:	b580      	push	{r7, lr}
 80086dc:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 80086de:	f7fa f811 	bl	8002704 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 80086ea:	f7fa f819 	bl	8002720 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80086f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800870e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800871e:	f7fa f80d 	bl	800273c <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 800872c:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <TIM3_IRQHandler+0x30>)
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf14      	ite	ne
 8008738:	2301      	movne	r3, #1
 800873a:	2300      	moveq	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008742:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <TIM3_IRQHandler+0x30>)
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <TIM3_IRQHandler+0x30>)
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800874e:	f7fa f803 	bl	8002758 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40000400 	.word	0x40000400

0800875c <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8008760:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <TIM4_IRQHandler+0x30>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008776:	4b05      	ldr	r3, [pc, #20]	@ (800878c <TIM4_IRQHandler+0x30>)
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	4a04      	ldr	r2, [pc, #16]	@ (800878c <TIM4_IRQHandler+0x30>)
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8008782:	f7f9 fff7 	bl	8002774 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40000800 	.word	0x40000800

08008790 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f000 fe45 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff ffea 	bl	8008790 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fea1 	bl	800951e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff ffe5 	bl	80087c6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 ffc0 	bl	800979c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4611      	mov	r1, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff ffe5 	bl	8008806 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fdea 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff ffea 	bl	8008846 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800887c:	b590      	push	{r4, r7, lr}
 800887e:	b095      	sub	sp, #84	@ 0x54
 8008880:	af02      	add	r7, sp, #8
 8008882:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	commsFreq(Config::pruCommsFreq)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3310      	adds	r3, #16
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fd90 	bl	80093ae <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3314      	adds	r3, #20
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fdbd 	bl	8009412 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	331c      	adds	r3, #28
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fdf1 	bl	8009484 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3320      	adds	r3, #32
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fdec 	bl	8009484 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80088b2:	625a      	str	r2, [r3, #36]	@ 0x24
	servoFreq(Config::pruServoFreq),
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088ba:	629a      	str	r2, [r3, #40]	@ 0x28
	commsFreq(Config::pruCommsFreq)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80088c2:	62da      	str	r2, [r3, #44]	@ 0x2c
{
	threadsRunning = false;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	currentState = ST_SETUP;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2205      	movs	r2, #5
 80088d6:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	f107 0310 	add.w	r3, r7, #16
 80088e0:	f107 0214 	add.w	r2, r7, #20
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fdfe 	bl	80094e8 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3310      	adds	r3, #16
 80088f0:	f107 0210 	add.w	r2, r7, #16
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff ff75 	bl	80087e6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fd64 	bl	80093ce <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a5b      	ldr	r2, [pc, #364]	@ (8008a78 <_ZN6RemoraC1Ev+0x1fc>)
 800890a:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a5b      	ldr	r2, [pc, #364]	@ (8008a7c <_ZN6RemoraC1Ev+0x200>)
 8008910:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f103 0108 	add.w	r1, r3, #8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	4b58      	ldr	r3, [pc, #352]	@ (8008a80 <_ZN6RemoraC1Ev+0x204>)
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	f107 000c 	add.w	r0, r7, #12
 8008924:	f107 0318 	add.w	r3, r7, #24
 8008928:	f000 fe15 	bl	8009556 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 800892c:	f107 031c 	add.w	r3, r7, #28
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fe5b 	bl	80095ec <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3314      	adds	r3, #20
 800893a:	f107 021c 	add.w	r2, r7, #28
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fe61 	bl	8009608 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 8008946:	f107 031c 	add.w	r3, r7, #28
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff ff2e 	bl	80087ac <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3314      	adds	r3, #20
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fe6a 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800895a:	4604      	mov	r4, r0
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fe70 	bl	8009646 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008966:	4602      	mov	r2, r0
 8008968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fe85 	bl	800967e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 8008974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008978:	4619      	mov	r1, r3
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff fe76 	bl	800866c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 8008980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fe96 	bl	80096b6 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3314      	adds	r3, #20
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fe4d 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008994:	4603      	mov	r3, r0
 8008996:	4618      	mov	r0, r3
 8008998:	f004 fdd3 	bl	800d542 <_ZN12CommsHandler4initEv>
	comms->start();
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3314      	adds	r3, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fe44 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f004 fdf8 	bl	800d59e <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 80089ae:	4b35      	ldr	r3, [pc, #212]	@ (8008a84 <_ZN6RemoraC1Ev+0x208>)
 80089b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
										TIM3_IRQn,
 80089b2:	231d      	movs	r3, #29
 80089b4:	867b      	strh	r3, [r7, #50]	@ 0x32
										baseFreq,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3324      	adds	r3, #36	@ 0x24
    baseThread = make_unique<pruThread>(
 80089ba:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80089be:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 80089c2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80089c6:	4c30      	ldr	r4, [pc, #192]	@ (8008a88 <_ZN6RemoraC1Ev+0x20c>)
 80089c8:	9401      	str	r4, [sp, #4]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	460b      	mov	r3, r1
 80089ce:	492f      	ldr	r1, [pc, #188]	@ (8008a8c <_ZN6RemoraC1Ev+0x210>)
 80089d0:	f000 fe93 	bl	80096fa <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	331c      	adds	r3, #28
 80089d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff21 	bl	8008826 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 80089e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fd5b 	bl	80094a4 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 80089ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089f2:	63bb      	str	r3, [r7, #56]	@ 0x38
										TIM2_IRQn,
 80089f4:	231c      	movs	r3, #28
 80089f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
										servoFreq,
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3328      	adds	r3, #40	@ 0x28
    servoThread = make_unique<pruThread>(
 80089fc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8008a00:	f107 013e 	add.w	r1, r7, #62	@ 0x3e
 8008a04:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008a08:	4c21      	ldr	r4, [pc, #132]	@ (8008a90 <_ZN6RemoraC1Ev+0x214>)
 8008a0a:	9401      	str	r4, [sp, #4]
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4920      	ldr	r1, [pc, #128]	@ (8008a94 <_ZN6RemoraC1Ev+0x218>)
 8008a12:	f000 fedf 	bl	80097d4 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3320      	adds	r3, #32
 8008a1a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff ff00 	bl	8008826 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 8008a26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fd3a 	bl	80094a4 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/


    servoThread->registerModule(comms);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3320      	adds	r3, #32
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 ff1e 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f103 0214 	add.w	r2, r3, #20
 8008a42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 ff20 	bl	800988e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 8008a4e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008a52:	4619      	mov	r1, r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	f009 f939 	bl	8011ccc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008a5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff feff 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fd9d 	bl	80095a8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	374c      	adds	r7, #76	@ 0x4c
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}
 8008a78:	30000080 	.word	0x30000080
 8008a7c:	300000c0 	.word	0x300000c0
 8008a80:	40013000 	.word	0x40013000
 8008a84:	40000400 	.word	0x40000400
 8008a88:	08021824 	.word	0x08021824
 8008a8c:	08021068 	.word	0x08021068
 8008a90:	08021828 	.word	0x08021828
 8008a94:	08021070 	.word	0x08021070

08008a98 <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
    if (currentState != newState) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d00e      	beq.n	8008acc <_ZN6Remora17transitionToStateENS_5StateE+0x34>
        printf("\n## Transitioning from state %d to state %d\n", currentState, newState);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4806      	ldr	r0, [pc, #24]	@ (8008ad4 <_ZN6Remora17transitionToStateENS_5StateE+0x3c>)
 8008aba:	f017 f9e9 	bl	801fe90 <iprintf>
        prevState = currentState;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	701a      	strb	r2, [r3, #0]
    }
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	08021078 	.word	0x08021078

08008ad8 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d002      	beq.n	8008af2 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 8008aec:	4808      	ldr	r0, [pc, #32]	@ (8008b10 <_ZN6Remora16handleSetupStateEv+0x38>)
 8008aee:	f017 fa3f 	bl	801ff70 <puts>
    }
    prevState = currentState;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	705a      	strb	r2, [r3, #1]

    loadModules();
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f962 	bl	8008dc4 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 8008b00:	2101      	movs	r1, #1
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff ffc8 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	080210a8 	.word	0x080210a8

08008b14 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d002      	beq.n	8008b2e <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 8008b28:	4814      	ldr	r0, [pc, #80]	@ (8008b7c <_ZN6Remora16handleStartStateEv+0x68>)
 8008b2a:	f017 fa21 	bl	801ff70 <puts>
    }
    prevState = currentState;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	705a      	strb	r2, [r3, #1]

    if (!threadsRunning) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b3c:	f083 0301 	eor.w	r3, r3, #1
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d011      	beq.n	8008b6a <_ZN6Remora16handleStartStateEv+0x56>
        startThread(servoThread, "SERVO");
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3320      	adds	r3, #32
 8008b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8008b80 <_ZN6Remora16handleStartStateEv+0x6c>)
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8a8 	bl	8008ca4 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	331c      	adds	r3, #28
 8008b58:	4a0a      	ldr	r2, [pc, #40]	@ (8008b84 <_ZN6Remora16handleStartStateEv+0x70>)
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f8a1 	bl	8008ca4 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    }

    transitionToState(ST_IDLE);
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ff93 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	080210c4 	.word	0x080210c4
 8008b80:	080210e0 	.word	0x080210e0
 8008b84:	080210e8 	.word	0x080210e8

08008b88 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d002      	beq.n	8008ba2 <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 8008b9c:	480d      	ldr	r0, [pc, #52]	@ (8008bd4 <_ZN6Remora15handleIdleStateEv+0x4c>)
 8008b9e:	f017 f9e7 	bl	801ff70 <puts>
    }
    prevState = currentState;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3314      	adds	r3, #20
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fd3d 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fd6b 	bl	8008692 <_ZNK12CommsHandler9getStatusEv>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 8008bc2:	2103      	movs	r1, #3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ff67 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	080210f0 	.word	0x080210f0

08008bd8 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d002      	beq.n	8008bf2 <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 8008bec:	4813      	ldr	r0, [pc, #76]	@ (8008c3c <_ZN6Remora18handleRunningStateEv+0x64>)
 8008bee:	f017 f9bf 	bl	801ff70 <puts>
    }
    prevState = currentState;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	781a      	ldrb	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fd15 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008c04:	4603      	mov	r3, r0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fd43 	bl	8008692 <_ZNK12CommsHandler9getStatusEv>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f083 0301 	eor.w	r3, r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 8008c18:	2105      	movs	r1, #5
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ff3c 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7b1b      	ldrb	r3, [r3, #12]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 8008c2a:	2106      	movs	r1, #6
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ff33 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	08021108 	.word	0x08021108

08008c40 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d002      	beq.n	8008c5a <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 8008c54:	480c      	ldr	r0, [pc, #48]	@ (8008c88 <_ZN6Remora16handleResetStateEv+0x48>)
 8008c56:	f017 f98b 	bl	801ff70 <puts>
    }
    prevState = currentState;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	781a      	ldrb	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 8008c62:	480a      	ldr	r0, [pc, #40]	@ (8008c8c <_ZN6Remora16handleResetStateEv+0x4c>)
 8008c64:	f017 f984 	bl	801ff70 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2240      	movs	r2, #64	@ 0x40
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f82f 	bl	8008cd4 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 8008c76:	2102      	movs	r1, #2
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff0d 	bl	8008a98 <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	08021124 	.word	0x08021124
 8008c8c:	08021140 	.word	0x08021140

08008c90 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 8008c98:	f009 ff9f 	bl	8012bda <HAL_NVIC_SystemReset>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4807      	ldr	r0, [pc, #28]	@ (8008cd0 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 8008cb4:	f017 f8ec 	bl	801fe90 <iprintf>
    thread->startThread();
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f000 fddc 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f009 f83f 	bl	8011d44 <_ZN9pruThread11startThreadEv>
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	08021158 	.word	0x08021158

08008cd4 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f017 fa3d 	bl	8020164 <memset>
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <_ZN6Remora3runEv>:

void Remora::run() {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b06      	cmp	r3, #6
 8008d02:	d829      	bhi.n	8008d58 <_ZN6Remora3runEv+0x64>
 8008d04:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <_ZN6Remora3runEv+0x18>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d41 	.word	0x08008d41
 8008d1c:	08008d59 	.word	0x08008d59
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d51 	.word	0x08008d51
            case ST_SETUP:
                handleSetupState();
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fed5 	bl	8008ad8 <_ZN6Remora16handleSetupStateEv>
                break;
 8008d2e:	e017      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff feef 	bl	8008b14 <_ZN6Remora16handleStartStateEv>
                break;
 8008d36:	e013      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff ff25 	bl	8008b88 <_ZN6Remora15handleIdleStateEv>
                break;
 8008d3e:	e00f      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ff49 	bl	8008bd8 <_ZN6Remora18handleRunningStateEv>
                break;
 8008d46:	e00b      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ff79 	bl	8008c40 <_ZN6Remora16handleResetStateEv>
                break;
 8008d4e:	e007      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff9d 	bl	8008c90 <_ZN6Remora19handleSysResetStateEv>
                break;
 8008d56:	e003      	b.n	8008d60 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 8008d58:	4806      	ldr	r0, [pc, #24]	@ (8008d74 <_ZN6Remora3runEv+0x80>)
 8008d5a:	f017 f909 	bl	801ff70 <puts>
                break;
 8008d5e:	bf00      	nop
        }
        comms->tasks();
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3314      	adds	r3, #20
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fc62 	bl	800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f004 fc29 	bl	800d5c4 <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 8008d72:	e7c3      	b.n	8008cfc <_ZN6Remora3runEv+0x8>
 8008d74:	08021170 	.word	0x08021170

08008d78 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f000 fdec 	bl	8009972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff ffdf 	bl	8008d78 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 8008dc4:	b5b0      	push	{r4, r5, r7, lr}
 8008dc6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8008dca:	af04      	add	r7, sp, #16
 8008dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008dd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008dd4:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 8008dd6:	f006 f825 	bl	800ee24 <_ZN13ModuleFactory11getInstanceEv>
 8008dda:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 8008dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3310      	adds	r3, #16
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fd5f 	bl	80098ae <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 8008df0:	4602      	mov	r2, r0
 8008df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008df6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fb fca7 	bl	8004750 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8008e02:	f107 0318 	add.w	r3, r7, #24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fadc 	bl	80083c4 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008e12:	e254      	b.n	80092be <_ZN6Remora11loadModulesEv+0x4fa>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8008e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e18:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8008e1c:	f107 0118 	add.w	r1, r7, #24
 8008e20:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fd4e 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008e2a:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 8008e2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 f9a9 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 f9ad 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008e46:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e4a:	49c3      	ldr	r1, [pc, #780]	@ (8009158 <_ZN6Remora11loadModulesEv+0x394>)
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fc fd12 	bl	8005876 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008e52:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8008e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008e60:	cb0c      	ldmia	r3, {r2, r3}
 8008e62:	4620      	mov	r0, r4
 8008e64:	f001 f9b4 	bl	800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008e68:	f107 0320 	add.w	r3, r7, #32
 8008e6c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8008e70:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8008e74:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008e78:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008e7c:	f001 fe3f 	bl	800aafe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008e80:	4604      	mov	r4, r0
 8008e82:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008e86:	f001 fe4a 	bl	800ab1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008e90:	4621      	mov	r1, r4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa f90b 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008e98:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008e9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ea2:	f7ff fba8 	bl	80085f6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	bf00      	nop
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d04e      	beq.n	8008f4c <_ZN6Remora11loadModulesEv+0x188>
 8008eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008eb2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008eb6:	f107 0118 	add.w	r1, r7, #24
 8008eba:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fd01 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008ec4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 8008ec8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 f95c 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 f960 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008ee0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008ee4:	499d      	ldr	r1, [pc, #628]	@ (800915c <_ZN6Remora11loadModulesEv+0x398>)
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 f991 	bl	800a20e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008eec:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8008ef0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008efa:	cb0c      	ldmia	r3, {r2, r3}
 8008efc:	4620      	mov	r0, r4
 8008efe:	f001 f967 	bl	800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008f02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008f06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008f0a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8008f0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008f12:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008f16:	f001 fdf2 	bl	800aafe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008f20:	f001 fdfd 	bl	800ab1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008f24:	4602      	mov	r2, r0
 8008f26:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fa f8be 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008f32:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008f34:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008f38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f3c:	f7ff fb5b 	bl	80085f6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008f40:	4603      	mov	r3, r0
 8008f42:	bf00      	nop
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <_ZN6Remora11loadModulesEv+0x188>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <_ZN6Remora11loadModulesEv+0x18a>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 81b0 	beq.w	80092b4 <_ZN6Remora11loadModulesEv+0x4f0>
            const char* threadName = modules[i]["Thread"];
 8008f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f58:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008f5c:	f107 0118 	add.w	r1, r7, #24
 8008f60:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fcae 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008f6a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 8008f6e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 f909 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8008f7e:	4611      	mov	r1, r2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f90d 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008f86:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008f8a:	4973      	ldr	r1, [pc, #460]	@ (8009158 <_ZN6Remora11loadModulesEv+0x394>)
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fc fc72 	bl	8005876 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008f92:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8008f96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008fa0:	cb0c      	ldmia	r3, {r2, r3}
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f001 f914 	bl	800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008fa8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fc9a 	bl	80098e6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008fb2:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 8008fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008fba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008fbe:	f107 0118 	add.w	r1, r7, #24
 8008fc2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fc7d 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008fcc:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8008fd0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 f8d8 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f8dc 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008fe8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008fec:	495b      	ldr	r1, [pc, #364]	@ (800915c <_ZN6Remora11loadModulesEv+0x398>)
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f90d 	bl	800a20e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008ff4:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8008ff8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009002:	cb0c      	ldmia	r3, {r2, r3}
 8009004:	4620      	mov	r0, r4
 8009006:	f001 f8e3 	bl	800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800900a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fc69 	bl	80098e6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8009014:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 8009018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800901c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 8009024:	494e      	ldr	r1, [pc, #312]	@ (8009160 <_ZN6Remora11loadModulesEv+0x39c>)
 8009026:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800902a:	f7f7 f959 	bl	80002e0 <strcmp>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 8009034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009044:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e012      	b.n	8009072 <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800904c:	4945      	ldr	r1, [pc, #276]	@ (8009164 <_ZN6Remora11loadModulesEv+0x3a0>)
 800904e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8009052:	f7f7 f945 	bl	80002e0 <strcmp>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800905c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800906c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8009070:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 8009072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800907a:	f107 0118 	add.w	r1, r7, #24
 800907e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fc1f 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8009088:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800908c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009090:	4618      	mov	r0, r3
 8009092:	f001 f87a 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8009096:	4602      	mov	r2, r0
 8009098:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 f87e 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 80090a4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80090a8:	492f      	ldr	r1, [pc, #188]	@ (8009168 <_ZN6Remora11loadModulesEv+0x3a4>)
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f8e4 	bl	800a278 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80090b0:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 80090b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80090be:	cb0c      	ldmia	r3, {r2, r3}
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 f885 	bl	800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 80090c6:	f107 0214 	add.w	r2, r7, #20
 80090ca:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fc14 	bl	80098fe <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 80090d6:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 80090da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090de:	f107 0118 	add.w	r1, r7, #24
 80090e2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fbed 	bl	80098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 80090ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80090f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fc0f 	bl	800991a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 80090fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009100:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 8009104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009108:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	466a      	mov	r2, sp
 8009112:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009116:	e893 0003 	ldmia.w	r3, {r0, r1}
 800911a:	e882 0003 	stmia.w	r2, {r0, r1}
 800911e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8009122:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8009126:	4629      	mov	r1, r5
 8009128:	4620      	mov	r0, r4
 800912a:	f005 fdd1 	bl	800ecd0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fc00 	bl	8009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8009138:	4603      	mov	r3, r0
 800913a:	f083 0301 	eor.w	r3, r3, #1
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d015      	beq.n	8009170 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 8009144:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8009148:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800914c:	4807      	ldr	r0, [pc, #28]	@ (800916c <_ZN6Remora11loadModulesEv+0x3a8>)
 800914e:	f016 fe9f 	bl	801fe90 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 8009152:	2400      	movs	r4, #0
 8009154:	e0a8      	b.n	80092a8 <_ZN6Remora11loadModulesEv+0x4e4>
 8009156:	bf00      	nop
 8009158:	08021188 	.word	0x08021188
 800915c:	08021190 	.word	0x08021190
 8009160:	08021070 	.word	0x08021070
 8009164:	08021068 	.word	0x08021068
 8009168:	08021198 	.word	0x08021198
 800916c:	080211a4 	.word	0x080211a4
			}

            bool _modPost = _mod->getUsesModulePost();
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fbf0 	bl	800995a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800917a:	4603      	mov	r3, r0
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	3218      	adds	r2, #24
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	4790      	blx	r2
 8009186:	4603      	mov	r3, r0
 8009188:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800918c:	4957      	ldr	r1, [pc, #348]	@ (80092ec <_ZN6Remora11loadModulesEv+0x528>)
 800918e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8009192:	f7f7 f8a5 	bl	80002e0 <strcmp>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d13e      	bne.n	800921a <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800919c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80091a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3320      	adds	r3, #32
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fb64 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80091ae:	4604      	mov	r4, r0
 80091b0:	f107 020c 	add.w	r2, r7, #12
 80091b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff fdf2 	bl	8008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 80091c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80091c4:	4619      	mov	r1, r3
 80091c6:	4620      	mov	r0, r4
 80091c8:	f008 fd80 	bl	8011ccc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 80091cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fb46 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 80091d6:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d063      	beq.n	80092a6 <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 80091de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80091e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3320      	adds	r3, #32
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fb43 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80091f0:	4604      	mov	r4, r0
 80091f2:	f107 020c 	add.w	r2, r7, #12
 80091f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fdd1 	bl	8008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009206:	4619      	mov	r1, r3
 8009208:	4620      	mov	r0, r4
 800920a:	f008 fd7b 	bl	8011d04 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800920e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff fb25 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8009218:	e045      	b.n	80092a6 <_ZN6Remora11loadModulesEv+0x4e2>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800921a:	4935      	ldr	r1, [pc, #212]	@ (80092f0 <_ZN6Remora11loadModulesEv+0x52c>)
 800921c:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8009220:	f7f7 f85e 	bl	80002e0 <strcmp>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d13d      	bne.n	80092a6 <_ZN6Remora11loadModulesEv+0x4e2>
                baseThread->registerModule(_mod);
 800922a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800922e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	331c      	adds	r3, #28
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fb1d 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800923c:	4604      	mov	r4, r0
 800923e:	f107 020c 	add.w	r2, r7, #12
 8009242:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009246:	4611      	mov	r1, r2
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fdab 	bl	8008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800924e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009252:	4619      	mov	r1, r3
 8009254:	4620      	mov	r0, r4
 8009256:	f008 fd39 	bl	8011ccc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800925a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff faff 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8009264:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01c      	beq.n	80092a6 <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 800926c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009270:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3320      	adds	r3, #32
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fafc 	bl	8009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800927e:	4604      	mov	r4, r0
 8009280:	f107 020c 	add.w	r2, r7, #12
 8009284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fd8a 	bl	8008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009290:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009294:	4619      	mov	r1, r3
 8009296:	4620      	mov	r0, r4
 8009298:	f008 fd34 	bl	8011d04 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800929c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff fade 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 80092a6:	2401      	movs	r4, #1
 80092a8:	f107 030c 	add.w	r3, r7, #12
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff fad8 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
 80092b2:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 80092b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80092b8:	3301      	adds	r3, #1
 80092ba:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80092be:	f107 0318 	add.w	r3, r7, #24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff f88f 	bl	80083e6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 80092c8:	4602      	mov	r2, r0
 80092ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf34      	ite	cc
 80092d2:	2301      	movcc	r3, #1
 80092d4:	2300      	movcs	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f47f ad9b 	bne.w	8008e14 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bdb0      	pop	{r4, r5, r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08021070 	.word	0x08021070
 80092f0:	08021068 	.word	0x08021068

080092f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
      { delete this; }
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3304      	adds	r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  }
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800934c:	6838      	ldr	r0, [r7, #0]
 800934e:	f000 fb9d 	bl	8009a8c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 8009352:	4603      	mov	r3, r0
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb78 	bl	8009a4c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800935c:	6838      	ldr	r0, [r7, #0]
 800935e:	f000 fbaa 	bl	8009ab6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009362:	4603      	mov	r3, r0
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fbb3 	bl	8009ad0 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fba3 	bl	8009ab6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009370:	687b      	ldr	r3, [r7, #4]
      }
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fbae 	bl	8009ae6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff ffeb 	bl	800937a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
	: _M_t()
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff ffe8 	bl	8009394 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80093ce:	b590      	push	{r4, r7, lr}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fb91 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80093de:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00c      	beq.n	8009402 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fb96 	bl	8009b1a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 80093ee:	4604      	mov	r4, r0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fb9f 	bl	8009b34 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80093f6:	4603      	mov	r3, r0
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fbb7 	bl	8009b70 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
      }
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	bd90      	pop	{r4, r7, pc}

08009412 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fbba 	bl	8009b96 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fe5a 	bl	80080fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fbac 	bl	8009bb8 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ffeb 	bl	8009450 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	: _M_t()
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ffe8 	bl	800946a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fb8f 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 80094b4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00c      	beq.n	80094d8 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fb94 	bl	8009bec <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 80094c4:	4604      	mov	r4, r0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fb9d 	bl	8009c06 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 80094cc:	4603      	mov	r3, r0
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4619      	mov	r1, r3
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fbb9 	bl	8009c4a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
      }
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}

080094e8 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80094f2:	206c      	movs	r0, #108	@ 0x6c
 80094f4:	f015 ff4a 	bl	801f38c <_Znwj>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461c      	mov	r4, r3
 80094fc:	6838      	ldr	r0, [r7, #0]
 80094fe:	f000 fbb7 	bl	8009c70 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 8009502:	4603      	mov	r3, r0
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4619      	mov	r1, r3
 8009508:	4620      	mov	r0, r4
 800950a:	f7fb f813 	bl	8004534 <_ZN17JsonConfigHandlerC1EP6Remora>
 800950e:	4621      	mov	r1, r4
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fbc8 	bl	8009ca6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	bd90      	pop	{r4, r7, pc}

0800951e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009528:	6838      	ldr	r0, [r7, #0]
 800952a:	f000 fbeb 	bl	8009d04 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800952e:	4603      	mov	r3, r0
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fbc6 	bl	8009cc4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009538:	6838      	ldr	r0, [r7, #0]
 800953a:	f000 fbf8 	bl	8009d2e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800953e:	4603      	mov	r3, r0
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fc01 	bl	8009d48 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fbf1 	bl	8009d2e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800954c:	687b      	ldr	r3, [r7, #4]
      }
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009558:	b085      	sub	sp, #20
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009564:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8009568:	f015 ff10 	bl	801f38c <_Znwj>
 800956c:	4603      	mov	r3, r0
 800956e:	461e      	mov	r6, r3
 8009570:	68b8      	ldr	r0, [r7, #8]
 8009572:	f000 fbf4 	bl	8009d5e <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009576:	4603      	mov	r3, r0
 8009578:	681c      	ldr	r4, [r3, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fbfa 	bl	8009d74 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009580:	4603      	mov	r3, r0
 8009582:	681d      	ldr	r5, [r3, #0]
 8009584:	6838      	ldr	r0, [r7, #0]
 8009586:	f000 fc00 	bl	8009d8a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800958a:	4603      	mov	r3, r0
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	462a      	mov	r2, r5
 8009590:	4621      	mov	r1, r4
 8009592:	4630      	mov	r0, r6
 8009594:	f7f7 fc12 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8009598:	4631      	mov	r1, r6
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fc10 	bl	8009dc0 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095a8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fc13 	bl	8009dde <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 80095b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00c      	beq.n	80095dc <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fc18 	bl	8009df8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 80095c8:	4604      	mov	r4, r0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fc21 	bl	8009e12 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 80095d0:	4603      	mov	r3, r0
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4619      	mov	r1, r3
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fc26 	bl	8009e28 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
      }
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}

080095ec <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fc25 	bl	8009e4a <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8009608:	b590      	push	{r4, r7, lr}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8009612:	687c      	ldr	r4, [r7, #4]
 8009614:	6838      	ldr	r0, [r7, #0]
 8009616:	f000 fc27 	bl	8009e68 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800961a:	4603      	mov	r3, r0
 800961c:	4619      	mov	r1, r3
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fc2d 	bl	8009e7e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8009624:	687b      	ldr	r3, [r7, #4]
      }
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	bd90      	pop	{r4, r7, pc}

0800962e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
	return _M_get();
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fc40 	bl	8009ebc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800963c:	4603      	mov	r3, r0
      }
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fc48 	bl	8009f04 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800967e:	b5b0      	push	{r4, r5, r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009688:	687c      	ldr	r4, [r7, #4]
 800968a:	6838      	ldr	r0, [r7, #0]
 800968c:	f000 fc22 	bl	8009ed4 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009690:	4605      	mov	r5, r0
 8009692:	6838      	ldr	r0, [r7, #0]
 8009694:	f000 fbb0 	bl	8009df8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009698:	4603      	mov	r3, r0
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fc27 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	4629      	mov	r1, r5
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff ffd8 	bl	800965c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bdb0      	pop	{r4, r5, r7, pc}

080096b6 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80096b6:	b590      	push	{r4, r7, lr}
 80096b8:	b085      	sub	sp, #20
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fc35 	bl	8009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 80096c6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00c      	beq.n	80096ea <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc3a 	bl	8009f4a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 80096d6:	4604      	mov	r4, r0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fc43 	bl	8009f64 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80096de:	4603      	mov	r3, r0
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4619      	mov	r1, r3
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 fc48 	bl	8009f7a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
      }
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd90      	pop	{r4, r7, pc}

080096fa <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80096fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fe:	b08e      	sub	sp, #56	@ 0x38
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800970a:	2044      	movs	r0, #68	@ 0x44
 800970c:	f015 fe3e 	bl	801f38c <_Znwj>
 8009710:	4603      	mov	r3, r0
 8009712:	4698      	mov	r8, r3
 8009714:	68b8      	ldr	r0, [r7, #8]
 8009716:	f000 fc41 	bl	8009f9c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800971a:	4604      	mov	r4, r0
 800971c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009720:	4618      	mov	r0, r3
 8009722:	f015 fe44 	bl	801f3ae <_ZNSaIcEC1Ev>
 8009726:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800972a:	f107 0314 	add.w	r3, r7, #20
 800972e:	4621      	mov	r1, r4
 8009730:	4618      	mov	r0, r3
 8009732:	f7fb fc85 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fc3b 	bl	8009fb2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800973c:	4603      	mov	r3, r0
 800973e:	681d      	ldr	r5, [r3, #0]
 8009740:	6838      	ldr	r0, [r7, #0]
 8009742:	f000 fc41 	bl	8009fc8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009746:	4603      	mov	r3, r0
 8009748:	f9b3 6000 	ldrsh.w	r6, [r3]
 800974c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800974e:	f000 fc46 	bl	8009fde <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009752:	4603      	mov	r3, r0
 8009754:	681c      	ldr	r4, [r3, #0]
 8009756:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009758:	f000 fc4c 	bl	8009ff4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800975c:	4603      	mov	r3, r0
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f107 0114 	add.w	r1, r7, #20
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	9400      	str	r4, [sp, #0]
 800976a:	4633      	mov	r3, r6
 800976c:	462a      	mov	r2, r5
 800976e:	4640      	mov	r0, r8
 8009770:	f008 f9f0 	bl	8011b54 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009774:	4641      	mov	r1, r8
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fc57 	bl	800a02a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	4618      	mov	r0, r3
 8009782:	f015 fee7 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800978a:	4618      	mov	r0, r3
 800978c:	f015 fe10 	bl	801f3b0 <_ZNSaIcED1Ev>
 8009790:	bf00      	nop
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	3730      	adds	r7, #48	@ 0x30
 8009796:	46bd      	mov	sp, r7
 8009798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800979c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	f000 fc6e 	bl	800a088 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 80097ac:	4603      	mov	r3, r0
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fc49 	bl	800a048 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80097b6:	6838      	ldr	r0, [r7, #0]
 80097b8:	f000 fc7b 	bl	800a0b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 80097bc:	4603      	mov	r3, r0
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fc84 	bl	800a0cc <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fc74 	bl	800a0b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80097ca:	687b      	ldr	r3, [r7, #4]
      }
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80097d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	b08e      	sub	sp, #56	@ 0x38
 80097da:	af02      	add	r7, sp, #8
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80097e4:	2044      	movs	r0, #68	@ 0x44
 80097e6:	f015 fdd1 	bl	801f38c <_Znwj>
 80097ea:	4603      	mov	r3, r0
 80097ec:	4698      	mov	r8, r3
 80097ee:	68b8      	ldr	r0, [r7, #8]
 80097f0:	f000 fc77 	bl	800a0e2 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80097f4:	4604      	mov	r4, r0
 80097f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097fa:	4618      	mov	r0, r3
 80097fc:	f015 fdd7 	bl	801f3ae <_ZNSaIcEC1Ev>
 8009800:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009804:	f107 0314 	add.w	r3, r7, #20
 8009808:	4621      	mov	r1, r4
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb fc18 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fbce 	bl	8009fb2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009816:	4603      	mov	r3, r0
 8009818:	681d      	ldr	r5, [r3, #0]
 800981a:	6838      	ldr	r0, [r7, #0]
 800981c:	f000 fbd4 	bl	8009fc8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009820:	4603      	mov	r3, r0
 8009822:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009826:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009828:	f000 fbd9 	bl	8009fde <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800982c:	4603      	mov	r3, r0
 800982e:	681c      	ldr	r4, [r3, #0]
 8009830:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009832:	f000 fbdf 	bl	8009ff4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8009836:	4603      	mov	r3, r0
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f107 0114 	add.w	r1, r7, #20
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	9400      	str	r4, [sp, #0]
 8009844:	4633      	mov	r3, r6
 8009846:	462a      	mov	r2, r5
 8009848:	4640      	mov	r0, r8
 800984a:	f008 f983 	bl	8011b54 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800984e:	4641      	mov	r1, r8
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fbea 	bl	800a02a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009856:	f107 0314 	add.w	r3, r7, #20
 800985a:	4618      	mov	r0, r3
 800985c:	f015 fe7a 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009864:	4618      	mov	r0, r3
 8009866:	f015 fda3 	bl	801f3b0 <_ZNSaIcED1Ev>
 800986a:	bf00      	nop
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	3730      	adds	r7, #48	@ 0x30
 8009870:	46bd      	mov	sp, r7
 8009872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009876 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
	return get();
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fc3a 	bl	800a0f8 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8009884:	4603      	mov	r3, r0
      }
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fc37 	bl	800a112 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
	return get();
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fc41 	bl	800a13e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 80098bc:	4603      	mov	r3, r0
      }
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	ca06      	ldmia	r2, {r1, r2}
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fc3d 	bl	800a158 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
    return as<T>();
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fca0 	bl	800a234 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 80098f4:	4603      	mov	r3, r0
  }
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
    this->set(src);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fcc7 	bl	800a29e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 8009910:	687b      	ldr	r3, [r7, #4]
  }
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
    return as<T>();
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fcc6 	bl	800a2ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800992e:	bf00      	nop
  }
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf14      	ite	ne
 8009948:	2301      	movne	r3, #1
 800994a:	2300      	moveq	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
	return _M_get();
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fccd 	bl	800a302 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8009968:	4603      	mov	r3, r0
      }
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fba3 	bl	80080dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
      { }
 80099a8:	4a04      	ldr	r2, [pc, #16]	@ (80099bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	08021850 	.word	0x08021850

080099c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
      { }
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff ffe9 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80099ce:	210c      	movs	r1, #12
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f015 fcca 	bl	801f36a <_ZdlPvj>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	4638      	mov	r0, r7
 80099ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 80099ee:	463b      	mov	r3, r7
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f8 ffac 	bl	800294e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e021      	b.n	8009a44 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 8009a00:	463b      	mov	r3, r7
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fbe6 	bl	80081d4 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 8009a0e:	463b      	mov	r3, r7
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f8 ffb9 	bl	8002988 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8009a16:	4603      	mov	r3, r0
 8009a18:	4619      	mov	r1, r3
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f7fe fc88 	bl	8008330 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e00f      	b.n	8009a44 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 8009a24:	6a38      	ldr	r0, [r7, #32]
 8009a26:	463b      	mov	r3, r7
 8009a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a2a:	f000 fc76 	bl	800a31a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 8009a2e:	6178      	str	r0, [r7, #20]
  if (dup) {
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7f9 f9f6 	bl	8002e2a <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009a4c:	b590      	push	{r4, r7, lr}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa6a 	bl	8009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009a62:	683c      	ldr	r4, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fa63 	bl	8009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d007      	beq.n	8009a84 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f81e 	bl	8009ab6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	68f9      	ldr	r1, [r7, #12]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fa7b 	bl	8009f7a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 8009a84:	bf00      	nop
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd90      	pop	{r4, r7, pc}

08009a8c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa4b 	bl	8009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa45 	bl	8009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
	return __p;
 8009aac:	68fb      	ldr	r3, [r7, #12]
      }
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fc50 	bl	800a366 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fc44 	bl	800a37e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fc47 	bl	800a39e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f902 	bl	8009d2e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3320      	adds	r3, #32
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fc85 	bl	8008466 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4618      	mov	r0, r3
 8009b62:	f015 fcf7 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009b7a:	683c      	ldr	r4, [r7, #0]
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	d006      	beq.n	8009b8e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 8009b80:	4620      	mov	r0, r4
 8009b82:	f7ff ffe2 	bl	8009b4a <_ZN17JsonConfigHandlerD1Ev>
 8009b86:	216c      	movs	r1, #108	@ 0x6c
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f015 fbee 	bl	801f36a <_ZdlPvj>
      }
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd90      	pop	{r4, r7, pc}

08009b96 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fc05 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fc06 	bl	800a3d4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fc09 	bl	800a3f4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009be2:	4603      	mov	r3, r0
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fa5b 	bl	800a0b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3338      	adds	r3, #56	@ 0x38
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fbf0 	bl	800a40e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	332c      	adds	r3, #44	@ 0x2c
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fbeb 	bl	800a40e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f015 fc8a 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009c4a:	b590      	push	{r4, r7, lr}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009c54:	683c      	ldr	r4, [r7, #0]
 8009c56:	2c00      	cmp	r4, #0
 8009c58:	d006      	beq.n	8009c68 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7ff ffde 	bl	8009c1c <_ZN9pruThreadD1Ev>
 8009c60:	2144      	movs	r1, #68	@ 0x44
 8009c62:	4620      	mov	r0, r4
 8009c64:	f015 fb81 	bl	801f36a <_ZdlPvj>
      }
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd90      	pop	{r4, r7, pc}

08009c70 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fbd4 	bl	800a444 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ffe6 	bl	8009c86 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009cc4:	b590      	push	{r4, r7, lr}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff ff16 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009cda:	683c      	ldr	r4, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff ff0f 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f81e 	bl	8009d2e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	68f9      	ldr	r1, [r7, #12]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff ff3a 	bl	8009b70 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 8009cfc:	bf00      	nop
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd90      	pop	{r4, r7, pc}

08009d04 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff fef7 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009d12:	4603      	mov	r3, r0
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fef1 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]
	return __p;
 8009d24:	68fb      	ldr	r3, [r7, #12]
      }
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fb97 	bl	800a46c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 fb67 	bl	800a484 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff ffe6 	bl	8009da0 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fb5f 	bl	800a4ac <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009dee:	4603      	mov	r3, r0
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fb5f 	bl	800a4c6 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d004      	beq.n	8009e42 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	3204      	adds	r2, #4
 8009e3c:	6812      	ldr	r2, [r2, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	4790      	blx	r2
      }
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fb41 	bl	800a4e0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8009e88:	6838      	ldr	r0, [r7, #0]
 8009e8a:	f000 fb43 	bl	800a514 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	f107 0308 	add.w	r3, r7, #8
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fb47 	bl	800a52a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fb5f 	bl	800a566 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8009ea8:	f107 0308 	add.w	r3, r7, #8
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fc6f 	bl	8008790 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8009eb2:	687b      	ldr	r3, [r7, #4]
      }
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fb65 	bl	800a594 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 fb64 	bl	800a5ac <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009f10:	68fc      	ldr	r4, [r7, #12]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff ffeb 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fb58 	bl	800a5d6 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd90      	pop	{r4, r7, pc}

08009f30 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fb64 	bl	800a608 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009f40:	4603      	mov	r3, r0
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff fdae 	bl	8009ab6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d004      	beq.n	8009f94 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	3204      	adds	r2, #4
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	4618      	mov	r0, r3
 8009f92:	4790      	blx	r2
      }
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fb01 	bl	800a622 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff ffe6 	bl	800a00a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fdbd 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a058:	4603      	mov	r3, r0
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800a05e:	683c      	ldr	r4, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fdb6 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a066:	4603      	mov	r3, r0
 800a068:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d007      	beq.n	800a080 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f81e 	bl	800a0b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800a076:	4603      	mov	r3, r0
 800a078:	68f9      	ldr	r1, [r7, #12]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff fde5 	bl	8009c4a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800a080:	bf00      	nop
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	bd90      	pop	{r4, r7, pc}

0800a088 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff fd9e 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a096:	4603      	mov	r3, r0
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff fd98 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
	return __p;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
      }
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fac4 	bl	800a64a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 faad 	bl	800a662 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a108:	4603      	mov	r3, r0
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	1d1a      	adds	r2, r3, #4
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f7ff fc1f 	bl	8009972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fa98 	bl	800a67e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a14e:	4603      	mov	r3, r0
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	1d38      	adds	r0, r7, #4
 800a162:	e880 0006 	stmia.w	r0, {r1, r2}
 800a166:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3304      	adds	r3, #4
 800a16c:	1d3a      	adds	r2, r7, #4
 800a16e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a172:	e883 0003 	stmia.w	r3, {r0, r1}
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	60da      	str	r2, [r3, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800a192:	687b      	ldr	r3, [r7, #4]
  }
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	3204      	adds	r2, #4
 800a1b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1b6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
 800a1dc:	f107 0110 	add.w	r1, r7, #16
 800a1e0:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff ffd8 	bl	800a1a0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	f107 0210 	add.w	r2, r7, #16
 800a1f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a20a:	b002      	add	sp, #8
 800a20c:	4770      	bx	lr

0800a20e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800a218:	6838      	ldr	r0, [r7, #0]
 800a21a:	f000 fa3e 	bl	800a69a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800a21e:	4602      	mov	r2, r0
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fa43 	bl	800a6b0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800a22a:	bf00      	nop
}
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a244:	6938      	ldr	r0, [r7, #16]
 800a246:	f000 fc5a 	bl	800aafe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a24a:	4604      	mov	r4, r0
 800a24c:	6938      	ldr	r0, [r7, #16]
 800a24e:	f000 fc66 	bl	800ab1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a252:	4602      	mov	r2, r0
 800a254:	f107 0308 	add.w	r3, r7, #8
 800a258:	4621      	mov	r1, r4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f8 ff27 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a260:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a26a:	f7f9 fc19 	bl	8003aa0 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800a26e:	4603      	mov	r3, r0
}
 800a270:	4618      	mov	r0, r3
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	bd90      	pop	{r4, r7, pc}

0800a278 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800a282:	6838      	ldr	r0, [r7, #0]
 800a284:	f000 fa23 	bl	800a6ce <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800a288:	4602      	mov	r2, r0
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fa28 	bl	800a6e4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800a294:	bf00      	nop
}
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa29 	bl	800a702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800a2b0:	4603      	mov	r3, r0
  }
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a2ba:	b590      	push	{r4, r7, lr}
 800a2bc:	b087      	sub	sp, #28
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800a2cc:	6938      	ldr	r0, [r7, #16]
 800a2ce:	f000 fe59 	bl	800af84 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	6938      	ldr	r0, [r7, #16]
 800a2d6:	f000 fe65 	bl	800afa4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	f107 0308 	add.w	r3, r7, #8
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f8 ff0e 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800a2e8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a2f4:	f7fe f852 	bl	800839c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800a2f8:	bf00      	nop
}
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd90      	pop	{r4, r7, pc}

0800a302 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa08 	bl	800a720 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a310:	4603      	mov	r3, r0
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b088      	sub	sp, #32
 800a31e:	af02      	add	r7, sp, #8
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	4638      	mov	r0, r7
 800a324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800a328:	463b      	mov	r3, r7
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f8 fb0f 	bl	800294e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800a336:	2300      	movs	r3, #0
 800a338:	e011      	b.n	800a35e <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f103 0008 	add.w	r0, r3, #8
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	463b      	mov	r3, r7
 800a348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a34a:	f000 f9f5 	bl	800a738 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800a34e:	6178      	str	r0, [r7, #20]
    if (!node)
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d102      	bne.n	800a35c <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	711a      	strb	r2, [r3, #4]
    return node;
 800a35c:	697b      	ldr	r3, [r7, #20]
  }
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa22 	bl	800a7b8 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a374:	4603      	mov	r3, r0
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa22 	bl	800a7d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fa2a 	bl	800a7e8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fa2b 	bl	800a804 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
      { }
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fa1d 	bl	800a81c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fa25 	bl	800a834 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fa26 	bl	800a850 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a404:	4603      	mov	r3, r0
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800a40e:	b5b0      	push	{r4, r5, r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681c      	ldr	r4, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fa46 	bl	800a8b2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800a426:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a428:	461a      	mov	r2, r3
 800a42a:	4629      	mov	r1, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fa4b 	bl	800a8c8 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fa23 	bl	800a880 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bdb0      	pop	{r4, r5, r7, pc}

0800a444 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff fb48 	bl	8009ae6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a456:	683c      	ldr	r4, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff fb51 	bl	8009b00 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a45e:	4603      	mov	r3, r0
 800a460:	601c      	str	r4, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd90      	pop	{r4, r7, pc}

0800a46c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa35 	bl	800a8e4 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a47a:	4603      	mov	r3, r0
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fa33 	bl	800a8fc <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a496:	683c      	ldr	r4, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff fca0 	bl	8009dde <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	601c      	str	r4, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd90      	pop	{r4, r7, pc}

0800a4ac <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fa2d 	bl	800a916 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fa2c 	bl	800a92e <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fa24 	bl	800a946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa62 	bl	800a9ce <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff ff39 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	1d1a      	adds	r2, r3, #4
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4619      	mov	r1, r3
 800a550:	4610      	mov	r0, r2
 800a552:	f000 fa47 	bl	800a9e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
      }
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fa49 	bl	800aa0e <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f000 fa2c 	bl	800a9e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff fc12 	bl	8009dde <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fc0c 	bl	8009dde <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
	return __p;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
      }
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800a5d6:	b5b0      	push	{r4, r5, r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	60f8      	str	r0, [r7, #12]
 800a5de:	60b9      	str	r1, [r7, #8]
 800a5e0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a5e2:	68fc      	ldr	r4, [r7, #12]
 800a5e4:	68b8      	ldr	r0, [r7, #8]
 800a5e6:	f000 fa31 	bl	800aa4c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fc7e 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f000 fa32 	bl	800aa62 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bdb0      	pop	{r4, r5, r7, pc}

0800a608 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fa41 	bl	800aa9a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a618:	4603      	mov	r3, r0
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a622:	b590      	push	{r4, r7, lr}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fac2 	bl	8009bb8 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a634:	683c      	ldr	r4, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff facb 	bl	8009bd2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a63c:	4603      	mov	r3, r0
 800a63e:	601c      	str	r4, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	bd90      	pop	{r4, r7, pc}

0800a64a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa2d 	bl	800aab2 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a658:	4603      	mov	r3, r0
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fa2c 	bl	800aaca <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a672:	4603      	mov	r3, r0
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fa2b 	bl	800aae4 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a68e:	4603      	mov	r3, r0
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a6a2:	687b      	ldr	r3, [r7, #4]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	2204      	movs	r2, #4
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7f8 f92d 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a6d6:	687b      	ldr	r3, [r7, #4]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7f8 f913 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800a70c:	461a      	mov	r2, r3
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fa14 	bl	800ab3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800a716:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b088      	sub	sp, #32
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	4638      	mov	r0, r7
 800a742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800a746:	463b      	mov	r3, r7
 800a748:	4619      	mov	r1, r3
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7fa ff96 	bl	800567c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800a750:	6178      	str	r0, [r7, #20]
    if (node) {
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	889b      	ldrh	r3, [r3, #4]
 800a75c:	3301      	adds	r3, #1
 800a75e:	b29a      	uxth	r2, r3
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	809a      	strh	r2, [r3, #4]
      return node;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	e023      	b.n	800a7b0 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800a768:	463b      	mov	r3, r7
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f8 f900 	bl	8002970 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800a770:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800a772:	6a39      	ldr	r1, [r7, #32]
 800a774:	6938      	ldr	r0, [r7, #16]
 800a776:	f7f8 f869 	bl	800284c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800a77a:	6178      	str	r0, [r7, #20]
    if (!node)
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800a782:	2300      	movs	r3, #0
 800a784:	e014      	b.n	800a7b0 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f103 0208 	add.w	r2, r3, #8
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	4613      	mov	r3, r2
 800a792:	463a      	mov	r2, r7
 800a794:	ca07      	ldmia	r2, {r0, r1, r2}
 800a796:	f000 f9ec 	bl	800ab72 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]
    add(node);
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7f8 f913 	bl	80029d4 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800a7ae:	697b      	ldr	r3, [r7, #20]
  }
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f9f6 	bl	800abb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f9f6 	bl	800abca <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f9e7 	bl	800abe0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800a812:	4603      	mov	r3, r0
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f9e8 	bl	800abfa <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f9d9 	bl	800ac10 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800a85e:	4603      	mov	r3, r0
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f9da 	bl	800ac2a <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a898:	461a      	mov	r2, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9d1 	bl	800ac42 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff ffe0 	bl	800a868 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f9c6 	bl	800ac68 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f9c8 	bl	800ac82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f9c7 	bl	800ac9a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f9cb 	bl	800acba <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800a924:	4603      	mov	r3, r0
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f9cc 	bl	800acd4 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a93c:	4603      	mov	r3, r0
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800a946:	b5b0      	push	{r4, r5, r7, lr}
 800a948:	b08a      	sub	sp, #40	@ 0x28
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	f107 031c 	add.w	r3, r7, #28
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f9c6 	bl	800acec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800a960:	f107 0314 	add.w	r3, r7, #20
 800a964:	f107 021c 	add.w	r2, r7, #28
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f9d7 	bl	800ad1e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800a970:	f107 0314 	add.w	r3, r7, #20
 800a974:	4618      	mov	r0, r3
 800a976:	f000 f9fa 	bl	800ad6e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800a97a:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	4619      	mov	r1, r3
 800a980:	202c      	movs	r0, #44	@ 0x2c
 800a982:	f7fd fb9f 	bl	80080c4 <_ZnwjPv>
 800a986:	4604      	mov	r4, r0
 800a988:	4629      	mov	r1, r5
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 f9fe 	bl	800ad8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800a990:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800a992:	f107 0314 	add.w	r3, r7, #20
 800a996:	2100      	movs	r1, #0
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fa19 	bl	800add0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800a9a4:	6a38      	ldr	r0, [r7, #32]
 800a9a6:	f000 fa22 	bl	800adee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	601a      	str	r2, [r3, #0]
	}
 800a9b0:	f107 0314 	add.w	r3, r7, #20
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 f9c5 	bl	800ad44 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800a9ba:	f107 031c 	add.w	r3, r7, #28
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 f9a1 	bl	800ad06 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3728      	adds	r7, #40	@ 0x28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bdb0      	pop	{r4, r5, r7, pc}

0800a9ce <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	{ }
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	601a      	str	r2, [r3, #0]
      }
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9f6 	bl	800ae0a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800aa24:	6838      	ldr	r0, [r7, #0]
 800aa26:	f000 f9f0 	bl	800ae0a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800aa32:	f107 030c 	add.w	r3, r7, #12
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f9e7 	bl	800ae0a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	601a      	str	r2, [r3, #0]
    }
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800aa62:	b590      	push	{r4, r7, lr}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fa3d 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa74:	4603      	mov	r3, r0
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f9d1 	bl	800ae20 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800aa7e:	68fc      	ldr	r4, [r7, #12]
 800aa80:	68b8      	ldr	r0, [r7, #8]
 800aa82:	f7ff ffe3 	bl	800aa4c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa86:	4603      	mov	r3, r0
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 f9da 	bl	800ae44 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd90      	pop	{r4, r7, pc}

0800aa9a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9df 	bl	800ae66 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f9e0 	bl	800ae80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800aac0:	4603      	mov	r3, r0
 800aac2:	4618      	mov	r0, r3
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 f9df 	bl	800ae98 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800aada:	4603      	mov	r3, r0
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f9de 	bl	800aeb0 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f9de 	bl	800aec8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f9e5 	bl	800aede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800ab14:	4603      	mov	r3, r0
  }
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f9ce 	bl	800aec8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f9e1 	bl	800aef6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ab34:	4603      	mov	r3, r0
  }
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800ab3e:	b590      	push	{r4, r7, lr}
 800ab40:	b087      	sub	sp, #28
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	681c      	ldr	r4, [r3, #0]
 800ab4e:	f107 0310 	add.w	r3, r7, #16
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f9da 	bl	800af0e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800ab5a:	f107 0310 	add.w	r3, r7, #16
 800ab5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 f9e9 	bl	800af3a <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800ab68:	4603      	mov	r3, r0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd90      	pop	{r4, r7, pc}

0800ab72 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800ab72:	b590      	push	{r4, r7, lr}
 800ab74:	b087      	sub	sp, #28
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	1d3c      	adds	r4, r7, #4
 800ab7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab7e:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e00c      	b.n	800aba0 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	18d4      	adds	r4, r2, r3
 800ab8c:	1d3b      	adds	r3, r7, #4
 800ab8e:	6979      	ldr	r1, [r7, #20]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f6 f8b9 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800ab96:	4603      	mov	r3, r0
 800ab98:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d3ee      	bcc.n	800ab86 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd90      	pop	{r4, r7, pc}

0800abb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa02 	bl	800afc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4618      	mov	r0, r3
 800abec:	f000 f9f5 	bl	800afda <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800abf0:	4603      	mov	r3, r0
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f9e8 	bl	800aff0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800ac20:	4603      	mov	r3, r0
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f9e7 	bl	800b006 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
	if (__p)
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f9de 	bl	800b01c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f9e0 	bl	800b03a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9ee 	bl	800b06c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800ac90:	4603      	mov	r3, r0
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f9ed 	bl	800b082 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f9f5 	bl	800b09a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f9f6 	bl	800b0b6 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800acca:	4603      	mov	r3, r0
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f9f5 	bl	800b0cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800ace2:	4603      	mov	r3, r0
 800ace4:	4618      	mov	r0, r3
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9f4 	bl	800b0e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9f3 	bl	800b0fa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800ad28:	2101      	movs	r1, #1
 800ad2a:	6838      	ldr	r0, [r7, #0]
 800ad2c:	f000 f9f0 	bl	800b110 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f9f9 	bl	800b12e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f000 f9f9 	bl	800b156 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f9fa 	bl	800b174 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800ad80:	4603      	mov	r3, r0
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800ad8c:	b590      	push	{r4, r7, lr}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 f9f7 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ad9e:	4a0b      	ldr	r2, [pc, #44]	@ (800adcc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	330c      	adds	r3, #12
 800ada8:	4621      	mov	r1, r4
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fa04 	bl	800b1b8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f81c 	bl	800adee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800adb6:	4602      	mov	r2, r0
 800adb8:	463b      	mov	r3, r7
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fa0a 	bl	800b1d6 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}
 800adcc:	08021834 	.word	0x08021834

0800add0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	605a      	str	r2, [r3, #4]
	return *this;
 800ade0:	687b      	ldr	r3, [r7, #4]
      }
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	330c      	adds	r3, #12
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 f9f7 	bl	800b1ee <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ae2a:	6838      	ldr	r0, [r7, #0]
 800ae2c:	f7ff f85f 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ae30:	4603      	mov	r3, r0
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f9e6 	bl	800b206 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ae4e:	6838      	ldr	r0, [r7, #0]
 800ae50:	f7ff fdfc 	bl	800aa4c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800ae54:	4603      	mov	r3, r0
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 f9db 	bl	800b22c <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800ae76:	4603      	mov	r3, r0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f9da 	bl	800b242 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f9d9 	bl	800b258 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800aea6:	4603      	mov	r3, r0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f9da 	bl	800b272 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800aebe:	4603      	mov	r3, r0
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800aed0:	687b      	ldr	r3, [r7, #4]
  }
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
    return client.getData();
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9d0 	bl	800b28c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800aeec:	4603      	mov	r3, r0
  }
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f9e0 	bl	800b2c4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800af04:	4603      	mov	r3, r0
  }
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800af0e:	b590      	push	{r4, r7, lr}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800af18:	6838      	ldr	r0, [r7, #0]
 800af1a:	f000 f9e1 	bl	800b2e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800af1e:	4604      	mov	r4, r0
 800af20:	6838      	ldr	r0, [r7, #0]
 800af22:	f7ff fdfc 	bl	800ab1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800af26:	4603      	mov	r3, r0
 800af28:	461a      	mov	r2, r3
 800af2a:	4621      	mov	r1, r4
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7f8 f8e9 	bl	8003104 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	bd90      	pop	{r4, r7, pc}

0800af3a <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b086      	sub	sp, #24
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	1d3b      	adds	r3, r7, #4
 800af44:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800af48:	1d3b      	adds	r3, r7, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f9 fe22 	bl	8004b94 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800af50:	6178      	str	r0, [r7, #20]
    if (!data)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800af58:	2300      	movs	r3, #0
 800af5a:	e00f      	b.n	800af7c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800af5c:	1d3b      	adds	r3, r7, #4
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f9 ffbd 	bl	8004ede <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800af64:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800af66:	6939      	ldr	r1, [r7, #16]
 800af68:	6978      	ldr	r0, [r7, #20]
 800af6a:	f7f8 fdff 	bl	8003b6c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	6978      	ldr	r0, [r7, #20]
 800af74:	f000 f9c4 	bl	800b300 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800af78:	4603      	mov	r3, r0
 800af7a:	bf00      	nop
  }
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff f8fc 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800af92:	4603      	mov	r3, r0
 800af94:	4618      	mov	r0, r3
 800af96:	f000 f9f6 	bl	800b386 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800af9a:	4603      	mov	r3, r0
  }
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff f8ec 	bl	800a18a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800afb2:	4603      	mov	r3, r0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fa05 	bl	800b3c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800afba:	4603      	mov	r3, r0
  }
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f9d5 	bl	800b3dc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b044:	e009      	b.n	800b05a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f9d7 	bl	800b3fa <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800b04c:	4603      	mov	r3, r0
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 f9de 	bl	800b410 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3308      	adds	r3, #8
 800b058:	607b      	str	r3, [r7, #4]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d1f1      	bne.n	800b046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800b062:	bf00      	nop
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f9cb 	bl	800b426 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f9b1 	bl	800b43c <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b11a:	2200      	movs	r2, #0
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f998 	bl	800b454 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800b124:	4603      	mov	r3, r0
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800b13a:	68b8      	ldr	r0, [r7, #8]
 800b13c:	f000 f9b8 	bl	800b4b0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800b140:	4602      	mov	r2, r0
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	605a      	str	r2, [r3, #4]
      { }
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f000 f9ad 	bl	800b4c6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800b16c:	bf00      	nop
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800b17c:	687b      	ldr	r3, [r7, #4]
    }
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800b194:	4a07      	ldr	r2, [pc, #28]	@ (800b1b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	605a      	str	r2, [r3, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	609a      	str	r2, [r3, #8]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	08021850 	.word	0x08021850

0800b1b8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	7039      	strb	r1, [r7, #0]
 800b1c2:	463b      	mov	r3, r7
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f98e 	bl	800b4e8 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800b1e0:	6838      	ldr	r0, [r7, #0]
 800b1e2:	f000 f98d 	bl	800b500 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f993 	bl	800b522 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800b210:	687c      	ldr	r4, [r7, #4]
 800b212:	6838      	ldr	r0, [r7, #0]
 800b214:	f7fe fe6b 	bl	8009eee <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b218:	4603      	mov	r3, r0
 800b21a:	4619      	mov	r1, r3
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 f98b 	bl	800b538 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd90      	pop	{r4, r7, pc}

0800b22c <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	f000 f974 	bl	800b550 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800b268:	4603      	mov	r3, r0
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f972 	bl	800b566 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800b282:	4603      	mov	r3, r0
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b085      	sub	sp, #20
 800b290:	af02      	add	r7, sp, #8
 800b292:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f874 	bl	800b386 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800b29e:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f88d 	bl	800b3c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b2aa:	4602      	mov	r2, r0
    return VariantData::getMember(
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	9200      	str	r2, [sp, #0]
 800b2b0:	3314      	adds	r3, #20
 800b2b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7fb fef1 	bl	800709c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800b2ba:	4603      	mov	r3, r0
  }
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd90      	pop	{r4, r7, pc}

0800b2c4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f877 	bl	800b3c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b2d6:	4603      	mov	r3, r0
  }
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff fded 	bl	800aec8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 f943 	bl	800b57c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800b2f6:	4603      	mov	r3, r0
  }
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800b300:	b5b0      	push	{r4, r5, r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800b30c:	68b8      	ldr	r0, [r7, #8]
 800b30e:	f7fb f98e 	bl	800662e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	220a      	movs	r2, #10
 800b31c:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	e02a      	b.n	800b37c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800b326:	f107 0310 	add.w	r3, r7, #16
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f8 fa36 	bl	800379e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b332:	f107 0310 	add.w	r3, r7, #16
 800b336:	4618      	mov	r0, r3
 800b338:	f7fc fb53 	bl	80079e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f083 0301 	eor.w	r3, r3, #1
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800b348:	2300      	movs	r3, #0
 800b34a:	e018      	b.n	800b37e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	221a      	movs	r2, #26
 800b350:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800b352:	f107 0310 	add.w	r3, r7, #16
 800b356:	4618      	mov	r0, r3
 800b358:	f7fc fb54 	bl	8007a04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461a      	mov	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	461c      	mov	r4, r3
 800b36a:	4615      	mov	r5, r2
 800b36c:	f107 0310 	add.w	r3, r7, #16
 800b370:	4618      	mov	r0, r3
 800b372:	f7fc fb53 	bl	8007a1c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800b376:	4603      	mov	r3, r0
 800b378:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800b37c:	2301      	movs	r3, #1
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bdb0      	pop	{r4, r5, r7, pc}

0800b386 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b386:	b5b0      	push	{r4, r5, r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3304      	adds	r3, #4
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f96d 	bl	800b676 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800b39c:	4605      	mov	r5, r0
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 f971 	bl	800b68e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b3ac:	4603      	mov	r3, r0
    return VariantData::getElement(
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7fc ff5b 	bl	800826e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800b3b8:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800b3ba:	bf00      	nop
  }
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b3c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f8e1 	bl	800b594 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800b3d2:	4603      	mov	r3, r0
  }
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	68b8      	ldr	r0, [r7, #8]
 800b3f0:	f013 ffbb 	bl	801f36a <_ZdlPvj>
      }
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7fd fa22 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800b41e:	bf00      	nop
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f8d7 	bl	800b614 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800b466:	4602      	mov	r2, r0
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4293      	cmp	r3, r2
 800b46c:	bf8c      	ite	hi
 800b46e:	2301      	movhi	r3, #1
 800b470:	2300      	movls	r3, #0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	bf14      	ite	ne
 800b478:	2301      	movne	r3, #1
 800b47a:	2300      	moveq	r3, #0
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d007      	beq.n	800b492 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4a09      	ldr	r2, [pc, #36]	@ (800b4ac <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d901      	bls.n	800b48e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800b48a:	f013 ff95 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800b48e:	f013 ff90 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	222c      	movs	r2, #44	@ 0x2c
 800b496:	fb02 f303 	mul.w	r3, r2, r3
 800b49a:	4618      	mov	r0, r3
 800b49c:	f013 ff76 	bl	801f38c <_Znwj>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	bf00      	nop
      }
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	05d1745d 	.word	0x05d1745d

0800b4b0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	222c      	movs	r2, #44	@ 0x2c
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
 800b4da:	4619      	mov	r1, r3
 800b4dc:	68b8      	ldr	r0, [r7, #8]
 800b4de:	f013 ff44 	bl	801f36a <_ZdlPvj>
      }
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4619      	mov	r1, r3
 800b50c:	2020      	movs	r0, #32
 800b50e:	f7fc fdd9 	bl	80080c4 <_ZnwjPv>
 800b512:	4603      	mov	r3, r0
 800b514:	4618      	mov	r0, r3
 800b516:	f001 ffbb 	bl	800d490 <_ZN12CommsHandlerC1Ev>
    }
 800b51a:	bf00      	nop
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b52a:	687b      	ldr	r3, [r7, #4]
      }
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4618      	mov	r0, r3
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f853 	bl	800b630 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800b58a:	4603      	mov	r3, r0
  }
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 f874 	bl	800b68e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b5a6:	4603      	mov	r3, r0
  }
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800b5be:	463b      	mov	r3, r7
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f7 f9c4 	bl	800294e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e01d      	b.n	800b60c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7fc fe87 	bl	80082e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7f7 fc7d 	bl	8002edc <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	e003      	b.n	800b5ee <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7f7 fb6d 	bl	8002cc6 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	617b      	str	r3, [r7, #20]
    if (!obj)
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e008      	b.n	800b60c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800b5fa:	6978      	ldr	r0, [r7, #20]
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	463b      	mov	r3, r7
 800b602:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b604:	f000 f84f 	bl	800b6a6 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b608:	4603      	mov	r3, r0
 800b60a:	bf00      	nop
  }
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b61c:	4b03      	ldr	r3, [pc, #12]	@ (800b62c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	02e8ba2e 	.word	0x02e8ba2e

0800b630 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b087      	sub	sp, #28
 800b634:	af02      	add	r7, sp, #8
 800b636:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f853 	bl	800b6e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800b642:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e00f      	b.n	800b66e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800b64e:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff feb5 	bl	800b3c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b65a:	4602      	mov	r2, r0
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	9200      	str	r2, [sp, #0]
 800b660:	3314      	adds	r3, #20
 800b662:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff ffa3 	bl	800b5b0 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800b66a:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800b66c:	bf00      	nop
  }
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	bd90      	pop	{r4, r7, pc}

0800b676 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fc fed5 	bl	800842e <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800b684:	4603      	mov	r3, r0
  }
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7fc febd 	bl	8008416 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800b69c:	4603      	mov	r3, r0
  }
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af02      	add	r7, sp, #8
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7fa f984 	bl	80059ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800b6c2:	6178      	str	r0, [r7, #20]
  if (data)
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	e008      	b.n	800b6e0 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	463b      	mov	r3, r7
 800b6d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 f812 	bl	800b700 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	bf00      	nop
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f85b 	bl	800b7ac <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800b6f6:	4603      	mov	r3, r0
  }
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	@ 0x28
 800b704:	af02      	add	r7, sp, #8
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	4638      	mov	r0, r7
 800b70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800b70e:	f107 0318 	add.w	r3, r7, #24
 800b712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b714:	4618      	mov	r0, r3
 800b716:	f7f7 ffbd 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800b71a:	f107 0318 	add.w	r3, r7, #24
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f9 fa5c 	bl	8004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b724:	4603      	mov	r3, r0
 800b726:	f083 0301 	eor.w	r3, r3, #1
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800b730:	2300      	movs	r3, #0
 800b732:	e037      	b.n	800b7a4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800b734:	f107 0310 	add.w	r3, r7, #16
 800b738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f7 ffaa 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800b740:	f107 0310 	add.w	r3, r7, #16
 800b744:	4618      	mov	r0, r3
 800b746:	f7f9 fa49 	bl	8004bdc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f083 0301 	eor.w	r3, r3, #1
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800b756:	2300      	movs	r3, #0
 800b758:	e024      	b.n	800b7a4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800b75a:	f107 0318 	add.w	r3, r7, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f9 fa65 	bl	8004c2e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800b764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	463b      	mov	r3, r7
 800b76a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b76c:	f7fe f938 	bl	80099e0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800b770:	4603      	mov	r3, r0
 800b772:	f083 0301 	eor.w	r3, r3, #1
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e011      	b.n	800b7a4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f107 0218 	add.w	r2, r7, #24
 800b790:	ca06      	ldmia	r2, {r1, r2}
 800b792:	f7f7 fef8 	bl	8003586 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800b796:	f107 0310 	add.w	r3, r7, #16
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f9 fa2f 	bl	8004bfe <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	bf00      	nop
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800b7ac:	b5b0      	push	{r4, r5, r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f81a 	bl	800b7f2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800b7be:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e00f      	b.n	800b7ea <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800b7ca:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68dd      	ldr	r5, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff ff5a 	bl	800b68e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4629      	mov	r1, r5
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7fc fd59 	bl	8008298 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800b7e6:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800b7e8:	bf00      	nop
  }
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bdb0      	pop	{r4, r5, r7, pc}

0800b7f2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7fc fe25 	bl	800844a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800b800:	4603      	mov	r3, r0
  }
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <_Z41__static_initialization_and_destruction_0ii>:
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d10a      	bne.n	800b832 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b822:	4293      	cmp	r3, r2
 800b824:	d105      	bne.n	800b832 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800b826:	4805      	ldr	r0, [pc, #20]	@ (800b83c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b828:	f7fc fca2 	bl	8008170 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800b82c:	4804      	ldr	r0, [pc, #16]	@ (800b840 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b82e:	f7f5 fa01 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	30000080 	.word	0x30000080
 800b840:	300000c0 	.word	0x300000c0

0800b844 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	4a05      	ldr	r2, [pc, #20]	@ (800b864 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe f8a3 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	08021834 	.word	0x08021834

0800b868 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff ffe7 	bl	800b844 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b876:	212c      	movs	r1, #44	@ 0x2c
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f013 fd76 	bl	801f36a <_ZdlPvj>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	330c      	adds	r3, #12
 800b894:	4618      	mov	r0, r3
 800b896:	f000 f856 	bl	800b946 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b89a:	4604      	mov	r4, r0
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff faa6 	bl	800adee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f859 	bl	800b95e <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd90      	pop	{r4, r7, pc}

0800b8b4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	330c      	adds	r3, #12
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 f840 	bl	800b946 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	f107 0314 	add.w	r3, r7, #20
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fa0c 	bl	800acec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800b8d4:	f107 0114 	add.w	r1, r7, #20
 800b8d8:	f107 030c 	add.w	r3, r7, #12
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fc25 	bl	800b12e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff ffad 	bl	800b844 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fa28 	bl	800ad44 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800b8f4:	f107 0314 	add.w	r3, r7, #20
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff fa04 	bl	800ad06 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fa6d 	bl	800adee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b914:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b916:	f7fc fc21 	bl	800815c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800b91a:	4602      	mov	r2, r0
	    ||
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	4293      	cmp	r3, r2
 800b920:	d005      	beq.n	800b92e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800b922:	6838      	ldr	r0, [r7, #0]
 800b924:	f013 fd5e 	bl	801f3e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800b928:	4603      	mov	r3, r0
	    ||
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800b932:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	e000      	b.n	800b93e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800b93c:	2300      	movs	r3, #0
      }
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f811 	bl	800b976 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800b954:	4603      	mov	r3, r0
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f000 f80f 	bl	800b98c <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
    }
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	f7ff ff2c 	bl	800b80c <_Z41__static_initialization_and_destruction_0ii>
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9be:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <HAL_MspInit+0x30>)
 800b9c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9c4:	4a08      	ldr	r2, [pc, #32]	@ (800b9e8 <HAL_MspInit+0x30>)
 800b9c6:	f043 0302 	orr.w	r3, r3, #2
 800b9ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b9ce:	4b06      	ldr	r3, [pc, #24]	@ (800b9e8 <HAL_MspInit+0x30>)
 800b9d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9d4:	f003 0302 	and.w	r3, r3, #2
 800b9d8:	607b      	str	r3, [r7, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	58024400 	.word	0x58024400

0800b9ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b0bc      	sub	sp, #240	@ 0xf0
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	609a      	str	r2, [r3, #8]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ba04:	f107 0318 	add.w	r3, r7, #24
 800ba08:	22c0      	movs	r2, #192	@ 0xc0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f014 fba9 	bl	8020164 <memset>
  if(hsd->Instance==SDMMC1)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a3c      	ldr	r2, [pc, #240]	@ (800bb08 <HAL_SD_MspInit+0x11c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d171      	bne.n	800bb00 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800ba1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba2c:	f107 0318 	add.w	r3, r7, #24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f00a fe9d 	bl	8016770 <HAL_RCCEx_PeriphCLKConfig>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800ba3c:	f7fc fb36 	bl	80080ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ba40:	4b32      	ldr	r3, [pc, #200]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ba46:	4a31      	ldr	r2, [pc, #196]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ba50:	4b2e      	ldr	r3, [pc, #184]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ba56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba5e:	4b2b      	ldr	r3, [pc, #172]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba64:	4a29      	ldr	r2, [pc, #164]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba66:	f043 0304 	orr.w	r3, r3, #4
 800ba6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ba6e:	4b27      	ldr	r3, [pc, #156]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ba7c:	4b23      	ldr	r3, [pc, #140]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba82:	4a22      	ldr	r2, [pc, #136]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba84:	f043 0308 	orr.w	r3, r3, #8
 800ba88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ba8c:	4b1f      	ldr	r3, [pc, #124]	@ (800bb0c <HAL_SD_MspInit+0x120>)
 800ba8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba92:	f003 0308 	and.w	r3, r3, #8
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ba9a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800ba9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baa2:	2302      	movs	r3, #2
 800baa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baa8:	2300      	movs	r3, #0
 800baaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baae:	2303      	movs	r3, #3
 800bab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800bab4:	230c      	movs	r3, #12
 800bab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800baba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800babe:	4619      	mov	r1, r3
 800bac0:	4813      	ldr	r0, [pc, #76]	@ (800bb10 <HAL_SD_MspInit+0x124>)
 800bac2:	f009 fc53 	bl	801536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bac6:	2304      	movs	r3, #4
 800bac8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bacc:	2302      	movs	r3, #2
 800bace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bad8:	2303      	movs	r3, #3
 800bada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800bade:	230c      	movs	r3, #12
 800bae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bae4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800bae8:	4619      	mov	r1, r3
 800baea:	480a      	ldr	r0, [pc, #40]	@ (800bb14 <HAL_SD_MspInit+0x128>)
 800baec:	f009 fc3e 	bl	801536c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	2031      	movs	r0, #49	@ 0x31
 800baf6:	f007 f848 	bl	8012b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800bafa:	2031      	movs	r0, #49	@ 0x31
 800bafc:	f007 f85f 	bl	8012bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800bb00:	bf00      	nop
 800bb02:	37f0      	adds	r7, #240	@ 0xf0
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	52007000 	.word	0x52007000
 800bb0c:	58024400 	.word	0x58024400
 800bb10:	58020800 	.word	0x58020800
 800bb14:	58020c00 	.word	0x58020c00

0800bb18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b0ba      	sub	sp, #232	@ 0xe8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	605a      	str	r2, [r3, #4]
 800bb2a:	609a      	str	r2, [r3, #8]
 800bb2c:	60da      	str	r2, [r3, #12]
 800bb2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb30:	f107 0310 	add.w	r3, r7, #16
 800bb34:	22c0      	movs	r2, #192	@ 0xc0
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f014 fb13 	bl	8020164 <memset>
  if(huart->Instance==USART1)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a27      	ldr	r2, [pc, #156]	@ (800bbe0 <HAL_UART_MspInit+0xc8>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d146      	bne.n	800bbd6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bb48:	f04f 0201 	mov.w	r2, #1
 800bb4c:	f04f 0300 	mov.w	r3, #0
 800bb50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800bb54:	2300      	movs	r3, #0
 800bb56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb5a:	f107 0310 	add.w	r3, r7, #16
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f00a fe06 	bl	8016770 <HAL_RCCEx_PeriphCLKConfig>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800bb6a:	f7fc fa9f 	bl	80080ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb74:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb76:	f043 0310 	orr.w	r3, r3, #16
 800bb7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bb7e:	4b19      	ldr	r3, [pc, #100]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb8c:	4b15      	ldr	r3, [pc, #84]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb92:	4a14      	ldr	r2, [pc, #80]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bb9c:	4b11      	ldr	r3, [pc, #68]	@ (800bbe4 <HAL_UART_MspInit+0xcc>)
 800bb9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	60bb      	str	r3, [r7, #8]
 800bba8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800bbaa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800bbae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bbc4:	2307      	movs	r3, #7
 800bbc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <HAL_UART_MspInit+0xd0>)
 800bbd2:	f009 fbcb 	bl	801536c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800bbd6:	bf00      	nop
 800bbd8:	37e8      	adds	r7, #232	@ 0xe8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	40011000 	.word	0x40011000
 800bbe4:	58024400 	.word	0x58024400
 800bbe8:	58020000 	.word	0x58020000

0800bbec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bbec:	b480      	push	{r7}
 800bbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bbf0:	bf00      	nop
 800bbf2:	e7fd      	b.n	800bbf0 <NMI_Handler+0x4>

0800bbf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bbf8:	bf00      	nop
 800bbfa:	e7fd      	b.n	800bbf8 <HardFault_Handler+0x4>

0800bbfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc00:	bf00      	nop
 800bc02:	e7fd      	b.n	800bc00 <MemManage_Handler+0x4>

0800bc04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc08:	bf00      	nop
 800bc0a:	e7fd      	b.n	800bc08 <BusFault_Handler+0x4>

0800bc0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <UsageFault_Handler+0x4>

0800bc14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bc18:	bf00      	nop
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc22:	b480      	push	{r7}
 800bc24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bc26:	bf00      	nop
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bc34:	bf00      	nop
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bc42:	f006 fe61 	bl	8012908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bc46:	bf00      	nop
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800bc50:	4802      	ldr	r0, [pc, #8]	@ (800bc5c <SDMMC1_IRQHandler+0x10>)
 800bc52:	f00d fcfb 	bl	801964c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800bc56:	bf00      	nop
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	240002f8 	.word	0x240002f8

0800bc60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
	return 1;
 800bc64:	2301      	movs	r3, #1
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <_kill>:

int _kill(int pid, int sig)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bc7a:	f014 fb15 	bl	80202a8 <__errno>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2216      	movs	r2, #22
 800bc82:	601a      	str	r2, [r3, #0]
	return -1;
 800bc84:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <_exit>:

void _exit (int status)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bc98:	f04f 31ff 	mov.w	r1, #4294967295
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7ff ffe7 	bl	800bc70 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bca2:	bf00      	nop
 800bca4:	e7fd      	b.n	800bca2 <_exit+0x12>

0800bca6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	e00a      	b.n	800bcce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bcb8:	f3af 8000 	nop.w
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	60ba      	str	r2, [r7, #8]
 800bcc4:	b2ca      	uxtb	r2, r1
 800bcc6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	3301      	adds	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	dbf0      	blt.n	800bcb8 <_read+0x12>
	}

return len;
 800bcd6:	687b      	ldr	r3, [r7, #4]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]
 800bcf0:	e009      	b.n	800bd06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	60ba      	str	r2, [r7, #8]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fb ff22 	bl	8007b44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	3301      	adds	r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	dbf1      	blt.n	800bcf2 <_write+0x12>
	}
	return len;
 800bd0e:	687b      	ldr	r3, [r7, #4]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_close>:

int _close(int file)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	return -1;
 800bd20:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bd40:	605a      	str	r2, [r3, #4]
	return 0;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <_isatty>:

int _isatty(int file)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	return 1;
 800bd58:	2301      	movs	r3, #1
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
	return 0;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bd88:	4a14      	ldr	r2, [pc, #80]	@ (800bddc <_sbrk+0x5c>)
 800bd8a:	4b15      	ldr	r3, [pc, #84]	@ (800bde0 <_sbrk+0x60>)
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bd94:	4b13      	ldr	r3, [pc, #76]	@ (800bde4 <_sbrk+0x64>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bd9c:	4b11      	ldr	r3, [pc, #68]	@ (800bde4 <_sbrk+0x64>)
 800bd9e:	4a12      	ldr	r2, [pc, #72]	@ (800bde8 <_sbrk+0x68>)
 800bda0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bda2:	4b10      	ldr	r3, [pc, #64]	@ (800bde4 <_sbrk+0x64>)
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4413      	add	r3, r2
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d207      	bcs.n	800bdc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bdb0:	f014 fa7a 	bl	80202a8 <__errno>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	220c      	movs	r2, #12
 800bdb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbe:	e009      	b.n	800bdd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bdc0:	4b08      	ldr	r3, [pc, #32]	@ (800bde4 <_sbrk+0x64>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bdc6:	4b07      	ldr	r3, [pc, #28]	@ (800bde4 <_sbrk+0x64>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	4a05      	ldr	r2, [pc, #20]	@ (800bde4 <_sbrk+0x64>)
 800bdd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	24080000 	.word	0x24080000
 800bde0:	00000400 	.word	0x00000400
 800bde4:	24000408 	.word	0x24000408
 800bde8:	24000c10 	.word	0x24000c10

0800bdec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bdf0:	4b37      	ldr	r3, [pc, #220]	@ (800bed0 <SystemInit+0xe4>)
 800bdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf6:	4a36      	ldr	r2, [pc, #216]	@ (800bed0 <SystemInit+0xe4>)
 800bdf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bdfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800be00:	4b34      	ldr	r3, [pc, #208]	@ (800bed4 <SystemInit+0xe8>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	2b06      	cmp	r3, #6
 800be0a:	d807      	bhi.n	800be1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800be0c:	4b31      	ldr	r3, [pc, #196]	@ (800bed4 <SystemInit+0xe8>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f023 030f 	bic.w	r3, r3, #15
 800be14:	4a2f      	ldr	r2, [pc, #188]	@ (800bed4 <SystemInit+0xe8>)
 800be16:	f043 0307 	orr.w	r3, r3, #7
 800be1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800be1c:	4b2e      	ldr	r3, [pc, #184]	@ (800bed8 <SystemInit+0xec>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a2d      	ldr	r2, [pc, #180]	@ (800bed8 <SystemInit+0xec>)
 800be22:	f043 0301 	orr.w	r3, r3, #1
 800be26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800be28:	4b2b      	ldr	r3, [pc, #172]	@ (800bed8 <SystemInit+0xec>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800be2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bed8 <SystemInit+0xec>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	4929      	ldr	r1, [pc, #164]	@ (800bed8 <SystemInit+0xec>)
 800be34:	4b29      	ldr	r3, [pc, #164]	@ (800bedc <SystemInit+0xf0>)
 800be36:	4013      	ands	r3, r2
 800be38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800be3a:	4b26      	ldr	r3, [pc, #152]	@ (800bed4 <SystemInit+0xe8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0308 	and.w	r3, r3, #8
 800be42:	2b00      	cmp	r3, #0
 800be44:	d007      	beq.n	800be56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800be46:	4b23      	ldr	r3, [pc, #140]	@ (800bed4 <SystemInit+0xe8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f023 030f 	bic.w	r3, r3, #15
 800be4e:	4a21      	ldr	r2, [pc, #132]	@ (800bed4 <SystemInit+0xe8>)
 800be50:	f043 0307 	orr.w	r3, r3, #7
 800be54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800be56:	4b20      	ldr	r3, [pc, #128]	@ (800bed8 <SystemInit+0xec>)
 800be58:	2200      	movs	r2, #0
 800be5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800be5c:	4b1e      	ldr	r3, [pc, #120]	@ (800bed8 <SystemInit+0xec>)
 800be5e:	2200      	movs	r2, #0
 800be60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800be62:	4b1d      	ldr	r3, [pc, #116]	@ (800bed8 <SystemInit+0xec>)
 800be64:	2200      	movs	r2, #0
 800be66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800be68:	4b1b      	ldr	r3, [pc, #108]	@ (800bed8 <SystemInit+0xec>)
 800be6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bee0 <SystemInit+0xf4>)
 800be6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800be6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <SystemInit+0xec>)
 800be70:	4a1c      	ldr	r2, [pc, #112]	@ (800bee4 <SystemInit+0xf8>)
 800be72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800be74:	4b18      	ldr	r3, [pc, #96]	@ (800bed8 <SystemInit+0xec>)
 800be76:	4a1c      	ldr	r2, [pc, #112]	@ (800bee8 <SystemInit+0xfc>)
 800be78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800be7a:	4b17      	ldr	r3, [pc, #92]	@ (800bed8 <SystemInit+0xec>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800be80:	4b15      	ldr	r3, [pc, #84]	@ (800bed8 <SystemInit+0xec>)
 800be82:	4a19      	ldr	r2, [pc, #100]	@ (800bee8 <SystemInit+0xfc>)
 800be84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800be86:	4b14      	ldr	r3, [pc, #80]	@ (800bed8 <SystemInit+0xec>)
 800be88:	2200      	movs	r2, #0
 800be8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800be8c:	4b12      	ldr	r3, [pc, #72]	@ (800bed8 <SystemInit+0xec>)
 800be8e:	4a16      	ldr	r2, [pc, #88]	@ (800bee8 <SystemInit+0xfc>)
 800be90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800be92:	4b11      	ldr	r3, [pc, #68]	@ (800bed8 <SystemInit+0xec>)
 800be94:	2200      	movs	r2, #0
 800be96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <SystemInit+0xec>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a0e      	ldr	r2, [pc, #56]	@ (800bed8 <SystemInit+0xec>)
 800be9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bea2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bea4:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <SystemInit+0xec>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800beaa:	4b10      	ldr	r3, [pc, #64]	@ (800beec <SystemInit+0x100>)
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	4b10      	ldr	r3, [pc, #64]	@ (800bef0 <SystemInit+0x104>)
 800beb0:	4013      	ands	r3, r2
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb6:	d202      	bcs.n	800bebe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800beb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bef4 <SystemInit+0x108>)
 800beba:	2201      	movs	r2, #1
 800bebc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bebe:	4b0e      	ldr	r3, [pc, #56]	@ (800bef8 <SystemInit+0x10c>)
 800bec0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800bec4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bec6:	bf00      	nop
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	e000ed00 	.word	0xe000ed00
 800bed4:	52002000 	.word	0x52002000
 800bed8:	58024400 	.word	0x58024400
 800bedc:	eaf6ed7f 	.word	0xeaf6ed7f
 800bee0:	02020200 	.word	0x02020200
 800bee4:	01ff0000 	.word	0x01ff0000
 800bee8:	01010280 	.word	0x01010280
 800beec:	5c001000 	.word	0x5c001000
 800bef0:	ffff0000 	.word	0xffff0000
 800bef4:	51008108 	.word	0x51008108
 800bef8:	52004000 	.word	0x52004000

0800befc <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b09a      	sub	sp, #104	@ 0x68
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800bf08:	f107 031c 	add.w	r3, r7, #28
 800bf0c:	4a23      	ldr	r2, [pc, #140]	@ (800bf9c <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800bf0e:	68b9      	ldr	r1, [r7, #8]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 f8b7 	bl	800c084 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bf16:	f107 031c 	add.w	r3, r7, #28
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7f9 f916 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bf20:	4603      	mov	r3, r0
 800bf22:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800bf24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bf28:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7f9 f919 	bl	8005164 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bf32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f8c9 	bl	800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800bf40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bf44:	4a17      	ldr	r2, [pc, #92]	@ (800bfa4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 f8cc 	bl	800c0e6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bf4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7f9 f92b 	bl	80051ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4619      	mov	r1, r3
 800bf62:	4811      	ldr	r0, [pc, #68]	@ (800bfa8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800bf64:	f013 ff94 	bl	801fe90 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800bf68:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800bf6c:	f107 0314 	add.w	r3, r7, #20
 800bf70:	f107 0210 	add.w	r2, r7, #16
 800bf74:	f107 0118 	add.w	r1, r7, #24
 800bf78:	f000 f8da 	bl	800c130 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800bf7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800bf80:	4619      	mov	r1, r3
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f937 	bl	800c1f6 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800bf88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f910 	bl	800c1b2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800bf92:	bf00      	nop
}
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	3768      	adds	r7, #104	@ 0x68
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	08021230 	.word	0x08021230
 800bfa0:	08021234 	.word	0x08021234
 800bfa4:	08021240 	.word	0x08021240
 800bfa8:	0802124c 	.word	0x0802124c

0800bfac <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f002 fdf5 	bl	800ebac <_ZN6ModuleC1Ev>
 800bfc2:	4a15      	ldr	r2, [pc, #84]	@ (800c018 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	601a      	str	r2, [r3, #0]
	bState(false),
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	617b      	str	r3, [r7, #20]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3320      	adds	r3, #32
 800bfe8:	f107 0214 	add.w	r2, r7, #20
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f914 	bl	800c21c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3320      	adds	r3, #32
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 f952 	bl	800c2a2 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800bffe:	4602      	mov	r2, r0
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	7d5b      	ldrb	r3, [r3, #21]
 800c004:	4619      	mov	r1, r3
 800c006:	4610      	mov	r0, r2
 800c008:	f7f6 fab2 	bl	8002570 <_ZN3Pin3setEb>
}
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	08021898 	.word	0x08021898

0800c01c <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	1c5a      	adds	r2, r3, #1
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	69da      	ldr	r2, [r3, #28]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	429a      	cmp	r2, r3
 800c03a:	d315      	bcc.n	800c068 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7d5b      	ldrb	r3, [r3, #21]
 800c040:	f083 0301 	eor.w	r3, r3, #1
 800c044:	b2da      	uxtb	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3320      	adds	r3, #32
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f927 	bl	800c2a2 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800c054:	4602      	mov	r2, r0
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	7d5b      	ldrb	r3, [r3, #21]
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7f6 fa87 	bl	8002570 <_ZN3Pin3setEb>
        blinkCount = 0;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	61da      	str	r2, [r3, #28]
	}
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
	return;
 800c078:	bf00      	nop
}
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c084:	b580      	push	{r7, lr}
 800c086:	b08c      	sub	sp, #48	@ 0x30
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c09a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c09e:	f107 031c 	add.w	r3, r7, #28
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 f913 	bl	800c2d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c0aa:	466a      	mov	r2, sp
 800c0ac:	f107 0320 	add.w	r3, r7, #32
 800c0b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0b4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	f107 0214 	add.w	r2, r7, #20
 800c0be:	ca06      	ldmia	r2, {r1, r2}
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7f9 f9b2 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	3728      	adds	r7, #40	@ 0x28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f90d 	bl	800c2f6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800c0dc:	4603      	mov	r3, r0
  }
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b08c      	sub	sp, #48	@ 0x30
 800c0ea:	af02      	add	r7, sp, #8
 800c0ec:	60f8      	str	r0, [r7, #12]
 800c0ee:	60b9      	str	r1, [r7, #8]
 800c0f0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c100:	f107 031c 	add.w	r3, r7, #28
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe f8b6 	bl	800a278 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c10c:	466a      	mov	r2, sp
 800c10e:	f107 0320 	add.w	r3, r7, #32
 800c112:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c116:	e882 0003 	stmia.w	r2, {r0, r1}
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	f107 0214 	add.w	r2, r7, #20
 800c120:	ca06      	ldmia	r2, {r1, r2}
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7f9 f981 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	3728      	adds	r7, #40	@ 0x28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c130:	b5b0      	push	{r4, r5, r7, lr}
 800c132:	b08c      	sub	sp, #48	@ 0x30
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c13e:	2024      	movs	r0, #36	@ 0x24
 800c140:	f013 f924 	bl	801f38c <_Znwj>
 800c144:	4603      	mov	r3, r0
 800c146:	461d      	mov	r5, r3
 800c148:	68b8      	ldr	r0, [r7, #8]
 800c14a:	f000 f8f6 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c14e:	4603      	mov	r3, r0
 800c150:	681c      	ldr	r4, [r3, #0]
 800c152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c156:	4618      	mov	r0, r3
 800c158:	f013 f929 	bl	801f3ae <_ZNSaIcEC1Ev>
 800c15c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c160:	f107 0314 	add.w	r3, r7, #20
 800c164:	4621      	mov	r1, r4
 800c166:	4618      	mov	r0, r3
 800c168:	f7f8 ff6a 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7fd ff36 	bl	8009fde <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c172:	4603      	mov	r3, r0
 800c174:	681c      	ldr	r4, [r3, #0]
 800c176:	6838      	ldr	r0, [r7, #0]
 800c178:	f000 f8ea 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800c17c:	4603      	mov	r3, r0
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f107 0114 	add.w	r1, r7, #20
 800c184:	4622      	mov	r2, r4
 800c186:	4628      	mov	r0, r5
 800c188:	f7ff ff10 	bl	800bfac <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800c18c:	4629      	mov	r1, r5
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f8f9 	bl	800c386 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	4618      	mov	r0, r3
 800c19a:	f013 f9db 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c19e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f013 f904 	bl	801f3b0 <_ZNSaIcED1Ev>
 800c1a8:	bf00      	nop
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	3730      	adds	r7, #48	@ 0x30
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bdb0      	pop	{r4, r5, r7, pc}

0800c1b2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c1b2:	b590      	push	{r4, r7, lr}
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f8f1 	bl	800c3a4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c1c2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00c      	beq.n	800c1e6 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f8f6 	bl	800c3be <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 f8ff 	bl	800c3d8 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 f92d 	bl	800c440 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
      }
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd90      	pop	{r4, r7, pc}

0800c1f6 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c1f6:	b590      	push	{r4, r7, lr}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800c200:	687c      	ldr	r4, [r7, #4]
 800c202:	6838      	ldr	r0, [r7, #0]
 800c204:	f000 f92d 	bl	800c462 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c208:	4603      	mov	r3, r0
 800c20a:	4619      	mov	r1, r3
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 f933 	bl	800c478 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd90      	pop	{r4, r7, pc}

0800c21c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c21c:	b5b0      	push	{r4, r5, r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c228:	2040      	movs	r0, #64	@ 0x40
 800c22a:	f013 f8af 	bl	801f38c <_Znwj>
 800c22e:	4603      	mov	r3, r0
 800c230:	461c      	mov	r4, r3
 800c232:	68b8      	ldr	r0, [r7, #8]
 800c234:	f000 f958 	bl	800c4e8 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c238:	4605      	mov	r5, r0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f83d 	bl	800c2ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800c240:	4603      	mov	r3, r0
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	4629      	mov	r1, r5
 800c248:	4620      	mov	r0, r4
 800c24a:	f7f5 ffe7 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c24e:	4621      	mov	r1, r4
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 f964 	bl	800c51e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bdb0      	pop	{r4, r5, r7, pc}

0800c25e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c25e:	b590      	push	{r4, r7, lr}
 800c260:	b085      	sub	sp, #20
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 f967 	bl	800c53c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c26e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00c      	beq.n	800c292 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f96c 	bl	800c556 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800c27e:	4604      	mov	r4, r0
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 f975 	bl	800c570 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c286:	4603      	mov	r3, r0
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4619      	mov	r1, r3
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 f987 	bl	800c5a0 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	601a      	str	r2, [r3, #0]
      }
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd90      	pop	{r4, r7, pc}

0800c2a2 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
	return get();
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f98b 	bl	800c5c6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800c2b0:	4603      	mov	r3, r0
      }
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c2da:	6838      	ldr	r0, [r7, #0]
 800c2dc:	f000 f980 	bl	800c5e0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 f985 	bl	800c5f6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800c2ec:	bf00      	nop
}
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800c2f6:	b590      	push	{r4, r7, lr}
 800c2f8:	b087      	sub	sp, #28
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800c306:	6938      	ldr	r0, [r7, #16]
 800c308:	f7f9 ffa1 	bl	800624e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800c30c:	4604      	mov	r4, r0
 800c30e:	6938      	ldr	r0, [r7, #16]
 800c310:	f7f9 fe2b 	bl	8005f6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800c314:	4602      	mov	r2, r0
 800c316:	f107 0308 	add.w	r3, r7, #8
 800c31a:	4621      	mov	r1, r4
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7f6 fec6 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800c322:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c32c:	f000 f972 	bl	800c614 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800c330:	4603      	mov	r3, r0
}
 800c332:	4618      	mov	r0, r3
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd90      	pop	{r4, r7, pc}

0800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c33a:	b480      	push	{r7}
 800c33c:	b083      	sub	sp, #12
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4618      	mov	r0, r3
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c366:	b580      	push	{r7, lr}
 800c368:	b082      	sub	sp, #8
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	6039      	str	r1, [r7, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f000 f96a 	bl	800c650 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4618      	mov	r0, r3
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c386:	b580      	push	{r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff ffe6 	bl	800c366 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f962 	bl	800c678 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f962 	bl	800c692 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	4a08      	ldr	r2, [pc, #32]	@ (800c41c <_ZN5BlinkD1Ev+0x2c>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3320      	adds	r3, #32
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff ff2b 	bl	800c25e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f002 fbea 	bl	800ebe4 <_ZN6ModuleD1Ev>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	08021898 	.word	0x08021898

0800c420 <_ZN5BlinkD0Ev>:
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff ffe1 	bl	800c3f0 <_ZN5BlinkD1Ev>
 800c42e:	2124      	movs	r1, #36	@ 0x24
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f012 ff9a 	bl	801f36a <_ZdlPvj>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d004      	beq.n	800c45a <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	3204      	adds	r2, #4
 800c454:	6812      	ldr	r2, [r2, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	4790      	blx	r2
      }
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c462:	b480      	push	{r7}
 800c464:	b083      	sub	sp, #12
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800c482:	6838      	ldr	r0, [r7, #0]
 800c484:	f000 f912 	bl	800c6ac <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3304      	adds	r3, #4
 800c492:	4618      	mov	r0, r3
 800c494:	f7fd ff90 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800c498:	6838      	ldr	r0, [r7, #0]
 800c49a:	f000 f907 	bl	800c6ac <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 f910 	bl	800c6c6 <_ZSt12__to_addressI5BlinkEPT_S2_>
 800c4a6:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800c4a8:	6838      	ldr	r0, [r7, #0]
 800c4aa:	f7ff ffda 	bl	800c462 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 f910 	bl	800c6dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	f107 0208 	add.w	r2, r7, #8
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f94a 	bl	800c760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fc ffab 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800c4d6:	68f9      	ldr	r1, [r7, #12]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f965 	bl	800c7a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	370c      	adds	r7, #12
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f955 	bl	800c7be <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff ffe6 	bl	800c4fe <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f94d 	bl	800c7e6 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c54c:	4603      	mov	r3, r0
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f94d 	bl	800c800 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800c566:	4603      	mov	r3, r0
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4618      	mov	r0, r3
 800c592:	f012 ffdf 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c5aa:	683c      	ldr	r4, [r7, #0]
 800c5ac:	2c00      	cmp	r4, #0
 800c5ae:	d006      	beq.n	800c5be <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff ffe8 	bl	800c586 <_ZN3PinD1Ev>
 800c5b6:	2140      	movs	r1, #64	@ 0x40
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f012 fed6 	bl	801f36a <_ZdlPvj>
      }
 800c5be:	bf00      	nop
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd90      	pop	{r4, r7, pc}

0800c5c6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 f922 	bl	800c81a <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c5e8:	687b      	ldr	r3, [r7, #4]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b082      	sub	sp, #8
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c600:	2301      	movs	r3, #1
 800c602:	2203      	movs	r2, #3
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7f6 f98a 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	463b      	mov	r3, r7
 800c61c:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800c620:	463b      	mov	r3, r7
 800c622:	4618      	mov	r0, r3
 800c624:	f7f8 fac2 	bl	8004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800c628:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800c62a:	463b      	mov	r3, r7
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f8 fac9 	bl	8004bc4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800c632:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f8fb 	bl	800c838 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800c642:	4603      	mov	r3, r0
 800c644:	e000      	b.n	800c648 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800c646:	2300      	movs	r3, #0
  }
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c650:	b590      	push	{r4, r7, lr}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 f97d 	bl	800c95c <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c662:	683c      	ldr	r4, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7ff fe9d 	bl	800c3a4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c66a:	4603      	mov	r3, r0
 800c66c:	601c      	str	r4, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	bd90      	pop	{r4, r7, pc}

0800c678 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f977 	bl	800c976 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c688:	4603      	mov	r3, r0
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c692:	b580      	push	{r7, lr}
 800c694:	b082      	sub	sp, #8
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 f976 	bl	800c98e <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f975 	bl	800c9a6 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
      return __ptr;
 800c6ce:	687b      	ldr	r3, [r7, #4]
    }
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800c6ec:	6838      	ldr	r0, [r7, #0]
 800c6ee:	f7ff ffdd 	bl	800c6ac <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bf0c      	ite	eq
 800c6f8:	2301      	moveq	r3, #1
 800c6fa:	2300      	movne	r3, #0
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d128      	bne.n	800c754 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f95b 	bl	800c9c2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800c70c:	f107 030c 	add.w	r3, r7, #12
 800c710:	2101      	movs	r1, #1
 800c712:	4618      	mov	r0, r3
 800c714:	f000 f96d 	bl	800c9f2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800c718:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c71a:	6838      	ldr	r0, [r7, #0]
 800c71c:	f000 f978 	bl	800ca10 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c720:	4603      	mov	r3, r0
 800c722:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800c724:	6838      	ldr	r0, [r7, #0]
 800c726:	f7ff fe4a 	bl	800c3be <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c72a:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 f97c 	bl	800ca2a <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c732:	4603      	mov	r3, r0
 800c734:	f107 0210 	add.w	r2, r7, #16
 800c738:	f107 000c 	add.w	r0, r7, #12
 800c73c:	6979      	ldr	r1, [r7, #20]
 800c73e:	f000 f97f 	bl	800ca40 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	601a      	str	r2, [r3, #0]
	}
 800c748:	f107 030c 	add.w	r3, r7, #12
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 f944 	bl	800c9da <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c752:	e000      	b.n	800c756 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800c754:	bf00      	nop
	}
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	429a      	cmp	r2, r3
 800c778:	d011      	beq.n	800c79e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7fb fcab 	bl	80080dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d004      	beq.n	800c798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7fb fcb1 	bl	80080fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	601a      	str	r2, [r3, #0]
	return *this;
 800c79e:	687b      	ldr	r3, [r7, #4]
      }
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	{ }
 800c7b2:	bf00      	nop
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c7be:	b590      	push	{r4, r7, lr}
 800c7c0:	b083      	sub	sp, #12
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f950 	bl	800ca70 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c7d0:	683c      	ldr	r4, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff feb2 	bl	800c53c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	601c      	str	r4, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd90      	pop	{r4, r7, pc}

0800c7e6 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 f94a 	bl	800ca8a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f949 	bl	800caa2 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c810:	4603      	mov	r3, r0
 800c812:	4618      	mov	r0, r3
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f000 f948 	bl	800caba <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c82a:	4603      	mov	r3, r0
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7f7 f9c7 	bl	8003bd8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800c84a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	791b      	ldrb	r3, [r3, #4]
 800c850:	3b04      	subs	r3, #4
 800c852:	2b1a      	cmp	r3, #26
 800c854:	d87c      	bhi.n	800c950 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800c856:	a201      	add	r2, pc, #4	@ (adr r2, 800c85c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c90f 	.word	0x0800c90f
 800c860:	0800c91d 	.word	0x0800c91d
 800c864:	0800c8c9 	.word	0x0800c8c9
 800c868:	0800c951 	.word	0x0800c951
 800c86c:	0800c951 	.word	0x0800c951
 800c870:	0800c951 	.word	0x0800c951
 800c874:	0800c8cf 	.word	0x0800c8cf
 800c878:	0800c951 	.word	0x0800c951
 800c87c:	0800c8dd 	.word	0x0800c8dd
 800c880:	0800c951 	.word	0x0800c951
 800c884:	0800c92d 	.word	0x0800c92d
 800c888:	0800c951 	.word	0x0800c951
 800c88c:	0800c951 	.word	0x0800c951
 800c890:	0800c951 	.word	0x0800c951
 800c894:	0800c951 	.word	0x0800c951
 800c898:	0800c951 	.word	0x0800c951
 800c89c:	0800c951 	.word	0x0800c951
 800c8a0:	0800c951 	.word	0x0800c951
 800c8a4:	0800c951 	.word	0x0800c951
 800c8a8:	0800c951 	.word	0x0800c951
 800c8ac:	0800c951 	.word	0x0800c951
 800c8b0:	0800c951 	.word	0x0800c951
 800c8b4:	0800c8eb 	.word	0x0800c8eb
 800c8b8:	0800c951 	.word	0x0800c951
 800c8bc:	0800c8fd 	.word	0x0800c8fd
 800c8c0:	0800c951 	.word	0x0800c951
 800c8c4:	0800c93f 	.word	0x0800c93f
        return content_.asBoolean;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	e041      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f8fe 	bl	800cad4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	e03a      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f000 f908 	bl	800caf6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	e033      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	f000 f910 	bl	800cb18 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	e02a      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4610      	mov	r0, r2
 800c904:	4619      	mov	r1, r3
 800c906:	f000 f91a 	bl	800cb3e <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800c90a:	4603      	mov	r3, r0
 800c90c:	e021      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f000 f926 	bl	800cb64 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c918:	4603      	mov	r3, r0
 800c91a:	e01a      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3308      	adds	r3, #8
 800c922:	4618      	mov	r0, r3
 800c924:	f000 f91e 	bl	800cb64 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c928:	4603      	mov	r3, r0
 800c92a:	e012      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	edd3 7a00 	vldr	s15, [r3]
 800c932:	eeb0 0a67 	vmov.f32	s0, s15
 800c936:	f000 f929 	bl	800cb8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800c93a:	4603      	mov	r3, r0
 800c93c:	e009      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	ed93 7b00 	vldr	d7, [r3]
 800c944:	eeb0 0b47 	vmov.f64	d0, d7
 800c948:	f000 f938 	bl	800cbbc <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800c94c:	4603      	mov	r3, r0
 800c94e:	e000      	b.n	800c952 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800c950:	2300      	movs	r3, #0
  }
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop

0800c95c <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f940 	bl	800cbec <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f944 	bl	800cc0c <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800c984:	4603      	mov	r3, r0
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f945 	bl	800cc26 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c99c:	4603      	mov	r3, r0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 f944 	bl	800cc3e <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f944 	bl	800cc58 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f943 	bl	800cc6e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f93f 	bl	800cc84 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f95c 	bl	800ccd8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f957 	bl	800cd02 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca54:	4604      	mov	r4, r0
 800ca56:	6838      	ldr	r0, [r7, #0]
 800ca58:	f7ff ffe7 	bl	800ca2a <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	4622      	mov	r2, r4
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 f958 	bl	800cd18 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800ca68:	bf00      	nop
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd90      	pop	{r4, r7, pc}

0800ca70 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 f96a 	bl	800cd54 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f96e 	bl	800cd74 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f96f 	bl	800cd8e <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800cab0:	4603      	mov	r3, r0
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 f96e 	bl	800cda6 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800caca:	4603      	mov	r3, r0
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f96e 	bl	800cdbe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	e000      	b.n	800caee <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f96f 	bl	800cde2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	e000      	b.n	800cb10 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cb22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb26:	f000 f967 	bl	800cdf8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	e000      	b.n	800cb36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cb48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb4c:	f000 f96c 	bl	800ce28 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	e000      	b.n	800cb5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800cb6c:	f107 0308 	add.w	r3, r7, #8
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f7 fa94 	bl	80040a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800cb78:	f107 0308 	add.w	r3, r7, #8
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 f979 	bl	800ce74 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800cb82:	4603      	mov	r3, r0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cb96:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb9a:	f000 f9b2 	bl	800cf02 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800cba4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbac:	ee17 3a90 	vmov	r3, s15
 800cbb0:	e000      	b.n	800cbb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cbc6:	ed97 0b00 	vldr	d0, [r7]
 800cbca:	f000 f9c7 	bl	800cf5c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d006      	beq.n	800cbe2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800cbd4:	ed97 7b00 	vldr	d7, [r7]
 800cbd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cbdc:	ee17 3a90 	vmov	r3, s15
 800cbe0:	e000      	b.n	800cbe4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f9d7 	bl	800cfa8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f9df 	bl	800cfc0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f9e0 	bl	800cfdc <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b082      	sub	sp, #8
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f9df 	bl	800cff2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800cc34:	4603      	mov	r3, r0
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 f9de 	bl	800d00a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4618      	mov	r0, r3
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cc6e:	b480      	push	{r7}
 800cc70:	b083      	sub	sp, #12
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f000 f9c6 	bl	800d022 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800cc96:	4602      	mov	r2, r0
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	bf8c      	ite	hi
 800cc9e:	2301      	movhi	r3, #1
 800cca0:	2300      	movls	r3, #0
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	bf14      	ite	ne
 800cca8:	2301      	movne	r3, #1
 800ccaa:	2300      	moveq	r3, #0
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccb8:	d301      	bcc.n	800ccbe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ccba:	f012 fb7d 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ccbe:	f012 fb78 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f012 fb60 	bl	801f38c <_Znwj>
 800cccc:	4603      	mov	r3, r0
 800ccce:	bf00      	nop
      }
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fb5f 	bl	800c3a4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800cce6:	4603      	mov	r3, r0
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7ff fb59 	bl	800c3a4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]
	return __p;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
      }
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	f7fb f9ca 	bl	80080c4 <_ZnwjPv>
 800cd30:	4605      	mov	r5, r0
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ffe5 	bl	800cd02 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	681c      	ldr	r4, [r3, #0]
 800cd3c:	6838      	ldr	r0, [r7, #0]
 800cd3e:	f7ff fe74 	bl	800ca2a <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd42:	4632      	mov	r2, r6
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f000 f978 	bl	800d03c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800cd4c:	bf00      	nop
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd54 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f98f 	bl	800d080 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f997 	bl	800d098 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 f998 	bl	800d0b4 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800cd84:	4603      	mov	r3, r0
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f997 	bl	800d0ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f997 	bl	800d0e2 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cdc6:	f000 f8c1 	bl	800cf4c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	bf94      	ite	ls
 800cdd4:	2301      	movls	r3, #1
 800cdd6:	2300      	movhi	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800cde2:	b480      	push	{r7}
 800cde4:	b083      	sub	sp, #12
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  return true;
 800cdea:	2301      	movs	r3, #1
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cdf8:	b5b0      	push	{r4, r5, r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ce02:	f000 f8a3 	bl	800cf4c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ce06:	4603      	mov	r3, r0
 800ce08:	17da      	asrs	r2, r3, #31
 800ce0a:	461c      	mov	r4, r3
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce12:	4294      	cmp	r4, r2
 800ce14:	eb75 0303 	sbcs.w	r3, r5, r3
 800ce18:	bf2c      	ite	cs
 800ce1a:	2301      	movcs	r3, #1
 800ce1c:	2300      	movcc	r3, #0
 800ce1e:	b2db      	uxtb	r3, r3
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bdb0      	pop	{r4, r5, r7, pc}

0800ce28 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ce28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ce34:	f000 f85c 	bl	800cef0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	17da      	asrs	r2, r3, #31
 800ce3c:	4698      	mov	r8, r3
 800ce3e:	4691      	mov	r9, r2
 800ce40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce44:	4542      	cmp	r2, r8
 800ce46:	eb73 0309 	sbcs.w	r3, r3, r9
 800ce4a:	db0d      	blt.n	800ce68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800ce4c:	f000 f87e 	bl	800cf4c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ce50:	4603      	mov	r3, r0
 800ce52:	17da      	asrs	r2, r3, #31
 800ce54:	461c      	mov	r4, r3
 800ce56:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ce58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce5c:	4294      	cmp	r4, r2
 800ce5e:	eb75 0303 	sbcs.w	r3, r5, r3
 800ce62:	db01      	blt.n	800ce68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800ce64:	2301      	movs	r3, #1
 800ce66:	e000      	b.n	800ce6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ce74 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d82e      	bhi.n	800cee4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800ce86:	a201      	add	r2, pc, #4	@ (adr r2, 800ce8c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8c:	0800ce9d 	.word	0x0800ce9d
 800ce90:	0800ceaf 	.word	0x0800ceaf
 800ce94:	0800cec1 	.word	0x0800cec1
 800ce98:	0800ced3 	.word	0x0800ced3
        return convertNumber<T>(value_.asFloat);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	edd3 7a02 	vldr	s15, [r3, #8]
 800cea2:	eeb0 0a67 	vmov.f32	s0, s15
 800cea6:	f7ff fe71 	bl	800cb8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	e01b      	b.n	800cee6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	f7ff fe41 	bl	800cb3e <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800cebc:	4603      	mov	r3, r0
 800cebe:	e012      	b.n	800cee6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cec6:	4610      	mov	r0, r2
 800cec8:	4619      	mov	r1, r3
 800ceca:	f7ff fe25 	bl	800cb18 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800cece:	4603      	mov	r3, r0
 800ced0:	e009      	b.n	800cee6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	ed93 7b02 	vldr	d7, [r3, #8]
 800ced8:	eeb0 0b47 	vmov.f64	d0, d7
 800cedc:	f7ff fe6e 	bl	800cbbc <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800cee0:	4603      	mov	r3, r0
 800cee2:	e000      	b.n	800cee6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800cee4:	2300      	movs	r3, #0
  }
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop

0800cef0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800cef0:	b480      	push	{r7}
 800cef2:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800cef4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800cef8:	4618      	mov	r0, r3
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800cf0c:	f7ff fff0 	bl	800cef0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cf10:	ee07 0a90 	vmov	s15, r0
 800cf14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf18:	ed97 7a01 	vldr	s14, [r7, #4]
 800cf1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf24:	db0d      	blt.n	800cf42 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800cf26:	2000      	movs	r0, #0
 800cf28:	f000 f8e8 	bl	800d0fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800cf2c:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800cf30:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3c:	d801      	bhi.n	800cf42 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e000      	b.n	800cf44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
    return T(~lowest());
 800cf50:	f7ff ffce 	bl	800cef0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cf54:	4603      	mov	r3, r0
 800cf56:	43db      	mvns	r3, r3
  }
 800cf58:	4618      	mov	r0, r3
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800cf66:	f7ff ffc3 	bl	800cef0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cf6a:	ee07 0a90 	vmov	s15, r0
 800cf6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf72:	ed97 6b00 	vldr	d6, [r7]
 800cf76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	db0e      	blt.n	800cf9e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800cf80:	f7ff ffe4 	bl	800cf4c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cf84:	ee07 0a90 	vmov	s15, r0
 800cf88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800cf8c:	ed97 6b00 	vldr	d6, [r7]
 800cf90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf98:	d801      	bhi.n	800cf9e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e000      	b.n	800cfa0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f8b2 	bl	800d11a <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f898 	bl	800d130 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800d000:	4603      	mov	r3, r0
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f897 	bl	800d146 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d018:	4603      	mov	r3, r0
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d02a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800d03c:	b5b0      	push	{r4, r5, r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe f89e 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d050:	4a0a      	ldr	r2, [pc, #40]	@ (800d07c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f103 040c 	add.w	r4, r3, #12
 800d05c:	1d3b      	adds	r3, r7, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 f87e 	bl	800d160 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d064:	f107 0314 	add.w	r3, r7, #20
 800d068:	462a      	mov	r2, r5
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 f882 	bl	800d176 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bdb0      	pop	{r4, r5, r7, pc}
 800d07c:	0802187c 	.word	0x0802187c

0800d080 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f890 	bl	800d1ae <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f876 	bl	800d1c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 f874 	bl	800d1da <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800d104:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800d108:	f7f9 ff82 	bl	8007010 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800d10c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d110:	eeb0 0a67 	vmov.f32	s0, s15
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4618      	mov	r0, r3
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d146:	b580      	push	{r7, lr}
 800d148:	b082      	sub	sp, #8
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4618      	mov	r0, r3
 800d152:	f000 f84d 	bl	800d1f0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800d156:	4603      	mov	r3, r0
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	713a      	strb	r2, [r7, #4]
 800d182:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800d184:	1d3b      	adds	r3, r7, #4
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff ffea 	bl	800d160 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d18c:	4603      	mov	r3, r0
 800d18e:	4619      	mov	r1, r3
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f000 f838 	bl	800d206 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 f841 	bl	800d220 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	601a      	str	r2, [r3, #0]
	{ }
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800d1ae:	b480      	push	{r7}
 800d1b0:	b083      	sub	sp, #12
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800d206:	b580      	push	{r7, lr}
 800d208:	b082      	sub	sp, #8
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
 800d210:	6838      	ldr	r0, [r7, #0]
 800d212:	f7ff ffa5 	bl	800d160 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	4a05      	ldr	r2, [pc, #20]	@ (800d258 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fc fba9 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	0802187c 	.word	0x0802187c

0800d25c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff ffe7 	bl	800d238 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d26a:	2110      	movs	r1, #16
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f012 f87c 	bl	801f36a <_ZdlPvj>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	330c      	adds	r3, #12
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 f83f 	bl	800d30c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800d28e:	4602      	mov	r2, r0
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	4619      	mov	r1, r3
 800d296:	4610      	mov	r0, r2
 800d298:	f7ff f8d2 	bl	800c440 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800d29c:	bf00      	nop
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	330c      	adds	r3, #12
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f837 	bl	800d324 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	f107 0314 	add.w	r3, r7, #20
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 f83c 	bl	800d33c <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d2c4:	f107 0114 	add.w	r1, r7, #20
 800d2c8:	f107 030c 	add.w	r3, r7, #12
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f841 	bl	800d356 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff ffaf 	bl	800d238 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d2da:	f107 030c 	add.w	r3, r7, #12
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 f84d 	bl	800d37e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d2e4:	f107 0314 	add.w	r3, r7, #20
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fb76 	bl	800c9da <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d2fe:	2300      	movs	r3, #0
      }
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f847 	bl	800d3a8 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800d31a:	4603      	mov	r3, r0
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f846 	bl	800d3be <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800d332:	4603      	mov	r3, r0
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff fc86 	bl	800cc58 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d362:	68b8      	ldr	r0, [r7, #8]
 800d364:	f000 f836 	bl	800d3d4 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800d368:	4602      	mov	r2, r0
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	605a      	str	r2, [r3, #4]
      { }
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	4619      	mov	r1, r3
 800d39a:	f000 f826 	bl	800d3ea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	68b9      	ldr	r1, [r7, #8]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 f804 	bl	800d408 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800d400:	bf00      	nop
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	4619      	mov	r1, r3
 800d41a:	68b8      	ldr	r0, [r7, #8]
 800d41c:	f011 ffa5 	bl	801f36a <_ZdlPvj>
      }
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800d426:	b480      	push	{r7}
 800d428:	b083      	sub	sp, #12
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3318      	adds	r3, #24
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 f8e9 	bl	800d63a <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	78fa      	ldrb	r2, [r7, #3]
 800d480:	771a      	strb	r2, [r3, #28]
 800d482:	bf00      	nop
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
	...

0800d490 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 fb86 	bl	800ebac <_ZN6ModuleC1Ev>
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d4cc <_ZN12CommsHandlerC1Ev+0x3c>)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 f8fa 	bl	800d6a4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	771a      	strb	r2, [r3, #28]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	775a      	strb	r2, [r3, #29]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	779a      	strb	r2, [r3, #30]

}
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	080218bc 	.word	0x080218bc

0800d4d0 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	4a08      	ldr	r2, [pc, #32]	@ (800d4fc <_ZN12CommsHandlerD1Ev+0x2c>)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fc f8e7 	bl	80096b6 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f001 fb7a 	bl	800ebe4 <_ZN6ModuleD1Ev>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	080218bc 	.word	0x080218bc

0800d500 <_ZN12CommsHandlerD0Ev>:
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff ffe1 	bl	800d4d0 <_ZN12CommsHandlerD1Ev>
 800d50e:	2120      	movs	r1, #32
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f011 ff2a 	bl	801f36a <_ZdlPvj>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	460b      	mov	r3, r1
 800d52a:	70fb      	strb	r3, [r7, #3]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800d530:	78fa      	ldrb	r2, [r7, #3]
 800d532:	4611      	mov	r1, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff ff9b 	bl	800d470 <_ZN12CommsHandler7setDataEb>
    });
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800d542:	b590      	push	{r4, r7, lr}
 800d544:	b089      	sub	sp, #36	@ 0x24
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3318      	adds	r3, #24
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 f8b8 	bl	800d6c4 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d554:	4604      	mov	r4, r0
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	61fb      	str	r3, [r7, #28]
 800d55a:	f107 021c 	add.w	r2, r7, #28
 800d55e:	f107 030c 	add.w	r3, r7, #12
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f000 f8b9 	bl	800d6dc <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800d56a:	f107 030c 	add.w	r3, r7, #12
 800d56e:	4619      	mov	r1, r3
 800d570:	4620      	mov	r0, r4
 800d572:	f7ff ff6e 	bl	800d452 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800d576:	f107 030c 	add.w	r3, r7, #12
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f3 fbe8 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3318      	adds	r3, #24
 800d584:	4618      	mov	r0, r3
 800d586:	f000 f89d 	bl	800d6c4 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d58a:	4603      	mov	r3, r0
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	321c      	adds	r2, #28
 800d590:	6812      	ldr	r2, [r2, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	4790      	blx	r2
}
 800d596:	bf00      	nop
 800d598:	3724      	adds	r7, #36	@ 0x24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd90      	pop	{r4, r7, pc}

0800d59e <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
	interface->start();
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	3318      	adds	r3, #24
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 f88a 	bl	800d6c4 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	3220      	adds	r2, #32
 800d5b6:	6812      	ldr	r2, [r2, #0]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	4790      	blx	r2
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3318      	adds	r3, #24
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 f877 	bl	800d6c4 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	3224      	adds	r2, #36	@ 0x24
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	4790      	blx	r2
}
 800d5e2:	bf00      	nop
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
	if (data)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	7f1b      	ldrb	r3, [r3, #28]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d006      	beq.n	800d608 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	775a      	strb	r2, [r3, #29]
		status = true;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	779a      	strb	r2, [r3, #30]
 800d606:	e005      	b.n	800d614 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7f5b      	ldrb	r3, [r3, #29]
 800d60c:	3301      	adds	r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7f5b      	ldrb	r3, [r3, #29]
 800d618:	2b64      	cmp	r3, #100	@ 0x64
 800d61a:	d905      	bls.n	800d628 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	775a      	strb	r2, [r3, #29]
		status = false;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	771a      	strb	r2, [r3, #28]
}
 800d62e:	bf00      	nop
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b086      	sub	sp, #24
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f876 	bl	800d73c <_ZNSt8functionIFvbEEC1ERKS1_>
 800d650:	f107 0308 	add.w	r3, r7, #8
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 f89b 	bl	800d792 <_ZNSt8functionIFvbEE4swapERS1_>
 800d65c:	f107 0308 	add.w	r3, r7, #8
 800d660:	4618      	mov	r0, r3
 800d662:	f7f3 fb75 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800d666:	687b      	ldr	r3, [r7, #4]
      }
 800d668:	4618      	mov	r0, r3
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 f8aa 	bl	800d7d4 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff ffeb 	bl	800d670 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
	: _M_t()
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff ffe8 	bl	800d68a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	return get();
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f88e 	bl	800d7ee <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800d6d2:	4603      	mov	r3, r0
      }
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	6053      	str	r3, [r2, #4]
 800d6f0:	6093      	str	r3, [r2, #8]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f4 fd4d 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800d700:	6838      	ldr	r0, [r7, #0]
 800d702:	f000 f881 	bl	800d808 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00e      	beq.n	800d72a <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800d70c:	687c      	ldr	r4, [r7, #4]
 800d70e:	6838      	ldr	r0, [r7, #0]
 800d710:	f000 f885 	bl	800d81e <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d714:	4603      	mov	r3, r0
 800d716:	4619      	mov	r1, r3
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 f88b 	bl	800d834 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a04      	ldr	r2, [pc, #16]	@ (800d734 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800d722:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a04      	ldr	r2, [pc, #16]	@ (800d738 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800d728:	609a      	str	r2, [r3, #8]
	}
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	bd90      	pop	{r4, r7, pc}
 800d734:	0800d859 	.word	0x0800d859
 800d738:	0800d883 	.word	0x0800d883

0800d73c <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	461a      	mov	r2, r3
 800d74a:	2300      	movs	r3, #0
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	6053      	str	r3, [r2, #4]
 800d750:	6093      	str	r3, [r2, #8]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4618      	mov	r0, r3
 800d756:	f7f4 fd1d 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800d760:	6838      	ldr	r0, [r7, #0]
 800d762:	f000 f8ad 	bl	800d8c0 <_ZNKSt8functionIFvbEEcvbEv>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00d      	beq.n	800d788 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	6839      	ldr	r1, [r7, #0]
 800d774:	2202      	movs	r2, #2
 800d776:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	689a      	ldr	r2, [r3, #8]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	609a      	str	r2, [r3, #8]
      }
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	4611      	mov	r1, r2
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 f89c 	bl	800d8e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f103 0208 	add.w	r2, r3, #8
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	f000 f8ba 	bl	800d92e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f103 020c 	add.w	r2, r3, #12
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	330c      	adds	r3, #12
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f000 f8d0 	bl	800d96c <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f8e3 	bl	800d9aa <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 f8e6 	bl	800d9ca <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800d7fe:	4603      	mov	r3, r0
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d810:	2301      	movs	r3, #1
 800d812:	4618      	mov	r0, r3
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d834:	b590      	push	{r4, r7, lr}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d83e:	6838      	ldr	r0, [r7, #0]
 800d840:	f7ff ffed 	bl	800d81e <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d844:	4603      	mov	r3, r0
 800d846:	4622      	mov	r2, r4
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f8cb 	bl	800d9e6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	bd90      	pop	{r4, r7, pc}

0800d858 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d858:	b590      	push	{r4, r7, lr}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f8d8 	bl	800da18 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d868:	4604      	mov	r4, r0
 800d86a:	6838      	ldr	r0, [r7, #0]
 800d86c:	f7f4 fbd0 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d870:	4603      	mov	r3, r0
 800d872:	4619      	mov	r1, r3
 800d874:	4620      	mov	r0, r4
 800d876:	f000 f8df 	bl	800da38 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800d87a:	bf00      	nop
      }
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd90      	pop	{r4, r7, pc}

0800d882 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d882:	b590      	push	{r4, r7, lr}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	4613      	mov	r3, r2
 800d88e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d109      	bne.n	800d8aa <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d896:	68b8      	ldr	r0, [r7, #8]
 800d898:	f000 f8be 	bl	800da18 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d89c:	4604      	mov	r4, r0
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f000 f8e0 	bl	800da64 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	601c      	str	r4, [r3, #0]
	    break;
 800d8a8:	e005      	b.n	800d8b6 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	68b9      	ldr	r1, [r7, #8]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 f8e3 	bl	800da7c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800d8b6:	2300      	movs	r3, #0
      }
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd90      	pop	{r4, r7, pc}

0800d8c0 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f3 f9ff 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	f083 0301 	eor.w	r3, r3, #1
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f900 	bl	800daf0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	f107 0308 	add.w	r3, r7, #8
 800d8f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8fa:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d8fe:	6838      	ldr	r0, [r7, #0]
 800d900:	f000 f8f6 	bl	800daf0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d904:	4602      	mov	r2, r0
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d90c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d910:	f107 0308 	add.w	r3, r7, #8
 800d914:	4618      	mov	r0, r3
 800d916:	f000 f8eb 	bl	800daf0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d91a:	4602      	mov	r2, r0
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d922:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d926:	bf00      	nop
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f8e4 	bl	800db06 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d93e:	4603      	mov	r3, r0
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d944:	6838      	ldr	r0, [r7, #0]
 800d946:	f000 f8de 	bl	800db06 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d94a:	4603      	mov	r3, r0
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d952:	f107 030c 	add.w	r3, r7, #12
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f8d5 	bl	800db06 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d95c:	4603      	mov	r3, r0
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	601a      	str	r2, [r3, #0]
    }
 800d964:	bf00      	nop
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f8d0 	bl	800db1c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d97c:	4603      	mov	r3, r0
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d982:	6838      	ldr	r0, [r7, #0]
 800d984:	f000 f8ca 	bl	800db1c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d988:	4603      	mov	r3, r0
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d990:	f107 030c 	add.w	r3, r7, #12
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f8c1 	bl	800db1c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d99a:	4603      	mov	r3, r0
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	601a      	str	r2, [r3, #0]
    }
 800d9a2:	bf00      	nop
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b082      	sub	sp, #8
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f8bd 	bl	800db32 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f8c5 	bl	800db4a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f8c6 	bl	800db66 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800d9e6:	b590      	push	{r4, r7, lr}
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	60f8      	str	r0, [r7, #12]
 800d9ee:	60b9      	str	r1, [r7, #8]
 800d9f0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff fd17 	bl	800d426 <_ZNSt9_Any_data9_M_accessEv>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	2004      	movs	r0, #4
 800d9fe:	f7fa fb61 	bl	80080c4 <_ZnwjPv>
 800da02:	4604      	mov	r4, r0
 800da04:	68b8      	ldr	r0, [r7, #8]
 800da06:	f7ff ff0a 	bl	800d81e <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800da0a:	4603      	mov	r3, r0
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6023      	str	r3, [r4, #0]
	  }
 800da10:	bf00      	nop
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	bd90      	pop	{r4, r7, pc}

0800da18 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f8ad 	bl	800db80 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800da26:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f000 f8b5 	bl	800db98 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800da2e:	4603      	mov	r3, r0
	}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800da38:	b5b0      	push	{r4, r5, r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f8b3 	bl	800dbae <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800da48:	4604      	mov	r4, r0
 800da4a:	6838      	ldr	r0, [r7, #0]
 800da4c:	f7f4 fae0 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800da50:	4603      	mov	r3, r0
 800da52:	461a      	mov	r2, r3
 800da54:	4621      	mov	r1, r4
 800da56:	4628      	mov	r0, r5
 800da58:	f000 f8b4 	bl	800dbc4 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bdb0      	pop	{r4, r5, r7, pc}

0800da64 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fcda 	bl	800d426 <_ZNSt9_Any_data9_M_accessEv>
 800da72:	4603      	mov	r3, r0
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800da7c:	b590      	push	{r4, r7, lr}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	2b03      	cmp	r3, #3
 800da8e:	d82a      	bhi.n	800dae6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800da90:	a201      	add	r2, pc, #4	@ (adr r2, 800da98 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800da92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da96:	bf00      	nop
 800da98:	0800daa9 	.word	0x0800daa9
 800da9c:	0800dab7 	.word	0x0800dab7
 800daa0:	0800dacb 	.word	0x0800dacb
 800daa4:	0800dadd 	.word	0x0800dadd
	      __dest._M_access<const type_info*>() = nullptr;
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 f8a2 	bl	800dbf2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800daae:	4603      	mov	r3, r0
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
	      break;
 800dab4:	e017      	b.n	800dae6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800dab6:	68b8      	ldr	r0, [r7, #8]
 800dab8:	f7ff ffae 	bl	800da18 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800dabc:	4604      	mov	r4, r0
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f7ff ffd0 	bl	800da64 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800dac4:	4603      	mov	r3, r0
 800dac6:	601c      	str	r4, [r3, #0]
	      break;
 800dac8:	e00d      	b.n	800dae6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800daca:	68b8      	ldr	r0, [r7, #8]
 800dacc:	f7ff ffa4 	bl	800da18 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800dad0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f898 	bl	800dc0a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800dada:	e004      	b.n	800dae6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800dadc:	4621      	mov	r1, r4
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 f8a5 	bl	800dc2e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800dae4:	bf00      	nop
	  return false;
 800dae6:	2300      	movs	r3, #0
	}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	bd90      	pop	{r4, r7, pc}

0800daf0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4618      	mov	r0, r3
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4618      	mov	r0, r3
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800db32:	b580      	push	{r7, lr}
 800db34:	b082      	sub	sp, #8
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f883 	bl	800dc46 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4618      	mov	r0, r3
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 f873 	bl	800dc5c <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800db76:	4603      	mov	r3, r0
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff fc57 	bl	800d43c <_ZNKSt9_Any_data9_M_accessEv>
 800db8e:	4603      	mov	r3, r0
 800db90:	4618      	mov	r0, r3
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4618      	mov	r0, r3
 800dba4:	370c      	adds	r7, #12
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dbae:	b480      	push	{r7}
 800dbb0:	b083      	sub	sp, #12
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	7338      	strb	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800dbd0:	68b8      	ldr	r0, [r7, #8]
 800dbd2:	f7ff ffec 	bl	800dbae <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7f4 fa19 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f7ff fc9b 	bl	800d520 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800dbea:	bf00      	nop
 800dbec:	3714      	adds	r7, #20
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd90      	pop	{r4, r7, pc}

0800dbf2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff fc13 	bl	800d426 <_ZNSt9_Any_data9_M_accessEv>
 800dc00:	4603      	mov	r3, r0
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800dc0a:	b590      	push	{r4, r7, lr}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800dc14:	6838      	ldr	r0, [r7, #0]
 800dc16:	f000 f82d 	bl	800dc74 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f832 	bl	800dc8a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd90      	pop	{r4, r7, pc}

0800dc2e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f83f 	bl	800dcbc <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800dc46:	b480      	push	{r7}
 800dc48:	b083      	sub	sp, #12
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4618      	mov	r0, r3
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f835 	bl	800dcd4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800dc8a:	b590      	push	{r4, r7, lr}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	60f8      	str	r0, [r7, #12]
 800dc92:	60b9      	str	r1, [r7, #8]
 800dc94:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff fbc5 	bl	800d426 <_ZNSt9_Any_data9_M_accessEv>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	4619      	mov	r1, r3
 800dca0:	2004      	movs	r0, #4
 800dca2:	f7fa fa0f 	bl	80080c4 <_ZnwjPv>
 800dca6:	4604      	mov	r4, r0
 800dca8:	68b8      	ldr	r0, [r7, #8]
 800dcaa:	f7ff ffe3 	bl	800dc74 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6023      	str	r3, [r4, #0]
	  }
 800dcb4:	bf00      	nop
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd90      	pop	{r4, r7, pc}

0800dcbc <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff fbae 	bl	800d426 <_ZNSt9_Any_data9_M_accessEv>
 800dcca:	4603      	mov	r3, r0
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 f805 	bl	800dcee <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800dce4:	4603      	mov	r3, r0
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800dcee:	b480      	push	{r7}
 800dcf0:	b083      	sub	sp, #12
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	4b03      	ldr	r3, [pc, #12]	@ (800dd1c <_ZN6Remora9getTxDataEv+0x18>)
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	30000080 	.word	0x30000080

0800dd20 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	4b03      	ldr	r3, [pc, #12]	@ (800dd38 <_ZN6Remora9getRxDataEv+0x18>)
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	300000c0 	.word	0x300000c0

0800dd3c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b0b0      	sub	sp, #192	@ 0xc0
 800dd40:	af04      	add	r7, sp, #16
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 800dd48:	f107 0320 	add.w	r3, r7, #32
 800dd4c:	4a65      	ldr	r2, [pc, #404]	@ (800dee4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fe f997 	bl	800c084 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dd56:	f107 0320 	add.w	r3, r7, #32
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f7 f9f6 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800dd60:	4603      	mov	r3, r0
 800dd62:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 800dd64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800dd68:	4a5f      	ldr	r2, [pc, #380]	@ (800dee8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f985 	bl	800e07c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dd72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7f7 f9e8 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800dd7c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 800dd80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800dd84:	4a59      	ldr	r2, [pc, #356]	@ (800deec <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7f7 f9ba 	bl	8005102 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dd8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f7 f9da 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800dd98:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 800dd9c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800dda0:	4a53      	ldr	r2, [pc, #332]	@ (800def0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 800dda2:	68b9      	ldr	r1, [r7, #8]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 f98e 	bl	800e0c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ddaa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f7 f9cc 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ddb4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 800ddb8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ddbc:	4a4d      	ldr	r2, [pc, #308]	@ (800def4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 800ddbe:	68b9      	ldr	r1, [r7, #8]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 f980 	bl	800e0c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ddc6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe f97f 	bl	800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 800ddd4:	4948      	ldr	r1, [pc, #288]	@ (800def8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 800ddd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ddda:	f7f2 fa81 	bl	80002e0 <strcmp>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 800dde4:	2301      	movs	r3, #1
 800dde6:	617b      	str	r3, [r7, #20]
 800dde8:	e022      	b.n	800de30 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 800ddea:	4944      	ldr	r1, [pc, #272]	@ (800defc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 800ddec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ddf0:	f7f2 fa76 	bl	80002e0 <strcmp>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	617b      	str	r3, [r7, #20]
 800ddfe:	e017      	b.n	800de30 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 800de00:	493f      	ldr	r1, [pc, #252]	@ (800df00 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 800de02:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800de06:	f7f2 fa6b 	bl	80002e0 <strcmp>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d102      	bne.n	800de16 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 800de10:	2303      	movs	r3, #3
 800de12:	617b      	str	r3, [r7, #20]
 800de14:	e00c      	b.n	800de30 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 800de16:	493b      	ldr	r1, [pc, #236]	@ (800df04 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 800de18:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800de1c:	f7f2 fa60 	bl	80002e0 <strcmp>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 800de26:	2304      	movs	r3, #4
 800de28:	617b      	str	r3, [r7, #20]
 800de2a:	e001      	b.n	800de30 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 800de30:	4935      	ldr	r1, [pc, #212]	@ (800df08 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 800de32:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800de36:	f7f2 fa53 	bl	80002e0 <strcmp>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	bf0c      	ite	eq
 800de40:	2301      	moveq	r3, #1
 800de42:	2300      	movne	r3, #0
 800de44:	b2db      	uxtb	r3, r3
 800de46:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 800de48:	4930      	ldr	r1, [pc, #192]	@ (800df0c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800de4a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800de4e:	f7f2 fa47 	bl	80002e0 <strcmp>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d105      	bne.n	800de64 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff61 	bl	800dd20 <_ZN6Remora9getRxDataEv>
 800de5e:	4603      	mov	r3, r0
 800de60:	333d      	adds	r3, #61	@ 0x3d
 800de62:	e004      	b.n	800de6e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff ff4d 	bl	800dd04 <_ZN6Remora9getTxDataEv>
 800de6a:	4603      	mov	r3, r0
 800de6c:	333c      	adds	r3, #60	@ 0x3c
 800de6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	461a      	mov	r2, r3
 800de76:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800de7a:	4825      	ldr	r0, [pc, #148]	@ (800df10 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 800de7c:	f012 f808 	bl	801fe90 <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 800de80:	4922      	ldr	r1, [pc, #136]	@ (800df0c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800de82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800de86:	f7f2 fa2b 	bl	80002e0 <strcmp>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 800de90:	2301      	movs	r3, #1
 800de92:	e000      	b.n	800de96 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 800de94:	2300      	movs	r3, #0
 800de96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de9a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800de9e:	f107 011c 	add.w	r1, r7, #28
 800dea2:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800dea6:	f107 0314 	add.w	r3, r7, #20
 800deaa:	9302      	str	r3, [sp, #8]
 800deac:	f107 0313 	add.w	r3, r7, #19
 800deb0:	9301      	str	r3, [sp, #4]
 800deb2:	f107 0318 	add.w	r3, r7, #24
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	460b      	mov	r3, r1
 800deba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800debe:	f000 f927 	bl	800e110 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800dec2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800dec6:	4619      	mov	r1, r3
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 f999 	bl	800e200 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800dece:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f972 	bl	800e1bc <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 800ded8:	bf00      	nop
}
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	37b0      	adds	r7, #176	@ 0xb0
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	080212b8 	.word	0x080212b8
 800dee8:	080212bc 	.word	0x080212bc
 800deec:	080212c4 	.word	0x080212c4
 800def0:	080212cc 	.word	0x080212cc
 800def4:	080212d8 	.word	0x080212d8
 800def8:	080212e4 	.word	0x080212e4
 800defc:	080212f0 	.word	0x080212f0
 800df00:	080212f8 	.word	0x080212f8
 800df04:	08021304 	.word	0x08021304
 800df08:	08021310 	.word	0x08021310
 800df0c:	08021318 	.word	0x08021318
 800df10:	08021320 	.word	0x08021320

0800df14 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 800df14:	b590      	push	{r4, r7, lr}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	4618      	mov	r0, r3
 800df26:	f000 fe41 	bl	800ebac <_ZN6ModuleC1Ev>
 800df2a:	4a1c      	ldr	r2, [pc, #112]	@ (800df9c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	619a      	str	r2, [r3, #24]
    mode(_mode),
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f103 0420 	add.w	r4, r3, #32
 800df42:	6838      	ldr	r0, [r7, #0]
 800df44:	f000 f96f 	bl	800e226 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800df48:	4603      	mov	r3, r0
 800df4a:	4619      	mov	r1, r3
 800df4c:	4620      	mov	r0, r4
 800df4e:	f011 fae2 	bl	801f516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6a3a      	ldr	r2, [r7, #32]
 800df56:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800df5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df66:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f103 0120 	add.w	r1, r3, #32
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f103 021c 	add.w	r2, r3, #28
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 800df80:	4623      	mov	r3, r4
 800df82:	f000 f95b 	bl	800e23c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df8a:	2201      	movs	r2, #1
 800df8c:	409a      	lsls	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd90      	pop	{r4, r7, pc}
 800df9c:	080218fc 	.word	0x080218fc

0800dfa0 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d136      	bne.n	800e01e <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3344      	adds	r3, #68	@ 0x44
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe f974 	bl	800c2a2 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7f4 fac1 	bl	8002544 <_ZNK3Pin3getEv>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	f083 0301 	eor.w	r3, r3, #1
 800dfd6:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00e      	beq.n	800dffc <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	881b      	ldrh	r3, [r3, #0]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	b21a      	sxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfec:	b21b      	sxth	r3, r3
 800dfee:	4313      	orrs	r3, r2
 800dff0:	b21a      	sxth	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	b292      	uxth	r2, r2
 800dff8:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 800dffa:	e031      	b.n	800e060 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	b29b      	uxth	r3, r3
 800e004:	b21a      	sxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	43db      	mvns	r3, r3
 800e00e:	b21b      	sxth	r3, r3
 800e010:	4013      	ands	r3, r2
 800e012:	b21a      	sxth	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	b292      	uxth	r2, r2
 800e01a:	801a      	strh	r2, [r3, #0]
}
 800e01c:	e020      	b.n	800e060 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	b29b      	uxth	r3, r3
 800e026:	461a      	mov	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e02c:	4013      	ands	r3, r2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf14      	ite	ne
 800e032:	2301      	movne	r3, #1
 800e034:	2300      	moveq	r3, #0
 800e036:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 800e042:	7bfb      	ldrb	r3, [r7, #15]
 800e044:	f083 0301 	eor.w	r3, r3, #1
 800e048:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3344      	adds	r3, #68	@ 0x44
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe f927 	bl	800c2a2 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800e054:	4602      	mov	r2, r0
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	4619      	mov	r1, r3
 800e05a:	4610      	mov	r0, r2
 800e05c:	f7f4 fa88 	bl	8002570 <_ZN3Pin3setEb>
}
 800e060:	bf00      	nop
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
    return;
 800e070:	bf00      	nop
}
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b08c      	sub	sp, #48	@ 0x30
 800e080:	af02      	add	r7, sp, #8
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	f107 0314 	add.w	r3, r7, #20
 800e08e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e092:	e883 0003 	stmia.w	r3, {r0, r1}
 800e096:	f107 031c 	add.w	r3, r7, #28
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fc f8b6 	bl	800a20e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e0a2:	466a      	mov	r2, sp
 800e0a4:	f107 0320 	add.w	r3, r7, #32
 800e0a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0ac:	e882 0003 	stmia.w	r2, {r0, r1}
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	f107 0214 	add.w	r2, r7, #20
 800e0b6:	ca06      	ldmia	r2, {r1, r2}
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f7f7 f9b6 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	3728      	adds	r7, #40	@ 0x28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b08c      	sub	sp, #48	@ 0x30
 800e0ca:	af02      	add	r7, sp, #8
 800e0cc:	60f8      	str	r0, [r7, #12]
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	f107 0314 	add.w	r3, r7, #20
 800e0d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0e0:	f107 031c 	add.w	r3, r7, #28
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 f8cf 	bl	800e28a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e0ec:	466a      	mov	r2, sp
 800e0ee:	f107 0320 	add.w	r3, r7, #32
 800e0f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0f6:	e882 0003 	stmia.w	r2, {r0, r1}
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	f107 0214 	add.w	r2, r7, #20
 800e100:	ca06      	ldmia	r2, {r1, r2}
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f7f7 f991 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	3728      	adds	r7, #40	@ 0x28
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e114:	b091      	sub	sp, #68	@ 0x44
 800e116:	af04      	add	r7, sp, #16
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	607a      	str	r2, [r7, #4]
 800e11e:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e120:	204c      	movs	r0, #76	@ 0x4c
 800e122:	f011 f933 	bl	801f38c <_Znwj>
 800e126:	4603      	mov	r3, r0
 800e128:	4698      	mov	r8, r3
 800e12a:	68b8      	ldr	r0, [r7, #8]
 800e12c:	f000 f8c0 	bl	800e2b0 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 800e130:	4681      	mov	r9, r0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fe f8c1 	bl	800c2ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800e138:	4603      	mov	r3, r0
 800e13a:	681e      	ldr	r6, [r3, #0]
 800e13c:	6838      	ldr	r0, [r7, #0]
 800e13e:	f7fe f8fc 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e142:	4603      	mov	r3, r0
 800e144:	681c      	ldr	r4, [r3, #0]
 800e146:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e14a:	4618      	mov	r0, r3
 800e14c:	f011 f92f 	bl	801f3ae <_ZNSaIcEC1Ev>
 800e150:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e154:	f107 0314 	add.w	r3, r7, #20
 800e158:	4621      	mov	r1, r4
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7f6 ff70 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e160:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e162:	f7fe f8f5 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e166:	4603      	mov	r3, r0
 800e168:	681c      	ldr	r4, [r3, #0]
 800e16a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e16c:	f000 f8ab 	bl	800e2c6 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800e170:	4603      	mov	r3, r0
 800e172:	781d      	ldrb	r5, [r3, #0]
 800e174:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e176:	f7fe f8eb 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e17a:	4603      	mov	r3, r0
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f107 0214 	add.w	r2, r7, #20
 800e182:	9302      	str	r3, [sp, #8]
 800e184:	9501      	str	r5, [sp, #4]
 800e186:	9400      	str	r4, [sp, #0]
 800e188:	4613      	mov	r3, r2
 800e18a:	4632      	mov	r2, r6
 800e18c:	4649      	mov	r1, r9
 800e18e:	4640      	mov	r0, r8
 800e190:	f7ff fec0 	bl	800df14 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800e194:	4641      	mov	r1, r8
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 f8b0 	bl	800e2fc <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e19c:	f107 0314 	add.w	r3, r7, #20
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f011 f9d7 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e1a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f011 f900 	bl	801f3b0 <_ZNSaIcED1Ev>
 800e1b0:	bf00      	nop
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	3734      	adds	r7, #52	@ 0x34
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e1bc <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f000 f8a7 	bl	800e31a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e1cc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00c      	beq.n	800e1f0 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f8ac 	bl	800e334 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 800e1dc:	4604      	mov	r4, r0
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f000 f8b5 	bl	800e34e <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 f8e6 	bl	800e3bc <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]
      }
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd90      	pop	{r4, r7, pc}

0800e200 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e200:	b590      	push	{r4, r7, lr}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800e20a:	687c      	ldr	r4, [r7, #4]
 800e20c:	6838      	ldr	r0, [r7, #0]
 800e20e:	f000 f8e6 	bl	800e3de <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e212:	4603      	mov	r3, r0
 800e214:	4619      	mov	r1, r3
 800e216:	4620      	mov	r0, r4
 800e218:	f000 f8ec 	bl	800e3f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4618      	mov	r0, r3
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	bd90      	pop	{r4, r7, pc}

0800e226 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800e226:	b480      	push	{r7}
 800e228:	b083      	sub	sp, #12
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4618      	mov	r0, r3
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e24a:	2040      	movs	r0, #64	@ 0x40
 800e24c:	f011 f89e 	bl	801f38c <_Znwj>
 800e250:	4603      	mov	r3, r0
 800e252:	461d      	mov	r5, r3
 800e254:	68b8      	ldr	r0, [r7, #8]
 800e256:	f7fe f947 	bl	800c4e8 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e25a:	4606      	mov	r6, r0
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7fe f877 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e262:	4603      	mov	r3, r0
 800e264:	681c      	ldr	r4, [r3, #0]
 800e266:	6838      	ldr	r0, [r7, #0]
 800e268:	f7fe f872 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e26c:	4603      	mov	r3, r0
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4622      	mov	r2, r4
 800e272:	4631      	mov	r1, r6
 800e274:	4628      	mov	r0, r5
 800e276:	f7f3 fff9 	bl	800226c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 800e27a:	4629      	mov	r1, r5
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f7fe f94e 	bl	800c51e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e28a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e294:	6838      	ldr	r0, [r7, #0]
 800e296:	f000 f8e5 	bl	800e464 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e29a:	4602      	mov	r2, r0
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f8ea 	bl	800e47a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800e2a6:	bf00      	nop
}
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 f8d3 	bl	800e498 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7ff ffe6 	bl	800e2dc <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4618      	mov	r0, r3
 800e326:	f000 f8cb 	bl	800e4c0 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e32a:	4603      	mov	r3, r0
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 f8cb 	bl	800e4da <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 800e344:	4603      	mov	r3, r0
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4618      	mov	r0, r3
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	4a0a      	ldr	r2, [pc, #40]	@ (800e398 <_ZN10DigitalPinD1Ev+0x34>)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3344      	adds	r3, #68	@ 0x44
 800e376:	4618      	mov	r0, r3
 800e378:	f7fd ff71 	bl	800c25e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3320      	adds	r3, #32
 800e380:	4618      	mov	r0, r3
 800e382:	f011 f8e7 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 fc2b 	bl	800ebe4 <_ZN6ModuleD1Ev>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	080218fc 	.word	0x080218fc

0800e39c <_ZN10DigitalPinD0Ev>:
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff ffdd 	bl	800e364 <_ZN10DigitalPinD1Ev>
 800e3aa:	214c      	movs	r1, #76	@ 0x4c
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f010 ffdc 	bl	801f36a <_ZdlPvj>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	3204      	adds	r2, #4
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	4790      	blx	r2
      }
 800e3d6:	bf00      	nop
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e3de:	b480      	push	{r7}
 800e3e0:	b083      	sub	sp, #12
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800e3fe:	6838      	ldr	r0, [r7, #0]
 800e400:	f000 f878 	bl	800e4f4 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800e404:	4602      	mov	r2, r0
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fb ffd2 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800e414:	6838      	ldr	r0, [r7, #0]
 800e416:	f000 f86d 	bl	800e4f4 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4618      	mov	r0, r3
 800e41e:	f000 f876 	bl	800e50e <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 800e422:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800e424:	6838      	ldr	r0, [r7, #0]
 800e426:	f7ff ffda 	bl	800e3de <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e42a:	4602      	mov	r2, r0
 800e42c:	f107 0308 	add.w	r3, r7, #8
 800e430:	4611      	mov	r1, r2
 800e432:	4618      	mov	r0, r3
 800e434:	f000 f876 	bl	800e524 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	3304      	adds	r3, #4
 800e43c:	f107 0208 	add.w	r2, r7, #8
 800e440:	4611      	mov	r1, r2
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe f98c 	bl	800c760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e448:	f107 0308 	add.w	r3, r7, #8
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fa ffed 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800e452:	68f9      	ldr	r1, [r7, #12]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f8a7 	bl	800e5a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e46c:	687b      	ldr	r3, [r7, #4]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b082      	sub	sp, #8
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e484:	2301      	movs	r3, #1
 800e486:	2208      	movs	r2, #8
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7f4 fa48 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e498:	b590      	push	{r4, r7, lr}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 f88a 	bl	800e5be <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e4aa:	683c      	ldr	r4, [r7, #0]
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7ff ff34 	bl	800e31a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	601c      	str	r4, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd90      	pop	{r4, r7, pc}

0800e4c0 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 f884 	bl	800e5d8 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f000 f883 	bl	800e5f0 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 f882 	bl	800e608 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e504:	4603      	mov	r3, r0
 800e506:	4618      	mov	r0, r3
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800e50e:	b480      	push	{r7}
 800e510:	b083      	sub	sp, #12
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
      return __ptr;
 800e516:	687b      	ldr	r3, [r7, #4]
    }
 800e518:	4618      	mov	r0, r3
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800e534:	6838      	ldr	r0, [r7, #0]
 800e536:	f7ff ffdd 	bl	800e4f4 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	bf0c      	ite	eq
 800e540:	2301      	moveq	r3, #1
 800e542:	2300      	movne	r3, #0
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d128      	bne.n	800e59c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800e54a:	f107 030c 	add.w	r3, r7, #12
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f868 	bl	800e624 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800e554:	f107 030c 	add.w	r3, r7, #12
 800e558:	2101      	movs	r1, #1
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 f87a 	bl	800e654 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800e560:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f000 f885 	bl	800e672 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 800e568:	4603      	mov	r3, r0
 800e56a:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800e56c:	6838      	ldr	r0, [r7, #0]
 800e56e:	f7ff fee1 	bl	800e334 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 800e572:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e574:	4618      	mov	r0, r3
 800e576:	f000 f889 	bl	800e68c <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e57a:	4603      	mov	r3, r0
 800e57c:	f107 0210 	add.w	r2, r7, #16
 800e580:	f107 000c 	add.w	r0, r7, #12
 800e584:	6979      	ldr	r1, [r7, #20]
 800e586:	f000 f88c 	bl	800e6a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	601a      	str	r2, [r3, #0]
	}
 800e590:	f107 030c 	add.w	r3, r7, #12
 800e594:	4618      	mov	r0, r3
 800e596:	f000 f851 	bl	800e63c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e59a:	e000      	b.n	800e59e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800e59c:	bf00      	nop
	}
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
	{ }
 800e5b2:	bf00      	nop
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b082      	sub	sp, #8
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 f882 	bl	800e6d2 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f886 	bl	800e6f2 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f887 	bl	800e70c <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e5fe:	4603      	mov	r3, r0
 800e600:	4618      	mov	r0, r3
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f886 	bl	800e724 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e618:	4603      	mov	r3, r0
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f886 	bl	800e73e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f885 	bl	800e754 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4618      	mov	r0, r3
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e65e:	2200      	movs	r2, #0
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f881 	bl	800e76a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e668:	4603      	mov	r3, r0
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e672:	b580      	push	{r7, lr}
 800e674:	b082      	sub	sp, #8
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f000 f89e 	bl	800e7be <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 800e682:	4603      	mov	r3, r0
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4618      	mov	r0, r3
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e6a2:	b590      	push	{r4, r7, lr}
 800e6a4:	b085      	sub	sp, #20
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	60f8      	str	r0, [r7, #12]
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
 800e6ae:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f899 	bl	800e7e8 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	6838      	ldr	r0, [r7, #0]
 800e6ba:	f7ff ffe7 	bl	800e68c <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	68b9      	ldr	r1, [r7, #8]
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f000 f89a 	bl	800e7fe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800e6ca:	bf00      	nop
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd90      	pop	{r4, r7, pc}

0800e6d2 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b082      	sub	sp, #8
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f8ad 	bl	800e83a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 f8b5 	bl	800e852 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 f8b6 	bl	800e86e <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 800e702:	4603      	mov	r3, r0
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f8b5 	bl	800e884 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 800e71a:	4603      	mov	r3, r0
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 f8b4 	bl	800e89c <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e734:	4603      	mov	r3, r0
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4618      	mov	r0, r3
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b084      	sub	sp, #16
 800e76e:	af00      	add	r7, sp, #0
 800e770:	60f8      	str	r0, [r7, #12]
 800e772:	60b9      	str	r1, [r7, #8]
 800e774:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f000 f89c 	bl	800e8b4 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e77c:	4602      	mov	r2, r0
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	4293      	cmp	r3, r2
 800e782:	bf8c      	ite	hi
 800e784:	2301      	movhi	r3, #1
 800e786:	2300      	movls	r3, #0
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bf14      	ite	ne
 800e78e:	2301      	movne	r3, #1
 800e790:	2300      	moveq	r3, #0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d007      	beq.n	800e7a8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e79e:	d301      	bcc.n	800e7a4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e7a0:	f010 fe0a 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e7a4:	f010 fe05 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	011b      	lsls	r3, r3, #4
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f010 fded 	bl	801f38c <_Znwj>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	bf00      	nop
      }
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b084      	sub	sp, #16
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fda7 	bl	800e31a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7ff fda1 	bl	800e31a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
	return __p;
 800e7de:	68fb      	ldr	r3, [r7, #12]
      }
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e800:	b085      	sub	sp, #20
 800e802:	af00      	add	r7, sp, #0
 800e804:	60f8      	str	r0, [r7, #12]
 800e806:	60b9      	str	r1, [r7, #8]
 800e808:	607a      	str	r2, [r7, #4]
 800e80a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	4619      	mov	r1, r3
 800e810:	2010      	movs	r0, #16
 800e812:	f7f9 fc57 	bl	80080c4 <_ZnwjPv>
 800e816:	4605      	mov	r5, r0
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff ffe5 	bl	800e7e8 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800e81e:	4603      	mov	r3, r0
 800e820:	681c      	ldr	r4, [r3, #0]
 800e822:	6838      	ldr	r0, [r7, #0]
 800e824:	f7ff ff32 	bl	800e68c <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e828:	4632      	mov	r2, r6
 800e82a:	4621      	mov	r1, r4
 800e82c:	4628      	mov	r0, r5
 800e82e:	f000 f84d 	bl	800e8cc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800e832:	bf00      	nop
 800e834:	3714      	adds	r7, #20
 800e836:	46bd      	mov	sp, r7
 800e838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e83a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b082      	sub	sp, #8
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f864 	bl	800e910 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4618      	mov	r0, r3
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr

0800e86e <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e86e:	b480      	push	{r7}
 800e870:	b083      	sub	sp, #12
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f84a 	bl	800e926 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 800e892:	4603      	mov	r3, r0
 800e894:	4618      	mov	r0, r3
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f849 	bl	800e93c <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e8bc:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800e8cc:	b5b0      	push	{r4, r5, r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fc fc56 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e8e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e90c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f103 040c 	add.w	r4, r3, #12
 800e8ec:	1d3b      	adds	r3, r7, #4
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f831 	bl	800e956 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e8f4:	f107 0314 	add.w	r3, r7, #20
 800e8f8:	462a      	mov	r2, r5
 800e8fa:	68b9      	ldr	r1, [r7, #8]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 f835 	bl	800e96c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	4618      	mov	r0, r3
 800e906:	3718      	adds	r7, #24
 800e908:	46bd      	mov	sp, r7
 800e90a:	bdb0      	pop	{r4, r5, r7, pc}
 800e90c:	080218e0 	.word	0x080218e0

0800e910 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4618      	mov	r0, r3
 800e948:	f000 f82c 	bl	800e9a4 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 800e94c:	4603      	mov	r3, r0
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	713a      	strb	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800e97a:	1d3b      	adds	r3, r7, #4
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7ff ffea 	bl	800e956 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e982:	4603      	mov	r3, r0
 800e984:	4619      	mov	r1, r3
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f000 f817 	bl	800e9ba <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f7fe fc46 	bl	800d220 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	601a      	str	r2, [r3, #0]
	{ }
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b082      	sub	sp, #8
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
 800e9c4:	6838      	ldr	r0, [r7, #0]
 800e9c6:	f7ff ffc6 	bl	800e956 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	4a05      	ldr	r2, [pc, #20]	@ (800e9f4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fa ffdb 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3708      	adds	r7, #8
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	080218e0 	.word	0x080218e0

0800e9f8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff ffe7 	bl	800e9d4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ea06:	2110      	movs	r1, #16
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f010 fcae 	bl	801f36a <_ZdlPvj>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	330c      	adds	r3, #12
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 f83f 	bl	800eaa8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	4619      	mov	r1, r3
 800ea32:	4610      	mov	r0, r2
 800ea34:	f7ff fcc2 	bl	800e3bc <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	330c      	adds	r3, #12
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f000 f837 	bl	800eac0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ea52:	4602      	mov	r2, r0
 800ea54:	f107 0314 	add.w	r3, r7, #20
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 f83c 	bl	800ead8 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ea60:	f107 0114 	add.w	r1, r7, #20
 800ea64:	f107 030c 	add.w	r3, r7, #12
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 f841 	bl	800eaf2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7ff ffaf 	bl	800e9d4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ea76:	f107 030c 	add.w	r3, r7, #12
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 f84d 	bl	800eb1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ea80:	f107 0314 	add.w	r3, r7, #20
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff fdd9 	bl	800e63c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ea8a:	3718      	adds	r7, #24
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ea9a:	2300      	movs	r3, #0
      }
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f847 	bl	800eb44 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 800eab6:	4603      	mov	r3, r0
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7fe fc78 	bl	800d3be <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800eace:	4603      	mov	r3, r0
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7ff fe2b 	bl	800e73e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	60b9      	str	r1, [r7, #8]
 800eafc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800eafe:	68b8      	ldr	r0, [r7, #8]
 800eb00:	f000 f82b 	bl	800eb5a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800eb04:	4602      	mov	r2, r0
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	605a      	str	r2, [r3, #4]
      { }
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	4618      	mov	r0, r3
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d007      	beq.n	800eb3a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	4619      	mov	r1, r3
 800eb36:	f000 f81b 	bl	800eb70 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4618      	mov	r0, r3
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	68b9      	ldr	r1, [r7, #8]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f000 f804 	bl	800eb8e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800eb86:	bf00      	nop
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	60f8      	str	r0, [r7, #12]
 800eb96:	60b9      	str	r1, [r7, #8]
 800eb98:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	011b      	lsls	r3, r3, #4
 800eb9e:	4619      	mov	r1, r3
 800eba0:	68b8      	ldr	r0, [r7, #8]
 800eba2:	f010 fbe2 	bl	801f36a <_ZdlPvj>
      }
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	4a09      	ldr	r2, [pc, #36]	@ (800ebdc <_ZN6ModuleC1Ev+0x30>)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800ebcc:	4804      	ldr	r0, [pc, #16]	@ (800ebe0 <_ZN6ModuleC1Ev+0x34>)
 800ebce:	f011 f9cf 	bl	801ff70 <puts>
}
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	08021920 	.word	0x08021920
 800ebe0:	08021384 	.word	0x08021384

0800ebe4 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	4a04      	ldr	r2, [pc, #16]	@ (800ec00 <_ZN6ModuleD1Ev+0x1c>)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	08021920 	.word	0x08021920

0800ec04 <_ZN6ModuleD0Ev>:
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff ffe9 	bl	800ebe4 <_ZN6ModuleD1Ev>
 800ec12:	2118      	movs	r1, #24
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f010 fba8 	bl	801f36a <_ZdlPvj>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
	++this->counter;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	691b      	ldr	r3, [r3, #16]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	691a      	ldr	r2, [r3, #16]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	db08      	blt.n	800ec54 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3310      	adds	r3, #16
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	4798      	blx	r3
		this->counter = 0;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	3308      	adds	r3, #8
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	4798      	blx	r3
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	bf00      	nop
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <_ZN6Module9configureEv>:
void Module::configure(){}
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	370c      	adds	r7, #12
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr
	...

0800ecd0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08e      	sub	sp, #56	@ 0x38
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 800ecde:	4948      	ldr	r1, [pc, #288]	@ (800ee00 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x130>)
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7f1 fafd 	bl	80002e0 <strcmp>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d115      	bne.n	800ed18 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x48>
        if (strcmp(_mtype, "Stepgen") == 0) {
 800ecec:	4945      	ldr	r1, [pc, #276]	@ (800ee04 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x134>)
 800ecee:	6838      	ldr	r0, [r7, #0]
 800ecf0:	f7f1 faf6 	bl	80002e0 <strcmp>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d179      	bne.n	800edee <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x11e>
            return Stepgen::create(config, instance);
 800ecfa:	f107 0310 	add.w	r3, r7, #16
 800ecfe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7f6 f9ee 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f107 0110 	add.w	r1, r7, #16
 800ed0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed10:	4618      	mov	r0, r3
 800ed12:	f001 fe0d 	bl	8010930 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 800ed16:	e06e      	b.n	800edf6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x126>
    } else if (strcmp(_tname, "Servo") == 0) {
 800ed18:	493b      	ldr	r1, [pc, #236]	@ (800ee08 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x138>)
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7f1 fae0 	bl	80002e0 <strcmp>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d157      	bne.n	800edd6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x106>
        if (strcmp(_mtype, "Blink") == 0) {
 800ed26:	4939      	ldr	r1, [pc, #228]	@ (800ee0c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x13c>)
 800ed28:	6838      	ldr	r0, [r7, #0]
 800ed2a:	f7f1 fad9 	bl	80002e0 <strcmp>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10e      	bne.n	800ed52 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x82>
            return Blink::create(config, instance);
 800ed34:	f107 0318 	add.w	r3, r7, #24
 800ed38:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7f6 f9d1 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f107 0118 	add.w	r1, r7, #24
 800ed48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fd f8d6 	bl	800befc <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800ed50:	e051      	b.n	800edf6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x126>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 800ed52:	492f      	ldr	r1, [pc, #188]	@ (800ee10 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x140>)
 800ed54:	6838      	ldr	r0, [r7, #0]
 800ed56:	f7f1 fac3 	bl	80002e0 <strcmp>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10e      	bne.n	800ed7e <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xae>
            return ResetPin::create(config, instance);
 800ed60:	f107 0320 	add.w	r3, r7, #32
 800ed64:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7f6 f9bb 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f107 0120 	add.w	r1, r7, #32
 800ed74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 f8bc 	bl	800eef4 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800ed7c:	e03b      	b.n	800edf6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x126>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 800ed7e:	4925      	ldr	r1, [pc, #148]	@ (800ee14 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x144>)
 800ed80:	6838      	ldr	r0, [r7, #0]
 800ed82:	f7f1 faad 	bl	80002e0 <strcmp>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10e      	bne.n	800edaa <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xda>
            return DigitalPin::create(config, instance);
 800ed8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ed90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7f6 f9a5 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800eda0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fe ffca 	bl	800dd3c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800eda8:	e025      	b.n	800edf6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x126>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 800edaa:	491b      	ldr	r1, [pc, #108]	@ (800ee18 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x148>)
 800edac:	6838      	ldr	r0, [r7, #0]
 800edae:	f7f1 fa97 	bl	80002e0 <strcmp>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11a      	bne.n	800edee <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x11e>
            return SigmaDelta::create(config, instance);
 800edb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800edbc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7f6 f98f 	bl	80050e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800edcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fe2a 	bl	800fa28 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800edd4:	e00f      	b.n	800edf6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x126>
    } else if (strcmp(_tname, "On load") == 0) {
 800edd6:	4911      	ldr	r1, [pc, #68]	@ (800ee1c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x14c>)
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7f1 fa81 	bl	80002e0 <strcmp>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d004      	beq.n	800edee <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x11e>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	480d      	ldr	r0, [pc, #52]	@ (800ee20 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x150>)
 800edea:	f011 f851 	bl	801fe90 <iprintf>
    return nullptr;
 800edee:	2100      	movs	r1, #0
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f000 f847 	bl	800ee84 <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	3738      	adds	r7, #56	@ 0x38
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	080213dc 	.word	0x080213dc
 800ee04:	080213e4 	.word	0x080213e4
 800ee08:	080213ec 	.word	0x080213ec
 800ee0c:	080213f4 	.word	0x080213f4
 800ee10:	080213fc 	.word	0x080213fc
 800ee14:	08021408 	.word	0x08021408
 800ee18:	08021414 	.word	0x08021414
 800ee1c:	08021420 	.word	0x08021420
 800ee20:	08021428 	.word	0x08021428

0800ee24 <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800ee24:	b598      	push	{r3, r4, r7, lr}
 800ee26:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800ee28:	4b14      	ldr	r3, [pc, #80]	@ (800ee7c <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f3bf 8f5b 	dmb	ish
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bf0c      	ite	eq
 800ee38:	2301      	moveq	r3, #1
 800ee3a:	2300      	movne	r3, #0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d017      	beq.n	800ee72 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800ee42:	480e      	ldr	r0, [pc, #56]	@ (800ee7c <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800ee44:	f010 fa93 	bl	801f36e <__cxa_guard_acquire>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	bf14      	ite	ne
 800ee4e:	2301      	movne	r3, #1
 800ee50:	2300      	moveq	r3, #0
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00c      	beq.n	800ee72 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800ee58:	2001      	movs	r0, #1
 800ee5a:	f010 fa97 	bl	801f38c <_Znwj>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	461c      	mov	r4, r3
 800ee62:	4620      	mov	r0, r4
 800ee64:	f7ff ff28 	bl	800ecb8 <_ZN13ModuleFactoryC1Ev>
 800ee68:	4b05      	ldr	r3, [pc, #20]	@ (800ee80 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800ee6a:	601c      	str	r4, [r3, #0]
 800ee6c:	4803      	ldr	r0, [pc, #12]	@ (800ee7c <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800ee6e:	f010 fa8a 	bl	801f386 <__cxa_guard_release>
    return instance;
 800ee72:	4b03      	ldr	r3, [pc, #12]	@ (800ee80 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800ee74:	681b      	ldr	r3, [r3, #0]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	bd98      	pop	{r3, r4, r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	24000410 	.word	0x24000410
 800ee80:	2400040c 	.word	0x2400040c

0800ee84 <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 f805 	bl	800ee9e <_ZNSt10shared_ptrI6ModuleEC1Ev>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4618      	mov	r0, r3
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b082      	sub	sp, #8
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f000 f805 	bl	800eeb8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	3304      	adds	r3, #4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fb fa74 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 800eeda:	b480      	push	{r7}
 800eedc:	b083      	sub	sp, #12
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	330c      	adds	r3, #12
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
	...

0800eef4 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b094      	sub	sp, #80	@ 0x50
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 800ef00:	f107 0314 	add.w	r3, r7, #20
 800ef04:	4a1f      	ldr	r2, [pc, #124]	@ (800ef84 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 f886 	bl	800f01a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ef0e:	f107 0314 	add.w	r3, r7, #20
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7f6 f91a 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ef18:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 800ef1a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ef1c:	f011 f828 	bl	801ff70 <puts>

	const char* pin = config["Pin"];
 800ef20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef24:	4a18      	ldr	r2, [pc, #96]	@ (800ef88 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 800ef26:	68b9      	ldr	r1, [r7, #8]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fd f8ab 	bl	800c084 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ef2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f6 f90a 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4812      	ldr	r0, [pc, #72]	@ (800ef8c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 800ef42:	f010 ffa5 	bl	801fe90 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff ffc7 	bl	800eeda <_ZN6Remora8getResetEv>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ef54:	f107 0210 	add.w	r2, r7, #16
 800ef58:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f881 	bl	800f064 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800ef62:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ef66:	4619      	mov	r1, r3
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 f8d9 	bl	800f120 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800ef6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 f8b2 	bl	800f0dc <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 800ef78:	bf00      	nop
}
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	3750      	adds	r7, #80	@ 0x50
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08021460 	.word	0x08021460
 800ef88:	08021468 	.word	0x08021468
 800ef8c:	0802146c 	.word	0x0802146c

0800ef90 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff fe04 	bl	800ebac <_ZN6ModuleC1Ev>
 800efa4:	4a0e      	ldr	r2, [pc, #56]	@ (800efe0 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	68ba      	ldr	r2, [r7, #8]
 800efae:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	331c      	adds	r3, #28
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f010 fbcb 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 800efbc:	2040      	movs	r0, #64	@ 0x40
 800efbe:	f010 f9e5 	bl	801f38c <_Znwj>
 800efc2:	4603      	mov	r3, r0
 800efc4:	461c      	mov	r4, r3
 800efc6:	2200      	movs	r2, #0
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	4620      	mov	r0, r4
 800efcc:	f7f3 f926 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	635c      	str	r4, [r3, #52]	@ 0x34
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4618      	mov	r0, r3
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd90      	pop	{r4, r7, pc}
 800efde:	bf00      	nop
 800efe0:	08021960 	.word	0x08021960

0800efe4 <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 800efe4:	b590      	push	{r4, r7, lr}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	699c      	ldr	r4, [r3, #24]
 800eff4:	4610      	mov	r0, r2
 800eff6:	f7f3 faa5 	bl	8002544 <_ZNK3Pin3getEv>
 800effa:	4603      	mov	r3, r0
 800effc:	7023      	strb	r3, [r4, #0]
}
 800effe:	bf00      	nop
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	bd90      	pop	{r4, r7, pc}

0800f006 <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
    return;
 800f00e:	bf00      	nop
}
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b08c      	sub	sp, #48	@ 0x30
 800f01e:	af02      	add	r7, sp, #8
 800f020:	60f8      	str	r0, [r7, #12]
 800f022:	60b9      	str	r1, [r7, #8]
 800f024:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	f107 0314 	add.w	r3, r7, #20
 800f02c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f030:	e883 0003 	stmia.w	r3, {r0, r1}
 800f034:	f107 031c 	add.w	r3, r7, #28
 800f038:	6879      	ldr	r1, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7f6 fbc8 	bl	80057d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f040:	466a      	mov	r2, sp
 800f042:	f107 0320 	add.w	r3, r7, #32
 800f046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f04a:	e882 0003 	stmia.w	r2, {r0, r1}
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	f107 0214 	add.w	r2, r7, #20
 800f054:	ca06      	ldmia	r2, {r1, r2}
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7f6 f9e7 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	3728      	adds	r7, #40	@ 0x28
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f066:	b08d      	sub	sp, #52	@ 0x34
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f070:	2038      	movs	r0, #56	@ 0x38
 800f072:	f010 f98b 	bl	801f38c <_Znwj>
 800f076:	4603      	mov	r3, r0
 800f078:	461e      	mov	r6, r3
 800f07a:	68b8      	ldr	r0, [r7, #8]
 800f07c:	f000 f863 	bl	800f146 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 800f080:	4603      	mov	r3, r0
 800f082:	681c      	ldr	r4, [r3, #0]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7fd f958 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f08a:	4603      	mov	r3, r0
 800f08c:	681d      	ldr	r5, [r3, #0]
 800f08e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f092:	4618      	mov	r0, r3
 800f094:	f010 f98b 	bl	801f3ae <_ZNSaIcEC1Ev>
 800f098:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f09c:	f107 0314 	add.w	r3, r7, #20
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7f5 ffcc 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f0a8:	f107 0314 	add.w	r3, r7, #20
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4621      	mov	r1, r4
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7ff ff6d 	bl	800ef90 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 f85f 	bl	800f17c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f0be:	f107 0314 	add.w	r3, r7, #20
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f010 fa46 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f0c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f010 f96f 	bl	801f3b0 <_ZNSaIcED1Ev>
 800f0d2:	bf00      	nop
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	3734      	adds	r7, #52	@ 0x34
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0dc <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f0dc:	b590      	push	{r4, r7, lr}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 f857 	bl	800f19a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f0ec:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00c      	beq.n	800f110 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f85c 	bl	800f1b4 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f000 f865 	bl	800f1ce <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 800f104:	4603      	mov	r3, r0
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4619      	mov	r1, r3
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f892 	bl	800f234 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	601a      	str	r2, [r3, #0]
      }
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4618      	mov	r0, r3
 800f11a:	3714      	adds	r7, #20
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd90      	pop	{r4, r7, pc}

0800f120 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f120:	b590      	push	{r4, r7, lr}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f12a:	687c      	ldr	r4, [r7, #4]
 800f12c:	6838      	ldr	r0, [r7, #0]
 800f12e:	f000 f892 	bl	800f256 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f132:	4603      	mov	r3, r0
 800f134:	4619      	mov	r1, r3
 800f136:	4620      	mov	r0, r4
 800f138:	f000 f898 	bl	800f26c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	bd90      	pop	{r4, r7, pc}

0800f146 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f146:	b480      	push	{r7}
 800f148:	b083      	sub	sp, #12
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	683a      	ldr	r2, [r7, #0]
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 f8b5 	bl	800f2dc <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff ffe6 	bl	800f15c <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b082      	sub	sp, #8
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f000 f8ad 	bl	800f304 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 f8ad 	bl	800f31e <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f1ce:	b480      	push	{r7}
 800f1d0:	b083      	sub	sp, #12
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	4a08      	ldr	r2, [pc, #32]	@ (800f210 <_ZN8ResetPinD1Ev+0x2c>)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	331c      	adds	r3, #28
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f010 f9ac 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff fcf0 	bl	800ebe4 <_ZN6ModuleD1Ev>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4618      	mov	r0, r3
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	08021960 	.word	0x08021960

0800f214 <_ZN8ResetPinD0Ev>:
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff ffe1 	bl	800f1e4 <_ZN8ResetPinD1Ev>
 800f222:	2138      	movs	r1, #56	@ 0x38
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f010 f8a0 	bl	801f36a <_ZdlPvj>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d004      	beq.n	800f24e <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	3204      	adds	r2, #4
 800f248:	6812      	ldr	r2, [r2, #0]
 800f24a:	4618      	mov	r0, r3
 800f24c:	4790      	blx	r2
      }
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f256:	b480      	push	{r7}
 800f258:	b083      	sub	sp, #12
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f276:	6838      	ldr	r0, [r7, #0]
 800f278:	f000 f85e 	bl	800f338 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800f27c:	4602      	mov	r2, r0
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	601a      	str	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3304      	adds	r3, #4
 800f286:	4618      	mov	r0, r3
 800f288:	f7fb f896 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f28c:	6838      	ldr	r0, [r7, #0]
 800f28e:	f000 f853 	bl	800f338 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800f292:	4603      	mov	r3, r0
 800f294:	4618      	mov	r0, r3
 800f296:	f000 f85c 	bl	800f352 <_ZSt12__to_addressI8ResetPinEPT_S2_>
 800f29a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f29c:	6838      	ldr	r0, [r7, #0]
 800f29e:	f7ff ffda 	bl	800f256 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	f107 0308 	add.w	r3, r7, #8
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f000 f85c 	bl	800f368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	f107 0208 	add.w	r2, r7, #8
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fd fa50 	bl	800c760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f2c0:	f107 0308 	add.w	r3, r7, #8
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fa f8b1 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f2ca:	68f9      	ldr	r1, [r7, #12]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 f88d 	bl	800f3ec <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 f88a 	bl	800f402 <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f2ee:	683c      	ldr	r4, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f7ff ff52 	bl	800f19a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	601c      	str	r4, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	bd90      	pop	{r4, r7, pc}

0800f304 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 f884 	bl	800f41c <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f314:	4603      	mov	r3, r0
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f000 f883 	bl	800f434 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f32e:	4603      	mov	r3, r0
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 f882 	bl	800f44c <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f348:	4603      	mov	r3, r0
 800f34a:	4618      	mov	r0, r3
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f352:	b480      	push	{r7}
 800f354:	b083      	sub	sp, #12
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f35a:	687b      	ldr	r3, [r7, #4]
    }
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800f378:	6838      	ldr	r0, [r7, #0]
 800f37a:	f7ff ffdd 	bl	800f338 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	bf0c      	ite	eq
 800f384:	2301      	moveq	r3, #1
 800f386:	2300      	movne	r3, #0
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d128      	bne.n	800f3e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800f38e:	f107 030c 	add.w	r3, r7, #12
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f868 	bl	800f468 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	2101      	movs	r1, #1
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 f87a 	bl	800f498 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800f3a4:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f3a6:	6838      	ldr	r0, [r7, #0]
 800f3a8:	f000 f885 	bl	800f4b6 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800f3b0:	6838      	ldr	r0, [r7, #0]
 800f3b2:	f7ff feff 	bl	800f1b4 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 800f3b6:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f000 f889 	bl	800f4d0 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f107 0210 	add.w	r2, r7, #16
 800f3c4:	f107 000c 	add.w	r0, r7, #12
 800f3c8:	6979      	ldr	r1, [r7, #20]
 800f3ca:	f000 f88c 	bl	800f4e6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	601a      	str	r2, [r3, #0]
	}
 800f3d4:	f107 030c 	add.w	r3, r7, #12
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f000 f851 	bl	800f480 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f3de:	e000      	b.n	800f3e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800f3e0:	bf00      	nop
	}
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
	{ }
 800f3f6:	bf00      	nop
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 f882 	bl	800f516 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f886 	bl	800f536 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 800f42a:	4603      	mov	r3, r0
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f887 	bl	800f550 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800f442:	4603      	mov	r3, r0
 800f444:	4618      	mov	r0, r3
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4618      	mov	r0, r3
 800f458:	f000 f886 	bl	800f568 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f45c:	4603      	mov	r3, r0
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f886 	bl	800f582 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f885 	bl	800f598 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4618      	mov	r0, r3
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f881 	bl	800f5ae <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b082      	sub	sp, #8
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f89e 	bl	800f602 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f4e6:	b590      	push	{r4, r7, lr}
 800f4e8:	b085      	sub	sp, #20
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
 800f4f2:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f899 	bl	800f62c <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	6838      	ldr	r0, [r7, #0]
 800f4fe:	f7ff ffe7 	bl	800f4d0 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f502:	4603      	mov	r3, r0
 800f504:	4622      	mov	r2, r4
 800f506:	68b9      	ldr	r1, [r7, #8]
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f000 f89a 	bl	800f642 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800f50e:	bf00      	nop
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	bd90      	pop	{r4, r7, pc}

0800f516 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f8ad 	bl	800f67e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	f000 f8b5 	bl	800f696 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}

0800f536 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f536:	b580      	push	{r7, lr}
 800f538:	b082      	sub	sp, #8
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	6078      	str	r0, [r7, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4618      	mov	r0, r3
 800f542:	f000 f8b6 	bl	800f6b2 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 800f546:	4603      	mov	r3, r0
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f8b5 	bl	800f6c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 800f55e:	4603      	mov	r3, r0
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4618      	mov	r0, r3
 800f574:	f000 f8b4 	bl	800f6e0 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f578:	4603      	mov	r3, r0
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f582:	b480      	push	{r7}
 800f584:	b083      	sub	sp, #12
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr

0800f5ae <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b084      	sub	sp, #16
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	60f8      	str	r0, [r7, #12]
 800f5b6:	60b9      	str	r1, [r7, #8]
 800f5b8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f000 f89c 	bl	800f6f8 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	bf8c      	ite	hi
 800f5c8:	2301      	movhi	r3, #1
 800f5ca:	2300      	movls	r3, #0
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	bf14      	ite	ne
 800f5d2:	2301      	movne	r3, #1
 800f5d4:	2300      	moveq	r3, #0
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d007      	beq.n	800f5ec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5e2:	d301      	bcc.n	800f5e8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f5e4:	f00f fee8 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f5e8:	f00f fee3 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	011b      	lsls	r3, r3, #4
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f00f fecb 	bl	801f38c <_Znwj>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	bf00      	nop
      }
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800f602:	b580      	push	{r7, lr}
 800f604:	b084      	sub	sp, #16
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7ff fdc5 	bl	800f19a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f610:	4603      	mov	r3, r0
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff fdbf 	bl	800f19a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2200      	movs	r2, #0
 800f620:	601a      	str	r2, [r3, #0]
	return __p;
 800f622:	68fb      	ldr	r3, [r7, #12]
      }
 800f624:	4618      	mov	r0, r3
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4618      	mov	r0, r3
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800f642:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f644:	b085      	sub	sp, #20
 800f646:	af00      	add	r7, sp, #0
 800f648:	60f8      	str	r0, [r7, #12]
 800f64a:	60b9      	str	r1, [r7, #8]
 800f64c:	607a      	str	r2, [r7, #4]
 800f64e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	4619      	mov	r1, r3
 800f654:	2010      	movs	r0, #16
 800f656:	f7f8 fd35 	bl	80080c4 <_ZnwjPv>
 800f65a:	4605      	mov	r5, r0
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff ffe5 	bl	800f62c <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800f662:	4603      	mov	r3, r0
 800f664:	681c      	ldr	r4, [r3, #0]
 800f666:	6838      	ldr	r0, [r7, #0]
 800f668:	f7ff ff32 	bl	800f4d0 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f66c:	4632      	mov	r2, r6
 800f66e:	4621      	mov	r1, r4
 800f670:	4628      	mov	r0, r5
 800f672:	f000 f84d 	bl	800f710 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f67e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 800f67e:	b580      	push	{r7, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f864 	bl	800f754 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f6b2:	b480      	push	{r7}
 800f6b4:	b083      	sub	sp, #12
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 f84a 	bl	800f76a <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 f849 	bl	800f780 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f700:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800f704:	4618      	mov	r0, r3
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800f710:	b5b0      	push	{r4, r5, r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fb fd34 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800f724:	4a0a      	ldr	r2, [pc, #40]	@ (800f750 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	601a      	str	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f103 040c 	add.w	r4, r3, #12
 800f730:	1d3b      	adds	r3, r7, #4
 800f732:	4618      	mov	r0, r3
 800f734:	f000 f831 	bl	800f79a <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800f738:	f107 0314 	add.w	r3, r7, #20
 800f73c:	462a      	mov	r2, r5
 800f73e:	68b9      	ldr	r1, [r7, #8]
 800f740:	4620      	mov	r0, r4
 800f742:	f000 f835 	bl	800f7b0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bdb0      	pop	{r4, r5, r7, pc}
 800f750:	08021944 	.word	0x08021944

0800f754 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	370c      	adds	r7, #12
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f76a:	b480      	push	{r7}
 800f76c:	b083      	sub	sp, #12
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4618      	mov	r0, r3
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 f82c 	bl	800f7e8 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 800f790:	4603      	mov	r3, r0
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f79a:	b480      	push	{r7}
 800f79c:	b083      	sub	sp, #12
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	713a      	strb	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800f7be:	1d3b      	adds	r3, r7, #4
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7ff ffea 	bl	800f79a <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f000 f817 	bl	800f7fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7fd fd24 	bl	800d220 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	601a      	str	r2, [r3, #0]
	{ }
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b082      	sub	sp, #8
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	6039      	str	r1, [r7, #0]
 800f808:	6838      	ldr	r0, [r7, #0]
 800f80a:	f7ff ffc6 	bl	800f79a <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	4a05      	ldr	r2, [pc, #20]	@ (800f838 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	601a      	str	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fa f8b9 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	08021944 	.word	0x08021944

0800f83c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7ff ffe7 	bl	800f818 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f84a:	2110      	movs	r1, #16
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f00f fd8c 	bl	801f36a <_ZdlPvj>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4618      	mov	r0, r3
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	330c      	adds	r3, #12
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 f83f 	bl	800f8ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800f86e:	4602      	mov	r2, r0
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	4619      	mov	r1, r3
 800f876:	4610      	mov	r0, r2
 800f878:	f7ff fcdc 	bl	800f234 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	330c      	adds	r3, #12
 800f890:	4618      	mov	r0, r3
 800f892:	f000 f837 	bl	800f904 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f896:	4602      	mov	r2, r0
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f000 f83c 	bl	800f91c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f8a4:	f107 0114 	add.w	r1, r7, #20
 800f8a8:	f107 030c 	add.w	r3, r7, #12
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 f841 	bl	800f936 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff ffaf 	bl	800f818 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f8ba:	f107 030c 	add.w	r3, r7, #12
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f84d 	bl	800f95e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f8c4:	f107 0314 	add.w	r3, r7, #20
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7ff fdd9 	bl	800f480 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f8de:	2300      	movs	r3, #0
      }
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 f847 	bl	800f988 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fd fd56 	bl	800d3be <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800f912:	4603      	mov	r3, r0
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7ff fe2b 	bl	800f582 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800f942:	68b8      	ldr	r0, [r7, #8]
 800f944:	f000 f82b 	bl	800f99e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800f948:	4602      	mov	r2, r0
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	605a      	str	r2, [r3, #4]
      { }
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800f95e:	b580      	push	{r7, lr}
 800f960:	b082      	sub	sp, #8
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d007      	beq.n	800f97e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	4619      	mov	r1, r3
 800f97a:	f000 f81b 	bl	800f9b4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f99e:	b480      	push	{r7}
 800f9a0:	b083      	sub	sp, #12
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f000 f804 	bl	800f9d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800f9ca:	bf00      	nop
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	60f8      	str	r0, [r7, #12]
 800f9da:	60b9      	str	r1, [r7, #8]
 800f9dc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	011b      	lsls	r3, r3, #4
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f00f fcc0 	bl	801f36a <_ZdlPvj>
      }
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f9 fd15 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff ffea 	bl	800f9f0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
	...

0800fa28 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 800fa28:	b590      	push	{r4, r7, lr}
 800fa2a:	b0b1      	sub	sp, #196	@ 0xc4
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 800fa34:	f107 0320 	add.w	r3, r7, #32
 800fa38:	4a55      	ldr	r2, [pc, #340]	@ (800fb90 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff faec 	bl	800f01a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fa42:	f107 0320 	add.w	r3, r7, #32
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f5 fb80 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fa4c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 800fa50:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800fa54:	f010 fa8c 	bl	801ff70 <puts>

    int spIndex = config["SP[i]"];
 800fa58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fa5c:	4a4d      	ldr	r2, [pc, #308]	@ (800fb94 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 800fa5e:	68b9      	ldr	r1, [r7, #8]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 f9bb 	bl	800fddc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fa66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fc fb2f 	bl	800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800fa70:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["PWM Pin"];
 800fa74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fa78:	4a47      	ldr	r2, [pc, #284]	@ (800fb98 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7ff facc 	bl	800f01a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fa82:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7f5 fb60 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7fe f945 	bl	800dd20 <_ZN6Remora9getRxDataEv>
 800fa96:	4602      	mov	r2, r0
 800fa98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	4413      	add	r3, r2
 800faa2:	3304      	adds	r3, #4
 800faa4:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800faac:	4619      	mov	r1, r3
 800faae:	483b      	ldr	r0, [pc, #236]	@ (800fb9c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 800fab0:	f010 f9ee 	bl	801fe90 <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 800fab4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fab8:	4a39      	ldr	r2, [pc, #228]	@ (800fba0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f5 fb20 	bl	8005102 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fac2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800faca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800face:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800fad2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800fad6:	f7f6 fbba 	bl	800624e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800fada:	4604      	mov	r4, r0
 800fadc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800fae0:	f7f6 fa43 	bl	8005f6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800fae4:	4602      	mov	r2, r0
 800fae6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800faea:	4621      	mov	r1, r4
 800faec:	4618      	mov	r0, r3
 800faee:	f7f3 fade 	bl	80030ae <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800faf2:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 800faf4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800faf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fafc:	f000 f9f4 	bl	800fee8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 800fb00:	4603      	mov	r3, r0
 800fb02:	bf00      	nop
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d028      	beq.n	800fb5a <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 800fb08:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb0c:	4a24      	ldr	r2, [pc, #144]	@ (800fba0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 800fb0e:	68b9      	ldr	r1, [r7, #8]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7f5 faf6 	bl	8005102 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fb16:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fc fad7 	bl	800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800fb20:	4603      	mov	r3, r0
 800fb22:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	4619      	mov	r1, r3
 800fb28:	481e      	ldr	r0, [pc, #120]	@ (800fba4 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 800fb2a:	f010 f9b1 	bl	801fe90 <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 800fb2e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800fb32:	f107 0314 	add.w	r3, r7, #20
 800fb36:	f107 0218 	add.w	r2, r7, #24
 800fb3a:	f107 011c 	add.w	r1, r7, #28
 800fb3e:	f000 f972 	bl	800fe26 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 800fb42:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800fb46:	4619      	mov	r1, r3
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f000 f98d 	bl	800fe68 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 800fb4e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff ff5a 	bl	800fa0c <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 800fb58:	e016      	b.n	800fb88 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 800fb5a:	4813      	ldr	r0, [pc, #76]	@ (800fba8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 800fb5c:	f010 fa08 	bl	801ff70 <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 800fb60:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800fb64:	f107 0218 	add.w	r2, r7, #24
 800fb68:	f107 011c 	add.w	r1, r7, #28
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 f98e 	bl	800fe8e <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 800fb72:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800fb76:	4619      	mov	r1, r3
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f000 f975 	bl	800fe68 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 800fb7e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff ff42 	bl	800fa0c <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	37c4      	adds	r7, #196	@ 0xc4
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd90      	pop	{r4, r7, pc}
 800fb90:	080214bc 	.word	0x080214bc
 800fb94:	080214c4 	.word	0x080214c4
 800fb98:	080214cc 	.word	0x080214cc
 800fb9c:	080214d4 	.word	0x080214d4
 800fba0:	08021508 	.word	0x08021508
 800fba4:	08021510 	.word	0x08021510
 800fba8:	08021524 	.word	0x08021524

0800fbac <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:



SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fff6 	bl	800ebac <_ZN6ModuleC1Ev>
 800fbc0:	4a14      	ldr	r2, [pc, #80]	@ (800fc14 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]
    pin(pin),
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3318      	adds	r3, #24
 800fbca:	68b9      	ldr	r1, [r7, #8]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f00f fdc0 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	22ff      	movs	r2, #255	@ 0xff
 800fbd6:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 800fbec:	2040      	movs	r0, #64	@ 0x40
 800fbee:	f00f fbcd 	bl	801f38c <_Znwj>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	461c      	mov	r4, r3
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	68b9      	ldr	r1, [r7, #8]
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f7f2 fb0e 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	645a      	str	r2, [r3, #68]	@ 0x44
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd90      	pop	{r4, r7, pc}
 800fc14:	080219a0 	.word	0x080219a0

0800fc18 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 800fc18:	b590      	push	{r4, r7, lr}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fe ffbf 	bl	800ebac <_ZN6ModuleC1Ev>
 800fc2e:	4a19      	ldr	r2, [pc, #100]	@ (800fc94 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	601a      	str	r2, [r3, #0]
    pin(pin),
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	3318      	adds	r3, #24
 800fc38:	68b9      	ldr	r1, [r7, #8]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f00f fd89 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	db04      	blt.n	800fc50 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	2bff      	cmp	r3, #255	@ 0xff
 800fc4a:	bfa8      	it	ge
 800fc4c:	23ff      	movge	r3, #255	@ 0xff
 800fc4e:	e000      	b.n	800fc52 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 800fc50:	2300      	movs	r3, #0
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 800fc6a:	2040      	movs	r0, #64	@ 0x40
 800fc6c:	f00f fb8e 	bl	801f38c <_Znwj>
 800fc70:	4603      	mov	r3, r0
 800fc72:	461c      	mov	r4, r3
 800fc74:	2201      	movs	r2, #1
 800fc76:	68b9      	ldr	r1, [r7, #8]
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7f2 facf 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	645a      	str	r2, [r3, #68]	@ 0x44
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd90      	pop	{r4, r7, pc}
 800fc92:	bf00      	nop
 800fc94:	080219a0 	.word	0x080219a0

0800fc98 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 800fca8:	edd7 7a03 	vldr	s15, [r7, #12]
 800fcac:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800fdc4 <_ZN10SigmaDelta6updateEv+0x12c>
 800fcb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcb8:	ee07 3a90 	vmov	s15, r3
 800fcbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcc8:	ee17 3a90 	vmov	r3, s15
 800fccc:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d00f      	beq.n	800fcf8 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	db09      	blt.n	800fcf2 <_ZN10SigmaDelta6updateEv+0x5a>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	dd02      	ble.n	800fcee <_ZN10SigmaDelta6updateEv+0x56>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcec:	e002      	b.n	800fcf4 <_ZN10SigmaDelta6updateEv+0x5c>
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	e000      	b.n	800fcf4 <_ZN10SigmaDelta6updateEv+0x5c>
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dc06      	bgt.n	800fd0e <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd04:	2100      	movs	r1, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f2 fc32 	bl	8002570 <_ZN3Pin3setEb>
        return;
 800fd0c:	e057      	b.n	800fdbe <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd16:	429a      	cmp	r2, r3
 800fd18:	db06      	blt.n	800fd28 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd1e:	2101      	movs	r1, #1
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f2 fc25 	bl	8002570 <_ZN3Pin3setEb>
        return;
 800fd26:	e04a      	b.n	800fdbe <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd30:	425b      	negs	r3, r3
 800fd32:	429a      	cmp	r2, r3
 800fd34:	da03      	bge.n	800fd3e <_ZN10SigmaDelta6updateEv+0xa6>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd3a:	425b      	negs	r3, r3
 800fd3c:	e007      	b.n	800fd4e <_ZN10SigmaDelta6updateEv+0xb6>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	bfa8      	it	ge
 800fd4c:	4613      	movge	r3, r2
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd58:	f083 0301 	eor.w	r3, r3, #1
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d012      	beq.n	800fd88 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd6a:	441a      	add	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd78:	105b      	asrs	r3, r3, #1
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	db16      	blt.n	800fdac <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800fd86:	e011      	b.n	800fdac <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd94:	1acb      	subs	r3, r1, r3
 800fd96:	1ad2      	subs	r2, r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dc03      	bgt.n	800fdac <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f7f2 fbd9 	bl	8002570 <_ZN3Pin3setEb>
}
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	42c80000 	.word	0x42c80000

0800fdc8 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08c      	sub	sp, #48	@ 0x30
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	f107 0314 	add.w	r3, r7, #20
 800fdee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdf6:	f107 031c 	add.w	r3, r7, #28
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f000 f860 	bl	800fec2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800fe02:	466a      	mov	r2, sp
 800fe04:	f107 0320 	add.w	r3, r7, #32
 800fe08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe0c:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	f107 0214 	add.w	r2, r7, #20
 800fe16:	ca06      	ldmia	r2, {r1, r2}
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f7f5 fb06 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	3728      	adds	r7, #40	@ 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 800fe26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe28:	b089      	sub	sp, #36	@ 0x24
 800fe2a:	af02      	add	r7, sp, #8
 800fe2c:	60f8      	str	r0, [r7, #12]
 800fe2e:	60b9      	str	r1, [r7, #8]
 800fe30:	607a      	str	r2, [r7, #4]
 800fe32:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800fe34:	f107 0314 	add.w	r3, r7, #20
 800fe38:	461e      	mov	r6, r3
 800fe3a:	68b8      	ldr	r0, [r7, #8]
 800fe3c:	f7fc fa7d 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe40:	4604      	mov	r4, r0
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f871 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe48:	4605      	mov	r5, r0
 800fe4a:	6838      	ldr	r0, [r7, #0]
 800fe4c:	f7fc fa80 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fe50:	4603      	mov	r3, r0
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	462b      	mov	r3, r5
 800fe56:	4622      	mov	r2, r4
 800fe58:	4631      	mov	r1, r6
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f000 f870 	bl	800ff40 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	371c      	adds	r7, #28
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe68 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800fe72:	687c      	ldr	r4, [r7, #4]
 800fe74:	6838      	ldr	r0, [r7, #0]
 800fe76:	f000 f883 	bl	800ff80 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 f889 	bl	800ff96 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd90      	pop	{r4, r7, pc}

0800fe8e <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 800fe8e:	b5b0      	push	{r4, r5, r7, lr}
 800fe90:	b086      	sub	sp, #24
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	60f8      	str	r0, [r7, #12]
 800fe96:	60b9      	str	r1, [r7, #8]
 800fe98:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800fe9a:	f107 0314 	add.w	r3, r7, #20
 800fe9e:	461d      	mov	r5, r3
 800fea0:	68b8      	ldr	r0, [r7, #8]
 800fea2:	f7fc fa4a 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800fea6:	4604      	mov	r4, r0
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f83e 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 800feae:	4603      	mov	r3, r0
 800feb0:	4622      	mov	r2, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f000 f88c 	bl	800ffd2 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	3718      	adds	r7, #24
 800febe:	46bd      	mov	sp, r7
 800fec0:	bdb0      	pop	{r4, r5, r7, pc}

0800fec2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b082      	sub	sp, #8
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800fecc:	6838      	ldr	r0, [r7, #0]
 800fece:	f000 f89a 	bl	8010006 <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800fed2:	4602      	mov	r2, r0
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4611      	mov	r1, r2
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 f89f 	bl	801001c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 800fede:	bf00      	nop
}
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	463b      	mov	r3, r7
 800fef0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800fef4:	463b      	mov	r3, r7
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7f4 fe58 	bl	8004bac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800fefc:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800fefe:	463b      	mov	r3, r7
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f4 fe5f 	bl	8004bc4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800ff06:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d008      	beq.n	800ff20 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 800ff0e:	68b9      	ldr	r1, [r7, #8]
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f000 f893 	bl	801003c <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 800ff20:	2300      	movs	r3, #0
  }
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff42:	b087      	sub	sp, #28
 800ff44:	af02      	add	r7, sp, #8
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800ff4e:	68fc      	ldr	r4, [r7, #12]
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7fc f9f2 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ff56:	4605      	mov	r5, r0
 800ff58:	6838      	ldr	r0, [r7, #0]
 800ff5a:	f7ff ffe6 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff62:	f7fc f9f5 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800ff66:	4603      	mov	r3, r0
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	4633      	mov	r3, r6
 800ff6c:	462a      	mov	r2, r5
 800ff6e:	68b9      	ldr	r1, [r7, #8]
 800ff70:	4620      	mov	r0, r4
 800ff72:	f000 f8c1 	bl	80100f8 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff80 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b082      	sub	sp, #8
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fa fa03 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	1d1a      	adds	r2, r3, #4
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	3304      	adds	r3, #4
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	f7fa fd11 	bl	800a9e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	601a      	str	r2, [r3, #0]
	}
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800ffd2:	b5b0      	push	{r4, r5, r7, lr}
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	60f8      	str	r0, [r7, #12]
 800ffda:	60b9      	str	r1, [r7, #8]
 800ffdc:	607a      	str	r2, [r7, #4]
 800ffde:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800ffe0:	68fc      	ldr	r4, [r7, #12]
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7fc f9a9 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ffe8:	4605      	mov	r5, r0
 800ffea:	6838      	ldr	r0, [r7, #0]
 800ffec:	f7ff ff9d 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 800fff0:	4603      	mov	r3, r0
 800fff2:	462a      	mov	r2, r5
 800fff4:	68b9      	ldr	r1, [r7, #8]
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 f8ac 	bl	8010154 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bdb0      	pop	{r4, r5, r7, pc}

08010006 <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801000e:	687b      	ldr	r3, [r7, #4]
}
 8010010:	4618      	mov	r0, r3
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8010026:	2301      	movs	r3, #1
 8010028:	2205      	movs	r2, #5
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7f2 fc77 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7f3 fdc5 	bl	8003bd8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 801004e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	791b      	ldrb	r3, [r3, #4]
 8010054:	3b0a      	subs	r3, #10
 8010056:	2b12      	cmp	r3, #18
 8010058:	d848      	bhi.n	80100ec <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 801005a:	a201      	add	r2, pc, #4	@ (adr r2, 8010060 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 801005c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010060:	080100ad 	.word	0x080100ad
 8010064:	080100ed 	.word	0x080100ed
 8010068:	080100bb 	.word	0x080100bb
 801006c:	080100ed 	.word	0x080100ed
 8010070:	080100ed 	.word	0x080100ed
 8010074:	080100ed 	.word	0x080100ed
 8010078:	080100ed 	.word	0x080100ed
 801007c:	080100ed 	.word	0x080100ed
 8010080:	080100ed 	.word	0x080100ed
 8010084:	080100ed 	.word	0x080100ed
 8010088:	080100ed 	.word	0x080100ed
 801008c:	080100ed 	.word	0x080100ed
 8010090:	080100ed 	.word	0x080100ed
 8010094:	080100ed 	.word	0x080100ed
 8010098:	080100ed 	.word	0x080100ed
 801009c:	080100ed 	.word	0x080100ed
 80100a0:	080100c9 	.word	0x080100c9
 80100a4:	080100ed 	.word	0x080100ed
 80100a8:	080100db 	.word	0x080100db
        return canConvertNumber<T>(content_.asUint32);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fc fe84 	bl	800cdbe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80100b6:	4603      	mov	r3, r0
 80100b8:	e019      	b.n	80100ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fc fe8f 	bl	800cde2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 80100c4:	4603      	mov	r3, r0
 80100c6:	e012      	b.n	80100ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	4610      	mov	r0, r2
 80100d0:	4619      	mov	r1, r3
 80100d2:	f7fc fe91 	bl	800cdf8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80100d6:	4603      	mov	r3, r0
 80100d8:	e009      	b.n	80100ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	4610      	mov	r0, r2
 80100e2:	4619      	mov	r1, r3
 80100e4:	f7fc fea0 	bl	800ce28 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80100e8:	4603      	mov	r3, r0
 80100ea:	e000      	b.n	80100ee <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 80100ec:	2300      	movs	r3, #0
  }
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop

080100f8 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80100f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100fc:	b086      	sub	sp, #24
 80100fe:	af02      	add	r7, sp, #8
 8010100:	60f8      	str	r0, [r7, #12]
 8010102:	60b9      	str	r1, [r7, #8]
 8010104:	607a      	str	r2, [r7, #4]
 8010106:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2200      	movs	r2, #0
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	1d1c      	adds	r4, r3, #4
 8010112:	68fd      	ldr	r5, [r7, #12]
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7fc f910 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801011a:	4680      	mov	r8, r0
 801011c:	6838      	ldr	r0, [r7, #0]
 801011e:	f7ff ff04 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8010122:	4606      	mov	r6, r0
 8010124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010126:	f7fc f913 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801012a:	4603      	mov	r3, r0
 801012c:	9301      	str	r3, [sp, #4]
 801012e:	9600      	str	r6, [sp, #0]
 8010130:	4643      	mov	r3, r8
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	4629      	mov	r1, r5
 8010136:	4620      	mov	r0, r4
 8010138:	f000 f833 	bl	80101a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4619      	mov	r1, r3
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f000 f883 	bl	801024e <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010154 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8010154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010156:	b087      	sub	sp, #28
 8010158:	af02      	add	r7, sp, #8
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	601a      	str	r2, [r3, #0]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1d1c      	adds	r4, r3, #4
 801016c:	68fd      	ldr	r5, [r7, #12]
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fc f8e3 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010174:	4606      	mov	r6, r0
 8010176:	6838      	ldr	r0, [r7, #0]
 8010178:	f7ff fed7 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801017c:	4603      	mov	r3, r0
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	4633      	mov	r3, r6
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	4629      	mov	r1, r5
 8010186:	4620      	mov	r0, r4
 8010188:	f000 f86c 	bl	8010264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4619      	mov	r1, r3
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f85b 	bl	801024e <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80101a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a6:	b08c      	sub	sp, #48	@ 0x30
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	f107 031c 	add.w	r3, r7, #28
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 f8a0 	bl	8010300 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80101c0:	f107 0314 	add.w	r3, r7, #20
 80101c4:	f107 021c 	add.w	r2, r7, #28
 80101c8:	4611      	mov	r1, r2
 80101ca:	4618      	mov	r0, r3
 80101cc:	f000 f8b1 	bl	8010332 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80101d0:	f107 0314 	add.w	r3, r7, #20
 80101d4:	4618      	mov	r0, r3
 80101d6:	f000 f8d4 	bl	8010382 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80101da:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 80101dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101de:	4619      	mov	r1, r3
 80101e0:	2054      	movs	r0, #84	@ 0x54
 80101e2:	f7f7 ff6f 	bl	80080c4 <_ZnwjPv>
 80101e6:	4604      	mov	r4, r0
 80101e8:	6838      	ldr	r0, [r7, #0]
 80101ea:	f7fc f8a6 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80101ee:	4605      	mov	r5, r0
 80101f0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80101f2:	f7ff fe9a 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80101f6:	4606      	mov	r6, r0
 80101f8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80101fa:	f7fc f8a9 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80101fe:	4603      	mov	r3, r0
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	4633      	mov	r3, r6
 8010204:	462a      	mov	r2, r5
 8010206:	4641      	mov	r1, r8
 8010208:	4620      	mov	r0, r4
 801020a:	f000 f8c9 	bl	80103a0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 801020e:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8010210:	f107 0314 	add.w	r3, r7, #20
 8010214:	2100      	movs	r1, #0
 8010216:	4618      	mov	r0, r3
 8010218:	f000 f8f6 	bl	8010408 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6a3a      	ldr	r2, [r7, #32]
 8010220:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8010222:	6a38      	ldr	r0, [r7, #32]
 8010224:	f000 f8ff 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8010228:	4602      	mov	r2, r0
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	601a      	str	r2, [r3, #0]
	}
 801022e:	f107 0314 	add.w	r3, r7, #20
 8010232:	4618      	mov	r0, r3
 8010234:	f000 f890 	bl	8010358 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8010238:	f107 031c 	add.w	r3, r7, #28
 801023c:	4618      	mov	r0, r3
 801023e:	f000 f86c 	bl	801031a <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4618      	mov	r0, r3
 8010246:	3728      	adds	r7, #40	@ 0x28
 8010248:	46bd      	mov	sp, r7
 801024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801024e <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 801024e:	b480      	push	{r7}
 8010250:	b083      	sub	sp, #12
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	6039      	str	r1, [r7, #0]
	{ }
 8010258:	bf00      	nop
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8010264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010266:	b08b      	sub	sp, #44	@ 0x2c
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
 8010270:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	f107 031c 	add.w	r3, r7, #28
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f000 f840 	bl	8010300 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8010280:	f107 0314 	add.w	r3, r7, #20
 8010284:	f107 021c 	add.w	r2, r7, #28
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f000 f851 	bl	8010332 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8010290:	f107 0314 	add.w	r3, r7, #20
 8010294:	4618      	mov	r0, r3
 8010296:	f000 f874 	bl	8010382 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801029a:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	4619      	mov	r1, r3
 80102a0:	2054      	movs	r0, #84	@ 0x54
 80102a2:	f7f7 ff0f 	bl	80080c4 <_ZnwjPv>
 80102a6:	4604      	mov	r4, r0
 80102a8:	6838      	ldr	r0, [r7, #0]
 80102aa:	f7fc f846 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80102ae:	4605      	mov	r5, r0
 80102b0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80102b2:	f7ff fe3a 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80102b6:	4603      	mov	r3, r0
 80102b8:	462a      	mov	r2, r5
 80102ba:	4631      	mov	r1, r6
 80102bc:	4620      	mov	r0, r4
 80102be:	f000 f8c1 	bl	8010444 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 80102c2:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80102c4:	f107 0314 	add.w	r3, r7, #20
 80102c8:	2100      	movs	r1, #0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 f89c 	bl	8010408 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a3a      	ldr	r2, [r7, #32]
 80102d4:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80102d6:	6a38      	ldr	r0, [r7, #32]
 80102d8:	f000 f8a5 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80102dc:	4602      	mov	r2, r0
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	601a      	str	r2, [r3, #0]
	}
 80102e2:	f107 0314 	add.w	r3, r7, #20
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 f836 	bl	8010358 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80102ec:	f107 031c 	add.w	r3, r7, #28
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f812 	bl	801031a <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	4618      	mov	r0, r3
 80102fa:	372c      	adds	r7, #44	@ 0x2c
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010300 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f8c8 	bl	80104a0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 f8c7 	bl	80104b6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801033c:	2101      	movs	r1, #1
 801033e:	6838      	ldr	r0, [r7, #0]
 8010340:	f000 f8c4 	bl	80104cc <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8010344:	4603      	mov	r3, r0
 8010346:	461a      	mov	r2, r3
 8010348:	6839      	ldr	r1, [r7, #0]
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f8cd 	bl	80104ea <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d007      	beq.n	8010378 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6818      	ldr	r0, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	2201      	movs	r2, #1
 8010372:	4619      	mov	r1, r3
 8010374:	f000 f8cd 	bl	8010512 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4618      	mov	r0, r3
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8010382:	b580      	push	{r7, lr}
 8010384:	b082      	sub	sp, #8
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	4618      	mov	r0, r3
 8010390:	f000 f8ce 	bl	8010530 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8010394:	4603      	mov	r3, r0
 8010396:	4618      	mov	r0, r3
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
	...

080103a0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80103a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103a2:	b087      	sub	sp, #28
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	7239      	strb	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fa feeb 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80103b6:	4a13      	ldr	r2, [pc, #76]	@ (8010404 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	601a      	str	r2, [r3, #0]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	330c      	adds	r3, #12
 80103c0:	4621      	mov	r1, r4
 80103c2:	4618      	mov	r0, r3
 80103c4:	f000 f8bf 	bl	8010546 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f000 f82c 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80103ce:	4604      	mov	r4, r0
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7fb ffb2 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80103d6:	4605      	mov	r5, r0
 80103d8:	6838      	ldr	r0, [r7, #0]
 80103da:	f7ff fda6 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80103de:	4606      	mov	r6, r0
 80103e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103e2:	f7fb ffb5 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80103e6:	4603      	mov	r3, r0
 80103e8:	f107 0008 	add.w	r0, r7, #8
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	4633      	mov	r3, r6
 80103f0:	462a      	mov	r2, r5
 80103f2:	4621      	mov	r1, r4
 80103f4:	f000 f8b6 	bl	8010564 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010402:	bf00      	nop
 8010404:	08021984 	.word	0x08021984

08010408 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	605a      	str	r2, [r3, #4]
	return *this;
 8010418:	687b      	ldr	r3, [r7, #4]
      }
 801041a:	4618      	mov	r0, r3
 801041c:	370c      	adds	r7, #12
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	330c      	adds	r3, #12
 8010432:	4618      	mov	r0, r3
 8010434:	f000 f8b2 	bl	801059c <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 8010438:	4603      	mov	r3, r0
 801043a:	4618      	mov	r0, r3
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
	...

08010444 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8010444:	b5b0      	push	{r4, r5, r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	7239      	strb	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
 8010450:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	4618      	mov	r0, r3
 8010456:	f7fa fe99 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801045a:	4a10      	ldr	r2, [pc, #64]	@ (801049c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	330c      	adds	r3, #12
 8010464:	4621      	mov	r1, r4
 8010466:	4618      	mov	r0, r3
 8010468:	f000 f86d 	bl	8010546 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f7ff ffda 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8010472:	4604      	mov	r4, r0
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7fb ff60 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801047a:	4605      	mov	r5, r0
 801047c:	6838      	ldr	r0, [r7, #0]
 801047e:	f7ff fd54 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8010482:	4603      	mov	r3, r0
 8010484:	f107 0008 	add.w	r0, r7, #8
 8010488:	462a      	mov	r2, r5
 801048a:	4621      	mov	r1, r4
 801048c:	f000 f892 	bl	80105b4 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bdb0      	pop	{r4, r5, r7, pc}
 801049a:	bf00      	nop
 801049c:	08021984 	.word	0x08021984

080104a0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4618      	mov	r0, r3
 80104ac:	370c      	adds	r7, #12
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr

080104b6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80104b6:	b480      	push	{r7}
 80104b8:	b083      	sub	sp, #12
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80104d6:	2200      	movs	r2, #0
 80104d8:	6839      	ldr	r1, [r7, #0]
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f882 	bl	80105e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80104e0:	4603      	mov	r3, r0
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b084      	sub	sp, #16
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	60f8      	str	r0, [r7, #12]
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f000 f8a2 	bl	8010640 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80104fc:	4602      	mov	r2, r0
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	605a      	str	r2, [r3, #4]
      { }
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010512:	b580      	push	{r7, lr}
 8010514:	b084      	sub	sp, #16
 8010516:	af00      	add	r7, sp, #0
 8010518:	60f8      	str	r0, [r7, #12]
 801051a:	60b9      	str	r1, [r7, #8]
 801051c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f000 f897 	bl	8010656 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8010528:	bf00      	nop
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
      return __ptr;
 8010538:	687b      	ldr	r3, [r7, #4]
    }
 801053a:	4618      	mov	r0, r3
 801053c:	370c      	adds	r7, #12
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr

08010546 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8010546:	b580      	push	{r7, lr}
 8010548:	b082      	sub	sp, #8
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	7039      	strb	r1, [r7, #0]
 8010550:	463b      	mov	r3, r7
 8010552:	4619      	mov	r1, r3
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f7fa ffc7 	bl	800b4e8 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8010564:	b5b0      	push	{r4, r5, r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
 8010570:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fb fee1 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010578:	4604      	mov	r4, r0
 801057a:	6838      	ldr	r0, [r7, #0]
 801057c:	f7ff fcd5 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8010580:	4605      	mov	r5, r0
 8010582:	6a38      	ldr	r0, [r7, #32]
 8010584:	f7fb fee4 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010588:	4603      	mov	r3, r0
 801058a:	462a      	mov	r2, r5
 801058c:	4621      	mov	r1, r4
 801058e:	68b8      	ldr	r0, [r7, #8]
 8010590:	f000 f872 	bl	8010678 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 8010594:	bf00      	nop
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bdb0      	pop	{r4, r5, r7, pc}

0801059c <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 f8a4 	bl	80106f2 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 80105aa:	4603      	mov	r3, r0
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80105b4:	b590      	push	{r4, r7, lr}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7fb feb9 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80105c8:	4604      	mov	r4, r0
 80105ca:	6838      	ldr	r0, [r7, #0]
 80105cc:	f7ff fcad 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80105d0:	4603      	mov	r3, r0
 80105d2:	461a      	mov	r2, r3
 80105d4:	4621      	mov	r1, r4
 80105d6:	68b8      	ldr	r0, [r7, #8]
 80105d8:	f000 f896 	bl	8010708 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 80105dc:	bf00      	nop
 80105de:	3714      	adds	r7, #20
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd90      	pop	{r4, r7, pc}

080105e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 f8c1 	bl	8010778 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80105f6:	4602      	mov	r2, r0
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	4293      	cmp	r3, r2
 80105fc:	bf8c      	ite	hi
 80105fe:	2301      	movhi	r3, #1
 8010600:	2300      	movls	r3, #0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	bf14      	ite	ne
 8010608:	2301      	movne	r3, #1
 801060a:	2300      	moveq	r3, #0
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d007      	beq.n	8010622 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	4a09      	ldr	r2, [pc, #36]	@ (801063c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d901      	bls.n	801061e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801061a:	f00e fecd 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801061e:	f00e fec8 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2254      	movs	r2, #84	@ 0x54
 8010626:	fb02 f303 	mul.w	r3, r2, r3
 801062a:	4618      	mov	r0, r3
 801062c:	f00e feae 	bl	801f38c <_Znwj>
 8010630:	4603      	mov	r3, r0
 8010632:	bf00      	nop
      }
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	030c30c3 	.word	0x030c30c3

08010640 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4618      	mov	r0, r3
 801064c:	370c      	adds	r7, #12
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	60f8      	str	r0, [r7, #12]
 801065e:	60b9      	str	r1, [r7, #8]
 8010660:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2254      	movs	r2, #84	@ 0x54
 8010666:	fb02 f303 	mul.w	r3, r2, r3
 801066a:	4619      	mov	r1, r3
 801066c:	68b8      	ldr	r0, [r7, #8]
 801066e:	f00e fe7c 	bl	801f36a <_ZdlPvj>
      }
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010678:	b5b0      	push	{r4, r5, r7, lr}
 801067a:	b08c      	sub	sp, #48	@ 0x30
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
 8010684:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	4619      	mov	r1, r3
 801068a:	2048      	movs	r0, #72	@ 0x48
 801068c:	f7f7 fd1a 	bl	80080c4 <_ZnwjPv>
 8010690:	4605      	mov	r5, r0
 8010692:	68b8      	ldr	r0, [r7, #8]
 8010694:	f7fb fe51 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010698:	4603      	mov	r3, r0
 801069a:	681c      	ldr	r4, [r3, #0]
 801069c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106a0:	4618      	mov	r0, r3
 80106a2:	f00e fe84 	bl	801f3ae <_ZNSaIcEC1Ev>
 80106a6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80106aa:	f107 0314 	add.w	r3, r7, #20
 80106ae:	4621      	mov	r1, r4
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7f4 fcc5 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7ff fc37 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80106bc:	4603      	mov	r3, r0
 80106be:	681c      	ldr	r4, [r3, #0]
 80106c0:	6838      	ldr	r0, [r7, #0]
 80106c2:	f7fb fe45 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80106c6:	4603      	mov	r3, r0
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f107 0114 	add.w	r1, r7, #20
 80106ce:	4622      	mov	r2, r4
 80106d0:	4628      	mov	r0, r5
 80106d2:	f7ff faa1 	bl	800fc18 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 80106d6:	f107 0314 	add.w	r3, r7, #20
 80106da:	4618      	mov	r0, r3
 80106dc:	f00e ff3a 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80106e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106e4:	4618      	mov	r0, r3
 80106e6:	f00e fe63 	bl	801f3b0 <_ZNSaIcED1Ev>
    }
 80106ea:	bf00      	nop
 80106ec:	3730      	adds	r7, #48	@ 0x30
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bdb0      	pop	{r4, r5, r7, pc}

080106f2 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 80106f2:	b480      	push	{r7}
 80106f4:	b083      	sub	sp, #12
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80106fa:	687b      	ldr	r3, [r7, #4]
      }
 80106fc:	4618      	mov	r0, r3
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010708:	b5b0      	push	{r4, r5, r7, lr}
 801070a:	b08c      	sub	sp, #48	@ 0x30
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4619      	mov	r1, r3
 8010718:	2048      	movs	r0, #72	@ 0x48
 801071a:	f7f7 fcd3 	bl	80080c4 <_ZnwjPv>
 801071e:	4605      	mov	r5, r0
 8010720:	68b8      	ldr	r0, [r7, #8]
 8010722:	f7fb fe0a 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010726:	4603      	mov	r3, r0
 8010728:	681c      	ldr	r4, [r3, #0]
 801072a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801072e:	4618      	mov	r0, r3
 8010730:	f00e fe3d 	bl	801f3ae <_ZNSaIcEC1Ev>
 8010734:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010738:	f107 0314 	add.w	r3, r7, #20
 801073c:	4621      	mov	r1, r4
 801073e:	4618      	mov	r0, r3
 8010740:	f7f4 fc7e 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7ff fbf0 	bl	800ff2a <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801074a:	4603      	mov	r3, r0
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	f107 0314 	add.w	r3, r7, #20
 8010752:	4619      	mov	r1, r3
 8010754:	4628      	mov	r0, r5
 8010756:	f7ff fa29 	bl	800fbac <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 801075a:	f107 0314 	add.w	r3, r7, #20
 801075e:	4618      	mov	r0, r3
 8010760:	f00e fef8 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010768:	4618      	mov	r0, r3
 801076a:	f00e fe21 	bl	801f3b0 <_ZNSaIcED1Ev>
    }
 801076e:	bf00      	nop
 8010770:	3730      	adds	r7, #48	@ 0x30
 8010772:	46bd      	mov	sp, r7
 8010774:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010778 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010780:	4b03      	ldr	r3, [pc, #12]	@ (8010790 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8010782:	4618      	mov	r0, r3
 8010784:	370c      	adds	r7, #12
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr
 801078e:	bf00      	nop
 8010790:	01861861 	.word	0x01861861

08010794 <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	4a08      	ldr	r2, [pc, #32]	@ (80107c0 <_ZN10SigmaDeltaD1Ev+0x2c>)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	3318      	adds	r3, #24
 80107a6:	4618      	mov	r0, r3
 80107a8:	f00e fed4 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fa18 	bl	800ebe4 <_ZN6ModuleD1Ev>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4618      	mov	r0, r3
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	080219a0 	.word	0x080219a0

080107c4 <_ZN10SigmaDeltaD0Ev>:
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7ff ffe1 	bl	8010794 <_ZN10SigmaDeltaD1Ev>
 80107d2:	2148      	movs	r1, #72	@ 0x48
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f00e fdc8 	bl	801f36a <_ZdlPvj>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	4a05      	ldr	r2, [pc, #20]	@ (8010804 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	601a      	str	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7f9 f8d3 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	08021984 	.word	0x08021984

08010808 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7ff ffe7 	bl	80107e4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010816:	2154      	movs	r1, #84	@ 0x54
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f00e fda6 	bl	801f36a <_ZdlPvj>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010828:	b590      	push	{r4, r7, lr}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	330c      	adds	r3, #12
 8010834:	4618      	mov	r0, r3
 8010836:	f000 f856 	bl	80108e6 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801083a:	4604      	mov	r4, r0
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff fdf2 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8010842:	4603      	mov	r3, r0
 8010844:	4619      	mov	r1, r3
 8010846:	4620      	mov	r0, r4
 8010848:	f000 f859 	bl	80108fe <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	bd90      	pop	{r4, r7, pc}

08010854 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010854:	b580      	push	{r7, lr}
 8010856:	b086      	sub	sp, #24
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	330c      	adds	r3, #12
 8010860:	4618      	mov	r0, r3
 8010862:	f000 f840 	bl	80108e6 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8010866:	4602      	mov	r2, r0
 8010868:	f107 0314 	add.w	r3, r7, #20
 801086c:	4611      	mov	r1, r2
 801086e:	4618      	mov	r0, r3
 8010870:	f7ff fd46 	bl	8010300 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010874:	f107 0114 	add.w	r1, r7, #20
 8010878:	f107 030c 	add.w	r3, r7, #12
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fe33 	bl	80104ea <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7ff ffad 	bl	80107e4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801088a:	f107 030c 	add.w	r3, r7, #12
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fd62 	bl	8010358 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8010894:	f107 0314 	add.w	r3, r7, #20
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff fd3e 	bl	801031a <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff fdb9 	bl	8010426 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80108b4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80108b6:	f7f7 fc51 	bl	800815c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80108ba:	4602      	mov	r2, r0
	    ||
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	4293      	cmp	r3, r2
 80108c0:	d005      	beq.n	80108ce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80108c2:	6838      	ldr	r0, [r7, #0]
 80108c4:	f00e fd8e 	bl	801f3e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 80108c8:	4603      	mov	r3, r0
	    ||
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 80108d2:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	e000      	b.n	80108de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 80108dc:	2300      	movs	r3, #0
      }
 80108de:	4618      	mov	r0, r3
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b082      	sub	sp, #8
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7fb f841 	bl	800b976 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 80108f4:	4603      	mov	r3, r0
 80108f6:	4618      	mov	r0, r3
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 80108fe:	b580      	push	{r7, lr}
 8010900:	b082      	sub	sp, #8
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8010908:	6838      	ldr	r0, [r7, #0]
 801090a:	f000 f804 	bl	8010916 <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 801090e:	bf00      	nop
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 8010916:	b580      	push	{r7, lr}
 8010918:	b082      	sub	sp, #8
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	4798      	blx	r3
    }
 8010928:	bf00      	nop
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b0bd      	sub	sp, #244	@ 0xf4
 8010934:	af08      	add	r7, sp, #32
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 801093c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010940:	4a50      	ldr	r2, [pc, #320]	@ (8010a84 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8010942:	68b9      	ldr	r1, [r7, #8]
 8010944:	4618      	mov	r0, r3
 8010946:	f7fe fb68 	bl	800f01a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801094a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801094e:	4618      	mov	r0, r3
 8010950:	f7f4 fbfc 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010954:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8010958:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801095c:	4a4a      	ldr	r2, [pc, #296]	@ (8010a88 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 801095e:	68b9      	ldr	r1, [r7, #8]
 8010960:	4618      	mov	r0, r3
 8010962:	f7fb fbc0 	bl	800c0e6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010966:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801096a:	4618      	mov	r0, r3
 801096c:	f7f4 fc1f 	bl	80051ae <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8010970:	4603      	mov	r3, r0
 8010972:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 8010974:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8010978:	f00f fafa 	bl	801ff70 <puts>

	    int joint = config["Joint Number"];
 801097c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010980:	4a42      	ldr	r2, [pc, #264]	@ (8010a8c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 8010982:	68b9      	ldr	r1, [r7, #8]
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fa1d 	bl	8010dc4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801098a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801098e:	4618      	mov	r0, r3
 8010990:	f7fb fb9d 	bl	800c0ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8010994:	4603      	mov	r3, r0
 8010996:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8010998:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801099c:	4a3c      	ldr	r2, [pc, #240]	@ (8010a90 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 801099e:	68b9      	ldr	r1, [r7, #8]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fb fba0 	bl	800c0e6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80109a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7f4 fbce 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80109b0:	4603      	mov	r3, r0
 80109b2:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 80109b4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80109b8:	4a36      	ldr	r2, [pc, #216]	@ (8010a94 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 80109ba:	68b9      	ldr	r1, [r7, #8]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fd fb82 	bl	800e0c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80109c2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7f4 fbc0 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80109cc:	4603      	mov	r3, r0
 80109ce:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 80109d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80109d4:	4a30      	ldr	r2, [pc, #192]	@ (8010a98 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	4618      	mov	r0, r3
 80109da:	f000 fa18 	bl	8010e0e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80109de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7f4 fbb2 	bl	800514c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80109e8:	4603      	mov	r3, r0
 80109ea:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7fd f997 	bl	800dd20 <_ZN6Remora9getRxDataEv>
 80109f2:	4602      	mov	r2, r0
 80109f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	3304      	adds	r3, #4
 80109fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7fd f97f 	bl	800dd04 <_ZN6Remora9getTxDataEv>
 8010a06:	4602      	mov	r2, r0
 8010a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0a:	009b      	lsls	r3, r3, #2
 8010a0c:	4413      	add	r3, r2
 8010a0e:	3304      	adds	r3, #4
 8010a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7fd f983 	bl	800dd20 <_ZN6Remora9getRxDataEv>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	333c      	adds	r3, #60	@ 0x3c
 8010a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8010a22:	2301      	movs	r3, #1
 8010a24:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8010a26:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8010a2a:	f107 0420 	add.w	r4, r7, #32
 8010a2e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010a32:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010a36:	f107 0317 	add.w	r3, r7, #23
 8010a3a:	9306      	str	r3, [sp, #24]
 8010a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010a40:	9305      	str	r3, [sp, #20]
 8010a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	4b13      	ldr	r3, [pc, #76]	@ (8010a9c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8010a50:	9302      	str	r3, [sp, #8]
 8010a52:	f107 0318 	add.w	r3, r7, #24
 8010a56:	9301      	str	r3, [sp, #4]
 8010a58:	f107 031c 	add.w	r3, r7, #28
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	4623      	mov	r3, r4
 8010a60:	f000 f9fa 	bl	8010e58 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8010a64:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8010a68:	4619      	mov	r1, r3
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f000 fa70 	bl	8010f50 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8010a70:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 fa49 	bl	8010f0c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8010a7a:	bf00      	nop
	}
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	37d4      	adds	r7, #212	@ 0xd4
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd90      	pop	{r4, r7, pc}
 8010a84:	08021570 	.word	0x08021570
 8010a88:	08021578 	.word	0x08021578
 8010a8c:	08021584 	.word	0x08021584
 8010a90:	08021594 	.word	0x08021594
 8010a94:	080215a0 	.word	0x080215a0
 8010a98:	080215ac 	.word	0x080215ac
 8010a9c:	080219bc 	.word	0x080219bc

08010aa0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8010aa0:	b590      	push	{r4, r7, lr}
 8010aa2:	b09b      	sub	sp, #108	@ 0x6c
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
 8010aac:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fe f87b 	bl	800ebac <_ZN6ModuleC1Ev>
 8010ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8010c28 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	61da      	str	r2, [r3, #28]
      step(_step),
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010acc:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010ad2:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010ada:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010aea:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010af2:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8010afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010afe:	4618      	mov	r0, r3
 8010b00:	f00e fc55 	bl	801f3ae <_ZNSaIcEC1Ev>
 8010b04:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010b08:	f107 0314 	add.w	r3, r7, #20
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7f4 fa96 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010b14:	f107 0314 	add.w	r3, r7, #20
 8010b18:	2201      	movs	r2, #1
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f7f1 fb7d 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8010b22:	f107 0314 	add.w	r3, r7, #20
 8010b26:	4618      	mov	r0, r3
 8010b28:	f00e fd14 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010b30:	4618      	mov	r0, r3
 8010b32:	f00e fc3d 	bl	801f3b0 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8010b3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8010b40:	4618      	mov	r0, r3
 8010b42:	f00e fc34 	bl	801f3ae <_ZNSaIcEC1Ev>
 8010b46:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010b4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010b4e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f4 fa75 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010b56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f7f1 fb5c 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8010b64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f00e fcf3 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010b6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8010b72:	4618      	mov	r0, r3
 8010b74:	f00e fc1c 	bl	801f3b0 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8010b7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010b82:	4618      	mov	r0, r3
 8010b84:	f00e fc13 	bl	801f3ae <_ZNSaIcEC1Ev>
 8010b88:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8010b8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010b90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7f4 fa54 	bl	8005040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f7f1 fb3b 	bl	800221c <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8010ba6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010baa:	4618      	mov	r0, r3
 8010bac:	f00e fcd2 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f00e fbfb 	bl	801f3b0 <_ZNSaIcED1Ev>
      rawCount(0),
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd4:	ee07 3a90 	vmov	s15, r3
 8010bd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	ee07 3a90 	vmov	s15, r3
 8010be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	409a      	lsls	r2, r3
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2200      	movs	r2, #0
 8010c08:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8010c1a:	751a      	strb	r2, [r3, #20]
}
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	376c      	adds	r7, #108	@ 0x6c
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd90      	pop	{r4, r7, pc}
 8010c26:	bf00      	nop
 8010c28:	080219e4 	.word	0x080219e4

08010c2c <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f819 	bl	8010c6c <_ZN7Stepgen10makePulsesEv>
}
 8010c3a:	bf00      	nop
 8010c3c:	3708      	adds	r7, #8
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b082      	sub	sp, #8
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 f8a8 	bl	8010da0 <_ZN7Stepgen10stopPulsesEv>
}
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8010c60:	bf00      	nop
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr

08010c6c <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8010c84:	4013      	ands	r3, r2
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	bf14      	ite	ne
 8010c8a:	2301      	movne	r3, #1
 8010c8c:	2300      	moveq	r3, #0
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8010c9c:	f083 0301 	eor.w	r3, r3, #1
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d006      	beq.n	8010cb4 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3338      	adds	r3, #56	@ 0x38
 8010caa:	2101      	movs	r1, #1
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f1 fc5f 	bl	8002570 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 8010cb2:	e072      	b.n	8010d9a <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3338      	adds	r3, #56	@ 0x38
 8010cb8:	2100      	movs	r1, #0
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f1 fc58 	bl	8002570 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8010cd2:	ee07 3a90 	vmov	s15, r3
 8010cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8010ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ce8:	ee17 2a90 	vmov	r2, s15
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8010cf8:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010d06:	441a      	add	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	4053      	eors	r3, r2
 8010d18:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d1e:	2201      	movs	r2, #1
 8010d20:	fa02 f303 	lsl.w	r3, r2, r3
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	4013      	ands	r3, r2
 8010d28:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	bfcc      	ite	gt
 8010d34:	2301      	movgt	r3, #1
 8010d36:	2300      	movle	r3, #0
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d029      	beq.n	8010d9a <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8010d52:	4619      	mov	r1, r3
 8010d54:	4610      	mov	r0, r2
 8010d56:	f7f1 fc0b 	bl	8002570 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3378      	adds	r3, #120	@ 0x78
 8010d5e:	2101      	movs	r1, #1
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7f1 fc05 	bl	8002570 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 8010d72:	2a00      	cmp	r2, #0
 8010d74:	d001      	beq.n	8010d7a <_ZN7Stepgen10makePulsesEv+0x10e>
 8010d76:	2201      	movs	r2, #1
 8010d78:	e001      	b.n	8010d7e <_ZN7Stepgen10makePulsesEv+0x112>
 8010d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7e:	441a      	add	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8010d90:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2201      	movs	r2, #1
 8010d96:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3378      	adds	r3, #120	@ 0x78
 8010dac:	2100      	movs	r1, #0
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f1 fbde 	bl	8002570 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08c      	sub	sp, #48	@ 0x30
 8010dc8:	af02      	add	r7, sp, #8
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	f107 0314 	add.w	r3, r7, #20
 8010dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dda:	e883 0003 	stmia.w	r3, {r0, r1}
 8010dde:	f107 031c 	add.w	r3, r7, #28
 8010de2:	6879      	ldr	r1, [r7, #4]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f000 f8c6 	bl	8010f76 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8010dea:	466a      	mov	r2, sp
 8010dec:	f107 0320 	add.w	r3, r7, #32
 8010df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010df4:	e882 0003 	stmia.w	r2, {r0, r1}
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	f107 0214 	add.w	r2, r7, #20
 8010dfe:	ca06      	ldmia	r2, {r1, r2}
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f7f4 fb12 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	3728      	adds	r7, #40	@ 0x28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b08c      	sub	sp, #48	@ 0x30
 8010e12:	af02      	add	r7, sp, #8
 8010e14:	60f8      	str	r0, [r7, #12]
 8010e16:	60b9      	str	r1, [r7, #8]
 8010e18:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8010e1a:	68ba      	ldr	r2, [r7, #8]
 8010e1c:	f107 0314 	add.w	r3, r7, #20
 8010e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e24:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e28:	f107 031c 	add.w	r3, r7, #28
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f000 f8b4 	bl	8010f9c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8010e34:	466a      	mov	r2, sp
 8010e36:	f107 0320 	add.w	r3, r7, #32
 8010e3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e3e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010e42:	69fb      	ldr	r3, [r7, #28]
 8010e44:	f107 0214 	add.w	r2, r7, #20
 8010e48:	ca06      	ldmia	r2, {r1, r2}
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7f4 faed 	bl	800542a <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	3728      	adds	r7, #40	@ 0x28
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8010e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	b093      	sub	sp, #76	@ 0x4c
 8010e5e:	af08      	add	r7, sp, #32
 8010e60:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e62:	6239      	str	r1, [r7, #32]
 8010e64:	61fa      	str	r2, [r7, #28]
 8010e66:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8010e68:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8010e6c:	f00e fa8e 	bl	801f38c <_Znwj>
 8010e70:	4603      	mov	r3, r0
 8010e72:	4698      	mov	r8, r3
 8010e74:	6a38      	ldr	r0, [r7, #32]
 8010e76:	f7f9 f8b2 	bl	8009fde <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4699      	mov	r9, r3
 8010e80:	69f8      	ldr	r0, [r7, #28]
 8010e82:	f7fb fa65 	bl	800c350 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010e86:	4603      	mov	r3, r0
 8010e88:	681e      	ldr	r6, [r3, #0]
 8010e8a:	69b8      	ldr	r0, [r7, #24]
 8010e8c:	f7fb fa55 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010e90:	4603      	mov	r3, r0
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	617b      	str	r3, [r7, #20]
 8010e96:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010e98:	f7fb fa4f 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	681c      	ldr	r4, [r3, #0]
 8010ea0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010ea2:	f7fb fa4a 	bl	800c33a <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	681d      	ldr	r5, [r3, #0]
 8010eaa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010eac:	f7f9 f8a2 	bl	8009ff4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	613b      	str	r3, [r7, #16]
 8010eb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010eb8:	f000 f883 	bl	8010fc2 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ebc:	60f8      	str	r0, [r7, #12]
 8010ebe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010ec0:	f000 f87f 	bl	8010fc2 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ec4:	60b8      	str	r0, [r7, #8]
 8010ec6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8010ec8:	f000 f886 	bl	8010fd8 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8010ed0:	f7fd f9f9 	bl	800e2c6 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	9306      	str	r3, [sp, #24]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	9205      	str	r2, [sp, #20]
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	9204      	str	r2, [sp, #16]
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	9203      	str	r2, [sp, #12]
 8010ee6:	693a      	ldr	r2, [r7, #16]
 8010ee8:	9202      	str	r2, [sp, #8]
 8010eea:	9501      	str	r5, [sp, #4]
 8010eec:	9400      	str	r4, [sp, #0]
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	4632      	mov	r2, r6
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	4640      	mov	r0, r8
 8010ef6:	f7ff fdd3 	bl	8010aa0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 8010efa:	4641      	mov	r1, r8
 8010efc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010efe:	f000 f886 	bl	801100e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8010f02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f04:	372c      	adds	r7, #44	@ 0x2c
 8010f06:	46bd      	mov	sp, r7
 8010f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010f0c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8010f0c:	b590      	push	{r4, r7, lr}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 f888 	bl	801102c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8010f1c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00c      	beq.n	8010f40 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f88d 	bl	8011046 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f000 f896 	bl	8011060 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 8010f34:	4603      	mov	r3, r0
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f000 f8cf 	bl	80110de <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	601a      	str	r2, [r3, #0]
      }
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd90      	pop	{r4, r7, pc}

08010f50 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8010f50:	b590      	push	{r4, r7, lr}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8010f5a:	687c      	ldr	r4, [r7, #4]
 8010f5c:	6838      	ldr	r0, [r7, #0]
 8010f5e:	f000 f8cf 	bl	8011100 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8010f62:	4603      	mov	r3, r0
 8010f64:	4619      	mov	r1, r3
 8010f66:	4620      	mov	r0, r4
 8010f68:	f000 f8d5 	bl	8011116 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd90      	pop	{r4, r7, pc}

08010f76 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
 8010f7e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8010f80:	6838      	ldr	r0, [r7, #0]
 8010f82:	f000 f900 	bl	8011186 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8010f86:	4602      	mov	r2, r0
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 f905 	bl	801119c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 8010f92:	bf00      	nop
}
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8010fa6:	6838      	ldr	r0, [r7, #0]
 8010fa8:	f000 f907 	bl	80111ba <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8010fac:	4602      	mov	r2, r0
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f000 f90c 	bl	80111d0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8010fb8:	bf00      	nop
}
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010fc2:	b480      	push	{r7}
 8010fc4:	b083      	sub	sp, #12
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr

08010fee <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b082      	sub	sp, #8
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	6039      	str	r1, [r7, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	683a      	ldr	r2, [r7, #0]
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f000 f8f5 	bl	80111ee <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 801100e:	b580      	push	{r7, lr}
 8011010:	b082      	sub	sp, #8
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6839      	ldr	r1, [r7, #0]
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff ffe6 	bl	8010fee <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4618      	mov	r0, r3
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	4618      	mov	r0, r3
 8011038:	f000 f8ed 	bl	8011216 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801103c:	4603      	mov	r3, r0
 801103e:	4618      	mov	r0, r3
 8011040:	3708      	adds	r7, #8
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8011046:	b580      	push	{r7, lr}
 8011048:	b082      	sub	sp, #8
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4618      	mov	r0, r3
 8011052:	f000 f8ed 	bl	8011230 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 8011056:	4603      	mov	r3, r0
 8011058:	4618      	mov	r0, r3
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4618      	mov	r0, r3
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
	...

08011078 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	4a0d      	ldr	r2, [pc, #52]	@ (80110b8 <_ZN7StepgenD1Ev+0x40>)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	601a      	str	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	33b8      	adds	r3, #184	@ 0xb8
 801108a:	4618      	mov	r0, r3
 801108c:	f7fb fa7b 	bl	800c586 <_ZN3PinD1Ev>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	3378      	adds	r3, #120	@ 0x78
 8011094:	4618      	mov	r0, r3
 8011096:	f7fb fa76 	bl	800c586 <_ZN3PinD1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3338      	adds	r3, #56	@ 0x38
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fb fa71 	bl	800c586 <_ZN3PinD1Ev>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fd fd9c 	bl	800ebe4 <_ZN6ModuleD1Ev>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4618      	mov	r0, r3
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	080219e4 	.word	0x080219e4

080110bc <_ZN7StepgenD0Ev>:
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff ffd7 	bl	8011078 <_ZN7StepgenD1Ev>
 80110ca:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f00e f94b 	bl	801f36a <_ZdlPvj>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4618      	mov	r0, r3
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 80110de:	b580      	push	{r7, lr}
 80110e0:	b082      	sub	sp, #8
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d004      	beq.n	80110f8 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	3204      	adds	r2, #4
 80110f2:	6812      	ldr	r2, [r2, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	4790      	blx	r2
      }
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4618      	mov	r0, r3
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8011120:	6838      	ldr	r0, [r7, #0]
 8011122:	f000 f892 	bl	801124a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8011126:	4602      	mov	r2, r0
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	601a      	str	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	3304      	adds	r3, #4
 8011130:	4618      	mov	r0, r3
 8011132:	f7f9 f941 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8011136:	6838      	ldr	r0, [r7, #0]
 8011138:	f000 f887 	bl	801124a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 801113c:	4603      	mov	r3, r0
 801113e:	4618      	mov	r0, r3
 8011140:	f000 f890 	bl	8011264 <_ZSt12__to_addressI7StepgenEPT_S2_>
 8011144:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8011146:	6838      	ldr	r0, [r7, #0]
 8011148:	f7ff ffda 	bl	8011100 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801114c:	4602      	mov	r2, r0
 801114e:	f107 0308 	add.w	r3, r7, #8
 8011152:	4611      	mov	r1, r2
 8011154:	4618      	mov	r0, r3
 8011156:	f000 f890 	bl	801127a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3304      	adds	r3, #4
 801115e:	f107 0208 	add.w	r2, r7, #8
 8011162:	4611      	mov	r1, r2
 8011164:	4618      	mov	r0, r3
 8011166:	f7fb fafb 	bl	800c760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	4618      	mov	r0, r3
 8011170:	f7f8 f95c 	bl	800942c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8011174:	68f9      	ldr	r1, [r7, #12]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 f8c1 	bl	80112fe <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	4618      	mov	r0, r3
 8011180:	3710      	adds	r7, #16
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}

08011186 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8011186:	b480      	push	{r7}
 8011188:	b083      	sub	sp, #12
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801118e:	687b      	ldr	r3, [r7, #4]
}
 8011190:	4618      	mov	r0, r3
 8011192:	370c      	adds	r7, #12
 8011194:	46bd      	mov	sp, r7
 8011196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119a:	4770      	bx	lr

0801119c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80111a6:	2301      	movs	r3, #1
 80111a8:	220c      	movs	r2, #12
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f7f1 fbb7 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80111c2:	687b      	ldr	r3, [r7, #4]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr

080111d0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80111da:	2301      	movs	r3, #1
 80111dc:	220d      	movs	r2, #13
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f7f1 fb9d 	bl	8002920 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80111ee:	b590      	push	{r4, r7, lr}
 80111f0:	b083      	sub	sp, #12
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
 80111f6:	6039      	str	r1, [r7, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 f88a 	bl	8011314 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8011200:	683c      	ldr	r4, [r7, #0]
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff ff12 	bl	801102c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8011208:	4603      	mov	r3, r0
 801120a:	601c      	str	r4, [r3, #0]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	370c      	adds	r7, #12
 8011212:	46bd      	mov	sp, r7
 8011214:	bd90      	pop	{r4, r7, pc}

08011216 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8011216:	b580      	push	{r7, lr}
 8011218:	b082      	sub	sp, #8
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	f000 f884 	bl	801132e <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011226:	4603      	mov	r3, r0
 8011228:	4618      	mov	r0, r3
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	f000 f883 	bl	8011346 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011240:	4603      	mov	r3, r0
 8011242:	4618      	mov	r0, r3
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801124a:	b580      	push	{r7, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	f000 f882 	bl	801135e <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801125a:	4603      	mov	r3, r0
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
      return __ptr;
 801126c:	687b      	ldr	r3, [r7, #4]
    }
 801126e:	4618      	mov	r0, r3
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr

0801127a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 801127a:	b580      	push	{r7, lr}
 801127c:	b086      	sub	sp, #24
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 801128a:	6838      	ldr	r0, [r7, #0]
 801128c:	f7ff ffdd 	bl	801124a <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	bf0c      	ite	eq
 8011296:	2301      	moveq	r3, #1
 8011298:	2300      	movne	r3, #0
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	d128      	bne.n	80112f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 f868 	bl	801137a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80112aa:	f107 030c 	add.w	r3, r7, #12
 80112ae:	2101      	movs	r1, #1
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 f87a 	bl	80113aa <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80112b6:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80112b8:	6838      	ldr	r0, [r7, #0]
 80112ba:	f000 f885 	bl	80113c8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80112be:	4603      	mov	r3, r0
 80112c0:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80112c2:	6838      	ldr	r0, [r7, #0]
 80112c4:	f7ff febf 	bl	8011046 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80112c8:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 f889 	bl	80113e2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80112d0:	4603      	mov	r3, r0
 80112d2:	f107 0210 	add.w	r2, r7, #16
 80112d6:	f107 000c 	add.w	r0, r7, #12
 80112da:	6979      	ldr	r1, [r7, #20]
 80112dc:	f000 f88c 	bl	80113f8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	601a      	str	r2, [r3, #0]
	}
 80112e6:	f107 030c 	add.w	r3, r7, #12
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 f851 	bl	8011392 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80112f0:	e000      	b.n	80112f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80112f2:	bf00      	nop
	}
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80112fe:	b480      	push	{r7}
 8011300:	b083      	sub	sp, #12
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	6039      	str	r1, [r7, #0]
	{ }
 8011308:	bf00      	nop
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	f000 f882 	bl	8011428 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4618      	mov	r0, r3
 8011328:	3708      	adds	r7, #8
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801132e:	b580      	push	{r7, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f886 	bl	8011448 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 801133c:	4603      	mov	r3, r0
 801133e:	4618      	mov	r0, r3
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f887 	bl	8011462 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8011354:	4603      	mov	r3, r0
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 f886 	bl	801147a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 801136e:	4603      	mov	r3, r0
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4618      	mov	r0, r3
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}

0801137a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801137a:	b580      	push	{r7, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 f886 	bl	8011494 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011392:	b580      	push	{r7, lr}
 8011394:	b082      	sub	sp, #8
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 f885 	bl	80114aa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b082      	sub	sp, #8
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80113b4:	2200      	movs	r2, #0
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 f881 	bl	80114c0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80113be:	4603      	mov	r3, r0
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 f89e 	bl	8011514 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80113d8:	4603      	mov	r3, r0
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113e2:	b480      	push	{r7}
 80113e4:	b083      	sub	sp, #12
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80113f8:	b590      	push	{r4, r7, lr}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 f899 	bl	801153e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 801140c:	4604      	mov	r4, r0
 801140e:	6838      	ldr	r0, [r7, #0]
 8011410:	f7ff ffe7 	bl	80113e2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011414:	4603      	mov	r3, r0
 8011416:	4622      	mov	r2, r4
 8011418:	68b9      	ldr	r1, [r7, #8]
 801141a:	68f8      	ldr	r0, [r7, #12]
 801141c:	f000 f89a 	bl	8011554 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8011420:	bf00      	nop
 8011422:	3714      	adds	r7, #20
 8011424:	46bd      	mov	sp, r7
 8011426:	bd90      	pop	{r4, r7, pc}

08011428 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 f8ad 	bl	8011590 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 f8b5 	bl	80115a8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4618      	mov	r0, r3
 8011454:	f000 f8b6 	bl	80115c4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8011458:	4603      	mov	r3, r0
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011462:	b580      	push	{r7, lr}
 8011464:	b082      	sub	sp, #8
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 f8b5 	bl	80115da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 8011470:	4603      	mov	r3, r0
 8011472:	4618      	mov	r0, r3
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	f000 f8b4 	bl	80115f2 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801148a:	4603      	mov	r3, r0
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4618      	mov	r0, r3
 80114a0:	370c      	adds	r7, #12
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80114aa:	b480      	push	{r7}
 80114ac:	b083      	sub	sp, #12
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	f000 f89c 	bl	801160a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80114d2:	4602      	mov	r2, r0
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	4293      	cmp	r3, r2
 80114d8:	bf8c      	ite	hi
 80114da:	2301      	movhi	r3, #1
 80114dc:	2300      	movls	r3, #0
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bf14      	ite	ne
 80114e4:	2301      	movne	r3, #1
 80114e6:	2300      	moveq	r3, #0
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d007      	beq.n	80114fe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114f4:	d301      	bcc.n	80114fa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80114f6:	f00d ff5f 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80114fa:	f00d ff5a 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	011b      	lsls	r3, r3, #4
 8011502:	4618      	mov	r0, r3
 8011504:	f00d ff42 	bl	801f38c <_Znwj>
 8011508:	4603      	mov	r3, r0
 801150a:	bf00      	nop
      }
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff fd85 	bl	801102c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8011522:	4603      	mov	r3, r0
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f7ff fd7f 	bl	801102c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801152e:	4603      	mov	r3, r0
 8011530:	2200      	movs	r2, #0
 8011532:	601a      	str	r2, [r3, #0]
	return __p;
 8011534:	68fb      	ldr	r3, [r7, #12]
      }
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801153e:	b480      	push	{r7}
 8011540:	b083      	sub	sp, #12
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
 8011560:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	4619      	mov	r1, r3
 8011566:	2010      	movs	r0, #16
 8011568:	f7f6 fdac 	bl	80080c4 <_ZnwjPv>
 801156c:	4605      	mov	r5, r0
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff ffe5 	bl	801153e <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8011574:	4603      	mov	r3, r0
 8011576:	681c      	ldr	r4, [r3, #0]
 8011578:	6838      	ldr	r0, [r7, #0]
 801157a:	f7ff ff32 	bl	80113e2 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 801157e:	4632      	mov	r2, r6
 8011580:	4621      	mov	r1, r4
 8011582:	4628      	mov	r0, r5
 8011584:	f000 f84e 	bl	8011624 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8011588:	bf00      	nop
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011590 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f865 	bl	8011668 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4618      	mov	r0, r3
 80115a2:	3708      	adds	r7, #8
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2200      	movs	r2, #0
 80115b4:	601a      	str	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 f84b 	bl	801167e <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 80115e8:	4603      	mov	r3, r0
 80115ea:	4618      	mov	r0, r3
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f84a 	bl	8011694 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 8011600:	4603      	mov	r3, r0
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011612:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8011616:	4618      	mov	r0, r3
 8011618:	370c      	adds	r7, #12
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr
	...

08011624 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011624:	b5b0      	push	{r4, r5, r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	4618      	mov	r0, r3
 8011634:	f7f9 fdaa 	bl	800b18c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011638:	4a0a      	ldr	r2, [pc, #40]	@ (8011664 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f103 040c 	add.w	r4, r3, #12
 8011644:	1d3b      	adds	r3, r7, #4
 8011646:	4618      	mov	r0, r3
 8011648:	f000 f831 	bl	80116ae <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 801164c:	f107 0314 	add.w	r3, r7, #20
 8011650:	462a      	mov	r2, r5
 8011652:	68b9      	ldr	r1, [r7, #8]
 8011654:	4620      	mov	r0, r4
 8011656:	f000 f835 	bl	80116c4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	4618      	mov	r0, r3
 801165e:	3718      	adds	r7, #24
 8011660:	46bd      	mov	sp, r7
 8011662:	bdb0      	pop	{r4, r5, r7, pc}
 8011664:	080219c8 	.word	0x080219c8

08011668 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801167e:	b480      	push	{r7}
 8011680:	b083      	sub	sp, #12
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4618      	mov	r0, r3
 801168a:	370c      	adds	r7, #12
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 f82c 	bl	80116fc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 80116a4:	4603      	mov	r3, r0
 80116a6:	4618      	mov	r0, r3
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80116ae:	b480      	push	{r7}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	713a      	strb	r2, [r7, #4]
 80116d0:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80116d2:	1d3b      	adds	r3, r7, #4
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7ff ffea 	bl	80116ae <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80116da:	4603      	mov	r3, r0
 80116dc:	4619      	mov	r1, r3
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f000 f817 	bl	8011712 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f7fb fd9a 	bl	800d220 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	601a      	str	r2, [r3, #0]
	{ }
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4618      	mov	r0, r3
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr

08011712 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011712:	b580      	push	{r7, lr}
 8011714:	b082      	sub	sp, #8
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
 801171a:	6039      	str	r1, [r7, #0]
 801171c:	6838      	ldr	r0, [r7, #0]
 801171e:	f7ff ffc6 	bl	80116ae <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	4a05      	ldr	r2, [pc, #20]	@ (801174c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	601a      	str	r2, [r3, #0]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4618      	mov	r0, r3
 801173e:	f7f8 f92f 	bl	80099a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	4618      	mov	r0, r3
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	080219c8 	.word	0x080219c8

08011750 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7ff ffe7 	bl	801172c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801175e:	2110      	movs	r1, #16
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f00d fe02 	bl	801f36a <_ZdlPvj>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	330c      	adds	r3, #12
 801177c:	4618      	mov	r0, r3
 801177e:	f000 f83f 	bl	8011800 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011782:	4602      	mov	r2, r0
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	4619      	mov	r1, r3
 801178a:	4610      	mov	r0, r2
 801178c:	f7ff fca7 	bl	80110de <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 8011790:	bf00      	nop
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	330c      	adds	r3, #12
 80117a4:	4618      	mov	r0, r3
 80117a6:	f000 f837 	bl	8011818 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80117aa:	4602      	mov	r2, r0
 80117ac:	f107 0314 	add.w	r3, r7, #20
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 f83c 	bl	8011830 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80117b8:	f107 0114 	add.w	r1, r7, #20
 80117bc:	f107 030c 	add.w	r3, r7, #12
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f000 f841 	bl	801184a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7ff ffaf 	bl	801172c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80117ce:	f107 030c 	add.w	r3, r7, #12
 80117d2:	4618      	mov	r0, r3
 80117d4:	f000 f84d 	bl	8011872 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80117d8:	f107 0314 	add.w	r3, r7, #20
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff fdd8 	bl	8011392 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80117e2:	3718      	adds	r7, #24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
        return nullptr;
 80117f2:	2300      	movs	r3, #0
      }
 80117f4:	4618      	mov	r0, r3
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f000 f847 	bl	801189c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 801180e:	4603      	mov	r3, r0
 8011810:	4618      	mov	r0, r3
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f7fb fdcc 	bl	800d3be <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8011826:	4603      	mov	r3, r0
 8011828:	4618      	mov	r0, r3
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7ff fe2a 	bl	8011494 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801184a:	b580      	push	{r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011856:	68b8      	ldr	r0, [r7, #8]
 8011858:	f000 f82b 	bl	80118b2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 801185c:	4602      	mov	r2, r0
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	601a      	str	r2, [r3, #0]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	605a      	str	r2, [r3, #4]
      { }
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	4618      	mov	r0, r3
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011872:	b580      	push	{r7, lr}
 8011874:	b082      	sub	sp, #8
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d007      	beq.n	8011892 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6818      	ldr	r0, [r3, #0]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	2201      	movs	r2, #1
 801188c:	4619      	mov	r1, r3
 801188e:	f000 f81b 	bl	80118c8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4618      	mov	r0, r3
 80118a8:	370c      	adds	r7, #12
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr

080118b2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80118b2:	b480      	push	{r7}
 80118b4:	b083      	sub	sp, #12
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr

080118c8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	68b9      	ldr	r1, [r7, #8]
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f000 f804 	bl	80118e6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 80118de:	bf00      	nop
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	60f8      	str	r0, [r7, #12]
 80118ee:	60b9      	str	r1, [r7, #8]
 80118f0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	4619      	mov	r1, r3
 80118f8:	68b8      	ldr	r0, [r7, #8]
 80118fa:	f00d fd36 	bl	801f36a <_ZdlPvj>
      }
 80118fe:	3710      	adds	r7, #16
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <__NVIC_SetPriority>:
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	4603      	mov	r3, r0
 801190c:	6039      	str	r1, [r7, #0]
 801190e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011914:	2b00      	cmp	r3, #0
 8011916:	db0a      	blt.n	801192e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	b2da      	uxtb	r2, r3
 801191c:	490c      	ldr	r1, [pc, #48]	@ (8011950 <__NVIC_SetPriority+0x4c>)
 801191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011922:	0112      	lsls	r2, r2, #4
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	440b      	add	r3, r1
 8011928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801192c:	e00a      	b.n	8011944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	b2da      	uxtb	r2, r3
 8011932:	4908      	ldr	r1, [pc, #32]	@ (8011954 <__NVIC_SetPriority+0x50>)
 8011934:	88fb      	ldrh	r3, [r7, #6]
 8011936:	f003 030f 	and.w	r3, r3, #15
 801193a:	3b04      	subs	r3, #4
 801193c:	0112      	lsls	r2, r2, #4
 801193e:	b2d2      	uxtb	r2, r2
 8011940:	440b      	add	r3, r1
 8011942:	761a      	strb	r2, [r3, #24]
}
 8011944:	bf00      	nop
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	e000e100 	.word	0xe000e100
 8011954:	e000ed00 	.word	0xe000ed00

08011958 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	6039      	str	r1, [r7, #0]
 8011962:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	b25a      	sxtb	r2, r3
 8011968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801196c:	4013      	ands	r3, r2
 801196e:	b25b      	sxtb	r3, r3
 8011970:	b2db      	uxtb	r3, r3
  }
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801197e:	b580      	push	{r7, lr}
 8011980:	b082      	sub	sp, #8
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
 8011986:	460b      	mov	r3, r1
 8011988:	70fb      	strb	r3, [r7, #3]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	78fa      	ldrb	r2, [r7, #3]
 801198e:	4611      	mov	r1, r2
 8011990:	4618      	mov	r0, r3
 8011992:	f000 fa2e 	bl	8011df2 <_ZNSt13__atomic_baseIbEC1Eb>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	460b      	mov	r3, r1
 80119aa:	70fb      	strb	r3, [r7, #3]
 80119ac:	4613      	mov	r3, r2
 80119ae:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	78fb      	ldrb	r3, [r7, #3]
 80119b6:	72fb      	strb	r3, [r7, #11]
 80119b8:	78bb      	ldrb	r3, [r7, #2]
 80119ba:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 80119bc:	7abb      	ldrb	r3, [r7, #10]
 80119be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff ffc8 	bl	8011958 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80119c8:	4603      	mov	r3, r0
 80119ca:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 80119cc:	f7f0 fee0 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d004      	beq.n	80119e0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80119d6:	7a7b      	ldrb	r3, [r7, #9]
 80119d8:	2b02      	cmp	r3, #2
 80119da:	d101      	bne.n	80119e0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80119dc:	2301      	movs	r3, #1
 80119de:	e000      	b.n	80119e2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 80119e0:	2300      	movs	r3, #0
 80119e2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 80119e4:	f7f0 fed4 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d004      	beq.n	80119f8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80119ee:	7a7b      	ldrb	r3, [r7, #9]
 80119f0:	2b04      	cmp	r3, #4
 80119f2:	d101      	bne.n	80119f8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80119f4:	2301      	movs	r3, #1
 80119f6:	e000      	b.n	80119fa <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 80119f8:	2300      	movs	r3, #0
 80119fa:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 80119fc:	f7f0 fec8 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d004      	beq.n	8011a10 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 8011a06:	7a7b      	ldrb	r3, [r7, #9]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d101      	bne.n	8011a10 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e000      	b.n	8011a12 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 8011a10:	2300      	movs	r3, #0
 8011a12:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	7afa      	ldrb	r2, [r7, #11]
 8011a18:	f3bf 8f5b 	dmb	ish
 8011a1c:	701a      	strb	r2, [r3, #0]
 8011a1e:	f3bf 8f5b 	dmb	ish
      }
 8011a22:	bf00      	nop
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	460b      	mov	r3, r1
 8011a36:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	78fb      	ldrb	r3, [r7, #3]
 8011a3e:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8011a40:	7afb      	ldrb	r3, [r7, #11]
 8011a42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff ff86 	bl	8011958 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 8011a50:	f7f0 fe9e 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d004      	beq.n	8011a64 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8011a5a:	7abb      	ldrb	r3, [r7, #10]
 8011a5c:	2b03      	cmp	r3, #3
 8011a5e:	d101      	bne.n	8011a64 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8011a60:	2301      	movs	r3, #1
 8011a62:	e000      	b.n	8011a66 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 8011a64:	2300      	movs	r3, #0
 8011a66:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8011a68:	f7f0 fe92 	bl	8002790 <_ZSt23__is_constant_evaluatedv>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d004      	beq.n	8011a7c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8011a72:	7abb      	ldrb	r3, [r7, #10]
 8011a74:	2b04      	cmp	r3, #4
 8011a76:	d101      	bne.n	8011a7c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e000      	b.n	8011a7e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f3bf 8f5b 	dmb	ish
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	f3bf 8f5b 	dmb	ish
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	bf14      	ite	ne
 8011a92:	2301      	movne	r3, #1
 8011a94:	2300      	moveq	r3, #0
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	3329      	adds	r3, #41	@ 0x29
 8011ab0:	78f9      	ldrb	r1, [r7, #3]
 8011ab2:	2203      	movs	r2, #3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7ff ff73 	bl	80119a0 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 8011aba:	bf00      	nop
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
 8011aca:	460b      	mov	r3, r1
 8011acc:	70fb      	strb	r3, [r7, #3]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	332a      	adds	r3, #42	@ 0x2a
 8011ad2:	78f9      	ldrb	r1, [r7, #3]
 8011ad4:	2203      	movs	r2, #3
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7ff ff62 	bl	80119a0 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 8011adc:	bf00      	nop
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3329      	adds	r3, #41	@ 0x29
 8011af0:	2102      	movs	r1, #2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7ff ff9a 	bl	8011a2c <_ZNKSt6atomicIbE4loadESt12memory_order>
 8011af8:	4603      	mov	r3, r0
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b082      	sub	sp, #8
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	332a      	adds	r3, #42	@ 0x2a
 8011b0e:	2102      	movs	r1, #2
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ff8b 	bl	8011a2c <_ZNKSt6atomicIbE4loadESt12memory_order>
 8011b16:	4603      	mov	r3, r0
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 f971 	bl	8011e12 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4618      	mov	r0, r3
 8011b34:	3708      	adds	r7, #8
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b082      	sub	sp, #8
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff ffeb 	bl	8011b20 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
 8011b60:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f00d fdf3 	bl	801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	619a      	str	r2, [r3, #24]
      irq(_irq),
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	887a      	ldrh	r2, [r7, #2]
 8011b76:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	69ba      	ldr	r2, [r7, #24]
 8011b7c:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2200      	movs	r2, #0
 8011b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3329      	adds	r3, #41	@ 0x29
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff fef6 	bl	801197e <_ZNSt6atomicIbEC1Eb>
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	332a      	adds	r3, #42	@ 0x2a
 8011b96:	2100      	movs	r1, #0
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff fef0 	bl	801197e <_ZNSt6atomicIbEC1Eb>
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	332c      	adds	r3, #44	@ 0x2c
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff ffc9 	bl	8011b3a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	3338      	adds	r3, #56	@ 0x38
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff ffc4 	bl	8011b3a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f00d fdad 	bl	801f714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8011bba:	4601      	mov	r1, r0
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	6a1b      	ldr	r3, [r3, #32]
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	4808      	ldr	r0, [pc, #32]	@ (8011be4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 8011bc4:	f00e f964 	bl	801fe90 <iprintf>
    NVIC_SetPriority(irq, _prio);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011bce:	7f3a      	ldrb	r2, [r7, #28]
 8011bd0:	4611      	mov	r1, r2
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7ff fe96 	bl	8011904 <__NVIC_SetPriority>
}
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	080215f0 	.word	0x080215f0

08011be8 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b08a      	sub	sp, #40	@ 0x28
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	332c      	adds	r3, #44	@ 0x2c
 8011bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011bf8:	f000 f91b 	bl	8011e32 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	617b      	str	r3, [r7, #20]
 8011c00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c02:	f000 f926 	bl	8011e52 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8011c06:	4603      	mov	r3, r0
 8011c08:	613b      	str	r3, [r7, #16]
 8011c0a:	e018      	b.n	8011c3e <_ZN9pruThread14executeModulesEv+0x56>
 8011c0c:	f107 0314 	add.w	r3, r7, #20
 8011c10:	4618      	mov	r0, r3
 8011c12:	f000 f958 	bl	8011ec6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8011c16:	61b8      	str	r0, [r7, #24]
        if (module) {
 8011c18:	69bb      	ldr	r3, [r7, #24]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7f7 fe8c 	bl	8009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 8011c26:	69b8      	ldr	r0, [r7, #24]
 8011c28:	f7f7 fe97 	bl	800995a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fc fff8 	bl	800ec24 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 8011c34:	f107 0314 	add.w	r3, r7, #20
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 f933 	bl	8011ea4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8011c3e:	f107 0210 	add.w	r2, r7, #16
 8011c42:	f107 0314 	add.w	r3, r7, #20
 8011c46:	4611      	mov	r1, r2
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 f913 	bl	8011e74 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1db      	bne.n	8011c0c <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d031      	beq.n	8011cc2 <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3338      	adds	r3, #56	@ 0x38
 8011c62:	623b      	str	r3, [r7, #32]
 8011c64:	6a38      	ldr	r0, [r7, #32]
 8011c66:	f000 f8e4 	bl	8011e32 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	60fb      	str	r3, [r7, #12]
 8011c6e:	6a38      	ldr	r0, [r7, #32]
 8011c70:	f000 f8ef 	bl	8011e52 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8011c74:	4603      	mov	r3, r0
 8011c76:	60bb      	str	r3, [r7, #8]
 8011c78:	e018      	b.n	8011cac <_ZN9pruThread14executeModulesEv+0xc4>
 8011c7a:	f107 030c 	add.w	r3, r7, #12
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f000 f921 	bl	8011ec6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8011c84:	61f8      	str	r0, [r7, #28]
			if (module) {
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f7 fe55 	bl	8009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d006      	beq.n	8011ca2 <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 8011c94:	69f8      	ldr	r0, [r7, #28]
 8011c96:	f7f7 fe60 	bl	800995a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fc ffc1 	bl	800ec24 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 8011ca2:	f107 030c 	add.w	r3, r7, #12
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 f8fc 	bl	8011ea4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8011cac:	f107 0208 	add.w	r2, r7, #8
 8011cb0:	f107 030c 	add.w	r3, r7, #12
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f000 f8dc 	bl	8011e74 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1db      	bne.n	8011c7a <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 8011cc2:	2301      	movs	r3, #1
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3728      	adds	r7, #40	@ 0x28
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
    if (!module) {
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f7 fe2d 	bl	8009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	f083 0301 	eor.w	r3, r3, #1
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 8011cea:	2300      	movs	r3, #0
 8011cec:	e006      	b.n	8011cfc <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	332c      	adds	r3, #44	@ 0x2c
 8011cf2:	6839      	ldr	r1, [r7, #0]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f000 f8f2 	bl	8011ede <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8011cfa:	2301      	movs	r3, #1
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
    if (!module) {
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7f7 fe11 	bl	8009938 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8011d16:	4603      	mov	r3, r0
 8011d18:	f083 0301 	eor.w	r3, r3, #1
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d001      	beq.n	8011d26 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 8011d22:	2300      	movs	r3, #0
 8011d24:	e00a      	b.n	8011d3c <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	3338      	adds	r3, #56	@ 0x38
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f000 f8d2 	bl	8011ede <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8011d3a:	2301      	movs	r3, #1
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3708      	adds	r7, #8
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 8011d44:	b590      	push	{r4, r7, lr}
 8011d46:	b085      	sub	sp, #20
 8011d48:	af02      	add	r7, sp, #8
 8011d4a:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7ff fec9 	bl	8011ae4 <_ZNK9pruThread9isRunningEv>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d001      	beq.n	8011d5c <_ZN9pruThread11startThreadEv+0x18>
        return true;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e01c      	b.n	8011d96 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f7ff fe9e 	bl	8011aa0 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 8011d64:	2100      	movs	r1, #0
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ff feab 	bl	8011ac2 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 8011d6c:	2014      	movs	r0, #20
 8011d6e:	f00d fb0d 	bl	801f38c <_Znwj>
 8011d72:	4603      	mov	r3, r0
 8011d74:	461c      	mov	r4, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6999      	ldr	r1, [r3, #24]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6a18      	ldr	r0, [r3, #32]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	4603      	mov	r3, r0
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f000 fc26 	bl	80125dc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 8011d94:	2301      	movs	r3, #1
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	370c      	adds	r7, #12
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd90      	pop	{r4, r7, pc}

08011d9e <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b082      	sub	sp, #8
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff fe9c 	bl	8011ae4 <_ZNK9pruThread9isRunningEv>
 8011dac:	4603      	mov	r3, r0
 8011dae:	f083 0301 	eor.w	r3, r3, #1
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d105      	bne.n	8011dc4 <_ZN9pruThread6updateEv+0x26>
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f7ff fea2 	bl	8011b02 <_ZNK9pruThread8isPausedEv>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <_ZN9pruThread6updateEv+0x2a>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e000      	b.n	8011dca <_ZN9pruThread6updateEv+0x2c>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <_ZN9pruThread6updateEv+0x34>
        return true;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e00b      	b.n	8011dea <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7ff ff08 	bl	8011be8 <_ZN9pruThread14executeModulesEv>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	f083 0301 	eor.w	r3, r3, #1
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d001      	beq.n	8011de8 <_ZN9pruThread6updateEv+0x4a>
        return false;
 8011de4:	2300      	movs	r3, #0
 8011de6:	e000      	b.n	8011dea <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 8011de8:	2301      	movs	r3, #1
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8011df2:	b480      	push	{r7}
 8011df4:	b083      	sub	sp, #12
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	70fb      	strb	r3, [r7, #3]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	78fa      	ldrb	r2, [r7, #3]
 8011e02:	701a      	strb	r2, [r3, #0]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr

08011e12 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f895 	bl	8011f4a <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f000 f89d 	bl	8011f62 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b084      	sub	sp, #16
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	f107 030c 	add.w	r3, r7, #12
 8011e40:	4611      	mov	r1, r2
 8011e42:	4618      	mov	r0, r3
 8011e44:	f000 f8a1 	bl	8011f8a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}

08011e52 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8011e52:	b580      	push	{r7, lr}
 8011e54:	b084      	sub	sp, #16
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	1d1a      	adds	r2, r3, #4
 8011e5e:	f107 030c 	add.w	r3, r7, #12
 8011e62:	4611      	mov	r1, r2
 8011e64:	4618      	mov	r0, r3
 8011e66:	f000 f890 	bl	8011f8a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011e74:	b590      	push	{r4, r7, lr}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f000 f893 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8011e84:	4603      	mov	r3, r0
 8011e86:	681c      	ldr	r4, [r3, #0]
 8011e88:	6838      	ldr	r0, [r7, #0]
 8011e8a:	f000 f88e 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	429c      	cmp	r4, r3
 8011e94:	bf14      	ite	ne
 8011e96:	2301      	movne	r3, #1
 8011e98:	2300      	moveq	r3, #0
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}

08011ea4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
	++_M_current;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f103 0208 	add.w	r2, r3, #8
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	601a      	str	r2, [r3, #0]
	return *this;
 8011eb8:	687b      	ldr	r3, [r7, #4]
      }
 8011eba:	4618      	mov	r0, r3
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011ec6:	b480      	push	{r7}
 8011ec8:	b083      	sub	sp, #12
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	370c      	adds	r7, #12
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011edc:	4770      	bx	lr

08011ede <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b082      	sub	sp, #8
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	685a      	ldr	r2, [r3, #4]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d00d      	beq.n	8011f10 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	4619      	mov	r1, r3
 8011efe:	f000 f85f 	bl	8011fc0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	f103 0208 	add.w	r2, r3, #8
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8011f0e:	e008      	b.n	8011f22 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7ff ff9e 	bl	8011e52 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8011f16:	4603      	mov	r3, r0
 8011f18:	683a      	ldr	r2, [r7, #0]
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f863 	bl	8011fe8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8011f22:	bf00      	nop
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8011f2a:	b480      	push	{r7}
 8011f2c:	b083      	sub	sp, #12
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	685a      	ldr	r2, [r3, #4]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	10db      	asrs	r3, r3, #3
 8011f3e:	4618      	mov	r0, r3
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr

08011f4a <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b082      	sub	sp, #8
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f000 f8c4 	bl	80120e0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011f62:	b480      	push	{r7}
 8011f64:	b083      	sub	sp, #12
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	601a      	str	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	605a      	str	r2, [r3, #4]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	609a      	str	r2, [r3, #8]
	{ }
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011f8a:	b480      	push	{r7}
 8011f8c:	b083      	sub	sp, #12
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	601a      	str	r2, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011faa:	b480      	push	{r7}
 8011fac:	b083      	sub	sp, #12
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	370c      	adds	r7, #12
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 f892 	bl	80120f6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	68b9      	ldr	r1, [r7, #8]
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f000 f897 	bl	801210c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8011fde:	bf00      	nop
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
	...

08011fe8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8011fe8:	b5b0      	push	{r4, r5, r7, lr}
 8011fea:	b08c      	sub	sp, #48	@ 0x30
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011ff4:	4a39      	ldr	r2, [pc, #228]	@ (80120dc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f000 f89f 	bl	801213c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 8011ffe:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f7ff ff10 	bl	8011e32 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8012012:	4603      	mov	r3, r0
 8012014:	617b      	str	r3, [r7, #20]
 8012016:	f107 0214 	add.w	r2, r7, #20
 801201a:	f107 0308 	add.w	r3, r7, #8
 801201e:	4611      	mov	r1, r2
 8012020:	4618      	mov	r0, r3
 8012022:	f000 f8d2 	bl	80121ca <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012026:	4603      	mov	r3, r0
 8012028:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801202e:	4618      	mov	r0, r3
 8012030:	f000 f8e0 	bl	80121f4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 8012034:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 801203a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801203c:	6a3b      	ldr	r3, [r7, #32]
 801203e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8012040:	69fa      	ldr	r2, [r7, #28]
 8012042:	18d5      	adds	r5, r2, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 f856 	bl	80120f6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
 801204e:	4629      	mov	r1, r5
 8012050:	4620      	mov	r0, r4
 8012052:	f7ff ffb5 	bl	8011fc0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8012056:	2300      	movs	r3, #0
 8012058:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801205a:	f107 0308 	add.w	r3, r7, #8
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff ffa3 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8012064:	4603      	mov	r3, r0
 8012066:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4618      	mov	r0, r3
 801206c:	f7f8 fc21 	bl	800a8b2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8012070:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012072:	69fa      	ldr	r2, [r7, #28]
 8012074:	4621      	mov	r1, r4
 8012076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012078:	f000 f8d0 	bl	801221c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801207c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	3308      	adds	r3, #8
 8012082:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012084:	f107 0308 	add.w	r3, r7, #8
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff ff8e 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801208e:	4603      	mov	r3, r0
 8012090:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	4618      	mov	r0, r3
 8012096:	f7f8 fc0c 	bl	800a8b2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801209a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801209c:	69ba      	ldr	r2, [r7, #24]
 801209e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 f8bb 	bl	801221c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80120a6:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80120a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	689a      	ldr	r2, [r3, #8]
 80120ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80120b4:	461a      	mov	r2, r3
 80120b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80120b8:	f7f8 fdc3 	bl	800ac42 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	69fa      	ldr	r2, [r7, #28]
 80120c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80120c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	69fa      	ldr	r2, [r7, #28]
 80120ce:	441a      	add	r2, r3
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	609a      	str	r2, [r3, #8]
    }
 80120d4:	bf00      	nop
 80120d6:	3730      	adds	r7, #48	@ 0x30
 80120d8:	46bd      	mov	sp, r7
 80120da:	bdb0      	pop	{r4, r5, r7, pc}
 80120dc:	08021610 	.word	0x08021610

080120e0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	4618      	mov	r0, r3
 80120ec:	370c      	adds	r7, #12
 80120ee:	46bd      	mov	sp, r7
 80120f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f4:	4770      	bx	lr

080120f6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80120f6:	b480      	push	{r7}
 80120f8:	b083      	sub	sp, #12
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801210c:	b590      	push	{r4, r7, lr}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	4619      	mov	r1, r3
 801211c:	2008      	movs	r0, #8
 801211e:	f7f5 ffd1 	bl	80080c4 <_ZnwjPv>
 8012122:	4604      	mov	r4, r0
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff ffe6 	bl	80120f6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801212a:	4603      	mov	r3, r0
 801212c:	4619      	mov	r1, r3
 801212e:	4620      	mov	r0, r4
 8012130:	f7f6 fe38 	bl	8008da4 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8012134:	bf00      	nop
 8012136:	3714      	adds	r7, #20
 8012138:	46bd      	mov	sp, r7
 801213a:	bd90      	pop	{r4, r7, pc}

0801213c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 801213c:	b590      	push	{r4, r7, lr}
 801213e:	b087      	sub	sp, #28
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f000 f886 	bl	801225a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 801214e:	4604      	mov	r4, r0
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff feea 	bl	8011f2a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8012156:	4603      	mov	r3, r0
 8012158:	1ae2      	subs	r2, r4, r3
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	429a      	cmp	r2, r3
 801215e:	bf34      	ite	cc
 8012160:	2301      	movcc	r3, #1
 8012162:	2300      	movcs	r3, #0
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d002      	beq.n	8012170 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f00d f92d 	bl	801f3ca <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f7ff feda 	bl	8011f2a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8012176:	4604      	mov	r4, r0
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f7ff fed6 	bl	8011f2a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 801217e:	4603      	mov	r3, r0
 8012180:	613b      	str	r3, [r7, #16]
 8012182:	f107 0208 	add.w	r2, r7, #8
 8012186:	f107 0310 	add.w	r3, r7, #16
 801218a:	4611      	mov	r1, r2
 801218c:	4618      	mov	r0, r3
 801218e:	f000 f875 	bl	801227c <_ZSt3maxIjERKT_S2_S2_>
 8012192:	4603      	mov	r3, r0
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4423      	add	r3, r4
 8012198:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801219a:	68f8      	ldr	r0, [r7, #12]
 801219c:	f7ff fec5 	bl	8011f2a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 80121a0:	4602      	mov	r2, r0
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d306      	bcc.n	80121b6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 f856 	bl	801225a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 80121ae:	4602      	mov	r2, r0
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d904      	bls.n	80121c0 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f000 f84f 	bl	801225a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 80121bc:	4603      	mov	r3, r0
 80121be:	e000      	b.n	80121c2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 80121c0:	697b      	ldr	r3, [r7, #20]
      }
 80121c2:	4618      	mov	r0, r3
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd90      	pop	{r4, r7, pc}

080121ca <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80121ca:	b590      	push	{r4, r7, lr}
 80121cc:	b083      	sub	sp, #12
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
 80121d2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7ff fee8 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80121da:	4603      	mov	r3, r0
 80121dc:	681c      	ldr	r4, [r3, #0]
 80121de:	6838      	ldr	r0, [r7, #0]
 80121e0:	f7ff fee3 	bl	8011faa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80121e4:	4603      	mov	r3, r0
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	1ae3      	subs	r3, r4, r3
 80121ea:	10db      	asrs	r3, r3, #3
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd90      	pop	{r4, r7, pc}

080121f4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d006      	beq.n	8012212 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6839      	ldr	r1, [r7, #0]
 8012208:	4618      	mov	r0, r3
 801220a:	f000 f84b 	bl	80122a4 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 801220e:	4603      	mov	r3, r0
 8012210:	e000      	b.n	8012214 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 8012212:	2300      	movs	r3, #0
      }
 8012214:	4618      	mov	r0, r3
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
 8012228:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	68b9      	ldr	r1, [r7, #8]
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f000 f846 	bl	80122c2 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 8012236:	4603      	mov	r3, r0
      }
 8012238:	4618      	mov	r0, r3
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 801224a:	6839      	ldr	r1, [r7, #0]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f000 f855 	bl	80122fc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 8012252:	bf00      	nop
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801225a:	b580      	push	{r7, lr}
 801225c:	b082      	sub	sp, #8
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4618      	mov	r0, r3
 8012266:	f000 f86f 	bl	8012348 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801226a:	4603      	mov	r3, r0
 801226c:	4618      	mov	r0, r3
 801226e:	f000 f851 	bl	8012314 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 8012272:	4603      	mov	r3, r0
 8012274:	4618      	mov	r0, r3
 8012276:	3708      	adds	r7, #8
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}

0801227c <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d201      	bcs.n	8012296 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	e000      	b.n	8012298 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8012296:	687b      	ldr	r3, [r7, #4]
    }
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80122ae:	2200      	movs	r2, #0
 80122b0:	6839      	ldr	r1, [r7, #0]
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 f853 	bl	801235e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 80122b8:	4603      	mov	r3, r0
 80122ba:	4618      	mov	r0, r3
 80122bc:	3708      	adds	r7, #8
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80122c2:	b5b0      	push	{r4, r5, r7, lr}
 80122c4:	b084      	sub	sp, #16
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	60f8      	str	r0, [r7, #12]
 80122ca:	60b9      	str	r1, [r7, #8]
 80122cc:	607a      	str	r2, [r7, #4]
 80122ce:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f000 f86e 	bl	80123b2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80122d6:	4604      	mov	r4, r0
 80122d8:	68b8      	ldr	r0, [r7, #8]
 80122da:	f000 f86a 	bl	80123b2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80122de:	4605      	mov	r5, r0
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f866 	bl	80123b2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80122e6:	4602      	mov	r2, r0
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	4629      	mov	r1, r5
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 f86b 	bl	80123c8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 80122f2:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bdb0      	pop	{r4, r5, r7, pc}

080122fc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8012306:	6838      	ldr	r0, [r7, #0]
 8012308:	f7f6 faab 	bl	8008862 <_ZNSt10shared_ptrI6ModuleED1Ev>
 801230c:	bf00      	nop
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 801231c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8012320:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 f876 	bl	8012414 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 8012328:	4603      	mov	r3, r0
 801232a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801232c:	f107 0208 	add.w	r2, r7, #8
 8012330:	f107 030c 	add.w	r3, r7, #12
 8012334:	4611      	mov	r1, r2
 8012336:	4618      	mov	r0, r3
 8012338:	f000 f878 	bl	801242c <_ZSt3minIjERKT_S2_S2_>
 801233c:	4603      	mov	r3, r0
 801233e:	681b      	ldr	r3, [r3, #0]
      }
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	4618      	mov	r0, r3
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801235e:	b580      	push	{r7, lr}
 8012360:	b084      	sub	sp, #16
 8012362:	af00      	add	r7, sp, #0
 8012364:	60f8      	str	r0, [r7, #12]
 8012366:	60b9      	str	r1, [r7, #8]
 8012368:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	f000 f872 	bl	8012454 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 8012370:	4602      	mov	r2, r0
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	4293      	cmp	r3, r2
 8012376:	bf8c      	ite	hi
 8012378:	2301      	movhi	r3, #1
 801237a:	2300      	movls	r3, #0
 801237c:	b2db      	uxtb	r3, r3
 801237e:	2b00      	cmp	r3, #0
 8012380:	bf14      	ite	ne
 8012382:	2301      	movne	r3, #1
 8012384:	2300      	moveq	r3, #0
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b00      	cmp	r3, #0
 801238a:	d007      	beq.n	801239c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012392:	d301      	bcc.n	8012398 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8012394:	f00d f810 	bl	801f3b8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8012398:	f00d f80b 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	00db      	lsls	r3, r3, #3
 80123a0:	4618      	mov	r0, r3
 80123a2:	f00c fff3 	bl	801f38c <_Znwj>
 80123a6:	4603      	mov	r3, r0
 80123a8:	bf00      	nop
      }
 80123aa:	4618      	mov	r0, r3
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 80123b2:	b480      	push	{r7}
 80123b4:	b083      	sub	sp, #12
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	4618      	mov	r0, r3
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr

080123c8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80123c8:	b590      	push	{r4, r7, lr}
 80123ca:	b087      	sub	sp, #28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
 80123d4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80123da:	e012      	b.n	8012402 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80123dc:	6978      	ldr	r0, [r7, #20]
 80123de:	f7f9 f80c 	bl	800b3fa <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80123e2:	4604      	mov	r4, r0
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f7f9 f808 	bl	800b3fa <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80123ea:	4603      	mov	r3, r0
 80123ec:	683a      	ldr	r2, [r7, #0]
 80123ee:	4619      	mov	r1, r3
 80123f0:	4620      	mov	r0, r4
 80123f2:	f000 f83b 	bl	801246c <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3308      	adds	r3, #8
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	3308      	adds	r3, #8
 8012400:	617b      	str	r3, [r7, #20]
 8012402:	68fa      	ldr	r2, [r7, #12]
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	429a      	cmp	r2, r3
 8012408:	d1e8      	bne.n	80123dc <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 801240a:	697b      	ldr	r3, [r7, #20]
    }
 801240c:	4618      	mov	r0, r3
 801240e:	371c      	adds	r7, #28
 8012410:	46bd      	mov	sp, r7
 8012412:	bd90      	pop	{r4, r7, pc}

08012414 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f840 	bl	80124a2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 8012422:	4603      	mov	r3, r0
      }
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	429a      	cmp	r2, r3
 8012440:	d201      	bcs.n	8012446 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	e000      	b.n	8012448 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8012446:	687b      	ldr	r3, [r7, #4]
    }
 8012448:	4618      	mov	r0, r3
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr

08012454 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801245c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 8012460:	4618      	mov	r0, r3
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8012478:	68b8      	ldr	r0, [r7, #8]
 801247a:	f000 f81e 	bl	80124ba <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	68f9      	ldr	r1, [r7, #12]
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f823 	bl	80124d0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 801248a:	68b8      	ldr	r0, [r7, #8]
 801248c:	f7f8 ffb5 	bl	800b3fa <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 8012490:	4603      	mov	r3, r0
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff fed3 	bl	8012240 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 801249a:	bf00      	nop
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b082      	sub	sp, #8
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7ff ffd2 	bl	8012454 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 80124b0:	4603      	mov	r3, r0
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80124ba:	b480      	push	{r7}
 80124bc:	b083      	sub	sp, #12
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4618      	mov	r0, r3
 80124c6:	370c      	adds	r7, #12
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f80a 	bl	80124f6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 80124e2:	4603      	mov	r3, r0
 80124e4:	461a      	mov	r2, r3
 80124e6:	68b9      	ldr	r1, [r7, #8]
 80124e8:	68f8      	ldr	r0, [r7, #12]
 80124ea:	f000 f80f 	bl	801250c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 80124ee:	bf00      	nop
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80124f6:	b480      	push	{r7}
 80124f8:	b083      	sub	sp, #12
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	4618      	mov	r0, r3
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801250c:	b590      	push	{r4, r7, lr}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	4619      	mov	r1, r3
 801251c:	2008      	movs	r0, #8
 801251e:	f7f5 fdd1 	bl	80080c4 <_ZnwjPv>
 8012522:	4604      	mov	r4, r0
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff ffe6 	bl	80124f6 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 801252a:	4603      	mov	r3, r0
 801252c:	4619      	mov	r1, r3
 801252e:	4620      	mov	r0, r4
 8012530:	f000 f804 	bl	801253c <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 8012534:	bf00      	nop
 8012536:	3714      	adds	r7, #20
 8012538:	46bd      	mov	sp, r7
 801253a:	bd90      	pop	{r4, r7, pc}

0801253c <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 801253c:	b590      	push	{r4, r7, lr}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8012546:	687c      	ldr	r4, [r7, #4]
 8012548:	6838      	ldr	r0, [r7, #0]
 801254a:	f7ff ffb6 	bl	80124ba <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801254e:	4603      	mov	r3, r0
 8012550:	4619      	mov	r1, r3
 8012552:	4620      	mov	r0, r4
 8012554:	f000 f805 	bl	8012562 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4618      	mov	r0, r3
 801255c:	370c      	adds	r7, #12
 801255e:	46bd      	mov	sp, r7
 8012560:	bd90      	pop	{r4, r7, pc}

08012562 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8012562:	b580      	push	{r7, lr}
 8012564:	b082      	sub	sp, #8
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
 801256a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	3304      	adds	r3, #4
 8012578:	4618      	mov	r0, r3
 801257a:	f7f7 ff1d 	bl	800a3b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	1d1a      	adds	r2, r3, #4
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	3304      	adds	r3, #4
 8012586:	4619      	mov	r1, r3
 8012588:	4610      	mov	r0, r2
 801258a:	f7f8 fa2b 	bl	800a9e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	2200      	movs	r2, #0
 8012592:	601a      	str	r2, [r3, #0]
      }
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
	...

080125a0 <__NVIC_EnableIRQ>:
{
 80125a0:	b480      	push	{r7}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80125aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	db0b      	blt.n	80125ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80125b2:	88fb      	ldrh	r3, [r7, #6]
 80125b4:	f003 021f 	and.w	r2, r3, #31
 80125b8:	4907      	ldr	r1, [pc, #28]	@ (80125d8 <__NVIC_EnableIRQ+0x38>)
 80125ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125be:	095b      	lsrs	r3, r3, #5
 80125c0:	2001      	movs	r0, #1
 80125c2:	fa00 f202 	lsl.w	r2, r0, r2
 80125c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80125ca:	bf00      	nop
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
 80125d6:	bf00      	nop
 80125d8:	e000e100 	.word	0xe000e100

080125dc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 80125dc:	b590      	push	{r4, r7, lr}
 80125de:	b085      	sub	sp, #20
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	603b      	str	r3, [r7, #0]
 80125e8:	4613      	mov	r3, r2
 80125ea:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	605a      	str	r2, [r3, #4]
	irq(_irq),
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	88fa      	ldrh	r2, [r7, #6]
 80125f6:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6a3a      	ldr	r2, [r7, #32]
 8012602:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8012604:	2008      	movs	r0, #8
 8012606:	f00c fec1 	bl	801f38c <_Znwj>
 801260a:	4603      	mov	r3, r0
 801260c:	461c      	mov	r4, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012614:	68fa      	ldr	r2, [r7, #12]
 8012616:	4619      	mov	r1, r3
 8012618:	4620      	mov	r0, r4
 801261a:	f000 f8af 	bl	801277c <_ZN14TimerInterruptC1EiP8pruTimer>
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	601c      	str	r4, [r3, #0]

	startTimer();
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f000 f812 	bl	801264c <_ZN8pruTimer10startTimerEv>
}
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	bd90      	pop	{r4, r7, pc}

08012632 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b082      	sub	sp, #8
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	691b      	ldr	r3, [r3, #16]
 801263e:	4618      	mov	r0, r3
 8012640:	f7ff fbad 	bl	8011d9e <_ZN9pruThread6updateEv>
}
 8012644:	bf00      	nop
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801265c:	d116      	bne.n	801268c <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801265e:	483f      	ldr	r0, [pc, #252]	@ (801275c <_ZN8pruTimer10startTimerEv+0x110>)
 8012660:	f00d fc16 	bl	801fe90 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8012664:	4b3e      	ldr	r3, [pc, #248]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 8012666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801266a:	4a3d      	ldr	r2, [pc, #244]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 801266c:	f043 0301 	orr.w	r3, r3, #1
 8012670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8012674:	4b3a      	ldr	r3, [pc, #232]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 8012676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801267a:	f003 0301 	and.w	r3, r3, #1
 801267e:	613b      	str	r3, [r7, #16]
 8012680:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 8012682:	4b38      	ldr	r3, [pc, #224]	@ (8012764 <_ZN8pruTimer10startTimerEv+0x118>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	085b      	lsrs	r3, r3, #1
 8012688:	617b      	str	r3, [r7, #20]
 801268a:	e036      	b.n	80126fa <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	4a35      	ldr	r2, [pc, #212]	@ (8012768 <_ZN8pruTimer10startTimerEv+0x11c>)
 8012692:	4293      	cmp	r3, r2
 8012694:	d116      	bne.n	80126c4 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 8012696:	4835      	ldr	r0, [pc, #212]	@ (801276c <_ZN8pruTimer10startTimerEv+0x120>)
 8012698:	f00d fbfa 	bl	801fe90 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 801269c:	4b30      	ldr	r3, [pc, #192]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 801269e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80126a2:	4a2f      	ldr	r2, [pc, #188]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 80126a4:	f043 0302 	orr.w	r3, r3, #2
 80126a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80126ac:	4b2c      	ldr	r3, [pc, #176]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 80126ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80126b2:	f003 0302 	and.w	r3, r3, #2
 80126b6:	60fb      	str	r3, [r7, #12]
 80126b8:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80126ba:	4b2a      	ldr	r3, [pc, #168]	@ (8012764 <_ZN8pruTimer10startTimerEv+0x118>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	085b      	lsrs	r3, r3, #1
 80126c0:	617b      	str	r3, [r7, #20]
 80126c2:	e01a      	b.n	80126fa <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	4a29      	ldr	r2, [pc, #164]	@ (8012770 <_ZN8pruTimer10startTimerEv+0x124>)
 80126ca:	4293      	cmp	r3, r2
 80126cc:	d115      	bne.n	80126fa <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 80126ce:	4829      	ldr	r0, [pc, #164]	@ (8012774 <_ZN8pruTimer10startTimerEv+0x128>)
 80126d0:	f00d fbde 	bl	801fe90 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80126d4:	4b22      	ldr	r3, [pc, #136]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 80126d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80126da:	4a21      	ldr	r2, [pc, #132]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 80126dc:	f043 0304 	orr.w	r3, r3, #4
 80126e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80126e4:	4b1e      	ldr	r3, [pc, #120]	@ (8012760 <_ZN8pruTimer10startTimerEv+0x114>)
 80126e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80126ea:	f003 0304 	and.w	r3, r3, #4
 80126ee:	60bb      	str	r3, [r7, #8]
 80126f0:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 80126f2:	4b1c      	ldr	r3, [pc, #112]	@ (8012764 <_ZN8pruTimer10startTimerEv+0x118>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	085b      	lsrs	r3, r3, #1
 80126f8:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	697a      	ldr	r2, [r7, #20]
 8012716:	fbb2 f2f3 	udiv	r2, r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	3a01      	subs	r2, #1
 8012720:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	2201      	movs	r2, #1
 8012728:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	2201      	movs	r2, #1
 8012730:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	f042 0201 	orr.w	r2, r2, #1
 8012740:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff ff29 	bl	80125a0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801274e:	480a      	ldr	r0, [pc, #40]	@ (8012778 <_ZN8pruTimer10startTimerEv+0x12c>)
 8012750:	f00d fc0e 	bl	801ff70 <puts>
}
 8012754:	bf00      	nop
 8012756:	3718      	adds	r7, #24
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	0802162c 	.word	0x0802162c
 8012760:	58024400 	.word	0x58024400
 8012764:	2400001c 	.word	0x2400001c
 8012768:	40000400 	.word	0x40000400
 801276c:	08021640 	.word	0x08021640
 8012770:	40000800 	.word	0x40000800
 8012774:	08021654 	.word	0x08021654
 8012778:	08021668 	.word	0x08021668

0801277c <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	4618      	mov	r0, r3
 801278c:	f7ef ff86 	bl	800269c <_ZN9InterruptC1Ev>
 8012790:	4a07      	ldr	r2, [pc, #28]	@ (80127b0 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	4619      	mov	r1, r3
 80127a0:	68b8      	ldr	r0, [r7, #8]
 80127a2:	f7ef ff8b 	bl	80026bc <_ZN9Interrupt8RegisterEiPS_>
}
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	08021a08 	.word	0x08021a08

080127b4 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7ff ff36 	bl	8012632 <_ZN8pruTimer9timerTickEv>
}
 80127c6:	bf00      	nop
 80127c8:	3708      	adds	r7, #8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
	...

080127d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80127d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80127d4:	f7f9 fb0a 	bl	800bdec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80127d8:	480c      	ldr	r0, [pc, #48]	@ (801280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80127da:	490d      	ldr	r1, [pc, #52]	@ (8012810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80127dc:	4a0d      	ldr	r2, [pc, #52]	@ (8012814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80127de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80127e0:	e002      	b.n	80127e8 <LoopCopyDataInit>

080127e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80127e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80127e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80127e6:	3304      	adds	r3, #4

080127e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80127e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80127ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80127ec:	d3f9      	bcc.n	80127e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80127ee:	4a0a      	ldr	r2, [pc, #40]	@ (8012818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80127f0:	4c0a      	ldr	r4, [pc, #40]	@ (801281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80127f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80127f4:	e001      	b.n	80127fa <LoopFillZerobss>

080127f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80127f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80127f8:	3204      	adds	r2, #4

080127fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80127fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80127fc:	d3fb      	bcc.n	80127f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80127fe:	f00d fd59 	bl	80202b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012802:	f7f5 f9b1 	bl	8007b68 <main>
  bx  lr
 8012806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012808:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801280c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8012810:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8012814:	08021dac 	.word	0x08021dac
  ldr r2, =_sbss
 8012818:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801281c:	24000c0c 	.word	0x24000c0c

08012820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012820:	e7fe      	b.n	8012820 <ADC3_IRQHandler>
	...

08012824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801282a:	2003      	movs	r0, #3
 801282c:	f000 f9a2 	bl	8012b74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012830:	f003 fdc8 	bl	80163c4 <HAL_RCC_GetSysClockFreq>
 8012834:	4602      	mov	r2, r0
 8012836:	4b15      	ldr	r3, [pc, #84]	@ (801288c <HAL_Init+0x68>)
 8012838:	699b      	ldr	r3, [r3, #24]
 801283a:	0a1b      	lsrs	r3, r3, #8
 801283c:	f003 030f 	and.w	r3, r3, #15
 8012840:	4913      	ldr	r1, [pc, #76]	@ (8012890 <HAL_Init+0x6c>)
 8012842:	5ccb      	ldrb	r3, [r1, r3]
 8012844:	f003 031f 	and.w	r3, r3, #31
 8012848:	fa22 f303 	lsr.w	r3, r2, r3
 801284c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801284e:	4b0f      	ldr	r3, [pc, #60]	@ (801288c <HAL_Init+0x68>)
 8012850:	699b      	ldr	r3, [r3, #24]
 8012852:	f003 030f 	and.w	r3, r3, #15
 8012856:	4a0e      	ldr	r2, [pc, #56]	@ (8012890 <HAL_Init+0x6c>)
 8012858:	5cd3      	ldrb	r3, [r2, r3]
 801285a:	f003 031f 	and.w	r3, r3, #31
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	fa22 f303 	lsr.w	r3, r2, r3
 8012864:	4a0b      	ldr	r2, [pc, #44]	@ (8012894 <HAL_Init+0x70>)
 8012866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012868:	4a0b      	ldr	r2, [pc, #44]	@ (8012898 <HAL_Init+0x74>)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801286e:	200f      	movs	r0, #15
 8012870:	f000 f814 	bl	801289c <HAL_InitTick>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d001      	beq.n	801287e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801287a:	2301      	movs	r3, #1
 801287c:	e002      	b.n	8012884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801287e:	f7f9 f89b 	bl	800b9b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012882:	2300      	movs	r3, #0
}
 8012884:	4618      	mov	r0, r3
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	58024400 	.word	0x58024400
 8012890:	08021864 	.word	0x08021864
 8012894:	24000020 	.word	0x24000020
 8012898:	2400001c 	.word	0x2400001c

0801289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80128a4:	4b15      	ldr	r3, [pc, #84]	@ (80128fc <HAL_InitTick+0x60>)
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d101      	bne.n	80128b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80128ac:	2301      	movs	r3, #1
 80128ae:	e021      	b.n	80128f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80128b0:	4b13      	ldr	r3, [pc, #76]	@ (8012900 <HAL_InitTick+0x64>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	4b11      	ldr	r3, [pc, #68]	@ (80128fc <HAL_InitTick+0x60>)
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	4619      	mov	r1, r3
 80128ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80128be:	fbb3 f3f1 	udiv	r3, r3, r1
 80128c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80128c6:	4618      	mov	r0, r3
 80128c8:	f000 f98b 	bl	8012be2 <HAL_SYSTICK_Config>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80128d2:	2301      	movs	r3, #1
 80128d4:	e00e      	b.n	80128f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2b0f      	cmp	r3, #15
 80128da:	d80a      	bhi.n	80128f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80128dc:	2200      	movs	r2, #0
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	f04f 30ff 	mov.w	r0, #4294967295
 80128e4:	f000 f951 	bl	8012b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80128e8:	4a06      	ldr	r2, [pc, #24]	@ (8012904 <HAL_InitTick+0x68>)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	e000      	b.n	80128f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80128f2:	2301      	movs	r3, #1
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	24000028 	.word	0x24000028
 8012900:	2400001c 	.word	0x2400001c
 8012904:	24000024 	.word	0x24000024

08012908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012908:	b480      	push	{r7}
 801290a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801290c:	4b06      	ldr	r3, [pc, #24]	@ (8012928 <HAL_IncTick+0x20>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	461a      	mov	r2, r3
 8012912:	4b06      	ldr	r3, [pc, #24]	@ (801292c <HAL_IncTick+0x24>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4413      	add	r3, r2
 8012918:	4a04      	ldr	r2, [pc, #16]	@ (801292c <HAL_IncTick+0x24>)
 801291a:	6013      	str	r3, [r2, #0]
}
 801291c:	bf00      	nop
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	24000028 	.word	0x24000028
 801292c:	24000414 	.word	0x24000414

08012930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012930:	b480      	push	{r7}
 8012932:	af00      	add	r7, sp, #0
  return uwTick;
 8012934:	4b03      	ldr	r3, [pc, #12]	@ (8012944 <HAL_GetTick+0x14>)
 8012936:	681b      	ldr	r3, [r3, #0]
}
 8012938:	4618      	mov	r0, r3
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	24000414 	.word	0x24000414

08012948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012950:	f7ff ffee 	bl	8012930 <HAL_GetTick>
 8012954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012960:	d005      	beq.n	801296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012962:	4b0a      	ldr	r3, [pc, #40]	@ (801298c <HAL_Delay+0x44>)
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	461a      	mov	r2, r3
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	4413      	add	r3, r2
 801296c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801296e:	bf00      	nop
 8012970:	f7ff ffde 	bl	8012930 <HAL_GetTick>
 8012974:	4602      	mov	r2, r0
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	1ad3      	subs	r3, r2, r3
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	429a      	cmp	r2, r3
 801297e:	d8f7      	bhi.n	8012970 <HAL_Delay+0x28>
  {
  }
}
 8012980:	bf00      	nop
 8012982:	bf00      	nop
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	24000028 	.word	0x24000028

08012990 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012990:	b480      	push	{r7}
 8012992:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012994:	4b03      	ldr	r3, [pc, #12]	@ (80129a4 <HAL_GetREVID+0x14>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	0c1b      	lsrs	r3, r3, #16
}
 801299a:	4618      	mov	r0, r3
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr
 80129a4:	5c001000 	.word	0x5c001000

080129a8 <__NVIC_SetPriorityGrouping>:
{
 80129a8:	b480      	push	{r7}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f003 0307 	and.w	r3, r3, #7
 80129b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80129b8:	4b0b      	ldr	r3, [pc, #44]	@ (80129e8 <__NVIC_SetPriorityGrouping+0x40>)
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80129be:	68ba      	ldr	r2, [r7, #8]
 80129c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80129c4:	4013      	ands	r3, r2
 80129c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80129d0:	4b06      	ldr	r3, [pc, #24]	@ (80129ec <__NVIC_SetPriorityGrouping+0x44>)
 80129d2:	4313      	orrs	r3, r2
 80129d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80129d6:	4a04      	ldr	r2, [pc, #16]	@ (80129e8 <__NVIC_SetPriorityGrouping+0x40>)
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	60d3      	str	r3, [r2, #12]
}
 80129dc:	bf00      	nop
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr
 80129e8:	e000ed00 	.word	0xe000ed00
 80129ec:	05fa0000 	.word	0x05fa0000

080129f0 <__NVIC_GetPriorityGrouping>:
{
 80129f0:	b480      	push	{r7}
 80129f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80129f4:	4b04      	ldr	r3, [pc, #16]	@ (8012a08 <__NVIC_GetPriorityGrouping+0x18>)
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	0a1b      	lsrs	r3, r3, #8
 80129fa:	f003 0307 	and.w	r3, r3, #7
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr
 8012a08:	e000ed00 	.word	0xe000ed00

08012a0c <__NVIC_EnableIRQ>:
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	db0b      	blt.n	8012a36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a1e:	88fb      	ldrh	r3, [r7, #6]
 8012a20:	f003 021f 	and.w	r2, r3, #31
 8012a24:	4907      	ldr	r1, [pc, #28]	@ (8012a44 <__NVIC_EnableIRQ+0x38>)
 8012a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a2a:	095b      	lsrs	r3, r3, #5
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8012a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012a36:	bf00      	nop
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	e000e100 	.word	0xe000e100

08012a48 <__NVIC_SetPriority>:
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	4603      	mov	r3, r0
 8012a50:	6039      	str	r1, [r7, #0]
 8012a52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	db0a      	blt.n	8012a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	490c      	ldr	r1, [pc, #48]	@ (8012a94 <__NVIC_SetPriority+0x4c>)
 8012a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a66:	0112      	lsls	r2, r2, #4
 8012a68:	b2d2      	uxtb	r2, r2
 8012a6a:	440b      	add	r3, r1
 8012a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012a70:	e00a      	b.n	8012a88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	b2da      	uxtb	r2, r3
 8012a76:	4908      	ldr	r1, [pc, #32]	@ (8012a98 <__NVIC_SetPriority+0x50>)
 8012a78:	88fb      	ldrh	r3, [r7, #6]
 8012a7a:	f003 030f 	and.w	r3, r3, #15
 8012a7e:	3b04      	subs	r3, #4
 8012a80:	0112      	lsls	r2, r2, #4
 8012a82:	b2d2      	uxtb	r2, r2
 8012a84:	440b      	add	r3, r1
 8012a86:	761a      	strb	r2, [r3, #24]
}
 8012a88:	bf00      	nop
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr
 8012a94:	e000e100 	.word	0xe000e100
 8012a98:	e000ed00 	.word	0xe000ed00

08012a9c <NVIC_EncodePriority>:
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b089      	sub	sp, #36	@ 0x24
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f003 0307 	and.w	r3, r3, #7
 8012aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	f1c3 0307 	rsb	r3, r3, #7
 8012ab6:	2b04      	cmp	r3, #4
 8012ab8:	bf28      	it	cs
 8012aba:	2304      	movcs	r3, #4
 8012abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012abe:	69fb      	ldr	r3, [r7, #28]
 8012ac0:	3304      	adds	r3, #4
 8012ac2:	2b06      	cmp	r3, #6
 8012ac4:	d902      	bls.n	8012acc <NVIC_EncodePriority+0x30>
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	3b03      	subs	r3, #3
 8012aca:	e000      	b.n	8012ace <NVIC_EncodePriority+0x32>
 8012acc:	2300      	movs	r3, #0
 8012ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad4:	69bb      	ldr	r3, [r7, #24]
 8012ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8012ada:	43da      	mvns	r2, r3
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	401a      	ands	r2, r3
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	fa01 f303 	lsl.w	r3, r1, r3
 8012aee:	43d9      	mvns	r1, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012af4:	4313      	orrs	r3, r2
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3724      	adds	r7, #36	@ 0x24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr
	...

08012b04 <__NVIC_SystemReset>:
{
 8012b04:	b480      	push	{r7}
 8012b06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012b08:	f3bf 8f4f 	dsb	sy
}
 8012b0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012b0e:	4b06      	ldr	r3, [pc, #24]	@ (8012b28 <__NVIC_SystemReset+0x24>)
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012b16:	4904      	ldr	r1, [pc, #16]	@ (8012b28 <__NVIC_SystemReset+0x24>)
 8012b18:	4b04      	ldr	r3, [pc, #16]	@ (8012b2c <__NVIC_SystemReset+0x28>)
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b1e:	f3bf 8f4f 	dsb	sy
}
 8012b22:	bf00      	nop
    __NOP();
 8012b24:	bf00      	nop
 8012b26:	e7fd      	b.n	8012b24 <__NVIC_SystemReset+0x20>
 8012b28:	e000ed00 	.word	0xe000ed00
 8012b2c:	05fa0004 	.word	0x05fa0004

08012b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012b40:	d301      	bcc.n	8012b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012b42:	2301      	movs	r3, #1
 8012b44:	e00f      	b.n	8012b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012b46:	4a0a      	ldr	r2, [pc, #40]	@ (8012b70 <SysTick_Config+0x40>)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012b4e:	210f      	movs	r1, #15
 8012b50:	f04f 30ff 	mov.w	r0, #4294967295
 8012b54:	f7ff ff78 	bl	8012a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012b58:	4b05      	ldr	r3, [pc, #20]	@ (8012b70 <SysTick_Config+0x40>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012b5e:	4b04      	ldr	r3, [pc, #16]	@ (8012b70 <SysTick_Config+0x40>)
 8012b60:	2207      	movs	r2, #7
 8012b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	e000e010 	.word	0xe000e010

08012b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff ff13 	bl	80129a8 <__NVIC_SetPriorityGrouping>
}
 8012b82:	bf00      	nop
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b086      	sub	sp, #24
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	4603      	mov	r3, r0
 8012b92:	60b9      	str	r1, [r7, #8]
 8012b94:	607a      	str	r2, [r7, #4]
 8012b96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012b98:	f7ff ff2a 	bl	80129f0 <__NVIC_GetPriorityGrouping>
 8012b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	68b9      	ldr	r1, [r7, #8]
 8012ba2:	6978      	ldr	r0, [r7, #20]
 8012ba4:	f7ff ff7a 	bl	8012a9c <NVIC_EncodePriority>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7ff ff49 	bl	8012a48 <__NVIC_SetPriority>
}
 8012bb6:	bf00      	nop
 8012bb8:	3718      	adds	r7, #24
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}

08012bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff ff1d 	bl	8012a0c <__NVIC_EnableIRQ>
}
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8012bde:	f7ff ff91 	bl	8012b04 <__NVIC_SystemReset>

08012be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b082      	sub	sp, #8
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7ff ffa0 	bl	8012b30 <SysTick_Config>
 8012bf0:	4603      	mov	r3, r0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
	...

08012bfc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8012c00:	f3bf 8f5f 	dmb	sy
}
 8012c04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8012c06:	4b07      	ldr	r3, [pc, #28]	@ (8012c24 <HAL_MPU_Disable+0x28>)
 8012c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0a:	4a06      	ldr	r2, [pc, #24]	@ (8012c24 <HAL_MPU_Disable+0x28>)
 8012c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012c10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8012c12:	4b05      	ldr	r3, [pc, #20]	@ (8012c28 <HAL_MPU_Disable+0x2c>)
 8012c14:	2200      	movs	r2, #0
 8012c16:	605a      	str	r2, [r3, #4]
}
 8012c18:	bf00      	nop
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c20:	4770      	bx	lr
 8012c22:	bf00      	nop
 8012c24:	e000ed00 	.word	0xe000ed00
 8012c28:	e000ed90 	.word	0xe000ed90

08012c2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8012c34:	4a0b      	ldr	r2, [pc, #44]	@ (8012c64 <HAL_MPU_Enable+0x38>)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f043 0301 	orr.w	r3, r3, #1
 8012c3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8012c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8012c68 <HAL_MPU_Enable+0x3c>)
 8012c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c42:	4a09      	ldr	r2, [pc, #36]	@ (8012c68 <HAL_MPU_Enable+0x3c>)
 8012c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012c48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012c4a:	f3bf 8f4f 	dsb	sy
}
 8012c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012c50:	f3bf 8f6f 	isb	sy
}
 8012c54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8012c56:	bf00      	nop
 8012c58:	370c      	adds	r7, #12
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	e000ed90 	.word	0xe000ed90
 8012c68:	e000ed00 	.word	0xe000ed00

08012c6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	785a      	ldrb	r2, [r3, #1]
 8012c78:	4b1b      	ldr	r3, [pc, #108]	@ (8012ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8012c7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8012c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8012c7e:	691b      	ldr	r3, [r3, #16]
 8012c80:	4a19      	ldr	r2, [pc, #100]	@ (8012ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8012c82:	f023 0301 	bic.w	r3, r3, #1
 8012c86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8012c88:	4a17      	ldr	r2, [pc, #92]	@ (8012ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7b1b      	ldrb	r3, [r3, #12]
 8012c94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	7adb      	ldrb	r3, [r3, #11]
 8012c9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	7a9b      	ldrb	r3, [r3, #10]
 8012ca2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	7b5b      	ldrb	r3, [r3, #13]
 8012caa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8012cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	7b9b      	ldrb	r3, [r3, #14]
 8012cb2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	7bdb      	ldrb	r3, [r3, #15]
 8012cba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8012cbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	7a5b      	ldrb	r3, [r3, #9]
 8012cc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012cc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	7a1b      	ldrb	r3, [r3, #8]
 8012cca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8012ccc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	7812      	ldrb	r2, [r2, #0]
 8012cd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012cd4:	4a04      	ldr	r2, [pc, #16]	@ (8012ce8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012cd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012cd8:	6113      	str	r3, [r2, #16]
}
 8012cda:	bf00      	nop
 8012cdc:	370c      	adds	r7, #12
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	e000ed90 	.word	0xe000ed90

08012cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8012cf4:	f7ff fe1c 	bl	8012930 <HAL_GetTick>
 8012cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8012d00:	2301      	movs	r3, #1
 8012d02:	e316      	b.n	8013332 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4a66      	ldr	r2, [pc, #408]	@ (8012ea4 <HAL_DMA_Init+0x1b8>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d04a      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a65      	ldr	r2, [pc, #404]	@ (8012ea8 <HAL_DMA_Init+0x1bc>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d045      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a63      	ldr	r2, [pc, #396]	@ (8012eac <HAL_DMA_Init+0x1c0>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d040      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a62      	ldr	r2, [pc, #392]	@ (8012eb0 <HAL_DMA_Init+0x1c4>)
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d03b      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a60      	ldr	r2, [pc, #384]	@ (8012eb4 <HAL_DMA_Init+0x1c8>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d036      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8012eb8 <HAL_DMA_Init+0x1cc>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d031      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a5d      	ldr	r2, [pc, #372]	@ (8012ebc <HAL_DMA_Init+0x1d0>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d02c      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8012ec0 <HAL_DMA_Init+0x1d4>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d027      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4a5a      	ldr	r2, [pc, #360]	@ (8012ec4 <HAL_DMA_Init+0x1d8>)
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d022      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4a59      	ldr	r2, [pc, #356]	@ (8012ec8 <HAL_DMA_Init+0x1dc>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d01d      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a57      	ldr	r2, [pc, #348]	@ (8012ecc <HAL_DMA_Init+0x1e0>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d018      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	4a56      	ldr	r2, [pc, #344]	@ (8012ed0 <HAL_DMA_Init+0x1e4>)
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	d013      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4a54      	ldr	r2, [pc, #336]	@ (8012ed4 <HAL_DMA_Init+0x1e8>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d00e      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a53      	ldr	r2, [pc, #332]	@ (8012ed8 <HAL_DMA_Init+0x1ec>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d009      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a51      	ldr	r2, [pc, #324]	@ (8012edc <HAL_DMA_Init+0x1f0>)
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d004      	beq.n	8012da4 <HAL_DMA_Init+0xb8>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	4a50      	ldr	r2, [pc, #320]	@ (8012ee0 <HAL_DMA_Init+0x1f4>)
 8012da0:	4293      	cmp	r3, r2
 8012da2:	d101      	bne.n	8012da8 <HAL_DMA_Init+0xbc>
 8012da4:	2301      	movs	r3, #1
 8012da6:	e000      	b.n	8012daa <HAL_DMA_Init+0xbe>
 8012da8:	2300      	movs	r3, #0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	f000 813b 	beq.w	8013026 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2202      	movs	r2, #2
 8012db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a37      	ldr	r2, [pc, #220]	@ (8012ea4 <HAL_DMA_Init+0x1b8>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d04a      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a36      	ldr	r2, [pc, #216]	@ (8012ea8 <HAL_DMA_Init+0x1bc>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d045      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a34      	ldr	r2, [pc, #208]	@ (8012eac <HAL_DMA_Init+0x1c0>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d040      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4a33      	ldr	r2, [pc, #204]	@ (8012eb0 <HAL_DMA_Init+0x1c4>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d03b      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a31      	ldr	r2, [pc, #196]	@ (8012eb4 <HAL_DMA_Init+0x1c8>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d036      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a30      	ldr	r2, [pc, #192]	@ (8012eb8 <HAL_DMA_Init+0x1cc>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d031      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a2e      	ldr	r2, [pc, #184]	@ (8012ebc <HAL_DMA_Init+0x1d0>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d02c      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8012ec0 <HAL_DMA_Init+0x1d4>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d027      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a2b      	ldr	r2, [pc, #172]	@ (8012ec4 <HAL_DMA_Init+0x1d8>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d022      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ec8 <HAL_DMA_Init+0x1dc>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d01d      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a28      	ldr	r2, [pc, #160]	@ (8012ecc <HAL_DMA_Init+0x1e0>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d018      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a27      	ldr	r2, [pc, #156]	@ (8012ed0 <HAL_DMA_Init+0x1e4>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d013      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a25      	ldr	r2, [pc, #148]	@ (8012ed4 <HAL_DMA_Init+0x1e8>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d00e      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4a24      	ldr	r2, [pc, #144]	@ (8012ed8 <HAL_DMA_Init+0x1ec>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d009      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4a22      	ldr	r2, [pc, #136]	@ (8012edc <HAL_DMA_Init+0x1f0>)
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d004      	beq.n	8012e60 <HAL_DMA_Init+0x174>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4a21      	ldr	r2, [pc, #132]	@ (8012ee0 <HAL_DMA_Init+0x1f4>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d108      	bne.n	8012e72 <HAL_DMA_Init+0x186>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f022 0201 	bic.w	r2, r2, #1
 8012e6e:	601a      	str	r2, [r3, #0]
 8012e70:	e007      	b.n	8012e82 <HAL_DMA_Init+0x196>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f022 0201 	bic.w	r2, r2, #1
 8012e80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8012e82:	e02f      	b.n	8012ee4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012e84:	f7ff fd54 	bl	8012930 <HAL_GetTick>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	2b05      	cmp	r3, #5
 8012e90:	d928      	bls.n	8012ee4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2220      	movs	r2, #32
 8012e96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2203      	movs	r2, #3
 8012e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	e246      	b.n	8013332 <HAL_DMA_Init+0x646>
 8012ea4:	40020010 	.word	0x40020010
 8012ea8:	40020028 	.word	0x40020028
 8012eac:	40020040 	.word	0x40020040
 8012eb0:	40020058 	.word	0x40020058
 8012eb4:	40020070 	.word	0x40020070
 8012eb8:	40020088 	.word	0x40020088
 8012ebc:	400200a0 	.word	0x400200a0
 8012ec0:	400200b8 	.word	0x400200b8
 8012ec4:	40020410 	.word	0x40020410
 8012ec8:	40020428 	.word	0x40020428
 8012ecc:	40020440 	.word	0x40020440
 8012ed0:	40020458 	.word	0x40020458
 8012ed4:	40020470 	.word	0x40020470
 8012ed8:	40020488 	.word	0x40020488
 8012edc:	400204a0 	.word	0x400204a0
 8012ee0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f003 0301 	and.w	r3, r3, #1
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d1c8      	bne.n	8012e84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012efa:	697a      	ldr	r2, [r7, #20]
 8012efc:	4b83      	ldr	r3, [pc, #524]	@ (801310c <HAL_DMA_Init+0x420>)
 8012efe:	4013      	ands	r3, r2
 8012f00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8012f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	691b      	ldr	r3, [r3, #16]
 8012f10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	699b      	ldr	r3, [r3, #24]
 8012f1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012f22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6a1b      	ldr	r3, [r3, #32]
 8012f28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8012f2a:	697a      	ldr	r2, [r7, #20]
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f34:	2b04      	cmp	r3, #4
 8012f36:	d107      	bne.n	8012f48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f40:	4313      	orrs	r3, r2
 8012f42:	697a      	ldr	r2, [r7, #20]
 8012f44:	4313      	orrs	r3, r2
 8012f46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8012f48:	4b71      	ldr	r3, [pc, #452]	@ (8013110 <HAL_DMA_Init+0x424>)
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	4b71      	ldr	r3, [pc, #452]	@ (8013114 <HAL_DMA_Init+0x428>)
 8012f4e:	4013      	ands	r3, r2
 8012f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f54:	d328      	bcc.n	8012fa8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	2b28      	cmp	r3, #40	@ 0x28
 8012f5c:	d903      	bls.n	8012f66 <HAL_DMA_Init+0x27a>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f64:	d917      	bls.n	8012f96 <HAL_DMA_Init+0x2aa>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f6c:	d903      	bls.n	8012f76 <HAL_DMA_Init+0x28a>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	2b42      	cmp	r3, #66	@ 0x42
 8012f74:	d90f      	bls.n	8012f96 <HAL_DMA_Init+0x2aa>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	2b46      	cmp	r3, #70	@ 0x46
 8012f7c:	d903      	bls.n	8012f86 <HAL_DMA_Init+0x29a>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	2b48      	cmp	r3, #72	@ 0x48
 8012f84:	d907      	bls.n	8012f96 <HAL_DMA_Init+0x2aa>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8012f8c:	d905      	bls.n	8012f9a <HAL_DMA_Init+0x2ae>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	2b52      	cmp	r3, #82	@ 0x52
 8012f94:	d801      	bhi.n	8012f9a <HAL_DMA_Init+0x2ae>
 8012f96:	2301      	movs	r3, #1
 8012f98:	e000      	b.n	8012f9c <HAL_DMA_Init+0x2b0>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d003      	beq.n	8012fa8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012fa6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	697a      	ldr	r2, [r7, #20]
 8012fae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	f023 0307 	bic.w	r3, r3, #7
 8012fbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fc4:	697a      	ldr	r2, [r7, #20]
 8012fc6:	4313      	orrs	r3, r2
 8012fc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	d117      	bne.n	8013002 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fd6:	697a      	ldr	r2, [r7, #20]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00e      	beq.n	8013002 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f001 fc23 	bl	8014830 <DMA_CheckFifoParam>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d008      	beq.n	8013002 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2240      	movs	r2, #64	@ 0x40
 8012ff4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8012ffe:	2301      	movs	r3, #1
 8013000:	e197      	b.n	8013332 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	697a      	ldr	r2, [r7, #20]
 8013008:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f001 fb5e 	bl	80146cc <DMA_CalcBaseAndBitshift>
 8013010:	4603      	mov	r3, r0
 8013012:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013018:	f003 031f 	and.w	r3, r3, #31
 801301c:	223f      	movs	r2, #63	@ 0x3f
 801301e:	409a      	lsls	r2, r3
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	609a      	str	r2, [r3, #8]
 8013024:	e0cd      	b.n	80131c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4a3b      	ldr	r2, [pc, #236]	@ (8013118 <HAL_DMA_Init+0x42c>)
 801302c:	4293      	cmp	r3, r2
 801302e:	d022      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4a39      	ldr	r2, [pc, #228]	@ (801311c <HAL_DMA_Init+0x430>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d01d      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a38      	ldr	r2, [pc, #224]	@ (8013120 <HAL_DMA_Init+0x434>)
 8013040:	4293      	cmp	r3, r2
 8013042:	d018      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	4a36      	ldr	r2, [pc, #216]	@ (8013124 <HAL_DMA_Init+0x438>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d013      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4a35      	ldr	r2, [pc, #212]	@ (8013128 <HAL_DMA_Init+0x43c>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d00e      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4a33      	ldr	r2, [pc, #204]	@ (801312c <HAL_DMA_Init+0x440>)
 801305e:	4293      	cmp	r3, r2
 8013060:	d009      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	4a32      	ldr	r2, [pc, #200]	@ (8013130 <HAL_DMA_Init+0x444>)
 8013068:	4293      	cmp	r3, r2
 801306a:	d004      	beq.n	8013076 <HAL_DMA_Init+0x38a>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	4a30      	ldr	r2, [pc, #192]	@ (8013134 <HAL_DMA_Init+0x448>)
 8013072:	4293      	cmp	r3, r2
 8013074:	d101      	bne.n	801307a <HAL_DMA_Init+0x38e>
 8013076:	2301      	movs	r3, #1
 8013078:	e000      	b.n	801307c <HAL_DMA_Init+0x390>
 801307a:	2300      	movs	r3, #0
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 8097 	beq.w	80131b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4a24      	ldr	r2, [pc, #144]	@ (8013118 <HAL_DMA_Init+0x42c>)
 8013088:	4293      	cmp	r3, r2
 801308a:	d021      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a22      	ldr	r2, [pc, #136]	@ (801311c <HAL_DMA_Init+0x430>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d01c      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4a21      	ldr	r2, [pc, #132]	@ (8013120 <HAL_DMA_Init+0x434>)
 801309c:	4293      	cmp	r3, r2
 801309e:	d017      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4a1f      	ldr	r2, [pc, #124]	@ (8013124 <HAL_DMA_Init+0x438>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d012      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	4a1e      	ldr	r2, [pc, #120]	@ (8013128 <HAL_DMA_Init+0x43c>)
 80130b0:	4293      	cmp	r3, r2
 80130b2:	d00d      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a1c      	ldr	r2, [pc, #112]	@ (801312c <HAL_DMA_Init+0x440>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d008      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	4a1b      	ldr	r2, [pc, #108]	@ (8013130 <HAL_DMA_Init+0x444>)
 80130c4:	4293      	cmp	r3, r2
 80130c6:	d003      	beq.n	80130d0 <HAL_DMA_Init+0x3e4>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4a19      	ldr	r2, [pc, #100]	@ (8013134 <HAL_DMA_Init+0x448>)
 80130ce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2202      	movs	r2, #2
 80130d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80130e8:	697a      	ldr	r2, [r7, #20]
 80130ea:	4b13      	ldr	r3, [pc, #76]	@ (8013138 <HAL_DMA_Init+0x44c>)
 80130ec:	4013      	ands	r3, r2
 80130ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	2b40      	cmp	r3, #64	@ 0x40
 80130f6:	d021      	beq.n	801313c <HAL_DMA_Init+0x450>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	2b80      	cmp	r3, #128	@ 0x80
 80130fe:	d102      	bne.n	8013106 <HAL_DMA_Init+0x41a>
 8013100:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013104:	e01b      	b.n	801313e <HAL_DMA_Init+0x452>
 8013106:	2300      	movs	r3, #0
 8013108:	e019      	b.n	801313e <HAL_DMA_Init+0x452>
 801310a:	bf00      	nop
 801310c:	fe10803f 	.word	0xfe10803f
 8013110:	5c001000 	.word	0x5c001000
 8013114:	ffff0000 	.word	0xffff0000
 8013118:	58025408 	.word	0x58025408
 801311c:	5802541c 	.word	0x5802541c
 8013120:	58025430 	.word	0x58025430
 8013124:	58025444 	.word	0x58025444
 8013128:	58025458 	.word	0x58025458
 801312c:	5802546c 	.word	0x5802546c
 8013130:	58025480 	.word	0x58025480
 8013134:	58025494 	.word	0x58025494
 8013138:	fffe000f 	.word	0xfffe000f
 801313c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	68d2      	ldr	r2, [r2, #12]
 8013142:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8013144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801314c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	695b      	ldr	r3, [r3, #20]
 8013152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8013154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	699b      	ldr	r3, [r3, #24]
 801315a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801315c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	69db      	ldr	r3, [r3, #28]
 8013162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8013164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6a1b      	ldr	r3, [r3, #32]
 801316a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801316c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801316e:	697a      	ldr	r2, [r7, #20]
 8013170:	4313      	orrs	r3, r2
 8013172:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	697a      	ldr	r2, [r7, #20]
 801317a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	461a      	mov	r2, r3
 8013182:	4b6e      	ldr	r3, [pc, #440]	@ (801333c <HAL_DMA_Init+0x650>)
 8013184:	4413      	add	r3, r2
 8013186:	4a6e      	ldr	r2, [pc, #440]	@ (8013340 <HAL_DMA_Init+0x654>)
 8013188:	fba2 2303 	umull	r2, r3, r2, r3
 801318c:	091b      	lsrs	r3, r3, #4
 801318e:	009a      	lsls	r2, r3, #2
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f001 fa99 	bl	80146cc <DMA_CalcBaseAndBitshift>
 801319a:	4603      	mov	r3, r0
 801319c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131a2:	f003 031f 	and.w	r3, r3, #31
 80131a6:	2201      	movs	r2, #1
 80131a8:	409a      	lsls	r2, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	605a      	str	r2, [r3, #4]
 80131ae:	e008      	b.n	80131c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2240      	movs	r2, #64	@ 0x40
 80131b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2203      	movs	r2, #3
 80131ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80131be:	2301      	movs	r3, #1
 80131c0:	e0b7      	b.n	8013332 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a5f      	ldr	r2, [pc, #380]	@ (8013344 <HAL_DMA_Init+0x658>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d072      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4a5d      	ldr	r2, [pc, #372]	@ (8013348 <HAL_DMA_Init+0x65c>)
 80131d2:	4293      	cmp	r3, r2
 80131d4:	d06d      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4a5c      	ldr	r2, [pc, #368]	@ (801334c <HAL_DMA_Init+0x660>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d068      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4a5a      	ldr	r2, [pc, #360]	@ (8013350 <HAL_DMA_Init+0x664>)
 80131e6:	4293      	cmp	r3, r2
 80131e8:	d063      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4a59      	ldr	r2, [pc, #356]	@ (8013354 <HAL_DMA_Init+0x668>)
 80131f0:	4293      	cmp	r3, r2
 80131f2:	d05e      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4a57      	ldr	r2, [pc, #348]	@ (8013358 <HAL_DMA_Init+0x66c>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d059      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	4a56      	ldr	r2, [pc, #344]	@ (801335c <HAL_DMA_Init+0x670>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d054      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4a54      	ldr	r2, [pc, #336]	@ (8013360 <HAL_DMA_Init+0x674>)
 801320e:	4293      	cmp	r3, r2
 8013210:	d04f      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a53      	ldr	r2, [pc, #332]	@ (8013364 <HAL_DMA_Init+0x678>)
 8013218:	4293      	cmp	r3, r2
 801321a:	d04a      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4a51      	ldr	r2, [pc, #324]	@ (8013368 <HAL_DMA_Init+0x67c>)
 8013222:	4293      	cmp	r3, r2
 8013224:	d045      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a50      	ldr	r2, [pc, #320]	@ (801336c <HAL_DMA_Init+0x680>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d040      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4a4e      	ldr	r2, [pc, #312]	@ (8013370 <HAL_DMA_Init+0x684>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d03b      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	4a4d      	ldr	r2, [pc, #308]	@ (8013374 <HAL_DMA_Init+0x688>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d036      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4a4b      	ldr	r2, [pc, #300]	@ (8013378 <HAL_DMA_Init+0x68c>)
 801324a:	4293      	cmp	r3, r2
 801324c:	d031      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	4a4a      	ldr	r2, [pc, #296]	@ (801337c <HAL_DMA_Init+0x690>)
 8013254:	4293      	cmp	r3, r2
 8013256:	d02c      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4a48      	ldr	r2, [pc, #288]	@ (8013380 <HAL_DMA_Init+0x694>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d027      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	4a47      	ldr	r2, [pc, #284]	@ (8013384 <HAL_DMA_Init+0x698>)
 8013268:	4293      	cmp	r3, r2
 801326a:	d022      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a45      	ldr	r2, [pc, #276]	@ (8013388 <HAL_DMA_Init+0x69c>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d01d      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	4a44      	ldr	r2, [pc, #272]	@ (801338c <HAL_DMA_Init+0x6a0>)
 801327c:	4293      	cmp	r3, r2
 801327e:	d018      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	4a42      	ldr	r2, [pc, #264]	@ (8013390 <HAL_DMA_Init+0x6a4>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d013      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4a41      	ldr	r2, [pc, #260]	@ (8013394 <HAL_DMA_Init+0x6a8>)
 8013290:	4293      	cmp	r3, r2
 8013292:	d00e      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	4a3f      	ldr	r2, [pc, #252]	@ (8013398 <HAL_DMA_Init+0x6ac>)
 801329a:	4293      	cmp	r3, r2
 801329c:	d009      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4a3e      	ldr	r2, [pc, #248]	@ (801339c <HAL_DMA_Init+0x6b0>)
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d004      	beq.n	80132b2 <HAL_DMA_Init+0x5c6>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	4a3c      	ldr	r2, [pc, #240]	@ (80133a0 <HAL_DMA_Init+0x6b4>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d101      	bne.n	80132b6 <HAL_DMA_Init+0x5ca>
 80132b2:	2301      	movs	r3, #1
 80132b4:	e000      	b.n	80132b8 <HAL_DMA_Init+0x5cc>
 80132b6:	2300      	movs	r3, #0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d032      	beq.n	8013322 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f001 fb33 	bl	8014928 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	2b80      	cmp	r3, #128	@ 0x80
 80132c8:	d102      	bne.n	80132d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2200      	movs	r2, #0
 80132ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685a      	ldr	r2, [r3, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80132d8:	b2d2      	uxtb	r2, r2
 80132da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80132e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d010      	beq.n	8013310 <HAL_DMA_Init+0x624>
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	685b      	ldr	r3, [r3, #4]
 80132f2:	2b08      	cmp	r3, #8
 80132f4:	d80c      	bhi.n	8013310 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f001 fbb0 	bl	8014a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013300:	2200      	movs	r2, #0
 8013302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801330c:	605a      	str	r2, [r3, #4]
 801330e:	e008      	b.n	8013322 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2200      	movs	r2, #0
 801331a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2200      	movs	r2, #0
 8013320:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2200      	movs	r2, #0
 8013326:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2201      	movs	r2, #1
 801332c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8013330:	2300      	movs	r3, #0
}
 8013332:	4618      	mov	r0, r3
 8013334:	3718      	adds	r7, #24
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	a7fdabf8 	.word	0xa7fdabf8
 8013340:	cccccccd 	.word	0xcccccccd
 8013344:	40020010 	.word	0x40020010
 8013348:	40020028 	.word	0x40020028
 801334c:	40020040 	.word	0x40020040
 8013350:	40020058 	.word	0x40020058
 8013354:	40020070 	.word	0x40020070
 8013358:	40020088 	.word	0x40020088
 801335c:	400200a0 	.word	0x400200a0
 8013360:	400200b8 	.word	0x400200b8
 8013364:	40020410 	.word	0x40020410
 8013368:	40020428 	.word	0x40020428
 801336c:	40020440 	.word	0x40020440
 8013370:	40020458 	.word	0x40020458
 8013374:	40020470 	.word	0x40020470
 8013378:	40020488 	.word	0x40020488
 801337c:	400204a0 	.word	0x400204a0
 8013380:	400204b8 	.word	0x400204b8
 8013384:	58025408 	.word	0x58025408
 8013388:	5802541c 	.word	0x5802541c
 801338c:	58025430 	.word	0x58025430
 8013390:	58025444 	.word	0x58025444
 8013394:	58025458 	.word	0x58025458
 8013398:	5802546c 	.word	0x5802546c
 801339c:	58025480 	.word	0x58025480
 80133a0:	58025494 	.word	0x58025494

080133a4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80133b2:	2300      	movs	r3, #0
 80133b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d101      	bne.n	80133c0 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80133bc:	2301      	movs	r3, #1
 80133be:	e0ec      	b.n	801359a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d101      	bne.n	80133ce <HAL_DMA_Start+0x2a>
 80133ca:	2302      	movs	r3, #2
 80133cc:	e0e5      	b.n	801359a <HAL_DMA_Start+0x1f6>
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2201      	movs	r2, #1
 80133d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	2b01      	cmp	r3, #1
 80133e0:	f040 80d0 	bne.w	8013584 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2202      	movs	r2, #2
 80133e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2200      	movs	r2, #0
 80133f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	4a6b      	ldr	r2, [pc, #428]	@ (80135a4 <HAL_DMA_Start+0x200>)
 80133f8:	4293      	cmp	r3, r2
 80133fa:	d04a      	beq.n	8013492 <HAL_DMA_Start+0xee>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4a69      	ldr	r2, [pc, #420]	@ (80135a8 <HAL_DMA_Start+0x204>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d045      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	4a68      	ldr	r2, [pc, #416]	@ (80135ac <HAL_DMA_Start+0x208>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d040      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4a66      	ldr	r2, [pc, #408]	@ (80135b0 <HAL_DMA_Start+0x20c>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d03b      	beq.n	8013492 <HAL_DMA_Start+0xee>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	4a65      	ldr	r2, [pc, #404]	@ (80135b4 <HAL_DMA_Start+0x210>)
 8013420:	4293      	cmp	r3, r2
 8013422:	d036      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	4a63      	ldr	r2, [pc, #396]	@ (80135b8 <HAL_DMA_Start+0x214>)
 801342a:	4293      	cmp	r3, r2
 801342c:	d031      	beq.n	8013492 <HAL_DMA_Start+0xee>
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	4a62      	ldr	r2, [pc, #392]	@ (80135bc <HAL_DMA_Start+0x218>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d02c      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	4a60      	ldr	r2, [pc, #384]	@ (80135c0 <HAL_DMA_Start+0x21c>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d027      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4a5f      	ldr	r2, [pc, #380]	@ (80135c4 <HAL_DMA_Start+0x220>)
 8013448:	4293      	cmp	r3, r2
 801344a:	d022      	beq.n	8013492 <HAL_DMA_Start+0xee>
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a5d      	ldr	r2, [pc, #372]	@ (80135c8 <HAL_DMA_Start+0x224>)
 8013452:	4293      	cmp	r3, r2
 8013454:	d01d      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a5c      	ldr	r2, [pc, #368]	@ (80135cc <HAL_DMA_Start+0x228>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d018      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4a5a      	ldr	r2, [pc, #360]	@ (80135d0 <HAL_DMA_Start+0x22c>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d013      	beq.n	8013492 <HAL_DMA_Start+0xee>
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4a59      	ldr	r2, [pc, #356]	@ (80135d4 <HAL_DMA_Start+0x230>)
 8013470:	4293      	cmp	r3, r2
 8013472:	d00e      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a57      	ldr	r2, [pc, #348]	@ (80135d8 <HAL_DMA_Start+0x234>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d009      	beq.n	8013492 <HAL_DMA_Start+0xee>
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4a56      	ldr	r2, [pc, #344]	@ (80135dc <HAL_DMA_Start+0x238>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d004      	beq.n	8013492 <HAL_DMA_Start+0xee>
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4a54      	ldr	r2, [pc, #336]	@ (80135e0 <HAL_DMA_Start+0x23c>)
 801348e:	4293      	cmp	r3, r2
 8013490:	d108      	bne.n	80134a4 <HAL_DMA_Start+0x100>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f022 0201 	bic.w	r2, r2, #1
 80134a0:	601a      	str	r2, [r3, #0]
 80134a2:	e007      	b.n	80134b4 <HAL_DMA_Start+0x110>
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f022 0201 	bic.w	r2, r2, #1
 80134b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	68b9      	ldr	r1, [r7, #8]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 ff5a 	bl	8014374 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	4a37      	ldr	r2, [pc, #220]	@ (80135a4 <HAL_DMA_Start+0x200>)
 80134c6:	4293      	cmp	r3, r2
 80134c8:	d04a      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	4a36      	ldr	r2, [pc, #216]	@ (80135a8 <HAL_DMA_Start+0x204>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d045      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4a34      	ldr	r2, [pc, #208]	@ (80135ac <HAL_DMA_Start+0x208>)
 80134da:	4293      	cmp	r3, r2
 80134dc:	d040      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	4a33      	ldr	r2, [pc, #204]	@ (80135b0 <HAL_DMA_Start+0x20c>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d03b      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a31      	ldr	r2, [pc, #196]	@ (80135b4 <HAL_DMA_Start+0x210>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d036      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4a30      	ldr	r2, [pc, #192]	@ (80135b8 <HAL_DMA_Start+0x214>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d031      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a2e      	ldr	r2, [pc, #184]	@ (80135bc <HAL_DMA_Start+0x218>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d02c      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a2d      	ldr	r2, [pc, #180]	@ (80135c0 <HAL_DMA_Start+0x21c>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d027      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	4a2b      	ldr	r2, [pc, #172]	@ (80135c4 <HAL_DMA_Start+0x220>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d022      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	4a2a      	ldr	r2, [pc, #168]	@ (80135c8 <HAL_DMA_Start+0x224>)
 8013520:	4293      	cmp	r3, r2
 8013522:	d01d      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4a28      	ldr	r2, [pc, #160]	@ (80135cc <HAL_DMA_Start+0x228>)
 801352a:	4293      	cmp	r3, r2
 801352c:	d018      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	4a27      	ldr	r2, [pc, #156]	@ (80135d0 <HAL_DMA_Start+0x22c>)
 8013534:	4293      	cmp	r3, r2
 8013536:	d013      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4a25      	ldr	r2, [pc, #148]	@ (80135d4 <HAL_DMA_Start+0x230>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d00e      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4a24      	ldr	r2, [pc, #144]	@ (80135d8 <HAL_DMA_Start+0x234>)
 8013548:	4293      	cmp	r3, r2
 801354a:	d009      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a22      	ldr	r2, [pc, #136]	@ (80135dc <HAL_DMA_Start+0x238>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d004      	beq.n	8013560 <HAL_DMA_Start+0x1bc>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	4a21      	ldr	r2, [pc, #132]	@ (80135e0 <HAL_DMA_Start+0x23c>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d108      	bne.n	8013572 <HAL_DMA_Start+0x1ce>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f042 0201 	orr.w	r2, r2, #1
 801356e:	601a      	str	r2, [r3, #0]
 8013570:	e012      	b.n	8013598 <HAL_DMA_Start+0x1f4>
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f042 0201 	orr.w	r2, r2, #1
 8013580:	601a      	str	r2, [r3, #0]
 8013582:	e009      	b.n	8013598 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801358a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8013594:	2301      	movs	r3, #1
 8013596:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8013598:	7dfb      	ldrb	r3, [r7, #23]
}
 801359a:	4618      	mov	r0, r3
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	40020010 	.word	0x40020010
 80135a8:	40020028 	.word	0x40020028
 80135ac:	40020040 	.word	0x40020040
 80135b0:	40020058 	.word	0x40020058
 80135b4:	40020070 	.word	0x40020070
 80135b8:	40020088 	.word	0x40020088
 80135bc:	400200a0 	.word	0x400200a0
 80135c0:	400200b8 	.word	0x400200b8
 80135c4:	40020410 	.word	0x40020410
 80135c8:	40020428 	.word	0x40020428
 80135cc:	40020440 	.word	0x40020440
 80135d0:	40020458 	.word	0x40020458
 80135d4:	40020470 	.word	0x40020470
 80135d8:	40020488 	.word	0x40020488
 80135dc:	400204a0 	.word	0x400204a0
 80135e0:	400204b8 	.word	0x400204b8

080135e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b086      	sub	sp, #24
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80135ec:	f7ff f9a0 	bl	8012930 <HAL_GetTick>
 80135f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d101      	bne.n	80135fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e2dc      	b.n	8013bb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b02      	cmp	r3, #2
 8013606:	d008      	beq.n	801361a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2280      	movs	r2, #128	@ 0x80
 801360c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8013616:	2301      	movs	r3, #1
 8013618:	e2cd      	b.n	8013bb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	4a76      	ldr	r2, [pc, #472]	@ (80137f8 <HAL_DMA_Abort+0x214>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d04a      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a74      	ldr	r2, [pc, #464]	@ (80137fc <HAL_DMA_Abort+0x218>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d045      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4a73      	ldr	r2, [pc, #460]	@ (8013800 <HAL_DMA_Abort+0x21c>)
 8013634:	4293      	cmp	r3, r2
 8013636:	d040      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4a71      	ldr	r2, [pc, #452]	@ (8013804 <HAL_DMA_Abort+0x220>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d03b      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	4a70      	ldr	r2, [pc, #448]	@ (8013808 <HAL_DMA_Abort+0x224>)
 8013648:	4293      	cmp	r3, r2
 801364a:	d036      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	4a6e      	ldr	r2, [pc, #440]	@ (801380c <HAL_DMA_Abort+0x228>)
 8013652:	4293      	cmp	r3, r2
 8013654:	d031      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	4a6d      	ldr	r2, [pc, #436]	@ (8013810 <HAL_DMA_Abort+0x22c>)
 801365c:	4293      	cmp	r3, r2
 801365e:	d02c      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	4a6b      	ldr	r2, [pc, #428]	@ (8013814 <HAL_DMA_Abort+0x230>)
 8013666:	4293      	cmp	r3, r2
 8013668:	d027      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a6a      	ldr	r2, [pc, #424]	@ (8013818 <HAL_DMA_Abort+0x234>)
 8013670:	4293      	cmp	r3, r2
 8013672:	d022      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4a68      	ldr	r2, [pc, #416]	@ (801381c <HAL_DMA_Abort+0x238>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d01d      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	4a67      	ldr	r2, [pc, #412]	@ (8013820 <HAL_DMA_Abort+0x23c>)
 8013684:	4293      	cmp	r3, r2
 8013686:	d018      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	4a65      	ldr	r2, [pc, #404]	@ (8013824 <HAL_DMA_Abort+0x240>)
 801368e:	4293      	cmp	r3, r2
 8013690:	d013      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	4a64      	ldr	r2, [pc, #400]	@ (8013828 <HAL_DMA_Abort+0x244>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d00e      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4a62      	ldr	r2, [pc, #392]	@ (801382c <HAL_DMA_Abort+0x248>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d009      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	4a61      	ldr	r2, [pc, #388]	@ (8013830 <HAL_DMA_Abort+0x24c>)
 80136ac:	4293      	cmp	r3, r2
 80136ae:	d004      	beq.n	80136ba <HAL_DMA_Abort+0xd6>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	4a5f      	ldr	r2, [pc, #380]	@ (8013834 <HAL_DMA_Abort+0x250>)
 80136b6:	4293      	cmp	r3, r2
 80136b8:	d101      	bne.n	80136be <HAL_DMA_Abort+0xda>
 80136ba:	2301      	movs	r3, #1
 80136bc:	e000      	b.n	80136c0 <HAL_DMA_Abort+0xdc>
 80136be:	2300      	movs	r3, #0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d013      	beq.n	80136ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f022 021e 	bic.w	r2, r2, #30
 80136d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	695a      	ldr	r2, [r3, #20]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80136e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	617b      	str	r3, [r7, #20]
 80136ea:	e00a      	b.n	8013702 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f022 020e 	bic.w	r2, r2, #14
 80136fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4a3c      	ldr	r2, [pc, #240]	@ (80137f8 <HAL_DMA_Abort+0x214>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d072      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4a3a      	ldr	r2, [pc, #232]	@ (80137fc <HAL_DMA_Abort+0x218>)
 8013712:	4293      	cmp	r3, r2
 8013714:	d06d      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	4a39      	ldr	r2, [pc, #228]	@ (8013800 <HAL_DMA_Abort+0x21c>)
 801371c:	4293      	cmp	r3, r2
 801371e:	d068      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4a37      	ldr	r2, [pc, #220]	@ (8013804 <HAL_DMA_Abort+0x220>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d063      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4a36      	ldr	r2, [pc, #216]	@ (8013808 <HAL_DMA_Abort+0x224>)
 8013730:	4293      	cmp	r3, r2
 8013732:	d05e      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4a34      	ldr	r2, [pc, #208]	@ (801380c <HAL_DMA_Abort+0x228>)
 801373a:	4293      	cmp	r3, r2
 801373c:	d059      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	4a33      	ldr	r2, [pc, #204]	@ (8013810 <HAL_DMA_Abort+0x22c>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d054      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	4a31      	ldr	r2, [pc, #196]	@ (8013814 <HAL_DMA_Abort+0x230>)
 801374e:	4293      	cmp	r3, r2
 8013750:	d04f      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	4a30      	ldr	r2, [pc, #192]	@ (8013818 <HAL_DMA_Abort+0x234>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d04a      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a2e      	ldr	r2, [pc, #184]	@ (801381c <HAL_DMA_Abort+0x238>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d045      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	4a2d      	ldr	r2, [pc, #180]	@ (8013820 <HAL_DMA_Abort+0x23c>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d040      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	4a2b      	ldr	r2, [pc, #172]	@ (8013824 <HAL_DMA_Abort+0x240>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d03b      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	4a2a      	ldr	r2, [pc, #168]	@ (8013828 <HAL_DMA_Abort+0x244>)
 8013780:	4293      	cmp	r3, r2
 8013782:	d036      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	4a28      	ldr	r2, [pc, #160]	@ (801382c <HAL_DMA_Abort+0x248>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d031      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4a27      	ldr	r2, [pc, #156]	@ (8013830 <HAL_DMA_Abort+0x24c>)
 8013794:	4293      	cmp	r3, r2
 8013796:	d02c      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	4a25      	ldr	r2, [pc, #148]	@ (8013834 <HAL_DMA_Abort+0x250>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d027      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	4a24      	ldr	r2, [pc, #144]	@ (8013838 <HAL_DMA_Abort+0x254>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d022      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	4a22      	ldr	r2, [pc, #136]	@ (801383c <HAL_DMA_Abort+0x258>)
 80137b2:	4293      	cmp	r3, r2
 80137b4:	d01d      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	4a21      	ldr	r2, [pc, #132]	@ (8013840 <HAL_DMA_Abort+0x25c>)
 80137bc:	4293      	cmp	r3, r2
 80137be:	d018      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	4a1f      	ldr	r2, [pc, #124]	@ (8013844 <HAL_DMA_Abort+0x260>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d013      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	4a1e      	ldr	r2, [pc, #120]	@ (8013848 <HAL_DMA_Abort+0x264>)
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d00e      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4a1c      	ldr	r2, [pc, #112]	@ (801384c <HAL_DMA_Abort+0x268>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d009      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	4a1b      	ldr	r2, [pc, #108]	@ (8013850 <HAL_DMA_Abort+0x26c>)
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d004      	beq.n	80137f2 <HAL_DMA_Abort+0x20e>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4a19      	ldr	r2, [pc, #100]	@ (8013854 <HAL_DMA_Abort+0x270>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d132      	bne.n	8013858 <HAL_DMA_Abort+0x274>
 80137f2:	2301      	movs	r3, #1
 80137f4:	e031      	b.n	801385a <HAL_DMA_Abort+0x276>
 80137f6:	bf00      	nop
 80137f8:	40020010 	.word	0x40020010
 80137fc:	40020028 	.word	0x40020028
 8013800:	40020040 	.word	0x40020040
 8013804:	40020058 	.word	0x40020058
 8013808:	40020070 	.word	0x40020070
 801380c:	40020088 	.word	0x40020088
 8013810:	400200a0 	.word	0x400200a0
 8013814:	400200b8 	.word	0x400200b8
 8013818:	40020410 	.word	0x40020410
 801381c:	40020428 	.word	0x40020428
 8013820:	40020440 	.word	0x40020440
 8013824:	40020458 	.word	0x40020458
 8013828:	40020470 	.word	0x40020470
 801382c:	40020488 	.word	0x40020488
 8013830:	400204a0 	.word	0x400204a0
 8013834:	400204b8 	.word	0x400204b8
 8013838:	58025408 	.word	0x58025408
 801383c:	5802541c 	.word	0x5802541c
 8013840:	58025430 	.word	0x58025430
 8013844:	58025444 	.word	0x58025444
 8013848:	58025458 	.word	0x58025458
 801384c:	5802546c 	.word	0x5802546c
 8013850:	58025480 	.word	0x58025480
 8013854:	58025494 	.word	0x58025494
 8013858:	2300      	movs	r3, #0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d007      	beq.n	801386e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801386c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a6d      	ldr	r2, [pc, #436]	@ (8013a28 <HAL_DMA_Abort+0x444>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d04a      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4a6b      	ldr	r2, [pc, #428]	@ (8013a2c <HAL_DMA_Abort+0x448>)
 801387e:	4293      	cmp	r3, r2
 8013880:	d045      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	4a6a      	ldr	r2, [pc, #424]	@ (8013a30 <HAL_DMA_Abort+0x44c>)
 8013888:	4293      	cmp	r3, r2
 801388a:	d040      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a68      	ldr	r2, [pc, #416]	@ (8013a34 <HAL_DMA_Abort+0x450>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d03b      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4a67      	ldr	r2, [pc, #412]	@ (8013a38 <HAL_DMA_Abort+0x454>)
 801389c:	4293      	cmp	r3, r2
 801389e:	d036      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	4a65      	ldr	r2, [pc, #404]	@ (8013a3c <HAL_DMA_Abort+0x458>)
 80138a6:	4293      	cmp	r3, r2
 80138a8:	d031      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4a64      	ldr	r2, [pc, #400]	@ (8013a40 <HAL_DMA_Abort+0x45c>)
 80138b0:	4293      	cmp	r3, r2
 80138b2:	d02c      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	4a62      	ldr	r2, [pc, #392]	@ (8013a44 <HAL_DMA_Abort+0x460>)
 80138ba:	4293      	cmp	r3, r2
 80138bc:	d027      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	4a61      	ldr	r2, [pc, #388]	@ (8013a48 <HAL_DMA_Abort+0x464>)
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d022      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4a5f      	ldr	r2, [pc, #380]	@ (8013a4c <HAL_DMA_Abort+0x468>)
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d01d      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	4a5e      	ldr	r2, [pc, #376]	@ (8013a50 <HAL_DMA_Abort+0x46c>)
 80138d8:	4293      	cmp	r3, r2
 80138da:	d018      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4a5c      	ldr	r2, [pc, #368]	@ (8013a54 <HAL_DMA_Abort+0x470>)
 80138e2:	4293      	cmp	r3, r2
 80138e4:	d013      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4a5b      	ldr	r2, [pc, #364]	@ (8013a58 <HAL_DMA_Abort+0x474>)
 80138ec:	4293      	cmp	r3, r2
 80138ee:	d00e      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4a59      	ldr	r2, [pc, #356]	@ (8013a5c <HAL_DMA_Abort+0x478>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d009      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	4a58      	ldr	r2, [pc, #352]	@ (8013a60 <HAL_DMA_Abort+0x47c>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d004      	beq.n	801390e <HAL_DMA_Abort+0x32a>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	4a56      	ldr	r2, [pc, #344]	@ (8013a64 <HAL_DMA_Abort+0x480>)
 801390a:	4293      	cmp	r3, r2
 801390c:	d108      	bne.n	8013920 <HAL_DMA_Abort+0x33c>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f022 0201 	bic.w	r2, r2, #1
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	e007      	b.n	8013930 <HAL_DMA_Abort+0x34c>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f022 0201 	bic.w	r2, r2, #1
 801392e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8013930:	e013      	b.n	801395a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8013932:	f7fe fffd 	bl	8012930 <HAL_GetTick>
 8013936:	4602      	mov	r2, r0
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	2b05      	cmp	r3, #5
 801393e:	d90c      	bls.n	801395a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2220      	movs	r2, #32
 8013944:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2203      	movs	r2, #3
 801394a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2200      	movs	r2, #0
 8013952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8013956:	2301      	movs	r3, #1
 8013958:	e12d      	b.n	8013bb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f003 0301 	and.w	r3, r3, #1
 8013962:	2b00      	cmp	r3, #0
 8013964:	d1e5      	bne.n	8013932 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	4a2f      	ldr	r2, [pc, #188]	@ (8013a28 <HAL_DMA_Abort+0x444>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d04a      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4a2d      	ldr	r2, [pc, #180]	@ (8013a2c <HAL_DMA_Abort+0x448>)
 8013976:	4293      	cmp	r3, r2
 8013978:	d045      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	4a2c      	ldr	r2, [pc, #176]	@ (8013a30 <HAL_DMA_Abort+0x44c>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d040      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	4a2a      	ldr	r2, [pc, #168]	@ (8013a34 <HAL_DMA_Abort+0x450>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d03b      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	4a29      	ldr	r2, [pc, #164]	@ (8013a38 <HAL_DMA_Abort+0x454>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d036      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4a27      	ldr	r2, [pc, #156]	@ (8013a3c <HAL_DMA_Abort+0x458>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d031      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4a26      	ldr	r2, [pc, #152]	@ (8013a40 <HAL_DMA_Abort+0x45c>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d02c      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	4a24      	ldr	r2, [pc, #144]	@ (8013a44 <HAL_DMA_Abort+0x460>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d027      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	4a23      	ldr	r2, [pc, #140]	@ (8013a48 <HAL_DMA_Abort+0x464>)
 80139bc:	4293      	cmp	r3, r2
 80139be:	d022      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4a21      	ldr	r2, [pc, #132]	@ (8013a4c <HAL_DMA_Abort+0x468>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d01d      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	4a20      	ldr	r2, [pc, #128]	@ (8013a50 <HAL_DMA_Abort+0x46c>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d018      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4a1e      	ldr	r2, [pc, #120]	@ (8013a54 <HAL_DMA_Abort+0x470>)
 80139da:	4293      	cmp	r3, r2
 80139dc:	d013      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	4a1d      	ldr	r2, [pc, #116]	@ (8013a58 <HAL_DMA_Abort+0x474>)
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d00e      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	4a1b      	ldr	r2, [pc, #108]	@ (8013a5c <HAL_DMA_Abort+0x478>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d009      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4a1a      	ldr	r2, [pc, #104]	@ (8013a60 <HAL_DMA_Abort+0x47c>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d004      	beq.n	8013a06 <HAL_DMA_Abort+0x422>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4a18      	ldr	r2, [pc, #96]	@ (8013a64 <HAL_DMA_Abort+0x480>)
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d101      	bne.n	8013a0a <HAL_DMA_Abort+0x426>
 8013a06:	2301      	movs	r3, #1
 8013a08:	e000      	b.n	8013a0c <HAL_DMA_Abort+0x428>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d02b      	beq.n	8013a68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a1a:	f003 031f 	and.w	r3, r3, #31
 8013a1e:	223f      	movs	r2, #63	@ 0x3f
 8013a20:	409a      	lsls	r2, r3
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	609a      	str	r2, [r3, #8]
 8013a26:	e02a      	b.n	8013a7e <HAL_DMA_Abort+0x49a>
 8013a28:	40020010 	.word	0x40020010
 8013a2c:	40020028 	.word	0x40020028
 8013a30:	40020040 	.word	0x40020040
 8013a34:	40020058 	.word	0x40020058
 8013a38:	40020070 	.word	0x40020070
 8013a3c:	40020088 	.word	0x40020088
 8013a40:	400200a0 	.word	0x400200a0
 8013a44:	400200b8 	.word	0x400200b8
 8013a48:	40020410 	.word	0x40020410
 8013a4c:	40020428 	.word	0x40020428
 8013a50:	40020440 	.word	0x40020440
 8013a54:	40020458 	.word	0x40020458
 8013a58:	40020470 	.word	0x40020470
 8013a5c:	40020488 	.word	0x40020488
 8013a60:	400204a0 	.word	0x400204a0
 8013a64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a72:	f003 031f 	and.w	r3, r3, #31
 8013a76:	2201      	movs	r2, #1
 8013a78:	409a      	lsls	r2, r3
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4a4f      	ldr	r2, [pc, #316]	@ (8013bc0 <HAL_DMA_Abort+0x5dc>)
 8013a84:	4293      	cmp	r3, r2
 8013a86:	d072      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4a4d      	ldr	r2, [pc, #308]	@ (8013bc4 <HAL_DMA_Abort+0x5e0>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d06d      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a4c      	ldr	r2, [pc, #304]	@ (8013bc8 <HAL_DMA_Abort+0x5e4>)
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d068      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8013bcc <HAL_DMA_Abort+0x5e8>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d063      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4a49      	ldr	r2, [pc, #292]	@ (8013bd0 <HAL_DMA_Abort+0x5ec>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d05e      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4a47      	ldr	r2, [pc, #284]	@ (8013bd4 <HAL_DMA_Abort+0x5f0>)
 8013ab6:	4293      	cmp	r3, r2
 8013ab8:	d059      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	4a46      	ldr	r2, [pc, #280]	@ (8013bd8 <HAL_DMA_Abort+0x5f4>)
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d054      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	4a44      	ldr	r2, [pc, #272]	@ (8013bdc <HAL_DMA_Abort+0x5f8>)
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d04f      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	4a43      	ldr	r2, [pc, #268]	@ (8013be0 <HAL_DMA_Abort+0x5fc>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d04a      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4a41      	ldr	r2, [pc, #260]	@ (8013be4 <HAL_DMA_Abort+0x600>)
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	d045      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	4a40      	ldr	r2, [pc, #256]	@ (8013be8 <HAL_DMA_Abort+0x604>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d040      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a3e      	ldr	r2, [pc, #248]	@ (8013bec <HAL_DMA_Abort+0x608>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d03b      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a3d      	ldr	r2, [pc, #244]	@ (8013bf0 <HAL_DMA_Abort+0x60c>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d036      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4a3b      	ldr	r2, [pc, #236]	@ (8013bf4 <HAL_DMA_Abort+0x610>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d031      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8013bf8 <HAL_DMA_Abort+0x614>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d02c      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4a38      	ldr	r2, [pc, #224]	@ (8013bfc <HAL_DMA_Abort+0x618>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d027      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a37      	ldr	r2, [pc, #220]	@ (8013c00 <HAL_DMA_Abort+0x61c>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d022      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a35      	ldr	r2, [pc, #212]	@ (8013c04 <HAL_DMA_Abort+0x620>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d01d      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4a34      	ldr	r2, [pc, #208]	@ (8013c08 <HAL_DMA_Abort+0x624>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d018      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4a32      	ldr	r2, [pc, #200]	@ (8013c0c <HAL_DMA_Abort+0x628>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d013      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4a31      	ldr	r2, [pc, #196]	@ (8013c10 <HAL_DMA_Abort+0x62c>)
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d00e      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a2f      	ldr	r2, [pc, #188]	@ (8013c14 <HAL_DMA_Abort+0x630>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d009      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8013c18 <HAL_DMA_Abort+0x634>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d004      	beq.n	8013b6e <HAL_DMA_Abort+0x58a>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a2c      	ldr	r2, [pc, #176]	@ (8013c1c <HAL_DMA_Abort+0x638>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d101      	bne.n	8013b72 <HAL_DMA_Abort+0x58e>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e000      	b.n	8013b74 <HAL_DMA_Abort+0x590>
 8013b72:	2300      	movs	r3, #0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d015      	beq.n	8013ba4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013b80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d00c      	beq.n	8013ba4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013b98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013ba2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8013bb4:	2300      	movs	r3, #0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3718      	adds	r7, #24
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	40020010 	.word	0x40020010
 8013bc4:	40020028 	.word	0x40020028
 8013bc8:	40020040 	.word	0x40020040
 8013bcc:	40020058 	.word	0x40020058
 8013bd0:	40020070 	.word	0x40020070
 8013bd4:	40020088 	.word	0x40020088
 8013bd8:	400200a0 	.word	0x400200a0
 8013bdc:	400200b8 	.word	0x400200b8
 8013be0:	40020410 	.word	0x40020410
 8013be4:	40020428 	.word	0x40020428
 8013be8:	40020440 	.word	0x40020440
 8013bec:	40020458 	.word	0x40020458
 8013bf0:	40020470 	.word	0x40020470
 8013bf4:	40020488 	.word	0x40020488
 8013bf8:	400204a0 	.word	0x400204a0
 8013bfc:	400204b8 	.word	0x400204b8
 8013c00:	58025408 	.word	0x58025408
 8013c04:	5802541c 	.word	0x5802541c
 8013c08:	58025430 	.word	0x58025430
 8013c0c:	58025444 	.word	0x58025444
 8013c10:	58025458 	.word	0x58025458
 8013c14:	5802546c 	.word	0x5802546c
 8013c18:	58025480 	.word	0x58025480
 8013c1c:	58025494 	.word	0x58025494

08013c20 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b08a      	sub	sp, #40	@ 0x28
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	460b      	mov	r3, r1
 8013c2a:	607a      	str	r2, [r7, #4]
 8013c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8013c32:	f7fe fe7d 	bl	8012930 <HAL_GetTick>
 8013c36:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d101      	bne.n	8013c42 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e374      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	d008      	beq.n	8013c60 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2280      	movs	r2, #128	@ 0x80
 8013c52:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2200      	movs	r2, #0
 8013c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	e365      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a7b      	ldr	r2, [pc, #492]	@ (8013e54 <HAL_DMA_PollForTransfer+0x234>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d04a      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	4a7a      	ldr	r2, [pc, #488]	@ (8013e58 <HAL_DMA_PollForTransfer+0x238>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d045      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4a78      	ldr	r2, [pc, #480]	@ (8013e5c <HAL_DMA_PollForTransfer+0x23c>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d040      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a77      	ldr	r2, [pc, #476]	@ (8013e60 <HAL_DMA_PollForTransfer+0x240>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d03b      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a75      	ldr	r2, [pc, #468]	@ (8013e64 <HAL_DMA_PollForTransfer+0x244>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d036      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a74      	ldr	r2, [pc, #464]	@ (8013e68 <HAL_DMA_PollForTransfer+0x248>)
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d031      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4a72      	ldr	r2, [pc, #456]	@ (8013e6c <HAL_DMA_PollForTransfer+0x24c>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d02c      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	4a71      	ldr	r2, [pc, #452]	@ (8013e70 <HAL_DMA_PollForTransfer+0x250>)
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d027      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4a6f      	ldr	r2, [pc, #444]	@ (8013e74 <HAL_DMA_PollForTransfer+0x254>)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d022      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	4a6e      	ldr	r2, [pc, #440]	@ (8013e78 <HAL_DMA_PollForTransfer+0x258>)
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	d01d      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8013e7c <HAL_DMA_PollForTransfer+0x25c>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d018      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8013e80 <HAL_DMA_PollForTransfer+0x260>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d013      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4a69      	ldr	r2, [pc, #420]	@ (8013e84 <HAL_DMA_PollForTransfer+0x264>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d00e      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4a68      	ldr	r2, [pc, #416]	@ (8013e88 <HAL_DMA_PollForTransfer+0x268>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d009      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a66      	ldr	r2, [pc, #408]	@ (8013e8c <HAL_DMA_PollForTransfer+0x26c>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d004      	beq.n	8013d00 <HAL_DMA_PollForTransfer+0xe0>
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a65      	ldr	r2, [pc, #404]	@ (8013e90 <HAL_DMA_PollForTransfer+0x270>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d101      	bne.n	8013d04 <HAL_DMA_PollForTransfer+0xe4>
 8013d00:	2301      	movs	r3, #1
 8013d02:	e000      	b.n	8013d06 <HAL_DMA_PollForTransfer+0xe6>
 8013d04:	2300      	movs	r3, #0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d028      	beq.n	8013d5c <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d005      	beq.n	8013d24 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8013d20:	2301      	movs	r3, #1
 8013d22:	e303      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8013d24:	7afb      	ldrb	r3, [r7, #11]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d108      	bne.n	8013d3c <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d2e:	f003 031f 	and.w	r3, r3, #31
 8013d32:	2220      	movs	r2, #32
 8013d34:	fa02 f303 	lsl.w	r3, r2, r3
 8013d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d3a:	e007      	b.n	8013d4c <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d40:	f003 031f 	and.w	r3, r3, #31
 8013d44:	2210      	movs	r2, #16
 8013d46:	fa02 f303 	lsl.w	r3, r2, r3
 8013d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d50:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d56:	3308      	adds	r3, #8
 8013d58:	61fb      	str	r3, [r7, #28]
 8013d5a:	e1d5      	b.n	8014108 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f003 0320 	and.w	r3, r3, #32
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d005      	beq.n	8013d76 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d70:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e2da      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8013d76:	7afb      	ldrb	r3, [r7, #11]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d108      	bne.n	8013d8e <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d80:	f003 031f 	and.w	r3, r3, #31
 8013d84:	2202      	movs	r2, #2
 8013d86:	fa02 f303 	lsl.w	r3, r2, r3
 8013d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d8c:	e007      	b.n	8013d9e <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d92:	f003 031f 	and.w	r3, r3, #31
 8013d96:	2204      	movs	r2, #4
 8013d98:	fa02 f303 	lsl.w	r3, r2, r3
 8013d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013da2:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013da8:	3304      	adds	r3, #4
 8013daa:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8013dac:	e1ac      	b.n	8014108 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4a28      	ldr	r2, [pc, #160]	@ (8013e54 <HAL_DMA_PollForTransfer+0x234>)
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d04a      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4a26      	ldr	r2, [pc, #152]	@ (8013e58 <HAL_DMA_PollForTransfer+0x238>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d045      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4a25      	ldr	r2, [pc, #148]	@ (8013e5c <HAL_DMA_PollForTransfer+0x23c>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d040      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4a23      	ldr	r2, [pc, #140]	@ (8013e60 <HAL_DMA_PollForTransfer+0x240>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d03b      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4a22      	ldr	r2, [pc, #136]	@ (8013e64 <HAL_DMA_PollForTransfer+0x244>)
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d036      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4a20      	ldr	r2, [pc, #128]	@ (8013e68 <HAL_DMA_PollForTransfer+0x248>)
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d031      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	4a1f      	ldr	r2, [pc, #124]	@ (8013e6c <HAL_DMA_PollForTransfer+0x24c>)
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d02c      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e70 <HAL_DMA_PollForTransfer+0x250>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d027      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	4a1c      	ldr	r2, [pc, #112]	@ (8013e74 <HAL_DMA_PollForTransfer+0x254>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d022      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8013e78 <HAL_DMA_PollForTransfer+0x258>)
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	d01d      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4a19      	ldr	r2, [pc, #100]	@ (8013e7c <HAL_DMA_PollForTransfer+0x25c>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d018      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a17      	ldr	r2, [pc, #92]	@ (8013e80 <HAL_DMA_PollForTransfer+0x260>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d013      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4a16      	ldr	r2, [pc, #88]	@ (8013e84 <HAL_DMA_PollForTransfer+0x264>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d00e      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a14      	ldr	r2, [pc, #80]	@ (8013e88 <HAL_DMA_PollForTransfer+0x268>)
 8013e36:	4293      	cmp	r3, r2
 8013e38:	d009      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4a13      	ldr	r2, [pc, #76]	@ (8013e8c <HAL_DMA_PollForTransfer+0x26c>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d004      	beq.n	8013e4e <HAL_DMA_PollForTransfer+0x22e>
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4a11      	ldr	r2, [pc, #68]	@ (8013e90 <HAL_DMA_PollForTransfer+0x270>)
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d122      	bne.n	8013e94 <HAL_DMA_PollForTransfer+0x274>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e021      	b.n	8013e96 <HAL_DMA_PollForTransfer+0x276>
 8013e52:	bf00      	nop
 8013e54:	40020010 	.word	0x40020010
 8013e58:	40020028 	.word	0x40020028
 8013e5c:	40020040 	.word	0x40020040
 8013e60:	40020058 	.word	0x40020058
 8013e64:	40020070 	.word	0x40020070
 8013e68:	40020088 	.word	0x40020088
 8013e6c:	400200a0 	.word	0x400200a0
 8013e70:	400200b8 	.word	0x400200b8
 8013e74:	40020410 	.word	0x40020410
 8013e78:	40020428 	.word	0x40020428
 8013e7c:	40020440 	.word	0x40020440
 8013e80:	40020458 	.word	0x40020458
 8013e84:	40020470 	.word	0x40020470
 8013e88:	40020488 	.word	0x40020488
 8013e8c:	400204a0 	.word	0x400204a0
 8013e90:	400204b8 	.word	0x400204b8
 8013e94:	2300      	movs	r3, #0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d057      	beq.n	8013f4a <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013e9a:	6a3b      	ldr	r3, [r7, #32]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ea2:	f003 031f 	and.w	r3, r3, #31
 8013ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8013eaa:	f003 0301 	and.w	r3, r3, #1
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d00d      	beq.n	8013ece <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013eb6:	f043 0202 	orr.w	r2, r3, #2
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ec2:	f003 031f 	and.w	r3, r3, #31
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	409a      	lsls	r2, r3
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013ece:	6a3b      	ldr	r3, [r7, #32]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ed6:	f003 031f 	and.w	r3, r3, #31
 8013eda:	2104      	movs	r1, #4
 8013edc:	fa01 f303 	lsl.w	r3, r1, r3
 8013ee0:	4013      	ands	r3, r2
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d00d      	beq.n	8013f02 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013eea:	f043 0204 	orr.w	r2, r3, #4
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ef6:	f003 031f 	and.w	r3, r3, #31
 8013efa:	2204      	movs	r2, #4
 8013efc:	409a      	lsls	r2, r3
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013f02:	6a3b      	ldr	r3, [r7, #32]
 8013f04:	681a      	ldr	r2, [r3, #0]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f0a:	f003 031f 	and.w	r3, r3, #31
 8013f0e:	2108      	movs	r1, #8
 8013f10:	fa01 f303 	lsl.w	r3, r1, r3
 8013f14:	4013      	ands	r3, r2
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d038      	beq.n	8013f8c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f1e:	f043 0201 	orr.w	r2, r3, #1
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f2a:	f003 031f 	and.w	r3, r3, #31
 8013f2e:	2208      	movs	r2, #8
 8013f30:	409a      	lsls	r2, r3
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8013f46:	2301      	movs	r3, #1
 8013f48:	e1f0      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8013f4a:	6a3b      	ldr	r3, [r7, #32]
 8013f4c:	681a      	ldr	r2, [r3, #0]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f52:	f003 031f 	and.w	r3, r3, #31
 8013f56:	2108      	movs	r1, #8
 8013f58:	fa01 f303 	lsl.w	r3, r1, r3
 8013f5c:	4013      	ands	r3, r2
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d014      	beq.n	8013f8c <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f66:	f003 031f 	and.w	r3, r3, #31
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	409a      	lsls	r2, r3
 8013f6e:	6a3b      	ldr	r3, [r7, #32]
 8013f70:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2201      	movs	r2, #1
 8013f76:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	2200      	movs	r2, #0
 8013f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e1cf      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f92:	d012      	beq.n	8013fba <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8013f94:	f7fe fccc 	bl	8012930 <HAL_GetTick>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d302      	bcc.n	8013faa <HAL_DMA_PollForTransfer+0x38a>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d107      	bne.n	8013fba <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2220      	movs	r2, #32
 8013fae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f7ff fb17 	bl	80135e4 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e1b8      	b.n	801432c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4a81      	ldr	r2, [pc, #516]	@ (80141c4 <HAL_DMA_PollForTransfer+0x5a4>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d072      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a7f      	ldr	r2, [pc, #508]	@ (80141c8 <HAL_DMA_PollForTransfer+0x5a8>)
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d06d      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80141cc <HAL_DMA_PollForTransfer+0x5ac>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d068      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80141d0 <HAL_DMA_PollForTransfer+0x5b0>)
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d063      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	4a7b      	ldr	r2, [pc, #492]	@ (80141d4 <HAL_DMA_PollForTransfer+0x5b4>)
 8013fe8:	4293      	cmp	r3, r2
 8013fea:	d05e      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a79      	ldr	r2, [pc, #484]	@ (80141d8 <HAL_DMA_PollForTransfer+0x5b8>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d059      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4a78      	ldr	r2, [pc, #480]	@ (80141dc <HAL_DMA_PollForTransfer+0x5bc>)
 8013ffc:	4293      	cmp	r3, r2
 8013ffe:	d054      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4a76      	ldr	r2, [pc, #472]	@ (80141e0 <HAL_DMA_PollForTransfer+0x5c0>)
 8014006:	4293      	cmp	r3, r2
 8014008:	d04f      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	4a75      	ldr	r2, [pc, #468]	@ (80141e4 <HAL_DMA_PollForTransfer+0x5c4>)
 8014010:	4293      	cmp	r3, r2
 8014012:	d04a      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	4a73      	ldr	r2, [pc, #460]	@ (80141e8 <HAL_DMA_PollForTransfer+0x5c8>)
 801401a:	4293      	cmp	r3, r2
 801401c:	d045      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	4a72      	ldr	r2, [pc, #456]	@ (80141ec <HAL_DMA_PollForTransfer+0x5cc>)
 8014024:	4293      	cmp	r3, r2
 8014026:	d040      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	4a70      	ldr	r2, [pc, #448]	@ (80141f0 <HAL_DMA_PollForTransfer+0x5d0>)
 801402e:	4293      	cmp	r3, r2
 8014030:	d03b      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a6f      	ldr	r2, [pc, #444]	@ (80141f4 <HAL_DMA_PollForTransfer+0x5d4>)
 8014038:	4293      	cmp	r3, r2
 801403a:	d036      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a6d      	ldr	r2, [pc, #436]	@ (80141f8 <HAL_DMA_PollForTransfer+0x5d8>)
 8014042:	4293      	cmp	r3, r2
 8014044:	d031      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	4a6c      	ldr	r2, [pc, #432]	@ (80141fc <HAL_DMA_PollForTransfer+0x5dc>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d02c      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4a6a      	ldr	r2, [pc, #424]	@ (8014200 <HAL_DMA_PollForTransfer+0x5e0>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d027      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	4a69      	ldr	r2, [pc, #420]	@ (8014204 <HAL_DMA_PollForTransfer+0x5e4>)
 8014060:	4293      	cmp	r3, r2
 8014062:	d022      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4a67      	ldr	r2, [pc, #412]	@ (8014208 <HAL_DMA_PollForTransfer+0x5e8>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d01d      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4a66      	ldr	r2, [pc, #408]	@ (801420c <HAL_DMA_PollForTransfer+0x5ec>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d018      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	4a64      	ldr	r2, [pc, #400]	@ (8014210 <HAL_DMA_PollForTransfer+0x5f0>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d013      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a63      	ldr	r2, [pc, #396]	@ (8014214 <HAL_DMA_PollForTransfer+0x5f4>)
 8014088:	4293      	cmp	r3, r2
 801408a:	d00e      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4a61      	ldr	r2, [pc, #388]	@ (8014218 <HAL_DMA_PollForTransfer+0x5f8>)
 8014092:	4293      	cmp	r3, r2
 8014094:	d009      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4a60      	ldr	r2, [pc, #384]	@ (801421c <HAL_DMA_PollForTransfer+0x5fc>)
 801409c:	4293      	cmp	r3, r2
 801409e:	d004      	beq.n	80140aa <HAL_DMA_PollForTransfer+0x48a>
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4a5e      	ldr	r2, [pc, #376]	@ (8014220 <HAL_DMA_PollForTransfer+0x600>)
 80140a6:	4293      	cmp	r3, r2
 80140a8:	d101      	bne.n	80140ae <HAL_DMA_PollForTransfer+0x48e>
 80140aa:	2301      	movs	r3, #1
 80140ac:	e000      	b.n	80140b0 <HAL_DMA_PollForTransfer+0x490>
 80140ae:	2300      	movs	r3, #0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d029      	beq.n	8014108 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d012      	beq.n	80140e2 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80140c6:	4013      	ands	r3, r2
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d00a      	beq.n	80140e2 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80140d4:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140da:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80140ec:	4013      	ands	r3, r2
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d00a      	beq.n	8014108 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80140f6:	68fa      	ldr	r2, [r7, #12]
 80140f8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80140fa:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014100:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8014108:	6a3b      	ldr	r3, [r7, #32]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410e:	4013      	ands	r3, r2
 8014110:	2b00      	cmp	r3, #0
 8014112:	f43f ae4c 	beq.w	8013dae <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8014116:	7afb      	ldrb	r3, [r7, #11]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f040 80a0 	bne.w	801425e <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	4a28      	ldr	r2, [pc, #160]	@ (80141c4 <HAL_DMA_PollForTransfer+0x5a4>)
 8014124:	4293      	cmp	r3, r2
 8014126:	d04a      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4a26      	ldr	r2, [pc, #152]	@ (80141c8 <HAL_DMA_PollForTransfer+0x5a8>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d045      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4a25      	ldr	r2, [pc, #148]	@ (80141cc <HAL_DMA_PollForTransfer+0x5ac>)
 8014138:	4293      	cmp	r3, r2
 801413a:	d040      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4a23      	ldr	r2, [pc, #140]	@ (80141d0 <HAL_DMA_PollForTransfer+0x5b0>)
 8014142:	4293      	cmp	r3, r2
 8014144:	d03b      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a22      	ldr	r2, [pc, #136]	@ (80141d4 <HAL_DMA_PollForTransfer+0x5b4>)
 801414c:	4293      	cmp	r3, r2
 801414e:	d036      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	4a20      	ldr	r2, [pc, #128]	@ (80141d8 <HAL_DMA_PollForTransfer+0x5b8>)
 8014156:	4293      	cmp	r3, r2
 8014158:	d031      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	4a1f      	ldr	r2, [pc, #124]	@ (80141dc <HAL_DMA_PollForTransfer+0x5bc>)
 8014160:	4293      	cmp	r3, r2
 8014162:	d02c      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4a1d      	ldr	r2, [pc, #116]	@ (80141e0 <HAL_DMA_PollForTransfer+0x5c0>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d027      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	4a1c      	ldr	r2, [pc, #112]	@ (80141e4 <HAL_DMA_PollForTransfer+0x5c4>)
 8014174:	4293      	cmp	r3, r2
 8014176:	d022      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4a1a      	ldr	r2, [pc, #104]	@ (80141e8 <HAL_DMA_PollForTransfer+0x5c8>)
 801417e:	4293      	cmp	r3, r2
 8014180:	d01d      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	4a19      	ldr	r2, [pc, #100]	@ (80141ec <HAL_DMA_PollForTransfer+0x5cc>)
 8014188:	4293      	cmp	r3, r2
 801418a:	d018      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	4a17      	ldr	r2, [pc, #92]	@ (80141f0 <HAL_DMA_PollForTransfer+0x5d0>)
 8014192:	4293      	cmp	r3, r2
 8014194:	d013      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4a16      	ldr	r2, [pc, #88]	@ (80141f4 <HAL_DMA_PollForTransfer+0x5d4>)
 801419c:	4293      	cmp	r3, r2
 801419e:	d00e      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	4a14      	ldr	r2, [pc, #80]	@ (80141f8 <HAL_DMA_PollForTransfer+0x5d8>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d009      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4a13      	ldr	r2, [pc, #76]	@ (80141fc <HAL_DMA_PollForTransfer+0x5dc>)
 80141b0:	4293      	cmp	r3, r2
 80141b2:	d004      	beq.n	80141be <HAL_DMA_PollForTransfer+0x59e>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4a11      	ldr	r2, [pc, #68]	@ (8014200 <HAL_DMA_PollForTransfer+0x5e0>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d132      	bne.n	8014224 <HAL_DMA_PollForTransfer+0x604>
 80141be:	2301      	movs	r3, #1
 80141c0:	e031      	b.n	8014226 <HAL_DMA_PollForTransfer+0x606>
 80141c2:	bf00      	nop
 80141c4:	40020010 	.word	0x40020010
 80141c8:	40020028 	.word	0x40020028
 80141cc:	40020040 	.word	0x40020040
 80141d0:	40020058 	.word	0x40020058
 80141d4:	40020070 	.word	0x40020070
 80141d8:	40020088 	.word	0x40020088
 80141dc:	400200a0 	.word	0x400200a0
 80141e0:	400200b8 	.word	0x400200b8
 80141e4:	40020410 	.word	0x40020410
 80141e8:	40020428 	.word	0x40020428
 80141ec:	40020440 	.word	0x40020440
 80141f0:	40020458 	.word	0x40020458
 80141f4:	40020470 	.word	0x40020470
 80141f8:	40020488 	.word	0x40020488
 80141fc:	400204a0 	.word	0x400204a0
 8014200:	400204b8 	.word	0x400204b8
 8014204:	58025408 	.word	0x58025408
 8014208:	5802541c 	.word	0x5802541c
 801420c:	58025430 	.word	0x58025430
 8014210:	58025444 	.word	0x58025444
 8014214:	58025458 	.word	0x58025458
 8014218:	5802546c 	.word	0x5802546c
 801421c:	58025480 	.word	0x58025480
 8014220:	58025494 	.word	0x58025494
 8014224:	2300      	movs	r3, #0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d008      	beq.n	801423c <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801422e:	f003 031f 	and.w	r3, r3, #31
 8014232:	2230      	movs	r2, #48	@ 0x30
 8014234:	409a      	lsls	r2, r3
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	601a      	str	r2, [r3, #0]
 801423a:	e007      	b.n	801424c <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014240:	f003 031f 	and.w	r3, r3, #31
 8014244:	2202      	movs	r2, #2
 8014246:	409a      	lsls	r2, r3
 8014248:	69fb      	ldr	r3, [r7, #28]
 801424a:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2201      	movs	r2, #1
 8014250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	2200      	movs	r2, #0
 8014258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801425c:	e065      	b.n	801432a <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a34      	ldr	r2, [pc, #208]	@ (8014334 <HAL_DMA_PollForTransfer+0x714>)
 8014264:	4293      	cmp	r3, r2
 8014266:	d04a      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	4a32      	ldr	r2, [pc, #200]	@ (8014338 <HAL_DMA_PollForTransfer+0x718>)
 801426e:	4293      	cmp	r3, r2
 8014270:	d045      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	4a31      	ldr	r2, [pc, #196]	@ (801433c <HAL_DMA_PollForTransfer+0x71c>)
 8014278:	4293      	cmp	r3, r2
 801427a:	d040      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4a2f      	ldr	r2, [pc, #188]	@ (8014340 <HAL_DMA_PollForTransfer+0x720>)
 8014282:	4293      	cmp	r3, r2
 8014284:	d03b      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a2e      	ldr	r2, [pc, #184]	@ (8014344 <HAL_DMA_PollForTransfer+0x724>)
 801428c:	4293      	cmp	r3, r2
 801428e:	d036      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4a2c      	ldr	r2, [pc, #176]	@ (8014348 <HAL_DMA_PollForTransfer+0x728>)
 8014296:	4293      	cmp	r3, r2
 8014298:	d031      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4a2b      	ldr	r2, [pc, #172]	@ (801434c <HAL_DMA_PollForTransfer+0x72c>)
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d02c      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	4a29      	ldr	r2, [pc, #164]	@ (8014350 <HAL_DMA_PollForTransfer+0x730>)
 80142aa:	4293      	cmp	r3, r2
 80142ac:	d027      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4a28      	ldr	r2, [pc, #160]	@ (8014354 <HAL_DMA_PollForTransfer+0x734>)
 80142b4:	4293      	cmp	r3, r2
 80142b6:	d022      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4a26      	ldr	r2, [pc, #152]	@ (8014358 <HAL_DMA_PollForTransfer+0x738>)
 80142be:	4293      	cmp	r3, r2
 80142c0:	d01d      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a25      	ldr	r2, [pc, #148]	@ (801435c <HAL_DMA_PollForTransfer+0x73c>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d018      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4a23      	ldr	r2, [pc, #140]	@ (8014360 <HAL_DMA_PollForTransfer+0x740>)
 80142d2:	4293      	cmp	r3, r2
 80142d4:	d013      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4a22      	ldr	r2, [pc, #136]	@ (8014364 <HAL_DMA_PollForTransfer+0x744>)
 80142dc:	4293      	cmp	r3, r2
 80142de:	d00e      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	4a20      	ldr	r2, [pc, #128]	@ (8014368 <HAL_DMA_PollForTransfer+0x748>)
 80142e6:	4293      	cmp	r3, r2
 80142e8:	d009      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	4a1f      	ldr	r2, [pc, #124]	@ (801436c <HAL_DMA_PollForTransfer+0x74c>)
 80142f0:	4293      	cmp	r3, r2
 80142f2:	d004      	beq.n	80142fe <HAL_DMA_PollForTransfer+0x6de>
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	4a1d      	ldr	r2, [pc, #116]	@ (8014370 <HAL_DMA_PollForTransfer+0x750>)
 80142fa:	4293      	cmp	r3, r2
 80142fc:	d101      	bne.n	8014302 <HAL_DMA_PollForTransfer+0x6e2>
 80142fe:	2301      	movs	r3, #1
 8014300:	e000      	b.n	8014304 <HAL_DMA_PollForTransfer+0x6e4>
 8014302:	2300      	movs	r3, #0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d008      	beq.n	801431a <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801430c:	f003 031f 	and.w	r3, r3, #31
 8014310:	2210      	movs	r2, #16
 8014312:	409a      	lsls	r2, r3
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	601a      	str	r2, [r3, #0]
 8014318:	e007      	b.n	801432a <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801431e:	f003 031f 	and.w	r3, r3, #31
 8014322:	2204      	movs	r2, #4
 8014324:	409a      	lsls	r2, r3
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801432a:	7efb      	ldrb	r3, [r7, #27]
}
 801432c:	4618      	mov	r0, r3
 801432e:	3728      	adds	r7, #40	@ 0x28
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	40020010 	.word	0x40020010
 8014338:	40020028 	.word	0x40020028
 801433c:	40020040 	.word	0x40020040
 8014340:	40020058 	.word	0x40020058
 8014344:	40020070 	.word	0x40020070
 8014348:	40020088 	.word	0x40020088
 801434c:	400200a0 	.word	0x400200a0
 8014350:	400200b8 	.word	0x400200b8
 8014354:	40020410 	.word	0x40020410
 8014358:	40020428 	.word	0x40020428
 801435c:	40020440 	.word	0x40020440
 8014360:	40020458 	.word	0x40020458
 8014364:	40020470 	.word	0x40020470
 8014368:	40020488 	.word	0x40020488
 801436c:	400204a0 	.word	0x400204a0
 8014370:	400204b8 	.word	0x400204b8

08014374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014374:	b480      	push	{r7}
 8014376:	b087      	sub	sp, #28
 8014378:	af00      	add	r7, sp, #0
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
 8014380:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014386:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801438c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	4a7f      	ldr	r2, [pc, #508]	@ (8014590 <DMA_SetConfig+0x21c>)
 8014394:	4293      	cmp	r3, r2
 8014396:	d072      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4a7d      	ldr	r2, [pc, #500]	@ (8014594 <DMA_SetConfig+0x220>)
 801439e:	4293      	cmp	r3, r2
 80143a0:	d06d      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	4a7c      	ldr	r2, [pc, #496]	@ (8014598 <DMA_SetConfig+0x224>)
 80143a8:	4293      	cmp	r3, r2
 80143aa:	d068      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4a7a      	ldr	r2, [pc, #488]	@ (801459c <DMA_SetConfig+0x228>)
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d063      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	4a79      	ldr	r2, [pc, #484]	@ (80145a0 <DMA_SetConfig+0x22c>)
 80143bc:	4293      	cmp	r3, r2
 80143be:	d05e      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	4a77      	ldr	r2, [pc, #476]	@ (80145a4 <DMA_SetConfig+0x230>)
 80143c6:	4293      	cmp	r3, r2
 80143c8:	d059      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4a76      	ldr	r2, [pc, #472]	@ (80145a8 <DMA_SetConfig+0x234>)
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d054      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4a74      	ldr	r2, [pc, #464]	@ (80145ac <DMA_SetConfig+0x238>)
 80143da:	4293      	cmp	r3, r2
 80143dc:	d04f      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	4a73      	ldr	r2, [pc, #460]	@ (80145b0 <DMA_SetConfig+0x23c>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d04a      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	4a71      	ldr	r2, [pc, #452]	@ (80145b4 <DMA_SetConfig+0x240>)
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d045      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	4a70      	ldr	r2, [pc, #448]	@ (80145b8 <DMA_SetConfig+0x244>)
 80143f8:	4293      	cmp	r3, r2
 80143fa:	d040      	beq.n	801447e <DMA_SetConfig+0x10a>
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4a6e      	ldr	r2, [pc, #440]	@ (80145bc <DMA_SetConfig+0x248>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d03b      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	4a6d      	ldr	r2, [pc, #436]	@ (80145c0 <DMA_SetConfig+0x24c>)
 801440c:	4293      	cmp	r3, r2
 801440e:	d036      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a6b      	ldr	r2, [pc, #428]	@ (80145c4 <DMA_SetConfig+0x250>)
 8014416:	4293      	cmp	r3, r2
 8014418:	d031      	beq.n	801447e <DMA_SetConfig+0x10a>
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	4a6a      	ldr	r2, [pc, #424]	@ (80145c8 <DMA_SetConfig+0x254>)
 8014420:	4293      	cmp	r3, r2
 8014422:	d02c      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	4a68      	ldr	r2, [pc, #416]	@ (80145cc <DMA_SetConfig+0x258>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d027      	beq.n	801447e <DMA_SetConfig+0x10a>
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4a67      	ldr	r2, [pc, #412]	@ (80145d0 <DMA_SetConfig+0x25c>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d022      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4a65      	ldr	r2, [pc, #404]	@ (80145d4 <DMA_SetConfig+0x260>)
 801443e:	4293      	cmp	r3, r2
 8014440:	d01d      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a64      	ldr	r2, [pc, #400]	@ (80145d8 <DMA_SetConfig+0x264>)
 8014448:	4293      	cmp	r3, r2
 801444a:	d018      	beq.n	801447e <DMA_SetConfig+0x10a>
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4a62      	ldr	r2, [pc, #392]	@ (80145dc <DMA_SetConfig+0x268>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d013      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	4a61      	ldr	r2, [pc, #388]	@ (80145e0 <DMA_SetConfig+0x26c>)
 801445c:	4293      	cmp	r3, r2
 801445e:	d00e      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	4a5f      	ldr	r2, [pc, #380]	@ (80145e4 <DMA_SetConfig+0x270>)
 8014466:	4293      	cmp	r3, r2
 8014468:	d009      	beq.n	801447e <DMA_SetConfig+0x10a>
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	4a5e      	ldr	r2, [pc, #376]	@ (80145e8 <DMA_SetConfig+0x274>)
 8014470:	4293      	cmp	r3, r2
 8014472:	d004      	beq.n	801447e <DMA_SetConfig+0x10a>
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4a5c      	ldr	r2, [pc, #368]	@ (80145ec <DMA_SetConfig+0x278>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d101      	bne.n	8014482 <DMA_SetConfig+0x10e>
 801447e:	2301      	movs	r3, #1
 8014480:	e000      	b.n	8014484 <DMA_SetConfig+0x110>
 8014482:	2300      	movs	r3, #0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00d      	beq.n	80144a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014490:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014496:	2b00      	cmp	r3, #0
 8014498:	d004      	beq.n	80144a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80144a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4a39      	ldr	r2, [pc, #228]	@ (8014590 <DMA_SetConfig+0x21c>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d04a      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4a38      	ldr	r2, [pc, #224]	@ (8014594 <DMA_SetConfig+0x220>)
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d045      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4a36      	ldr	r2, [pc, #216]	@ (8014598 <DMA_SetConfig+0x224>)
 80144be:	4293      	cmp	r3, r2
 80144c0:	d040      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	4a35      	ldr	r2, [pc, #212]	@ (801459c <DMA_SetConfig+0x228>)
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d03b      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4a33      	ldr	r2, [pc, #204]	@ (80145a0 <DMA_SetConfig+0x22c>)
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d036      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4a32      	ldr	r2, [pc, #200]	@ (80145a4 <DMA_SetConfig+0x230>)
 80144dc:	4293      	cmp	r3, r2
 80144de:	d031      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	4a30      	ldr	r2, [pc, #192]	@ (80145a8 <DMA_SetConfig+0x234>)
 80144e6:	4293      	cmp	r3, r2
 80144e8:	d02c      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	4a2f      	ldr	r2, [pc, #188]	@ (80145ac <DMA_SetConfig+0x238>)
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d027      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	4a2d      	ldr	r2, [pc, #180]	@ (80145b0 <DMA_SetConfig+0x23c>)
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d022      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	4a2c      	ldr	r2, [pc, #176]	@ (80145b4 <DMA_SetConfig+0x240>)
 8014504:	4293      	cmp	r3, r2
 8014506:	d01d      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4a2a      	ldr	r2, [pc, #168]	@ (80145b8 <DMA_SetConfig+0x244>)
 801450e:	4293      	cmp	r3, r2
 8014510:	d018      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4a29      	ldr	r2, [pc, #164]	@ (80145bc <DMA_SetConfig+0x248>)
 8014518:	4293      	cmp	r3, r2
 801451a:	d013      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a27      	ldr	r2, [pc, #156]	@ (80145c0 <DMA_SetConfig+0x24c>)
 8014522:	4293      	cmp	r3, r2
 8014524:	d00e      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4a26      	ldr	r2, [pc, #152]	@ (80145c4 <DMA_SetConfig+0x250>)
 801452c:	4293      	cmp	r3, r2
 801452e:	d009      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	4a24      	ldr	r2, [pc, #144]	@ (80145c8 <DMA_SetConfig+0x254>)
 8014536:	4293      	cmp	r3, r2
 8014538:	d004      	beq.n	8014544 <DMA_SetConfig+0x1d0>
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	4a23      	ldr	r2, [pc, #140]	@ (80145cc <DMA_SetConfig+0x258>)
 8014540:	4293      	cmp	r3, r2
 8014542:	d101      	bne.n	8014548 <DMA_SetConfig+0x1d4>
 8014544:	2301      	movs	r3, #1
 8014546:	e000      	b.n	801454a <DMA_SetConfig+0x1d6>
 8014548:	2300      	movs	r3, #0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d059      	beq.n	8014602 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014552:	f003 031f 	and.w	r3, r3, #31
 8014556:	223f      	movs	r2, #63	@ 0x3f
 8014558:	409a      	lsls	r2, r3
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801456c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	683a      	ldr	r2, [r7, #0]
 8014574:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	689b      	ldr	r3, [r3, #8]
 801457a:	2b40      	cmp	r3, #64	@ 0x40
 801457c:	d138      	bne.n	80145f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801458e:	e086      	b.n	801469e <DMA_SetConfig+0x32a>
 8014590:	40020010 	.word	0x40020010
 8014594:	40020028 	.word	0x40020028
 8014598:	40020040 	.word	0x40020040
 801459c:	40020058 	.word	0x40020058
 80145a0:	40020070 	.word	0x40020070
 80145a4:	40020088 	.word	0x40020088
 80145a8:	400200a0 	.word	0x400200a0
 80145ac:	400200b8 	.word	0x400200b8
 80145b0:	40020410 	.word	0x40020410
 80145b4:	40020428 	.word	0x40020428
 80145b8:	40020440 	.word	0x40020440
 80145bc:	40020458 	.word	0x40020458
 80145c0:	40020470 	.word	0x40020470
 80145c4:	40020488 	.word	0x40020488
 80145c8:	400204a0 	.word	0x400204a0
 80145cc:	400204b8 	.word	0x400204b8
 80145d0:	58025408 	.word	0x58025408
 80145d4:	5802541c 	.word	0x5802541c
 80145d8:	58025430 	.word	0x58025430
 80145dc:	58025444 	.word	0x58025444
 80145e0:	58025458 	.word	0x58025458
 80145e4:	5802546c 	.word	0x5802546c
 80145e8:	58025480 	.word	0x58025480
 80145ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	68ba      	ldr	r2, [r7, #8]
 80145f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	60da      	str	r2, [r3, #12]
}
 8014600:	e04d      	b.n	801469e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a29      	ldr	r2, [pc, #164]	@ (80146ac <DMA_SetConfig+0x338>)
 8014608:	4293      	cmp	r3, r2
 801460a:	d022      	beq.n	8014652 <DMA_SetConfig+0x2de>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a27      	ldr	r2, [pc, #156]	@ (80146b0 <DMA_SetConfig+0x33c>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d01d      	beq.n	8014652 <DMA_SetConfig+0x2de>
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a26      	ldr	r2, [pc, #152]	@ (80146b4 <DMA_SetConfig+0x340>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d018      	beq.n	8014652 <DMA_SetConfig+0x2de>
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a24      	ldr	r2, [pc, #144]	@ (80146b8 <DMA_SetConfig+0x344>)
 8014626:	4293      	cmp	r3, r2
 8014628:	d013      	beq.n	8014652 <DMA_SetConfig+0x2de>
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a23      	ldr	r2, [pc, #140]	@ (80146bc <DMA_SetConfig+0x348>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d00e      	beq.n	8014652 <DMA_SetConfig+0x2de>
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4a21      	ldr	r2, [pc, #132]	@ (80146c0 <DMA_SetConfig+0x34c>)
 801463a:	4293      	cmp	r3, r2
 801463c:	d009      	beq.n	8014652 <DMA_SetConfig+0x2de>
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4a20      	ldr	r2, [pc, #128]	@ (80146c4 <DMA_SetConfig+0x350>)
 8014644:	4293      	cmp	r3, r2
 8014646:	d004      	beq.n	8014652 <DMA_SetConfig+0x2de>
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4a1e      	ldr	r2, [pc, #120]	@ (80146c8 <DMA_SetConfig+0x354>)
 801464e:	4293      	cmp	r3, r2
 8014650:	d101      	bne.n	8014656 <DMA_SetConfig+0x2e2>
 8014652:	2301      	movs	r3, #1
 8014654:	e000      	b.n	8014658 <DMA_SetConfig+0x2e4>
 8014656:	2300      	movs	r3, #0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d020      	beq.n	801469e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014660:	f003 031f 	and.w	r3, r3, #31
 8014664:	2201      	movs	r2, #1
 8014666:	409a      	lsls	r2, r3
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	683a      	ldr	r2, [r7, #0]
 8014672:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	689b      	ldr	r3, [r3, #8]
 8014678:	2b40      	cmp	r3, #64	@ 0x40
 801467a:	d108      	bne.n	801468e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	68ba      	ldr	r2, [r7, #8]
 801468a:	60da      	str	r2, [r3, #12]
}
 801468c:	e007      	b.n	801469e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	60da      	str	r2, [r3, #12]
}
 801469e:	bf00      	nop
 80146a0:	371c      	adds	r7, #28
 80146a2:	46bd      	mov	sp, r7
 80146a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	58025408 	.word	0x58025408
 80146b0:	5802541c 	.word	0x5802541c
 80146b4:	58025430 	.word	0x58025430
 80146b8:	58025444 	.word	0x58025444
 80146bc:	58025458 	.word	0x58025458
 80146c0:	5802546c 	.word	0x5802546c
 80146c4:	58025480 	.word	0x58025480
 80146c8:	58025494 	.word	0x58025494

080146cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	4a42      	ldr	r2, [pc, #264]	@ (80147e4 <DMA_CalcBaseAndBitshift+0x118>)
 80146da:	4293      	cmp	r3, r2
 80146dc:	d04a      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	4a41      	ldr	r2, [pc, #260]	@ (80147e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d045      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4a3f      	ldr	r2, [pc, #252]	@ (80147ec <DMA_CalcBaseAndBitshift+0x120>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d040      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	4a3e      	ldr	r2, [pc, #248]	@ (80147f0 <DMA_CalcBaseAndBitshift+0x124>)
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d03b      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4a3c      	ldr	r2, [pc, #240]	@ (80147f4 <DMA_CalcBaseAndBitshift+0x128>)
 8014702:	4293      	cmp	r3, r2
 8014704:	d036      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	4a3b      	ldr	r2, [pc, #236]	@ (80147f8 <DMA_CalcBaseAndBitshift+0x12c>)
 801470c:	4293      	cmp	r3, r2
 801470e:	d031      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	4a39      	ldr	r2, [pc, #228]	@ (80147fc <DMA_CalcBaseAndBitshift+0x130>)
 8014716:	4293      	cmp	r3, r2
 8014718:	d02c      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	4a38      	ldr	r2, [pc, #224]	@ (8014800 <DMA_CalcBaseAndBitshift+0x134>)
 8014720:	4293      	cmp	r3, r2
 8014722:	d027      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4a36      	ldr	r2, [pc, #216]	@ (8014804 <DMA_CalcBaseAndBitshift+0x138>)
 801472a:	4293      	cmp	r3, r2
 801472c:	d022      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4a35      	ldr	r2, [pc, #212]	@ (8014808 <DMA_CalcBaseAndBitshift+0x13c>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d01d      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	4a33      	ldr	r2, [pc, #204]	@ (801480c <DMA_CalcBaseAndBitshift+0x140>)
 801473e:	4293      	cmp	r3, r2
 8014740:	d018      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4a32      	ldr	r2, [pc, #200]	@ (8014810 <DMA_CalcBaseAndBitshift+0x144>)
 8014748:	4293      	cmp	r3, r2
 801474a:	d013      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4a30      	ldr	r2, [pc, #192]	@ (8014814 <DMA_CalcBaseAndBitshift+0x148>)
 8014752:	4293      	cmp	r3, r2
 8014754:	d00e      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	4a2f      	ldr	r2, [pc, #188]	@ (8014818 <DMA_CalcBaseAndBitshift+0x14c>)
 801475c:	4293      	cmp	r3, r2
 801475e:	d009      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4a2d      	ldr	r2, [pc, #180]	@ (801481c <DMA_CalcBaseAndBitshift+0x150>)
 8014766:	4293      	cmp	r3, r2
 8014768:	d004      	beq.n	8014774 <DMA_CalcBaseAndBitshift+0xa8>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	4a2c      	ldr	r2, [pc, #176]	@ (8014820 <DMA_CalcBaseAndBitshift+0x154>)
 8014770:	4293      	cmp	r3, r2
 8014772:	d101      	bne.n	8014778 <DMA_CalcBaseAndBitshift+0xac>
 8014774:	2301      	movs	r3, #1
 8014776:	e000      	b.n	801477a <DMA_CalcBaseAndBitshift+0xae>
 8014778:	2300      	movs	r3, #0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d024      	beq.n	80147c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	b2db      	uxtb	r3, r3
 8014784:	3b10      	subs	r3, #16
 8014786:	4a27      	ldr	r2, [pc, #156]	@ (8014824 <DMA_CalcBaseAndBitshift+0x158>)
 8014788:	fba2 2303 	umull	r2, r3, r2, r3
 801478c:	091b      	lsrs	r3, r3, #4
 801478e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	f003 0307 	and.w	r3, r3, #7
 8014796:	4a24      	ldr	r2, [pc, #144]	@ (8014828 <DMA_CalcBaseAndBitshift+0x15c>)
 8014798:	5cd3      	ldrb	r3, [r2, r3]
 801479a:	461a      	mov	r2, r3
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2b03      	cmp	r3, #3
 80147a4:	d908      	bls.n	80147b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	461a      	mov	r2, r3
 80147ac:	4b1f      	ldr	r3, [pc, #124]	@ (801482c <DMA_CalcBaseAndBitshift+0x160>)
 80147ae:	4013      	ands	r3, r2
 80147b0:	1d1a      	adds	r2, r3, #4
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80147b6:	e00d      	b.n	80147d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	461a      	mov	r2, r3
 80147be:	4b1b      	ldr	r3, [pc, #108]	@ (801482c <DMA_CalcBaseAndBitshift+0x160>)
 80147c0:	4013      	ands	r3, r2
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80147c6:	e005      	b.n	80147d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e2:	4770      	bx	lr
 80147e4:	40020010 	.word	0x40020010
 80147e8:	40020028 	.word	0x40020028
 80147ec:	40020040 	.word	0x40020040
 80147f0:	40020058 	.word	0x40020058
 80147f4:	40020070 	.word	0x40020070
 80147f8:	40020088 	.word	0x40020088
 80147fc:	400200a0 	.word	0x400200a0
 8014800:	400200b8 	.word	0x400200b8
 8014804:	40020410 	.word	0x40020410
 8014808:	40020428 	.word	0x40020428
 801480c:	40020440 	.word	0x40020440
 8014810:	40020458 	.word	0x40020458
 8014814:	40020470 	.word	0x40020470
 8014818:	40020488 	.word	0x40020488
 801481c:	400204a0 	.word	0x400204a0
 8014820:	400204b8 	.word	0x400204b8
 8014824:	aaaaaaab 	.word	0xaaaaaaab
 8014828:	08021a0c 	.word	0x08021a0c
 801482c:	fffffc00 	.word	0xfffffc00

08014830 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8014830:	b480      	push	{r7}
 8014832:	b085      	sub	sp, #20
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014838:	2300      	movs	r3, #0
 801483a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	699b      	ldr	r3, [r3, #24]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d120      	bne.n	8014886 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014848:	2b03      	cmp	r3, #3
 801484a:	d858      	bhi.n	80148fe <DMA_CheckFifoParam+0xce>
 801484c:	a201      	add	r2, pc, #4	@ (adr r2, 8014854 <DMA_CheckFifoParam+0x24>)
 801484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014852:	bf00      	nop
 8014854:	08014865 	.word	0x08014865
 8014858:	08014877 	.word	0x08014877
 801485c:	08014865 	.word	0x08014865
 8014860:	080148ff 	.word	0x080148ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801486c:	2b00      	cmp	r3, #0
 801486e:	d048      	beq.n	8014902 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8014870:	2301      	movs	r3, #1
 8014872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014874:	e045      	b.n	8014902 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801487a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801487e:	d142      	bne.n	8014906 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8014880:	2301      	movs	r3, #1
 8014882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8014884:	e03f      	b.n	8014906 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	699b      	ldr	r3, [r3, #24]
 801488a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801488e:	d123      	bne.n	80148d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014894:	2b03      	cmp	r3, #3
 8014896:	d838      	bhi.n	801490a <DMA_CheckFifoParam+0xda>
 8014898:	a201      	add	r2, pc, #4	@ (adr r2, 80148a0 <DMA_CheckFifoParam+0x70>)
 801489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801489e:	bf00      	nop
 80148a0:	080148b1 	.word	0x080148b1
 80148a4:	080148b7 	.word	0x080148b7
 80148a8:	080148b1 	.word	0x080148b1
 80148ac:	080148c9 	.word	0x080148c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80148b0:	2301      	movs	r3, #1
 80148b2:	73fb      	strb	r3, [r7, #15]
        break;
 80148b4:	e030      	b.n	8014918 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d025      	beq.n	801490e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80148c2:	2301      	movs	r3, #1
 80148c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80148c6:	e022      	b.n	801490e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80148d0:	d11f      	bne.n	8014912 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80148d2:	2301      	movs	r3, #1
 80148d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80148d6:	e01c      	b.n	8014912 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148dc:	2b02      	cmp	r3, #2
 80148de:	d902      	bls.n	80148e6 <DMA_CheckFifoParam+0xb6>
 80148e0:	2b03      	cmp	r3, #3
 80148e2:	d003      	beq.n	80148ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80148e4:	e018      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80148e6:	2301      	movs	r3, #1
 80148e8:	73fb      	strb	r3, [r7, #15]
        break;
 80148ea:	e015      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00e      	beq.n	8014916 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80148f8:	2301      	movs	r3, #1
 80148fa:	73fb      	strb	r3, [r7, #15]
    break;
 80148fc:	e00b      	b.n	8014916 <DMA_CheckFifoParam+0xe6>
        break;
 80148fe:	bf00      	nop
 8014900:	e00a      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        break;
 8014902:	bf00      	nop
 8014904:	e008      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        break;
 8014906:	bf00      	nop
 8014908:	e006      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        break;
 801490a:	bf00      	nop
 801490c:	e004      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        break;
 801490e:	bf00      	nop
 8014910:	e002      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
        break;
 8014912:	bf00      	nop
 8014914:	e000      	b.n	8014918 <DMA_CheckFifoParam+0xe8>
    break;
 8014916:	bf00      	nop
    }
  }

  return status;
 8014918:	7bfb      	ldrb	r3, [r7, #15]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3714      	adds	r7, #20
 801491e:	46bd      	mov	sp, r7
 8014920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop

08014928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4a38      	ldr	r2, [pc, #224]	@ (8014a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801493c:	4293      	cmp	r3, r2
 801493e:	d022      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a36      	ldr	r2, [pc, #216]	@ (8014a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d01d      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	4a35      	ldr	r2, [pc, #212]	@ (8014a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8014950:	4293      	cmp	r3, r2
 8014952:	d018      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4a33      	ldr	r2, [pc, #204]	@ (8014a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d013      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	4a32      	ldr	r2, [pc, #200]	@ (8014a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8014964:	4293      	cmp	r3, r2
 8014966:	d00e      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4a30      	ldr	r2, [pc, #192]	@ (8014a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801496e:	4293      	cmp	r3, r2
 8014970:	d009      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4a2f      	ldr	r2, [pc, #188]	@ (8014a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d004      	beq.n	8014986 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	4a2d      	ldr	r2, [pc, #180]	@ (8014a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d101      	bne.n	801498a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8014986:	2301      	movs	r3, #1
 8014988:	e000      	b.n	801498c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801498a:	2300      	movs	r3, #0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d01a      	beq.n	80149c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	b2db      	uxtb	r3, r3
 8014996:	3b08      	subs	r3, #8
 8014998:	4a28      	ldr	r2, [pc, #160]	@ (8014a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801499a:	fba2 2303 	umull	r2, r3, r2, r3
 801499e:	091b      	lsrs	r3, r3, #4
 80149a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	4b26      	ldr	r3, [pc, #152]	@ (8014a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80149a6:	4413      	add	r3, r2
 80149a8:	009b      	lsls	r3, r3, #2
 80149aa:	461a      	mov	r2, r3
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	4a24      	ldr	r2, [pc, #144]	@ (8014a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80149b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f003 031f 	and.w	r3, r3, #31
 80149bc:	2201      	movs	r2, #1
 80149be:	409a      	lsls	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80149c4:	e024      	b.n	8014a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	3b10      	subs	r3, #16
 80149ce:	4a1e      	ldr	r2, [pc, #120]	@ (8014a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80149d0:	fba2 2303 	umull	r2, r3, r2, r3
 80149d4:	091b      	lsrs	r3, r3, #4
 80149d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	4a1c      	ldr	r2, [pc, #112]	@ (8014a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80149dc:	4293      	cmp	r3, r2
 80149de:	d806      	bhi.n	80149ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	4a1b      	ldr	r2, [pc, #108]	@ (8014a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80149e4:	4293      	cmp	r3, r2
 80149e6:	d902      	bls.n	80149ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	3308      	adds	r3, #8
 80149ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80149ee:	68fa      	ldr	r2, [r7, #12]
 80149f0:	4b18      	ldr	r3, [pc, #96]	@ (8014a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80149f2:	4413      	add	r3, r2
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	461a      	mov	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	4a16      	ldr	r2, [pc, #88]	@ (8014a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8014a00:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f003 031f 	and.w	r3, r3, #31
 8014a08:	2201      	movs	r2, #1
 8014a0a:	409a      	lsls	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014a10:	bf00      	nop
 8014a12:	3714      	adds	r7, #20
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr
 8014a1c:	58025408 	.word	0x58025408
 8014a20:	5802541c 	.word	0x5802541c
 8014a24:	58025430 	.word	0x58025430
 8014a28:	58025444 	.word	0x58025444
 8014a2c:	58025458 	.word	0x58025458
 8014a30:	5802546c 	.word	0x5802546c
 8014a34:	58025480 	.word	0x58025480
 8014a38:	58025494 	.word	0x58025494
 8014a3c:	cccccccd 	.word	0xcccccccd
 8014a40:	16009600 	.word	0x16009600
 8014a44:	58025880 	.word	0x58025880
 8014a48:	aaaaaaab 	.word	0xaaaaaaab
 8014a4c:	400204b8 	.word	0x400204b8
 8014a50:	4002040f 	.word	0x4002040f
 8014a54:	10008200 	.word	0x10008200
 8014a58:	40020880 	.word	0x40020880

08014a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	685b      	ldr	r3, [r3, #4]
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d04a      	beq.n	8014b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2b08      	cmp	r3, #8
 8014a76:	d847      	bhi.n	8014b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4a25      	ldr	r2, [pc, #148]	@ (8014b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d022      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4a24      	ldr	r2, [pc, #144]	@ (8014b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d01d      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a22      	ldr	r2, [pc, #136]	@ (8014b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d018      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4a21      	ldr	r2, [pc, #132]	@ (8014b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d013      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8014b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d00e      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	4a1e      	ldr	r2, [pc, #120]	@ (8014b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d009      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8014b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d004      	beq.n	8014ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8014b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d101      	bne.n	8014acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8014ac8:	2301      	movs	r3, #1
 8014aca:	e000      	b.n	8014ace <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8014acc:	2300      	movs	r3, #0
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d00a      	beq.n	8014ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8014ad2:	68fa      	ldr	r2, [r7, #12]
 8014ad4:	4b17      	ldr	r3, [pc, #92]	@ (8014b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8014ad6:	4413      	add	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	461a      	mov	r2, r3
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	4a15      	ldr	r2, [pc, #84]	@ (8014b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8014ae4:	671a      	str	r2, [r3, #112]	@ 0x70
 8014ae6:	e009      	b.n	8014afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8014ae8:	68fa      	ldr	r2, [r7, #12]
 8014aea:	4b14      	ldr	r3, [pc, #80]	@ (8014b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8014aec:	4413      	add	r3, r2
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	461a      	mov	r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4a11      	ldr	r2, [pc, #68]	@ (8014b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8014afa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	3b01      	subs	r3, #1
 8014b00:	2201      	movs	r2, #1
 8014b02:	409a      	lsls	r2, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8014b08:	bf00      	nop
 8014b0a:	3714      	adds	r7, #20
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr
 8014b14:	58025408 	.word	0x58025408
 8014b18:	5802541c 	.word	0x5802541c
 8014b1c:	58025430 	.word	0x58025430
 8014b20:	58025444 	.word	0x58025444
 8014b24:	58025458 	.word	0x58025458
 8014b28:	5802546c 	.word	0x5802546c
 8014b2c:	58025480 	.word	0x58025480
 8014b30:	58025494 	.word	0x58025494
 8014b34:	1600963f 	.word	0x1600963f
 8014b38:	58025940 	.word	0x58025940
 8014b3c:	1000823f 	.word	0x1000823f
 8014b40:	40020940 	.word	0x40020940

08014b44 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b086      	sub	sp, #24
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	607a      	str	r2, [r7, #4]
 8014b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	689b      	ldr	r3, [r3, #8]
 8014b5a:	2b80      	cmp	r3, #128	@ 0x80
 8014b5c:	d105      	bne.n	8014b6a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014b64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8014b66:	2301      	movs	r3, #1
 8014b68:	e315      	b.n	8015196 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d101      	bne.n	8014b78 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8014b74:	2302      	movs	r3, #2
 8014b76:	e30e      	b.n	8015196 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	f040 82fd 	bne.w	8015188 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2202      	movs	r2, #2
 8014b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	4a82      	ldr	r2, [pc, #520]	@ (8014dac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8014ba2:	4293      	cmp	r3, r2
 8014ba4:	d04a      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	4a81      	ldr	r2, [pc, #516]	@ (8014db0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8014bac:	4293      	cmp	r3, r2
 8014bae:	d045      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	4a7f      	ldr	r2, [pc, #508]	@ (8014db4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d040      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8014db8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	d03b      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	4a7c      	ldr	r2, [pc, #496]	@ (8014dbc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8014bca:	4293      	cmp	r3, r2
 8014bcc:	d036      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	4a7b      	ldr	r2, [pc, #492]	@ (8014dc0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	d031      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	4a79      	ldr	r2, [pc, #484]	@ (8014dc4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d02c      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	4a78      	ldr	r2, [pc, #480]	@ (8014dc8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8014be8:	4293      	cmp	r3, r2
 8014bea:	d027      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4a76      	ldr	r2, [pc, #472]	@ (8014dcc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d022      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a75      	ldr	r2, [pc, #468]	@ (8014dd0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d01d      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4a73      	ldr	r2, [pc, #460]	@ (8014dd4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d018      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	4a72      	ldr	r2, [pc, #456]	@ (8014dd8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8014c10:	4293      	cmp	r3, r2
 8014c12:	d013      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4a70      	ldr	r2, [pc, #448]	@ (8014ddc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d00e      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4a6f      	ldr	r2, [pc, #444]	@ (8014de0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8014c24:	4293      	cmp	r3, r2
 8014c26:	d009      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a6d      	ldr	r2, [pc, #436]	@ (8014de4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d004      	beq.n	8014c3c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	4a6c      	ldr	r2, [pc, #432]	@ (8014de8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d101      	bne.n	8014c40 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e000      	b.n	8014c42 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8014c40:	2300      	movs	r3, #0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d018      	beq.n	8014c78 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014c54:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	683a      	ldr	r2, [r7, #0]
 8014c5c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c62:	3308      	adds	r3, #8
 8014c64:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c6a:	f003 031f 	and.w	r3, r3, #31
 8014c6e:	223f      	movs	r2, #63	@ 0x3f
 8014c70:	409a      	lsls	r2, r3
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	601a      	str	r2, [r3, #0]
 8014c76:	e018      	b.n	8014caa <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	6819      	ldr	r1, [r3, #0]
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	f248 0320 	movw	r3, #32800	@ 0x8020
 8014c86:	430b      	orrs	r3, r1
 8014c88:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	683a      	ldr	r2, [r7, #0]
 8014c90:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c96:	3304      	adds	r3, #4
 8014c98:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c9e:	f003 031f 	and.w	r3, r3, #31
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	409a      	lsls	r2, r3
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8014caa:	6a3b      	ldr	r3, [r7, #32]
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	68b9      	ldr	r1, [r7, #8]
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f000 faa5 	bl	8015200 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4a3c      	ldr	r2, [pc, #240]	@ (8014dac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d072      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8014db0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d06d      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	4a39      	ldr	r2, [pc, #228]	@ (8014db4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d068      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4a37      	ldr	r2, [pc, #220]	@ (8014db8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d063      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	4a36      	ldr	r2, [pc, #216]	@ (8014dbc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d05e      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4a34      	ldr	r2, [pc, #208]	@ (8014dc0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d059      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4a33      	ldr	r2, [pc, #204]	@ (8014dc4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	d054      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4a31      	ldr	r2, [pc, #196]	@ (8014dc8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8014d02:	4293      	cmp	r3, r2
 8014d04:	d04f      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	4a30      	ldr	r2, [pc, #192]	@ (8014dcc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d04a      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4a2e      	ldr	r2, [pc, #184]	@ (8014dd0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d045      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8014dd4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d040      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4a2b      	ldr	r2, [pc, #172]	@ (8014dd8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d03b      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	4a2a      	ldr	r2, [pc, #168]	@ (8014ddc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d036      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	4a28      	ldr	r2, [pc, #160]	@ (8014de0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d031      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	4a27      	ldr	r2, [pc, #156]	@ (8014de4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d02c      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	4a25      	ldr	r2, [pc, #148]	@ (8014de8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8014d52:	4293      	cmp	r3, r2
 8014d54:	d027      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4a24      	ldr	r2, [pc, #144]	@ (8014dec <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d022      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4a22      	ldr	r2, [pc, #136]	@ (8014df0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8014d66:	4293      	cmp	r3, r2
 8014d68:	d01d      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	4a21      	ldr	r2, [pc, #132]	@ (8014df4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d018      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a1f      	ldr	r2, [pc, #124]	@ (8014df8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d013      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	4a1e      	ldr	r2, [pc, #120]	@ (8014dfc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d00e      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8014e00 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d009      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	4a1b      	ldr	r2, [pc, #108]	@ (8014e04 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d004      	beq.n	8014da6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	4a19      	ldr	r2, [pc, #100]	@ (8014e08 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8014da2:	4293      	cmp	r3, r2
 8014da4:	d132      	bne.n	8014e0c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8014da6:	2301      	movs	r3, #1
 8014da8:	e031      	b.n	8014e0e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8014daa:	bf00      	nop
 8014dac:	40020010 	.word	0x40020010
 8014db0:	40020028 	.word	0x40020028
 8014db4:	40020040 	.word	0x40020040
 8014db8:	40020058 	.word	0x40020058
 8014dbc:	40020070 	.word	0x40020070
 8014dc0:	40020088 	.word	0x40020088
 8014dc4:	400200a0 	.word	0x400200a0
 8014dc8:	400200b8 	.word	0x400200b8
 8014dcc:	40020410 	.word	0x40020410
 8014dd0:	40020428 	.word	0x40020428
 8014dd4:	40020440 	.word	0x40020440
 8014dd8:	40020458 	.word	0x40020458
 8014ddc:	40020470 	.word	0x40020470
 8014de0:	40020488 	.word	0x40020488
 8014de4:	400204a0 	.word	0x400204a0
 8014de8:	400204b8 	.word	0x400204b8
 8014dec:	58025408 	.word	0x58025408
 8014df0:	5802541c 	.word	0x5802541c
 8014df4:	58025430 	.word	0x58025430
 8014df8:	58025444 	.word	0x58025444
 8014dfc:	58025458 	.word	0x58025458
 8014e00:	5802546c 	.word	0x5802546c
 8014e04:	58025480 	.word	0x58025480
 8014e08:	58025494 	.word	0x58025494
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d00d      	beq.n	8014e2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e16:	68fa      	ldr	r2, [r7, #12]
 8014e18:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014e1a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d004      	beq.n	8014e2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8014e2c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	4a3b      	ldr	r2, [pc, #236]	@ (8014f20 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d04a      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4a39      	ldr	r2, [pc, #228]	@ (8014f24 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8014e3e:	4293      	cmp	r3, r2
 8014e40:	d045      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4a38      	ldr	r2, [pc, #224]	@ (8014f28 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d040      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4a36      	ldr	r2, [pc, #216]	@ (8014f2c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d03b      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4a35      	ldr	r2, [pc, #212]	@ (8014f30 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d036      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	4a33      	ldr	r2, [pc, #204]	@ (8014f34 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d031      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	4a32      	ldr	r2, [pc, #200]	@ (8014f38 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8014e70:	4293      	cmp	r3, r2
 8014e72:	d02c      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4a30      	ldr	r2, [pc, #192]	@ (8014f3c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d027      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	4a2f      	ldr	r2, [pc, #188]	@ (8014f40 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d022      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8014f44 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d01d      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	4a2c      	ldr	r2, [pc, #176]	@ (8014f48 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	d018      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8014f4c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8014ea2:	4293      	cmp	r3, r2
 8014ea4:	d013      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	4a29      	ldr	r2, [pc, #164]	@ (8014f50 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d00e      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4a27      	ldr	r2, [pc, #156]	@ (8014f54 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	d009      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4a26      	ldr	r2, [pc, #152]	@ (8014f58 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8014ec0:	4293      	cmp	r3, r2
 8014ec2:	d004      	beq.n	8014ece <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	4a24      	ldr	r2, [pc, #144]	@ (8014f5c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8014eca:	4293      	cmp	r3, r2
 8014ecc:	d101      	bne.n	8014ed2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	e000      	b.n	8014ed4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d043      	beq.n	8014f60 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	f023 021e 	bic.w	r2, r3, #30
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	f042 0216 	orr.w	r2, r2, #22
 8014eea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	695a      	ldr	r2, [r3, #20]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014efa:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d103      	bne.n	8014f0c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d043      	beq.n	8014f94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	f042 0208 	orr.w	r2, r2, #8
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	e03a      	b.n	8014f94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8014f1e:	bf00      	nop
 8014f20:	40020010 	.word	0x40020010
 8014f24:	40020028 	.word	0x40020028
 8014f28:	40020040 	.word	0x40020040
 8014f2c:	40020058 	.word	0x40020058
 8014f30:	40020070 	.word	0x40020070
 8014f34:	40020088 	.word	0x40020088
 8014f38:	400200a0 	.word	0x400200a0
 8014f3c:	400200b8 	.word	0x400200b8
 8014f40:	40020410 	.word	0x40020410
 8014f44:	40020428 	.word	0x40020428
 8014f48:	40020440 	.word	0x40020440
 8014f4c:	40020458 	.word	0x40020458
 8014f50:	40020470 	.word	0x40020470
 8014f54:	40020488 	.word	0x40020488
 8014f58:	400204a0 	.word	0x400204a0
 8014f5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	f023 020e 	bic.w	r2, r3, #14
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f042 020a 	orr.w	r2, r2, #10
 8014f72:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d103      	bne.n	8014f84 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d007      	beq.n	8014f94 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f042 0204 	orr.w	r2, r2, #4
 8014f92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	4a81      	ldr	r2, [pc, #516]	@ (80151a0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	d072      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	4a80      	ldr	r2, [pc, #512]	@ (80151a4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d06d      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	4a7e      	ldr	r2, [pc, #504]	@ (80151a8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	d068      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80151ac <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	d063      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80151b0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	d05e      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	4a7a      	ldr	r2, [pc, #488]	@ (80151b4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d059      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4a78      	ldr	r2, [pc, #480]	@ (80151b8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d054      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	4a77      	ldr	r2, [pc, #476]	@ (80151bc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	d04f      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4a75      	ldr	r2, [pc, #468]	@ (80151c0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8014fea:	4293      	cmp	r3, r2
 8014fec:	d04a      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	4a74      	ldr	r2, [pc, #464]	@ (80151c4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	d045      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a72      	ldr	r2, [pc, #456]	@ (80151c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d040      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	4a71      	ldr	r2, [pc, #452]	@ (80151cc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8015008:	4293      	cmp	r3, r2
 801500a:	d03b      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4a6f      	ldr	r2, [pc, #444]	@ (80151d0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d036      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	4a6e      	ldr	r2, [pc, #440]	@ (80151d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801501c:	4293      	cmp	r3, r2
 801501e:	d031      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4a6c      	ldr	r2, [pc, #432]	@ (80151d8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d02c      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	4a6b      	ldr	r2, [pc, #428]	@ (80151dc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8015030:	4293      	cmp	r3, r2
 8015032:	d027      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	4a69      	ldr	r2, [pc, #420]	@ (80151e0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d022      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4a68      	ldr	r2, [pc, #416]	@ (80151e4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8015044:	4293      	cmp	r3, r2
 8015046:	d01d      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4a66      	ldr	r2, [pc, #408]	@ (80151e8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801504e:	4293      	cmp	r3, r2
 8015050:	d018      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	4a65      	ldr	r2, [pc, #404]	@ (80151ec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8015058:	4293      	cmp	r3, r2
 801505a:	d013      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	4a63      	ldr	r2, [pc, #396]	@ (80151f0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d00e      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	4a62      	ldr	r2, [pc, #392]	@ (80151f4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801506c:	4293      	cmp	r3, r2
 801506e:	d009      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	4a60      	ldr	r2, [pc, #384]	@ (80151f8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8015076:	4293      	cmp	r3, r2
 8015078:	d004      	beq.n	8015084 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	4a5f      	ldr	r2, [pc, #380]	@ (80151fc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8015080:	4293      	cmp	r3, r2
 8015082:	d101      	bne.n	8015088 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8015084:	2301      	movs	r3, #1
 8015086:	e000      	b.n	801508a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8015088:	2300      	movs	r3, #0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d01a      	beq.n	80150c4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015098:	2b00      	cmp	r3, #0
 801509a:	d007      	beq.n	80150ac <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80150a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80150aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d007      	beq.n	80150c4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80150c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4a35      	ldr	r2, [pc, #212]	@ (80151a0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d04a      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	4a34      	ldr	r2, [pc, #208]	@ (80151a4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d045      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4a32      	ldr	r2, [pc, #200]	@ (80151a8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80150de:	4293      	cmp	r3, r2
 80150e0:	d040      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4a31      	ldr	r2, [pc, #196]	@ (80151ac <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d03b      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a2f      	ldr	r2, [pc, #188]	@ (80151b0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d036      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4a2e      	ldr	r2, [pc, #184]	@ (80151b4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80150fc:	4293      	cmp	r3, r2
 80150fe:	d031      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	4a2c      	ldr	r2, [pc, #176]	@ (80151b8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8015106:	4293      	cmp	r3, r2
 8015108:	d02c      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4a2b      	ldr	r2, [pc, #172]	@ (80151bc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8015110:	4293      	cmp	r3, r2
 8015112:	d027      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4a29      	ldr	r2, [pc, #164]	@ (80151c0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801511a:	4293      	cmp	r3, r2
 801511c:	d022      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4a28      	ldr	r2, [pc, #160]	@ (80151c4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8015124:	4293      	cmp	r3, r2
 8015126:	d01d      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	4a26      	ldr	r2, [pc, #152]	@ (80151c8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801512e:	4293      	cmp	r3, r2
 8015130:	d018      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4a25      	ldr	r2, [pc, #148]	@ (80151cc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8015138:	4293      	cmp	r3, r2
 801513a:	d013      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4a23      	ldr	r2, [pc, #140]	@ (80151d0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8015142:	4293      	cmp	r3, r2
 8015144:	d00e      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	4a22      	ldr	r2, [pc, #136]	@ (80151d4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801514c:	4293      	cmp	r3, r2
 801514e:	d009      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4a20      	ldr	r2, [pc, #128]	@ (80151d8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8015156:	4293      	cmp	r3, r2
 8015158:	d004      	beq.n	8015164 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	4a1f      	ldr	r2, [pc, #124]	@ (80151dc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8015160:	4293      	cmp	r3, r2
 8015162:	d108      	bne.n	8015176 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	f042 0201 	orr.w	r2, r2, #1
 8015172:	601a      	str	r2, [r3, #0]
 8015174:	e00e      	b.n	8015194 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f042 0201 	orr.w	r2, r2, #1
 8015184:	601a      	str	r2, [r3, #0]
 8015186:	e005      	b.n	8015194 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801518e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8015190:	2301      	movs	r3, #1
 8015192:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8015194:	7dfb      	ldrb	r3, [r7, #23]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3718      	adds	r7, #24
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	40020010 	.word	0x40020010
 80151a4:	40020028 	.word	0x40020028
 80151a8:	40020040 	.word	0x40020040
 80151ac:	40020058 	.word	0x40020058
 80151b0:	40020070 	.word	0x40020070
 80151b4:	40020088 	.word	0x40020088
 80151b8:	400200a0 	.word	0x400200a0
 80151bc:	400200b8 	.word	0x400200b8
 80151c0:	40020410 	.word	0x40020410
 80151c4:	40020428 	.word	0x40020428
 80151c8:	40020440 	.word	0x40020440
 80151cc:	40020458 	.word	0x40020458
 80151d0:	40020470 	.word	0x40020470
 80151d4:	40020488 	.word	0x40020488
 80151d8:	400204a0 	.word	0x400204a0
 80151dc:	400204b8 	.word	0x400204b8
 80151e0:	58025408 	.word	0x58025408
 80151e4:	5802541c 	.word	0x5802541c
 80151e8:	58025430 	.word	0x58025430
 80151ec:	58025444 	.word	0x58025444
 80151f0:	58025458 	.word	0x58025458
 80151f4:	5802546c 	.word	0x5802546c
 80151f8:	58025480 	.word	0x58025480
 80151fc:	58025494 	.word	0x58025494

08015200 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	607a      	str	r2, [r7, #4]
 801520c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	4a46      	ldr	r2, [pc, #280]	@ (801532c <DMA_MultiBufferSetConfig+0x12c>)
 8015214:	4293      	cmp	r3, r2
 8015216:	d04a      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4a44      	ldr	r2, [pc, #272]	@ (8015330 <DMA_MultiBufferSetConfig+0x130>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d045      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	4a43      	ldr	r2, [pc, #268]	@ (8015334 <DMA_MultiBufferSetConfig+0x134>)
 8015228:	4293      	cmp	r3, r2
 801522a:	d040      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a41      	ldr	r2, [pc, #260]	@ (8015338 <DMA_MultiBufferSetConfig+0x138>)
 8015232:	4293      	cmp	r3, r2
 8015234:	d03b      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4a40      	ldr	r2, [pc, #256]	@ (801533c <DMA_MultiBufferSetConfig+0x13c>)
 801523c:	4293      	cmp	r3, r2
 801523e:	d036      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	4a3e      	ldr	r2, [pc, #248]	@ (8015340 <DMA_MultiBufferSetConfig+0x140>)
 8015246:	4293      	cmp	r3, r2
 8015248:	d031      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	4a3d      	ldr	r2, [pc, #244]	@ (8015344 <DMA_MultiBufferSetConfig+0x144>)
 8015250:	4293      	cmp	r3, r2
 8015252:	d02c      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	4a3b      	ldr	r2, [pc, #236]	@ (8015348 <DMA_MultiBufferSetConfig+0x148>)
 801525a:	4293      	cmp	r3, r2
 801525c:	d027      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	4a3a      	ldr	r2, [pc, #232]	@ (801534c <DMA_MultiBufferSetConfig+0x14c>)
 8015264:	4293      	cmp	r3, r2
 8015266:	d022      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4a38      	ldr	r2, [pc, #224]	@ (8015350 <DMA_MultiBufferSetConfig+0x150>)
 801526e:	4293      	cmp	r3, r2
 8015270:	d01d      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	4a37      	ldr	r2, [pc, #220]	@ (8015354 <DMA_MultiBufferSetConfig+0x154>)
 8015278:	4293      	cmp	r3, r2
 801527a:	d018      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	4a35      	ldr	r2, [pc, #212]	@ (8015358 <DMA_MultiBufferSetConfig+0x158>)
 8015282:	4293      	cmp	r3, r2
 8015284:	d013      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4a34      	ldr	r2, [pc, #208]	@ (801535c <DMA_MultiBufferSetConfig+0x15c>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d00e      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4a32      	ldr	r2, [pc, #200]	@ (8015360 <DMA_MultiBufferSetConfig+0x160>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d009      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	4a31      	ldr	r2, [pc, #196]	@ (8015364 <DMA_MultiBufferSetConfig+0x164>)
 80152a0:	4293      	cmp	r3, r2
 80152a2:	d004      	beq.n	80152ae <DMA_MultiBufferSetConfig+0xae>
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	4a2f      	ldr	r2, [pc, #188]	@ (8015368 <DMA_MultiBufferSetConfig+0x168>)
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d101      	bne.n	80152b2 <DMA_MultiBufferSetConfig+0xb2>
 80152ae:	2301      	movs	r3, #1
 80152b0:	e000      	b.n	80152b4 <DMA_MultiBufferSetConfig+0xb4>
 80152b2:	2300      	movs	r3, #0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d019      	beq.n	80152ec <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	683a      	ldr	r2, [r7, #0]
 80152be:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	689b      	ldr	r3, [r3, #8]
 80152c4:	2b40      	cmp	r3, #64	@ 0x40
 80152c6:	d108      	bne.n	80152da <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	687a      	ldr	r2, [r7, #4]
 80152ce:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	68ba      	ldr	r2, [r7, #8]
 80152d6:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80152d8:	e021      	b.n	801531e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	68ba      	ldr	r2, [r7, #8]
 80152e0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	60da      	str	r2, [r3, #12]
}
 80152ea:	e018      	b.n	801531e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	683a      	ldr	r2, [r7, #0]
 80152f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	2b40      	cmp	r3, #64	@ 0x40
 80152fa:	d108      	bne.n	801530e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	68ba      	ldr	r2, [r7, #8]
 801530a:	60da      	str	r2, [r3, #12]
}
 801530c:	e007      	b.n	801531e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	68ba      	ldr	r2, [r7, #8]
 8015314:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	60da      	str	r2, [r3, #12]
}
 801531e:	bf00      	nop
 8015320:	3714      	adds	r7, #20
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop
 801532c:	40020010 	.word	0x40020010
 8015330:	40020028 	.word	0x40020028
 8015334:	40020040 	.word	0x40020040
 8015338:	40020058 	.word	0x40020058
 801533c:	40020070 	.word	0x40020070
 8015340:	40020088 	.word	0x40020088
 8015344:	400200a0 	.word	0x400200a0
 8015348:	400200b8 	.word	0x400200b8
 801534c:	40020410 	.word	0x40020410
 8015350:	40020428 	.word	0x40020428
 8015354:	40020440 	.word	0x40020440
 8015358:	40020458 	.word	0x40020458
 801535c:	40020470 	.word	0x40020470
 8015360:	40020488 	.word	0x40020488
 8015364:	400204a0 	.word	0x400204a0
 8015368:	400204b8 	.word	0x400204b8

0801536c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801536c:	b480      	push	{r7}
 801536e:	b089      	sub	sp, #36	@ 0x24
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015376:	2300      	movs	r3, #0
 8015378:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801537a:	4b89      	ldr	r3, [pc, #548]	@ (80155a0 <HAL_GPIO_Init+0x234>)
 801537c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801537e:	e194      	b.n	80156aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	2101      	movs	r1, #1
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	fa01 f303 	lsl.w	r3, r1, r3
 801538c:	4013      	ands	r3, r2
 801538e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 8186 	beq.w	80156a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	685b      	ldr	r3, [r3, #4]
 801539c:	f003 0303 	and.w	r3, r3, #3
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d005      	beq.n	80153b0 <HAL_GPIO_Init+0x44>
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	f003 0303 	and.w	r3, r3, #3
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d130      	bne.n	8015412 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	689b      	ldr	r3, [r3, #8]
 80153b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	005b      	lsls	r3, r3, #1
 80153ba:	2203      	movs	r2, #3
 80153bc:	fa02 f303 	lsl.w	r3, r2, r3
 80153c0:	43db      	mvns	r3, r3
 80153c2:	69ba      	ldr	r2, [r7, #24]
 80153c4:	4013      	ands	r3, r2
 80153c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	68da      	ldr	r2, [r3, #12]
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	005b      	lsls	r3, r3, #1
 80153d0:	fa02 f303 	lsl.w	r3, r2, r3
 80153d4:	69ba      	ldr	r2, [r7, #24]
 80153d6:	4313      	orrs	r3, r2
 80153d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	69ba      	ldr	r2, [r7, #24]
 80153de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80153e6:	2201      	movs	r2, #1
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	fa02 f303 	lsl.w	r3, r2, r3
 80153ee:	43db      	mvns	r3, r3
 80153f0:	69ba      	ldr	r2, [r7, #24]
 80153f2:	4013      	ands	r3, r2
 80153f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	091b      	lsrs	r3, r3, #4
 80153fc:	f003 0201 	and.w	r2, r3, #1
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	fa02 f303 	lsl.w	r3, r2, r3
 8015406:	69ba      	ldr	r2, [r7, #24]
 8015408:	4313      	orrs	r3, r2
 801540a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	69ba      	ldr	r2, [r7, #24]
 8015410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	f003 0303 	and.w	r3, r3, #3
 801541a:	2b03      	cmp	r3, #3
 801541c:	d017      	beq.n	801544e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	68db      	ldr	r3, [r3, #12]
 8015422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	005b      	lsls	r3, r3, #1
 8015428:	2203      	movs	r2, #3
 801542a:	fa02 f303 	lsl.w	r3, r2, r3
 801542e:	43db      	mvns	r3, r3
 8015430:	69ba      	ldr	r2, [r7, #24]
 8015432:	4013      	ands	r3, r2
 8015434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	689a      	ldr	r2, [r3, #8]
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	fa02 f303 	lsl.w	r3, r2, r3
 8015442:	69ba      	ldr	r2, [r7, #24]
 8015444:	4313      	orrs	r3, r2
 8015446:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	69ba      	ldr	r2, [r7, #24]
 801544c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	f003 0303 	and.w	r3, r3, #3
 8015456:	2b02      	cmp	r3, #2
 8015458:	d123      	bne.n	80154a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	08da      	lsrs	r2, r3, #3
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	3208      	adds	r2, #8
 8015462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	f003 0307 	and.w	r3, r3, #7
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	220f      	movs	r2, #15
 8015472:	fa02 f303 	lsl.w	r3, r2, r3
 8015476:	43db      	mvns	r3, r3
 8015478:	69ba      	ldr	r2, [r7, #24]
 801547a:	4013      	ands	r3, r2
 801547c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	691a      	ldr	r2, [r3, #16]
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	f003 0307 	and.w	r3, r3, #7
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	fa02 f303 	lsl.w	r3, r2, r3
 801548e:	69ba      	ldr	r2, [r7, #24]
 8015490:	4313      	orrs	r3, r2
 8015492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015494:	69fb      	ldr	r3, [r7, #28]
 8015496:	08da      	lsrs	r2, r3, #3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3208      	adds	r2, #8
 801549c:	69b9      	ldr	r1, [r7, #24]
 801549e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	2203      	movs	r2, #3
 80154ae:	fa02 f303 	lsl.w	r3, r2, r3
 80154b2:	43db      	mvns	r3, r3
 80154b4:	69ba      	ldr	r2, [r7, #24]
 80154b6:	4013      	ands	r3, r2
 80154b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	f003 0203 	and.w	r2, r3, #3
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	fa02 f303 	lsl.w	r3, r2, r3
 80154ca:	69ba      	ldr	r2, [r7, #24]
 80154cc:	4313      	orrs	r3, r2
 80154ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	69ba      	ldr	r2, [r7, #24]
 80154d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80154de:	2b00      	cmp	r3, #0
 80154e0:	f000 80e0 	beq.w	80156a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80154e4:	4b2f      	ldr	r3, [pc, #188]	@ (80155a4 <HAL_GPIO_Init+0x238>)
 80154e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80154ea:	4a2e      	ldr	r2, [pc, #184]	@ (80155a4 <HAL_GPIO_Init+0x238>)
 80154ec:	f043 0302 	orr.w	r3, r3, #2
 80154f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80154f4:	4b2b      	ldr	r3, [pc, #172]	@ (80155a4 <HAL_GPIO_Init+0x238>)
 80154f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80154fa:	f003 0302 	and.w	r3, r3, #2
 80154fe:	60fb      	str	r3, [r7, #12]
 8015500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015502:	4a29      	ldr	r2, [pc, #164]	@ (80155a8 <HAL_GPIO_Init+0x23c>)
 8015504:	69fb      	ldr	r3, [r7, #28]
 8015506:	089b      	lsrs	r3, r3, #2
 8015508:	3302      	adds	r3, #2
 801550a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	f003 0303 	and.w	r3, r3, #3
 8015516:	009b      	lsls	r3, r3, #2
 8015518:	220f      	movs	r2, #15
 801551a:	fa02 f303 	lsl.w	r3, r2, r3
 801551e:	43db      	mvns	r3, r3
 8015520:	69ba      	ldr	r2, [r7, #24]
 8015522:	4013      	ands	r3, r2
 8015524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	4a20      	ldr	r2, [pc, #128]	@ (80155ac <HAL_GPIO_Init+0x240>)
 801552a:	4293      	cmp	r3, r2
 801552c:	d052      	beq.n	80155d4 <HAL_GPIO_Init+0x268>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	4a1f      	ldr	r2, [pc, #124]	@ (80155b0 <HAL_GPIO_Init+0x244>)
 8015532:	4293      	cmp	r3, r2
 8015534:	d031      	beq.n	801559a <HAL_GPIO_Init+0x22e>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	4a1e      	ldr	r2, [pc, #120]	@ (80155b4 <HAL_GPIO_Init+0x248>)
 801553a:	4293      	cmp	r3, r2
 801553c:	d02b      	beq.n	8015596 <HAL_GPIO_Init+0x22a>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	4a1d      	ldr	r2, [pc, #116]	@ (80155b8 <HAL_GPIO_Init+0x24c>)
 8015542:	4293      	cmp	r3, r2
 8015544:	d025      	beq.n	8015592 <HAL_GPIO_Init+0x226>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	4a1c      	ldr	r2, [pc, #112]	@ (80155bc <HAL_GPIO_Init+0x250>)
 801554a:	4293      	cmp	r3, r2
 801554c:	d01f      	beq.n	801558e <HAL_GPIO_Init+0x222>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	4a1b      	ldr	r2, [pc, #108]	@ (80155c0 <HAL_GPIO_Init+0x254>)
 8015552:	4293      	cmp	r3, r2
 8015554:	d019      	beq.n	801558a <HAL_GPIO_Init+0x21e>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	4a1a      	ldr	r2, [pc, #104]	@ (80155c4 <HAL_GPIO_Init+0x258>)
 801555a:	4293      	cmp	r3, r2
 801555c:	d013      	beq.n	8015586 <HAL_GPIO_Init+0x21a>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	4a19      	ldr	r2, [pc, #100]	@ (80155c8 <HAL_GPIO_Init+0x25c>)
 8015562:	4293      	cmp	r3, r2
 8015564:	d00d      	beq.n	8015582 <HAL_GPIO_Init+0x216>
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	4a18      	ldr	r2, [pc, #96]	@ (80155cc <HAL_GPIO_Init+0x260>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d007      	beq.n	801557e <HAL_GPIO_Init+0x212>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4a17      	ldr	r2, [pc, #92]	@ (80155d0 <HAL_GPIO_Init+0x264>)
 8015572:	4293      	cmp	r3, r2
 8015574:	d101      	bne.n	801557a <HAL_GPIO_Init+0x20e>
 8015576:	2309      	movs	r3, #9
 8015578:	e02d      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801557a:	230a      	movs	r3, #10
 801557c:	e02b      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801557e:	2308      	movs	r3, #8
 8015580:	e029      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 8015582:	2307      	movs	r3, #7
 8015584:	e027      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 8015586:	2306      	movs	r3, #6
 8015588:	e025      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801558a:	2305      	movs	r3, #5
 801558c:	e023      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801558e:	2304      	movs	r3, #4
 8015590:	e021      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 8015592:	2303      	movs	r3, #3
 8015594:	e01f      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 8015596:	2302      	movs	r3, #2
 8015598:	e01d      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801559a:	2301      	movs	r3, #1
 801559c:	e01b      	b.n	80155d6 <HAL_GPIO_Init+0x26a>
 801559e:	bf00      	nop
 80155a0:	58000080 	.word	0x58000080
 80155a4:	58024400 	.word	0x58024400
 80155a8:	58000400 	.word	0x58000400
 80155ac:	58020000 	.word	0x58020000
 80155b0:	58020400 	.word	0x58020400
 80155b4:	58020800 	.word	0x58020800
 80155b8:	58020c00 	.word	0x58020c00
 80155bc:	58021000 	.word	0x58021000
 80155c0:	58021400 	.word	0x58021400
 80155c4:	58021800 	.word	0x58021800
 80155c8:	58021c00 	.word	0x58021c00
 80155cc:	58022000 	.word	0x58022000
 80155d0:	58022400 	.word	0x58022400
 80155d4:	2300      	movs	r3, #0
 80155d6:	69fa      	ldr	r2, [r7, #28]
 80155d8:	f002 0203 	and.w	r2, r2, #3
 80155dc:	0092      	lsls	r2, r2, #2
 80155de:	4093      	lsls	r3, r2
 80155e0:	69ba      	ldr	r2, [r7, #24]
 80155e2:	4313      	orrs	r3, r2
 80155e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80155e6:	4938      	ldr	r1, [pc, #224]	@ (80156c8 <HAL_GPIO_Init+0x35c>)
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	089b      	lsrs	r3, r3, #2
 80155ec:	3302      	adds	r3, #2
 80155ee:	69ba      	ldr	r2, [r7, #24]
 80155f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80155f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	43db      	mvns	r3, r3
 8015600:	69ba      	ldr	r2, [r7, #24]
 8015602:	4013      	ands	r3, r2
 8015604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801560e:	2b00      	cmp	r3, #0
 8015610:	d003      	beq.n	801561a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8015612:	69ba      	ldr	r2, [r7, #24]
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	4313      	orrs	r3, r2
 8015618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801561a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	43db      	mvns	r3, r3
 801562e:	69ba      	ldr	r2, [r7, #24]
 8015630:	4013      	ands	r3, r2
 8015632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801563c:	2b00      	cmp	r3, #0
 801563e:	d003      	beq.n	8015648 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8015640:	69ba      	ldr	r2, [r7, #24]
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	4313      	orrs	r3, r2
 8015646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8015648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801564c:	69bb      	ldr	r3, [r7, #24]
 801564e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	685b      	ldr	r3, [r3, #4]
 8015654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	43db      	mvns	r3, r3
 801565a:	69ba      	ldr	r2, [r7, #24]
 801565c:	4013      	ands	r3, r2
 801565e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015668:	2b00      	cmp	r3, #0
 801566a:	d003      	beq.n	8015674 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801566c:	69ba      	ldr	r2, [r7, #24]
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	4313      	orrs	r3, r2
 8015672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	69ba      	ldr	r2, [r7, #24]
 8015678:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	43db      	mvns	r3, r3
 8015684:	69ba      	ldr	r2, [r7, #24]
 8015686:	4013      	ands	r3, r2
 8015688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015692:	2b00      	cmp	r3, #0
 8015694:	d003      	beq.n	801569e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8015696:	69ba      	ldr	r2, [r7, #24]
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	4313      	orrs	r3, r2
 801569c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	3301      	adds	r3, #1
 80156a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	fa22 f303 	lsr.w	r3, r2, r3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f47f ae63 	bne.w	8015380 <HAL_GPIO_Init+0x14>
  }
}
 80156ba:	bf00      	nop
 80156bc:	bf00      	nop
 80156be:	3724      	adds	r7, #36	@ 0x24
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr
 80156c8:	58000400 	.word	0x58000400

080156cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b085      	sub	sp, #20
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	691a      	ldr	r2, [r3, #16]
 80156dc:	887b      	ldrh	r3, [r7, #2]
 80156de:	4013      	ands	r3, r2
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80156e4:	2301      	movs	r3, #1
 80156e6:	73fb      	strb	r3, [r7, #15]
 80156e8:	e001      	b.n	80156ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80156ea:	2300      	movs	r3, #0
 80156ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80156ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3714      	adds	r7, #20
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr

080156fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	807b      	strh	r3, [r7, #2]
 8015708:	4613      	mov	r3, r2
 801570a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801570c:	787b      	ldrb	r3, [r7, #1]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d003      	beq.n	801571a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015712:	887a      	ldrh	r2, [r7, #2]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8015718:	e003      	b.n	8015722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801571a:	887b      	ldrh	r3, [r7, #2]
 801571c:	041a      	lsls	r2, r3, #16
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	619a      	str	r2, [r3, #24]
}
 8015722:	bf00      	nop
 8015724:	370c      	adds	r7, #12
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr
	...

08015730 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8015738:	4b19      	ldr	r3, [pc, #100]	@ (80157a0 <HAL_PWREx_ConfigSupply+0x70>)
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	f003 0304 	and.w	r3, r3, #4
 8015740:	2b04      	cmp	r3, #4
 8015742:	d00a      	beq.n	801575a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8015744:	4b16      	ldr	r3, [pc, #88]	@ (80157a0 <HAL_PWREx_ConfigSupply+0x70>)
 8015746:	68db      	ldr	r3, [r3, #12]
 8015748:	f003 0307 	and.w	r3, r3, #7
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	429a      	cmp	r2, r3
 8015750:	d001      	beq.n	8015756 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8015752:	2301      	movs	r3, #1
 8015754:	e01f      	b.n	8015796 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8015756:	2300      	movs	r3, #0
 8015758:	e01d      	b.n	8015796 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801575a:	4b11      	ldr	r3, [pc, #68]	@ (80157a0 <HAL_PWREx_ConfigSupply+0x70>)
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	f023 0207 	bic.w	r2, r3, #7
 8015762:	490f      	ldr	r1, [pc, #60]	@ (80157a0 <HAL_PWREx_ConfigSupply+0x70>)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	4313      	orrs	r3, r2
 8015768:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801576a:	f7fd f8e1 	bl	8012930 <HAL_GetTick>
 801576e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8015770:	e009      	b.n	8015786 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8015772:	f7fd f8dd 	bl	8012930 <HAL_GetTick>
 8015776:	4602      	mov	r2, r0
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	1ad3      	subs	r3, r2, r3
 801577c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015780:	d901      	bls.n	8015786 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8015782:	2301      	movs	r3, #1
 8015784:	e007      	b.n	8015796 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8015786:	4b06      	ldr	r3, [pc, #24]	@ (80157a0 <HAL_PWREx_ConfigSupply+0x70>)
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801578e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015792:	d1ee      	bne.n	8015772 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8015794:	2300      	movs	r3, #0
}
 8015796:	4618      	mov	r0, r3
 8015798:	3710      	adds	r7, #16
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	58024800 	.word	0x58024800

080157a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b08c      	sub	sp, #48	@ 0x30
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d102      	bne.n	80157b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80157b2:	2301      	movs	r3, #1
 80157b4:	f000 bc48 	b.w	8016048 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	f003 0301 	and.w	r3, r3, #1
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f000 8088 	beq.w	80158d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80157c6:	4b99      	ldr	r3, [pc, #612]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80157c8:	691b      	ldr	r3, [r3, #16]
 80157ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80157ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80157d0:	4b96      	ldr	r3, [pc, #600]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80157d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80157d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d8:	2b10      	cmp	r3, #16
 80157da:	d007      	beq.n	80157ec <HAL_RCC_OscConfig+0x48>
 80157dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157de:	2b18      	cmp	r3, #24
 80157e0:	d111      	bne.n	8015806 <HAL_RCC_OscConfig+0x62>
 80157e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e4:	f003 0303 	and.w	r3, r3, #3
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d10c      	bne.n	8015806 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80157ec:	4b8f      	ldr	r3, [pc, #572]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d06d      	beq.n	80158d4 <HAL_RCC_OscConfig+0x130>
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d169      	bne.n	80158d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8015800:	2301      	movs	r3, #1
 8015802:	f000 bc21 	b.w	8016048 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801580e:	d106      	bne.n	801581e <HAL_RCC_OscConfig+0x7a>
 8015810:	4b86      	ldr	r3, [pc, #536]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4a85      	ldr	r2, [pc, #532]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801581a:	6013      	str	r3, [r2, #0]
 801581c:	e02e      	b.n	801587c <HAL_RCC_OscConfig+0xd8>
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d10c      	bne.n	8015840 <HAL_RCC_OscConfig+0x9c>
 8015826:	4b81      	ldr	r3, [pc, #516]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	4a80      	ldr	r2, [pc, #512]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801582c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015830:	6013      	str	r3, [r2, #0]
 8015832:	4b7e      	ldr	r3, [pc, #504]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	4a7d      	ldr	r2, [pc, #500]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801583c:	6013      	str	r3, [r2, #0]
 801583e:	e01d      	b.n	801587c <HAL_RCC_OscConfig+0xd8>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015848:	d10c      	bne.n	8015864 <HAL_RCC_OscConfig+0xc0>
 801584a:	4b78      	ldr	r3, [pc, #480]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4a77      	ldr	r2, [pc, #476]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8015854:	6013      	str	r3, [r2, #0]
 8015856:	4b75      	ldr	r3, [pc, #468]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	4a74      	ldr	r2, [pc, #464]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801585c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015860:	6013      	str	r3, [r2, #0]
 8015862:	e00b      	b.n	801587c <HAL_RCC_OscConfig+0xd8>
 8015864:	4b71      	ldr	r3, [pc, #452]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	4a70      	ldr	r2, [pc, #448]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801586a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	4b6e      	ldr	r3, [pc, #440]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	4a6d      	ldr	r2, [pc, #436]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801587a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d013      	beq.n	80158ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015884:	f7fd f854 	bl	8012930 <HAL_GetTick>
 8015888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801588a:	e008      	b.n	801589e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801588c:	f7fd f850 	bl	8012930 <HAL_GetTick>
 8015890:	4602      	mov	r2, r0
 8015892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015894:	1ad3      	subs	r3, r2, r3
 8015896:	2b64      	cmp	r3, #100	@ 0x64
 8015898:	d901      	bls.n	801589e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801589a:	2303      	movs	r3, #3
 801589c:	e3d4      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801589e:	4b63      	ldr	r3, [pc, #396]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d0f0      	beq.n	801588c <HAL_RCC_OscConfig+0xe8>
 80158aa:	e014      	b.n	80158d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80158ac:	f7fd f840 	bl	8012930 <HAL_GetTick>
 80158b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80158b2:	e008      	b.n	80158c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80158b4:	f7fd f83c 	bl	8012930 <HAL_GetTick>
 80158b8:	4602      	mov	r2, r0
 80158ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158bc:	1ad3      	subs	r3, r2, r3
 80158be:	2b64      	cmp	r3, #100	@ 0x64
 80158c0:	d901      	bls.n	80158c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80158c2:	2303      	movs	r3, #3
 80158c4:	e3c0      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80158c6:	4b59      	ldr	r3, [pc, #356]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d1f0      	bne.n	80158b4 <HAL_RCC_OscConfig+0x110>
 80158d2:	e000      	b.n	80158d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80158d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	f003 0302 	and.w	r3, r3, #2
 80158de:	2b00      	cmp	r3, #0
 80158e0:	f000 80ca 	beq.w	8015a78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80158e4:	4b51      	ldr	r3, [pc, #324]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80158e6:	691b      	ldr	r3, [r3, #16]
 80158e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80158ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80158ee:	4b4f      	ldr	r3, [pc, #316]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80158f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80158f4:	6a3b      	ldr	r3, [r7, #32]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d007      	beq.n	801590a <HAL_RCC_OscConfig+0x166>
 80158fa:	6a3b      	ldr	r3, [r7, #32]
 80158fc:	2b18      	cmp	r3, #24
 80158fe:	d156      	bne.n	80159ae <HAL_RCC_OscConfig+0x20a>
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	f003 0303 	and.w	r3, r3, #3
 8015906:	2b00      	cmp	r3, #0
 8015908:	d151      	bne.n	80159ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801590a:	4b48      	ldr	r3, [pc, #288]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	f003 0304 	and.w	r3, r3, #4
 8015912:	2b00      	cmp	r3, #0
 8015914:	d005      	beq.n	8015922 <HAL_RCC_OscConfig+0x17e>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d101      	bne.n	8015922 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801591e:	2301      	movs	r3, #1
 8015920:	e392      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8015922:	4b42      	ldr	r3, [pc, #264]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	f023 0219 	bic.w	r2, r3, #25
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	493f      	ldr	r1, [pc, #252]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015930:	4313      	orrs	r3, r2
 8015932:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015934:	f7fc fffc 	bl	8012930 <HAL_GetTick>
 8015938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801593a:	e008      	b.n	801594e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801593c:	f7fc fff8 	bl	8012930 <HAL_GetTick>
 8015940:	4602      	mov	r2, r0
 8015942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015944:	1ad3      	subs	r3, r2, r3
 8015946:	2b02      	cmp	r3, #2
 8015948:	d901      	bls.n	801594e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801594a:	2303      	movs	r3, #3
 801594c:	e37c      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801594e:	4b37      	ldr	r3, [pc, #220]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	f003 0304 	and.w	r3, r3, #4
 8015956:	2b00      	cmp	r3, #0
 8015958:	d0f0      	beq.n	801593c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801595a:	f7fd f819 	bl	8012990 <HAL_GetREVID>
 801595e:	4603      	mov	r3, r0
 8015960:	f241 0203 	movw	r2, #4099	@ 0x1003
 8015964:	4293      	cmp	r3, r2
 8015966:	d817      	bhi.n	8015998 <HAL_RCC_OscConfig+0x1f4>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	691b      	ldr	r3, [r3, #16]
 801596c:	2b40      	cmp	r3, #64	@ 0x40
 801596e:	d108      	bne.n	8015982 <HAL_RCC_OscConfig+0x1de>
 8015970:	4b2e      	ldr	r3, [pc, #184]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8015978:	4a2c      	ldr	r2, [pc, #176]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801597a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801597e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015980:	e07a      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015982:	4b2a      	ldr	r3, [pc, #168]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	691b      	ldr	r3, [r3, #16]
 801598e:	031b      	lsls	r3, r3, #12
 8015990:	4926      	ldr	r1, [pc, #152]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015992:	4313      	orrs	r3, r2
 8015994:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015996:	e06f      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015998:	4b24      	ldr	r3, [pc, #144]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 801599a:	685b      	ldr	r3, [r3, #4]
 801599c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	691b      	ldr	r3, [r3, #16]
 80159a4:	061b      	lsls	r3, r3, #24
 80159a6:	4921      	ldr	r1, [pc, #132]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80159a8:	4313      	orrs	r3, r2
 80159aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80159ac:	e064      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	68db      	ldr	r3, [r3, #12]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d047      	beq.n	8015a46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80159b6:	4b1d      	ldr	r3, [pc, #116]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	f023 0219 	bic.w	r2, r3, #25
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	491a      	ldr	r1, [pc, #104]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80159c4:	4313      	orrs	r3, r2
 80159c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80159c8:	f7fc ffb2 	bl	8012930 <HAL_GetTick>
 80159cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80159ce:	e008      	b.n	80159e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80159d0:	f7fc ffae 	bl	8012930 <HAL_GetTick>
 80159d4:	4602      	mov	r2, r0
 80159d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d8:	1ad3      	subs	r3, r2, r3
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d901      	bls.n	80159e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80159de:	2303      	movs	r3, #3
 80159e0:	e332      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80159e2:	4b12      	ldr	r3, [pc, #72]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f003 0304 	and.w	r3, r3, #4
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d0f0      	beq.n	80159d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80159ee:	f7fc ffcf 	bl	8012990 <HAL_GetREVID>
 80159f2:	4603      	mov	r3, r0
 80159f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d819      	bhi.n	8015a30 <HAL_RCC_OscConfig+0x28c>
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	691b      	ldr	r3, [r3, #16]
 8015a00:	2b40      	cmp	r3, #64	@ 0x40
 8015a02:	d108      	bne.n	8015a16 <HAL_RCC_OscConfig+0x272>
 8015a04:	4b09      	ldr	r3, [pc, #36]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8015a0c:	4a07      	ldr	r2, [pc, #28]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015a12:	6053      	str	r3, [r2, #4]
 8015a14:	e030      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
 8015a16:	4b05      	ldr	r3, [pc, #20]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	691b      	ldr	r3, [r3, #16]
 8015a22:	031b      	lsls	r3, r3, #12
 8015a24:	4901      	ldr	r1, [pc, #4]	@ (8015a2c <HAL_RCC_OscConfig+0x288>)
 8015a26:	4313      	orrs	r3, r2
 8015a28:	604b      	str	r3, [r1, #4]
 8015a2a:	e025      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
 8015a2c:	58024400 	.word	0x58024400
 8015a30:	4b9a      	ldr	r3, [pc, #616]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	691b      	ldr	r3, [r3, #16]
 8015a3c:	061b      	lsls	r3, r3, #24
 8015a3e:	4997      	ldr	r1, [pc, #604]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a40:	4313      	orrs	r3, r2
 8015a42:	604b      	str	r3, [r1, #4]
 8015a44:	e018      	b.n	8015a78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015a46:	4b95      	ldr	r3, [pc, #596]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	4a94      	ldr	r2, [pc, #592]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a4c:	f023 0301 	bic.w	r3, r3, #1
 8015a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a52:	f7fc ff6d 	bl	8012930 <HAL_GetTick>
 8015a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015a58:	e008      	b.n	8015a6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015a5a:	f7fc ff69 	bl	8012930 <HAL_GetTick>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a62:	1ad3      	subs	r3, r2, r3
 8015a64:	2b02      	cmp	r3, #2
 8015a66:	d901      	bls.n	8015a6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8015a68:	2303      	movs	r3, #3
 8015a6a:	e2ed      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015a6c:	4b8b      	ldr	r3, [pc, #556]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	f003 0304 	and.w	r3, r3, #4
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d1f0      	bne.n	8015a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	f003 0310 	and.w	r3, r3, #16
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	f000 80a9 	beq.w	8015bd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015a86:	4b85      	ldr	r3, [pc, #532]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a88:	691b      	ldr	r3, [r3, #16]
 8015a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015a8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8015a90:	4b82      	ldr	r3, [pc, #520]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8015a96:	69bb      	ldr	r3, [r7, #24]
 8015a98:	2b08      	cmp	r3, #8
 8015a9a:	d007      	beq.n	8015aac <HAL_RCC_OscConfig+0x308>
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	2b18      	cmp	r3, #24
 8015aa0:	d13a      	bne.n	8015b18 <HAL_RCC_OscConfig+0x374>
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	f003 0303 	and.w	r3, r3, #3
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d135      	bne.n	8015b18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015aac:	4b7b      	ldr	r3, [pc, #492]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d005      	beq.n	8015ac4 <HAL_RCC_OscConfig+0x320>
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	69db      	ldr	r3, [r3, #28]
 8015abc:	2b80      	cmp	r3, #128	@ 0x80
 8015abe:	d001      	beq.n	8015ac4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	e2c1      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8015ac4:	f7fc ff64 	bl	8012990 <HAL_GetREVID>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d817      	bhi.n	8015b02 <HAL_RCC_OscConfig+0x35e>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6a1b      	ldr	r3, [r3, #32]
 8015ad6:	2b20      	cmp	r3, #32
 8015ad8:	d108      	bne.n	8015aec <HAL_RCC_OscConfig+0x348>
 8015ada:	4b70      	ldr	r3, [pc, #448]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8015ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015ae4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015ae8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015aea:	e075      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8015aec:	4b6b      	ldr	r3, [pc, #428]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015aee:	685b      	ldr	r3, [r3, #4]
 8015af0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6a1b      	ldr	r3, [r3, #32]
 8015af8:	069b      	lsls	r3, r3, #26
 8015afa:	4968      	ldr	r1, [pc, #416]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015afc:	4313      	orrs	r3, r2
 8015afe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015b00:	e06a      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8015b02:	4b66      	ldr	r3, [pc, #408]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6a1b      	ldr	r3, [r3, #32]
 8015b0e:	061b      	lsls	r3, r3, #24
 8015b10:	4962      	ldr	r1, [pc, #392]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b12:	4313      	orrs	r3, r2
 8015b14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015b16:	e05f      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	69db      	ldr	r3, [r3, #28]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d042      	beq.n	8015ba6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8015b20:	4b5e      	ldr	r3, [pc, #376]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	4a5d      	ldr	r2, [pc, #372]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015b2c:	f7fc ff00 	bl	8012930 <HAL_GetTick>
 8015b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015b32:	e008      	b.n	8015b46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8015b34:	f7fc fefc 	bl	8012930 <HAL_GetTick>
 8015b38:	4602      	mov	r2, r0
 8015b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	2b02      	cmp	r3, #2
 8015b40:	d901      	bls.n	8015b46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8015b42:	2303      	movs	r3, #3
 8015b44:	e280      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015b46:	4b55      	ldr	r3, [pc, #340]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0f0      	beq.n	8015b34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8015b52:	f7fc ff1d 	bl	8012990 <HAL_GetREVID>
 8015b56:	4603      	mov	r3, r0
 8015b58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d817      	bhi.n	8015b90 <HAL_RCC_OscConfig+0x3ec>
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6a1b      	ldr	r3, [r3, #32]
 8015b64:	2b20      	cmp	r3, #32
 8015b66:	d108      	bne.n	8015b7a <HAL_RCC_OscConfig+0x3d6>
 8015b68:	4b4c      	ldr	r3, [pc, #304]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8015b70:	4a4a      	ldr	r2, [pc, #296]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015b76:	6053      	str	r3, [r2, #4]
 8015b78:	e02e      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
 8015b7a:	4b48      	ldr	r3, [pc, #288]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6a1b      	ldr	r3, [r3, #32]
 8015b86:	069b      	lsls	r3, r3, #26
 8015b88:	4944      	ldr	r1, [pc, #272]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b8a:	4313      	orrs	r3, r2
 8015b8c:	604b      	str	r3, [r1, #4]
 8015b8e:	e023      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
 8015b90:	4b42      	ldr	r3, [pc, #264]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a1b      	ldr	r3, [r3, #32]
 8015b9c:	061b      	lsls	r3, r3, #24
 8015b9e:	493f      	ldr	r1, [pc, #252]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015ba0:	4313      	orrs	r3, r2
 8015ba2:	60cb      	str	r3, [r1, #12]
 8015ba4:	e018      	b.n	8015bd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8015ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a3c      	ldr	r2, [pc, #240]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015bb2:	f7fc febd 	bl	8012930 <HAL_GetTick>
 8015bb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015bb8:	e008      	b.n	8015bcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8015bba:	f7fc feb9 	bl	8012930 <HAL_GetTick>
 8015bbe:	4602      	mov	r2, r0
 8015bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	2b02      	cmp	r3, #2
 8015bc6:	d901      	bls.n	8015bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8015bc8:	2303      	movs	r3, #3
 8015bca:	e23d      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015bcc:	4b33      	ldr	r3, [pc, #204]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1f0      	bne.n	8015bba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f003 0308 	and.w	r3, r3, #8
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d036      	beq.n	8015c52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	695b      	ldr	r3, [r3, #20]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d019      	beq.n	8015c20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015bec:	4b2b      	ldr	r3, [pc, #172]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015bf2:	f043 0301 	orr.w	r3, r3, #1
 8015bf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015bf8:	f7fc fe9a 	bl	8012930 <HAL_GetTick>
 8015bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015bfe:	e008      	b.n	8015c12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015c00:	f7fc fe96 	bl	8012930 <HAL_GetTick>
 8015c04:	4602      	mov	r2, r0
 8015c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c08:	1ad3      	subs	r3, r2, r3
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d901      	bls.n	8015c12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8015c0e:	2303      	movs	r3, #3
 8015c10:	e21a      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015c12:	4b22      	ldr	r3, [pc, #136]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c16:	f003 0302 	and.w	r3, r3, #2
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d0f0      	beq.n	8015c00 <HAL_RCC_OscConfig+0x45c>
 8015c1e:	e018      	b.n	8015c52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015c20:	4b1e      	ldr	r3, [pc, #120]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c24:	4a1d      	ldr	r2, [pc, #116]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c26:	f023 0301 	bic.w	r3, r3, #1
 8015c2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015c2c:	f7fc fe80 	bl	8012930 <HAL_GetTick>
 8015c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015c32:	e008      	b.n	8015c46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015c34:	f7fc fe7c 	bl	8012930 <HAL_GetTick>
 8015c38:	4602      	mov	r2, r0
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3c:	1ad3      	subs	r3, r2, r3
 8015c3e:	2b02      	cmp	r3, #2
 8015c40:	d901      	bls.n	8015c46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8015c42:	2303      	movs	r3, #3
 8015c44:	e200      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015c46:	4b15      	ldr	r3, [pc, #84]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c4a:	f003 0302 	and.w	r3, r3, #2
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d1f0      	bne.n	8015c34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	f003 0320 	and.w	r3, r3, #32
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d039      	beq.n	8015cd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	699b      	ldr	r3, [r3, #24]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d01c      	beq.n	8015ca0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8015c66:	4b0d      	ldr	r3, [pc, #52]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015c70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8015c72:	f7fc fe5d 	bl	8012930 <HAL_GetTick>
 8015c76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015c78:	e008      	b.n	8015c8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015c7a:	f7fc fe59 	bl	8012930 <HAL_GetTick>
 8015c7e:	4602      	mov	r2, r0
 8015c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c82:	1ad3      	subs	r3, r2, r3
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d901      	bls.n	8015c8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8015c88:	2303      	movs	r3, #3
 8015c8a:	e1dd      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015c8c:	4b03      	ldr	r3, [pc, #12]	@ (8015c9c <HAL_RCC_OscConfig+0x4f8>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d0f0      	beq.n	8015c7a <HAL_RCC_OscConfig+0x4d6>
 8015c98:	e01b      	b.n	8015cd2 <HAL_RCC_OscConfig+0x52e>
 8015c9a:	bf00      	nop
 8015c9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8015ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4a9a      	ldr	r2, [pc, #616]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ca6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015caa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8015cac:	f7fc fe40 	bl	8012930 <HAL_GetTick>
 8015cb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015cb2:	e008      	b.n	8015cc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015cb4:	f7fc fe3c 	bl	8012930 <HAL_GetTick>
 8015cb8:	4602      	mov	r2, r0
 8015cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	2b02      	cmp	r3, #2
 8015cc0:	d901      	bls.n	8015cc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	e1c0      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015cc6:	4b92      	ldr	r3, [pc, #584]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1f0      	bne.n	8015cb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f003 0304 	and.w	r3, r3, #4
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f000 8081 	beq.w	8015de2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8015ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8015f14 <HAL_RCC_OscConfig+0x770>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	4a8b      	ldr	r2, [pc, #556]	@ (8015f14 <HAL_RCC_OscConfig+0x770>)
 8015ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015cec:	f7fc fe20 	bl	8012930 <HAL_GetTick>
 8015cf0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015cf2:	e008      	b.n	8015d06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015cf4:	f7fc fe1c 	bl	8012930 <HAL_GetTick>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	2b64      	cmp	r3, #100	@ 0x64
 8015d00:	d901      	bls.n	8015d06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8015d02:	2303      	movs	r3, #3
 8015d04:	e1a0      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d06:	4b83      	ldr	r3, [pc, #524]	@ (8015f14 <HAL_RCC_OscConfig+0x770>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d0f0      	beq.n	8015cf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	689b      	ldr	r3, [r3, #8]
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d106      	bne.n	8015d28 <HAL_RCC_OscConfig+0x584>
 8015d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d20:	f043 0301 	orr.w	r3, r3, #1
 8015d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d26:	e02d      	b.n	8015d84 <HAL_RCC_OscConfig+0x5e0>
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d10c      	bne.n	8015d4a <HAL_RCC_OscConfig+0x5a6>
 8015d30:	4b77      	ldr	r3, [pc, #476]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d34:	4a76      	ldr	r2, [pc, #472]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d36:	f023 0301 	bic.w	r3, r3, #1
 8015d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d3c:	4b74      	ldr	r3, [pc, #464]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d40:	4a73      	ldr	r2, [pc, #460]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d42:	f023 0304 	bic.w	r3, r3, #4
 8015d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d48:	e01c      	b.n	8015d84 <HAL_RCC_OscConfig+0x5e0>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	689b      	ldr	r3, [r3, #8]
 8015d4e:	2b05      	cmp	r3, #5
 8015d50:	d10c      	bne.n	8015d6c <HAL_RCC_OscConfig+0x5c8>
 8015d52:	4b6f      	ldr	r3, [pc, #444]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d56:	4a6e      	ldr	r2, [pc, #440]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d58:	f043 0304 	orr.w	r3, r3, #4
 8015d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d62:	4a6b      	ldr	r2, [pc, #428]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d64:	f043 0301 	orr.w	r3, r3, #1
 8015d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d6a:	e00b      	b.n	8015d84 <HAL_RCC_OscConfig+0x5e0>
 8015d6c:	4b68      	ldr	r3, [pc, #416]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d70:	4a67      	ldr	r2, [pc, #412]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d72:	f023 0301 	bic.w	r3, r3, #1
 8015d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8015d78:	4b65      	ldr	r3, [pc, #404]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d7c:	4a64      	ldr	r2, [pc, #400]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015d7e:	f023 0304 	bic.w	r3, r3, #4
 8015d82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	689b      	ldr	r3, [r3, #8]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d015      	beq.n	8015db8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d8c:	f7fc fdd0 	bl	8012930 <HAL_GetTick>
 8015d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015d92:	e00a      	b.n	8015daa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015d94:	f7fc fdcc 	bl	8012930 <HAL_GetTick>
 8015d98:	4602      	mov	r2, r0
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9c:	1ad3      	subs	r3, r2, r3
 8015d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d901      	bls.n	8015daa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8015da6:	2303      	movs	r3, #3
 8015da8:	e14e      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015daa:	4b59      	ldr	r3, [pc, #356]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dae:	f003 0302 	and.w	r3, r3, #2
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d0ee      	beq.n	8015d94 <HAL_RCC_OscConfig+0x5f0>
 8015db6:	e014      	b.n	8015de2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015db8:	f7fc fdba 	bl	8012930 <HAL_GetTick>
 8015dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015dbe:	e00a      	b.n	8015dd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015dc0:	f7fc fdb6 	bl	8012930 <HAL_GetTick>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	d901      	bls.n	8015dd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8015dd2:	2303      	movs	r3, #3
 8015dd4:	e138      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dda:	f003 0302 	and.w	r3, r3, #2
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1ee      	bne.n	8015dc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	f000 812d 	beq.w	8016046 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8015dec:	4b48      	ldr	r3, [pc, #288]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015dee:	691b      	ldr	r3, [r3, #16]
 8015df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8015df4:	2b18      	cmp	r3, #24
 8015df6:	f000 80bd 	beq.w	8015f74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	f040 809e 	bne.w	8015f40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015e04:	4b42      	ldr	r3, [pc, #264]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4a41      	ldr	r2, [pc, #260]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8015e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e10:	f7fc fd8e 	bl	8012930 <HAL_GetTick>
 8015e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015e16:	e008      	b.n	8015e2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015e18:	f7fc fd8a 	bl	8012930 <HAL_GetTick>
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	2b02      	cmp	r3, #2
 8015e24:	d901      	bls.n	8015e2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8015e26:	2303      	movs	r3, #3
 8015e28:	e10e      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015e2a:	4b39      	ldr	r3, [pc, #228]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1f0      	bne.n	8015e18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015e36:	4b36      	ldr	r3, [pc, #216]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015e3a:	4b37      	ldr	r3, [pc, #220]	@ (8015f18 <HAL_RCC_OscConfig+0x774>)
 8015e3c:	4013      	ands	r3, r2
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8015e46:	0112      	lsls	r2, r2, #4
 8015e48:	430a      	orrs	r2, r1
 8015e4a:	4931      	ldr	r1, [pc, #196]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e4c:	4313      	orrs	r3, r2
 8015e4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e54:	3b01      	subs	r3, #1
 8015e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	025b      	lsls	r3, r3, #9
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	431a      	orrs	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	041b      	lsls	r3, r3, #16
 8015e6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8015e72:	431a      	orrs	r2, r3
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e78:	3b01      	subs	r3, #1
 8015e7a:	061b      	lsls	r3, r3, #24
 8015e7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8015e80:	4923      	ldr	r1, [pc, #140]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e82:	4313      	orrs	r3, r2
 8015e84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8015e86:	4b22      	ldr	r3, [pc, #136]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e8a:	4a21      	ldr	r2, [pc, #132]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e8c:	f023 0301 	bic.w	r3, r3, #1
 8015e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8015e92:	4b1f      	ldr	r3, [pc, #124]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e96:	4b21      	ldr	r3, [pc, #132]	@ (8015f1c <HAL_RCC_OscConfig+0x778>)
 8015e98:	4013      	ands	r3, r2
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8015e9e:	00d2      	lsls	r2, r2, #3
 8015ea0:	491b      	ldr	r1, [pc, #108]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ea2:	4313      	orrs	r3, r2
 8015ea4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8015ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eaa:	f023 020c 	bic.w	r2, r3, #12
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015eb2:	4917      	ldr	r1, [pc, #92]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015eb4:	4313      	orrs	r3, r2
 8015eb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8015eb8:	4b15      	ldr	r3, [pc, #84]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ebc:	f023 0202 	bic.w	r2, r3, #2
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ec4:	4912      	ldr	r1, [pc, #72]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ec6:	4313      	orrs	r3, r2
 8015ec8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8015eca:	4b11      	ldr	r3, [pc, #68]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ece:	4a10      	ldr	r2, [pc, #64]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eda:	4a0d      	ldr	r2, [pc, #52]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8015ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8015eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8015eee:	4b08      	ldr	r3, [pc, #32]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ef2:	4a07      	ldr	r2, [pc, #28]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015ef4:	f043 0301 	orr.w	r3, r3, #1
 8015ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015efa:	4b05      	ldr	r3, [pc, #20]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	4a04      	ldr	r2, [pc, #16]	@ (8015f10 <HAL_RCC_OscConfig+0x76c>)
 8015f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f06:	f7fc fd13 	bl	8012930 <HAL_GetTick>
 8015f0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015f0c:	e011      	b.n	8015f32 <HAL_RCC_OscConfig+0x78e>
 8015f0e:	bf00      	nop
 8015f10:	58024400 	.word	0x58024400
 8015f14:	58024800 	.word	0x58024800
 8015f18:	fffffc0c 	.word	0xfffffc0c
 8015f1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015f20:	f7fc fd06 	bl	8012930 <HAL_GetTick>
 8015f24:	4602      	mov	r2, r0
 8015f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	2b02      	cmp	r3, #2
 8015f2c:	d901      	bls.n	8015f32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8015f2e:	2303      	movs	r3, #3
 8015f30:	e08a      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015f32:	4b47      	ldr	r3, [pc, #284]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d0f0      	beq.n	8015f20 <HAL_RCC_OscConfig+0x77c>
 8015f3e:	e082      	b.n	8016046 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015f40:	4b43      	ldr	r3, [pc, #268]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4a42      	ldr	r2, [pc, #264]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8015f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f4c:	f7fc fcf0 	bl	8012930 <HAL_GetTick>
 8015f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015f52:	e008      	b.n	8015f66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015f54:	f7fc fcec 	bl	8012930 <HAL_GetTick>
 8015f58:	4602      	mov	r2, r0
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f5c:	1ad3      	subs	r3, r2, r3
 8015f5e:	2b02      	cmp	r3, #2
 8015f60:	d901      	bls.n	8015f66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8015f62:	2303      	movs	r3, #3
 8015f64:	e070      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015f66:	4b3a      	ldr	r3, [pc, #232]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1f0      	bne.n	8015f54 <HAL_RCC_OscConfig+0x7b0>
 8015f72:	e068      	b.n	8016046 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8015f74:	4b36      	ldr	r3, [pc, #216]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8015f7a:	4b35      	ldr	r3, [pc, #212]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d031      	beq.n	8015fec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	f003 0203 	and.w	r2, r3, #3
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d12a      	bne.n	8015fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	091b      	lsrs	r3, r3, #4
 8015f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d122      	bne.n	8015fec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d11a      	bne.n	8015fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	0a5b      	lsrs	r3, r3, #9
 8015fba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015fc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d111      	bne.n	8015fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	0c1b      	lsrs	r3, r3, #16
 8015fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d108      	bne.n	8015fec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	0e1b      	lsrs	r3, r3, #24
 8015fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fe6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d001      	beq.n	8015ff0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8015fec:	2301      	movs	r3, #1
 8015fee:	e02b      	b.n	8016048 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8015ff0:	4b17      	ldr	r3, [pc, #92]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8015ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ff4:	08db      	lsrs	r3, r3, #3
 8015ff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ffa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016000:	693a      	ldr	r2, [r7, #16]
 8016002:	429a      	cmp	r2, r3
 8016004:	d01f      	beq.n	8016046 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8016006:	4b12      	ldr	r3, [pc, #72]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8016008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801600a:	4a11      	ldr	r2, [pc, #68]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 801600c:	f023 0301 	bic.w	r3, r3, #1
 8016010:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8016012:	f7fc fc8d 	bl	8012930 <HAL_GetTick>
 8016016:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8016018:	bf00      	nop
 801601a:	f7fc fc89 	bl	8012930 <HAL_GetTick>
 801601e:	4602      	mov	r2, r0
 8016020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016022:	4293      	cmp	r3, r2
 8016024:	d0f9      	beq.n	801601a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8016026:	4b0a      	ldr	r3, [pc, #40]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8016028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801602a:	4b0a      	ldr	r3, [pc, #40]	@ (8016054 <HAL_RCC_OscConfig+0x8b0>)
 801602c:	4013      	ands	r3, r2
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8016032:	00d2      	lsls	r2, r2, #3
 8016034:	4906      	ldr	r1, [pc, #24]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8016036:	4313      	orrs	r3, r2
 8016038:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801603a:	4b05      	ldr	r3, [pc, #20]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 801603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801603e:	4a04      	ldr	r2, [pc, #16]	@ (8016050 <HAL_RCC_OscConfig+0x8ac>)
 8016040:	f043 0301 	orr.w	r3, r3, #1
 8016044:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8016046:	2300      	movs	r3, #0
}
 8016048:	4618      	mov	r0, r3
 801604a:	3730      	adds	r7, #48	@ 0x30
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}
 8016050:	58024400 	.word	0x58024400
 8016054:	ffff0007 	.word	0xffff0007

08016058 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d101      	bne.n	801606c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016068:	2301      	movs	r3, #1
 801606a:	e19c      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801606c:	4b8a      	ldr	r3, [pc, #552]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	f003 030f 	and.w	r3, r3, #15
 8016074:	683a      	ldr	r2, [r7, #0]
 8016076:	429a      	cmp	r2, r3
 8016078:	d910      	bls.n	801609c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801607a:	4b87      	ldr	r3, [pc, #540]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f023 020f 	bic.w	r2, r3, #15
 8016082:	4985      	ldr	r1, [pc, #532]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	4313      	orrs	r3, r2
 8016088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801608a:	4b83      	ldr	r3, [pc, #524]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	f003 030f 	and.w	r3, r3, #15
 8016092:	683a      	ldr	r2, [r7, #0]
 8016094:	429a      	cmp	r2, r3
 8016096:	d001      	beq.n	801609c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8016098:	2301      	movs	r3, #1
 801609a:	e184      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f003 0304 	and.w	r3, r3, #4
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d010      	beq.n	80160ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	691a      	ldr	r2, [r3, #16]
 80160ac:	4b7b      	ldr	r3, [pc, #492]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160ae:	699b      	ldr	r3, [r3, #24]
 80160b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d908      	bls.n	80160ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80160b8:	4b78      	ldr	r3, [pc, #480]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160ba:	699b      	ldr	r3, [r3, #24]
 80160bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	691b      	ldr	r3, [r3, #16]
 80160c4:	4975      	ldr	r1, [pc, #468]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160c6:	4313      	orrs	r3, r2
 80160c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	f003 0308 	and.w	r3, r3, #8
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d010      	beq.n	80160f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	695a      	ldr	r2, [r3, #20]
 80160da:	4b70      	ldr	r3, [pc, #448]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160dc:	69db      	ldr	r3, [r3, #28]
 80160de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d908      	bls.n	80160f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80160e6:	4b6d      	ldr	r3, [pc, #436]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160e8:	69db      	ldr	r3, [r3, #28]
 80160ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	695b      	ldr	r3, [r3, #20]
 80160f2:	496a      	ldr	r1, [pc, #424]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80160f4:	4313      	orrs	r3, r2
 80160f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	f003 0310 	and.w	r3, r3, #16
 8016100:	2b00      	cmp	r3, #0
 8016102:	d010      	beq.n	8016126 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	699a      	ldr	r2, [r3, #24]
 8016108:	4b64      	ldr	r3, [pc, #400]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 801610a:	69db      	ldr	r3, [r3, #28]
 801610c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016110:	429a      	cmp	r2, r3
 8016112:	d908      	bls.n	8016126 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8016114:	4b61      	ldr	r3, [pc, #388]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016116:	69db      	ldr	r3, [r3, #28]
 8016118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	699b      	ldr	r3, [r3, #24]
 8016120:	495e      	ldr	r1, [pc, #376]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016122:	4313      	orrs	r3, r2
 8016124:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	f003 0320 	and.w	r3, r3, #32
 801612e:	2b00      	cmp	r3, #0
 8016130:	d010      	beq.n	8016154 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	69da      	ldr	r2, [r3, #28]
 8016136:	4b59      	ldr	r3, [pc, #356]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016138:	6a1b      	ldr	r3, [r3, #32]
 801613a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801613e:	429a      	cmp	r2, r3
 8016140:	d908      	bls.n	8016154 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8016142:	4b56      	ldr	r3, [pc, #344]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016144:	6a1b      	ldr	r3, [r3, #32]
 8016146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	69db      	ldr	r3, [r3, #28]
 801614e:	4953      	ldr	r1, [pc, #332]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016150:	4313      	orrs	r3, r2
 8016152:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f003 0302 	and.w	r3, r3, #2
 801615c:	2b00      	cmp	r3, #0
 801615e:	d010      	beq.n	8016182 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	68da      	ldr	r2, [r3, #12]
 8016164:	4b4d      	ldr	r3, [pc, #308]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016166:	699b      	ldr	r3, [r3, #24]
 8016168:	f003 030f 	and.w	r3, r3, #15
 801616c:	429a      	cmp	r2, r3
 801616e:	d908      	bls.n	8016182 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016170:	4b4a      	ldr	r3, [pc, #296]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016172:	699b      	ldr	r3, [r3, #24]
 8016174:	f023 020f 	bic.w	r2, r3, #15
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	4947      	ldr	r1, [pc, #284]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 801617e:	4313      	orrs	r3, r2
 8016180:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f003 0301 	and.w	r3, r3, #1
 801618a:	2b00      	cmp	r3, #0
 801618c:	d055      	beq.n	801623a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801618e:	4b43      	ldr	r3, [pc, #268]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016190:	699b      	ldr	r3, [r3, #24]
 8016192:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	689b      	ldr	r3, [r3, #8]
 801619a:	4940      	ldr	r1, [pc, #256]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 801619c:	4313      	orrs	r3, r2
 801619e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	2b02      	cmp	r3, #2
 80161a6:	d107      	bne.n	80161b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80161a8:	4b3c      	ldr	r3, [pc, #240]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d121      	bne.n	80161f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80161b4:	2301      	movs	r3, #1
 80161b6:	e0f6      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	2b03      	cmp	r3, #3
 80161be:	d107      	bne.n	80161d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80161c0:	4b36      	ldr	r3, [pc, #216]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d115      	bne.n	80161f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80161cc:	2301      	movs	r3, #1
 80161ce:	e0ea      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d107      	bne.n	80161e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80161d8:	4b30      	ldr	r3, [pc, #192]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d109      	bne.n	80161f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80161e4:	2301      	movs	r3, #1
 80161e6:	e0de      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80161e8:	4b2c      	ldr	r3, [pc, #176]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	f003 0304 	and.w	r3, r3, #4
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d101      	bne.n	80161f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80161f4:	2301      	movs	r3, #1
 80161f6:	e0d6      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80161f8:	4b28      	ldr	r3, [pc, #160]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 80161fa:	691b      	ldr	r3, [r3, #16]
 80161fc:	f023 0207 	bic.w	r2, r3, #7
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	4925      	ldr	r1, [pc, #148]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016206:	4313      	orrs	r3, r2
 8016208:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801620a:	f7fc fb91 	bl	8012930 <HAL_GetTick>
 801620e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016210:	e00a      	b.n	8016228 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016212:	f7fc fb8d 	bl	8012930 <HAL_GetTick>
 8016216:	4602      	mov	r2, r0
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	1ad3      	subs	r3, r2, r3
 801621c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016220:	4293      	cmp	r3, r2
 8016222:	d901      	bls.n	8016228 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8016224:	2303      	movs	r3, #3
 8016226:	e0be      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016228:	4b1c      	ldr	r3, [pc, #112]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 801622a:	691b      	ldr	r3, [r3, #16]
 801622c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	00db      	lsls	r3, r3, #3
 8016236:	429a      	cmp	r2, r3
 8016238:	d1eb      	bne.n	8016212 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	f003 0302 	and.w	r3, r3, #2
 8016242:	2b00      	cmp	r3, #0
 8016244:	d010      	beq.n	8016268 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	68da      	ldr	r2, [r3, #12]
 801624a:	4b14      	ldr	r3, [pc, #80]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 801624c:	699b      	ldr	r3, [r3, #24]
 801624e:	f003 030f 	and.w	r3, r3, #15
 8016252:	429a      	cmp	r2, r3
 8016254:	d208      	bcs.n	8016268 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016256:	4b11      	ldr	r3, [pc, #68]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016258:	699b      	ldr	r3, [r3, #24]
 801625a:	f023 020f 	bic.w	r2, r3, #15
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	490e      	ldr	r1, [pc, #56]	@ (801629c <HAL_RCC_ClockConfig+0x244>)
 8016264:	4313      	orrs	r3, r2
 8016266:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016268:	4b0b      	ldr	r3, [pc, #44]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	f003 030f 	and.w	r3, r3, #15
 8016270:	683a      	ldr	r2, [r7, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	d214      	bcs.n	80162a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016276:	4b08      	ldr	r3, [pc, #32]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	f023 020f 	bic.w	r2, r3, #15
 801627e:	4906      	ldr	r1, [pc, #24]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	4313      	orrs	r3, r2
 8016284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016286:	4b04      	ldr	r3, [pc, #16]	@ (8016298 <HAL_RCC_ClockConfig+0x240>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	f003 030f 	and.w	r3, r3, #15
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	429a      	cmp	r2, r3
 8016292:	d005      	beq.n	80162a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8016294:	2301      	movs	r3, #1
 8016296:	e086      	b.n	80163a6 <HAL_RCC_ClockConfig+0x34e>
 8016298:	52002000 	.word	0x52002000
 801629c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f003 0304 	and.w	r3, r3, #4
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d010      	beq.n	80162ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	691a      	ldr	r2, [r3, #16]
 80162b0:	4b3f      	ldr	r3, [pc, #252]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162b2:	699b      	ldr	r3, [r3, #24]
 80162b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d208      	bcs.n	80162ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80162bc:	4b3c      	ldr	r3, [pc, #240]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162be:	699b      	ldr	r3, [r3, #24]
 80162c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	691b      	ldr	r3, [r3, #16]
 80162c8:	4939      	ldr	r1, [pc, #228]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162ca:	4313      	orrs	r3, r2
 80162cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	f003 0308 	and.w	r3, r3, #8
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d010      	beq.n	80162fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	695a      	ldr	r2, [r3, #20]
 80162de:	4b34      	ldr	r3, [pc, #208]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162e0:	69db      	ldr	r3, [r3, #28]
 80162e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d208      	bcs.n	80162fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80162ea:	4b31      	ldr	r3, [pc, #196]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162ec:	69db      	ldr	r3, [r3, #28]
 80162ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	695b      	ldr	r3, [r3, #20]
 80162f6:	492e      	ldr	r1, [pc, #184]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 80162f8:	4313      	orrs	r3, r2
 80162fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f003 0310 	and.w	r3, r3, #16
 8016304:	2b00      	cmp	r3, #0
 8016306:	d010      	beq.n	801632a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	699a      	ldr	r2, [r3, #24]
 801630c:	4b28      	ldr	r3, [pc, #160]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 801630e:	69db      	ldr	r3, [r3, #28]
 8016310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016314:	429a      	cmp	r2, r3
 8016316:	d208      	bcs.n	801632a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8016318:	4b25      	ldr	r3, [pc, #148]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 801631a:	69db      	ldr	r3, [r3, #28]
 801631c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	699b      	ldr	r3, [r3, #24]
 8016324:	4922      	ldr	r1, [pc, #136]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 8016326:	4313      	orrs	r3, r2
 8016328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f003 0320 	and.w	r3, r3, #32
 8016332:	2b00      	cmp	r3, #0
 8016334:	d010      	beq.n	8016358 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	69da      	ldr	r2, [r3, #28]
 801633a:	4b1d      	ldr	r3, [pc, #116]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 801633c:	6a1b      	ldr	r3, [r3, #32]
 801633e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8016342:	429a      	cmp	r2, r3
 8016344:	d208      	bcs.n	8016358 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8016346:	4b1a      	ldr	r3, [pc, #104]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 8016348:	6a1b      	ldr	r3, [r3, #32]
 801634a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	69db      	ldr	r3, [r3, #28]
 8016352:	4917      	ldr	r1, [pc, #92]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 8016354:	4313      	orrs	r3, r2
 8016356:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8016358:	f000 f834 	bl	80163c4 <HAL_RCC_GetSysClockFreq>
 801635c:	4602      	mov	r2, r0
 801635e:	4b14      	ldr	r3, [pc, #80]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 8016360:	699b      	ldr	r3, [r3, #24]
 8016362:	0a1b      	lsrs	r3, r3, #8
 8016364:	f003 030f 	and.w	r3, r3, #15
 8016368:	4912      	ldr	r1, [pc, #72]	@ (80163b4 <HAL_RCC_ClockConfig+0x35c>)
 801636a:	5ccb      	ldrb	r3, [r1, r3]
 801636c:	f003 031f 	and.w	r3, r3, #31
 8016370:	fa22 f303 	lsr.w	r3, r2, r3
 8016374:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8016376:	4b0e      	ldr	r3, [pc, #56]	@ (80163b0 <HAL_RCC_ClockConfig+0x358>)
 8016378:	699b      	ldr	r3, [r3, #24]
 801637a:	f003 030f 	and.w	r3, r3, #15
 801637e:	4a0d      	ldr	r2, [pc, #52]	@ (80163b4 <HAL_RCC_ClockConfig+0x35c>)
 8016380:	5cd3      	ldrb	r3, [r2, r3]
 8016382:	f003 031f 	and.w	r3, r3, #31
 8016386:	693a      	ldr	r2, [r7, #16]
 8016388:	fa22 f303 	lsr.w	r3, r2, r3
 801638c:	4a0a      	ldr	r2, [pc, #40]	@ (80163b8 <HAL_RCC_ClockConfig+0x360>)
 801638e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8016390:	4a0a      	ldr	r2, [pc, #40]	@ (80163bc <HAL_RCC_ClockConfig+0x364>)
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8016396:	4b0a      	ldr	r3, [pc, #40]	@ (80163c0 <HAL_RCC_ClockConfig+0x368>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	4618      	mov	r0, r3
 801639c:	f7fc fa7e 	bl	801289c <HAL_InitTick>
 80163a0:	4603      	mov	r3, r0
 80163a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80163a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3718      	adds	r7, #24
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	58024400 	.word	0x58024400
 80163b4:	08021864 	.word	0x08021864
 80163b8:	24000020 	.word	0x24000020
 80163bc:	2400001c 	.word	0x2400001c
 80163c0:	24000024 	.word	0x24000024

080163c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b089      	sub	sp, #36	@ 0x24
 80163c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80163ca:	4bb3      	ldr	r3, [pc, #716]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80163cc:	691b      	ldr	r3, [r3, #16]
 80163ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80163d2:	2b18      	cmp	r3, #24
 80163d4:	f200 8155 	bhi.w	8016682 <HAL_RCC_GetSysClockFreq+0x2be>
 80163d8:	a201      	add	r2, pc, #4	@ (adr r2, 80163e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80163da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163de:	bf00      	nop
 80163e0:	08016445 	.word	0x08016445
 80163e4:	08016683 	.word	0x08016683
 80163e8:	08016683 	.word	0x08016683
 80163ec:	08016683 	.word	0x08016683
 80163f0:	08016683 	.word	0x08016683
 80163f4:	08016683 	.word	0x08016683
 80163f8:	08016683 	.word	0x08016683
 80163fc:	08016683 	.word	0x08016683
 8016400:	0801646b 	.word	0x0801646b
 8016404:	08016683 	.word	0x08016683
 8016408:	08016683 	.word	0x08016683
 801640c:	08016683 	.word	0x08016683
 8016410:	08016683 	.word	0x08016683
 8016414:	08016683 	.word	0x08016683
 8016418:	08016683 	.word	0x08016683
 801641c:	08016683 	.word	0x08016683
 8016420:	08016471 	.word	0x08016471
 8016424:	08016683 	.word	0x08016683
 8016428:	08016683 	.word	0x08016683
 801642c:	08016683 	.word	0x08016683
 8016430:	08016683 	.word	0x08016683
 8016434:	08016683 	.word	0x08016683
 8016438:	08016683 	.word	0x08016683
 801643c:	08016683 	.word	0x08016683
 8016440:	08016477 	.word	0x08016477
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016444:	4b94      	ldr	r3, [pc, #592]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f003 0320 	and.w	r3, r3, #32
 801644c:	2b00      	cmp	r3, #0
 801644e:	d009      	beq.n	8016464 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016450:	4b91      	ldr	r3, [pc, #580]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	08db      	lsrs	r3, r3, #3
 8016456:	f003 0303 	and.w	r3, r3, #3
 801645a:	4a90      	ldr	r2, [pc, #576]	@ (801669c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801645c:	fa22 f303 	lsr.w	r3, r2, r3
 8016460:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8016462:	e111      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8016464:	4b8d      	ldr	r3, [pc, #564]	@ (801669c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8016466:	61bb      	str	r3, [r7, #24]
      break;
 8016468:	e10e      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801646a:	4b8d      	ldr	r3, [pc, #564]	@ (80166a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801646c:	61bb      	str	r3, [r7, #24]
      break;
 801646e:	e10b      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8016470:	4b8c      	ldr	r3, [pc, #560]	@ (80166a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8016472:	61bb      	str	r3, [r7, #24]
      break;
 8016474:	e108      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016476:	4b88      	ldr	r3, [pc, #544]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801647a:	f003 0303 	and.w	r3, r3, #3
 801647e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8016480:	4b85      	ldr	r3, [pc, #532]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016484:	091b      	lsrs	r3, r3, #4
 8016486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801648a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801648c:	4b82      	ldr	r3, [pc, #520]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016490:	f003 0301 	and.w	r3, r3, #1
 8016494:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8016496:	4b80      	ldr	r3, [pc, #512]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801649a:	08db      	lsrs	r3, r3, #3
 801649c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164a0:	68fa      	ldr	r2, [r7, #12]
 80164a2:	fb02 f303 	mul.w	r3, r2, r3
 80164a6:	ee07 3a90 	vmov	s15, r3
 80164aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80164ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	f000 80e1 	beq.w	801667c <HAL_RCC_GetSysClockFreq+0x2b8>
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	2b02      	cmp	r3, #2
 80164be:	f000 8083 	beq.w	80165c8 <HAL_RCC_GetSysClockFreq+0x204>
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	2b02      	cmp	r3, #2
 80164c6:	f200 80a1 	bhi.w	801660c <HAL_RCC_GetSysClockFreq+0x248>
 80164ca:	697b      	ldr	r3, [r7, #20]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d003      	beq.n	80164d8 <HAL_RCC_GetSysClockFreq+0x114>
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	2b01      	cmp	r3, #1
 80164d4:	d056      	beq.n	8016584 <HAL_RCC_GetSysClockFreq+0x1c0>
 80164d6:	e099      	b.n	801660c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80164d8:	4b6f      	ldr	r3, [pc, #444]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	f003 0320 	and.w	r3, r3, #32
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d02d      	beq.n	8016540 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80164e4:	4b6c      	ldr	r3, [pc, #432]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	08db      	lsrs	r3, r3, #3
 80164ea:	f003 0303 	and.w	r3, r3, #3
 80164ee:	4a6b      	ldr	r2, [pc, #428]	@ (801669c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80164f0:	fa22 f303 	lsr.w	r3, r2, r3
 80164f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	ee07 3a90 	vmov	s15, r3
 80164fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	ee07 3a90 	vmov	s15, r3
 8016506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801650a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801650e:	4b62      	ldr	r3, [pc, #392]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016516:	ee07 3a90 	vmov	s15, r3
 801651a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801651e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016522:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80166a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801652a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801652e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016536:	ee67 7a27 	vmul.f32	s15, s14, s15
 801653a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801653e:	e087      	b.n	8016650 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	ee07 3a90 	vmov	s15, r3
 8016546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801654a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80166ac <HAL_RCC_GetSysClockFreq+0x2e8>
 801654e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016552:	4b51      	ldr	r3, [pc, #324]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801655a:	ee07 3a90 	vmov	s15, r3
 801655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016562:	ed97 6a02 	vldr	s12, [r7, #8]
 8016566:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80166a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801657e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8016582:	e065      	b.n	8016650 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	ee07 3a90 	vmov	s15, r3
 801658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801658e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80166b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8016592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016596:	4b40      	ldr	r3, [pc, #256]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801659e:	ee07 3a90 	vmov	s15, r3
 80165a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80165a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80165aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80166a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80165ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80165b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80165b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80165ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80165be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80165c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80165c6:	e043      	b.n	8016650 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	ee07 3a90 	vmov	s15, r3
 80165ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80165d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80166b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80165d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80165da:	4b2f      	ldr	r3, [pc, #188]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80165dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165e2:	ee07 3a90 	vmov	s15, r3
 80165e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80165ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80165ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80166a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80165f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80165f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80165fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80165fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801660a:	e021      	b.n	8016650 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	ee07 3a90 	vmov	s15, r3
 8016612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016616:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80166b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801661a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801661e:	4b1e      	ldr	r3, [pc, #120]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016626:	ee07 3a90 	vmov	s15, r3
 801662a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801662e:	ed97 6a02 	vldr	s12, [r7, #8]
 8016632:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80166a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8016636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801663a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801663e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016646:	ee67 7a27 	vmul.f32	s15, s14, s15
 801664a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801664e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8016650:	4b11      	ldr	r3, [pc, #68]	@ (8016698 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8016652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016654:	0a5b      	lsrs	r3, r3, #9
 8016656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801665a:	3301      	adds	r3, #1
 801665c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	ee07 3a90 	vmov	s15, r3
 8016664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016668:	edd7 6a07 	vldr	s13, [r7, #28]
 801666c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016674:	ee17 3a90 	vmov	r3, s15
 8016678:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801667a:	e005      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801667c:	2300      	movs	r3, #0
 801667e:	61bb      	str	r3, [r7, #24]
      break;
 8016680:	e002      	b.n	8016688 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8016682:	4b07      	ldr	r3, [pc, #28]	@ (80166a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8016684:	61bb      	str	r3, [r7, #24]
      break;
 8016686:	bf00      	nop
  }

  return sysclockfreq;
 8016688:	69bb      	ldr	r3, [r7, #24]
}
 801668a:	4618      	mov	r0, r3
 801668c:	3724      	adds	r7, #36	@ 0x24
 801668e:	46bd      	mov	sp, r7
 8016690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016694:	4770      	bx	lr
 8016696:	bf00      	nop
 8016698:	58024400 	.word	0x58024400
 801669c:	03d09000 	.word	0x03d09000
 80166a0:	003d0900 	.word	0x003d0900
 80166a4:	017d7840 	.word	0x017d7840
 80166a8:	46000000 	.word	0x46000000
 80166ac:	4c742400 	.word	0x4c742400
 80166b0:	4a742400 	.word	0x4a742400
 80166b4:	4bbebc20 	.word	0x4bbebc20

080166b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80166be:	f7ff fe81 	bl	80163c4 <HAL_RCC_GetSysClockFreq>
 80166c2:	4602      	mov	r2, r0
 80166c4:	4b10      	ldr	r3, [pc, #64]	@ (8016708 <HAL_RCC_GetHCLKFreq+0x50>)
 80166c6:	699b      	ldr	r3, [r3, #24]
 80166c8:	0a1b      	lsrs	r3, r3, #8
 80166ca:	f003 030f 	and.w	r3, r3, #15
 80166ce:	490f      	ldr	r1, [pc, #60]	@ (801670c <HAL_RCC_GetHCLKFreq+0x54>)
 80166d0:	5ccb      	ldrb	r3, [r1, r3]
 80166d2:	f003 031f 	and.w	r3, r3, #31
 80166d6:	fa22 f303 	lsr.w	r3, r2, r3
 80166da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80166dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016708 <HAL_RCC_GetHCLKFreq+0x50>)
 80166de:	699b      	ldr	r3, [r3, #24]
 80166e0:	f003 030f 	and.w	r3, r3, #15
 80166e4:	4a09      	ldr	r2, [pc, #36]	@ (801670c <HAL_RCC_GetHCLKFreq+0x54>)
 80166e6:	5cd3      	ldrb	r3, [r2, r3]
 80166e8:	f003 031f 	and.w	r3, r3, #31
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	fa22 f303 	lsr.w	r3, r2, r3
 80166f2:	4a07      	ldr	r2, [pc, #28]	@ (8016710 <HAL_RCC_GetHCLKFreq+0x58>)
 80166f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80166f6:	4a07      	ldr	r2, [pc, #28]	@ (8016714 <HAL_RCC_GetHCLKFreq+0x5c>)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80166fc:	4b04      	ldr	r3, [pc, #16]	@ (8016710 <HAL_RCC_GetHCLKFreq+0x58>)
 80166fe:	681b      	ldr	r3, [r3, #0]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3708      	adds	r7, #8
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}
 8016708:	58024400 	.word	0x58024400
 801670c:	08021864 	.word	0x08021864
 8016710:	24000020 	.word	0x24000020
 8016714:	2400001c 	.word	0x2400001c

08016718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801671c:	f7ff ffcc 	bl	80166b8 <HAL_RCC_GetHCLKFreq>
 8016720:	4602      	mov	r2, r0
 8016722:	4b06      	ldr	r3, [pc, #24]	@ (801673c <HAL_RCC_GetPCLK1Freq+0x24>)
 8016724:	69db      	ldr	r3, [r3, #28]
 8016726:	091b      	lsrs	r3, r3, #4
 8016728:	f003 0307 	and.w	r3, r3, #7
 801672c:	4904      	ldr	r1, [pc, #16]	@ (8016740 <HAL_RCC_GetPCLK1Freq+0x28>)
 801672e:	5ccb      	ldrb	r3, [r1, r3]
 8016730:	f003 031f 	and.w	r3, r3, #31
 8016734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8016738:	4618      	mov	r0, r3
 801673a:	bd80      	pop	{r7, pc}
 801673c:	58024400 	.word	0x58024400
 8016740:	08021864 	.word	0x08021864

08016744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8016748:	f7ff ffb6 	bl	80166b8 <HAL_RCC_GetHCLKFreq>
 801674c:	4602      	mov	r2, r0
 801674e:	4b06      	ldr	r3, [pc, #24]	@ (8016768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016750:	69db      	ldr	r3, [r3, #28]
 8016752:	0a1b      	lsrs	r3, r3, #8
 8016754:	f003 0307 	and.w	r3, r3, #7
 8016758:	4904      	ldr	r1, [pc, #16]	@ (801676c <HAL_RCC_GetPCLK2Freq+0x28>)
 801675a:	5ccb      	ldrb	r3, [r1, r3]
 801675c:	f003 031f 	and.w	r3, r3, #31
 8016760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8016764:	4618      	mov	r0, r3
 8016766:	bd80      	pop	{r7, pc}
 8016768:	58024400 	.word	0x58024400
 801676c:	08021864 	.word	0x08021864

08016770 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016774:	b0ca      	sub	sp, #296	@ 0x128
 8016776:	af00      	add	r7, sp, #0
 8016778:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801677c:	2300      	movs	r3, #0
 801677e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8016782:	2300      	movs	r3, #0
 8016784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8016788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016790:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8016794:	2500      	movs	r5, #0
 8016796:	ea54 0305 	orrs.w	r3, r4, r5
 801679a:	d049      	beq.n	8016830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80167a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80167a6:	d02f      	beq.n	8016808 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80167a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80167ac:	d828      	bhi.n	8016800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80167ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80167b2:	d01a      	beq.n	80167ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80167b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80167b8:	d822      	bhi.n	8016800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d003      	beq.n	80167c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80167be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80167c2:	d007      	beq.n	80167d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80167c4:	e01c      	b.n	8016800 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80167c6:	4bb8      	ldr	r3, [pc, #736]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80167c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167ca:	4ab7      	ldr	r2, [pc, #732]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80167cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80167d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80167d2:	e01a      	b.n	801680a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80167d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167d8:	3308      	adds	r3, #8
 80167da:	2102      	movs	r1, #2
 80167dc:	4618      	mov	r0, r3
 80167de:	f002 fb61 	bl	8018ea4 <RCCEx_PLL2_Config>
 80167e2:	4603      	mov	r3, r0
 80167e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80167e8:	e00f      	b.n	801680a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80167ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167ee:	3328      	adds	r3, #40	@ 0x28
 80167f0:	2102      	movs	r1, #2
 80167f2:	4618      	mov	r0, r3
 80167f4:	f002 fc08 	bl	8019008 <RCCEx_PLL3_Config>
 80167f8:	4603      	mov	r3, r0
 80167fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80167fe:	e004      	b.n	801680a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016800:	2301      	movs	r3, #1
 8016802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016806:	e000      	b.n	801680a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8016808:	bf00      	nop
    }

    if (ret == HAL_OK)
 801680a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801680e:	2b00      	cmp	r3, #0
 8016810:	d10a      	bne.n	8016828 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8016812:	4ba5      	ldr	r3, [pc, #660]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016816:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801681e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016820:	4aa1      	ldr	r2, [pc, #644]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016822:	430b      	orrs	r3, r1
 8016824:	6513      	str	r3, [r2, #80]	@ 0x50
 8016826:	e003      	b.n	8016830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801682c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8016830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016838:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801683c:	f04f 0900 	mov.w	r9, #0
 8016840:	ea58 0309 	orrs.w	r3, r8, r9
 8016844:	d047      	beq.n	80168d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8016846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801684a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801684c:	2b04      	cmp	r3, #4
 801684e:	d82a      	bhi.n	80168a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8016850:	a201      	add	r2, pc, #4	@ (adr r2, 8016858 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8016852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016856:	bf00      	nop
 8016858:	0801686d 	.word	0x0801686d
 801685c:	0801687b 	.word	0x0801687b
 8016860:	08016891 	.word	0x08016891
 8016864:	080168af 	.word	0x080168af
 8016868:	080168af 	.word	0x080168af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801686c:	4b8e      	ldr	r3, [pc, #568]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016870:	4a8d      	ldr	r2, [pc, #564]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016878:	e01a      	b.n	80168b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801687e:	3308      	adds	r3, #8
 8016880:	2100      	movs	r1, #0
 8016882:	4618      	mov	r0, r3
 8016884:	f002 fb0e 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016888:	4603      	mov	r3, r0
 801688a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801688e:	e00f      	b.n	80168b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016894:	3328      	adds	r3, #40	@ 0x28
 8016896:	2100      	movs	r1, #0
 8016898:	4618      	mov	r0, r3
 801689a:	f002 fbb5 	bl	8019008 <RCCEx_PLL3_Config>
 801689e:	4603      	mov	r3, r0
 80168a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80168a4:	e004      	b.n	80168b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80168a6:	2301      	movs	r3, #1
 80168a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80168ac:	e000      	b.n	80168b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80168ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80168b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d10a      	bne.n	80168ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80168b8:	4b7b      	ldr	r3, [pc, #492]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80168ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80168bc:	f023 0107 	bic.w	r1, r3, #7
 80168c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80168c6:	4a78      	ldr	r2, [pc, #480]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80168c8:	430b      	orrs	r3, r1
 80168ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80168cc:	e003      	b.n	80168d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80168d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80168e2:	f04f 0b00 	mov.w	fp, #0
 80168e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80168ea:	d04c      	beq.n	8016986 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80168ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80168f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80168f6:	d030      	beq.n	801695a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80168f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80168fc:	d829      	bhi.n	8016952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80168fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8016900:	d02d      	beq.n	801695e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8016902:	2bc0      	cmp	r3, #192	@ 0xc0
 8016904:	d825      	bhi.n	8016952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8016906:	2b80      	cmp	r3, #128	@ 0x80
 8016908:	d018      	beq.n	801693c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801690a:	2b80      	cmp	r3, #128	@ 0x80
 801690c:	d821      	bhi.n	8016952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801690e:	2b00      	cmp	r3, #0
 8016910:	d002      	beq.n	8016918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8016912:	2b40      	cmp	r3, #64	@ 0x40
 8016914:	d007      	beq.n	8016926 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8016916:	e01c      	b.n	8016952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016918:	4b63      	ldr	r3, [pc, #396]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801691c:	4a62      	ldr	r2, [pc, #392]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8016924:	e01c      	b.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801692a:	3308      	adds	r3, #8
 801692c:	2100      	movs	r1, #0
 801692e:	4618      	mov	r0, r3
 8016930:	f002 fab8 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016934:	4603      	mov	r3, r0
 8016936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801693a:	e011      	b.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016940:	3328      	adds	r3, #40	@ 0x28
 8016942:	2100      	movs	r1, #0
 8016944:	4618      	mov	r0, r3
 8016946:	f002 fb5f 	bl	8019008 <RCCEx_PLL3_Config>
 801694a:	4603      	mov	r3, r0
 801694c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8016950:	e006      	b.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016952:	2301      	movs	r3, #1
 8016954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016958:	e002      	b.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801695a:	bf00      	nop
 801695c:	e000      	b.n	8016960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801695e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016964:	2b00      	cmp	r3, #0
 8016966:	d10a      	bne.n	801697e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8016968:	4b4f      	ldr	r3, [pc, #316]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801696a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801696c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8016970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016976:	4a4c      	ldr	r2, [pc, #304]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016978:	430b      	orrs	r3, r1
 801697a:	6513      	str	r3, [r2, #80]	@ 0x50
 801697c:	e003      	b.n	8016986 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8016986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801698e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8016992:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8016996:	2300      	movs	r3, #0
 8016998:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801699c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80169a0:	460b      	mov	r3, r1
 80169a2:	4313      	orrs	r3, r2
 80169a4:	d053      	beq.n	8016a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80169a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80169aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80169ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80169b2:	d035      	beq.n	8016a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80169b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80169b8:	d82e      	bhi.n	8016a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80169ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80169be:	d031      	beq.n	8016a24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80169c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80169c4:	d828      	bhi.n	8016a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80169c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80169ca:	d01a      	beq.n	8016a02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80169cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80169d0:	d822      	bhi.n	8016a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d003      	beq.n	80169de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80169d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80169da:	d007      	beq.n	80169ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80169dc:	e01c      	b.n	8016a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80169de:	4b32      	ldr	r3, [pc, #200]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80169e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169e2:	4a31      	ldr	r2, [pc, #196]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80169e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80169e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80169ea:	e01c      	b.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80169ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80169f0:	3308      	adds	r3, #8
 80169f2:	2100      	movs	r1, #0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f002 fa55 	bl	8018ea4 <RCCEx_PLL2_Config>
 80169fa:	4603      	mov	r3, r0
 80169fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8016a00:	e011      	b.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a06:	3328      	adds	r3, #40	@ 0x28
 8016a08:	2100      	movs	r1, #0
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f002 fafc 	bl	8019008 <RCCEx_PLL3_Config>
 8016a10:	4603      	mov	r3, r0
 8016a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016a16:	e006      	b.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8016a18:	2301      	movs	r3, #1
 8016a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016a1e:	e002      	b.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8016a20:	bf00      	nop
 8016a22:	e000      	b.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8016a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d10b      	bne.n	8016a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8016a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016a32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8016a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8016aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8016a40:	430b      	orrs	r3, r1
 8016a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8016a44:	e003      	b.n	8016a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8016a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8016a5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8016a5e:	2300      	movs	r3, #0
 8016a60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8016a64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8016a68:	460b      	mov	r3, r1
 8016a6a:	4313      	orrs	r3, r2
 8016a6c:	d056      	beq.n	8016b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8016a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016a72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016a7a:	d038      	beq.n	8016aee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8016a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016a80:	d831      	bhi.n	8016ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8016a86:	d034      	beq.n	8016af2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8016a88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8016a8c:	d82b      	bhi.n	8016ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016a92:	d01d      	beq.n	8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8016a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016a98:	d825      	bhi.n	8016ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d006      	beq.n	8016aac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8016a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016aa2:	d00a      	beq.n	8016aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8016aa4:	e01f      	b.n	8016ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016aa6:	bf00      	nop
 8016aa8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016aac:	4ba2      	ldr	r3, [pc, #648]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ab0:	4aa1      	ldr	r2, [pc, #644]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016ab8:	e01c      	b.n	8016af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016abe:	3308      	adds	r3, #8
 8016ac0:	2100      	movs	r1, #0
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f002 f9ee 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8016ace:	e011      	b.n	8016af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ad4:	3328      	adds	r3, #40	@ 0x28
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f002 fa95 	bl	8019008 <RCCEx_PLL3_Config>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8016ae4:	e006      	b.n	8016af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016aec:	e002      	b.n	8016af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8016aee:	bf00      	nop
 8016af0:	e000      	b.n	8016af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8016af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d10b      	bne.n	8016b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8016afc:	4b8e      	ldr	r3, [pc, #568]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016b00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8016b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016b0c:	4a8a      	ldr	r2, [pc, #552]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016b0e:	430b      	orrs	r3, r1
 8016b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8016b12:	e003      	b.n	8016b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8016b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8016b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8016b32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8016b36:	460b      	mov	r3, r1
 8016b38:	4313      	orrs	r3, r2
 8016b3a:	d03a      	beq.n	8016bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8016b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b42:	2b30      	cmp	r3, #48	@ 0x30
 8016b44:	d01f      	beq.n	8016b86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8016b46:	2b30      	cmp	r3, #48	@ 0x30
 8016b48:	d819      	bhi.n	8016b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8016b4a:	2b20      	cmp	r3, #32
 8016b4c:	d00c      	beq.n	8016b68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8016b4e:	2b20      	cmp	r3, #32
 8016b50:	d815      	bhi.n	8016b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d019      	beq.n	8016b8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8016b56:	2b10      	cmp	r3, #16
 8016b58:	d111      	bne.n	8016b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016b5a:	4b77      	ldr	r3, [pc, #476]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b5e:	4a76      	ldr	r2, [pc, #472]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8016b66:	e011      	b.n	8016b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016b6c:	3308      	adds	r3, #8
 8016b6e:	2102      	movs	r1, #2
 8016b70:	4618      	mov	r0, r3
 8016b72:	f002 f997 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016b76:	4603      	mov	r3, r0
 8016b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8016b7c:	e006      	b.n	8016b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016b84:	e002      	b.n	8016b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8016b86:	bf00      	nop
 8016b88:	e000      	b.n	8016b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8016b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d10a      	bne.n	8016baa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8016b94:	4b68      	ldr	r3, [pc, #416]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8016b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ba2:	4a65      	ldr	r2, [pc, #404]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016ba4:	430b      	orrs	r3, r1
 8016ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8016ba8:	e003      	b.n	8016bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8016bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8016bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8016bc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8016bcc:	460b      	mov	r3, r1
 8016bce:	4313      	orrs	r3, r2
 8016bd0:	d051      	beq.n	8016c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8016bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016bdc:	d035      	beq.n	8016c4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8016bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016be2:	d82e      	bhi.n	8016c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8016be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016be8:	d031      	beq.n	8016c4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8016bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016bee:	d828      	bhi.n	8016c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8016bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016bf4:	d01a      	beq.n	8016c2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8016bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016bfa:	d822      	bhi.n	8016c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d003      	beq.n	8016c08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8016c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016c04:	d007      	beq.n	8016c16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8016c06:	e01c      	b.n	8016c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016c08:	4b4b      	ldr	r3, [pc, #300]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8016c14:	e01c      	b.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c1a:	3308      	adds	r3, #8
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f002 f940 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016c24:	4603      	mov	r3, r0
 8016c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8016c2a:	e011      	b.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8016c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c30:	3328      	adds	r3, #40	@ 0x28
 8016c32:	2100      	movs	r1, #0
 8016c34:	4618      	mov	r0, r3
 8016c36:	f002 f9e7 	bl	8019008 <RCCEx_PLL3_Config>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8016c40:	e006      	b.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016c42:	2301      	movs	r3, #1
 8016c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016c48:	e002      	b.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8016c4a:	bf00      	nop
 8016c4c:	e000      	b.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8016c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d10a      	bne.n	8016c6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8016c58:	4b37      	ldr	r3, [pc, #220]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016c5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8016c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016c66:	4a34      	ldr	r2, [pc, #208]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016c68:	430b      	orrs	r3, r1
 8016c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8016c6c:	e003      	b.n	8016c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8016c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8016c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8016c86:	2300      	movs	r3, #0
 8016c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8016c8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8016c90:	460b      	mov	r3, r1
 8016c92:	4313      	orrs	r3, r2
 8016c94:	d056      	beq.n	8016d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8016c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016ca0:	d033      	beq.n	8016d0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8016ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016ca6:	d82c      	bhi.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016ca8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016cac:	d02f      	beq.n	8016d0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8016cae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016cb2:	d826      	bhi.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016cb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016cb8:	d02b      	beq.n	8016d12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8016cba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016cbe:	d820      	bhi.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016cc4:	d012      	beq.n	8016cec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8016cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016cca:	d81a      	bhi.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d022      	beq.n	8016d16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8016cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016cd4:	d115      	bne.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016cda:	3308      	adds	r3, #8
 8016cdc:	2101      	movs	r1, #1
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f002 f8e0 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8016cea:	e015      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016cf0:	3328      	adds	r3, #40	@ 0x28
 8016cf2:	2101      	movs	r1, #1
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f002 f987 	bl	8019008 <RCCEx_PLL3_Config>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8016d00:	e00a      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016d02:	2301      	movs	r3, #1
 8016d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016d08:	e006      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016d0a:	bf00      	nop
 8016d0c:	e004      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016d0e:	bf00      	nop
 8016d10:	e002      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016d12:	bf00      	nop
 8016d14:	e000      	b.n	8016d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8016d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d10d      	bne.n	8016d3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8016d20:	4b05      	ldr	r3, [pc, #20]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016d24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8016d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016d2e:	4a02      	ldr	r2, [pc, #8]	@ (8016d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8016d30:	430b      	orrs	r3, r1
 8016d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8016d34:	e006      	b.n	8016d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8016d36:	bf00      	nop
 8016d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8016d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8016d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8016d54:	2300      	movs	r3, #0
 8016d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8016d5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8016d5e:	460b      	mov	r3, r1
 8016d60:	4313      	orrs	r3, r2
 8016d62:	d055      	beq.n	8016e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8016d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016d70:	d033      	beq.n	8016dda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8016d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016d76:	d82c      	bhi.n	8016dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8016d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d7c:	d02f      	beq.n	8016dde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8016d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d82:	d826      	bhi.n	8016dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8016d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016d88:	d02b      	beq.n	8016de2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8016d8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016d8e:	d820      	bhi.n	8016dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8016d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016d94:	d012      	beq.n	8016dbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8016d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016d9a:	d81a      	bhi.n	8016dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d022      	beq.n	8016de6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8016da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016da4:	d115      	bne.n	8016dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016daa:	3308      	adds	r3, #8
 8016dac:	2101      	movs	r1, #1
 8016dae:	4618      	mov	r0, r3
 8016db0:	f002 f878 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016db4:	4603      	mov	r3, r0
 8016db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8016dba:	e015      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016dc0:	3328      	adds	r3, #40	@ 0x28
 8016dc2:	2101      	movs	r1, #1
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f002 f91f 	bl	8019008 <RCCEx_PLL3_Config>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8016dd0:	e00a      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016dd8:	e006      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016dda:	bf00      	nop
 8016ddc:	e004      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016dde:	bf00      	nop
 8016de0:	e002      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016de2:	bf00      	nop
 8016de4:	e000      	b.n	8016de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8016de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d10b      	bne.n	8016e08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8016df0:	4ba3      	ldr	r3, [pc, #652]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016df4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8016df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016e00:	4a9f      	ldr	r2, [pc, #636]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016e02:	430b      	orrs	r3, r1
 8016e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8016e06:	e003      	b.n	8016e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8016e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8016e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8016e20:	2300      	movs	r3, #0
 8016e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8016e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	4313      	orrs	r3, r2
 8016e2e:	d037      	beq.n	8016ea0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8016e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016e3a:	d00e      	beq.n	8016e5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8016e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016e40:	d816      	bhi.n	8016e70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d018      	beq.n	8016e78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8016e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016e4a:	d111      	bne.n	8016e70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e50:	4a8b      	ldr	r2, [pc, #556]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8016e58:	e00f      	b.n	8016e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e5e:	3308      	adds	r3, #8
 8016e60:	2101      	movs	r1, #1
 8016e62:	4618      	mov	r0, r3
 8016e64:	f002 f81e 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8016e6e:	e004      	b.n	8016e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016e70:	2301      	movs	r3, #1
 8016e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016e76:	e000      	b.n	8016e7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8016e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d10a      	bne.n	8016e98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8016e82:	4b7f      	ldr	r3, [pc, #508]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016e86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8016e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e90:	4a7b      	ldr	r2, [pc, #492]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016e92:	430b      	orrs	r3, r1
 8016e94:	6513      	str	r3, [r2, #80]	@ 0x50
 8016e96:	e003      	b.n	8016ea0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8016ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8016eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8016eb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8016eba:	460b      	mov	r3, r1
 8016ebc:	4313      	orrs	r3, r2
 8016ebe:	d039      	beq.n	8016f34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8016ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016ec6:	2b03      	cmp	r3, #3
 8016ec8:	d81c      	bhi.n	8016f04 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8016eca:	a201      	add	r2, pc, #4	@ (adr r2, 8016ed0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8016ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed0:	08016f0d 	.word	0x08016f0d
 8016ed4:	08016ee1 	.word	0x08016ee1
 8016ed8:	08016eef 	.word	0x08016eef
 8016edc:	08016f0d 	.word	0x08016f0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016ee0:	4b67      	ldr	r3, [pc, #412]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ee4:	4a66      	ldr	r2, [pc, #408]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8016eec:	e00f      	b.n	8016f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016ef2:	3308      	adds	r3, #8
 8016ef4:	2102      	movs	r1, #2
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f001 ffd4 	bl	8018ea4 <RCCEx_PLL2_Config>
 8016efc:	4603      	mov	r3, r0
 8016efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8016f02:	e004      	b.n	8016f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8016f04:	2301      	movs	r3, #1
 8016f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016f0a:	e000      	b.n	8016f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8016f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d10a      	bne.n	8016f2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8016f16:	4b5a      	ldr	r3, [pc, #360]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016f1a:	f023 0103 	bic.w	r1, r3, #3
 8016f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016f24:	4a56      	ldr	r2, [pc, #344]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016f26:	430b      	orrs	r3, r1
 8016f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8016f2a:	e003      	b.n	8016f34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8016f40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8016f44:	2300      	movs	r3, #0
 8016f46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8016f4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8016f4e:	460b      	mov	r3, r1
 8016f50:	4313      	orrs	r3, r2
 8016f52:	f000 809f 	beq.w	8017094 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016f56:	4b4b      	ldr	r3, [pc, #300]	@ (8017084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8017084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8016f62:	f7fb fce5 	bl	8012930 <HAL_GetTick>
 8016f66:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8016f6a:	e00b      	b.n	8016f84 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016f6c:	f7fb fce0 	bl	8012930 <HAL_GetTick>
 8016f70:	4602      	mov	r2, r0
 8016f72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8016f76:	1ad3      	subs	r3, r2, r3
 8016f78:	2b64      	cmp	r3, #100	@ 0x64
 8016f7a:	d903      	bls.n	8016f84 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8016f7c:	2303      	movs	r3, #3
 8016f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016f82:	e005      	b.n	8016f90 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8016f84:	4b3f      	ldr	r3, [pc, #252]	@ (8017084 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d0ed      	beq.n	8016f6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8016f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d179      	bne.n	801708c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8016f98:	4b39      	ldr	r3, [pc, #228]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016f9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016fa4:	4053      	eors	r3, r2
 8016fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d015      	beq.n	8016fda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8016fae:	4b34      	ldr	r3, [pc, #208]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016fb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016fba:	4b31      	ldr	r3, [pc, #196]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fbe:	4a30      	ldr	r2, [pc, #192]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016fc4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fca:	4a2d      	ldr	r2, [pc, #180]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016fd0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8016fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8016fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016fd8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8016fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016fe6:	d118      	bne.n	801701a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fe8:	f7fb fca2 	bl	8012930 <HAL_GetTick>
 8016fec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016ff0:	e00d      	b.n	801700e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016ff2:	f7fb fc9d 	bl	8012930 <HAL_GetTick>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8016ffc:	1ad2      	subs	r2, r2, r3
 8016ffe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017002:	429a      	cmp	r2, r3
 8017004:	d903      	bls.n	801700e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8017006:	2303      	movs	r3, #3
 8017008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801700c:	e005      	b.n	801701a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801700e:	4b1c      	ldr	r3, [pc, #112]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017012:	f003 0302 	and.w	r3, r3, #2
 8017016:	2b00      	cmp	r3, #0
 8017018:	d0eb      	beq.n	8016ff2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801701a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801701e:	2b00      	cmp	r3, #0
 8017020:	d129      	bne.n	8017076 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017026:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801702a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801702e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017032:	d10e      	bne.n	8017052 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8017034:	4b12      	ldr	r3, [pc, #72]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017036:	691b      	ldr	r3, [r3, #16]
 8017038:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017040:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017044:	091a      	lsrs	r2, r3, #4
 8017046:	4b10      	ldr	r3, [pc, #64]	@ (8017088 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8017048:	4013      	ands	r3, r2
 801704a:	4a0d      	ldr	r2, [pc, #52]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801704c:	430b      	orrs	r3, r1
 801704e:	6113      	str	r3, [r2, #16]
 8017050:	e005      	b.n	801705e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8017052:	4b0b      	ldr	r3, [pc, #44]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017054:	691b      	ldr	r3, [r3, #16]
 8017056:	4a0a      	ldr	r2, [pc, #40]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017058:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801705c:	6113      	str	r3, [r2, #16]
 801705e:	4b08      	ldr	r3, [pc, #32]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017060:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017066:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801706a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801706e:	4a04      	ldr	r2, [pc, #16]	@ (8017080 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8017070:	430b      	orrs	r3, r1
 8017072:	6713      	str	r3, [r2, #112]	@ 0x70
 8017074:	e00e      	b.n	8017094 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801707a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801707e:	e009      	b.n	8017094 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8017080:	58024400 	.word	0x58024400
 8017084:	58024800 	.word	0x58024800
 8017088:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801708c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8017094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801709c:	f002 0301 	and.w	r3, r2, #1
 80170a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80170a4:	2300      	movs	r3, #0
 80170a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80170aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80170ae:	460b      	mov	r3, r1
 80170b0:	4313      	orrs	r3, r2
 80170b2:	f000 8089 	beq.w	80171c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80170b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80170ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170bc:	2b28      	cmp	r3, #40	@ 0x28
 80170be:	d86b      	bhi.n	8017198 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80170c0:	a201      	add	r2, pc, #4	@ (adr r2, 80170c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80170c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c6:	bf00      	nop
 80170c8:	080171a1 	.word	0x080171a1
 80170cc:	08017199 	.word	0x08017199
 80170d0:	08017199 	.word	0x08017199
 80170d4:	08017199 	.word	0x08017199
 80170d8:	08017199 	.word	0x08017199
 80170dc:	08017199 	.word	0x08017199
 80170e0:	08017199 	.word	0x08017199
 80170e4:	08017199 	.word	0x08017199
 80170e8:	0801716d 	.word	0x0801716d
 80170ec:	08017199 	.word	0x08017199
 80170f0:	08017199 	.word	0x08017199
 80170f4:	08017199 	.word	0x08017199
 80170f8:	08017199 	.word	0x08017199
 80170fc:	08017199 	.word	0x08017199
 8017100:	08017199 	.word	0x08017199
 8017104:	08017199 	.word	0x08017199
 8017108:	08017183 	.word	0x08017183
 801710c:	08017199 	.word	0x08017199
 8017110:	08017199 	.word	0x08017199
 8017114:	08017199 	.word	0x08017199
 8017118:	08017199 	.word	0x08017199
 801711c:	08017199 	.word	0x08017199
 8017120:	08017199 	.word	0x08017199
 8017124:	08017199 	.word	0x08017199
 8017128:	080171a1 	.word	0x080171a1
 801712c:	08017199 	.word	0x08017199
 8017130:	08017199 	.word	0x08017199
 8017134:	08017199 	.word	0x08017199
 8017138:	08017199 	.word	0x08017199
 801713c:	08017199 	.word	0x08017199
 8017140:	08017199 	.word	0x08017199
 8017144:	08017199 	.word	0x08017199
 8017148:	080171a1 	.word	0x080171a1
 801714c:	08017199 	.word	0x08017199
 8017150:	08017199 	.word	0x08017199
 8017154:	08017199 	.word	0x08017199
 8017158:	08017199 	.word	0x08017199
 801715c:	08017199 	.word	0x08017199
 8017160:	08017199 	.word	0x08017199
 8017164:	08017199 	.word	0x08017199
 8017168:	080171a1 	.word	0x080171a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801716c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017170:	3308      	adds	r3, #8
 8017172:	2101      	movs	r1, #1
 8017174:	4618      	mov	r0, r3
 8017176:	f001 fe95 	bl	8018ea4 <RCCEx_PLL2_Config>
 801717a:	4603      	mov	r3, r0
 801717c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8017180:	e00f      	b.n	80171a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8017182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017186:	3328      	adds	r3, #40	@ 0x28
 8017188:	2101      	movs	r1, #1
 801718a:	4618      	mov	r0, r3
 801718c:	f001 ff3c 	bl	8019008 <RCCEx_PLL3_Config>
 8017190:	4603      	mov	r3, r0
 8017192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8017196:	e004      	b.n	80171a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017198:	2301      	movs	r3, #1
 801719a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801719e:	e000      	b.n	80171a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80171a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80171a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d10a      	bne.n	80171c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80171aa:	4bbf      	ldr	r3, [pc, #764]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80171ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80171ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80171b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171b8:	4abb      	ldr	r2, [pc, #748]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80171ba:	430b      	orrs	r3, r1
 80171bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80171be:	e003      	b.n	80171c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80171c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80171c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80171c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d0:	f002 0302 	and.w	r3, r2, #2
 80171d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80171d8:	2300      	movs	r3, #0
 80171da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80171de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80171e2:	460b      	mov	r3, r1
 80171e4:	4313      	orrs	r3, r2
 80171e6:	d041      	beq.n	801726c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80171e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80171ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171ee:	2b05      	cmp	r3, #5
 80171f0:	d824      	bhi.n	801723c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80171f2:	a201      	add	r2, pc, #4	@ (adr r2, 80171f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80171f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171f8:	08017245 	.word	0x08017245
 80171fc:	08017211 	.word	0x08017211
 8017200:	08017227 	.word	0x08017227
 8017204:	08017245 	.word	0x08017245
 8017208:	08017245 	.word	0x08017245
 801720c:	08017245 	.word	0x08017245
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8017210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017214:	3308      	adds	r3, #8
 8017216:	2101      	movs	r1, #1
 8017218:	4618      	mov	r0, r3
 801721a:	f001 fe43 	bl	8018ea4 <RCCEx_PLL2_Config>
 801721e:	4603      	mov	r3, r0
 8017220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8017224:	e00f      	b.n	8017246 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8017226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801722a:	3328      	adds	r3, #40	@ 0x28
 801722c:	2101      	movs	r1, #1
 801722e:	4618      	mov	r0, r3
 8017230:	f001 feea 	bl	8019008 <RCCEx_PLL3_Config>
 8017234:	4603      	mov	r3, r0
 8017236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801723a:	e004      	b.n	8017246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801723c:	2301      	movs	r3, #1
 801723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017242:	e000      	b.n	8017246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8017244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801724a:	2b00      	cmp	r3, #0
 801724c:	d10a      	bne.n	8017264 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801724e:	4b96      	ldr	r3, [pc, #600]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8017250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017252:	f023 0107 	bic.w	r1, r3, #7
 8017256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801725a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801725c:	4a92      	ldr	r2, [pc, #584]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801725e:	430b      	orrs	r3, r1
 8017260:	6553      	str	r3, [r2, #84]	@ 0x54
 8017262:	e003      	b.n	801726c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017274:	f002 0304 	and.w	r3, r2, #4
 8017278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801727c:	2300      	movs	r3, #0
 801727e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017282:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8017286:	460b      	mov	r3, r1
 8017288:	4313      	orrs	r3, r2
 801728a:	d044      	beq.n	8017316 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017294:	2b05      	cmp	r3, #5
 8017296:	d825      	bhi.n	80172e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8017298:	a201      	add	r2, pc, #4	@ (adr r2, 80172a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801729e:	bf00      	nop
 80172a0:	080172ed 	.word	0x080172ed
 80172a4:	080172b9 	.word	0x080172b9
 80172a8:	080172cf 	.word	0x080172cf
 80172ac:	080172ed 	.word	0x080172ed
 80172b0:	080172ed 	.word	0x080172ed
 80172b4:	080172ed 	.word	0x080172ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80172b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172bc:	3308      	adds	r3, #8
 80172be:	2101      	movs	r1, #1
 80172c0:	4618      	mov	r0, r3
 80172c2:	f001 fdef 	bl	8018ea4 <RCCEx_PLL2_Config>
 80172c6:	4603      	mov	r3, r0
 80172c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80172cc:	e00f      	b.n	80172ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80172ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80172d2:	3328      	adds	r3, #40	@ 0x28
 80172d4:	2101      	movs	r1, #1
 80172d6:	4618      	mov	r0, r3
 80172d8:	f001 fe96 	bl	8019008 <RCCEx_PLL3_Config>
 80172dc:	4603      	mov	r3, r0
 80172de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80172e2:	e004      	b.n	80172ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80172e4:	2301      	movs	r3, #1
 80172e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80172ea:	e000      	b.n	80172ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80172ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80172ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d10b      	bne.n	801730e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80172f6:	4b6c      	ldr	r3, [pc, #432]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80172f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80172fa:	f023 0107 	bic.w	r1, r3, #7
 80172fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017306:	4a68      	ldr	r2, [pc, #416]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8017308:	430b      	orrs	r3, r1
 801730a:	6593      	str	r3, [r2, #88]	@ 0x58
 801730c:	e003      	b.n	8017316 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801730e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8017316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801731e:	f002 0320 	and.w	r3, r2, #32
 8017322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8017326:	2300      	movs	r3, #0
 8017328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801732c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8017330:	460b      	mov	r3, r1
 8017332:	4313      	orrs	r3, r2
 8017334:	d055      	beq.n	80173e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8017336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801733e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017342:	d033      	beq.n	80173ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8017344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017348:	d82c      	bhi.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801734e:	d02f      	beq.n	80173b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8017350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017354:	d826      	bhi.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8017356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801735a:	d02b      	beq.n	80173b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801735c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8017360:	d820      	bhi.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8017362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017366:	d012      	beq.n	801738e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8017368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801736c:	d81a      	bhi.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801736e:	2b00      	cmp	r3, #0
 8017370:	d022      	beq.n	80173b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8017372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017376:	d115      	bne.n	80173a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801737c:	3308      	adds	r3, #8
 801737e:	2100      	movs	r1, #0
 8017380:	4618      	mov	r0, r3
 8017382:	f001 fd8f 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017386:	4603      	mov	r3, r0
 8017388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801738c:	e015      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017392:	3328      	adds	r3, #40	@ 0x28
 8017394:	2102      	movs	r1, #2
 8017396:	4618      	mov	r0, r3
 8017398:	f001 fe36 	bl	8019008 <RCCEx_PLL3_Config>
 801739c:	4603      	mov	r3, r0
 801739e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80173a2:	e00a      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80173a4:	2301      	movs	r3, #1
 80173a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80173aa:	e006      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80173ac:	bf00      	nop
 80173ae:	e004      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80173b0:	bf00      	nop
 80173b2:	e002      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80173b4:	bf00      	nop
 80173b6:	e000      	b.n	80173ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80173b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80173ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d10b      	bne.n	80173da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80173c2:	4b39      	ldr	r3, [pc, #228]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80173c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80173ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80173ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80173d2:	4a35      	ldr	r2, [pc, #212]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80173d4:	430b      	orrs	r3, r1
 80173d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80173d8:	e003      	b.n	80173e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80173da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80173de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80173e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80173e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80173ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80173f2:	2300      	movs	r3, #0
 80173f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80173f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80173fc:	460b      	mov	r3, r1
 80173fe:	4313      	orrs	r3, r2
 8017400:	d058      	beq.n	80174b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8017402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801740a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801740e:	d033      	beq.n	8017478 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8017410:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8017414:	d82c      	bhi.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8017416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801741a:	d02f      	beq.n	801747c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801741c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017420:	d826      	bhi.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8017422:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017426:	d02b      	beq.n	8017480 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8017428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801742c:	d820      	bhi.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801742e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017432:	d012      	beq.n	801745a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8017434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017438:	d81a      	bhi.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801743a:	2b00      	cmp	r3, #0
 801743c:	d022      	beq.n	8017484 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801743e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017442:	d115      	bne.n	8017470 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017448:	3308      	adds	r3, #8
 801744a:	2100      	movs	r1, #0
 801744c:	4618      	mov	r0, r3
 801744e:	f001 fd29 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017452:	4603      	mov	r3, r0
 8017454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8017458:	e015      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801745e:	3328      	adds	r3, #40	@ 0x28
 8017460:	2102      	movs	r1, #2
 8017462:	4618      	mov	r0, r3
 8017464:	f001 fdd0 	bl	8019008 <RCCEx_PLL3_Config>
 8017468:	4603      	mov	r3, r0
 801746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801746e:	e00a      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017470:	2301      	movs	r3, #1
 8017472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017476:	e006      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8017478:	bf00      	nop
 801747a:	e004      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801747c:	bf00      	nop
 801747e:	e002      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8017480:	bf00      	nop
 8017482:	e000      	b.n	8017486 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8017484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801748a:	2b00      	cmp	r3, #0
 801748c:	d10e      	bne.n	80174ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801748e:	4b06      	ldr	r3, [pc, #24]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8017490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017492:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8017496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801749a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801749e:	4a02      	ldr	r2, [pc, #8]	@ (80174a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80174a0:	430b      	orrs	r3, r1
 80174a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80174a4:	e006      	b.n	80174b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80174a6:	bf00      	nop
 80174a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80174ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80174b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80174b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80174b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80174c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80174c4:	2300      	movs	r3, #0
 80174c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80174ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80174ce:	460b      	mov	r3, r1
 80174d0:	4313      	orrs	r3, r2
 80174d2:	d055      	beq.n	8017580 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80174d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80174d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80174dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80174e0:	d033      	beq.n	801754a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80174e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80174e6:	d82c      	bhi.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80174e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80174ec:	d02f      	beq.n	801754e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80174ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80174f2:	d826      	bhi.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80174f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80174f8:	d02b      	beq.n	8017552 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80174fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80174fe:	d820      	bhi.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8017500:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017504:	d012      	beq.n	801752c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8017506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801750a:	d81a      	bhi.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801750c:	2b00      	cmp	r3, #0
 801750e:	d022      	beq.n	8017556 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8017510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017514:	d115      	bne.n	8017542 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801751a:	3308      	adds	r3, #8
 801751c:	2100      	movs	r1, #0
 801751e:	4618      	mov	r0, r3
 8017520:	f001 fcc0 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017524:	4603      	mov	r3, r0
 8017526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801752a:	e015      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017530:	3328      	adds	r3, #40	@ 0x28
 8017532:	2102      	movs	r1, #2
 8017534:	4618      	mov	r0, r3
 8017536:	f001 fd67 	bl	8019008 <RCCEx_PLL3_Config>
 801753a:	4603      	mov	r3, r0
 801753c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8017540:	e00a      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017542:	2301      	movs	r3, #1
 8017544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017548:	e006      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801754a:	bf00      	nop
 801754c:	e004      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801754e:	bf00      	nop
 8017550:	e002      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8017552:	bf00      	nop
 8017554:	e000      	b.n	8017558 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8017556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801755c:	2b00      	cmp	r3, #0
 801755e:	d10b      	bne.n	8017578 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8017560:	4ba1      	ldr	r3, [pc, #644]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017564:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8017568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801756c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017570:	4a9d      	ldr	r2, [pc, #628]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017572:	430b      	orrs	r3, r1
 8017574:	6593      	str	r3, [r2, #88]	@ 0x58
 8017576:	e003      	b.n	8017580 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801757c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8017580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017588:	f002 0308 	and.w	r3, r2, #8
 801758c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017590:	2300      	movs	r3, #0
 8017592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017596:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801759a:	460b      	mov	r3, r1
 801759c:	4313      	orrs	r3, r2
 801759e:	d01e      	beq.n	80175de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80175a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80175a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80175ac:	d10c      	bne.n	80175c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80175ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175b2:	3328      	adds	r3, #40	@ 0x28
 80175b4:	2102      	movs	r1, #2
 80175b6:	4618      	mov	r0, r3
 80175b8:	f001 fd26 	bl	8019008 <RCCEx_PLL3_Config>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d002      	beq.n	80175c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80175c2:	2301      	movs	r3, #1
 80175c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80175c8:	4b87      	ldr	r3, [pc, #540]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80175ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80175cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80175d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80175d8:	4a83      	ldr	r2, [pc, #524]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80175da:	430b      	orrs	r3, r1
 80175dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80175de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80175e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e6:	f002 0310 	and.w	r3, r2, #16
 80175ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80175ee:	2300      	movs	r3, #0
 80175f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80175f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80175f8:	460b      	mov	r3, r1
 80175fa:	4313      	orrs	r3, r2
 80175fc:	d01e      	beq.n	801763c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80175fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801760a:	d10c      	bne.n	8017626 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017610:	3328      	adds	r3, #40	@ 0x28
 8017612:	2102      	movs	r1, #2
 8017614:	4618      	mov	r0, r3
 8017616:	f001 fcf7 	bl	8019008 <RCCEx_PLL3_Config>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d002      	beq.n	8017626 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8017620:	2301      	movs	r3, #1
 8017622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017626:	4b70      	ldr	r3, [pc, #448]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801762a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017636:	4a6c      	ldr	r2, [pc, #432]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017638:	430b      	orrs	r3, r1
 801763a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017644:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8017648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801764c:	2300      	movs	r3, #0
 801764e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017652:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8017656:	460b      	mov	r3, r1
 8017658:	4313      	orrs	r3, r2
 801765a:	d03e      	beq.n	80176da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017668:	d022      	beq.n	80176b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801766a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801766e:	d81b      	bhi.n	80176a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8017670:	2b00      	cmp	r3, #0
 8017672:	d003      	beq.n	801767c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8017674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017678:	d00b      	beq.n	8017692 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801767a:	e015      	b.n	80176a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017680:	3308      	adds	r3, #8
 8017682:	2100      	movs	r1, #0
 8017684:	4618      	mov	r0, r3
 8017686:	f001 fc0d 	bl	8018ea4 <RCCEx_PLL2_Config>
 801768a:	4603      	mov	r3, r0
 801768c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8017690:	e00f      	b.n	80176b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8017692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017696:	3328      	adds	r3, #40	@ 0x28
 8017698:	2102      	movs	r1, #2
 801769a:	4618      	mov	r0, r3
 801769c:	f001 fcb4 	bl	8019008 <RCCEx_PLL3_Config>
 80176a0:	4603      	mov	r3, r0
 80176a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80176a6:	e004      	b.n	80176b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80176a8:	2301      	movs	r3, #1
 80176aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80176ae:	e000      	b.n	80176b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80176b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80176b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d10b      	bne.n	80176d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80176ba:	4b4b      	ldr	r3, [pc, #300]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80176bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80176be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80176c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80176c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80176ca:	4a47      	ldr	r2, [pc, #284]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80176cc:	430b      	orrs	r3, r1
 80176ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80176d0:	e003      	b.n	80176da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80176d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80176d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80176da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80176de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80176e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80176e8:	2300      	movs	r3, #0
 80176ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80176ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80176f0:	460b      	mov	r3, r1
 80176f2:	4313      	orrs	r3, r2
 80176f4:	d03b      	beq.n	801776e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80176f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80176fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80176fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017702:	d01f      	beq.n	8017744 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8017704:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017708:	d818      	bhi.n	801773c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801770a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801770e:	d003      	beq.n	8017718 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8017710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017714:	d007      	beq.n	8017726 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8017716:	e011      	b.n	801773c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017718:	4b33      	ldr	r3, [pc, #204]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801771c:	4a32      	ldr	r2, [pc, #200]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801771e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8017724:	e00f      	b.n	8017746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8017726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801772a:	3328      	adds	r3, #40	@ 0x28
 801772c:	2101      	movs	r1, #1
 801772e:	4618      	mov	r0, r3
 8017730:	f001 fc6a 	bl	8019008 <RCCEx_PLL3_Config>
 8017734:	4603      	mov	r3, r0
 8017736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801773a:	e004      	b.n	8017746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801773c:	2301      	movs	r3, #1
 801773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017742:	e000      	b.n	8017746 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8017744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801774a:	2b00      	cmp	r3, #0
 801774c:	d10b      	bne.n	8017766 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801774e:	4b26      	ldr	r3, [pc, #152]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017752:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8017756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801775e:	4a22      	ldr	r2, [pc, #136]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8017760:	430b      	orrs	r3, r1
 8017762:	6553      	str	r3, [r2, #84]	@ 0x54
 8017764:	e003      	b.n	801776e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801776a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017776:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801777a:	673b      	str	r3, [r7, #112]	@ 0x70
 801777c:	2300      	movs	r3, #0
 801777e:	677b      	str	r3, [r7, #116]	@ 0x74
 8017780:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8017784:	460b      	mov	r3, r1
 8017786:	4313      	orrs	r3, r2
 8017788:	d034      	beq.n	80177f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801778e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017790:	2b00      	cmp	r3, #0
 8017792:	d003      	beq.n	801779c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8017794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017798:	d007      	beq.n	80177aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801779a:	e011      	b.n	80177c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801779c:	4b12      	ldr	r3, [pc, #72]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801779e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177a0:	4a11      	ldr	r2, [pc, #68]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80177a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80177a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80177a8:	e00e      	b.n	80177c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80177aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80177ae:	3308      	adds	r3, #8
 80177b0:	2102      	movs	r1, #2
 80177b2:	4618      	mov	r0, r3
 80177b4:	f001 fb76 	bl	8018ea4 <RCCEx_PLL2_Config>
 80177b8:	4603      	mov	r3, r0
 80177ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80177be:	e003      	b.n	80177c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80177c0:	2301      	movs	r3, #1
 80177c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80177c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80177c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d10d      	bne.n	80177ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80177d0:	4b05      	ldr	r3, [pc, #20]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80177d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80177d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80177d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80177dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177de:	4a02      	ldr	r2, [pc, #8]	@ (80177e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80177e0:	430b      	orrs	r3, r1
 80177e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80177e4:	e006      	b.n	80177f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80177e6:	bf00      	nop
 80177e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80177ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80177f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80177f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80177f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8017800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017802:	2300      	movs	r3, #0
 8017804:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017806:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801780a:	460b      	mov	r3, r1
 801780c:	4313      	orrs	r3, r2
 801780e:	d00c      	beq.n	801782a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8017810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017814:	3328      	adds	r3, #40	@ 0x28
 8017816:	2102      	movs	r1, #2
 8017818:	4618      	mov	r0, r3
 801781a:	f001 fbf5 	bl	8019008 <RCCEx_PLL3_Config>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d002      	beq.n	801782a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8017824:	2301      	movs	r3, #1
 8017826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017832:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8017836:	663b      	str	r3, [r7, #96]	@ 0x60
 8017838:	2300      	movs	r3, #0
 801783a:	667b      	str	r3, [r7, #100]	@ 0x64
 801783c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8017840:	460b      	mov	r3, r1
 8017842:	4313      	orrs	r3, r2
 8017844:	d038      	beq.n	80178b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8017846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801784a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801784e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017852:	d018      	beq.n	8017886 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8017854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017858:	d811      	bhi.n	801787e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801785a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801785e:	d014      	beq.n	801788a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8017860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017864:	d80b      	bhi.n	801787e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8017866:	2b00      	cmp	r3, #0
 8017868:	d011      	beq.n	801788e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801786a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801786e:	d106      	bne.n	801787e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017870:	4bc3      	ldr	r3, [pc, #780]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017874:	4ac2      	ldr	r2, [pc, #776]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801787a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801787c:	e008      	b.n	8017890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801787e:	2301      	movs	r3, #1
 8017880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017884:	e004      	b.n	8017890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8017886:	bf00      	nop
 8017888:	e002      	b.n	8017890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801788a:	bf00      	nop
 801788c:	e000      	b.n	8017890 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801788e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017894:	2b00      	cmp	r3, #0
 8017896:	d10b      	bne.n	80178b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017898:	4bb9      	ldr	r3, [pc, #740]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801789a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801789c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80178a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80178a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80178a8:	4ab5      	ldr	r2, [pc, #724]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80178aa:	430b      	orrs	r3, r1
 80178ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80178ae:	e003      	b.n	80178b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80178b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80178b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80178b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80178bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80178c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80178c6:	2300      	movs	r3, #0
 80178c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80178ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80178ce:	460b      	mov	r3, r1
 80178d0:	4313      	orrs	r3, r2
 80178d2:	d009      	beq.n	80178e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80178d4:	4baa      	ldr	r3, [pc, #680]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80178d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80178d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80178dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80178e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178e2:	4aa7      	ldr	r2, [pc, #668]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80178e4:	430b      	orrs	r3, r1
 80178e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80178e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80178ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80178f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80178f6:	2300      	movs	r3, #0
 80178f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80178fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80178fe:	460b      	mov	r3, r1
 8017900:	4313      	orrs	r3, r2
 8017902:	d00a      	beq.n	801791a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8017904:	4b9e      	ldr	r3, [pc, #632]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017906:	691b      	ldr	r3, [r3, #16]
 8017908:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017914:	4a9a      	ldr	r2, [pc, #616]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017916:	430b      	orrs	r3, r1
 8017918:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017922:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8017926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017928:	2300      	movs	r3, #0
 801792a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801792c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8017930:	460b      	mov	r3, r1
 8017932:	4313      	orrs	r3, r2
 8017934:	d009      	beq.n	801794a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8017936:	4b92      	ldr	r3, [pc, #584]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801793a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017944:	4a8e      	ldr	r2, [pc, #568]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017946:	430b      	orrs	r3, r1
 8017948:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017952:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8017956:	643b      	str	r3, [r7, #64]	@ 0x40
 8017958:	2300      	movs	r3, #0
 801795a:	647b      	str	r3, [r7, #68]	@ 0x44
 801795c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8017960:	460b      	mov	r3, r1
 8017962:	4313      	orrs	r3, r2
 8017964:	d00e      	beq.n	8017984 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8017966:	4b86      	ldr	r3, [pc, #536]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017968:	691b      	ldr	r3, [r3, #16]
 801796a:	4a85      	ldr	r2, [pc, #532]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801796c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8017970:	6113      	str	r3, [r2, #16]
 8017972:	4b83      	ldr	r3, [pc, #524]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017974:	6919      	ldr	r1, [r3, #16]
 8017976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801797a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801797e:	4a80      	ldr	r2, [pc, #512]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8017980:	430b      	orrs	r3, r1
 8017982:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8017984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801798c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8017990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017992:	2300      	movs	r3, #0
 8017994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017996:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801799a:	460b      	mov	r3, r1
 801799c:	4313      	orrs	r3, r2
 801799e:	d009      	beq.n	80179b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80179a0:	4b77      	ldr	r3, [pc, #476]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80179a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80179a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80179a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80179ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80179ae:	4a74      	ldr	r2, [pc, #464]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80179b0:	430b      	orrs	r3, r1
 80179b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80179b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80179b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80179c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80179c2:	2300      	movs	r3, #0
 80179c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80179c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80179ca:	460b      	mov	r3, r1
 80179cc:	4313      	orrs	r3, r2
 80179ce:	d00a      	beq.n	80179e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80179d0:	4b6b      	ldr	r3, [pc, #428]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80179d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80179d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80179d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80179dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80179e0:	4a67      	ldr	r2, [pc, #412]	@ (8017b80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80179e2:	430b      	orrs	r3, r1
 80179e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80179e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80179ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ee:	2100      	movs	r1, #0
 80179f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80179f2:	f003 0301 	and.w	r3, r3, #1
 80179f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80179fc:	460b      	mov	r3, r1
 80179fe:	4313      	orrs	r3, r2
 8017a00:	d011      	beq.n	8017a26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a06:	3308      	adds	r3, #8
 8017a08:	2100      	movs	r1, #0
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f001 fa4a 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017a10:	4603      	mov	r3, r0
 8017a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d003      	beq.n	8017a26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8017a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	2100      	movs	r1, #0
 8017a30:	6239      	str	r1, [r7, #32]
 8017a32:	f003 0302 	and.w	r3, r3, #2
 8017a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8017a3c:	460b      	mov	r3, r1
 8017a3e:	4313      	orrs	r3, r2
 8017a40:	d011      	beq.n	8017a66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8017a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a46:	3308      	adds	r3, #8
 8017a48:	2101      	movs	r1, #1
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f001 fa2a 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017a50:	4603      	mov	r3, r0
 8017a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d003      	beq.n	8017a66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8017a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6e:	2100      	movs	r1, #0
 8017a70:	61b9      	str	r1, [r7, #24]
 8017a72:	f003 0304 	and.w	r3, r3, #4
 8017a76:	61fb      	str	r3, [r7, #28]
 8017a78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017a7c:	460b      	mov	r3, r1
 8017a7e:	4313      	orrs	r3, r2
 8017a80:	d011      	beq.n	8017aa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8017a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a86:	3308      	adds	r3, #8
 8017a88:	2102      	movs	r1, #2
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f001 fa0a 	bl	8018ea4 <RCCEx_PLL2_Config>
 8017a90:	4603      	mov	r3, r0
 8017a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d003      	beq.n	8017aa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8017aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aae:	2100      	movs	r1, #0
 8017ab0:	6139      	str	r1, [r7, #16]
 8017ab2:	f003 0308 	and.w	r3, r3, #8
 8017ab6:	617b      	str	r3, [r7, #20]
 8017ab8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8017abc:	460b      	mov	r3, r1
 8017abe:	4313      	orrs	r3, r2
 8017ac0:	d011      	beq.n	8017ae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8017ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017ac6:	3328      	adds	r3, #40	@ 0x28
 8017ac8:	2100      	movs	r1, #0
 8017aca:	4618      	mov	r0, r3
 8017acc:	f001 fa9c 	bl	8019008 <RCCEx_PLL3_Config>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8017ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d003      	beq.n	8017ae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8017ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aee:	2100      	movs	r1, #0
 8017af0:	60b9      	str	r1, [r7, #8]
 8017af2:	f003 0310 	and.w	r3, r3, #16
 8017af6:	60fb      	str	r3, [r7, #12]
 8017af8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8017afc:	460b      	mov	r3, r1
 8017afe:	4313      	orrs	r3, r2
 8017b00:	d011      	beq.n	8017b26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8017b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017b06:	3328      	adds	r3, #40	@ 0x28
 8017b08:	2101      	movs	r1, #1
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f001 fa7c 	bl	8019008 <RCCEx_PLL3_Config>
 8017b10:	4603      	mov	r3, r0
 8017b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d003      	beq.n	8017b26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8017b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b2e:	2100      	movs	r1, #0
 8017b30:	6039      	str	r1, [r7, #0]
 8017b32:	f003 0320 	and.w	r3, r3, #32
 8017b36:	607b      	str	r3, [r7, #4]
 8017b38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	4313      	orrs	r3, r2
 8017b40:	d011      	beq.n	8017b66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8017b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017b46:	3328      	adds	r3, #40	@ 0x28
 8017b48:	2102      	movs	r1, #2
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f001 fa5c 	bl	8019008 <RCCEx_PLL3_Config>
 8017b50:	4603      	mov	r3, r0
 8017b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8017b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d003      	beq.n	8017b66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8017b66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d101      	bne.n	8017b72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	e000      	b.n	8017b74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8017b72:	2301      	movs	r3, #1
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017b80:	58024400 	.word	0x58024400

08017b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b090      	sub	sp, #64	@ 0x40
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8017b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b92:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8017b96:	430b      	orrs	r3, r1
 8017b98:	f040 8094 	bne.w	8017cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8017b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ba0:	f003 0307 	and.w	r3, r3, #7
 8017ba4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba8:	2b04      	cmp	r3, #4
 8017baa:	f200 8087 	bhi.w	8017cbc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8017bae:	a201      	add	r2, pc, #4	@ (adr r2, 8017bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8017bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bb4:	08017bc9 	.word	0x08017bc9
 8017bb8:	08017bf1 	.word	0x08017bf1
 8017bbc:	08017c19 	.word	0x08017c19
 8017bc0:	08017cb5 	.word	0x08017cb5
 8017bc4:	08017c41 	.word	0x08017c41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017bc8:	4b93      	ldr	r3, [pc, #588]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017bd4:	d108      	bne.n	8017be8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f001 f810 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017be4:	f000 bd45 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017bec:	f000 bd41 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017bf0:	4b89      	ldr	r3, [pc, #548]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017bfc:	d108      	bne.n	8017c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017bfe:	f107 0318 	add.w	r3, r7, #24
 8017c02:	4618      	mov	r0, r3
 8017c04:	f000 fd54 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017c0c:	f000 bd31 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017c10:	2300      	movs	r3, #0
 8017c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017c14:	f000 bd2d 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017c18:	4b7f      	ldr	r3, [pc, #508]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017c24:	d108      	bne.n	8017c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017c26:	f107 030c 	add.w	r3, r7, #12
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f000 fe94 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017c34:	f000 bd1d 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017c3c:	f000 bd19 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017c40:	4b75      	ldr	r3, [pc, #468]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017c48:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017c4a:	4b73      	ldr	r3, [pc, #460]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f003 0304 	and.w	r3, r3, #4
 8017c52:	2b04      	cmp	r3, #4
 8017c54:	d10c      	bne.n	8017c70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8017c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d109      	bne.n	8017c70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	08db      	lsrs	r3, r3, #3
 8017c62:	f003 0303 	and.w	r3, r3, #3
 8017c66:	4a6d      	ldr	r2, [pc, #436]	@ (8017e1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8017c68:	fa22 f303 	lsr.w	r3, r2, r3
 8017c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017c6e:	e01f      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017c70:	4b69      	ldr	r3, [pc, #420]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017c7c:	d106      	bne.n	8017c8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8017c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017c84:	d102      	bne.n	8017c8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017c86:	4b66      	ldr	r3, [pc, #408]	@ (8017e20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8017c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017c8a:	e011      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017c8c:	4b62      	ldr	r3, [pc, #392]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017c98:	d106      	bne.n	8017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8017c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017ca0:	d102      	bne.n	8017ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017ca2:	4b60      	ldr	r3, [pc, #384]	@ (8017e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8017ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017ca6:	e003      	b.n	8017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017cac:	f000 bce1 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017cb0:	f000 bcdf 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8017e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8017cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017cb8:	f000 bcdb 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017cc0:	f000 bcd7 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8017cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017cc8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8017ccc:	430b      	orrs	r3, r1
 8017cce:	f040 80ad 	bne.w	8017e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8017cd2:	4b51      	ldr	r3, [pc, #324]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cd6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8017cda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ce2:	d056      	beq.n	8017d92 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8017ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017cea:	f200 8090 	bhi.w	8017e0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8017cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8017cf2:	f000 8088 	beq.w	8017e06 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8017cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cf8:	2bc0      	cmp	r3, #192	@ 0xc0
 8017cfa:	f200 8088 	bhi.w	8017e0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8017cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d00:	2b80      	cmp	r3, #128	@ 0x80
 8017d02:	d032      	beq.n	8017d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8017d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d06:	2b80      	cmp	r3, #128	@ 0x80
 8017d08:	f200 8081 	bhi.w	8017e0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d003      	beq.n	8017d1a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8017d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d14:	2b40      	cmp	r3, #64	@ 0x40
 8017d16:	d014      	beq.n	8017d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8017d18:	e079      	b.n	8017e0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017d26:	d108      	bne.n	8017d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f000 ff67 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017d36:	f000 bc9c 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017d3e:	f000 bc98 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017d42:	4b35      	ldr	r3, [pc, #212]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017d4e:	d108      	bne.n	8017d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017d50:	f107 0318 	add.w	r3, r7, #24
 8017d54:	4618      	mov	r0, r3
 8017d56:	f000 fcab 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017d5a:	69bb      	ldr	r3, [r7, #24]
 8017d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017d5e:	f000 bc88 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017d62:	2300      	movs	r3, #0
 8017d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017d66:	f000 bc84 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017d76:	d108      	bne.n	8017d8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017d78:	f107 030c 	add.w	r3, r7, #12
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f000 fdeb 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017d86:	f000 bc74 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017d8e:	f000 bc70 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017d92:	4b21      	ldr	r3, [pc, #132]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	f003 0304 	and.w	r3, r3, #4
 8017da4:	2b04      	cmp	r3, #4
 8017da6:	d10c      	bne.n	8017dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8017da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d109      	bne.n	8017dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017dae:	4b1a      	ldr	r3, [pc, #104]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	08db      	lsrs	r3, r3, #3
 8017db4:	f003 0303 	and.w	r3, r3, #3
 8017db8:	4a18      	ldr	r2, [pc, #96]	@ (8017e1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8017dba:	fa22 f303 	lsr.w	r3, r2, r3
 8017dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017dc0:	e01f      	b.n	8017e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017dc2:	4b15      	ldr	r3, [pc, #84]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017dce:	d106      	bne.n	8017dde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8017dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017dd6:	d102      	bne.n	8017dde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017dd8:	4b11      	ldr	r3, [pc, #68]	@ (8017e20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8017dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017ddc:	e011      	b.n	8017e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017dde:	4b0e      	ldr	r3, [pc, #56]	@ (8017e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017dea:	d106      	bne.n	8017dfa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8017dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017df2:	d102      	bne.n	8017dfa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017df4:	4b0b      	ldr	r3, [pc, #44]	@ (8017e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8017df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017df8:	e003      	b.n	8017e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017dfe:	f000 bc38 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017e02:	f000 bc36 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017e06:	4b08      	ldr	r3, [pc, #32]	@ (8017e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8017e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e0a:	f000 bc32 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017e12:	f000 bc2e 	b.w	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017e16:	bf00      	nop
 8017e18:	58024400 	.word	0x58024400
 8017e1c:	03d09000 	.word	0x03d09000
 8017e20:	003d0900 	.word	0x003d0900
 8017e24:	017d7840 	.word	0x017d7840
 8017e28:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8017e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017e30:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8017e34:	430b      	orrs	r3, r1
 8017e36:	f040 809c 	bne.w	8017f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8017e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017e3e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8017e42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017e4a:	d054      	beq.n	8017ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8017e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017e52:	f200 808b 	bhi.w	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8017e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8017e5c:	f000 8083 	beq.w	8017f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8017e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8017e66:	f200 8081 	bhi.w	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8017e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017e70:	d02f      	beq.n	8017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8017e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017e78:	d878      	bhi.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8017e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d004      	beq.n	8017e8a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8017e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017e86:	d012      	beq.n	8017eae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8017e88:	e070      	b.n	8017f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017e92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017e96:	d107      	bne.n	8017ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f000 feaf 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017ea6:	e3e4      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017eac:	e3e1      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017eae:	4b81      	ldr	r3, [pc, #516]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017eb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017eba:	d107      	bne.n	8017ecc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017ebc:	f107 0318 	add.w	r3, r7, #24
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f000 fbf5 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017eca:	e3d2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ed0:	e3cf      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8017ed2:	4b78      	ldr	r3, [pc, #480]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017ede:	d107      	bne.n	8017ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017ee0:	f107 030c 	add.w	r3, r7, #12
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f000 fd37 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017eee:	e3c0      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ef4:	e3bd      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8017ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017efa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8017efe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8017f00:	4b6c      	ldr	r3, [pc, #432]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	f003 0304 	and.w	r3, r3, #4
 8017f08:	2b04      	cmp	r3, #4
 8017f0a:	d10c      	bne.n	8017f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8017f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d109      	bne.n	8017f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017f12:	4b68      	ldr	r3, [pc, #416]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	08db      	lsrs	r3, r3, #3
 8017f18:	f003 0303 	and.w	r3, r3, #3
 8017f1c:	4a66      	ldr	r2, [pc, #408]	@ (80180b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8017f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8017f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f24:	e01e      	b.n	8017f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8017f26:	4b63      	ldr	r3, [pc, #396]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017f32:	d106      	bne.n	8017f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8017f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017f3a:	d102      	bne.n	8017f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80180bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8017f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f40:	e010      	b.n	8017f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8017f42:	4b5c      	ldr	r3, [pc, #368]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017f4e:	d106      	bne.n	8017f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8017f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f56:	d102      	bne.n	8017f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017f58:	4b59      	ldr	r3, [pc, #356]	@ (80180c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8017f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f5c:	e002      	b.n	8017f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017f62:	e386      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017f64:	e385      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017f66:	4b57      	ldr	r3, [pc, #348]	@ (80180c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8017f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017f6a:	e382      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017f70:	e37f      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8017f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f76:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8017f7a:	430b      	orrs	r3, r1
 8017f7c:	f040 80a7 	bne.w	80180ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8017f80:	4b4c      	ldr	r3, [pc, #304]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017f84:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8017f88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017f90:	d055      	beq.n	801803e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8017f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8017f98:	f200 8096 	bhi.w	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017fa2:	f000 8084 	beq.w	80180ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017fac:	f200 808c 	bhi.w	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017fb6:	d030      	beq.n	801801a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8017fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017fbe:	f200 8083 	bhi.w	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8017fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d004      	beq.n	8017fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8017fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017fce:	d012      	beq.n	8017ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8017fd0:	e07a      	b.n	80180c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017fd2:	4b38      	ldr	r3, [pc, #224]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017fde:	d107      	bne.n	8017ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f000 fe0b 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017fee:	e340      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017ff4:	e33d      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018002:	d107      	bne.n	8018014 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018004:	f107 0318 	add.w	r3, r7, #24
 8018008:	4618      	mov	r0, r3
 801800a:	f000 fb51 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801800e:	69bb      	ldr	r3, [r7, #24]
 8018010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018012:	e32e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018018:	e32b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801801a:	4b26      	ldr	r3, [pc, #152]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018026:	d107      	bne.n	8018038 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018028:	f107 030c 	add.w	r3, r7, #12
 801802c:	4618      	mov	r0, r3
 801802e:	f000 fc93 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018036:	e31c      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018038:	2300      	movs	r3, #0
 801803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801803c:	e319      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801803e:	4b1d      	ldr	r3, [pc, #116]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8018040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018042:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8018046:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8018048:	4b1a      	ldr	r3, [pc, #104]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	f003 0304 	and.w	r3, r3, #4
 8018050:	2b04      	cmp	r3, #4
 8018052:	d10c      	bne.n	801806e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8018054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018056:	2b00      	cmp	r3, #0
 8018058:	d109      	bne.n	801806e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801805a:	4b16      	ldr	r3, [pc, #88]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	08db      	lsrs	r3, r3, #3
 8018060:	f003 0303 	and.w	r3, r3, #3
 8018064:	4a14      	ldr	r2, [pc, #80]	@ (80180b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8018066:	fa22 f303 	lsr.w	r3, r2, r3
 801806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801806c:	e01e      	b.n	80180ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801806e:	4b11      	ldr	r3, [pc, #68]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801807a:	d106      	bne.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801807c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801807e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018082:	d102      	bne.n	801808a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8018084:	4b0d      	ldr	r3, [pc, #52]	@ (80180bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8018086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018088:	e010      	b.n	80180ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801808a:	4b0a      	ldr	r3, [pc, #40]	@ (80180b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018096:	d106      	bne.n	80180a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8018098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801809a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801809e:	d102      	bne.n	80180a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80180a0:	4b07      	ldr	r3, [pc, #28]	@ (80180c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80180a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180a4:	e002      	b.n	80180ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80180a6:	2300      	movs	r3, #0
 80180a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80180aa:	e2e2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80180ac:	e2e1      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80180ae:	4b05      	ldr	r3, [pc, #20]	@ (80180c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80180b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80180b2:	e2de      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80180b4:	58024400 	.word	0x58024400
 80180b8:	03d09000 	.word	0x03d09000
 80180bc:	003d0900 	.word	0x003d0900
 80180c0:	017d7840 	.word	0x017d7840
 80180c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80180c8:	2300      	movs	r3, #0
 80180ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80180cc:	e2d1      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80180ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80180d6:	430b      	orrs	r3, r1
 80180d8:	f040 809c 	bne.w	8018214 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80180dc:	4b93      	ldr	r3, [pc, #588]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80180de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80180e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80180e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80180e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80180ec:	d054      	beq.n	8018198 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80180ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80180f4:	f200 808b 	bhi.w	801820e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80180f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80180fe:	f000 8083 	beq.w	8018208 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8018102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018104:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8018108:	f200 8081 	bhi.w	801820e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801810e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018112:	d02f      	beq.n	8018174 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8018114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801811a:	d878      	bhi.n	801820e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801811e:	2b00      	cmp	r3, #0
 8018120:	d004      	beq.n	801812c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8018122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018128:	d012      	beq.n	8018150 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801812a:	e070      	b.n	801820e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801812c:	4b7f      	ldr	r3, [pc, #508]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018134:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018138:	d107      	bne.n	801814a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801813a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801813e:	4618      	mov	r0, r3
 8018140:	f000 fd5e 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018148:	e293      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801814a:	2300      	movs	r3, #0
 801814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801814e:	e290      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018150:	4b76      	ldr	r3, [pc, #472]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801815c:	d107      	bne.n	801816e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801815e:	f107 0318 	add.w	r3, r7, #24
 8018162:	4618      	mov	r0, r3
 8018164:	f000 faa4 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8018168:	69bb      	ldr	r3, [r7, #24]
 801816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801816c:	e281      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801816e:	2300      	movs	r3, #0
 8018170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018172:	e27e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8018174:	4b6d      	ldr	r3, [pc, #436]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801817c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018180:	d107      	bne.n	8018192 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018182:	f107 030c 	add.w	r3, r7, #12
 8018186:	4618      	mov	r0, r3
 8018188:	f000 fbe6 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018190:	e26f      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018192:	2300      	movs	r3, #0
 8018194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018196:	e26c      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8018198:	4b64      	ldr	r3, [pc, #400]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801819a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801819c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80181a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80181a2:	4b62      	ldr	r3, [pc, #392]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	f003 0304 	and.w	r3, r3, #4
 80181aa:	2b04      	cmp	r3, #4
 80181ac:	d10c      	bne.n	80181c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80181ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d109      	bne.n	80181c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80181b4:	4b5d      	ldr	r3, [pc, #372]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	08db      	lsrs	r3, r3, #3
 80181ba:	f003 0303 	and.w	r3, r3, #3
 80181be:	4a5c      	ldr	r2, [pc, #368]	@ (8018330 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80181c0:	fa22 f303 	lsr.w	r3, r2, r3
 80181c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181c6:	e01e      	b.n	8018206 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80181c8:	4b58      	ldr	r3, [pc, #352]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80181d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80181d4:	d106      	bne.n	80181e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80181d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80181dc:	d102      	bne.n	80181e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80181de:	4b55      	ldr	r3, [pc, #340]	@ (8018334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80181e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181e2:	e010      	b.n	8018206 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80181e4:	4b51      	ldr	r3, [pc, #324]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80181ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80181f0:	d106      	bne.n	8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80181f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80181f8:	d102      	bne.n	8018200 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80181fa:	4b4f      	ldr	r3, [pc, #316]	@ (8018338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80181fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181fe:	e002      	b.n	8018206 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8018200:	2300      	movs	r3, #0
 8018202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8018204:	e235      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8018206:	e234      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8018208:	4b4c      	ldr	r3, [pc, #304]	@ (801833c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801820c:	e231      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018212:	e22e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8018214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018218:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801821c:	430b      	orrs	r3, r1
 801821e:	f040 808f 	bne.w	8018340 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8018222:	4b42      	ldr	r3, [pc, #264]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8018224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018226:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801822a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801822e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8018232:	d06b      	beq.n	801830c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8018234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801823a:	d874      	bhi.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801823e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8018242:	d056      	beq.n	80182f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8018244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801824a:	d86c      	bhi.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801824e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8018252:	d03b      	beq.n	80182cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8018254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801825a:	d864      	bhi.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801825e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018262:	d021      	beq.n	80182a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8018264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801826a:	d85c      	bhi.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801826e:	2b00      	cmp	r3, #0
 8018270:	d004      	beq.n	801827c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8018272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018278:	d004      	beq.n	8018284 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801827a:	e054      	b.n	8018326 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801827c:	f7fe fa4c 	bl	8016718 <HAL_RCC_GetPCLK1Freq>
 8018280:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018282:	e1f6      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018284:	4b29      	ldr	r3, [pc, #164]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801828c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018290:	d107      	bne.n	80182a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018292:	f107 0318 	add.w	r3, r7, #24
 8018296:	4618      	mov	r0, r3
 8018298:	f000 fa0a 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801829c:	69fb      	ldr	r3, [r7, #28]
 801829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80182a0:	e1e7      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80182a2:	2300      	movs	r3, #0
 80182a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80182a6:	e1e4      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80182a8:	4b20      	ldr	r3, [pc, #128]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80182b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80182b4:	d107      	bne.n	80182c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80182b6:	f107 030c 	add.w	r3, r7, #12
 80182ba:	4618      	mov	r0, r3
 80182bc:	f000 fb4c 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80182c0:	693b      	ldr	r3, [r7, #16]
 80182c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80182c4:	e1d5      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80182ca:	e1d2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80182cc:	4b17      	ldr	r3, [pc, #92]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	f003 0304 	and.w	r3, r3, #4
 80182d4:	2b04      	cmp	r3, #4
 80182d6:	d109      	bne.n	80182ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80182d8:	4b14      	ldr	r3, [pc, #80]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	08db      	lsrs	r3, r3, #3
 80182de:	f003 0303 	and.w	r3, r3, #3
 80182e2:	4a13      	ldr	r2, [pc, #76]	@ (8018330 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80182e4:	fa22 f303 	lsr.w	r3, r2, r3
 80182e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80182ea:	e1c2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80182ec:	2300      	movs	r3, #0
 80182ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80182f0:	e1bf      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80182f2:	4b0e      	ldr	r3, [pc, #56]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80182fe:	d102      	bne.n	8018306 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8018300:	4b0c      	ldr	r3, [pc, #48]	@ (8018334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8018302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018304:	e1b5      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018306:	2300      	movs	r3, #0
 8018308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801830a:	e1b2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801830c:	4b07      	ldr	r3, [pc, #28]	@ (801832c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018318:	d102      	bne.n	8018320 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801831a:	4b07      	ldr	r3, [pc, #28]	@ (8018338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801831c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801831e:	e1a8      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018320:	2300      	movs	r3, #0
 8018322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018324:	e1a5      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8018326:	2300      	movs	r3, #0
 8018328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801832a:	e1a2      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801832c:	58024400 	.word	0x58024400
 8018330:	03d09000 	.word	0x03d09000
 8018334:	003d0900 	.word	0x003d0900
 8018338:	017d7840 	.word	0x017d7840
 801833c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8018340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018344:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8018348:	430b      	orrs	r3, r1
 801834a:	d173      	bne.n	8018434 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801834c:	4b9c      	ldr	r3, [pc, #624]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801834e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8018354:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8018356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801835c:	d02f      	beq.n	80183be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018364:	d863      	bhi.n	801842e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8018366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018368:	2b00      	cmp	r3, #0
 801836a:	d004      	beq.n	8018376 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801836c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801836e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018372:	d012      	beq.n	801839a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8018374:	e05b      	b.n	801842e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018376:	4b92      	ldr	r3, [pc, #584]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801837e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018382:	d107      	bne.n	8018394 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018384:	f107 0318 	add.w	r3, r7, #24
 8018388:	4618      	mov	r0, r3
 801838a:	f000 f991 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018392:	e16e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018394:	2300      	movs	r3, #0
 8018396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018398:	e16b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801839a:	4b89      	ldr	r3, [pc, #548]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80183a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80183a6:	d107      	bne.n	80183b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80183a8:	f107 030c 	add.w	r3, r7, #12
 80183ac:	4618      	mov	r0, r3
 80183ae:	f000 fad3 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80183b6:	e15c      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80183b8:	2300      	movs	r3, #0
 80183ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80183bc:	e159      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80183be:	4b80      	ldr	r3, [pc, #512]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80183c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80183c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80183c8:	4b7d      	ldr	r3, [pc, #500]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	f003 0304 	and.w	r3, r3, #4
 80183d0:	2b04      	cmp	r3, #4
 80183d2:	d10c      	bne.n	80183ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80183d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d109      	bne.n	80183ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80183da:	4b79      	ldr	r3, [pc, #484]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	08db      	lsrs	r3, r3, #3
 80183e0:	f003 0303 	and.w	r3, r3, #3
 80183e4:	4a77      	ldr	r2, [pc, #476]	@ (80185c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80183e6:	fa22 f303 	lsr.w	r3, r2, r3
 80183ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80183ec:	e01e      	b.n	801842c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80183ee:	4b74      	ldr	r3, [pc, #464]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80183f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80183fa:	d106      	bne.n	801840a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80183fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018402:	d102      	bne.n	801840a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8018404:	4b70      	ldr	r3, [pc, #448]	@ (80185c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8018406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018408:	e010      	b.n	801842c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801840a:	4b6d      	ldr	r3, [pc, #436]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018416:	d106      	bne.n	8018426 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8018418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801841a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801841e:	d102      	bne.n	8018426 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8018420:	4b6a      	ldr	r3, [pc, #424]	@ (80185cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8018422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018424:	e002      	b.n	801842c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8018426:	2300      	movs	r3, #0
 8018428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801842a:	e122      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801842c:	e121      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801842e:	2300      	movs	r3, #0
 8018430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018432:	e11e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8018434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018438:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801843c:	430b      	orrs	r3, r1
 801843e:	d133      	bne.n	80184a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8018440:	4b5f      	ldr	r3, [pc, #380]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018448:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801844c:	2b00      	cmp	r3, #0
 801844e:	d004      	beq.n	801845a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8018450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018456:	d012      	beq.n	801847e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8018458:	e023      	b.n	80184a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801845a:	4b59      	ldr	r3, [pc, #356]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018466:	d107      	bne.n	8018478 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8018468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801846c:	4618      	mov	r0, r3
 801846e:	f000 fbc7 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018476:	e0fc      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018478:	2300      	movs	r3, #0
 801847a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801847c:	e0f9      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801847e:	4b50      	ldr	r3, [pc, #320]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801848a:	d107      	bne.n	801849c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801848c:	f107 0318 	add.w	r3, r7, #24
 8018490:	4618      	mov	r0, r3
 8018492:	f000 f90d 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8018496:	6a3b      	ldr	r3, [r7, #32]
 8018498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801849a:	e0ea      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801849c:	2300      	movs	r3, #0
 801849e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80184a0:	e0e7      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80184a2:	2300      	movs	r3, #0
 80184a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80184a6:	e0e4      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80184a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80184ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80184b0:	430b      	orrs	r3, r1
 80184b2:	f040 808d 	bne.w	80185d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80184b6:	4b42      	ldr	r3, [pc, #264]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80184b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80184be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80184c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80184c6:	d06b      	beq.n	80185a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80184c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80184ce:	d874      	bhi.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80184d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80184d6:	d056      	beq.n	8018586 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80184d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80184de:	d86c      	bhi.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80184e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80184e6:	d03b      	beq.n	8018560 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80184e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80184ee:	d864      	bhi.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80184f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80184f6:	d021      	beq.n	801853c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80184f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80184fe:	d85c      	bhi.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8018500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018502:	2b00      	cmp	r3, #0
 8018504:	d004      	beq.n	8018510 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8018506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801850c:	d004      	beq.n	8018518 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801850e:	e054      	b.n	80185ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8018510:	f000 f8b8 	bl	8018684 <HAL_RCCEx_GetD3PCLK1Freq>
 8018514:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018516:	e0ac      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018518:	4b29      	ldr	r3, [pc, #164]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018524:	d107      	bne.n	8018536 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018526:	f107 0318 	add.w	r3, r7, #24
 801852a:	4618      	mov	r0, r3
 801852c:	f000 f8c0 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018534:	e09d      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018536:	2300      	movs	r3, #0
 8018538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801853a:	e09a      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801853c:	4b20      	ldr	r3, [pc, #128]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018548:	d107      	bne.n	801855a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801854a:	f107 030c 	add.w	r3, r7, #12
 801854e:	4618      	mov	r0, r3
 8018550:	f000 fa02 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018558:	e08b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801855e:	e088      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8018560:	4b17      	ldr	r3, [pc, #92]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	f003 0304 	and.w	r3, r3, #4
 8018568:	2b04      	cmp	r3, #4
 801856a:	d109      	bne.n	8018580 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801856c:	4b14      	ldr	r3, [pc, #80]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	08db      	lsrs	r3, r3, #3
 8018572:	f003 0303 	and.w	r3, r3, #3
 8018576:	4a13      	ldr	r2, [pc, #76]	@ (80185c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8018578:	fa22 f303 	lsr.w	r3, r2, r3
 801857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801857e:	e078      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018580:	2300      	movs	r3, #0
 8018582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018584:	e075      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8018586:	4b0e      	ldr	r3, [pc, #56]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801858e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018592:	d102      	bne.n	801859a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8018594:	4b0c      	ldr	r3, [pc, #48]	@ (80185c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8018596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018598:	e06b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801859a:	2300      	movs	r3, #0
 801859c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801859e:	e068      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80185a0:	4b07      	ldr	r3, [pc, #28]	@ (80185c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80185a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80185ac:	d102      	bne.n	80185b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80185ae:	4b07      	ldr	r3, [pc, #28]	@ (80185cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80185b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80185b2:	e05e      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80185b4:	2300      	movs	r3, #0
 80185b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80185b8:	e05b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80185ba:	2300      	movs	r3, #0
 80185bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80185be:	e058      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80185c0:	58024400 	.word	0x58024400
 80185c4:	03d09000 	.word	0x03d09000
 80185c8:	003d0900 	.word	0x003d0900
 80185cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80185d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80185d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80185d8:	430b      	orrs	r3, r1
 80185da:	d148      	bne.n	801866e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80185dc:	4b27      	ldr	r3, [pc, #156]	@ (801867c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80185de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80185e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80185e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80185ec:	d02a      	beq.n	8018644 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80185ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80185f4:	d838      	bhi.n	8018668 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80185f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d004      	beq.n	8018606 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80185fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018602:	d00d      	beq.n	8018620 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8018604:	e030      	b.n	8018668 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8018606:	4b1d      	ldr	r3, [pc, #116]	@ (801867c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801860e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018612:	d102      	bne.n	801861a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8018614:	4b1a      	ldr	r3, [pc, #104]	@ (8018680 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8018616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018618:	e02b      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801861a:	2300      	movs	r3, #0
 801861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801861e:	e028      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8018620:	4b16      	ldr	r3, [pc, #88]	@ (801867c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801862c:	d107      	bne.n	801863e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801862e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018632:	4618      	mov	r0, r3
 8018634:	f000 fae4 	bl	8018c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8018638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801863c:	e019      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801863e:	2300      	movs	r3, #0
 8018640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018642:	e016      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8018644:	4b0d      	ldr	r3, [pc, #52]	@ (801867c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801864c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018650:	d107      	bne.n	8018662 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018652:	f107 0318 	add.w	r3, r7, #24
 8018656:	4618      	mov	r0, r3
 8018658:	f000 f82a 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8018660:	e007      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8018662:	2300      	movs	r3, #0
 8018664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018666:	e004      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8018668:	2300      	movs	r3, #0
 801866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801866c:	e001      	b.n	8018672 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801866e:	2300      	movs	r3, #0
 8018670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8018672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8018674:	4618      	mov	r0, r3
 8018676:	3740      	adds	r7, #64	@ 0x40
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	58024400 	.word	0x58024400
 8018680:	017d7840 	.word	0x017d7840

08018684 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8018688:	f7fe f816 	bl	80166b8 <HAL_RCC_GetHCLKFreq>
 801868c:	4602      	mov	r2, r0
 801868e:	4b06      	ldr	r3, [pc, #24]	@ (80186a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8018690:	6a1b      	ldr	r3, [r3, #32]
 8018692:	091b      	lsrs	r3, r3, #4
 8018694:	f003 0307 	and.w	r3, r3, #7
 8018698:	4904      	ldr	r1, [pc, #16]	@ (80186ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801869a:	5ccb      	ldrb	r3, [r1, r3]
 801869c:	f003 031f 	and.w	r3, r3, #31
 80186a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	58024400 	.word	0x58024400
 80186ac:	08021864 	.word	0x08021864

080186b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80186b0:	b480      	push	{r7}
 80186b2:	b089      	sub	sp, #36	@ 0x24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80186b8:	4ba1      	ldr	r3, [pc, #644]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80186ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186bc:	f003 0303 	and.w	r3, r3, #3
 80186c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80186c2:	4b9f      	ldr	r3, [pc, #636]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80186c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186c6:	0b1b      	lsrs	r3, r3, #12
 80186c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80186cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80186ce:	4b9c      	ldr	r3, [pc, #624]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80186d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186d2:	091b      	lsrs	r3, r3, #4
 80186d4:	f003 0301 	and.w	r3, r3, #1
 80186d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80186da:	4b99      	ldr	r3, [pc, #612]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80186dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186de:	08db      	lsrs	r3, r3, #3
 80186e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186e4:	693a      	ldr	r2, [r7, #16]
 80186e6:	fb02 f303 	mul.w	r3, r2, r3
 80186ea:	ee07 3a90 	vmov	s15, r3
 80186ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80186f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	f000 8111 	beq.w	8018920 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80186fe:	69bb      	ldr	r3, [r7, #24]
 8018700:	2b02      	cmp	r3, #2
 8018702:	f000 8083 	beq.w	801880c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	2b02      	cmp	r3, #2
 801870a:	f200 80a1 	bhi.w	8018850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d003      	beq.n	801871c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8018714:	69bb      	ldr	r3, [r7, #24]
 8018716:	2b01      	cmp	r3, #1
 8018718:	d056      	beq.n	80187c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801871a:	e099      	b.n	8018850 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801871c:	4b88      	ldr	r3, [pc, #544]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	f003 0320 	and.w	r3, r3, #32
 8018724:	2b00      	cmp	r3, #0
 8018726:	d02d      	beq.n	8018784 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8018728:	4b85      	ldr	r3, [pc, #532]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	08db      	lsrs	r3, r3, #3
 801872e:	f003 0303 	and.w	r3, r3, #3
 8018732:	4a84      	ldr	r2, [pc, #528]	@ (8018944 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8018734:	fa22 f303 	lsr.w	r3, r2, r3
 8018738:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	ee07 3a90 	vmov	s15, r3
 8018740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	ee07 3a90 	vmov	s15, r3
 801874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801874e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018752:	4b7b      	ldr	r3, [pc, #492]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801875a:	ee07 3a90 	vmov	s15, r3
 801875e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018762:	ed97 6a03 	vldr	s12, [r7, #12]
 8018766:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8018948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801876a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801876e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801877a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801877e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8018782:	e087      	b.n	8018894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	ee07 3a90 	vmov	s15, r3
 801878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801878e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801894c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8018792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018796:	4b6a      	ldr	r3, [pc, #424]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801879e:	ee07 3a90 	vmov	s15, r3
 80187a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80187a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80187aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8018948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80187ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80187b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80187b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80187be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80187c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80187c6:	e065      	b.n	8018894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	ee07 3a90 	vmov	s15, r3
 80187ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80187d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8018950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80187d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80187da:	4b59      	ldr	r3, [pc, #356]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80187dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187e2:	ee07 3a90 	vmov	s15, r3
 80187e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80187ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80187ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8018948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80187f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80187f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80187fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801880a:	e043      	b.n	8018894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	ee07 3a90 	vmov	s15, r3
 8018812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018816:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8018954 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801881a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801881e:	4b48      	ldr	r3, [pc, #288]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018826:	ee07 3a90 	vmov	s15, r3
 801882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801882e:	ed97 6a03 	vldr	s12, [r7, #12]
 8018832:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8018948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8018836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801883a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801883e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018846:	ee67 7a27 	vmul.f32	s15, s14, s15
 801884a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801884e:	e021      	b.n	8018894 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	ee07 3a90 	vmov	s15, r3
 8018856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801885a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018862:	4b37      	ldr	r3, [pc, #220]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801886a:	ee07 3a90 	vmov	s15, r3
 801886e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018872:	ed97 6a03 	vldr	s12, [r7, #12]
 8018876:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018948 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801887a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801887e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801888e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018892:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8018894:	4b2a      	ldr	r3, [pc, #168]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8018896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018898:	0a5b      	lsrs	r3, r3, #9
 801889a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801889e:	ee07 3a90 	vmov	s15, r3
 80188a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80188a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80188aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80188ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80188b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80188b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80188ba:	ee17 2a90 	vmov	r2, s15
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80188c2:	4b1f      	ldr	r3, [pc, #124]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80188c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188c6:	0c1b      	lsrs	r3, r3, #16
 80188c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80188cc:	ee07 3a90 	vmov	s15, r3
 80188d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80188d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80188d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80188dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80188e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80188e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80188e8:	ee17 2a90 	vmov	r2, s15
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80188f0:	4b13      	ldr	r3, [pc, #76]	@ (8018940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80188f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188f4:	0e1b      	lsrs	r3, r3, #24
 80188f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80188fa:	ee07 3a90 	vmov	s15, r3
 80188fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018906:	ee37 7a87 	vadd.f32	s14, s15, s14
 801890a:	edd7 6a07 	vldr	s13, [r7, #28]
 801890e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018916:	ee17 2a90 	vmov	r2, s15
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801891e:	e008      	b.n	8018932 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2200      	movs	r2, #0
 8018924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2200      	movs	r2, #0
 8018930:	609a      	str	r2, [r3, #8]
}
 8018932:	bf00      	nop
 8018934:	3724      	adds	r7, #36	@ 0x24
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr
 801893e:	bf00      	nop
 8018940:	58024400 	.word	0x58024400
 8018944:	03d09000 	.word	0x03d09000
 8018948:	46000000 	.word	0x46000000
 801894c:	4c742400 	.word	0x4c742400
 8018950:	4a742400 	.word	0x4a742400
 8018954:	4bbebc20 	.word	0x4bbebc20

08018958 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8018958:	b480      	push	{r7}
 801895a:	b089      	sub	sp, #36	@ 0x24
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8018960:	4ba1      	ldr	r3, [pc, #644]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018964:	f003 0303 	and.w	r3, r3, #3
 8018968:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801896a:	4b9f      	ldr	r3, [pc, #636]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801896c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801896e:	0d1b      	lsrs	r3, r3, #20
 8018970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018974:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8018976:	4b9c      	ldr	r3, [pc, #624]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801897a:	0a1b      	lsrs	r3, r3, #8
 801897c:	f003 0301 	and.w	r3, r3, #1
 8018980:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8018982:	4b99      	ldr	r3, [pc, #612]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018986:	08db      	lsrs	r3, r3, #3
 8018988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801898c:	693a      	ldr	r2, [r7, #16]
 801898e:	fb02 f303 	mul.w	r3, r2, r3
 8018992:	ee07 3a90 	vmov	s15, r3
 8018996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801899a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	f000 8111 	beq.w	8018bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80189a6:	69bb      	ldr	r3, [r7, #24]
 80189a8:	2b02      	cmp	r3, #2
 80189aa:	f000 8083 	beq.w	8018ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80189ae:	69bb      	ldr	r3, [r7, #24]
 80189b0:	2b02      	cmp	r3, #2
 80189b2:	f200 80a1 	bhi.w	8018af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d003      	beq.n	80189c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80189bc:	69bb      	ldr	r3, [r7, #24]
 80189be:	2b01      	cmp	r3, #1
 80189c0:	d056      	beq.n	8018a70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80189c2:	e099      	b.n	8018af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80189c4:	4b88      	ldr	r3, [pc, #544]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f003 0320 	and.w	r3, r3, #32
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d02d      	beq.n	8018a2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80189d0:	4b85      	ldr	r3, [pc, #532]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	08db      	lsrs	r3, r3, #3
 80189d6:	f003 0303 	and.w	r3, r3, #3
 80189da:	4a84      	ldr	r2, [pc, #528]	@ (8018bec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80189dc:	fa22 f303 	lsr.w	r3, r2, r3
 80189e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	ee07 3a90 	vmov	s15, r3
 80189e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	ee07 3a90 	vmov	s15, r3
 80189f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80189fa:	4b7b      	ldr	r3, [pc, #492]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80189fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80189fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a02:	ee07 3a90 	vmov	s15, r3
 8018a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8018a0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8018bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8018a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8018a2a:	e087      	b.n	8018b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	ee07 3a90 	vmov	s15, r3
 8018a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8018bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8018a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a46:	ee07 3a90 	vmov	s15, r3
 8018a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8018a52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8018bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8018a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018a6e:	e065      	b.n	8018b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018a70:	697b      	ldr	r3, [r7, #20]
 8018a72:	ee07 3a90 	vmov	s15, r3
 8018a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8018bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8018a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018a82:	4b59      	ldr	r3, [pc, #356]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a8a:	ee07 3a90 	vmov	s15, r3
 8018a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8018a96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8018bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8018a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018ab2:	e043      	b.n	8018b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	ee07 3a90 	vmov	s15, r3
 8018aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018abe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8018bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8018ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018ac6:	4b48      	ldr	r3, [pc, #288]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ace:	ee07 3a90 	vmov	s15, r3
 8018ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8018ada:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8018bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8018ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018af6:	e021      	b.n	8018b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	ee07 3a90 	vmov	s15, r3
 8018afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8018b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018b0a:	4b37      	ldr	r3, [pc, #220]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b12:	ee07 3a90 	vmov	s15, r3
 8018b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8018b1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8018b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018b3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8018b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b40:	0a5b      	lsrs	r3, r3, #9
 8018b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b46:	ee07 3a90 	vmov	s15, r3
 8018b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8018b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018b62:	ee17 2a90 	vmov	r2, s15
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8018b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b6e:	0c1b      	lsrs	r3, r3, #16
 8018b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b74:	ee07 3a90 	vmov	s15, r3
 8018b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8018b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018b90:	ee17 2a90 	vmov	r2, s15
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8018b98:	4b13      	ldr	r3, [pc, #76]	@ (8018be8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8018b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b9c:	0e1b      	lsrs	r3, r3, #24
 8018b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018ba2:	ee07 3a90 	vmov	s15, r3
 8018ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8018bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018bbe:	ee17 2a90 	vmov	r2, s15
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8018bc6:	e008      	b.n	8018bda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	609a      	str	r2, [r3, #8]
}
 8018bda:	bf00      	nop
 8018bdc:	3724      	adds	r7, #36	@ 0x24
 8018bde:	46bd      	mov	sp, r7
 8018be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be4:	4770      	bx	lr
 8018be6:	bf00      	nop
 8018be8:	58024400 	.word	0x58024400
 8018bec:	03d09000 	.word	0x03d09000
 8018bf0:	46000000 	.word	0x46000000
 8018bf4:	4c742400 	.word	0x4c742400
 8018bf8:	4a742400 	.word	0x4a742400
 8018bfc:	4bbebc20 	.word	0x4bbebc20

08018c00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8018c00:	b480      	push	{r7}
 8018c02:	b089      	sub	sp, #36	@ 0x24
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8018c08:	4ba0      	ldr	r3, [pc, #640]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c0c:	f003 0303 	and.w	r3, r3, #3
 8018c10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8018c12:	4b9e      	ldr	r3, [pc, #632]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c16:	091b      	lsrs	r3, r3, #4
 8018c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8018c1e:	4b9b      	ldr	r3, [pc, #620]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c22:	f003 0301 	and.w	r3, r3, #1
 8018c26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8018c28:	4b98      	ldr	r3, [pc, #608]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c2c:	08db      	lsrs	r3, r3, #3
 8018c2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c32:	693a      	ldr	r2, [r7, #16]
 8018c34:	fb02 f303 	mul.w	r3, r2, r3
 8018c38:	ee07 3a90 	vmov	s15, r3
 8018c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018c40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f000 8111 	beq.w	8018e6e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8018c4c:	69bb      	ldr	r3, [r7, #24]
 8018c4e:	2b02      	cmp	r3, #2
 8018c50:	f000 8083 	beq.w	8018d5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8018c54:	69bb      	ldr	r3, [r7, #24]
 8018c56:	2b02      	cmp	r3, #2
 8018c58:	f200 80a1 	bhi.w	8018d9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8018c5c:	69bb      	ldr	r3, [r7, #24]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d003      	beq.n	8018c6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8018c62:	69bb      	ldr	r3, [r7, #24]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d056      	beq.n	8018d16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8018c68:	e099      	b.n	8018d9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c6a:	4b88      	ldr	r3, [pc, #544]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f003 0320 	and.w	r3, r3, #32
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d02d      	beq.n	8018cd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8018c76:	4b85      	ldr	r3, [pc, #532]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	08db      	lsrs	r3, r3, #3
 8018c7c:	f003 0303 	and.w	r3, r3, #3
 8018c80:	4a83      	ldr	r2, [pc, #524]	@ (8018e90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8018c82:	fa22 f303 	lsr.w	r3, r2, r3
 8018c86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	ee07 3a90 	vmov	s15, r3
 8018c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018c92:	697b      	ldr	r3, [r7, #20]
 8018c94:	ee07 3a90 	vmov	s15, r3
 8018c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018ca0:	4b7a      	ldr	r3, [pc, #488]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ca8:	ee07 3a90 	vmov	s15, r3
 8018cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8018cb4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8018e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8018cd0:	e087      	b.n	8018de2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018cd2:	697b      	ldr	r3, [r7, #20]
 8018cd4:	ee07 3a90 	vmov	s15, r3
 8018cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8018e98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8018ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018ce4:	4b69      	ldr	r3, [pc, #420]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cec:	ee07 3a90 	vmov	s15, r3
 8018cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8018cf8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8018e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018d14:	e065      	b.n	8018de2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	ee07 3a90 	vmov	s15, r3
 8018d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d20:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8018e9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8018d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d28:	4b58      	ldr	r3, [pc, #352]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d30:	ee07 3a90 	vmov	s15, r3
 8018d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8018d3c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8018e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018d58:	e043      	b.n	8018de2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d5a:	697b      	ldr	r3, [r7, #20]
 8018d5c:	ee07 3a90 	vmov	s15, r3
 8018d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d64:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8018ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8018d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d6c:	4b47      	ldr	r3, [pc, #284]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018d74:	ee07 3a90 	vmov	s15, r3
 8018d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8018d80:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8018e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018d9c:	e021      	b.n	8018de2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	ee07 3a90 	vmov	s15, r3
 8018da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018da8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8018e98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8018dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018db0:	4b36      	ldr	r3, [pc, #216]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018db8:	ee07 3a90 	vmov	s15, r3
 8018dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8018dc4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8018e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8018dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8018dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8018de0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8018de2:	4b2a      	ldr	r3, [pc, #168]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018de6:	0a5b      	lsrs	r3, r3, #9
 8018de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018dec:	ee07 3a90 	vmov	s15, r3
 8018df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8018e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018e08:	ee17 2a90 	vmov	r2, s15
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8018e10:	4b1e      	ldr	r3, [pc, #120]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e14:	0c1b      	lsrs	r3, r3, #16
 8018e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018e1a:	ee07 3a90 	vmov	s15, r3
 8018e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8018e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018e36:	ee17 2a90 	vmov	r2, s15
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8018e3e:	4b13      	ldr	r3, [pc, #76]	@ (8018e8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8018e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e42:	0e1b      	lsrs	r3, r3, #24
 8018e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018e48:	ee07 3a90 	vmov	s15, r3
 8018e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018e50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8018e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018e64:	ee17 2a90 	vmov	r2, s15
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8018e6c:	e008      	b.n	8018e80 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2200      	movs	r2, #0
 8018e72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2200      	movs	r2, #0
 8018e78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	609a      	str	r2, [r3, #8]
}
 8018e80:	bf00      	nop
 8018e82:	3724      	adds	r7, #36	@ 0x24
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr
 8018e8c:	58024400 	.word	0x58024400
 8018e90:	03d09000 	.word	0x03d09000
 8018e94:	46000000 	.word	0x46000000
 8018e98:	4c742400 	.word	0x4c742400
 8018e9c:	4a742400 	.word	0x4a742400
 8018ea0:	4bbebc20 	.word	0x4bbebc20

08018ea4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8018eb2:	4b53      	ldr	r3, [pc, #332]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018eb6:	f003 0303 	and.w	r3, r3, #3
 8018eba:	2b03      	cmp	r3, #3
 8018ebc:	d101      	bne.n	8018ec2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8018ebe:	2301      	movs	r3, #1
 8018ec0:	e099      	b.n	8018ff6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8018ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018ec8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018ece:	f7f9 fd2f 	bl	8012930 <HAL_GetTick>
 8018ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018ed4:	e008      	b.n	8018ee8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018ed6:	f7f9 fd2b 	bl	8012930 <HAL_GetTick>
 8018eda:	4602      	mov	r2, r0
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	1ad3      	subs	r3, r2, r3
 8018ee0:	2b02      	cmp	r3, #2
 8018ee2:	d901      	bls.n	8018ee8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8018ee4:	2303      	movs	r3, #3
 8018ee6:	e086      	b.n	8018ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8018ee8:	4b45      	ldr	r3, [pc, #276]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d1f0      	bne.n	8018ed6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8018ef4:	4b42      	ldr	r3, [pc, #264]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ef8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	031b      	lsls	r3, r3, #12
 8018f02:	493f      	ldr	r1, [pc, #252]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f04:	4313      	orrs	r3, r2
 8018f06:	628b      	str	r3, [r1, #40]	@ 0x28
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	685b      	ldr	r3, [r3, #4]
 8018f0c:	3b01      	subs	r3, #1
 8018f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	689b      	ldr	r3, [r3, #8]
 8018f16:	3b01      	subs	r3, #1
 8018f18:	025b      	lsls	r3, r3, #9
 8018f1a:	b29b      	uxth	r3, r3
 8018f1c:	431a      	orrs	r2, r3
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	68db      	ldr	r3, [r3, #12]
 8018f22:	3b01      	subs	r3, #1
 8018f24:	041b      	lsls	r3, r3, #16
 8018f26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8018f2a:	431a      	orrs	r2, r3
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	691b      	ldr	r3, [r3, #16]
 8018f30:	3b01      	subs	r3, #1
 8018f32:	061b      	lsls	r3, r3, #24
 8018f34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8018f38:	4931      	ldr	r1, [pc, #196]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f3a:	4313      	orrs	r3, r2
 8018f3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8018f3e:	4b30      	ldr	r3, [pc, #192]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	695b      	ldr	r3, [r3, #20]
 8018f4a:	492d      	ldr	r1, [pc, #180]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f4c:	4313      	orrs	r3, r2
 8018f4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8018f50:	4b2b      	ldr	r3, [pc, #172]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f54:	f023 0220 	bic.w	r2, r3, #32
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	699b      	ldr	r3, [r3, #24]
 8018f5c:	4928      	ldr	r1, [pc, #160]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f5e:	4313      	orrs	r3, r2
 8018f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8018f62:	4b27      	ldr	r3, [pc, #156]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f66:	4a26      	ldr	r2, [pc, #152]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f68:	f023 0310 	bic.w	r3, r3, #16
 8018f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8018f6e:	4b24      	ldr	r3, [pc, #144]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f72:	4b24      	ldr	r3, [pc, #144]	@ (8019004 <RCCEx_PLL2_Config+0x160>)
 8018f74:	4013      	ands	r3, r2
 8018f76:	687a      	ldr	r2, [r7, #4]
 8018f78:	69d2      	ldr	r2, [r2, #28]
 8018f7a:	00d2      	lsls	r2, r2, #3
 8018f7c:	4920      	ldr	r1, [pc, #128]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f7e:	4313      	orrs	r3, r2
 8018f80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8018f82:	4b1f      	ldr	r3, [pc, #124]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f86:	4a1e      	ldr	r2, [pc, #120]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f88:	f043 0310 	orr.w	r3, r3, #16
 8018f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8018f8e:	683b      	ldr	r3, [r7, #0]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d106      	bne.n	8018fa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8018f94:	4b1a      	ldr	r3, [pc, #104]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f98:	4a19      	ldr	r2, [pc, #100]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018f9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8018f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018fa0:	e00f      	b.n	8018fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	d106      	bne.n	8018fb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8018fa8:	4b15      	ldr	r3, [pc, #84]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fac:	4a14      	ldr	r2, [pc, #80]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8018fb4:	e005      	b.n	8018fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8018fb6:	4b12      	ldr	r3, [pc, #72]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fba:	4a11      	ldr	r2, [pc, #68]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8018fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8018fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018fce:	f7f9 fcaf 	bl	8012930 <HAL_GetTick>
 8018fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018fd4:	e008      	b.n	8018fe8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8018fd6:	f7f9 fcab 	bl	8012930 <HAL_GetTick>
 8018fda:	4602      	mov	r2, r0
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	1ad3      	subs	r3, r2, r3
 8018fe0:	2b02      	cmp	r3, #2
 8018fe2:	d901      	bls.n	8018fe8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8018fe4:	2303      	movs	r3, #3
 8018fe6:	e006      	b.n	8018ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8018fe8:	4b05      	ldr	r3, [pc, #20]	@ (8019000 <RCCEx_PLL2_Config+0x15c>)
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d0f0      	beq.n	8018fd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8018ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3710      	adds	r7, #16
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	58024400 	.word	0x58024400
 8019004:	ffff0007 	.word	0xffff0007

08019008 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b084      	sub	sp, #16
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019012:	2300      	movs	r3, #0
 8019014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8019016:	4b53      	ldr	r3, [pc, #332]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801901a:	f003 0303 	and.w	r3, r3, #3
 801901e:	2b03      	cmp	r3, #3
 8019020:	d101      	bne.n	8019026 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8019022:	2301      	movs	r3, #1
 8019024:	e099      	b.n	801915a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8019026:	4b4f      	ldr	r3, [pc, #316]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	4a4e      	ldr	r2, [pc, #312]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801902c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019032:	f7f9 fc7d 	bl	8012930 <HAL_GetTick>
 8019036:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8019038:	e008      	b.n	801904c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801903a:	f7f9 fc79 	bl	8012930 <HAL_GetTick>
 801903e:	4602      	mov	r2, r0
 8019040:	68bb      	ldr	r3, [r7, #8]
 8019042:	1ad3      	subs	r3, r2, r3
 8019044:	2b02      	cmp	r3, #2
 8019046:	d901      	bls.n	801904c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8019048:	2303      	movs	r3, #3
 801904a:	e086      	b.n	801915a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801904c:	4b45      	ldr	r3, [pc, #276]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019054:	2b00      	cmp	r3, #0
 8019056:	d1f0      	bne.n	801903a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8019058:	4b42      	ldr	r3, [pc, #264]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801905a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801905c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	051b      	lsls	r3, r3, #20
 8019066:	493f      	ldr	r1, [pc, #252]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019068:	4313      	orrs	r3, r2
 801906a:	628b      	str	r3, [r1, #40]	@ 0x28
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	3b01      	subs	r3, #1
 8019072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	3b01      	subs	r3, #1
 801907c:	025b      	lsls	r3, r3, #9
 801907e:	b29b      	uxth	r3, r3
 8019080:	431a      	orrs	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	3b01      	subs	r3, #1
 8019088:	041b      	lsls	r3, r3, #16
 801908a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801908e:	431a      	orrs	r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	691b      	ldr	r3, [r3, #16]
 8019094:	3b01      	subs	r3, #1
 8019096:	061b      	lsls	r3, r3, #24
 8019098:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801909c:	4931      	ldr	r1, [pc, #196]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801909e:	4313      	orrs	r3, r2
 80190a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80190a2:	4b30      	ldr	r3, [pc, #192]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	695b      	ldr	r3, [r3, #20]
 80190ae:	492d      	ldr	r1, [pc, #180]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190b0:	4313      	orrs	r3, r2
 80190b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80190b4:	4b2b      	ldr	r3, [pc, #172]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	699b      	ldr	r3, [r3, #24]
 80190c0:	4928      	ldr	r1, [pc, #160]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190c2:	4313      	orrs	r3, r2
 80190c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80190c6:	4b27      	ldr	r3, [pc, #156]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190ca:	4a26      	ldr	r2, [pc, #152]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80190d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80190d2:	4b24      	ldr	r3, [pc, #144]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80190d6:	4b24      	ldr	r3, [pc, #144]	@ (8019168 <RCCEx_PLL3_Config+0x160>)
 80190d8:	4013      	ands	r3, r2
 80190da:	687a      	ldr	r2, [r7, #4]
 80190dc:	69d2      	ldr	r2, [r2, #28]
 80190de:	00d2      	lsls	r2, r2, #3
 80190e0:	4920      	ldr	r1, [pc, #128]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190e2:	4313      	orrs	r3, r2
 80190e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80190e6:	4b1f      	ldr	r3, [pc, #124]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190ea:	4a1e      	ldr	r2, [pc, #120]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80190f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80190f2:	683b      	ldr	r3, [r7, #0]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d106      	bne.n	8019106 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80190f8:	4b1a      	ldr	r3, [pc, #104]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190fc:	4a19      	ldr	r2, [pc, #100]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 80190fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8019102:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8019104:	e00f      	b.n	8019126 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	2b01      	cmp	r3, #1
 801910a:	d106      	bne.n	801911a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801910c:	4b15      	ldr	r3, [pc, #84]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019110:	4a14      	ldr	r2, [pc, #80]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019112:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8019118:	e005      	b.n	8019126 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801911a:	4b12      	ldr	r3, [pc, #72]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801911e:	4a11      	ldr	r2, [pc, #68]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019124:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8019126:	4b0f      	ldr	r3, [pc, #60]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	4a0e      	ldr	r2, [pc, #56]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801912c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019132:	f7f9 fbfd 	bl	8012930 <HAL_GetTick>
 8019136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8019138:	e008      	b.n	801914c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801913a:	f7f9 fbf9 	bl	8012930 <HAL_GetTick>
 801913e:	4602      	mov	r2, r0
 8019140:	68bb      	ldr	r3, [r7, #8]
 8019142:	1ad3      	subs	r3, r2, r3
 8019144:	2b02      	cmp	r3, #2
 8019146:	d901      	bls.n	801914c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8019148:	2303      	movs	r3, #3
 801914a:	e006      	b.n	801915a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801914c:	4b05      	ldr	r3, [pc, #20]	@ (8019164 <RCCEx_PLL3_Config+0x15c>)
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019154:	2b00      	cmp	r3, #0
 8019156:	d0f0      	beq.n	801913a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8019158:	7bfb      	ldrb	r3, [r7, #15]
}
 801915a:	4618      	mov	r0, r3
 801915c:	3710      	adds	r7, #16
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}
 8019162:	bf00      	nop
 8019164:	58024400 	.word	0x58024400
 8019168:	ffff0007 	.word	0xffff0007

0801916c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b08a      	sub	sp, #40	@ 0x28
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d101      	bne.n	801917e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801917a:	2301      	movs	r3, #1
 801917c:	e075      	b.n	801926a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019184:	b2db      	uxtb	r3, r3
 8019186:	2b00      	cmp	r3, #0
 8019188:	d105      	bne.n	8019196 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2200      	movs	r2, #0
 801918e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f7f2 fc2b 	bl	800b9ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	2204      	movs	r2, #4
 801919a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f000 f868 	bl	8019274 <HAL_SD_InitCard>
 80191a4:	4603      	mov	r3, r0
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d001      	beq.n	80191ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80191aa:	2301      	movs	r3, #1
 80191ac:	e05d      	b.n	801926a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80191ae:	f107 0308 	add.w	r3, r7, #8
 80191b2:	4619      	mov	r1, r3
 80191b4:	6878      	ldr	r0, [r7, #4]
 80191b6:	f000 fdaf 	bl	8019d18 <HAL_SD_GetCardStatus>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d001      	beq.n	80191c4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80191c0:	2301      	movs	r3, #1
 80191c2:	e052      	b.n	801926a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80191c4:	7e3b      	ldrb	r3, [r7, #24]
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80191ca:	7e7b      	ldrb	r3, [r7, #25]
 80191cc:	b2db      	uxtb	r3, r3
 80191ce:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d10a      	bne.n	80191ee <HAL_SD_Init+0x82>
 80191d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d102      	bne.n	80191e4 <HAL_SD_Init+0x78>
 80191de:	6a3b      	ldr	r3, [r7, #32]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d004      	beq.n	80191ee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80191ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80191ec:	e00b      	b.n	8019206 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191f2:	2b01      	cmp	r3, #1
 80191f4:	d104      	bne.n	8019200 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80191fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80191fe:	e002      	b.n	8019206 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2200      	movs	r2, #0
 8019204:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	68db      	ldr	r3, [r3, #12]
 801920a:	4619      	mov	r1, r3
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f000 fe6d 	bl	8019eec <HAL_SD_ConfigWideBusOperation>
 8019212:	4603      	mov	r3, r0
 8019214:	2b00      	cmp	r3, #0
 8019216:	d001      	beq.n	801921c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8019218:	2301      	movs	r3, #1
 801921a:	e026      	b.n	801926a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801921c:	f7f9 fb88 	bl	8012930 <HAL_GetTick>
 8019220:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8019222:	e011      	b.n	8019248 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8019224:	f7f9 fb84 	bl	8012930 <HAL_GetTick>
 8019228:	4602      	mov	r2, r0
 801922a:	69fb      	ldr	r3, [r7, #28]
 801922c:	1ad3      	subs	r3, r2, r3
 801922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019232:	d109      	bne.n	8019248 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801923a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	2201      	movs	r2, #1
 8019240:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8019244:	2303      	movs	r3, #3
 8019246:	e010      	b.n	801926a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f000 ff61 	bl	801a110 <HAL_SD_GetCardState>
 801924e:	4603      	mov	r3, r0
 8019250:	2b04      	cmp	r3, #4
 8019252:	d1e7      	bne.n	8019224 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2200      	movs	r2, #0
 8019258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	2200      	movs	r2, #0
 801925e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2201      	movs	r2, #1
 8019264:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8019268:	2300      	movs	r3, #0
}
 801926a:	4618      	mov	r0, r3
 801926c:	3728      	adds	r7, #40	@ 0x28
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
	...

08019274 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8019274:	b590      	push	{r4, r7, lr}
 8019276:	b08d      	sub	sp, #52	@ 0x34
 8019278:	af02      	add	r7, sp, #8
 801927a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801927c:	2300      	movs	r3, #0
 801927e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8019280:	2300      	movs	r3, #0
 8019282:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8019284:	2300      	movs	r3, #0
 8019286:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8019288:	2300      	movs	r3, #0
 801928a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801928c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8019290:	f04f 0100 	mov.w	r1, #0
 8019294:	f7fe fc76 	bl	8017b84 <HAL_RCCEx_GetPeriphCLKFreq>
 8019298:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801929c:	2b00      	cmp	r3, #0
 801929e:	d109      	bne.n	80192b4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	2201      	movs	r2, #1
 80192a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80192ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80192b0:	2301      	movs	r3, #1
 80192b2:	e070      	b.n	8019396 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80192b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b6:	0a1b      	lsrs	r3, r3, #8
 80192b8:	4a39      	ldr	r2, [pc, #228]	@ (80193a0 <HAL_SD_InitCard+0x12c>)
 80192ba:	fba2 2303 	umull	r2, r3, r2, r3
 80192be:	091b      	lsrs	r3, r3, #4
 80192c0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681c      	ldr	r4, [r3, #0]
 80192c6:	466a      	mov	r2, sp
 80192c8:	f107 0318 	add.w	r3, r7, #24
 80192cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80192d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80192d4:	f107 030c 	add.w	r3, r7, #12
 80192d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80192da:	4620      	mov	r0, r4
 80192dc:	f002 fe5e 	bl	801bf9c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	4618      	mov	r0, r3
 80192e6:	f002 fea1 	bl	801c02c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80192ea:	69fb      	ldr	r3, [r7, #28]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d005      	beq.n	80192fc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80192f0:	69fb      	ldr	r3, [r7, #28]
 80192f2:	005b      	lsls	r3, r3, #1
 80192f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80192f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80192fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80192fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d007      	beq.n	8019312 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8019302:	4a28      	ldr	r2, [pc, #160]	@ (80193a4 <HAL_SD_InitCard+0x130>)
 8019304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019306:	fbb2 f3f3 	udiv	r3, r2, r3
 801930a:	3301      	adds	r3, #1
 801930c:	4618      	mov	r0, r3
 801930e:	f7f9 fb1b 	bl	8012948 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8019312:	6878      	ldr	r0, [r7, #4]
 8019314:	f000 ffea 	bl	801a2ec <SD_PowerON>
 8019318:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801931a:	6a3b      	ldr	r3, [r7, #32]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d00b      	beq.n	8019338 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2201      	movs	r2, #1
 8019324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801932c:	6a3b      	ldr	r3, [r7, #32]
 801932e:	431a      	orrs	r2, r3
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8019334:	2301      	movs	r3, #1
 8019336:	e02e      	b.n	8019396 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8019338:	6878      	ldr	r0, [r7, #4]
 801933a:	f000 ff09 	bl	801a150 <SD_InitCard>
 801933e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8019340:	6a3b      	ldr	r3, [r7, #32]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d00b      	beq.n	801935e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	2201      	movs	r2, #1
 801934a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019352:	6a3b      	ldr	r3, [r7, #32]
 8019354:	431a      	orrs	r2, r3
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801935a:	2301      	movs	r3, #1
 801935c:	e01b      	b.n	8019396 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019366:	4618      	mov	r0, r3
 8019368:	f002 fef6 	bl	801c158 <SDMMC_CmdBlockLength>
 801936c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801936e:	6a3b      	ldr	r3, [r7, #32]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d00f      	beq.n	8019394 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	4a0b      	ldr	r2, [pc, #44]	@ (80193a8 <HAL_SD_InitCard+0x134>)
 801937a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019380:	6a3b      	ldr	r3, [r7, #32]
 8019382:	431a      	orrs	r2, r3
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2201      	movs	r2, #1
 801938c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8019390:	2301      	movs	r3, #1
 8019392:	e000      	b.n	8019396 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8019394:	2300      	movs	r3, #0
}
 8019396:	4618      	mov	r0, r3
 8019398:	372c      	adds	r7, #44	@ 0x2c
 801939a:	46bd      	mov	sp, r7
 801939c:	bd90      	pop	{r4, r7, pc}
 801939e:	bf00      	nop
 80193a0:	014f8b59 	.word	0x014f8b59
 80193a4:	00012110 	.word	0x00012110
 80193a8:	1fe00fff 	.word	0x1fe00fff

080193ac <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b08c      	sub	sp, #48	@ 0x30
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	607a      	str	r2, [r7, #4]
 80193b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d107      	bne.n	80193d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80193c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80193d0:	2301      	movs	r3, #1
 80193d2:	e08d      	b.n	80194f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80193da:	b2db      	uxtb	r3, r3
 80193dc:	2b01      	cmp	r3, #1
 80193de:	f040 8086 	bne.w	80194ee <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	2200      	movs	r2, #0
 80193e6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80193e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	441a      	add	r2, r3
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d907      	bls.n	8019406 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80193fa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8019402:	2301      	movs	r3, #1
 8019404:	e074      	b.n	80194f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	2203      	movs	r2, #3
 801940a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	2200      	movs	r2, #0
 8019414:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	68ba      	ldr	r2, [r7, #8]
 801941a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801941c:	683b      	ldr	r3, [r7, #0]
 801941e:	025a      	lsls	r2, r3, #9
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019428:	2b01      	cmp	r3, #1
 801942a:	d002      	beq.n	8019432 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801942e:	025b      	lsls	r3, r3, #9
 8019430:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8019432:	f04f 33ff 	mov.w	r3, #4294967295
 8019436:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8019438:	683b      	ldr	r3, [r7, #0]
 801943a:	025b      	lsls	r3, r3, #9
 801943c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801943e:	2390      	movs	r3, #144	@ 0x90
 8019440:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8019442:	2302      	movs	r3, #2
 8019444:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8019446:	2300      	movs	r3, #0
 8019448:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801944a:	2300      	movs	r3, #0
 801944c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	f107 0210 	add.w	r2, r7, #16
 8019456:	4611      	mov	r1, r2
 8019458:	4618      	mov	r0, r3
 801945a:	f002 fe51 	bl	801c100 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	68da      	ldr	r2, [r3, #12]
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801946c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	68ba      	ldr	r2, [r7, #8]
 8019474:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2201      	movs	r2, #1
 801947c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	2b01      	cmp	r3, #1
 8019482:	d90a      	bls.n	801949a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	2282      	movs	r2, #130	@ 0x82
 8019488:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019490:	4618      	mov	r0, r3
 8019492:	f002 fea7 	bl	801c1e4 <SDMMC_CmdReadMultiBlock>
 8019496:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8019498:	e009      	b.n	80194ae <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	2281      	movs	r2, #129	@ 0x81
 801949e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80194a6:	4618      	mov	r0, r3
 80194a8:	f002 fe79 	bl	801c19e <SDMMC_CmdReadSingleBlock>
 80194ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80194ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d012      	beq.n	80194da <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	4a0f      	ldr	r2, [pc, #60]	@ (80194f8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80194ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80194c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194c2:	431a      	orrs	r2, r3
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2201      	movs	r2, #1
 80194cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	2200      	movs	r2, #0
 80194d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80194d6:	2301      	movs	r3, #1
 80194d8:	e00a      	b.n	80194f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80194e8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80194ea:	2300      	movs	r3, #0
 80194ec:	e000      	b.n	80194f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80194ee:	2302      	movs	r3, #2
  }
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3730      	adds	r7, #48	@ 0x30
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}
 80194f8:	1fe00fff 	.word	0x1fe00fff

080194fc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b08c      	sub	sp, #48	@ 0x30
 8019500:	af00      	add	r7, sp, #0
 8019502:	60f8      	str	r0, [r7, #12]
 8019504:	60b9      	str	r1, [r7, #8]
 8019506:	607a      	str	r2, [r7, #4]
 8019508:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801950e:	68bb      	ldr	r3, [r7, #8]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d107      	bne.n	8019524 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019518:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8019520:	2301      	movs	r3, #1
 8019522:	e08d      	b.n	8019640 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801952a:	b2db      	uxtb	r3, r3
 801952c:	2b01      	cmp	r3, #1
 801952e:	f040 8086 	bne.w	801963e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	2200      	movs	r2, #0
 8019536:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8019538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	441a      	add	r2, r3
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019542:	429a      	cmp	r2, r3
 8019544:	d907      	bls.n	8019556 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801954a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8019552:	2301      	movs	r3, #1
 8019554:	e074      	b.n	8019640 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	2203      	movs	r2, #3
 801955a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	2200      	movs	r2, #0
 8019564:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	68ba      	ldr	r2, [r7, #8]
 801956a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	025a      	lsls	r2, r3, #9
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019578:	2b01      	cmp	r3, #1
 801957a:	d002      	beq.n	8019582 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801957e:	025b      	lsls	r3, r3, #9
 8019580:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8019582:	f04f 33ff 	mov.w	r3, #4294967295
 8019586:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	025b      	lsls	r3, r3, #9
 801958c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801958e:	2390      	movs	r3, #144	@ 0x90
 8019590:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8019592:	2300      	movs	r3, #0
 8019594:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8019596:	2300      	movs	r3, #0
 8019598:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801959a:	2300      	movs	r3, #0
 801959c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	f107 0210 	add.w	r2, r7, #16
 80195a6:	4611      	mov	r1, r2
 80195a8:	4618      	mov	r0, r3
 80195aa:	f002 fda9 	bl	801c100 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	68da      	ldr	r2, [r3, #12]
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80195bc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	68ba      	ldr	r2, [r7, #8]
 80195c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	2201      	movs	r2, #1
 80195cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	2b01      	cmp	r3, #1
 80195d2:	d90a      	bls.n	80195ea <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	22a0      	movs	r2, #160	@ 0xa0
 80195d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80195e0:	4618      	mov	r0, r3
 80195e2:	f002 fe45 	bl	801c270 <SDMMC_CmdWriteMultiBlock>
 80195e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80195e8:	e009      	b.n	80195fe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	2290      	movs	r2, #144	@ 0x90
 80195ee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80195f6:	4618      	mov	r0, r3
 80195f8:	f002 fe17 	bl	801c22a <SDMMC_CmdWriteSingleBlock>
 80195fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80195fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019600:	2b00      	cmp	r3, #0
 8019602:	d012      	beq.n	801962a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	4a0f      	ldr	r2, [pc, #60]	@ (8019648 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801960a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019612:	431a      	orrs	r2, r3
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2201      	movs	r2, #1
 801961c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8019626:	2301      	movs	r3, #1
 8019628:	e00a      	b.n	8019640 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8019638:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801963a:	2300      	movs	r3, #0
 801963c:	e000      	b.n	8019640 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801963e:	2302      	movs	r3, #2
  }
}
 8019640:	4618      	mov	r0, r3
 8019642:	3730      	adds	r7, #48	@ 0x30
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}
 8019648:	1fe00fff 	.word	0x1fe00fff

0801964c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b084      	sub	sp, #16
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019658:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019664:	2b00      	cmp	r3, #0
 8019666:	d008      	beq.n	801967a <HAL_SD_IRQHandler+0x2e>
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	f003 0308 	and.w	r3, r3, #8
 801966e:	2b00      	cmp	r3, #0
 8019670:	d003      	beq.n	801967a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f001 f926 	bl	801a8c4 <SD_Read_IT>
 8019678:	e19a      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019684:	2b00      	cmp	r3, #0
 8019686:	f000 80ac 	beq.w	80197e2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019692:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	4b59      	ldr	r3, [pc, #356]	@ (8019804 <HAL_SD_IRQHandler+0x1b8>)
 80196a0:	400b      	ands	r3, r1
 80196a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80196b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	68da      	ldr	r2, [r3, #12]
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80196c2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	f003 0308 	and.w	r3, r3, #8
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d038      	beq.n	8019740 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f003 0302 	and.w	r3, r3, #2
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d104      	bne.n	80196e2 <HAL_SD_IRQHandler+0x96>
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	f003 0320 	and.w	r3, r3, #32
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d011      	beq.n	8019706 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f002 fde6 	bl	801c2b8 <SDMMC_CmdStopTransfer>
 80196ec:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80196ee:	68bb      	ldr	r3, [r7, #8]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d008      	beq.n	8019706 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80196f8:	68bb      	ldr	r3, [r7, #8]
 80196fa:	431a      	orrs	r2, r3
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	f000 f95b 	bl	80199bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4a3f      	ldr	r2, [pc, #252]	@ (8019808 <HAL_SD_IRQHandler+0x1bc>)
 801970c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	2201      	movs	r2, #1
 8019712:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	2200      	movs	r2, #0
 801971a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	f003 0301 	and.w	r3, r3, #1
 8019722:	2b00      	cmp	r3, #0
 8019724:	d104      	bne.n	8019730 <HAL_SD_IRQHandler+0xe4>
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	f003 0302 	and.w	r3, r3, #2
 801972c:	2b00      	cmp	r3, #0
 801972e:	d003      	beq.n	8019738 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f003 fa73 	bl	801cc1c <HAL_SD_RxCpltCallback>
 8019736:	e13b      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8019738:	6878      	ldr	r0, [r7, #4]
 801973a:	f003 fa65 	bl	801cc08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801973e:	e137      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019746:	2b00      	cmp	r3, #0
 8019748:	f000 8132 	beq.w	80199b0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2200      	movs	r2, #0
 8019752:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	2200      	movs	r2, #0
 801975a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2200      	movs	r2, #0
 8019762:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f003 0302 	and.w	r3, r3, #2
 801976a:	2b00      	cmp	r3, #0
 801976c:	d104      	bne.n	8019778 <HAL_SD_IRQHandler+0x12c>
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	f003 0320 	and.w	r3, r3, #32
 8019774:	2b00      	cmp	r3, #0
 8019776:	d011      	beq.n	801979c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4618      	mov	r0, r3
 801977e:	f002 fd9b 	bl	801c2b8 <SDMMC_CmdStopTransfer>
 8019782:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d008      	beq.n	801979c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801978e:	68bb      	ldr	r3, [r7, #8]
 8019790:	431a      	orrs	r2, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f000 f910 	bl	80199bc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2201      	movs	r2, #1
 80197a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2200      	movs	r2, #0
 80197a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	f003 0310 	and.w	r3, r3, #16
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d104      	bne.n	80197be <HAL_SD_IRQHandler+0x172>
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	f003 0320 	and.w	r3, r3, #32
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d002      	beq.n	80197c4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	f003 fa22 	bl	801cc08 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	f003 0301 	and.w	r3, r3, #1
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d105      	bne.n	80197da <HAL_SD_IRQHandler+0x18e>
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	f003 0302 	and.w	r3, r3, #2
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	f000 80eb 	beq.w	80199b0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80197da:	6878      	ldr	r0, [r7, #4]
 80197dc:	f003 fa1e 	bl	801cc1c <HAL_SD_RxCpltCallback>
}
 80197e0:	e0e6      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d00d      	beq.n	801980c <HAL_SD_IRQHandler+0x1c0>
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	f003 0308 	and.w	r3, r3, #8
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d008      	beq.n	801980c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f001 f8a8 	bl	801a950 <SD_Write_IT>
 8019800:	e0d6      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
 8019802:	bf00      	nop
 8019804:	ffff3ec5 	.word	0xffff3ec5
 8019808:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019812:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8019816:	2b00      	cmp	r3, #0
 8019818:	f000 809d 	beq.w	8019956 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019822:	f003 0302 	and.w	r3, r3, #2
 8019826:	2b00      	cmp	r3, #0
 8019828:	d005      	beq.n	8019836 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801982e:	f043 0202 	orr.w	r2, r3, #2
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801983c:	f003 0308 	and.w	r3, r3, #8
 8019840:	2b00      	cmp	r3, #0
 8019842:	d005      	beq.n	8019850 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019848:	f043 0208 	orr.w	r2, r3, #8
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019856:	f003 0320 	and.w	r3, r3, #32
 801985a:	2b00      	cmp	r3, #0
 801985c:	d005      	beq.n	801986a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019862:	f043 0220 	orr.w	r2, r3, #32
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019870:	f003 0310 	and.w	r3, r3, #16
 8019874:	2b00      	cmp	r3, #0
 8019876:	d005      	beq.n	8019884 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801987c:	f043 0210 	orr.w	r2, r3, #16
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	4a4b      	ldr	r2, [pc, #300]	@ (80199b8 <HAL_SD_IRQHandler+0x36c>)
 801988a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 801989a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	68da      	ldr	r2, [r3, #12]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80198aa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80198ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	68da      	ldr	r2, [r3, #12]
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80198ca:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	4618      	mov	r0, r3
 80198d2:	f002 fcf1 	bl	801c2b8 <SDMMC_CmdStopTransfer>
 80198d6:	4602      	mov	r2, r0
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80198dc:	431a      	orrs	r2, r3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	68da      	ldr	r2, [r3, #12]
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80198f0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80198fa:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	f003 0308 	and.w	r3, r3, #8
 8019902:	2b00      	cmp	r3, #0
 8019904:	d00a      	beq.n	801991c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	2201      	movs	r2, #1
 801990a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2200      	movs	r2, #0
 8019912:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f000 f851 	bl	80199bc <HAL_SD_ErrorCallback>
}
 801991a:	e049      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019922:	2b00      	cmp	r3, #0
 8019924:	d044      	beq.n	80199b0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801992a:	2b00      	cmp	r3, #0
 801992c:	d040      	beq.n	80199b0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801993c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	2200      	movs	r2, #0
 8019944:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	2201      	movs	r2, #1
 801994a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f000 f834 	bl	80199bc <HAL_SD_ErrorCallback>
}
 8019954:	e02c      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801995c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019960:	2b00      	cmp	r3, #0
 8019962:	d025      	beq.n	80199b0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801996c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019974:	f003 0304 	and.w	r3, r3, #4
 8019978:	2b00      	cmp	r3, #0
 801997a:	d10c      	bne.n	8019996 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	f003 0320 	and.w	r3, r3, #32
 8019982:	2b00      	cmp	r3, #0
 8019984:	d003      	beq.n	801998e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8019986:	6878      	ldr	r0, [r7, #4]
 8019988:	f001 f84a 	bl	801aa20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801998c:	e010      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f001 f832 	bl	801a9f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8019994:	e00c      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	f003 0320 	and.w	r3, r3, #32
 801999c:	2b00      	cmp	r3, #0
 801999e:	d003      	beq.n	80199a8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f001 f833 	bl	801aa0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80199a6:	e003      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f001 f81b 	bl	801a9e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80199ae:	e7ff      	b.n	80199b0 <HAL_SD_IRQHandler+0x364>
 80199b0:	bf00      	nop
 80199b2:	3710      	adds	r7, #16
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}
 80199b8:	18000f3a 	.word	0x18000f3a

080199bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80199bc:	b480      	push	{r7}
 80199be:	b083      	sub	sp, #12
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80199c4:	bf00      	nop
 80199c6:	370c      	adds	r7, #12
 80199c8:	46bd      	mov	sp, r7
 80199ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ce:	4770      	bx	lr

080199d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80199d0:	b480      	push	{r7}
 80199d2:	b083      	sub	sp, #12
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80199de:	0f9b      	lsrs	r3, r3, #30
 80199e0:	b2da      	uxtb	r2, r3
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80199ea:	0e9b      	lsrs	r3, r3, #26
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	f003 030f 	and.w	r3, r3, #15
 80199f2:	b2da      	uxtb	r2, r3
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80199fc:	0e1b      	lsrs	r3, r3, #24
 80199fe:	b2db      	uxtb	r3, r3
 8019a00:	f003 0303 	and.w	r3, r3, #3
 8019a04:	b2da      	uxtb	r2, r3
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019a0e:	0c1b      	lsrs	r3, r3, #16
 8019a10:	b2da      	uxtb	r2, r3
 8019a12:	683b      	ldr	r3, [r7, #0]
 8019a14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019a1a:	0a1b      	lsrs	r3, r3, #8
 8019a1c:	b2da      	uxtb	r2, r3
 8019a1e:	683b      	ldr	r3, [r7, #0]
 8019a20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019a26:	b2da      	uxtb	r2, r3
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a30:	0d1b      	lsrs	r3, r3, #20
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a3c:	0c1b      	lsrs	r3, r3, #16
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	f003 030f 	and.w	r3, r3, #15
 8019a44:	b2da      	uxtb	r2, r3
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a4e:	0bdb      	lsrs	r3, r3, #15
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	f003 0301 	and.w	r3, r3, #1
 8019a56:	b2da      	uxtb	r2, r3
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a60:	0b9b      	lsrs	r3, r3, #14
 8019a62:	b2db      	uxtb	r3, r3
 8019a64:	f003 0301 	and.w	r3, r3, #1
 8019a68:	b2da      	uxtb	r2, r3
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a72:	0b5b      	lsrs	r3, r3, #13
 8019a74:	b2db      	uxtb	r3, r3
 8019a76:	f003 0301 	and.w	r3, r3, #1
 8019a7a:	b2da      	uxtb	r2, r3
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a84:	0b1b      	lsrs	r3, r3, #12
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	f003 0301 	and.w	r3, r3, #1
 8019a8c:	b2da      	uxtb	r2, r3
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	2200      	movs	r2, #0
 8019a96:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d163      	bne.n	8019b68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019aa4:	009a      	lsls	r2, r3, #2
 8019aa6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8019aaa:	4013      	ands	r3, r2
 8019aac:	687a      	ldr	r2, [r7, #4]
 8019aae:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8019ab0:	0f92      	lsrs	r2, r2, #30
 8019ab2:	431a      	orrs	r2, r3
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019abc:	0edb      	lsrs	r3, r3, #27
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	f003 0307 	and.w	r3, r3, #7
 8019ac4:	b2da      	uxtb	r2, r3
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ace:	0e1b      	lsrs	r3, r3, #24
 8019ad0:	b2db      	uxtb	r3, r3
 8019ad2:	f003 0307 	and.w	r3, r3, #7
 8019ad6:	b2da      	uxtb	r2, r3
 8019ad8:	683b      	ldr	r3, [r7, #0]
 8019ada:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ae0:	0d5b      	lsrs	r3, r3, #21
 8019ae2:	b2db      	uxtb	r3, r3
 8019ae4:	f003 0307 	and.w	r3, r3, #7
 8019ae8:	b2da      	uxtb	r2, r3
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019af2:	0c9b      	lsrs	r3, r3, #18
 8019af4:	b2db      	uxtb	r3, r3
 8019af6:	f003 0307 	and.w	r3, r3, #7
 8019afa:	b2da      	uxtb	r2, r3
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b04:	0bdb      	lsrs	r3, r3, #15
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	f003 0307 	and.w	r3, r3, #7
 8019b0c:	b2da      	uxtb	r2, r3
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	691b      	ldr	r3, [r3, #16]
 8019b16:	1c5a      	adds	r2, r3, #1
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	7e1b      	ldrb	r3, [r3, #24]
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	f003 0307 	and.w	r3, r3, #7
 8019b26:	3302      	adds	r3, #2
 8019b28:	2201      	movs	r2, #1
 8019b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8019b2e:	687a      	ldr	r2, [r7, #4]
 8019b30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8019b32:	fb03 f202 	mul.w	r2, r3, r2
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	7a1b      	ldrb	r3, [r3, #8]
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	f003 030f 	and.w	r3, r3, #15
 8019b44:	2201      	movs	r2, #1
 8019b46:	409a      	lsls	r2, r3
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8019b54:	0a52      	lsrs	r2, r2, #9
 8019b56:	fb03 f202 	mul.w	r2, r3, r2
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b64:	655a      	str	r2, [r3, #84]	@ 0x54
 8019b66:	e031      	b.n	8019bcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d11d      	bne.n	8019bac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019b74:	041b      	lsls	r3, r3, #16
 8019b76:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b7e:	0c1b      	lsrs	r3, r3, #16
 8019b80:	431a      	orrs	r2, r3
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	691b      	ldr	r3, [r3, #16]
 8019b8a:	3301      	adds	r3, #1
 8019b8c:	029a      	lsls	r2, r3, #10
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	655a      	str	r2, [r3, #84]	@ 0x54
 8019baa:	e00f      	b.n	8019bcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	4a58      	ldr	r2, [pc, #352]	@ (8019d14 <HAL_SD_GetCardCSD+0x344>)
 8019bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2201      	movs	r2, #1
 8019bc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8019bc8:	2301      	movs	r3, #1
 8019bca:	e09d      	b.n	8019d08 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019bd0:	0b9b      	lsrs	r3, r3, #14
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f003 0301 	and.w	r3, r3, #1
 8019bd8:	b2da      	uxtb	r2, r3
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019be2:	09db      	lsrs	r3, r3, #7
 8019be4:	b2db      	uxtb	r3, r3
 8019be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019bea:	b2da      	uxtb	r2, r3
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019bf4:	b2db      	uxtb	r3, r3
 8019bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019bfa:	b2da      	uxtb	r2, r3
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c04:	0fdb      	lsrs	r3, r3, #31
 8019c06:	b2da      	uxtb	r2, r3
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c10:	0f5b      	lsrs	r3, r3, #29
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	f003 0303 	and.w	r3, r3, #3
 8019c18:	b2da      	uxtb	r2, r3
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c22:	0e9b      	lsrs	r3, r3, #26
 8019c24:	b2db      	uxtb	r3, r3
 8019c26:	f003 0307 	and.w	r3, r3, #7
 8019c2a:	b2da      	uxtb	r2, r3
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c34:	0d9b      	lsrs	r3, r3, #22
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	f003 030f 	and.w	r3, r3, #15
 8019c3c:	b2da      	uxtb	r2, r3
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c46:	0d5b      	lsrs	r3, r3, #21
 8019c48:	b2db      	uxtb	r3, r3
 8019c4a:	f003 0301 	and.w	r3, r3, #1
 8019c4e:	b2da      	uxtb	r2, r3
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	2200      	movs	r2, #0
 8019c5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c62:	0c1b      	lsrs	r3, r3, #16
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	f003 0301 	and.w	r3, r3, #1
 8019c6a:	b2da      	uxtb	r2, r3
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c76:	0bdb      	lsrs	r3, r3, #15
 8019c78:	b2db      	uxtb	r3, r3
 8019c7a:	f003 0301 	and.w	r3, r3, #1
 8019c7e:	b2da      	uxtb	r2, r3
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c8a:	0b9b      	lsrs	r3, r3, #14
 8019c8c:	b2db      	uxtb	r3, r3
 8019c8e:	f003 0301 	and.w	r3, r3, #1
 8019c92:	b2da      	uxtb	r2, r3
 8019c94:	683b      	ldr	r3, [r7, #0]
 8019c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c9e:	0b5b      	lsrs	r3, r3, #13
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	f003 0301 	and.w	r3, r3, #1
 8019ca6:	b2da      	uxtb	r2, r3
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cb2:	0b1b      	lsrs	r3, r3, #12
 8019cb4:	b2db      	uxtb	r3, r3
 8019cb6:	f003 0301 	and.w	r3, r3, #1
 8019cba:	b2da      	uxtb	r2, r3
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cc6:	0a9b      	lsrs	r3, r3, #10
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	f003 0303 	and.w	r3, r3, #3
 8019cce:	b2da      	uxtb	r2, r3
 8019cd0:	683b      	ldr	r3, [r7, #0]
 8019cd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cda:	0a1b      	lsrs	r3, r3, #8
 8019cdc:	b2db      	uxtb	r3, r3
 8019cde:	f003 0303 	and.w	r3, r3, #3
 8019ce2:	b2da      	uxtb	r2, r3
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cee:	085b      	lsrs	r3, r3, #1
 8019cf0:	b2db      	uxtb	r3, r3
 8019cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019cf6:	b2da      	uxtb	r2, r3
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	2201      	movs	r2, #1
 8019d02:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8019d06:	2300      	movs	r3, #0
}
 8019d08:	4618      	mov	r0, r3
 8019d0a:	370c      	adds	r7, #12
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d12:	4770      	bx	lr
 8019d14:	1fe00fff 	.word	0x1fe00fff

08019d18 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b094      	sub	sp, #80	@ 0x50
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8019d22:	2300      	movs	r3, #0
 8019d24:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	2b03      	cmp	r3, #3
 8019d32:	d101      	bne.n	8019d38 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8019d34:	2301      	movs	r3, #1
 8019d36:	e0a7      	b.n	8019e88 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8019d38:	f107 0308 	add.w	r3, r7, #8
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	6878      	ldr	r0, [r7, #4]
 8019d40:	f000 fb62 	bl	801a408 <SD_SendSDStatus>
 8019d44:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8019d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d011      	beq.n	8019d70 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4a4f      	ldr	r2, [pc, #316]	@ (8019e90 <HAL_SD_GetCardStatus+0x178>)
 8019d52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d5a:	431a      	orrs	r2, r3
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2201      	movs	r2, #1
 8019d64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8019d68:	2301      	movs	r3, #1
 8019d6a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8019d6e:	e070      	b.n	8019e52 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	099b      	lsrs	r3, r3, #6
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	f003 0303 	and.w	r3, r3, #3
 8019d7a:	b2da      	uxtb	r2, r3
 8019d7c:	683b      	ldr	r3, [r7, #0]
 8019d7e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	095b      	lsrs	r3, r3, #5
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	b2da      	uxtb	r2, r3
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	0a1b      	lsrs	r3, r3, #8
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019d9a:	b29a      	uxth	r2, r3
 8019d9c:	68bb      	ldr	r3, [r7, #8]
 8019d9e:	0e1b      	lsrs	r3, r3, #24
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	4313      	orrs	r3, r2
 8019da4:	b29a      	uxth	r2, r3
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	061a      	lsls	r2, r3, #24
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	021b      	lsls	r3, r3, #8
 8019db2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8019db6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	0a1b      	lsrs	r3, r3, #8
 8019dbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8019dc0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	0e1b      	lsrs	r3, r3, #24
 8019dc6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8019dcc:	693b      	ldr	r3, [r7, #16]
 8019dce:	b2da      	uxtb	r2, r3
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	0a1b      	lsrs	r3, r3, #8
 8019dd8:	b2da      	uxtb	r2, r3
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8019dde:	693b      	ldr	r3, [r7, #16]
 8019de0:	0d1b      	lsrs	r3, r3, #20
 8019de2:	b2db      	uxtb	r3, r3
 8019de4:	f003 030f 	and.w	r3, r3, #15
 8019de8:	b2da      	uxtb	r2, r3
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	0c1b      	lsrs	r3, r3, #16
 8019df2:	b29b      	uxth	r3, r3
 8019df4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019df8:	b29a      	uxth	r2, r3
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	4313      	orrs	r3, r2
 8019e04:	b29a      	uxth	r2, r3
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8019e0a:	697b      	ldr	r3, [r7, #20]
 8019e0c:	0a9b      	lsrs	r3, r3, #10
 8019e0e:	b2db      	uxtb	r3, r3
 8019e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019e14:	b2da      	uxtb	r2, r3
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	0a1b      	lsrs	r3, r3, #8
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	f003 0303 	and.w	r3, r3, #3
 8019e24:	b2da      	uxtb	r2, r3
 8019e26:	683b      	ldr	r3, [r7, #0]
 8019e28:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	091b      	lsrs	r3, r3, #4
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	f003 030f 	and.w	r3, r3, #15
 8019e34:	b2da      	uxtb	r2, r3
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	f003 030f 	and.w	r3, r3, #15
 8019e42:	b2da      	uxtb	r2, r3
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8019e48:	69bb      	ldr	r3, [r7, #24]
 8019e4a:	0e1b      	lsrs	r3, r3, #24
 8019e4c:	b2da      	uxtb	r2, r3
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f002 f97c 	bl	801c158 <SDMMC_CmdBlockLength>
 8019e60:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8019e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d00d      	beq.n	8019e84 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	4a08      	ldr	r2, [pc, #32]	@ (8019e90 <HAL_SD_GetCardStatus+0x178>)
 8019e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019e74:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	2201      	movs	r2, #1
 8019e7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8019e7e:	2301      	movs	r3, #1
 8019e80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8019e84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8019e88:	4618      	mov	r0, r3
 8019e8a:	3750      	adds	r7, #80	@ 0x50
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	bd80      	pop	{r7, pc}
 8019e90:	1fe00fff 	.word	0x1fe00fff

08019e94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8019e94:	b480      	push	{r7}
 8019e96:	b083      	sub	sp, #12
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
 8019e9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019ea2:	683b      	ldr	r3, [r7, #0]
 8019ea4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019eba:	683b      	ldr	r3, [r7, #0]
 8019ebc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019ec2:	683b      	ldr	r3, [r7, #0]
 8019ec4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019ed2:	683b      	ldr	r3, [r7, #0]
 8019ed4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019eda:	683b      	ldr	r3, [r7, #0]
 8019edc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8019ede:	2300      	movs	r3, #0
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	370c      	adds	r7, #12
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr

08019eec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8019eec:	b590      	push	{r4, r7, lr}
 8019eee:	b08d      	sub	sp, #52	@ 0x34
 8019ef0:	af02      	add	r7, sp, #8
 8019ef2:	6078      	str	r0, [r7, #4]
 8019ef4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	2203      	movs	r2, #3
 8019f00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019f08:	2b03      	cmp	r3, #3
 8019f0a:	d02e      	beq.n	8019f6a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8019f0c:	683b      	ldr	r3, [r7, #0]
 8019f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019f12:	d106      	bne.n	8019f22 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8019f20:	e029      	b.n	8019f76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019f28:	d10a      	bne.n	8019f40 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8019f2a:	6878      	ldr	r0, [r7, #4]
 8019f2c:	f000 fb64 	bl	801a5f8 <SD_WideBus_Enable>
 8019f30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019f36:	6a3b      	ldr	r3, [r7, #32]
 8019f38:	431a      	orrs	r2, r3
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8019f3e:	e01a      	b.n	8019f76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d10a      	bne.n	8019f5c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f000 fba1 	bl	801a68e <SD_WideBus_Disable>
 8019f4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019f52:	6a3b      	ldr	r3, [r7, #32]
 8019f54:	431a      	orrs	r2, r3
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	635a      	str	r2, [r3, #52]	@ 0x34
 8019f5a:	e00c      	b.n	8019f76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f60:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	635a      	str	r2, [r3, #52]	@ 0x34
 8019f68:	e005      	b.n	8019f76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f6e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d007      	beq.n	8019f8e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	4a5f      	ldr	r2, [pc, #380]	@ (801a100 <HAL_SD_ConfigWideBusOperation+0x214>)
 8019f84:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8019f86:	2301      	movs	r3, #1
 8019f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019f8c:	e096      	b.n	801a0bc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8019f8e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8019f92:	f04f 0100 	mov.w	r1, #0
 8019f96:	f7fd fdf5 	bl	8017b84 <HAL_RCCEx_GetPeriphCLKFreq>
 8019f9a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8019f9c:	69fb      	ldr	r3, [r7, #28]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f000 8083 	beq.w	801a0aa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	685b      	ldr	r3, [r3, #4]
 8019fa8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	689b      	ldr	r3, [r3, #8]
 8019fae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	691b      	ldr	r3, [r3, #16]
 8019fb8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	695a      	ldr	r2, [r3, #20]
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	4950      	ldr	r1, [pc, #320]	@ (801a104 <HAL_SD_ConfigWideBusOperation+0x218>)
 8019fc2:	fba1 1303 	umull	r1, r3, r1, r3
 8019fc6:	0e1b      	lsrs	r3, r3, #24
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d303      	bcc.n	8019fd4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	695b      	ldr	r3, [r3, #20]
 8019fd0:	61bb      	str	r3, [r7, #24]
 8019fd2:	e05a      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019fdc:	d103      	bne.n	8019fe6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	695b      	ldr	r3, [r3, #20]
 8019fe2:	61bb      	str	r3, [r7, #24]
 8019fe4:	e051      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019fee:	d126      	bne.n	801a03e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	695b      	ldr	r3, [r3, #20]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d10e      	bne.n	801a016 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8019ff8:	69fb      	ldr	r3, [r7, #28]
 8019ffa:	4a43      	ldr	r2, [pc, #268]	@ (801a108 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8019ffc:	4293      	cmp	r3, r2
 8019ffe:	d906      	bls.n	801a00e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801a000:	69fb      	ldr	r3, [r7, #28]
 801a002:	4a40      	ldr	r2, [pc, #256]	@ (801a104 <HAL_SD_ConfigWideBusOperation+0x218>)
 801a004:	fba2 2303 	umull	r2, r3, r2, r3
 801a008:	0e5b      	lsrs	r3, r3, #25
 801a00a:	61bb      	str	r3, [r7, #24]
 801a00c:	e03d      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	695b      	ldr	r3, [r3, #20]
 801a012:	61bb      	str	r3, [r7, #24]
 801a014:	e039      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	695b      	ldr	r3, [r3, #20]
 801a01a:	005b      	lsls	r3, r3, #1
 801a01c:	69fa      	ldr	r2, [r7, #28]
 801a01e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a022:	4a39      	ldr	r2, [pc, #228]	@ (801a108 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801a024:	4293      	cmp	r3, r2
 801a026:	d906      	bls.n	801a036 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801a028:	69fb      	ldr	r3, [r7, #28]
 801a02a:	4a36      	ldr	r2, [pc, #216]	@ (801a104 <HAL_SD_ConfigWideBusOperation+0x218>)
 801a02c:	fba2 2303 	umull	r2, r3, r2, r3
 801a030:	0e5b      	lsrs	r3, r3, #25
 801a032:	61bb      	str	r3, [r7, #24]
 801a034:	e029      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	695b      	ldr	r3, [r3, #20]
 801a03a:	61bb      	str	r3, [r7, #24]
 801a03c:	e025      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	695b      	ldr	r3, [r3, #20]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d10e      	bne.n	801a064 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801a046:	69fb      	ldr	r3, [r7, #28]
 801a048:	4a30      	ldr	r2, [pc, #192]	@ (801a10c <HAL_SD_ConfigWideBusOperation+0x220>)
 801a04a:	4293      	cmp	r3, r2
 801a04c:	d906      	bls.n	801a05c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	4a2c      	ldr	r2, [pc, #176]	@ (801a104 <HAL_SD_ConfigWideBusOperation+0x218>)
 801a052:	fba2 2303 	umull	r2, r3, r2, r3
 801a056:	0e1b      	lsrs	r3, r3, #24
 801a058:	61bb      	str	r3, [r7, #24]
 801a05a:	e016      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	695b      	ldr	r3, [r3, #20]
 801a060:	61bb      	str	r3, [r7, #24]
 801a062:	e012      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	695b      	ldr	r3, [r3, #20]
 801a068:	005b      	lsls	r3, r3, #1
 801a06a:	69fa      	ldr	r2, [r7, #28]
 801a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a070:	4a26      	ldr	r2, [pc, #152]	@ (801a10c <HAL_SD_ConfigWideBusOperation+0x220>)
 801a072:	4293      	cmp	r3, r2
 801a074:	d906      	bls.n	801a084 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801a076:	69fb      	ldr	r3, [r7, #28]
 801a078:	4a22      	ldr	r2, [pc, #136]	@ (801a104 <HAL_SD_ConfigWideBusOperation+0x218>)
 801a07a:	fba2 2303 	umull	r2, r3, r2, r3
 801a07e:	0e1b      	lsrs	r3, r3, #24
 801a080:	61bb      	str	r3, [r7, #24]
 801a082:	e002      	b.n	801a08a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	695b      	ldr	r3, [r3, #20]
 801a088:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681c      	ldr	r4, [r3, #0]
 801a08e:	466a      	mov	r2, sp
 801a090:	f107 0314 	add.w	r3, r7, #20
 801a094:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a098:	e882 0003 	stmia.w	r2, {r0, r1}
 801a09c:	f107 0308 	add.w	r3, r7, #8
 801a0a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a0a2:	4620      	mov	r0, r4
 801a0a4:	f001 ff7a 	bl	801bf9c <SDMMC_Init>
 801a0a8:	e008      	b.n	801a0bc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f002 f847 	bl	801c158 <SDMMC_CmdBlockLength>
 801a0ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a0cc:	6a3b      	ldr	r3, [r7, #32]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d00c      	beq.n	801a0ec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	4a0a      	ldr	r2, [pc, #40]	@ (801a100 <HAL_SD_ConfigWideBusOperation+0x214>)
 801a0d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a0de:	6a3b      	ldr	r3, [r7, #32]
 801a0e0:	431a      	orrs	r2, r3
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2201      	movs	r2, #1
 801a0f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 801a0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	372c      	adds	r7, #44	@ 0x2c
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd90      	pop	{r4, r7, pc}
 801a100:	1fe00fff 	.word	0x1fe00fff
 801a104:	55e63b89 	.word	0x55e63b89
 801a108:	02faf080 	.word	0x02faf080
 801a10c:	017d7840 	.word	0x017d7840

0801a110 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b086      	sub	sp, #24
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801a118:	2300      	movs	r3, #0
 801a11a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801a11c:	f107 030c 	add.w	r3, r7, #12
 801a120:	4619      	mov	r1, r3
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	f000 fa40 	bl	801a5a8 <SD_SendStatus>
 801a128:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a12a:	697b      	ldr	r3, [r7, #20]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d005      	beq.n	801a13c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	431a      	orrs	r2, r3
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	0a5b      	lsrs	r3, r3, #9
 801a140:	f003 030f 	and.w	r3, r3, #15
 801a144:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801a146:	693b      	ldr	r3, [r7, #16]
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3718      	adds	r7, #24
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b090      	sub	sp, #64	@ 0x40
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 801a158:	2300      	movs	r3, #0
 801a15a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 801a15c:	f7f8 fbe8 	bl	8012930 <HAL_GetTick>
 801a160:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4618      	mov	r0, r3
 801a168:	f001 ff71 	bl	801c04e <SDMMC_GetPowerState>
 801a16c:	4603      	mov	r3, r0
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d102      	bne.n	801a178 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a172:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801a176:	e0b5      	b.n	801a2e4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a17c:	2b03      	cmp	r3, #3
 801a17e:	d02e      	beq.n	801a1de <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	4618      	mov	r0, r3
 801a186:	f002 f9bc 	bl	801c502 <SDMMC_CmdSendCID>
 801a18a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d001      	beq.n	801a196 <SD_InitCard+0x46>
    {
      return errorstate;
 801a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a194:	e0a6      	b.n	801a2e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2100      	movs	r1, #0
 801a19c:	4618      	mov	r0, r3
 801a19e:	f001 ff9c 	bl	801c0da <SDMMC_GetResponse>
 801a1a2:	4602      	mov	r2, r0
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	2104      	movs	r1, #4
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	f001 ff93 	bl	801c0da <SDMMC_GetResponse>
 801a1b4:	4602      	mov	r2, r0
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2108      	movs	r1, #8
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f001 ff8a 	bl	801c0da <SDMMC_GetResponse>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	210c      	movs	r1, #12
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	f001 ff81 	bl	801c0da <SDMMC_GetResponse>
 801a1d8:	4602      	mov	r2, r0
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1e2:	2b03      	cmp	r3, #3
 801a1e4:	d01d      	beq.n	801a222 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801a1e6:	e019      	b.n	801a21c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	f107 020a 	add.w	r2, r7, #10
 801a1f0:	4611      	mov	r1, r2
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f002 f9c4 	bl	801c580 <SDMMC_CmdSetRelAdd>
 801a1f8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d001      	beq.n	801a204 <SD_InitCard+0xb4>
      {
        return errorstate;
 801a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a202:	e06f      	b.n	801a2e4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 801a204:	f7f8 fb94 	bl	8012930 <HAL_GetTick>
 801a208:	4602      	mov	r2, r0
 801a20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a20c:	1ad3      	subs	r3, r2, r3
 801a20e:	f241 3287 	movw	r2, #4999	@ 0x1387
 801a212:	4293      	cmp	r3, r2
 801a214:	d902      	bls.n	801a21c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801a216:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a21a:	e063      	b.n	801a2e4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 801a21c:	897b      	ldrh	r3, [r7, #10]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d0e2      	beq.n	801a1e8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a226:	2b03      	cmp	r3, #3
 801a228:	d036      	beq.n	801a298 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801a22a:	897b      	ldrh	r3, [r7, #10]
 801a22c:	461a      	mov	r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681a      	ldr	r2, [r3, #0]
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a23a:	041b      	lsls	r3, r3, #16
 801a23c:	4619      	mov	r1, r3
 801a23e:	4610      	mov	r0, r2
 801a240:	f002 f97e 	bl	801c540 <SDMMC_CmdSendCSD>
 801a244:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801a246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d001      	beq.n	801a250 <SD_InitCard+0x100>
    {
      return errorstate;
 801a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a24e:	e049      	b.n	801a2e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	2100      	movs	r1, #0
 801a256:	4618      	mov	r0, r3
 801a258:	f001 ff3f 	bl	801c0da <SDMMC_GetResponse>
 801a25c:	4602      	mov	r2, r0
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2104      	movs	r1, #4
 801a268:	4618      	mov	r0, r3
 801a26a:	f001 ff36 	bl	801c0da <SDMMC_GetResponse>
 801a26e:	4602      	mov	r2, r0
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2108      	movs	r1, #8
 801a27a:	4618      	mov	r0, r3
 801a27c:	f001 ff2d 	bl	801c0da <SDMMC_GetResponse>
 801a280:	4602      	mov	r2, r0
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	210c      	movs	r1, #12
 801a28c:	4618      	mov	r0, r3
 801a28e:	f001 ff24 	bl	801c0da <SDMMC_GetResponse>
 801a292:	4602      	mov	r2, r0
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	2104      	movs	r1, #4
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f001 ff1b 	bl	801c0da <SDMMC_GetResponse>
 801a2a4:	4603      	mov	r3, r0
 801a2a6:	0d1a      	lsrs	r2, r3, #20
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801a2ac:	f107 030c 	add.w	r3, r7, #12
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7ff fb8c 	bl	80199d0 <HAL_SD_GetCardCSD>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d002      	beq.n	801a2c4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a2be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801a2c2:	e00f      	b.n	801a2e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a2cc:	041b      	lsls	r3, r3, #16
 801a2ce:	4619      	mov	r1, r3
 801a2d0:	4610      	mov	r0, r2
 801a2d2:	f002 f82d 	bl	801c330 <SDMMC_CmdSelDesel>
 801a2d6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 801a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d001      	beq.n	801a2e2 <SD_InitCard+0x192>
  {
    return errorstate;
 801a2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2e0:	e000      	b.n	801a2e4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801a2e2:	2300      	movs	r3, #0
}
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	3740      	adds	r7, #64	@ 0x40
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	bd80      	pop	{r7, pc}

0801a2ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b086      	sub	sp, #24
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	4618      	mov	r0, r3
 801a306:	f002 f836 	bl	801c376 <SDMMC_CmdGoIdleState>
 801a30a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d001      	beq.n	801a316 <SD_PowerON+0x2a>
  {
    return errorstate;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	e072      	b.n	801a3fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	4618      	mov	r0, r3
 801a31c:	f002 f849 	bl	801c3b2 <SDMMC_CmdOperCond>
 801a320:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801a328:	d10d      	bne.n	801a346 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	2200      	movs	r2, #0
 801a32e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	4618      	mov	r0, r3
 801a336:	f002 f81e 	bl	801c376 <SDMMC_CmdGoIdleState>
 801a33a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d004      	beq.n	801a34c <SD_PowerON+0x60>
    {
      return errorstate;
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	e05a      	b.n	801a3fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2201      	movs	r2, #1
 801a34a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a350:	2b01      	cmp	r3, #1
 801a352:	d137      	bne.n	801a3c4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	2100      	movs	r1, #0
 801a35a:	4618      	mov	r0, r3
 801a35c:	f002 f849 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a360:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d02d      	beq.n	801a3c4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a368:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801a36c:	e046      	b.n	801a3fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	2100      	movs	r1, #0
 801a374:	4618      	mov	r0, r3
 801a376:	f002 f83c 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a37a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d001      	beq.n	801a386 <SD_PowerON+0x9a>
    {
      return errorstate;
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	e03a      	b.n	801a3fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	491e      	ldr	r1, [pc, #120]	@ (801a404 <SD_PowerON+0x118>)
 801a38c:	4618      	mov	r0, r3
 801a38e:	f002 f853 	bl	801c438 <SDMMC_CmdAppOperCommand>
 801a392:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d002      	beq.n	801a3a0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801a39a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801a39e:	e02d      	b.n	801a3fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2100      	movs	r1, #0
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f001 fe97 	bl	801c0da <SDMMC_GetResponse>
 801a3ac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801a3ae:	697b      	ldr	r3, [r7, #20]
 801a3b0:	0fdb      	lsrs	r3, r3, #31
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d101      	bne.n	801a3ba <SD_PowerON+0xce>
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	e000      	b.n	801a3bc <SD_PowerON+0xd0>
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	613b      	str	r3, [r7, #16]

    count++;
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	3301      	adds	r3, #1
 801a3c2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	d802      	bhi.n	801a3d4 <SD_PowerON+0xe8>
 801a3ce:	693b      	ldr	r3, [r7, #16]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d0cc      	beq.n	801a36e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a3da:	4293      	cmp	r3, r2
 801a3dc:	d902      	bls.n	801a3e4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801a3de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a3e2:	e00b      	b.n	801a3fc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 801a3ea:	697b      	ldr	r3, [r7, #20]
 801a3ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d002      	beq.n	801a3fa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801a3fa:	2300      	movs	r3, #0
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	3718      	adds	r7, #24
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	c1100000 	.word	0xc1100000

0801a408 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b08c      	sub	sp, #48	@ 0x30
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
 801a410:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801a412:	f7f8 fa8d 	bl	8012930 <HAL_GetTick>
 801a416:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	2100      	movs	r1, #0
 801a422:	4618      	mov	r0, r3
 801a424:	f001 fe59 	bl	801c0da <SDMMC_GetResponse>
 801a428:	4603      	mov	r3, r0
 801a42a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a42e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a432:	d102      	bne.n	801a43a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801a434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a438:	e0b0      	b.n	801a59c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	2140      	movs	r1, #64	@ 0x40
 801a440:	4618      	mov	r0, r3
 801a442:	f001 fe89 	bl	801c158 <SDMMC_CmdBlockLength>
 801a446:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a448:	6a3b      	ldr	r3, [r7, #32]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d005      	beq.n	801a45a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801a456:	6a3b      	ldr	r3, [r7, #32]
 801a458:	e0a0      	b.n	801a59c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681a      	ldr	r2, [r3, #0]
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a462:	041b      	lsls	r3, r3, #16
 801a464:	4619      	mov	r1, r3
 801a466:	4610      	mov	r0, r2
 801a468:	f001 ffc3 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a46c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a46e:	6a3b      	ldr	r3, [r7, #32]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d005      	beq.n	801a480 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801a47c:	6a3b      	ldr	r3, [r7, #32]
 801a47e:	e08d      	b.n	801a59c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a480:	f04f 33ff 	mov.w	r3, #4294967295
 801a484:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801a486:	2340      	movs	r3, #64	@ 0x40
 801a488:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801a48a:	2360      	movs	r3, #96	@ 0x60
 801a48c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801a48e:	2302      	movs	r3, #2
 801a490:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a492:	2300      	movs	r3, #0
 801a494:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801a496:	2301      	movs	r3, #1
 801a498:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	f107 0208 	add.w	r2, r7, #8
 801a4a2:	4611      	mov	r1, r2
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f001 fe2b 	bl	801c100 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	f002 f8ab 	bl	801c60a <SDMMC_CmdStatusRegister>
 801a4b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a4b6:	6a3b      	ldr	r3, [r7, #32]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d02b      	beq.n	801a514 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801a4c4:	6a3b      	ldr	r3, [r7, #32]
 801a4c6:	e069      	b.n	801a59c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a4ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d013      	beq.n	801a4fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4da:	e00d      	b.n	801a4f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f001 fd85 	bl	801bff0 <SDMMC_ReadFIFO>
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ea:	601a      	str	r2, [r3, #0]
        pData++;
 801a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ee:	3304      	adds	r3, #4
 801a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 801a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4fa:	2b07      	cmp	r3, #7
 801a4fc:	d9ee      	bls.n	801a4dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801a4fe:	f7f8 fa17 	bl	8012930 <HAL_GetTick>
 801a502:	4602      	mov	r2, r0
 801a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a506:	1ad3      	subs	r3, r2, r3
 801a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a50c:	d102      	bne.n	801a514 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801a50e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a512:	e043      	b.n	801a59c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a51a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d0d2      	beq.n	801a4c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a528:	f003 0308 	and.w	r3, r3, #8
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d001      	beq.n	801a534 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801a530:	2308      	movs	r3, #8
 801a532:	e033      	b.n	801a59c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a53a:	f003 0302 	and.w	r3, r3, #2
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d001      	beq.n	801a546 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801a542:	2302      	movs	r3, #2
 801a544:	e02a      	b.n	801a59c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a54c:	f003 0320 	and.w	r3, r3, #32
 801a550:	2b00      	cmp	r3, #0
 801a552:	d017      	beq.n	801a584 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801a554:	2320      	movs	r3, #32
 801a556:	e021      	b.n	801a59c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	4618      	mov	r0, r3
 801a55e:	f001 fd47 	bl	801bff0 <SDMMC_ReadFIFO>
 801a562:	4602      	mov	r2, r0
 801a564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a566:	601a      	str	r2, [r3, #0]
    pData++;
 801a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a56a:	3304      	adds	r3, #4
 801a56c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801a56e:	f7f8 f9df 	bl	8012930 <HAL_GetTick>
 801a572:	4602      	mov	r2, r0
 801a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a576:	1ad3      	subs	r3, r2, r3
 801a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a57c:	d102      	bne.n	801a584 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801a57e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a582:	e00b      	b.n	801a59c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a58a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d1e2      	bne.n	801a558 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	4a03      	ldr	r2, [pc, #12]	@ (801a5a4 <SD_SendSDStatus+0x19c>)
 801a598:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 801a59a:	2300      	movs	r3, #0
}
 801a59c:	4618      	mov	r0, r3
 801a59e:	3730      	adds	r7, #48	@ 0x30
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	bd80      	pop	{r7, pc}
 801a5a4:	18000f3a 	.word	0x18000f3a

0801a5a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d102      	bne.n	801a5be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801a5b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801a5bc:	e018      	b.n	801a5f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	681a      	ldr	r2, [r3, #0]
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a5c6:	041b      	lsls	r3, r3, #16
 801a5c8:	4619      	mov	r1, r3
 801a5ca:	4610      	mov	r0, r2
 801a5cc:	f001 fffa 	bl	801c5c4 <SDMMC_CmdSendStatus>
 801a5d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d001      	beq.n	801a5dc <SD_SendStatus+0x34>
  {
    return errorstate;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	e009      	b.n	801a5f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	f001 fd79 	bl	801c0da <SDMMC_GetResponse>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801a5ee:	2300      	movs	r3, #0
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3710      	adds	r7, #16
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}

0801a5f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b086      	sub	sp, #24
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801a600:	2300      	movs	r3, #0
 801a602:	60fb      	str	r3, [r7, #12]
 801a604:	2300      	movs	r3, #0
 801a606:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	2100      	movs	r1, #0
 801a60e:	4618      	mov	r0, r3
 801a610:	f001 fd63 	bl	801c0da <SDMMC_GetResponse>
 801a614:	4603      	mov	r3, r0
 801a616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a61a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a61e:	d102      	bne.n	801a626 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801a620:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a624:	e02f      	b.n	801a686 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801a626:	f107 030c 	add.w	r3, r7, #12
 801a62a:	4619      	mov	r1, r3
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f000 f879 	bl	801a724 <SD_FindSCR>
 801a632:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a634:	697b      	ldr	r3, [r7, #20]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d001      	beq.n	801a63e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	e023      	b.n	801a686 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801a63e:	693b      	ldr	r3, [r7, #16]
 801a640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a644:	2b00      	cmp	r3, #0
 801a646:	d01c      	beq.n	801a682 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681a      	ldr	r2, [r3, #0]
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a650:	041b      	lsls	r3, r3, #16
 801a652:	4619      	mov	r1, r3
 801a654:	4610      	mov	r0, r2
 801a656:	f001 fecc 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a65a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d001      	beq.n	801a666 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	e00f      	b.n	801a686 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2102      	movs	r1, #2
 801a66c:	4618      	mov	r0, r3
 801a66e:	f001 ff03 	bl	801c478 <SDMMC_CmdBusWidth>
 801a672:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d001      	beq.n	801a67e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801a67a:	697b      	ldr	r3, [r7, #20]
 801a67c:	e003      	b.n	801a686 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801a67e:	2300      	movs	r3, #0
 801a680:	e001      	b.n	801a686 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a682:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 801a686:	4618      	mov	r0, r3
 801a688:	3718      	adds	r7, #24
 801a68a:	46bd      	mov	sp, r7
 801a68c:	bd80      	pop	{r7, pc}

0801a68e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801a68e:	b580      	push	{r7, lr}
 801a690:	b086      	sub	sp, #24
 801a692:	af00      	add	r7, sp, #0
 801a694:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801a696:	2300      	movs	r3, #0
 801a698:	60fb      	str	r3, [r7, #12]
 801a69a:	2300      	movs	r3, #0
 801a69c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	2100      	movs	r1, #0
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	f001 fd18 	bl	801c0da <SDMMC_GetResponse>
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a6b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a6b4:	d102      	bne.n	801a6bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801a6b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a6ba:	e02f      	b.n	801a71c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801a6bc:	f107 030c 	add.w	r3, r7, #12
 801a6c0:	4619      	mov	r1, r3
 801a6c2:	6878      	ldr	r0, [r7, #4]
 801a6c4:	f000 f82e 	bl	801a724 <SD_FindSCR>
 801a6c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801a6ca:	697b      	ldr	r3, [r7, #20]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d001      	beq.n	801a6d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	e023      	b.n	801a71c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801a6d4:	693b      	ldr	r3, [r7, #16]
 801a6d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d01c      	beq.n	801a718 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a6e6:	041b      	lsls	r3, r3, #16
 801a6e8:	4619      	mov	r1, r3
 801a6ea:	4610      	mov	r0, r2
 801a6ec:	f001 fe81 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a6f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a6f2:	697b      	ldr	r3, [r7, #20]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d001      	beq.n	801a6fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	e00f      	b.n	801a71c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	2100      	movs	r1, #0
 801a702:	4618      	mov	r0, r3
 801a704:	f001 feb8 	bl	801c478 <SDMMC_CmdBusWidth>
 801a708:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d001      	beq.n	801a714 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801a710:	697b      	ldr	r3, [r7, #20]
 801a712:	e003      	b.n	801a71c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801a714:	2300      	movs	r3, #0
 801a716:	e001      	b.n	801a71c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801a718:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 801a71c:	4618      	mov	r0, r3
 801a71e:	3718      	adds	r7, #24
 801a720:	46bd      	mov	sp, r7
 801a722:	bd80      	pop	{r7, pc}

0801a724 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b08e      	sub	sp, #56	@ 0x38
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801a72e:	f7f8 f8ff 	bl	8012930 <HAL_GetTick>
 801a732:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 801a734:	2300      	movs	r3, #0
 801a736:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801a738:	2300      	movs	r3, #0
 801a73a:	60bb      	str	r3, [r7, #8]
 801a73c:	2300      	movs	r3, #0
 801a73e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	2108      	movs	r1, #8
 801a74a:	4618      	mov	r0, r3
 801a74c:	f001 fd04 	bl	801c158 <SDMMC_CmdBlockLength>
 801a750:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a754:	2b00      	cmp	r3, #0
 801a756:	d001      	beq.n	801a75c <SD_FindSCR+0x38>
  {
    return errorstate;
 801a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75a:	e0ad      	b.n	801a8b8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681a      	ldr	r2, [r3, #0]
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a764:	041b      	lsls	r3, r3, #16
 801a766:	4619      	mov	r1, r3
 801a768:	4610      	mov	r0, r2
 801a76a:	f001 fe42 	bl	801c3f2 <SDMMC_CmdAppCommand>
 801a76e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a772:	2b00      	cmp	r3, #0
 801a774:	d001      	beq.n	801a77a <SD_FindSCR+0x56>
  {
    return errorstate;
 801a776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a778:	e09e      	b.n	801a8b8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a77a:	f04f 33ff 	mov.w	r3, #4294967295
 801a77e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801a780:	2308      	movs	r3, #8
 801a782:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801a784:	2330      	movs	r3, #48	@ 0x30
 801a786:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801a788:	2302      	movs	r3, #2
 801a78a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a78c:	2300      	movs	r3, #0
 801a78e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801a790:	2301      	movs	r3, #1
 801a792:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f107 0210 	add.w	r2, r7, #16
 801a79c:	4611      	mov	r1, r2
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f001 fcae 	bl	801c100 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f001 fe88 	bl	801c4be <SDMMC_CmdSendSCR>
 801a7ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801a7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d027      	beq.n	801a806 <SD_FindSCR+0xe2>
  {
    return errorstate;
 801a7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7b8:	e07e      	b.n	801a8b8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d113      	bne.n	801a7f0 <SD_FindSCR+0xcc>
 801a7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d110      	bne.n	801a7f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f001 fc0c 	bl	801bff0 <SDMMC_ReadFIFO>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f001 fc05 	bl	801bff0 <SDMMC_ReadFIFO>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	60fb      	str	r3, [r7, #12]
      index++;
 801a7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7ec:	3301      	adds	r3, #1
 801a7ee:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801a7f0:	f7f8 f89e 	bl	8012930 <HAL_GetTick>
 801a7f4:	4602      	mov	r2, r0
 801a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7f8:	1ad3      	subs	r3, r2, r3
 801a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7fe:	d102      	bne.n	801a806 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801a800:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a804:	e058      	b.n	801a8b8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a80c:	f240 532a 	movw	r3, #1322	@ 0x52a
 801a810:	4013      	ands	r3, r2
 801a812:	2b00      	cmp	r3, #0
 801a814:	d0d1      	beq.n	801a7ba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a81c:	f003 0308 	and.w	r3, r3, #8
 801a820:	2b00      	cmp	r3, #0
 801a822:	d005      	beq.n	801a830 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	2208      	movs	r2, #8
 801a82a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801a82c:	2308      	movs	r3, #8
 801a82e:	e043      	b.n	801a8b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a836:	f003 0302 	and.w	r3, r3, #2
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d005      	beq.n	801a84a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	2202      	movs	r2, #2
 801a844:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801a846:	2302      	movs	r3, #2
 801a848:	e036      	b.n	801a8b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a850:	f003 0320 	and.w	r3, r3, #32
 801a854:	2b00      	cmp	r3, #0
 801a856:	d005      	beq.n	801a864 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2220      	movs	r2, #32
 801a85e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801a860:	2320      	movs	r3, #32
 801a862:	e029      	b.n	801a8b8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	4a15      	ldr	r2, [pc, #84]	@ (801a8c0 <SD_FindSCR+0x19c>)
 801a86a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	061a      	lsls	r2, r3, #24
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	021b      	lsls	r3, r3, #8
 801a874:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801a878:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	0a1b      	lsrs	r3, r3, #8
 801a87e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801a882:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	0e1b      	lsrs	r3, r3, #24
 801a888:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801a88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a88c:	601a      	str	r2, [r3, #0]
    scr++;
 801a88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a890:	3304      	adds	r3, #4
 801a892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	061a      	lsls	r2, r3, #24
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	021b      	lsls	r3, r3, #8
 801a89c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801a8a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	0a1b      	lsrs	r3, r3, #8
 801a8a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801a8aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	0e1b      	lsrs	r3, r3, #24
 801a8b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801a8b6:	2300      	movs	r3, #0
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3738      	adds	r7, #56	@ 0x38
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}
 801a8c0:	18000f3a 	.word	0x18000f3a

0801a8c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b086      	sub	sp, #24
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8d0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8d6:	2b1f      	cmp	r3, #31
 801a8d8:	d936      	bls.n	801a948 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 801a8da:	2300      	movs	r3, #0
 801a8dc:	617b      	str	r3, [r7, #20]
 801a8de:	e027      	b.n	801a930 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f001 fb83 	bl	801bff0 <SDMMC_ReadFIFO>
 801a8ea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	b2da      	uxtb	r2, r3
 801a8f0:	693b      	ldr	r3, [r7, #16]
 801a8f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a8f4:	693b      	ldr	r3, [r7, #16]
 801a8f6:	3301      	adds	r3, #1
 801a8f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	0a1b      	lsrs	r3, r3, #8
 801a8fe:	b2da      	uxtb	r2, r3
 801a900:	693b      	ldr	r3, [r7, #16]
 801a902:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a904:	693b      	ldr	r3, [r7, #16]
 801a906:	3301      	adds	r3, #1
 801a908:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	0c1b      	lsrs	r3, r3, #16
 801a90e:	b2da      	uxtb	r2, r3
 801a910:	693b      	ldr	r3, [r7, #16]
 801a912:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a914:	693b      	ldr	r3, [r7, #16]
 801a916:	3301      	adds	r3, #1
 801a918:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	0e1b      	lsrs	r3, r3, #24
 801a91e:	b2da      	uxtb	r2, r3
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	701a      	strb	r2, [r3, #0]
      tmp++;
 801a924:	693b      	ldr	r3, [r7, #16]
 801a926:	3301      	adds	r3, #1
 801a928:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 801a92a:	697b      	ldr	r3, [r7, #20]
 801a92c:	3301      	adds	r3, #1
 801a92e:	617b      	str	r3, [r7, #20]
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	2b07      	cmp	r3, #7
 801a934:	d9d4      	bls.n	801a8e0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	693a      	ldr	r2, [r7, #16]
 801a93a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a940:	f1a3 0220 	sub.w	r2, r3, #32
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 801a948:	bf00      	nop
 801a94a:	3718      	adds	r7, #24
 801a94c:	46bd      	mov	sp, r7
 801a94e:	bd80      	pop	{r7, pc}

0801a950 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b086      	sub	sp, #24
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	69db      	ldr	r3, [r3, #28]
 801a95c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	6a1b      	ldr	r3, [r3, #32]
 801a962:	2b1f      	cmp	r3, #31
 801a964:	d93a      	bls.n	801a9dc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 801a966:	2300      	movs	r3, #0
 801a968:	617b      	str	r3, [r7, #20]
 801a96a:	e02b      	b.n	801a9c4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801a96c:	693b      	ldr	r3, [r7, #16]
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	60fb      	str	r3, [r7, #12]
      tmp++;
 801a972:	693b      	ldr	r3, [r7, #16]
 801a974:	3301      	adds	r3, #1
 801a976:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801a978:	693b      	ldr	r3, [r7, #16]
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	021a      	lsls	r2, r3, #8
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	4313      	orrs	r3, r2
 801a982:	60fb      	str	r3, [r7, #12]
      tmp++;
 801a984:	693b      	ldr	r3, [r7, #16]
 801a986:	3301      	adds	r3, #1
 801a988:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801a98a:	693b      	ldr	r3, [r7, #16]
 801a98c:	781b      	ldrb	r3, [r3, #0]
 801a98e:	041a      	lsls	r2, r3, #16
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	4313      	orrs	r3, r2
 801a994:	60fb      	str	r3, [r7, #12]
      tmp++;
 801a996:	693b      	ldr	r3, [r7, #16]
 801a998:	3301      	adds	r3, #1
 801a99a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801a99c:	693b      	ldr	r3, [r7, #16]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	061a      	lsls	r2, r3, #24
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	4313      	orrs	r3, r2
 801a9a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 801a9a8:	693b      	ldr	r3, [r7, #16]
 801a9aa:	3301      	adds	r3, #1
 801a9ac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	f107 020c 	add.w	r2, r7, #12
 801a9b6:	4611      	mov	r1, r2
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f001 fb26 	bl	801c00a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 801a9be:	697b      	ldr	r3, [r7, #20]
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	617b      	str	r3, [r7, #20]
 801a9c4:	697b      	ldr	r3, [r7, #20]
 801a9c6:	2b07      	cmp	r3, #7
 801a9c8:	d9d0      	bls.n	801a96c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	693a      	ldr	r2, [r7, #16]
 801a9ce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	6a1b      	ldr	r3, [r3, #32]
 801a9d4:	f1a3 0220 	sub.w	r2, r3, #32
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	621a      	str	r2, [r3, #32]
  }
}
 801a9dc:	bf00      	nop
 801a9de:	3718      	adds	r7, #24
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801a9e4:	b480      	push	{r7}
 801a9e6:	b083      	sub	sp, #12
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801a9ec:	bf00      	nop
 801a9ee:	370c      	adds	r7, #12
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f6:	4770      	bx	lr

0801a9f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	b083      	sub	sp, #12
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801aa00:	bf00      	nop
 801aa02:	370c      	adds	r7, #12
 801aa04:	46bd      	mov	sp, r7
 801aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0a:	4770      	bx	lr

0801aa0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	b083      	sub	sp, #12
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801aa14:	bf00      	nop
 801aa16:	370c      	adds	r7, #12
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1e:	4770      	bx	lr

0801aa20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801aa20:	b480      	push	{r7}
 801aa22:	b083      	sub	sp, #12
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801aa28:	bf00      	nop
 801aa2a:	370c      	adds	r7, #12
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa32:	4770      	bx	lr

0801aa34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d101      	bne.n	801aa46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801aa42:	2301      	movs	r3, #1
 801aa44:	e10f      	b.n	801ac66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	2200      	movs	r2, #0
 801aa4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	4a87      	ldr	r2, [pc, #540]	@ (801ac70 <HAL_SPI_Init+0x23c>)
 801aa52:	4293      	cmp	r3, r2
 801aa54:	d00f      	beq.n	801aa76 <HAL_SPI_Init+0x42>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	4a86      	ldr	r2, [pc, #536]	@ (801ac74 <HAL_SPI_Init+0x240>)
 801aa5c:	4293      	cmp	r3, r2
 801aa5e:	d00a      	beq.n	801aa76 <HAL_SPI_Init+0x42>
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	4a84      	ldr	r2, [pc, #528]	@ (801ac78 <HAL_SPI_Init+0x244>)
 801aa66:	4293      	cmp	r3, r2
 801aa68:	d005      	beq.n	801aa76 <HAL_SPI_Init+0x42>
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	68db      	ldr	r3, [r3, #12]
 801aa6e:	2b0f      	cmp	r3, #15
 801aa70:	d901      	bls.n	801aa76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801aa72:	2301      	movs	r3, #1
 801aa74:	e0f7      	b.n	801ac66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801aa76:	6878      	ldr	r0, [r7, #4]
 801aa78:	f000 f90a 	bl	801ac90 <SPI_GetPacketSize>
 801aa7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	4a7b      	ldr	r2, [pc, #492]	@ (801ac70 <HAL_SPI_Init+0x23c>)
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d00c      	beq.n	801aaa2 <HAL_SPI_Init+0x6e>
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	4a79      	ldr	r2, [pc, #484]	@ (801ac74 <HAL_SPI_Init+0x240>)
 801aa8e:	4293      	cmp	r3, r2
 801aa90:	d007      	beq.n	801aaa2 <HAL_SPI_Init+0x6e>
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	4a78      	ldr	r2, [pc, #480]	@ (801ac78 <HAL_SPI_Init+0x244>)
 801aa98:	4293      	cmp	r3, r2
 801aa9a:	d002      	beq.n	801aaa2 <HAL_SPI_Init+0x6e>
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	2b08      	cmp	r3, #8
 801aaa0:	d811      	bhi.n	801aac6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801aaa6:	4a72      	ldr	r2, [pc, #456]	@ (801ac70 <HAL_SPI_Init+0x23c>)
 801aaa8:	4293      	cmp	r3, r2
 801aaaa:	d009      	beq.n	801aac0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	4a70      	ldr	r2, [pc, #448]	@ (801ac74 <HAL_SPI_Init+0x240>)
 801aab2:	4293      	cmp	r3, r2
 801aab4:	d004      	beq.n	801aac0 <HAL_SPI_Init+0x8c>
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	4a6f      	ldr	r2, [pc, #444]	@ (801ac78 <HAL_SPI_Init+0x244>)
 801aabc:	4293      	cmp	r3, r2
 801aabe:	d104      	bne.n	801aaca <HAL_SPI_Init+0x96>
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	2b10      	cmp	r3, #16
 801aac4:	d901      	bls.n	801aaca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801aac6:	2301      	movs	r3, #1
 801aac8:	e0cd      	b.n	801ac66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d106      	bne.n	801aae4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	2200      	movs	r2, #0
 801aada:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801aade:	6878      	ldr	r0, [r7, #4]
 801aae0:	f000 f8cc 	bl	801ac7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	2202      	movs	r2, #2
 801aae8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	681a      	ldr	r2, [r3, #0]
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	f022 0201 	bic.w	r2, r2, #1
 801aafa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	689b      	ldr	r3, [r3, #8]
 801ab02:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801ab06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	699b      	ldr	r3, [r3, #24]
 801ab0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ab10:	d119      	bne.n	801ab46 <HAL_SPI_Init+0x112>
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801ab1a:	d103      	bne.n	801ab24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d008      	beq.n	801ab36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d10c      	bne.n	801ab46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ab30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab34:	d107      	bne.n	801ab46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	681a      	ldr	r2, [r3, #0]
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801ab44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	685b      	ldr	r3, [r3, #4]
 801ab4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d00f      	beq.n	801ab72 <HAL_SPI_Init+0x13e>
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	68db      	ldr	r3, [r3, #12]
 801ab56:	2b06      	cmp	r3, #6
 801ab58:	d90b      	bls.n	801ab72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	430a      	orrs	r2, r1
 801ab6e:	601a      	str	r2, [r3, #0]
 801ab70:	e007      	b.n	801ab82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	681a      	ldr	r2, [r3, #0]
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ab80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	69da      	ldr	r2, [r3, #28]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab8a:	431a      	orrs	r2, r3
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	431a      	orrs	r2, r3
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ab94:	ea42 0103 	orr.w	r1, r2, r3
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	68da      	ldr	r2, [r3, #12]
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	430a      	orrs	r2, r1
 801aba2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abac:	431a      	orrs	r2, r3
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801abb2:	431a      	orrs	r2, r3
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	699b      	ldr	r3, [r3, #24]
 801abb8:	431a      	orrs	r2, r3
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	691b      	ldr	r3, [r3, #16]
 801abbe:	431a      	orrs	r2, r3
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	695b      	ldr	r3, [r3, #20]
 801abc4:	431a      	orrs	r2, r3
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	6a1b      	ldr	r3, [r3, #32]
 801abca:	431a      	orrs	r2, r3
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	431a      	orrs	r2, r3
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801abd6:	431a      	orrs	r2, r3
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	689b      	ldr	r3, [r3, #8]
 801abdc:	431a      	orrs	r2, r3
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801abe2:	ea42 0103 	orr.w	r1, r2, r3
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	430a      	orrs	r2, r1
 801abf0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	685b      	ldr	r3, [r3, #4]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d113      	bne.n	801ac22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	689b      	ldr	r3, [r3, #8]
 801ac00:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ac0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	689b      	ldr	r3, [r3, #8]
 801ac14:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801ac20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	f022 0201 	bic.w	r2, r2, #1
 801ac30:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	685b      	ldr	r3, [r3, #4]
 801ac36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d00a      	beq.n	801ac54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	68db      	ldr	r3, [r3, #12]
 801ac44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	430a      	orrs	r2, r1
 801ac52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2200      	movs	r2, #0
 801ac58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2201      	movs	r2, #1
 801ac60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801ac64:	2300      	movs	r3, #0
}
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}
 801ac6e:	bf00      	nop
 801ac70:	40013000 	.word	0x40013000
 801ac74:	40003800 	.word	0x40003800
 801ac78:	40003c00 	.word	0x40003c00

0801ac7c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 801ac7c:	b480      	push	{r7}
 801ac7e:	b083      	sub	sp, #12
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 801ac84:	bf00      	nop
 801ac86:	370c      	adds	r7, #12
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8e:	4770      	bx	lr

0801ac90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b085      	sub	sp, #20
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac9c:	095b      	lsrs	r3, r3, #5
 801ac9e:	3301      	adds	r3, #1
 801aca0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	68db      	ldr	r3, [r3, #12]
 801aca6:	3301      	adds	r3, #1
 801aca8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	3307      	adds	r3, #7
 801acae:	08db      	lsrs	r3, r3, #3
 801acb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	68fa      	ldr	r2, [r7, #12]
 801acb6:	fb02 f303 	mul.w	r3, r2, r3
}
 801acba:	4618      	mov	r0, r3
 801acbc:	3714      	adds	r7, #20
 801acbe:	46bd      	mov	sp, r7
 801acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc4:	4770      	bx	lr

0801acc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801acc6:	b580      	push	{r7, lr}
 801acc8:	b082      	sub	sp, #8
 801acca:	af00      	add	r7, sp, #0
 801accc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d101      	bne.n	801acd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801acd4:	2301      	movs	r3, #1
 801acd6:	e042      	b.n	801ad5e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d106      	bne.n	801acf0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	2200      	movs	r2, #0
 801ace6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801acea:	6878      	ldr	r0, [r7, #4]
 801acec:	f7f0 ff14 	bl	800bb18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	2224      	movs	r2, #36	@ 0x24
 801acf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	681a      	ldr	r2, [r3, #0]
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f022 0201 	bic.w	r2, r2, #1
 801ad06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d002      	beq.n	801ad16 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801ad10:	6878      	ldr	r0, [r7, #4]
 801ad12:	f000 fe1f 	bl	801b954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 f8b4 	bl	801ae84 <UART_SetConfig>
 801ad1c:	4603      	mov	r3, r0
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d101      	bne.n	801ad26 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801ad22:	2301      	movs	r3, #1
 801ad24:	e01b      	b.n	801ad5e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	685a      	ldr	r2, [r3, #4]
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801ad34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	689a      	ldr	r2, [r3, #8]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801ad44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	f042 0201 	orr.w	r2, r2, #1
 801ad54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ad56:	6878      	ldr	r0, [r7, #4]
 801ad58:	f000 fe9e 	bl	801ba98 <UART_CheckIdleState>
 801ad5c:	4603      	mov	r3, r0
}
 801ad5e:	4618      	mov	r0, r3
 801ad60:	3708      	adds	r7, #8
 801ad62:	46bd      	mov	sp, r7
 801ad64:	bd80      	pop	{r7, pc}

0801ad66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ad66:	b580      	push	{r7, lr}
 801ad68:	b08a      	sub	sp, #40	@ 0x28
 801ad6a:	af02      	add	r7, sp, #8
 801ad6c:	60f8      	str	r0, [r7, #12]
 801ad6e:	60b9      	str	r1, [r7, #8]
 801ad70:	603b      	str	r3, [r7, #0]
 801ad72:	4613      	mov	r3, r2
 801ad74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ad7c:	2b20      	cmp	r3, #32
 801ad7e:	d17b      	bne.n	801ae78 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801ad80:	68bb      	ldr	r3, [r7, #8]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d002      	beq.n	801ad8c <HAL_UART_Transmit+0x26>
 801ad86:	88fb      	ldrh	r3, [r7, #6]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d101      	bne.n	801ad90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	e074      	b.n	801ae7a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	2200      	movs	r2, #0
 801ad94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2221      	movs	r2, #33	@ 0x21
 801ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ada0:	f7f7 fdc6 	bl	8012930 <HAL_GetTick>
 801ada4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	88fa      	ldrh	r2, [r7, #6]
 801adaa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	88fa      	ldrh	r2, [r7, #6]
 801adb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	689b      	ldr	r3, [r3, #8]
 801adba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801adbe:	d108      	bne.n	801add2 <HAL_UART_Transmit+0x6c>
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	691b      	ldr	r3, [r3, #16]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d104      	bne.n	801add2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801adc8:	2300      	movs	r3, #0
 801adca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	61bb      	str	r3, [r7, #24]
 801add0:	e003      	b.n	801adda <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801add2:	68bb      	ldr	r3, [r7, #8]
 801add4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801add6:	2300      	movs	r3, #0
 801add8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801adda:	e030      	b.n	801ae3e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	9300      	str	r3, [sp, #0]
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	2200      	movs	r2, #0
 801ade4:	2180      	movs	r1, #128	@ 0x80
 801ade6:	68f8      	ldr	r0, [r7, #12]
 801ade8:	f000 ff00 	bl	801bbec <UART_WaitOnFlagUntilTimeout>
 801adec:	4603      	mov	r3, r0
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d005      	beq.n	801adfe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	2220      	movs	r2, #32
 801adf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801adfa:	2303      	movs	r3, #3
 801adfc:	e03d      	b.n	801ae7a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d10b      	bne.n	801ae1c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ae04:	69bb      	ldr	r3, [r7, #24]
 801ae06:	881b      	ldrh	r3, [r3, #0]
 801ae08:	461a      	mov	r2, r3
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ae12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801ae14:	69bb      	ldr	r3, [r7, #24]
 801ae16:	3302      	adds	r3, #2
 801ae18:	61bb      	str	r3, [r7, #24]
 801ae1a:	e007      	b.n	801ae2c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	781a      	ldrb	r2, [r3, #0]
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801ae26:	69fb      	ldr	r3, [r7, #28]
 801ae28:	3301      	adds	r3, #1
 801ae2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	3b01      	subs	r3, #1
 801ae36:	b29a      	uxth	r2, r3
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d1c8      	bne.n	801addc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	9300      	str	r3, [sp, #0]
 801ae4e:	697b      	ldr	r3, [r7, #20]
 801ae50:	2200      	movs	r2, #0
 801ae52:	2140      	movs	r1, #64	@ 0x40
 801ae54:	68f8      	ldr	r0, [r7, #12]
 801ae56:	f000 fec9 	bl	801bbec <UART_WaitOnFlagUntilTimeout>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d005      	beq.n	801ae6c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	2220      	movs	r2, #32
 801ae64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801ae68:	2303      	movs	r3, #3
 801ae6a:	e006      	b.n	801ae7a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	2220      	movs	r2, #32
 801ae70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801ae74:	2300      	movs	r3, #0
 801ae76:	e000      	b.n	801ae7a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801ae78:	2302      	movs	r3, #2
  }
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3720      	adds	r7, #32
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
	...

0801ae84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ae84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ae88:	b092      	sub	sp, #72	@ 0x48
 801ae8a:	af00      	add	r7, sp, #0
 801ae8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ae94:	697b      	ldr	r3, [r7, #20]
 801ae96:	689a      	ldr	r2, [r3, #8]
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	691b      	ldr	r3, [r3, #16]
 801ae9c:	431a      	orrs	r2, r3
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	695b      	ldr	r3, [r3, #20]
 801aea2:	431a      	orrs	r2, r3
 801aea4:	697b      	ldr	r3, [r7, #20]
 801aea6:	69db      	ldr	r3, [r3, #28]
 801aea8:	4313      	orrs	r3, r2
 801aeaa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	681a      	ldr	r2, [r3, #0]
 801aeb2:	4bbe      	ldr	r3, [pc, #760]	@ (801b1ac <UART_SetConfig+0x328>)
 801aeb4:	4013      	ands	r3, r2
 801aeb6:	697a      	ldr	r2, [r7, #20]
 801aeb8:	6812      	ldr	r2, [r2, #0]
 801aeba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801aebc:	430b      	orrs	r3, r1
 801aebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801aec0:	697b      	ldr	r3, [r7, #20]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	685b      	ldr	r3, [r3, #4]
 801aec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	68da      	ldr	r2, [r3, #12]
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	430a      	orrs	r2, r1
 801aed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	699b      	ldr	r3, [r3, #24]
 801aeda:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	4ab3      	ldr	r2, [pc, #716]	@ (801b1b0 <UART_SetConfig+0x32c>)
 801aee2:	4293      	cmp	r3, r2
 801aee4:	d004      	beq.n	801aef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	6a1b      	ldr	r3, [r3, #32]
 801aeea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aeec:	4313      	orrs	r3, r2
 801aeee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	689a      	ldr	r2, [r3, #8]
 801aef6:	4baf      	ldr	r3, [pc, #700]	@ (801b1b4 <UART_SetConfig+0x330>)
 801aef8:	4013      	ands	r3, r2
 801aefa:	697a      	ldr	r2, [r7, #20]
 801aefc:	6812      	ldr	r2, [r2, #0]
 801aefe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801af00:	430b      	orrs	r3, r1
 801af02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af0a:	f023 010f 	bic.w	r1, r3, #15
 801af0e:	697b      	ldr	r3, [r7, #20]
 801af10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801af12:	697b      	ldr	r3, [r7, #20]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	430a      	orrs	r2, r1
 801af18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801af1a:	697b      	ldr	r3, [r7, #20]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	4aa6      	ldr	r2, [pc, #664]	@ (801b1b8 <UART_SetConfig+0x334>)
 801af20:	4293      	cmp	r3, r2
 801af22:	d177      	bne.n	801b014 <UART_SetConfig+0x190>
 801af24:	4ba5      	ldr	r3, [pc, #660]	@ (801b1bc <UART_SetConfig+0x338>)
 801af26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801af28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801af2c:	2b28      	cmp	r3, #40	@ 0x28
 801af2e:	d86d      	bhi.n	801b00c <UART_SetConfig+0x188>
 801af30:	a201      	add	r2, pc, #4	@ (adr r2, 801af38 <UART_SetConfig+0xb4>)
 801af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af36:	bf00      	nop
 801af38:	0801afdd 	.word	0x0801afdd
 801af3c:	0801b00d 	.word	0x0801b00d
 801af40:	0801b00d 	.word	0x0801b00d
 801af44:	0801b00d 	.word	0x0801b00d
 801af48:	0801b00d 	.word	0x0801b00d
 801af4c:	0801b00d 	.word	0x0801b00d
 801af50:	0801b00d 	.word	0x0801b00d
 801af54:	0801b00d 	.word	0x0801b00d
 801af58:	0801afe5 	.word	0x0801afe5
 801af5c:	0801b00d 	.word	0x0801b00d
 801af60:	0801b00d 	.word	0x0801b00d
 801af64:	0801b00d 	.word	0x0801b00d
 801af68:	0801b00d 	.word	0x0801b00d
 801af6c:	0801b00d 	.word	0x0801b00d
 801af70:	0801b00d 	.word	0x0801b00d
 801af74:	0801b00d 	.word	0x0801b00d
 801af78:	0801afed 	.word	0x0801afed
 801af7c:	0801b00d 	.word	0x0801b00d
 801af80:	0801b00d 	.word	0x0801b00d
 801af84:	0801b00d 	.word	0x0801b00d
 801af88:	0801b00d 	.word	0x0801b00d
 801af8c:	0801b00d 	.word	0x0801b00d
 801af90:	0801b00d 	.word	0x0801b00d
 801af94:	0801b00d 	.word	0x0801b00d
 801af98:	0801aff5 	.word	0x0801aff5
 801af9c:	0801b00d 	.word	0x0801b00d
 801afa0:	0801b00d 	.word	0x0801b00d
 801afa4:	0801b00d 	.word	0x0801b00d
 801afa8:	0801b00d 	.word	0x0801b00d
 801afac:	0801b00d 	.word	0x0801b00d
 801afb0:	0801b00d 	.word	0x0801b00d
 801afb4:	0801b00d 	.word	0x0801b00d
 801afb8:	0801affd 	.word	0x0801affd
 801afbc:	0801b00d 	.word	0x0801b00d
 801afc0:	0801b00d 	.word	0x0801b00d
 801afc4:	0801b00d 	.word	0x0801b00d
 801afc8:	0801b00d 	.word	0x0801b00d
 801afcc:	0801b00d 	.word	0x0801b00d
 801afd0:	0801b00d 	.word	0x0801b00d
 801afd4:	0801b00d 	.word	0x0801b00d
 801afd8:	0801b005 	.word	0x0801b005
 801afdc:	2301      	movs	r3, #1
 801afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801afe2:	e222      	b.n	801b42a <UART_SetConfig+0x5a6>
 801afe4:	2304      	movs	r3, #4
 801afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801afea:	e21e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801afec:	2308      	movs	r3, #8
 801afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801aff2:	e21a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801aff4:	2310      	movs	r3, #16
 801aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801affa:	e216      	b.n	801b42a <UART_SetConfig+0x5a6>
 801affc:	2320      	movs	r3, #32
 801affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b002:	e212      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b004:	2340      	movs	r3, #64	@ 0x40
 801b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b00a:	e20e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b00c:	2380      	movs	r3, #128	@ 0x80
 801b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b012:	e20a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b014:	697b      	ldr	r3, [r7, #20]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4a69      	ldr	r2, [pc, #420]	@ (801b1c0 <UART_SetConfig+0x33c>)
 801b01a:	4293      	cmp	r3, r2
 801b01c:	d130      	bne.n	801b080 <UART_SetConfig+0x1fc>
 801b01e:	4b67      	ldr	r3, [pc, #412]	@ (801b1bc <UART_SetConfig+0x338>)
 801b020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b022:	f003 0307 	and.w	r3, r3, #7
 801b026:	2b05      	cmp	r3, #5
 801b028:	d826      	bhi.n	801b078 <UART_SetConfig+0x1f4>
 801b02a:	a201      	add	r2, pc, #4	@ (adr r2, 801b030 <UART_SetConfig+0x1ac>)
 801b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b030:	0801b049 	.word	0x0801b049
 801b034:	0801b051 	.word	0x0801b051
 801b038:	0801b059 	.word	0x0801b059
 801b03c:	0801b061 	.word	0x0801b061
 801b040:	0801b069 	.word	0x0801b069
 801b044:	0801b071 	.word	0x0801b071
 801b048:	2300      	movs	r3, #0
 801b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b04e:	e1ec      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b050:	2304      	movs	r3, #4
 801b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b056:	e1e8      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b058:	2308      	movs	r3, #8
 801b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b05e:	e1e4      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b060:	2310      	movs	r3, #16
 801b062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b066:	e1e0      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b068:	2320      	movs	r3, #32
 801b06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b06e:	e1dc      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b070:	2340      	movs	r3, #64	@ 0x40
 801b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b076:	e1d8      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b078:	2380      	movs	r3, #128	@ 0x80
 801b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b07e:	e1d4      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4a4f      	ldr	r2, [pc, #316]	@ (801b1c4 <UART_SetConfig+0x340>)
 801b086:	4293      	cmp	r3, r2
 801b088:	d130      	bne.n	801b0ec <UART_SetConfig+0x268>
 801b08a:	4b4c      	ldr	r3, [pc, #304]	@ (801b1bc <UART_SetConfig+0x338>)
 801b08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b08e:	f003 0307 	and.w	r3, r3, #7
 801b092:	2b05      	cmp	r3, #5
 801b094:	d826      	bhi.n	801b0e4 <UART_SetConfig+0x260>
 801b096:	a201      	add	r2, pc, #4	@ (adr r2, 801b09c <UART_SetConfig+0x218>)
 801b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b09c:	0801b0b5 	.word	0x0801b0b5
 801b0a0:	0801b0bd 	.word	0x0801b0bd
 801b0a4:	0801b0c5 	.word	0x0801b0c5
 801b0a8:	0801b0cd 	.word	0x0801b0cd
 801b0ac:	0801b0d5 	.word	0x0801b0d5
 801b0b0:	0801b0dd 	.word	0x0801b0dd
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0ba:	e1b6      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0bc:	2304      	movs	r3, #4
 801b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0c2:	e1b2      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0c4:	2308      	movs	r3, #8
 801b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0ca:	e1ae      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0cc:	2310      	movs	r3, #16
 801b0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0d2:	e1aa      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0d4:	2320      	movs	r3, #32
 801b0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0da:	e1a6      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0dc:	2340      	movs	r3, #64	@ 0x40
 801b0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0e2:	e1a2      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0e4:	2380      	movs	r3, #128	@ 0x80
 801b0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b0ea:	e19e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	4a35      	ldr	r2, [pc, #212]	@ (801b1c8 <UART_SetConfig+0x344>)
 801b0f2:	4293      	cmp	r3, r2
 801b0f4:	d130      	bne.n	801b158 <UART_SetConfig+0x2d4>
 801b0f6:	4b31      	ldr	r3, [pc, #196]	@ (801b1bc <UART_SetConfig+0x338>)
 801b0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b0fa:	f003 0307 	and.w	r3, r3, #7
 801b0fe:	2b05      	cmp	r3, #5
 801b100:	d826      	bhi.n	801b150 <UART_SetConfig+0x2cc>
 801b102:	a201      	add	r2, pc, #4	@ (adr r2, 801b108 <UART_SetConfig+0x284>)
 801b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b108:	0801b121 	.word	0x0801b121
 801b10c:	0801b129 	.word	0x0801b129
 801b110:	0801b131 	.word	0x0801b131
 801b114:	0801b139 	.word	0x0801b139
 801b118:	0801b141 	.word	0x0801b141
 801b11c:	0801b149 	.word	0x0801b149
 801b120:	2300      	movs	r3, #0
 801b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b126:	e180      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b128:	2304      	movs	r3, #4
 801b12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b12e:	e17c      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b130:	2308      	movs	r3, #8
 801b132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b136:	e178      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b138:	2310      	movs	r3, #16
 801b13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b13e:	e174      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b140:	2320      	movs	r3, #32
 801b142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b146:	e170      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b148:	2340      	movs	r3, #64	@ 0x40
 801b14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b14e:	e16c      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b150:	2380      	movs	r3, #128	@ 0x80
 801b152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b156:	e168      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	4a1b      	ldr	r2, [pc, #108]	@ (801b1cc <UART_SetConfig+0x348>)
 801b15e:	4293      	cmp	r3, r2
 801b160:	d142      	bne.n	801b1e8 <UART_SetConfig+0x364>
 801b162:	4b16      	ldr	r3, [pc, #88]	@ (801b1bc <UART_SetConfig+0x338>)
 801b164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b166:	f003 0307 	and.w	r3, r3, #7
 801b16a:	2b05      	cmp	r3, #5
 801b16c:	d838      	bhi.n	801b1e0 <UART_SetConfig+0x35c>
 801b16e:	a201      	add	r2, pc, #4	@ (adr r2, 801b174 <UART_SetConfig+0x2f0>)
 801b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b174:	0801b18d 	.word	0x0801b18d
 801b178:	0801b195 	.word	0x0801b195
 801b17c:	0801b19d 	.word	0x0801b19d
 801b180:	0801b1a5 	.word	0x0801b1a5
 801b184:	0801b1d1 	.word	0x0801b1d1
 801b188:	0801b1d9 	.word	0x0801b1d9
 801b18c:	2300      	movs	r3, #0
 801b18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b192:	e14a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b194:	2304      	movs	r3, #4
 801b196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b19a:	e146      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b19c:	2308      	movs	r3, #8
 801b19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b1a2:	e142      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b1a4:	2310      	movs	r3, #16
 801b1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b1aa:	e13e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b1ac:	cfff69f3 	.word	0xcfff69f3
 801b1b0:	58000c00 	.word	0x58000c00
 801b1b4:	11fff4ff 	.word	0x11fff4ff
 801b1b8:	40011000 	.word	0x40011000
 801b1bc:	58024400 	.word	0x58024400
 801b1c0:	40004400 	.word	0x40004400
 801b1c4:	40004800 	.word	0x40004800
 801b1c8:	40004c00 	.word	0x40004c00
 801b1cc:	40005000 	.word	0x40005000
 801b1d0:	2320      	movs	r3, #32
 801b1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b1d6:	e128      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b1d8:	2340      	movs	r3, #64	@ 0x40
 801b1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b1de:	e124      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b1e0:	2380      	movs	r3, #128	@ 0x80
 801b1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b1e6:	e120      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	4acb      	ldr	r2, [pc, #812]	@ (801b51c <UART_SetConfig+0x698>)
 801b1ee:	4293      	cmp	r3, r2
 801b1f0:	d176      	bne.n	801b2e0 <UART_SetConfig+0x45c>
 801b1f2:	4bcb      	ldr	r3, [pc, #812]	@ (801b520 <UART_SetConfig+0x69c>)
 801b1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b1f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b1fa:	2b28      	cmp	r3, #40	@ 0x28
 801b1fc:	d86c      	bhi.n	801b2d8 <UART_SetConfig+0x454>
 801b1fe:	a201      	add	r2, pc, #4	@ (adr r2, 801b204 <UART_SetConfig+0x380>)
 801b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b204:	0801b2a9 	.word	0x0801b2a9
 801b208:	0801b2d9 	.word	0x0801b2d9
 801b20c:	0801b2d9 	.word	0x0801b2d9
 801b210:	0801b2d9 	.word	0x0801b2d9
 801b214:	0801b2d9 	.word	0x0801b2d9
 801b218:	0801b2d9 	.word	0x0801b2d9
 801b21c:	0801b2d9 	.word	0x0801b2d9
 801b220:	0801b2d9 	.word	0x0801b2d9
 801b224:	0801b2b1 	.word	0x0801b2b1
 801b228:	0801b2d9 	.word	0x0801b2d9
 801b22c:	0801b2d9 	.word	0x0801b2d9
 801b230:	0801b2d9 	.word	0x0801b2d9
 801b234:	0801b2d9 	.word	0x0801b2d9
 801b238:	0801b2d9 	.word	0x0801b2d9
 801b23c:	0801b2d9 	.word	0x0801b2d9
 801b240:	0801b2d9 	.word	0x0801b2d9
 801b244:	0801b2b9 	.word	0x0801b2b9
 801b248:	0801b2d9 	.word	0x0801b2d9
 801b24c:	0801b2d9 	.word	0x0801b2d9
 801b250:	0801b2d9 	.word	0x0801b2d9
 801b254:	0801b2d9 	.word	0x0801b2d9
 801b258:	0801b2d9 	.word	0x0801b2d9
 801b25c:	0801b2d9 	.word	0x0801b2d9
 801b260:	0801b2d9 	.word	0x0801b2d9
 801b264:	0801b2c1 	.word	0x0801b2c1
 801b268:	0801b2d9 	.word	0x0801b2d9
 801b26c:	0801b2d9 	.word	0x0801b2d9
 801b270:	0801b2d9 	.word	0x0801b2d9
 801b274:	0801b2d9 	.word	0x0801b2d9
 801b278:	0801b2d9 	.word	0x0801b2d9
 801b27c:	0801b2d9 	.word	0x0801b2d9
 801b280:	0801b2d9 	.word	0x0801b2d9
 801b284:	0801b2c9 	.word	0x0801b2c9
 801b288:	0801b2d9 	.word	0x0801b2d9
 801b28c:	0801b2d9 	.word	0x0801b2d9
 801b290:	0801b2d9 	.word	0x0801b2d9
 801b294:	0801b2d9 	.word	0x0801b2d9
 801b298:	0801b2d9 	.word	0x0801b2d9
 801b29c:	0801b2d9 	.word	0x0801b2d9
 801b2a0:	0801b2d9 	.word	0x0801b2d9
 801b2a4:	0801b2d1 	.word	0x0801b2d1
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2ae:	e0bc      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2b0:	2304      	movs	r3, #4
 801b2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2b6:	e0b8      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2b8:	2308      	movs	r3, #8
 801b2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2be:	e0b4      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2c0:	2310      	movs	r3, #16
 801b2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2c6:	e0b0      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2c8:	2320      	movs	r3, #32
 801b2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2ce:	e0ac      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2d0:	2340      	movs	r3, #64	@ 0x40
 801b2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2d6:	e0a8      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2d8:	2380      	movs	r3, #128	@ 0x80
 801b2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b2de:	e0a4      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	4a8f      	ldr	r2, [pc, #572]	@ (801b524 <UART_SetConfig+0x6a0>)
 801b2e6:	4293      	cmp	r3, r2
 801b2e8:	d130      	bne.n	801b34c <UART_SetConfig+0x4c8>
 801b2ea:	4b8d      	ldr	r3, [pc, #564]	@ (801b520 <UART_SetConfig+0x69c>)
 801b2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b2ee:	f003 0307 	and.w	r3, r3, #7
 801b2f2:	2b05      	cmp	r3, #5
 801b2f4:	d826      	bhi.n	801b344 <UART_SetConfig+0x4c0>
 801b2f6:	a201      	add	r2, pc, #4	@ (adr r2, 801b2fc <UART_SetConfig+0x478>)
 801b2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2fc:	0801b315 	.word	0x0801b315
 801b300:	0801b31d 	.word	0x0801b31d
 801b304:	0801b325 	.word	0x0801b325
 801b308:	0801b32d 	.word	0x0801b32d
 801b30c:	0801b335 	.word	0x0801b335
 801b310:	0801b33d 	.word	0x0801b33d
 801b314:	2300      	movs	r3, #0
 801b316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b31a:	e086      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b31c:	2304      	movs	r3, #4
 801b31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b322:	e082      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b324:	2308      	movs	r3, #8
 801b326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b32a:	e07e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b32c:	2310      	movs	r3, #16
 801b32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b332:	e07a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b334:	2320      	movs	r3, #32
 801b336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b33a:	e076      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b33c:	2340      	movs	r3, #64	@ 0x40
 801b33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b342:	e072      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b344:	2380      	movs	r3, #128	@ 0x80
 801b346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b34a:	e06e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a75      	ldr	r2, [pc, #468]	@ (801b528 <UART_SetConfig+0x6a4>)
 801b352:	4293      	cmp	r3, r2
 801b354:	d130      	bne.n	801b3b8 <UART_SetConfig+0x534>
 801b356:	4b72      	ldr	r3, [pc, #456]	@ (801b520 <UART_SetConfig+0x69c>)
 801b358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b35a:	f003 0307 	and.w	r3, r3, #7
 801b35e:	2b05      	cmp	r3, #5
 801b360:	d826      	bhi.n	801b3b0 <UART_SetConfig+0x52c>
 801b362:	a201      	add	r2, pc, #4	@ (adr r2, 801b368 <UART_SetConfig+0x4e4>)
 801b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b368:	0801b381 	.word	0x0801b381
 801b36c:	0801b389 	.word	0x0801b389
 801b370:	0801b391 	.word	0x0801b391
 801b374:	0801b399 	.word	0x0801b399
 801b378:	0801b3a1 	.word	0x0801b3a1
 801b37c:	0801b3a9 	.word	0x0801b3a9
 801b380:	2300      	movs	r3, #0
 801b382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b386:	e050      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b388:	2304      	movs	r3, #4
 801b38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b38e:	e04c      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b390:	2308      	movs	r3, #8
 801b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b396:	e048      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b398:	2310      	movs	r3, #16
 801b39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b39e:	e044      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3a0:	2320      	movs	r3, #32
 801b3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b3a6:	e040      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3a8:	2340      	movs	r3, #64	@ 0x40
 801b3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b3ae:	e03c      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3b0:	2380      	movs	r3, #128	@ 0x80
 801b3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b3b6:	e038      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	4a5b      	ldr	r2, [pc, #364]	@ (801b52c <UART_SetConfig+0x6a8>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d130      	bne.n	801b424 <UART_SetConfig+0x5a0>
 801b3c2:	4b57      	ldr	r3, [pc, #348]	@ (801b520 <UART_SetConfig+0x69c>)
 801b3c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b3c6:	f003 0307 	and.w	r3, r3, #7
 801b3ca:	2b05      	cmp	r3, #5
 801b3cc:	d826      	bhi.n	801b41c <UART_SetConfig+0x598>
 801b3ce:	a201      	add	r2, pc, #4	@ (adr r2, 801b3d4 <UART_SetConfig+0x550>)
 801b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3d4:	0801b3ed 	.word	0x0801b3ed
 801b3d8:	0801b3f5 	.word	0x0801b3f5
 801b3dc:	0801b3fd 	.word	0x0801b3fd
 801b3e0:	0801b405 	.word	0x0801b405
 801b3e4:	0801b40d 	.word	0x0801b40d
 801b3e8:	0801b415 	.word	0x0801b415
 801b3ec:	2302      	movs	r3, #2
 801b3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b3f2:	e01a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3f4:	2304      	movs	r3, #4
 801b3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b3fa:	e016      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b3fc:	2308      	movs	r3, #8
 801b3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b402:	e012      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b404:	2310      	movs	r3, #16
 801b406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b40a:	e00e      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b40c:	2320      	movs	r3, #32
 801b40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b412:	e00a      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b414:	2340      	movs	r3, #64	@ 0x40
 801b416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b41a:	e006      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b41c:	2380      	movs	r3, #128	@ 0x80
 801b41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801b422:	e002      	b.n	801b42a <UART_SetConfig+0x5a6>
 801b424:	2380      	movs	r3, #128	@ 0x80
 801b426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b42a:	697b      	ldr	r3, [r7, #20]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	4a3f      	ldr	r2, [pc, #252]	@ (801b52c <UART_SetConfig+0x6a8>)
 801b430:	4293      	cmp	r3, r2
 801b432:	f040 80f8 	bne.w	801b626 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b436:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801b43a:	2b20      	cmp	r3, #32
 801b43c:	dc46      	bgt.n	801b4cc <UART_SetConfig+0x648>
 801b43e:	2b02      	cmp	r3, #2
 801b440:	f2c0 8082 	blt.w	801b548 <UART_SetConfig+0x6c4>
 801b444:	3b02      	subs	r3, #2
 801b446:	2b1e      	cmp	r3, #30
 801b448:	d87e      	bhi.n	801b548 <UART_SetConfig+0x6c4>
 801b44a:	a201      	add	r2, pc, #4	@ (adr r2, 801b450 <UART_SetConfig+0x5cc>)
 801b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b450:	0801b4d3 	.word	0x0801b4d3
 801b454:	0801b549 	.word	0x0801b549
 801b458:	0801b4db 	.word	0x0801b4db
 801b45c:	0801b549 	.word	0x0801b549
 801b460:	0801b549 	.word	0x0801b549
 801b464:	0801b549 	.word	0x0801b549
 801b468:	0801b4eb 	.word	0x0801b4eb
 801b46c:	0801b549 	.word	0x0801b549
 801b470:	0801b549 	.word	0x0801b549
 801b474:	0801b549 	.word	0x0801b549
 801b478:	0801b549 	.word	0x0801b549
 801b47c:	0801b549 	.word	0x0801b549
 801b480:	0801b549 	.word	0x0801b549
 801b484:	0801b549 	.word	0x0801b549
 801b488:	0801b4fb 	.word	0x0801b4fb
 801b48c:	0801b549 	.word	0x0801b549
 801b490:	0801b549 	.word	0x0801b549
 801b494:	0801b549 	.word	0x0801b549
 801b498:	0801b549 	.word	0x0801b549
 801b49c:	0801b549 	.word	0x0801b549
 801b4a0:	0801b549 	.word	0x0801b549
 801b4a4:	0801b549 	.word	0x0801b549
 801b4a8:	0801b549 	.word	0x0801b549
 801b4ac:	0801b549 	.word	0x0801b549
 801b4b0:	0801b549 	.word	0x0801b549
 801b4b4:	0801b549 	.word	0x0801b549
 801b4b8:	0801b549 	.word	0x0801b549
 801b4bc:	0801b549 	.word	0x0801b549
 801b4c0:	0801b549 	.word	0x0801b549
 801b4c4:	0801b549 	.word	0x0801b549
 801b4c8:	0801b53b 	.word	0x0801b53b
 801b4cc:	2b40      	cmp	r3, #64	@ 0x40
 801b4ce:	d037      	beq.n	801b540 <UART_SetConfig+0x6bc>
 801b4d0:	e03a      	b.n	801b548 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801b4d2:	f7fd f8d7 	bl	8018684 <HAL_RCCEx_GetD3PCLK1Freq>
 801b4d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801b4d8:	e03c      	b.n	801b554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f7fd f8e6 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801b4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b4e8:	e034      	b.n	801b554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b4ea:	f107 0318 	add.w	r3, r7, #24
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f7fd fa32 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801b4f4:	69fb      	ldr	r3, [r7, #28]
 801b4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b4f8:	e02c      	b.n	801b554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b4fa:	4b09      	ldr	r3, [pc, #36]	@ (801b520 <UART_SetConfig+0x69c>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	f003 0320 	and.w	r3, r3, #32
 801b502:	2b00      	cmp	r3, #0
 801b504:	d016      	beq.n	801b534 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801b506:	4b06      	ldr	r3, [pc, #24]	@ (801b520 <UART_SetConfig+0x69c>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	08db      	lsrs	r3, r3, #3
 801b50c:	f003 0303 	and.w	r3, r3, #3
 801b510:	4a07      	ldr	r2, [pc, #28]	@ (801b530 <UART_SetConfig+0x6ac>)
 801b512:	fa22 f303 	lsr.w	r3, r2, r3
 801b516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b518:	e01c      	b.n	801b554 <UART_SetConfig+0x6d0>
 801b51a:	bf00      	nop
 801b51c:	40011400 	.word	0x40011400
 801b520:	58024400 	.word	0x58024400
 801b524:	40007800 	.word	0x40007800
 801b528:	40007c00 	.word	0x40007c00
 801b52c:	58000c00 	.word	0x58000c00
 801b530:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801b534:	4b9d      	ldr	r3, [pc, #628]	@ (801b7ac <UART_SetConfig+0x928>)
 801b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b538:	e00c      	b.n	801b554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801b53a:	4b9d      	ldr	r3, [pc, #628]	@ (801b7b0 <UART_SetConfig+0x92c>)
 801b53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b53e:	e009      	b.n	801b554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b546:	e005      	b.n	801b554 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801b548:	2300      	movs	r3, #0
 801b54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801b54c:	2301      	movs	r3, #1
 801b54e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801b552:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b556:	2b00      	cmp	r3, #0
 801b558:	f000 81de 	beq.w	801b918 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b560:	4a94      	ldr	r2, [pc, #592]	@ (801b7b4 <UART_SetConfig+0x930>)
 801b562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b566:	461a      	mov	r2, r3
 801b568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b56a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b56e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801b570:	697b      	ldr	r3, [r7, #20]
 801b572:	685a      	ldr	r2, [r3, #4]
 801b574:	4613      	mov	r3, r2
 801b576:	005b      	lsls	r3, r3, #1
 801b578:	4413      	add	r3, r2
 801b57a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d305      	bcc.n	801b58c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801b580:	697b      	ldr	r3, [r7, #20]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801b586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b588:	429a      	cmp	r2, r3
 801b58a:	d903      	bls.n	801b594 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801b58c:	2301      	movs	r3, #1
 801b58e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801b592:	e1c1      	b.n	801b918 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b596:	2200      	movs	r2, #0
 801b598:	60bb      	str	r3, [r7, #8]
 801b59a:	60fa      	str	r2, [r7, #12]
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5a0:	4a84      	ldr	r2, [pc, #528]	@ (801b7b4 <UART_SetConfig+0x930>)
 801b5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	603b      	str	r3, [r7, #0]
 801b5ac:	607a      	str	r2, [r7, #4]
 801b5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b5b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b5b6:	f7e5 f9c5 	bl	8000944 <__aeabi_uldivmod>
 801b5ba:	4602      	mov	r2, r0
 801b5bc:	460b      	mov	r3, r1
 801b5be:	4610      	mov	r0, r2
 801b5c0:	4619      	mov	r1, r3
 801b5c2:	f04f 0200 	mov.w	r2, #0
 801b5c6:	f04f 0300 	mov.w	r3, #0
 801b5ca:	020b      	lsls	r3, r1, #8
 801b5cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801b5d0:	0202      	lsls	r2, r0, #8
 801b5d2:	6979      	ldr	r1, [r7, #20]
 801b5d4:	6849      	ldr	r1, [r1, #4]
 801b5d6:	0849      	lsrs	r1, r1, #1
 801b5d8:	2000      	movs	r0, #0
 801b5da:	460c      	mov	r4, r1
 801b5dc:	4605      	mov	r5, r0
 801b5de:	eb12 0804 	adds.w	r8, r2, r4
 801b5e2:	eb43 0905 	adc.w	r9, r3, r5
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	469a      	mov	sl, r3
 801b5ee:	4693      	mov	fp, r2
 801b5f0:	4652      	mov	r2, sl
 801b5f2:	465b      	mov	r3, fp
 801b5f4:	4640      	mov	r0, r8
 801b5f6:	4649      	mov	r1, r9
 801b5f8:	f7e5 f9a4 	bl	8000944 <__aeabi_uldivmod>
 801b5fc:	4602      	mov	r2, r0
 801b5fe:	460b      	mov	r3, r1
 801b600:	4613      	mov	r3, r2
 801b602:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b60a:	d308      	bcc.n	801b61e <UART_SetConfig+0x79a>
 801b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b60e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b612:	d204      	bcs.n	801b61e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b61a:	60da      	str	r2, [r3, #12]
 801b61c:	e17c      	b.n	801b918 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801b61e:	2301      	movs	r3, #1
 801b620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801b624:	e178      	b.n	801b918 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b626:	697b      	ldr	r3, [r7, #20]
 801b628:	69db      	ldr	r3, [r3, #28]
 801b62a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b62e:	f040 80c5 	bne.w	801b7bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801b632:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801b636:	2b20      	cmp	r3, #32
 801b638:	dc48      	bgt.n	801b6cc <UART_SetConfig+0x848>
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	db7b      	blt.n	801b736 <UART_SetConfig+0x8b2>
 801b63e:	2b20      	cmp	r3, #32
 801b640:	d879      	bhi.n	801b736 <UART_SetConfig+0x8b2>
 801b642:	a201      	add	r2, pc, #4	@ (adr r2, 801b648 <UART_SetConfig+0x7c4>)
 801b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b648:	0801b6d3 	.word	0x0801b6d3
 801b64c:	0801b6db 	.word	0x0801b6db
 801b650:	0801b737 	.word	0x0801b737
 801b654:	0801b737 	.word	0x0801b737
 801b658:	0801b6e3 	.word	0x0801b6e3
 801b65c:	0801b737 	.word	0x0801b737
 801b660:	0801b737 	.word	0x0801b737
 801b664:	0801b737 	.word	0x0801b737
 801b668:	0801b6f3 	.word	0x0801b6f3
 801b66c:	0801b737 	.word	0x0801b737
 801b670:	0801b737 	.word	0x0801b737
 801b674:	0801b737 	.word	0x0801b737
 801b678:	0801b737 	.word	0x0801b737
 801b67c:	0801b737 	.word	0x0801b737
 801b680:	0801b737 	.word	0x0801b737
 801b684:	0801b737 	.word	0x0801b737
 801b688:	0801b703 	.word	0x0801b703
 801b68c:	0801b737 	.word	0x0801b737
 801b690:	0801b737 	.word	0x0801b737
 801b694:	0801b737 	.word	0x0801b737
 801b698:	0801b737 	.word	0x0801b737
 801b69c:	0801b737 	.word	0x0801b737
 801b6a0:	0801b737 	.word	0x0801b737
 801b6a4:	0801b737 	.word	0x0801b737
 801b6a8:	0801b737 	.word	0x0801b737
 801b6ac:	0801b737 	.word	0x0801b737
 801b6b0:	0801b737 	.word	0x0801b737
 801b6b4:	0801b737 	.word	0x0801b737
 801b6b8:	0801b737 	.word	0x0801b737
 801b6bc:	0801b737 	.word	0x0801b737
 801b6c0:	0801b737 	.word	0x0801b737
 801b6c4:	0801b737 	.word	0x0801b737
 801b6c8:	0801b729 	.word	0x0801b729
 801b6cc:	2b40      	cmp	r3, #64	@ 0x40
 801b6ce:	d02e      	beq.n	801b72e <UART_SetConfig+0x8aa>
 801b6d0:	e031      	b.n	801b736 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b6d2:	f7fb f821 	bl	8016718 <HAL_RCC_GetPCLK1Freq>
 801b6d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801b6d8:	e033      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b6da:	f7fb f833 	bl	8016744 <HAL_RCC_GetPCLK2Freq>
 801b6de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801b6e0:	e02f      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b6e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7fc ffe2 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801b6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b6f0:	e027      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b6f2:	f107 0318 	add.w	r3, r7, #24
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f7fd f92e 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801b6fc:	69fb      	ldr	r3, [r7, #28]
 801b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b700:	e01f      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b702:	4b2d      	ldr	r3, [pc, #180]	@ (801b7b8 <UART_SetConfig+0x934>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f003 0320 	and.w	r3, r3, #32
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d009      	beq.n	801b722 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801b70e:	4b2a      	ldr	r3, [pc, #168]	@ (801b7b8 <UART_SetConfig+0x934>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	08db      	lsrs	r3, r3, #3
 801b714:	f003 0303 	and.w	r3, r3, #3
 801b718:	4a24      	ldr	r2, [pc, #144]	@ (801b7ac <UART_SetConfig+0x928>)
 801b71a:	fa22 f303 	lsr.w	r3, r2, r3
 801b71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b720:	e00f      	b.n	801b742 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801b722:	4b22      	ldr	r3, [pc, #136]	@ (801b7ac <UART_SetConfig+0x928>)
 801b724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b726:	e00c      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801b728:	4b21      	ldr	r3, [pc, #132]	@ (801b7b0 <UART_SetConfig+0x92c>)
 801b72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b72c:	e009      	b.n	801b742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b72e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b734:	e005      	b.n	801b742 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801b736:	2300      	movs	r3, #0
 801b738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801b73a:	2301      	movs	r3, #1
 801b73c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801b740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b744:	2b00      	cmp	r3, #0
 801b746:	f000 80e7 	beq.w	801b918 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b74e:	4a19      	ldr	r2, [pc, #100]	@ (801b7b4 <UART_SetConfig+0x930>)
 801b750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b754:	461a      	mov	r2, r3
 801b756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b758:	fbb3 f3f2 	udiv	r3, r3, r2
 801b75c:	005a      	lsls	r2, r3, #1
 801b75e:	697b      	ldr	r3, [r7, #20]
 801b760:	685b      	ldr	r3, [r3, #4]
 801b762:	085b      	lsrs	r3, r3, #1
 801b764:	441a      	add	r2, r3
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b76e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b772:	2b0f      	cmp	r3, #15
 801b774:	d916      	bls.n	801b7a4 <UART_SetConfig+0x920>
 801b776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b77c:	d212      	bcs.n	801b7a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b780:	b29b      	uxth	r3, r3
 801b782:	f023 030f 	bic.w	r3, r3, #15
 801b786:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b78a:	085b      	lsrs	r3, r3, #1
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	f003 0307 	and.w	r3, r3, #7
 801b792:	b29a      	uxth	r2, r3
 801b794:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801b796:	4313      	orrs	r3, r2
 801b798:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801b79a:	697b      	ldr	r3, [r7, #20]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801b7a0:	60da      	str	r2, [r3, #12]
 801b7a2:	e0b9      	b.n	801b918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801b7a4:	2301      	movs	r3, #1
 801b7a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801b7aa:	e0b5      	b.n	801b918 <UART_SetConfig+0xa94>
 801b7ac:	03d09000 	.word	0x03d09000
 801b7b0:	003d0900 	.word	0x003d0900
 801b7b4:	08021a14 	.word	0x08021a14
 801b7b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801b7bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801b7c0:	2b20      	cmp	r3, #32
 801b7c2:	dc49      	bgt.n	801b858 <UART_SetConfig+0x9d4>
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	db7c      	blt.n	801b8c2 <UART_SetConfig+0xa3e>
 801b7c8:	2b20      	cmp	r3, #32
 801b7ca:	d87a      	bhi.n	801b8c2 <UART_SetConfig+0xa3e>
 801b7cc:	a201      	add	r2, pc, #4	@ (adr r2, 801b7d4 <UART_SetConfig+0x950>)
 801b7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7d2:	bf00      	nop
 801b7d4:	0801b85f 	.word	0x0801b85f
 801b7d8:	0801b867 	.word	0x0801b867
 801b7dc:	0801b8c3 	.word	0x0801b8c3
 801b7e0:	0801b8c3 	.word	0x0801b8c3
 801b7e4:	0801b86f 	.word	0x0801b86f
 801b7e8:	0801b8c3 	.word	0x0801b8c3
 801b7ec:	0801b8c3 	.word	0x0801b8c3
 801b7f0:	0801b8c3 	.word	0x0801b8c3
 801b7f4:	0801b87f 	.word	0x0801b87f
 801b7f8:	0801b8c3 	.word	0x0801b8c3
 801b7fc:	0801b8c3 	.word	0x0801b8c3
 801b800:	0801b8c3 	.word	0x0801b8c3
 801b804:	0801b8c3 	.word	0x0801b8c3
 801b808:	0801b8c3 	.word	0x0801b8c3
 801b80c:	0801b8c3 	.word	0x0801b8c3
 801b810:	0801b8c3 	.word	0x0801b8c3
 801b814:	0801b88f 	.word	0x0801b88f
 801b818:	0801b8c3 	.word	0x0801b8c3
 801b81c:	0801b8c3 	.word	0x0801b8c3
 801b820:	0801b8c3 	.word	0x0801b8c3
 801b824:	0801b8c3 	.word	0x0801b8c3
 801b828:	0801b8c3 	.word	0x0801b8c3
 801b82c:	0801b8c3 	.word	0x0801b8c3
 801b830:	0801b8c3 	.word	0x0801b8c3
 801b834:	0801b8c3 	.word	0x0801b8c3
 801b838:	0801b8c3 	.word	0x0801b8c3
 801b83c:	0801b8c3 	.word	0x0801b8c3
 801b840:	0801b8c3 	.word	0x0801b8c3
 801b844:	0801b8c3 	.word	0x0801b8c3
 801b848:	0801b8c3 	.word	0x0801b8c3
 801b84c:	0801b8c3 	.word	0x0801b8c3
 801b850:	0801b8c3 	.word	0x0801b8c3
 801b854:	0801b8b5 	.word	0x0801b8b5
 801b858:	2b40      	cmp	r3, #64	@ 0x40
 801b85a:	d02e      	beq.n	801b8ba <UART_SetConfig+0xa36>
 801b85c:	e031      	b.n	801b8c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b85e:	f7fa ff5b 	bl	8016718 <HAL_RCC_GetPCLK1Freq>
 801b862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801b864:	e033      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b866:	f7fa ff6d 	bl	8016744 <HAL_RCC_GetPCLK2Freq>
 801b86a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801b86c:	e02f      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b86e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b872:	4618      	mov	r0, r3
 801b874:	f7fc ff1c 	bl	80186b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801b878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b87c:	e027      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b87e:	f107 0318 	add.w	r3, r7, #24
 801b882:	4618      	mov	r0, r3
 801b884:	f7fd f868 	bl	8018958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801b888:	69fb      	ldr	r3, [r7, #28]
 801b88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b88c:	e01f      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b88e:	4b2d      	ldr	r3, [pc, #180]	@ (801b944 <UART_SetConfig+0xac0>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f003 0320 	and.w	r3, r3, #32
 801b896:	2b00      	cmp	r3, #0
 801b898:	d009      	beq.n	801b8ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801b89a:	4b2a      	ldr	r3, [pc, #168]	@ (801b944 <UART_SetConfig+0xac0>)
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	08db      	lsrs	r3, r3, #3
 801b8a0:	f003 0303 	and.w	r3, r3, #3
 801b8a4:	4a28      	ldr	r2, [pc, #160]	@ (801b948 <UART_SetConfig+0xac4>)
 801b8a6:	fa22 f303 	lsr.w	r3, r2, r3
 801b8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b8ac:	e00f      	b.n	801b8ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801b8ae:	4b26      	ldr	r3, [pc, #152]	@ (801b948 <UART_SetConfig+0xac4>)
 801b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b8b2:	e00c      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801b8b4:	4b25      	ldr	r3, [pc, #148]	@ (801b94c <UART_SetConfig+0xac8>)
 801b8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b8b8:	e009      	b.n	801b8ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b8ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801b8c0:	e005      	b.n	801b8ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801b8cc:	bf00      	nop
    }

    if (pclk != 0U)
 801b8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d021      	beq.n	801b918 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8d8:	4a1d      	ldr	r2, [pc, #116]	@ (801b950 <UART_SetConfig+0xacc>)
 801b8da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b8de:	461a      	mov	r2, r3
 801b8e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8e2:	fbb3 f2f2 	udiv	r2, r3, r2
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	685b      	ldr	r3, [r3, #4]
 801b8ea:	085b      	lsrs	r3, r3, #1
 801b8ec:	441a      	add	r2, r3
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	685b      	ldr	r3, [r3, #4]
 801b8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8fa:	2b0f      	cmp	r3, #15
 801b8fc:	d909      	bls.n	801b912 <UART_SetConfig+0xa8e>
 801b8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b904:	d205      	bcs.n	801b912 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b908:	b29a      	uxth	r2, r3
 801b90a:	697b      	ldr	r3, [r7, #20]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	60da      	str	r2, [r3, #12]
 801b910:	e002      	b.n	801b918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801b912:	2301      	movs	r3, #1
 801b914:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	2201      	movs	r2, #1
 801b91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801b920:	697b      	ldr	r3, [r7, #20]
 801b922:	2201      	movs	r2, #1
 801b924:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	2200      	movs	r2, #0
 801b92c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	2200      	movs	r2, #0
 801b932:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801b934:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801b938:	4618      	mov	r0, r3
 801b93a:	3748      	adds	r7, #72	@ 0x48
 801b93c:	46bd      	mov	sp, r7
 801b93e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b942:	bf00      	nop
 801b944:	58024400 	.word	0x58024400
 801b948:	03d09000 	.word	0x03d09000
 801b94c:	003d0900 	.word	0x003d0900
 801b950:	08021a14 	.word	0x08021a14

0801b954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b954:	b480      	push	{r7}
 801b956:	b083      	sub	sp, #12
 801b958:	af00      	add	r7, sp, #0
 801b95a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b960:	f003 0308 	and.w	r3, r3, #8
 801b964:	2b00      	cmp	r3, #0
 801b966:	d00a      	beq.n	801b97e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	685b      	ldr	r3, [r3, #4]
 801b96e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	430a      	orrs	r2, r1
 801b97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b982:	f003 0301 	and.w	r3, r3, #1
 801b986:	2b00      	cmp	r3, #0
 801b988:	d00a      	beq.n	801b9a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	685b      	ldr	r3, [r3, #4]
 801b990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	430a      	orrs	r2, r1
 801b99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9a4:	f003 0302 	and.w	r3, r3, #2
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d00a      	beq.n	801b9c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	685b      	ldr	r3, [r3, #4]
 801b9b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	430a      	orrs	r2, r1
 801b9c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9c6:	f003 0304 	and.w	r3, r3, #4
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d00a      	beq.n	801b9e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	685b      	ldr	r3, [r3, #4]
 801b9d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	430a      	orrs	r2, r1
 801b9e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9e8:	f003 0310 	and.w	r3, r3, #16
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d00a      	beq.n	801ba06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	689b      	ldr	r3, [r3, #8]
 801b9f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	430a      	orrs	r2, r1
 801ba04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba0a:	f003 0320 	and.w	r3, r3, #32
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d00a      	beq.n	801ba28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	689b      	ldr	r3, [r3, #8]
 801ba18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	430a      	orrs	r2, r1
 801ba26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d01a      	beq.n	801ba6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	685b      	ldr	r3, [r3, #4]
 801ba3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	430a      	orrs	r2, r1
 801ba48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ba4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ba52:	d10a      	bne.n	801ba6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	430a      	orrs	r2, r1
 801ba68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d00a      	beq.n	801ba8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	685b      	ldr	r3, [r3, #4]
 801ba7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	430a      	orrs	r2, r1
 801ba8a:	605a      	str	r2, [r3, #4]
  }
}
 801ba8c:	bf00      	nop
 801ba8e:	370c      	adds	r7, #12
 801ba90:	46bd      	mov	sp, r7
 801ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba96:	4770      	bx	lr

0801ba98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b098      	sub	sp, #96	@ 0x60
 801ba9c:	af02      	add	r7, sp, #8
 801ba9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	2200      	movs	r2, #0
 801baa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801baa8:	f7f6 ff42 	bl	8012930 <HAL_GetTick>
 801baac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	f003 0308 	and.w	r3, r3, #8
 801bab8:	2b08      	cmp	r3, #8
 801baba:	d12f      	bne.n	801bb1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801babc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801bac0:	9300      	str	r3, [sp, #0]
 801bac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bac4:	2200      	movs	r2, #0
 801bac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801baca:	6878      	ldr	r0, [r7, #4]
 801bacc:	f000 f88e 	bl	801bbec <UART_WaitOnFlagUntilTimeout>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d022      	beq.n	801bb1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bade:	e853 3f00 	ldrex	r3, [r3]
 801bae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801bae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801baea:	653b      	str	r3, [r7, #80]	@ 0x50
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	461a      	mov	r2, r3
 801baf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801baf4:	647b      	str	r3, [r7, #68]	@ 0x44
 801baf6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801baf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801bafa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bafc:	e841 2300 	strex	r3, r2, [r1]
 801bb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801bb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d1e6      	bne.n	801bad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	2220      	movs	r2, #32
 801bb0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	2200      	movs	r2, #0
 801bb14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bb18:	2303      	movs	r3, #3
 801bb1a:	e063      	b.n	801bbe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	f003 0304 	and.w	r3, r3, #4
 801bb26:	2b04      	cmp	r3, #4
 801bb28:	d149      	bne.n	801bbbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bb2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801bb2e:	9300      	str	r3, [sp, #0]
 801bb30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb32:	2200      	movs	r2, #0
 801bb34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801bb38:	6878      	ldr	r0, [r7, #4]
 801bb3a:	f000 f857 	bl	801bbec <UART_WaitOnFlagUntilTimeout>
 801bb3e:	4603      	mov	r3, r0
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d03c      	beq.n	801bbbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb4c:	e853 3f00 	ldrex	r3, [r3]
 801bb50:	623b      	str	r3, [r7, #32]
   return(result);
 801bb52:	6a3b      	ldr	r3, [r7, #32]
 801bb54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bb58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	461a      	mov	r2, r3
 801bb60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb62:	633b      	str	r3, [r7, #48]	@ 0x30
 801bb64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bb68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb6a:	e841 2300 	strex	r3, r2, [r1]
 801bb6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801bb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d1e6      	bne.n	801bb44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	3308      	adds	r3, #8
 801bb7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb7e:	693b      	ldr	r3, [r7, #16]
 801bb80:	e853 3f00 	ldrex	r3, [r3]
 801bb84:	60fb      	str	r3, [r7, #12]
   return(result);
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	f023 0301 	bic.w	r3, r3, #1
 801bb8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	3308      	adds	r3, #8
 801bb94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bb96:	61fa      	str	r2, [r7, #28]
 801bb98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb9a:	69b9      	ldr	r1, [r7, #24]
 801bb9c:	69fa      	ldr	r2, [r7, #28]
 801bb9e:	e841 2300 	strex	r3, r2, [r1]
 801bba2:	617b      	str	r3, [r7, #20]
   return(result);
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1e5      	bne.n	801bb76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2220      	movs	r2, #32
 801bbae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bbba:	2303      	movs	r3, #3
 801bbbc:	e012      	b.n	801bbe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2220      	movs	r2, #32
 801bbc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2220      	movs	r2, #32
 801bbca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	2200      	movs	r2, #0
 801bbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bbe2:	2300      	movs	r3, #0
}
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	3758      	adds	r7, #88	@ 0x58
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bd80      	pop	{r7, pc}

0801bbec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b084      	sub	sp, #16
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	60f8      	str	r0, [r7, #12]
 801bbf4:	60b9      	str	r1, [r7, #8]
 801bbf6:	603b      	str	r3, [r7, #0]
 801bbf8:	4613      	mov	r3, r2
 801bbfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bbfc:	e04f      	b.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bbfe:	69bb      	ldr	r3, [r7, #24]
 801bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc04:	d04b      	beq.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bc06:	f7f6 fe93 	bl	8012930 <HAL_GetTick>
 801bc0a:	4602      	mov	r2, r0
 801bc0c:	683b      	ldr	r3, [r7, #0]
 801bc0e:	1ad3      	subs	r3, r2, r3
 801bc10:	69ba      	ldr	r2, [r7, #24]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	d302      	bcc.n	801bc1c <UART_WaitOnFlagUntilTimeout+0x30>
 801bc16:	69bb      	ldr	r3, [r7, #24]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d101      	bne.n	801bc20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801bc1c:	2303      	movs	r3, #3
 801bc1e:	e04e      	b.n	801bcbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	f003 0304 	and.w	r3, r3, #4
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d037      	beq.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
 801bc2e:	68bb      	ldr	r3, [r7, #8]
 801bc30:	2b80      	cmp	r3, #128	@ 0x80
 801bc32:	d034      	beq.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	2b40      	cmp	r3, #64	@ 0x40
 801bc38:	d031      	beq.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	69db      	ldr	r3, [r3, #28]
 801bc40:	f003 0308 	and.w	r3, r3, #8
 801bc44:	2b08      	cmp	r3, #8
 801bc46:	d110      	bne.n	801bc6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	2208      	movs	r2, #8
 801bc4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bc50:	68f8      	ldr	r0, [r7, #12]
 801bc52:	f000 f839 	bl	801bcc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	2208      	movs	r2, #8
 801bc5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	2200      	movs	r2, #0
 801bc62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801bc66:	2301      	movs	r3, #1
 801bc68:	e029      	b.n	801bcbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	69db      	ldr	r3, [r3, #28]
 801bc70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bc74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bc78:	d111      	bne.n	801bc9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bc82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bc84:	68f8      	ldr	r0, [r7, #12]
 801bc86:	f000 f81f 	bl	801bcc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	2220      	movs	r2, #32
 801bc8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	2200      	movs	r2, #0
 801bc96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801bc9a:	2303      	movs	r3, #3
 801bc9c:	e00f      	b.n	801bcbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	69da      	ldr	r2, [r3, #28]
 801bca4:	68bb      	ldr	r3, [r7, #8]
 801bca6:	4013      	ands	r3, r2
 801bca8:	68ba      	ldr	r2, [r7, #8]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	bf0c      	ite	eq
 801bcae:	2301      	moveq	r3, #1
 801bcb0:	2300      	movne	r3, #0
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	461a      	mov	r2, r3
 801bcb6:	79fb      	ldrb	r3, [r7, #7]
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d0a0      	beq.n	801bbfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bcbc:	2300      	movs	r3, #0
}
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	3710      	adds	r7, #16
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}
	...

0801bcc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801bcc8:	b480      	push	{r7}
 801bcca:	b095      	sub	sp, #84	@ 0x54
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bcd8:	e853 3f00 	ldrex	r3, [r3]
 801bcdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	461a      	mov	r2, r3
 801bcec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bcee:	643b      	str	r3, [r7, #64]	@ 0x40
 801bcf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801bcf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bcf6:	e841 2300 	strex	r3, r2, [r1]
 801bcfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d1e6      	bne.n	801bcd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	3308      	adds	r3, #8
 801bd08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd0a:	6a3b      	ldr	r3, [r7, #32]
 801bd0c:	e853 3f00 	ldrex	r3, [r3]
 801bd10:	61fb      	str	r3, [r7, #28]
   return(result);
 801bd12:	69fa      	ldr	r2, [r7, #28]
 801bd14:	4b1e      	ldr	r3, [pc, #120]	@ (801bd90 <UART_EndRxTransfer+0xc8>)
 801bd16:	4013      	ands	r3, r2
 801bd18:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	3308      	adds	r3, #8
 801bd20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bd22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bd24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bd28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd2a:	e841 2300 	strex	r3, r2, [r1]
 801bd2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d1e5      	bne.n	801bd02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bd3a:	2b01      	cmp	r3, #1
 801bd3c:	d118      	bne.n	801bd70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	e853 3f00 	ldrex	r3, [r3]
 801bd4a:	60bb      	str	r3, [r7, #8]
   return(result);
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	f023 0310 	bic.w	r3, r3, #16
 801bd52:	647b      	str	r3, [r7, #68]	@ 0x44
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	461a      	mov	r2, r3
 801bd5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bd5c:	61bb      	str	r3, [r7, #24]
 801bd5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd60:	6979      	ldr	r1, [r7, #20]
 801bd62:	69ba      	ldr	r2, [r7, #24]
 801bd64:	e841 2300 	strex	r3, r2, [r1]
 801bd68:	613b      	str	r3, [r7, #16]
   return(result);
 801bd6a:	693b      	ldr	r3, [r7, #16]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d1e6      	bne.n	801bd3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	2220      	movs	r2, #32
 801bd74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2200      	movs	r2, #0
 801bd82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801bd84:	bf00      	nop
 801bd86:	3754      	adds	r7, #84	@ 0x54
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8e:	4770      	bx	lr
 801bd90:	effffffe 	.word	0xeffffffe

0801bd94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801bd94:	b480      	push	{r7}
 801bd96:	b085      	sub	sp, #20
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801bda2:	2b01      	cmp	r3, #1
 801bda4:	d101      	bne.n	801bdaa <HAL_UARTEx_DisableFifoMode+0x16>
 801bda6:	2302      	movs	r3, #2
 801bda8:	e027      	b.n	801bdfa <HAL_UARTEx_DisableFifoMode+0x66>
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	2201      	movs	r2, #1
 801bdae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	2224      	movs	r2, #36	@ 0x24
 801bdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	681a      	ldr	r2, [r3, #0]
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	f022 0201 	bic.w	r2, r2, #1
 801bdd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801bdd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	2200      	movs	r2, #0
 801bdde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	68fa      	ldr	r2, [r7, #12]
 801bde6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	2220      	movs	r2, #32
 801bdec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bdf8:	2300      	movs	r3, #0
}
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	3714      	adds	r7, #20
 801bdfe:	46bd      	mov	sp, r7
 801be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be04:	4770      	bx	lr

0801be06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801be06:	b580      	push	{r7, lr}
 801be08:	b084      	sub	sp, #16
 801be0a:	af00      	add	r7, sp, #0
 801be0c:	6078      	str	r0, [r7, #4]
 801be0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801be16:	2b01      	cmp	r3, #1
 801be18:	d101      	bne.n	801be1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801be1a:	2302      	movs	r3, #2
 801be1c:	e02d      	b.n	801be7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2201      	movs	r2, #1
 801be22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	2224      	movs	r2, #36	@ 0x24
 801be2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	681a      	ldr	r2, [r3, #0]
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	f022 0201 	bic.w	r2, r2, #1
 801be44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	689b      	ldr	r3, [r3, #8]
 801be4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	683a      	ldr	r2, [r7, #0]
 801be56:	430a      	orrs	r2, r1
 801be58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801be5a:	6878      	ldr	r0, [r7, #4]
 801be5c:	f000 f850 	bl	801bf00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	68fa      	ldr	r2, [r7, #12]
 801be66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2220      	movs	r2, #32
 801be6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2200      	movs	r2, #0
 801be74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801be78:	2300      	movs	r3, #0
}
 801be7a:	4618      	mov	r0, r3
 801be7c:	3710      	adds	r7, #16
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}

0801be82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801be82:	b580      	push	{r7, lr}
 801be84:	b084      	sub	sp, #16
 801be86:	af00      	add	r7, sp, #0
 801be88:	6078      	str	r0, [r7, #4]
 801be8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801be92:	2b01      	cmp	r3, #1
 801be94:	d101      	bne.n	801be9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801be96:	2302      	movs	r3, #2
 801be98:	e02d      	b.n	801bef6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	2201      	movs	r2, #1
 801be9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	2224      	movs	r2, #36	@ 0x24
 801bea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	681a      	ldr	r2, [r3, #0]
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	f022 0201 	bic.w	r2, r2, #1
 801bec0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	689b      	ldr	r3, [r3, #8]
 801bec8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	683a      	ldr	r2, [r7, #0]
 801bed2:	430a      	orrs	r2, r1
 801bed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801bed6:	6878      	ldr	r0, [r7, #4]
 801bed8:	f000 f812 	bl	801bf00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	68fa      	ldr	r2, [r7, #12]
 801bee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2220      	movs	r2, #32
 801bee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	2200      	movs	r2, #0
 801bef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801bef4:	2300      	movs	r3, #0
}
 801bef6:	4618      	mov	r0, r3
 801bef8:	3710      	adds	r7, #16
 801befa:	46bd      	mov	sp, r7
 801befc:	bd80      	pop	{r7, pc}
	...

0801bf00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801bf00:	b480      	push	{r7}
 801bf02:	b085      	sub	sp, #20
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d108      	bne.n	801bf22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	2201      	movs	r2, #1
 801bf14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	2201      	movs	r2, #1
 801bf1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801bf20:	e031      	b.n	801bf86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801bf22:	2310      	movs	r3, #16
 801bf24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801bf26:	2310      	movs	r3, #16
 801bf28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	689b      	ldr	r3, [r3, #8]
 801bf30:	0e5b      	lsrs	r3, r3, #25
 801bf32:	b2db      	uxtb	r3, r3
 801bf34:	f003 0307 	and.w	r3, r3, #7
 801bf38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	689b      	ldr	r3, [r3, #8]
 801bf40:	0f5b      	lsrs	r3, r3, #29
 801bf42:	b2db      	uxtb	r3, r3
 801bf44:	f003 0307 	and.w	r3, r3, #7
 801bf48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bf4a:	7bbb      	ldrb	r3, [r7, #14]
 801bf4c:	7b3a      	ldrb	r2, [r7, #12]
 801bf4e:	4911      	ldr	r1, [pc, #68]	@ (801bf94 <UARTEx_SetNbDataToProcess+0x94>)
 801bf50:	5c8a      	ldrb	r2, [r1, r2]
 801bf52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801bf56:	7b3a      	ldrb	r2, [r7, #12]
 801bf58:	490f      	ldr	r1, [pc, #60]	@ (801bf98 <UARTEx_SetNbDataToProcess+0x98>)
 801bf5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801bf5c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf60:	b29a      	uxth	r2, r3
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bf68:	7bfb      	ldrb	r3, [r7, #15]
 801bf6a:	7b7a      	ldrb	r2, [r7, #13]
 801bf6c:	4909      	ldr	r1, [pc, #36]	@ (801bf94 <UARTEx_SetNbDataToProcess+0x94>)
 801bf6e:	5c8a      	ldrb	r2, [r1, r2]
 801bf70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801bf74:	7b7a      	ldrb	r2, [r7, #13]
 801bf76:	4908      	ldr	r1, [pc, #32]	@ (801bf98 <UARTEx_SetNbDataToProcess+0x98>)
 801bf78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801bf7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf7e:	b29a      	uxth	r2, r3
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801bf86:	bf00      	nop
 801bf88:	3714      	adds	r7, #20
 801bf8a:	46bd      	mov	sp, r7
 801bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf90:	4770      	bx	lr
 801bf92:	bf00      	nop
 801bf94:	08021a2c 	.word	0x08021a2c
 801bf98:	08021a34 	.word	0x08021a34

0801bf9c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801bf9c:	b084      	sub	sp, #16
 801bf9e:	b480      	push	{r7}
 801bfa0:	b085      	sub	sp, #20
 801bfa2:	af00      	add	r7, sp, #0
 801bfa4:	6078      	str	r0, [r7, #4]
 801bfa6:	f107 001c 	add.w	r0, r7, #28
 801bfaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801bfb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801bfb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801bfb6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801bfba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801bfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801bfbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 801bfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801bfc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801bfc4:	68fa      	ldr	r2, [r7, #12]
 801bfc6:	4313      	orrs	r3, r2
 801bfc8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	685a      	ldr	r2, [r3, #4]
 801bfce:	4b07      	ldr	r3, [pc, #28]	@ (801bfec <SDMMC_Init+0x50>)
 801bfd0:	4013      	ands	r3, r2
 801bfd2:	68fa      	ldr	r2, [r7, #12]
 801bfd4:	431a      	orrs	r2, r3
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801bfda:	2300      	movs	r3, #0
}
 801bfdc:	4618      	mov	r0, r3
 801bfde:	3714      	adds	r7, #20
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe6:	b004      	add	sp, #16
 801bfe8:	4770      	bx	lr
 801bfea:	bf00      	nop
 801bfec:	ffc02c00 	.word	0xffc02c00

0801bff0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801bff0:	b480      	push	{r7}
 801bff2:	b083      	sub	sp, #12
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801bffe:	4618      	mov	r0, r3
 801c000:	370c      	adds	r7, #12
 801c002:	46bd      	mov	sp, r7
 801c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c008:	4770      	bx	lr

0801c00a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801c00a:	b480      	push	{r7}
 801c00c:	b083      	sub	sp, #12
 801c00e:	af00      	add	r7, sp, #0
 801c010:	6078      	str	r0, [r7, #4]
 801c012:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	681a      	ldr	r2, [r3, #0]
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801c01e:	2300      	movs	r3, #0
}
 801c020:	4618      	mov	r0, r3
 801c022:	370c      	adds	r7, #12
 801c024:	46bd      	mov	sp, r7
 801c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02a:	4770      	bx	lr

0801c02c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801c02c:	b480      	push	{r7}
 801c02e:	b083      	sub	sp, #12
 801c030:	af00      	add	r7, sp, #0
 801c032:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	f043 0203 	orr.w	r2, r3, #3
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801c040:	2300      	movs	r3, #0
}
 801c042:	4618      	mov	r0, r3
 801c044:	370c      	adds	r7, #12
 801c046:	46bd      	mov	sp, r7
 801c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c04c:	4770      	bx	lr

0801c04e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801c04e:	b480      	push	{r7}
 801c050:	b083      	sub	sp, #12
 801c052:	af00      	add	r7, sp, #0
 801c054:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	f003 0303 	and.w	r3, r3, #3
}
 801c05e:	4618      	mov	r0, r3
 801c060:	370c      	adds	r7, #12
 801c062:	46bd      	mov	sp, r7
 801c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c068:	4770      	bx	lr
	...

0801c06c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801c06c:	b480      	push	{r7}
 801c06e:	b085      	sub	sp, #20
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
 801c074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801c076:	2300      	movs	r3, #0
 801c078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801c07a:	683b      	ldr	r3, [r7, #0]
 801c07c:	681a      	ldr	r2, [r3, #0]
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801c08a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801c090:	431a      	orrs	r2, r3
                       Command->CPSM);
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801c096:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801c098:	68fa      	ldr	r2, [r7, #12]
 801c09a:	4313      	orrs	r3, r2
 801c09c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	68da      	ldr	r2, [r3, #12]
 801c0a2:	4b06      	ldr	r3, [pc, #24]	@ (801c0bc <SDMMC_SendCommand+0x50>)
 801c0a4:	4013      	ands	r3, r2
 801c0a6:	68fa      	ldr	r2, [r7, #12]
 801c0a8:	431a      	orrs	r2, r3
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801c0ae:	2300      	movs	r3, #0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3714      	adds	r7, #20
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ba:	4770      	bx	lr
 801c0bc:	fffee0c0 	.word	0xfffee0c0

0801c0c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801c0c0:	b480      	push	{r7}
 801c0c2:	b083      	sub	sp, #12
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	691b      	ldr	r3, [r3, #16]
 801c0cc:	b2db      	uxtb	r3, r3
}
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	370c      	adds	r7, #12
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d8:	4770      	bx	lr

0801c0da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801c0da:	b480      	push	{r7}
 801c0dc:	b085      	sub	sp, #20
 801c0de:	af00      	add	r7, sp, #0
 801c0e0:	6078      	str	r0, [r7, #4]
 801c0e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	3314      	adds	r3, #20
 801c0e8:	461a      	mov	r2, r3
 801c0ea:	683b      	ldr	r3, [r7, #0]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	681b      	ldr	r3, [r3, #0]
}
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	3714      	adds	r7, #20
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fe:	4770      	bx	lr

0801c100 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801c100:	b480      	push	{r7}
 801c102:	b085      	sub	sp, #20
 801c104:	af00      	add	r7, sp, #0
 801c106:	6078      	str	r0, [r7, #4]
 801c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801c10a:	2300      	movs	r3, #0
 801c10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	681a      	ldr	r2, [r3, #0]
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801c116:	683b      	ldr	r3, [r7, #0]
 801c118:	685a      	ldr	r2, [r3, #4]
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801c11e:	683b      	ldr	r3, [r7, #0]
 801c120:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801c126:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801c128:	683b      	ldr	r3, [r7, #0]
 801c12a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801c12c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801c132:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801c134:	68fa      	ldr	r2, [r7, #12]
 801c136:	4313      	orrs	r3, r2
 801c138:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c13e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	431a      	orrs	r2, r3
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801c14a:	2300      	movs	r3, #0

}
 801c14c:	4618      	mov	r0, r3
 801c14e:	3714      	adds	r7, #20
 801c150:	46bd      	mov	sp, r7
 801c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c156:	4770      	bx	lr

0801c158 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801c158:	b580      	push	{r7, lr}
 801c15a:	b088      	sub	sp, #32
 801c15c:	af00      	add	r7, sp, #0
 801c15e:	6078      	str	r0, [r7, #4]
 801c160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801c166:	2310      	movs	r3, #16
 801c168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c16a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c16e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c170:	2300      	movs	r3, #0
 801c172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c17a:	f107 0308 	add.w	r3, r7, #8
 801c17e:	4619      	mov	r1, r3
 801c180:	6878      	ldr	r0, [r7, #4]
 801c182:	f7ff ff73 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801c186:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c18a:	2110      	movs	r1, #16
 801c18c:	6878      	ldr	r0, [r7, #4]
 801c18e:	f000 fa5f 	bl	801c650 <SDMMC_GetCmdResp1>
 801c192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c194:	69fb      	ldr	r3, [r7, #28]
}
 801c196:	4618      	mov	r0, r3
 801c198:	3720      	adds	r7, #32
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}

0801c19e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801c19e:	b580      	push	{r7, lr}
 801c1a0:	b088      	sub	sp, #32
 801c1a2:	af00      	add	r7, sp, #0
 801c1a4:	6078      	str	r0, [r7, #4]
 801c1a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801c1a8:	683b      	ldr	r3, [r7, #0]
 801c1aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801c1ac:	2311      	movs	r3, #17
 801c1ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c1b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c1b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c1ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c1be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c1c0:	f107 0308 	add.w	r3, r7, #8
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	6878      	ldr	r0, [r7, #4]
 801c1c8:	f7ff ff50 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801c1cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c1d0:	2111      	movs	r1, #17
 801c1d2:	6878      	ldr	r0, [r7, #4]
 801c1d4:	f000 fa3c 	bl	801c650 <SDMMC_GetCmdResp1>
 801c1d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c1da:	69fb      	ldr	r3, [r7, #28]
}
 801c1dc:	4618      	mov	r0, r3
 801c1de:	3720      	adds	r7, #32
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bd80      	pop	{r7, pc}

0801c1e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b088      	sub	sp, #32
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
 801c1ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801c1f2:	2312      	movs	r3, #18
 801c1f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c1f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c1fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c206:	f107 0308 	add.w	r3, r7, #8
 801c20a:	4619      	mov	r1, r3
 801c20c:	6878      	ldr	r0, [r7, #4]
 801c20e:	f7ff ff2d 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801c212:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c216:	2112      	movs	r1, #18
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f000 fa19 	bl	801c650 <SDMMC_GetCmdResp1>
 801c21e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c220:	69fb      	ldr	r3, [r7, #28]
}
 801c222:	4618      	mov	r0, r3
 801c224:	3720      	adds	r7, #32
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}

0801c22a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801c22a:	b580      	push	{r7, lr}
 801c22c:	b088      	sub	sp, #32
 801c22e:	af00      	add	r7, sp, #0
 801c230:	6078      	str	r0, [r7, #4]
 801c232:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801c234:	683b      	ldr	r3, [r7, #0]
 801c236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801c238:	2318      	movs	r3, #24
 801c23a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c23c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c242:	2300      	movs	r3, #0
 801c244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c24a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c24c:	f107 0308 	add.w	r3, r7, #8
 801c250:	4619      	mov	r1, r3
 801c252:	6878      	ldr	r0, [r7, #4]
 801c254:	f7ff ff0a 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801c258:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c25c:	2118      	movs	r1, #24
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 f9f6 	bl	801c650 <SDMMC_GetCmdResp1>
 801c264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c266:	69fb      	ldr	r3, [r7, #28]
}
 801c268:	4618      	mov	r0, r3
 801c26a:	3720      	adds	r7, #32
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b088      	sub	sp, #32
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801c27e:	2319      	movs	r3, #25
 801c280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c288:	2300      	movs	r3, #0
 801c28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c28c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c292:	f107 0308 	add.w	r3, r7, #8
 801c296:	4619      	mov	r1, r3
 801c298:	6878      	ldr	r0, [r7, #4]
 801c29a:	f7ff fee7 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801c29e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c2a2:	2119      	movs	r1, #25
 801c2a4:	6878      	ldr	r0, [r7, #4]
 801c2a6:	f000 f9d3 	bl	801c650 <SDMMC_GetCmdResp1>
 801c2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c2ac:	69fb      	ldr	r3, [r7, #28]
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	3720      	adds	r7, #32
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
	...

0801c2b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801c2b8:	b580      	push	{r7, lr}
 801c2ba:	b088      	sub	sp, #32
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801c2c4:	230c      	movs	r3, #12
 801c2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c2c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c2ce:	2300      	movs	r3, #0
 801c2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c2d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c2d6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	68db      	ldr	r3, [r3, #12]
 801c2dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	68db      	ldr	r3, [r3, #12]
 801c2e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c2f0:	f107 0308 	add.w	r3, r7, #8
 801c2f4:	4619      	mov	r1, r3
 801c2f6:	6878      	ldr	r0, [r7, #4]
 801c2f8:	f7ff feb8 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801c2fc:	4a0b      	ldr	r2, [pc, #44]	@ (801c32c <SDMMC_CmdStopTransfer+0x74>)
 801c2fe:	210c      	movs	r1, #12
 801c300:	6878      	ldr	r0, [r7, #4]
 801c302:	f000 f9a5 	bl	801c650 <SDMMC_GetCmdResp1>
 801c306:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	68db      	ldr	r3, [r3, #12]
 801c30c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801c314:	69fb      	ldr	r3, [r7, #28]
 801c316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c31a:	d101      	bne.n	801c320 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801c31c:	2300      	movs	r3, #0
 801c31e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801c320:	69fb      	ldr	r3, [r7, #28]
}
 801c322:	4618      	mov	r0, r3
 801c324:	3720      	adds	r7, #32
 801c326:	46bd      	mov	sp, r7
 801c328:	bd80      	pop	{r7, pc}
 801c32a:	bf00      	nop
 801c32c:	05f5e100 	.word	0x05f5e100

0801c330 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801c330:	b580      	push	{r7, lr}
 801c332:	b088      	sub	sp, #32
 801c334:	af00      	add	r7, sp, #0
 801c336:	6078      	str	r0, [r7, #4]
 801c338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801c33e:	2307      	movs	r3, #7
 801c340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c348:	2300      	movs	r3, #0
 801c34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c34c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c352:	f107 0308 	add.w	r3, r7, #8
 801c356:	4619      	mov	r1, r3
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f7ff fe87 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801c35e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c362:	2107      	movs	r1, #7
 801c364:	6878      	ldr	r0, [r7, #4]
 801c366:	f000 f973 	bl	801c650 <SDMMC_GetCmdResp1>
 801c36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c36c:	69fb      	ldr	r3, [r7, #28]
}
 801c36e:	4618      	mov	r0, r3
 801c370:	3720      	adds	r7, #32
 801c372:	46bd      	mov	sp, r7
 801c374:	bd80      	pop	{r7, pc}

0801c376 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801c376:	b580      	push	{r7, lr}
 801c378:	b088      	sub	sp, #32
 801c37a:	af00      	add	r7, sp, #0
 801c37c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801c37e:	2300      	movs	r3, #0
 801c380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801c382:	2300      	movs	r3, #0
 801c384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801c386:	2300      	movs	r3, #0
 801c388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c38a:	2300      	movs	r3, #0
 801c38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c38e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c394:	f107 0308 	add.w	r3, r7, #8
 801c398:	4619      	mov	r1, r3
 801c39a:	6878      	ldr	r0, [r7, #4]
 801c39c:	f7ff fe66 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801c3a0:	6878      	ldr	r0, [r7, #4]
 801c3a2:	f000 fb97 	bl	801cad4 <SDMMC_GetCmdError>
 801c3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c3a8:	69fb      	ldr	r3, [r7, #28]
}
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	3720      	adds	r7, #32
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bd80      	pop	{r7, pc}

0801c3b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801c3b2:	b580      	push	{r7, lr}
 801c3b4:	b088      	sub	sp, #32
 801c3b6:	af00      	add	r7, sp, #0
 801c3b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801c3ba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801c3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801c3c0:	2308      	movs	r3, #8
 801c3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c3c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c3ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c3d4:	f107 0308 	add.w	r3, r7, #8
 801c3d8:	4619      	mov	r1, r3
 801c3da:	6878      	ldr	r0, [r7, #4]
 801c3dc:	f7ff fe46 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801c3e0:	6878      	ldr	r0, [r7, #4]
 801c3e2:	f000 fb29 	bl	801ca38 <SDMMC_GetCmdResp7>
 801c3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c3e8:	69fb      	ldr	r3, [r7, #28]
}
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	3720      	adds	r7, #32
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	bd80      	pop	{r7, pc}

0801c3f2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801c3f2:	b580      	push	{r7, lr}
 801c3f4:	b088      	sub	sp, #32
 801c3f6:	af00      	add	r7, sp, #0
 801c3f8:	6078      	str	r0, [r7, #4]
 801c3fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801c3fc:	683b      	ldr	r3, [r7, #0]
 801c3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801c400:	2337      	movs	r3, #55	@ 0x37
 801c402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c40a:	2300      	movs	r3, #0
 801c40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c40e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c414:	f107 0308 	add.w	r3, r7, #8
 801c418:	4619      	mov	r1, r3
 801c41a:	6878      	ldr	r0, [r7, #4]
 801c41c:	f7ff fe26 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801c420:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c424:	2137      	movs	r1, #55	@ 0x37
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	f000 f912 	bl	801c650 <SDMMC_GetCmdResp1>
 801c42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c42e:	69fb      	ldr	r3, [r7, #28]
}
 801c430:	4618      	mov	r0, r3
 801c432:	3720      	adds	r7, #32
 801c434:	46bd      	mov	sp, r7
 801c436:	bd80      	pop	{r7, pc}

0801c438 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b088      	sub	sp, #32
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
 801c440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801c446:	2329      	movs	r3, #41	@ 0x29
 801c448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c44a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c44e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c450:	2300      	movs	r3, #0
 801c452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c45a:	f107 0308 	add.w	r3, r7, #8
 801c45e:	4619      	mov	r1, r3
 801c460:	6878      	ldr	r0, [r7, #4]
 801c462:	f7ff fe03 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801c466:	6878      	ldr	r0, [r7, #4]
 801c468:	f000 fa2e 	bl	801c8c8 <SDMMC_GetCmdResp3>
 801c46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c46e:	69fb      	ldr	r3, [r7, #28]
}
 801c470:	4618      	mov	r0, r3
 801c472:	3720      	adds	r7, #32
 801c474:	46bd      	mov	sp, r7
 801c476:	bd80      	pop	{r7, pc}

0801c478 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b088      	sub	sp, #32
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
 801c480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801c482:	683b      	ldr	r3, [r7, #0]
 801c484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801c486:	2306      	movs	r3, #6
 801c488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c48a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c490:	2300      	movs	r3, #0
 801c492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c49a:	f107 0308 	add.w	r3, r7, #8
 801c49e:	4619      	mov	r1, r3
 801c4a0:	6878      	ldr	r0, [r7, #4]
 801c4a2:	f7ff fde3 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801c4a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c4aa:	2106      	movs	r1, #6
 801c4ac:	6878      	ldr	r0, [r7, #4]
 801c4ae:	f000 f8cf 	bl	801c650 <SDMMC_GetCmdResp1>
 801c4b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c4b4:	69fb      	ldr	r3, [r7, #28]
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3720      	adds	r7, #32
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}

0801c4be <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801c4be:	b580      	push	{r7, lr}
 801c4c0:	b088      	sub	sp, #32
 801c4c2:	af00      	add	r7, sp, #0
 801c4c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801c4ca:	2333      	movs	r3, #51	@ 0x33
 801c4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c4ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c4d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c4dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c4de:	f107 0308 	add.w	r3, r7, #8
 801c4e2:	4619      	mov	r1, r3
 801c4e4:	6878      	ldr	r0, [r7, #4]
 801c4e6:	f7ff fdc1 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801c4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c4ee:	2133      	movs	r1, #51	@ 0x33
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	f000 f8ad 	bl	801c650 <SDMMC_GetCmdResp1>
 801c4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c4f8:	69fb      	ldr	r3, [r7, #28]
}
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	3720      	adds	r7, #32
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}

0801c502 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801c502:	b580      	push	{r7, lr}
 801c504:	b088      	sub	sp, #32
 801c506:	af00      	add	r7, sp, #0
 801c508:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801c50a:	2300      	movs	r3, #0
 801c50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801c50e:	2302      	movs	r3, #2
 801c510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801c512:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801c516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c518:	2300      	movs	r3, #0
 801c51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c51c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c522:	f107 0308 	add.w	r3, r7, #8
 801c526:	4619      	mov	r1, r3
 801c528:	6878      	ldr	r0, [r7, #4]
 801c52a:	f7ff fd9f 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801c52e:	6878      	ldr	r0, [r7, #4]
 801c530:	f000 f980 	bl	801c834 <SDMMC_GetCmdResp2>
 801c534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c536:	69fb      	ldr	r3, [r7, #28]
}
 801c538:	4618      	mov	r0, r3
 801c53a:	3720      	adds	r7, #32
 801c53c:	46bd      	mov	sp, r7
 801c53e:	bd80      	pop	{r7, pc}

0801c540 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801c540:	b580      	push	{r7, lr}
 801c542:	b088      	sub	sp, #32
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
 801c548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801c54a:	683b      	ldr	r3, [r7, #0]
 801c54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801c54e:	2309      	movs	r3, #9
 801c550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801c552:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801c556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c558:	2300      	movs	r3, #0
 801c55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c55c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c562:	f107 0308 	add.w	r3, r7, #8
 801c566:	4619      	mov	r1, r3
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7ff fd7f 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801c56e:	6878      	ldr	r0, [r7, #4]
 801c570:	f000 f960 	bl	801c834 <SDMMC_GetCmdResp2>
 801c574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c576:	69fb      	ldr	r3, [r7, #28]
}
 801c578:	4618      	mov	r0, r3
 801c57a:	3720      	adds	r7, #32
 801c57c:	46bd      	mov	sp, r7
 801c57e:	bd80      	pop	{r7, pc}

0801c580 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b088      	sub	sp, #32
 801c584:	af00      	add	r7, sp, #0
 801c586:	6078      	str	r0, [r7, #4]
 801c588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801c58a:	2300      	movs	r3, #0
 801c58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801c58e:	2303      	movs	r3, #3
 801c590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c598:	2300      	movs	r3, #0
 801c59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c59c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c5a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c5a2:	f107 0308 	add.w	r3, r7, #8
 801c5a6:	4619      	mov	r1, r3
 801c5a8:	6878      	ldr	r0, [r7, #4]
 801c5aa:	f7ff fd5f 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801c5ae:	683a      	ldr	r2, [r7, #0]
 801c5b0:	2103      	movs	r1, #3
 801c5b2:	6878      	ldr	r0, [r7, #4]
 801c5b4:	f000 f9c8 	bl	801c948 <SDMMC_GetCmdResp6>
 801c5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c5ba:	69fb      	ldr	r3, [r7, #28]
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3720      	adds	r7, #32
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}

0801c5c4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b088      	sub	sp, #32
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
 801c5cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801c5ce:	683b      	ldr	r3, [r7, #0]
 801c5d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801c5d2:	230d      	movs	r3, #13
 801c5d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c5d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c5dc:	2300      	movs	r3, #0
 801c5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c5e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c5e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c5e6:	f107 0308 	add.w	r3, r7, #8
 801c5ea:	4619      	mov	r1, r3
 801c5ec:	6878      	ldr	r0, [r7, #4]
 801c5ee:	f7ff fd3d 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801c5f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c5f6:	210d      	movs	r1, #13
 801c5f8:	6878      	ldr	r0, [r7, #4]
 801c5fa:	f000 f829 	bl	801c650 <SDMMC_GetCmdResp1>
 801c5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c600:	69fb      	ldr	r3, [r7, #28]
}
 801c602:	4618      	mov	r0, r3
 801c604:	3720      	adds	r7, #32
 801c606:	46bd      	mov	sp, r7
 801c608:	bd80      	pop	{r7, pc}

0801c60a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801c60a:	b580      	push	{r7, lr}
 801c60c:	b088      	sub	sp, #32
 801c60e:	af00      	add	r7, sp, #0
 801c610:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801c612:	2300      	movs	r3, #0
 801c614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801c616:	230d      	movs	r3, #13
 801c618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801c61a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c61e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801c620:	2300      	movs	r3, #0
 801c622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801c624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801c62a:	f107 0308 	add.w	r3, r7, #8
 801c62e:	4619      	mov	r1, r3
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f7ff fd1b 	bl	801c06c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801c636:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c63a:	210d      	movs	r1, #13
 801c63c:	6878      	ldr	r0, [r7, #4]
 801c63e:	f000 f807 	bl	801c650 <SDMMC_GetCmdResp1>
 801c642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801c644:	69fb      	ldr	r3, [r7, #28]
}
 801c646:	4618      	mov	r0, r3
 801c648:	3720      	adds	r7, #32
 801c64a:	46bd      	mov	sp, r7
 801c64c:	bd80      	pop	{r7, pc}
	...

0801c650 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b088      	sub	sp, #32
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	460b      	mov	r3, r1
 801c65a:	607a      	str	r2, [r7, #4]
 801c65c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801c65e:	4b70      	ldr	r3, [pc, #448]	@ (801c820 <SDMMC_GetCmdResp1+0x1d0>)
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	4a70      	ldr	r2, [pc, #448]	@ (801c824 <SDMMC_GetCmdResp1+0x1d4>)
 801c664:	fba2 2303 	umull	r2, r3, r2, r3
 801c668:	0a5a      	lsrs	r2, r3, #9
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	fb02 f303 	mul.w	r3, r2, r3
 801c670:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801c672:	69fb      	ldr	r3, [r7, #28]
 801c674:	1e5a      	subs	r2, r3, #1
 801c676:	61fa      	str	r2, [r7, #28]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d102      	bne.n	801c682 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801c67c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801c680:	e0c9      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c686:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801c688:	69ba      	ldr	r2, [r7, #24]
 801c68a:	4b67      	ldr	r3, [pc, #412]	@ (801c828 <SDMMC_GetCmdResp1+0x1d8>)
 801c68c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d0ef      	beq.n	801c672 <SDMMC_GetCmdResp1+0x22>
 801c692:	69bb      	ldr	r3, [r7, #24]
 801c694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d1ea      	bne.n	801c672 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6a0:	f003 0304 	and.w	r3, r3, #4
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d004      	beq.n	801c6b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	2204      	movs	r2, #4
 801c6ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801c6ae:	2304      	movs	r3, #4
 801c6b0:	e0b1      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6b6:	f003 0301 	and.w	r3, r3, #1
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d004      	beq.n	801c6c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	2201      	movs	r2, #1
 801c6c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801c6c4:	2301      	movs	r3, #1
 801c6c6:	e0a6      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	4a58      	ldr	r2, [pc, #352]	@ (801c82c <SDMMC_GetCmdResp1+0x1dc>)
 801c6cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801c6ce:	68f8      	ldr	r0, [r7, #12]
 801c6d0:	f7ff fcf6 	bl	801c0c0 <SDMMC_GetCommandResponse>
 801c6d4:	4603      	mov	r3, r0
 801c6d6:	461a      	mov	r2, r3
 801c6d8:	7afb      	ldrb	r3, [r7, #11]
 801c6da:	4293      	cmp	r3, r2
 801c6dc:	d001      	beq.n	801c6e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801c6de:	2301      	movs	r3, #1
 801c6e0:	e099      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801c6e2:	2100      	movs	r1, #0
 801c6e4:	68f8      	ldr	r0, [r7, #12]
 801c6e6:	f7ff fcf8 	bl	801c0da <SDMMC_GetResponse>
 801c6ea:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801c6ec:	697a      	ldr	r2, [r7, #20]
 801c6ee:	4b50      	ldr	r3, [pc, #320]	@ (801c830 <SDMMC_GetCmdResp1+0x1e0>)
 801c6f0:	4013      	ands	r3, r2
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d101      	bne.n	801c6fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	e08d      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	da02      	bge.n	801c706 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801c700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801c704:	e087      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801c706:	697b      	ldr	r3, [r7, #20]
 801c708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d001      	beq.n	801c714 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801c710:	2340      	movs	r3, #64	@ 0x40
 801c712:	e080      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801c714:	697b      	ldr	r3, [r7, #20]
 801c716:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d001      	beq.n	801c722 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801c71e:	2380      	movs	r3, #128	@ 0x80
 801c720:	e079      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d002      	beq.n	801c732 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801c72c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c730:	e071      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d002      	beq.n	801c742 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801c73c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c740:	e069      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801c742:	697b      	ldr	r3, [r7, #20]
 801c744:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d002      	beq.n	801c752 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801c74c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c750:	e061      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d002      	beq.n	801c762 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801c75c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c760:	e059      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801c762:	697b      	ldr	r3, [r7, #20]
 801c764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d002      	beq.n	801c772 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801c76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801c770:	e051      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d002      	beq.n	801c782 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801c77c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801c780:	e049      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d002      	beq.n	801c792 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801c78c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c790:	e041      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d002      	beq.n	801c7a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801c79c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c7a0:	e039      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801c7a2:	697b      	ldr	r3, [r7, #20]
 801c7a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d002      	beq.n	801c7b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801c7ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801c7b0:	e031      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801c7b2:	697b      	ldr	r3, [r7, #20]
 801c7b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d002      	beq.n	801c7c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801c7bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801c7c0:	e029      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d002      	beq.n	801c7d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801c7cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c7d0:	e021      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801c7d2:	697b      	ldr	r3, [r7, #20]
 801c7d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d002      	beq.n	801c7e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801c7dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801c7e0:	e019      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801c7e2:	697b      	ldr	r3, [r7, #20]
 801c7e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d002      	beq.n	801c7f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801c7ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801c7f0:	e011      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d002      	beq.n	801c802 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801c7fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801c800:	e009      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	f003 0308 	and.w	r3, r3, #8
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d002      	beq.n	801c812 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801c80c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801c810:	e001      	b.n	801c816 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801c812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801c816:	4618      	mov	r0, r3
 801c818:	3720      	adds	r7, #32
 801c81a:	46bd      	mov	sp, r7
 801c81c:	bd80      	pop	{r7, pc}
 801c81e:	bf00      	nop
 801c820:	2400001c 	.word	0x2400001c
 801c824:	10624dd3 	.word	0x10624dd3
 801c828:	00200045 	.word	0x00200045
 801c82c:	002000c5 	.word	0x002000c5
 801c830:	fdffe008 	.word	0xfdffe008

0801c834 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801c834:	b480      	push	{r7}
 801c836:	b085      	sub	sp, #20
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801c83c:	4b1f      	ldr	r3, [pc, #124]	@ (801c8bc <SDMMC_GetCmdResp2+0x88>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4a1f      	ldr	r2, [pc, #124]	@ (801c8c0 <SDMMC_GetCmdResp2+0x8c>)
 801c842:	fba2 2303 	umull	r2, r3, r2, r3
 801c846:	0a5b      	lsrs	r3, r3, #9
 801c848:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c84c:	fb02 f303 	mul.w	r3, r2, r3
 801c850:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	1e5a      	subs	r2, r3, #1
 801c856:	60fa      	str	r2, [r7, #12]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d102      	bne.n	801c862 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801c85c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801c860:	e026      	b.n	801c8b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c866:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c868:	68bb      	ldr	r3, [r7, #8]
 801c86a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d0ef      	beq.n	801c852 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1ea      	bne.n	801c852 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c880:	f003 0304 	and.w	r3, r3, #4
 801c884:	2b00      	cmp	r3, #0
 801c886:	d004      	beq.n	801c892 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	2204      	movs	r2, #4
 801c88c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801c88e:	2304      	movs	r3, #4
 801c890:	e00e      	b.n	801c8b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c896:	f003 0301 	and.w	r3, r3, #1
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d004      	beq.n	801c8a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	2201      	movs	r2, #1
 801c8a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801c8a4:	2301      	movs	r3, #1
 801c8a6:	e003      	b.n	801c8b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	4a06      	ldr	r2, [pc, #24]	@ (801c8c4 <SDMMC_GetCmdResp2+0x90>)
 801c8ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801c8ae:	2300      	movs	r3, #0
}
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	3714      	adds	r7, #20
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ba:	4770      	bx	lr
 801c8bc:	2400001c 	.word	0x2400001c
 801c8c0:	10624dd3 	.word	0x10624dd3
 801c8c4:	002000c5 	.word	0x002000c5

0801c8c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801c8c8:	b480      	push	{r7}
 801c8ca:	b085      	sub	sp, #20
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801c8d0:	4b1a      	ldr	r3, [pc, #104]	@ (801c93c <SDMMC_GetCmdResp3+0x74>)
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	4a1a      	ldr	r2, [pc, #104]	@ (801c940 <SDMMC_GetCmdResp3+0x78>)
 801c8d6:	fba2 2303 	umull	r2, r3, r2, r3
 801c8da:	0a5b      	lsrs	r3, r3, #9
 801c8dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c8e0:	fb02 f303 	mul.w	r3, r2, r3
 801c8e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	1e5a      	subs	r2, r3, #1
 801c8ea:	60fa      	str	r2, [r7, #12]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d102      	bne.n	801c8f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801c8f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801c8f4:	e01b      	b.n	801c92e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c8fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c8fc:	68bb      	ldr	r3, [r7, #8]
 801c8fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801c902:	2b00      	cmp	r3, #0
 801c904:	d0ef      	beq.n	801c8e6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801c906:	68bb      	ldr	r3, [r7, #8]
 801c908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d1ea      	bne.n	801c8e6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c914:	f003 0304 	and.w	r3, r3, #4
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d004      	beq.n	801c926 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2204      	movs	r2, #4
 801c920:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801c922:	2304      	movs	r3, #4
 801c924:	e003      	b.n	801c92e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	4a06      	ldr	r2, [pc, #24]	@ (801c944 <SDMMC_GetCmdResp3+0x7c>)
 801c92a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801c92c:	2300      	movs	r3, #0
}
 801c92e:	4618      	mov	r0, r3
 801c930:	3714      	adds	r7, #20
 801c932:	46bd      	mov	sp, r7
 801c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c938:	4770      	bx	lr
 801c93a:	bf00      	nop
 801c93c:	2400001c 	.word	0x2400001c
 801c940:	10624dd3 	.word	0x10624dd3
 801c944:	002000c5 	.word	0x002000c5

0801c948 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b088      	sub	sp, #32
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	60f8      	str	r0, [r7, #12]
 801c950:	460b      	mov	r3, r1
 801c952:	607a      	str	r2, [r7, #4]
 801c954:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801c956:	4b35      	ldr	r3, [pc, #212]	@ (801ca2c <SDMMC_GetCmdResp6+0xe4>)
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	4a35      	ldr	r2, [pc, #212]	@ (801ca30 <SDMMC_GetCmdResp6+0xe8>)
 801c95c:	fba2 2303 	umull	r2, r3, r2, r3
 801c960:	0a5b      	lsrs	r3, r3, #9
 801c962:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c966:	fb02 f303 	mul.w	r3, r2, r3
 801c96a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801c96c:	69fb      	ldr	r3, [r7, #28]
 801c96e:	1e5a      	subs	r2, r3, #1
 801c970:	61fa      	str	r2, [r7, #28]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d102      	bne.n	801c97c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801c976:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801c97a:	e052      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c980:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c982:	69bb      	ldr	r3, [r7, #24]
 801c984:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d0ef      	beq.n	801c96c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801c98c:	69bb      	ldr	r3, [r7, #24]
 801c98e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801c992:	2b00      	cmp	r3, #0
 801c994:	d1ea      	bne.n	801c96c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c99a:	f003 0304 	and.w	r3, r3, #4
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d004      	beq.n	801c9ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	2204      	movs	r2, #4
 801c9a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801c9a8:	2304      	movs	r3, #4
 801c9aa:	e03a      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d004      	beq.n	801c9c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	2201      	movs	r2, #1
 801c9bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801c9be:	2301      	movs	r3, #1
 801c9c0:	e02f      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	f7ff fb7c 	bl	801c0c0 <SDMMC_GetCommandResponse>
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	461a      	mov	r2, r3
 801c9cc:	7afb      	ldrb	r3, [r7, #11]
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d001      	beq.n	801c9d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	e025      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	4a16      	ldr	r2, [pc, #88]	@ (801ca34 <SDMMC_GetCmdResp6+0xec>)
 801c9da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801c9dc:	2100      	movs	r1, #0
 801c9de:	68f8      	ldr	r0, [r7, #12]
 801c9e0:	f7ff fb7b 	bl	801c0da <SDMMC_GetResponse>
 801c9e4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801c9e6:	697b      	ldr	r3, [r7, #20]
 801c9e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d106      	bne.n	801c9fe <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	0c1b      	lsrs	r3, r3, #16
 801c9f4:	b29a      	uxth	r2, r3
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	e011      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801c9fe:	697b      	ldr	r3, [r7, #20]
 801ca00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d002      	beq.n	801ca0e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801ca08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801ca0c:	e009      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801ca0e:	697b      	ldr	r3, [r7, #20]
 801ca10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d002      	beq.n	801ca1e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801ca18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801ca1c:	e001      	b.n	801ca22 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801ca1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801ca22:	4618      	mov	r0, r3
 801ca24:	3720      	adds	r7, #32
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	2400001c 	.word	0x2400001c
 801ca30:	10624dd3 	.word	0x10624dd3
 801ca34:	002000c5 	.word	0x002000c5

0801ca38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801ca38:	b480      	push	{r7}
 801ca3a:	b085      	sub	sp, #20
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801ca40:	4b22      	ldr	r3, [pc, #136]	@ (801cacc <SDMMC_GetCmdResp7+0x94>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	4a22      	ldr	r2, [pc, #136]	@ (801cad0 <SDMMC_GetCmdResp7+0x98>)
 801ca46:	fba2 2303 	umull	r2, r3, r2, r3
 801ca4a:	0a5b      	lsrs	r3, r3, #9
 801ca4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ca50:	fb02 f303 	mul.w	r3, r2, r3
 801ca54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	1e5a      	subs	r2, r3, #1
 801ca5a:	60fa      	str	r2, [r7, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d102      	bne.n	801ca66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ca60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801ca64:	e02c      	b.n	801cac0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca6a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ca6c:	68bb      	ldr	r3, [r7, #8]
 801ca6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d0ef      	beq.n	801ca56 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801ca76:	68bb      	ldr	r3, [r7, #8]
 801ca78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d1ea      	bne.n	801ca56 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca84:	f003 0304 	and.w	r3, r3, #4
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d004      	beq.n	801ca96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2204      	movs	r2, #4
 801ca90:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801ca92:	2304      	movs	r3, #4
 801ca94:	e014      	b.n	801cac0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca9a:	f003 0301 	and.w	r3, r3, #1
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d004      	beq.n	801caac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	2201      	movs	r2, #1
 801caa6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801caa8:	2301      	movs	r3, #1
 801caaa:	e009      	b.n	801cac0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d002      	beq.n	801cabe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	2240      	movs	r2, #64	@ 0x40
 801cabc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801cabe:	2300      	movs	r3, #0

}
 801cac0:	4618      	mov	r0, r3
 801cac2:	3714      	adds	r7, #20
 801cac4:	46bd      	mov	sp, r7
 801cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caca:	4770      	bx	lr
 801cacc:	2400001c 	.word	0x2400001c
 801cad0:	10624dd3 	.word	0x10624dd3

0801cad4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801cad4:	b480      	push	{r7}
 801cad6:	b085      	sub	sp, #20
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801cadc:	4b11      	ldr	r3, [pc, #68]	@ (801cb24 <SDMMC_GetCmdError+0x50>)
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	4a11      	ldr	r2, [pc, #68]	@ (801cb28 <SDMMC_GetCmdError+0x54>)
 801cae2:	fba2 2303 	umull	r2, r3, r2, r3
 801cae6:	0a5b      	lsrs	r3, r3, #9
 801cae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801caec:	fb02 f303 	mul.w	r3, r2, r3
 801caf0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	1e5a      	subs	r2, r3, #1
 801caf6:	60fa      	str	r2, [r7, #12]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d102      	bne.n	801cb02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801cafc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801cb00:	e009      	b.n	801cb16 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d0f1      	beq.n	801caf2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	4a06      	ldr	r2, [pc, #24]	@ (801cb2c <SDMMC_GetCmdError+0x58>)
 801cb12:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801cb14:	2300      	movs	r3, #0
}
 801cb16:	4618      	mov	r0, r3
 801cb18:	3714      	adds	r7, #20
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb20:	4770      	bx	lr
 801cb22:	bf00      	nop
 801cb24:	2400001c 	.word	0x2400001c
 801cb28:	10624dd3 	.word	0x10624dd3
 801cb2c:	002000c5 	.word	0x002000c5

0801cb30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801cb30:	b580      	push	{r7, lr}
 801cb32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801cb34:	4904      	ldr	r1, [pc, #16]	@ (801cb48 <MX_FATFS_Init+0x18>)
 801cb36:	4805      	ldr	r0, [pc, #20]	@ (801cb4c <MX_FATFS_Init+0x1c>)
 801cb38:	f002 fc08 	bl	801f34c <FATFS_LinkDriver>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	461a      	mov	r2, r3
 801cb40:	4b03      	ldr	r3, [pc, #12]	@ (801cb50 <MX_FATFS_Init+0x20>)
 801cb42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801cb44:	bf00      	nop
 801cb46:	bd80      	pop	{r7, pc}
 801cb48:	2400041c 	.word	0x2400041c
 801cb4c:	08021a3c 	.word	0x08021a3c
 801cb50:	24000418 	.word	0x24000418

0801cb54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801cb54:	b480      	push	{r7}
 801cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801cb58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	46bd      	mov	sp, r7
 801cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb62:	4770      	bx	lr

0801cb64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b086      	sub	sp, #24
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	60f8      	str	r0, [r7, #12]
 801cb6c:	60b9      	str	r1, [r7, #8]
 801cb6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801cb70:	2300      	movs	r3, #0
 801cb72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	68ba      	ldr	r2, [r7, #8]
 801cb78:	68f9      	ldr	r1, [r7, #12]
 801cb7a:	4806      	ldr	r0, [pc, #24]	@ (801cb94 <BSP_SD_ReadBlocks_DMA+0x30>)
 801cb7c:	f7fc fc16 	bl	80193ac <HAL_SD_ReadBlocks_DMA>
 801cb80:	4603      	mov	r3, r0
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d001      	beq.n	801cb8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801cb86:	2301      	movs	r3, #1
 801cb88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801cb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	3718      	adds	r7, #24
 801cb90:	46bd      	mov	sp, r7
 801cb92:	bd80      	pop	{r7, pc}
 801cb94:	240002f8 	.word	0x240002f8

0801cb98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b086      	sub	sp, #24
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	60f8      	str	r0, [r7, #12]
 801cba0:	60b9      	str	r1, [r7, #8]
 801cba2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801cba4:	2300      	movs	r3, #0
 801cba6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	68ba      	ldr	r2, [r7, #8]
 801cbac:	68f9      	ldr	r1, [r7, #12]
 801cbae:	4806      	ldr	r0, [pc, #24]	@ (801cbc8 <BSP_SD_WriteBlocks_DMA+0x30>)
 801cbb0:	f7fc fca4 	bl	80194fc <HAL_SD_WriteBlocks_DMA>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d001      	beq.n	801cbbe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801cbba:	2301      	movs	r3, #1
 801cbbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801cbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	3718      	adds	r7, #24
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}
 801cbc8:	240002f8 	.word	0x240002f8

0801cbcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801cbd0:	4805      	ldr	r0, [pc, #20]	@ (801cbe8 <BSP_SD_GetCardState+0x1c>)
 801cbd2:	f7fd fa9d 	bl	801a110 <HAL_SD_GetCardState>
 801cbd6:	4603      	mov	r3, r0
 801cbd8:	2b04      	cmp	r3, #4
 801cbda:	bf14      	ite	ne
 801cbdc:	2301      	movne	r3, #1
 801cbde:	2300      	moveq	r3, #0
 801cbe0:	b2db      	uxtb	r3, r3
}
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	bd80      	pop	{r7, pc}
 801cbe6:	bf00      	nop
 801cbe8:	240002f8 	.word	0x240002f8

0801cbec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b082      	sub	sp, #8
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801cbf4:	6879      	ldr	r1, [r7, #4]
 801cbf6:	4803      	ldr	r0, [pc, #12]	@ (801cc04 <BSP_SD_GetCardInfo+0x18>)
 801cbf8:	f7fd f94c 	bl	8019e94 <HAL_SD_GetCardInfo>
}
 801cbfc:	bf00      	nop
 801cbfe:	3708      	adds	r7, #8
 801cc00:	46bd      	mov	sp, r7
 801cc02:	bd80      	pop	{r7, pc}
 801cc04:	240002f8 	.word	0x240002f8

0801cc08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b082      	sub	sp, #8
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801cc10:	f000 fa14 	bl	801d03c <BSP_SD_WriteCpltCallback>
}
 801cc14:	bf00      	nop
 801cc16:	3708      	adds	r7, #8
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	bd80      	pop	{r7, pc}

0801cc1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801cc1c:	b580      	push	{r7, lr}
 801cc1e:	b082      	sub	sp, #8
 801cc20:	af00      	add	r7, sp, #0
 801cc22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801cc24:	f000 fa16 	bl	801d054 <BSP_SD_ReadCpltCallback>
}
 801cc28:	bf00      	nop
 801cc2a:	3708      	adds	r7, #8
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}

0801cc30 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b084      	sub	sp, #16
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801cc38:	f7f5 fe7a 	bl	8012930 <HAL_GetTick>
 801cc3c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801cc3e:	e006      	b.n	801cc4e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801cc40:	f7ff ffc4 	bl	801cbcc <BSP_SD_GetCardState>
 801cc44:	4603      	mov	r3, r0
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d101      	bne.n	801cc4e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	e009      	b.n	801cc62 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801cc4e:	f7f5 fe6f 	bl	8012930 <HAL_GetTick>
 801cc52:	4602      	mov	r2, r0
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	1ad3      	subs	r3, r2, r3
 801cc58:	687a      	ldr	r2, [r7, #4]
 801cc5a:	429a      	cmp	r2, r3
 801cc5c:	d8f0      	bhi.n	801cc40 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801cc5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc62:	4618      	mov	r0, r3
 801cc64:	3710      	adds	r7, #16
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
	...

0801cc6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b082      	sub	sp, #8
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	4603      	mov	r3, r0
 801cc74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801cc76:	4b0b      	ldr	r3, [pc, #44]	@ (801cca4 <SD_CheckStatus+0x38>)
 801cc78:	2201      	movs	r2, #1
 801cc7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801cc7c:	f7ff ffa6 	bl	801cbcc <BSP_SD_GetCardState>
 801cc80:	4603      	mov	r3, r0
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d107      	bne.n	801cc96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801cc86:	4b07      	ldr	r3, [pc, #28]	@ (801cca4 <SD_CheckStatus+0x38>)
 801cc88:	781b      	ldrb	r3, [r3, #0]
 801cc8a:	b2db      	uxtb	r3, r3
 801cc8c:	f023 0301 	bic.w	r3, r3, #1
 801cc90:	b2da      	uxtb	r2, r3
 801cc92:	4b04      	ldr	r3, [pc, #16]	@ (801cca4 <SD_CheckStatus+0x38>)
 801cc94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801cc96:	4b03      	ldr	r3, [pc, #12]	@ (801cca4 <SD_CheckStatus+0x38>)
 801cc98:	781b      	ldrb	r3, [r3, #0]
 801cc9a:	b2db      	uxtb	r3, r3
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	3708      	adds	r7, #8
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	24000029 	.word	0x24000029

0801cca8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b082      	sub	sp, #8
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	4603      	mov	r3, r0
 801ccb0:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801ccb2:	79fb      	ldrb	r3, [r7, #7]
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7ff ffd9 	bl	801cc6c <SD_CheckStatus>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	461a      	mov	r2, r3
 801ccbe:	4b04      	ldr	r3, [pc, #16]	@ (801ccd0 <SD_initialize+0x28>)
 801ccc0:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801ccc2:	4b03      	ldr	r3, [pc, #12]	@ (801ccd0 <SD_initialize+0x28>)
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	b2db      	uxtb	r3, r3
}
 801ccc8:	4618      	mov	r0, r3
 801ccca:	3708      	adds	r7, #8
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bd80      	pop	{r7, pc}
 801ccd0:	24000029 	.word	0x24000029

0801ccd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b082      	sub	sp, #8
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	4603      	mov	r3, r0
 801ccdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801ccde:	79fb      	ldrb	r3, [r7, #7]
 801cce0:	4618      	mov	r0, r3
 801cce2:	f7ff ffc3 	bl	801cc6c <SD_CheckStatus>
 801cce6:	4603      	mov	r3, r0
}
 801cce8:	4618      	mov	r0, r3
 801ccea:	3708      	adds	r7, #8
 801ccec:	46bd      	mov	sp, r7
 801ccee:	bd80      	pop	{r7, pc}

0801ccf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b088      	sub	sp, #32
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	60b9      	str	r1, [r7, #8]
 801ccf8:	607a      	str	r2, [r7, #4]
 801ccfa:	603b      	str	r3, [r7, #0]
 801ccfc:	4603      	mov	r3, r0
 801ccfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801cd00:	2301      	movs	r3, #1
 801cd02:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801cd04:	f247 5030 	movw	r0, #30000	@ 0x7530
 801cd08:	f7ff ff92 	bl	801cc30 <SD_CheckStatusWithTimeout>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	da01      	bge.n	801cd16 <SD_read+0x26>
  {
    return res;
 801cd12:	7ffb      	ldrb	r3, [r7, #31]
 801cd14:	e08b      	b.n	801ce2e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801cd16:	68bb      	ldr	r3, [r7, #8]
 801cd18:	f003 0303 	and.w	r3, r3, #3
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d13b      	bne.n	801cd98 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801cd20:	683a      	ldr	r2, [r7, #0]
 801cd22:	6879      	ldr	r1, [r7, #4]
 801cd24:	68b8      	ldr	r0, [r7, #8]
 801cd26:	f7ff ff1d 	bl	801cb64 <BSP_SD_ReadBlocks_DMA>
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d17d      	bne.n	801ce2c <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801cd30:	4b41      	ldr	r3, [pc, #260]	@ (801ce38 <SD_read+0x148>)
 801cd32:	2200      	movs	r2, #0
 801cd34:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801cd36:	f7f5 fdfb 	bl	8012930 <HAL_GetTick>
 801cd3a:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801cd3c:	bf00      	nop
 801cd3e:	4b3e      	ldr	r3, [pc, #248]	@ (801ce38 <SD_read+0x148>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d108      	bne.n	801cd58 <SD_read+0x68>
 801cd46:	f7f5 fdf3 	bl	8012930 <HAL_GetTick>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	697b      	ldr	r3, [r7, #20]
 801cd4e:	1ad3      	subs	r3, r2, r3
 801cd50:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cd54:	4293      	cmp	r3, r2
 801cd56:	d9f2      	bls.n	801cd3e <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801cd58:	4b37      	ldr	r3, [pc, #220]	@ (801ce38 <SD_read+0x148>)
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d102      	bne.n	801cd66 <SD_read+0x76>
      {
        res = RES_ERROR;
 801cd60:	2301      	movs	r3, #1
 801cd62:	77fb      	strb	r3, [r7, #31]
 801cd64:	e062      	b.n	801ce2c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801cd66:	4b34      	ldr	r3, [pc, #208]	@ (801ce38 <SD_read+0x148>)
 801cd68:	2200      	movs	r2, #0
 801cd6a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801cd6c:	f7f5 fde0 	bl	8012930 <HAL_GetTick>
 801cd70:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801cd72:	e007      	b.n	801cd84 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801cd74:	f7ff ff2a 	bl	801cbcc <BSP_SD_GetCardState>
 801cd78:	4603      	mov	r3, r0
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d102      	bne.n	801cd84 <SD_read+0x94>
          {
            res = RES_OK;
 801cd7e:	2300      	movs	r3, #0
 801cd80:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801cd82:	e053      	b.n	801ce2c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801cd84:	f7f5 fdd4 	bl	8012930 <HAL_GetTick>
 801cd88:	4602      	mov	r2, r0
 801cd8a:	697b      	ldr	r3, [r7, #20]
 801cd8c:	1ad3      	subs	r3, r2, r3
 801cd8e:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cd92:	4293      	cmp	r3, r2
 801cd94:	d9ee      	bls.n	801cd74 <SD_read+0x84>
 801cd96:	e049      	b.n	801ce2c <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801cd98:	2300      	movs	r3, #0
 801cd9a:	61bb      	str	r3, [r7, #24]
 801cd9c:	e037      	b.n	801ce0e <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	1c5a      	adds	r2, r3, #1
 801cda2:	607a      	str	r2, [r7, #4]
 801cda4:	2201      	movs	r2, #1
 801cda6:	4619      	mov	r1, r3
 801cda8:	4824      	ldr	r0, [pc, #144]	@ (801ce3c <SD_read+0x14c>)
 801cdaa:	f7ff fedb 	bl	801cb64 <BSP_SD_ReadBlocks_DMA>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801cdb2:	7fbb      	ldrb	r3, [r7, #30]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d12f      	bne.n	801ce18 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801cdb8:	f7f5 fdba 	bl	8012930 <HAL_GetTick>
 801cdbc:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801cdbe:	bf00      	nop
 801cdc0:	4b1d      	ldr	r3, [pc, #116]	@ (801ce38 <SD_read+0x148>)
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d108      	bne.n	801cdda <SD_read+0xea>
 801cdc8:	f7f5 fdb2 	bl	8012930 <HAL_GetTick>
 801cdcc:	4602      	mov	r2, r0
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	1ad3      	subs	r3, r2, r3
 801cdd2:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cdd6:	4293      	cmp	r3, r2
 801cdd8:	d9f2      	bls.n	801cdc0 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801cdda:	4b17      	ldr	r3, [pc, #92]	@ (801ce38 <SD_read+0x148>)
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d102      	bne.n	801cde8 <SD_read+0xf8>
          {
            res = RES_ERROR;
 801cde2:	2301      	movs	r3, #1
 801cde4:	77fb      	strb	r3, [r7, #31]
            break;
 801cde6:	e018      	b.n	801ce1a <SD_read+0x12a>
          }
          ReadStatus = 0;
 801cde8:	4b13      	ldr	r3, [pc, #76]	@ (801ce38 <SD_read+0x148>)
 801cdea:	2200      	movs	r2, #0
 801cdec:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	4a12      	ldr	r2, [pc, #72]	@ (801ce3c <SD_read+0x14c>)
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	4611      	mov	r1, r2
 801cdf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801cdfa:	461a      	mov	r2, r3
 801cdfc:	f003 fa81 	bl	8020302 <memcpy>
          buff += BLOCKSIZE;
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801ce06:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801ce08:	69bb      	ldr	r3, [r7, #24]
 801ce0a:	3301      	adds	r3, #1
 801ce0c:	61bb      	str	r3, [r7, #24]
 801ce0e:	69bb      	ldr	r3, [r7, #24]
 801ce10:	683a      	ldr	r2, [r7, #0]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d8c3      	bhi.n	801cd9e <SD_read+0xae>
 801ce16:	e000      	b.n	801ce1a <SD_read+0x12a>
        }
        else
        {
          break;
 801ce18:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801ce1a:	69bb      	ldr	r3, [r7, #24]
 801ce1c:	683a      	ldr	r2, [r7, #0]
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	d104      	bne.n	801ce2c <SD_read+0x13c>
 801ce22:	7fbb      	ldrb	r3, [r7, #30]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d101      	bne.n	801ce2c <SD_read+0x13c>
        res = RES_OK;
 801ce28:	2300      	movs	r3, #0
 801ce2a:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 801ce2c:	7ffb      	ldrb	r3, [r7, #31]
}
 801ce2e:	4618      	mov	r0, r3
 801ce30:	3720      	adds	r7, #32
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd80      	pop	{r7, pc}
 801ce36:	bf00      	nop
 801ce38:	24000a84 	.word	0x24000a84
 801ce3c:	24000880 	.word	0x24000880

0801ce40 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801ce40:	b580      	push	{r7, lr}
 801ce42:	b088      	sub	sp, #32
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	60b9      	str	r1, [r7, #8]
 801ce48:	607a      	str	r2, [r7, #4]
 801ce4a:	603b      	str	r3, [r7, #0]
 801ce4c:	4603      	mov	r3, r0
 801ce4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801ce50:	2301      	movs	r3, #1
 801ce52:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801ce54:	4b4b      	ldr	r3, [pc, #300]	@ (801cf84 <SD_write+0x144>)
 801ce56:	2200      	movs	r2, #0
 801ce58:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801ce5a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801ce5e:	f7ff fee7 	bl	801cc30 <SD_CheckStatusWithTimeout>
 801ce62:	4603      	mov	r3, r0
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	da01      	bge.n	801ce6c <SD_write+0x2c>
  {
    return res;
 801ce68:	7ffb      	ldrb	r3, [r7, #31]
 801ce6a:	e087      	b.n	801cf7c <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801ce6c:	68bb      	ldr	r3, [r7, #8]
 801ce6e:	f003 0303 	and.w	r3, r3, #3
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d138      	bne.n	801cee8 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801ce76:	683a      	ldr	r2, [r7, #0]
 801ce78:	6879      	ldr	r1, [r7, #4]
 801ce7a:	68b8      	ldr	r0, [r7, #8]
 801ce7c:	f7ff fe8c 	bl	801cb98 <BSP_SD_WriteBlocks_DMA>
 801ce80:	4603      	mov	r3, r0
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d179      	bne.n	801cf7a <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801ce86:	f7f5 fd53 	bl	8012930 <HAL_GetTick>
 801ce8a:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ce8c:	bf00      	nop
 801ce8e:	4b3d      	ldr	r3, [pc, #244]	@ (801cf84 <SD_write+0x144>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d108      	bne.n	801cea8 <SD_write+0x68>
 801ce96:	f7f5 fd4b 	bl	8012930 <HAL_GetTick>
 801ce9a:	4602      	mov	r2, r0
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	1ad3      	subs	r3, r2, r3
 801cea0:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cea4:	4293      	cmp	r3, r2
 801cea6:	d9f2      	bls.n	801ce8e <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801cea8:	4b36      	ldr	r3, [pc, #216]	@ (801cf84 <SD_write+0x144>)
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d102      	bne.n	801ceb6 <SD_write+0x76>
      {
        res = RES_ERROR;
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	77fb      	strb	r3, [r7, #31]
 801ceb4:	e061      	b.n	801cf7a <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801ceb6:	4b33      	ldr	r3, [pc, #204]	@ (801cf84 <SD_write+0x144>)
 801ceb8:	2200      	movs	r2, #0
 801ceba:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801cebc:	f7f5 fd38 	bl	8012930 <HAL_GetTick>
 801cec0:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801cec2:	e007      	b.n	801ced4 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801cec4:	f7ff fe82 	bl	801cbcc <BSP_SD_GetCardState>
 801cec8:	4603      	mov	r3, r0
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d102      	bne.n	801ced4 <SD_write+0x94>
          {
            res = RES_OK;
 801cece:	2300      	movs	r3, #0
 801ced0:	77fb      	strb	r3, [r7, #31]
            break;
 801ced2:	e052      	b.n	801cf7a <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ced4:	f7f5 fd2c 	bl	8012930 <HAL_GetTick>
 801ced8:	4602      	mov	r2, r0
 801ceda:	697b      	ldr	r3, [r7, #20]
 801cedc:	1ad3      	subs	r3, r2, r3
 801cede:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cee2:	4293      	cmp	r3, r2
 801cee4:	d9ee      	bls.n	801cec4 <SD_write+0x84>
 801cee6:	e048      	b.n	801cf7a <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801cee8:	2300      	movs	r3, #0
 801ceea:	61bb      	str	r3, [r7, #24]
 801ceec:	e034      	b.n	801cf58 <SD_write+0x118>
      {
        WriteStatus = 0;
 801ceee:	4b25      	ldr	r3, [pc, #148]	@ (801cf84 <SD_write+0x144>)
 801cef0:	2200      	movs	r2, #0
 801cef2:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801cef4:	4a24      	ldr	r2, [pc, #144]	@ (801cf88 <SD_write+0x148>)
 801cef6:	68bb      	ldr	r3, [r7, #8]
 801cef8:	4610      	mov	r0, r2
 801cefa:	4619      	mov	r1, r3
 801cefc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801cf00:	461a      	mov	r2, r3
 801cf02:	f003 f9fe 	bl	8020302 <memcpy>
        buff += BLOCKSIZE;
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801cf0c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	1c5a      	adds	r2, r3, #1
 801cf12:	607a      	str	r2, [r7, #4]
 801cf14:	2201      	movs	r2, #1
 801cf16:	4619      	mov	r1, r3
 801cf18:	481b      	ldr	r0, [pc, #108]	@ (801cf88 <SD_write+0x148>)
 801cf1a:	f7ff fe3d 	bl	801cb98 <BSP_SD_WriteBlocks_DMA>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801cf22:	7fbb      	ldrb	r3, [r7, #30]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d11c      	bne.n	801cf62 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801cf28:	f7f5 fd02 	bl	8012930 <HAL_GetTick>
 801cf2c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801cf2e:	bf00      	nop
 801cf30:	4b14      	ldr	r3, [pc, #80]	@ (801cf84 <SD_write+0x144>)
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d108      	bne.n	801cf4a <SD_write+0x10a>
 801cf38:	f7f5 fcfa 	bl	8012930 <HAL_GetTick>
 801cf3c:	4602      	mov	r2, r0
 801cf3e:	697b      	ldr	r3, [r7, #20]
 801cf40:	1ad3      	subs	r3, r2, r3
 801cf42:	f247 522f 	movw	r2, #29999	@ 0x752f
 801cf46:	4293      	cmp	r3, r2
 801cf48:	d9f2      	bls.n	801cf30 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801cf4a:	4b0e      	ldr	r3, [pc, #56]	@ (801cf84 <SD_write+0x144>)
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d009      	beq.n	801cf66 <SD_write+0x126>
      for (i = 0; i < count; i++)
 801cf52:	69bb      	ldr	r3, [r7, #24]
 801cf54:	3301      	adds	r3, #1
 801cf56:	61bb      	str	r3, [r7, #24]
 801cf58:	69bb      	ldr	r3, [r7, #24]
 801cf5a:	683a      	ldr	r2, [r7, #0]
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	d8c6      	bhi.n	801ceee <SD_write+0xae>
 801cf60:	e002      	b.n	801cf68 <SD_write+0x128>
          }

        }
        else
        {
          break;
 801cf62:	bf00      	nop
 801cf64:	e000      	b.n	801cf68 <SD_write+0x128>
            break;
 801cf66:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801cf68:	69bb      	ldr	r3, [r7, #24]
 801cf6a:	683a      	ldr	r2, [r7, #0]
 801cf6c:	429a      	cmp	r2, r3
 801cf6e:	d104      	bne.n	801cf7a <SD_write+0x13a>
 801cf70:	7fbb      	ldrb	r3, [r7, #30]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d101      	bne.n	801cf7a <SD_write+0x13a>
        res = RES_OK;
 801cf76:	2300      	movs	r3, #0
 801cf78:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801cf7a:	7ffb      	ldrb	r3, [r7, #31]
}
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	3720      	adds	r7, #32
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}
 801cf84:	24000a80 	.word	0x24000a80
 801cf88:	24000880 	.word	0x24000880

0801cf8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b08c      	sub	sp, #48	@ 0x30
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	4603      	mov	r3, r0
 801cf94:	603a      	str	r2, [r7, #0]
 801cf96:	71fb      	strb	r3, [r7, #7]
 801cf98:	460b      	mov	r3, r1
 801cf9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801cfa2:	4b25      	ldr	r3, [pc, #148]	@ (801d038 <SD_ioctl+0xac>)
 801cfa4:	781b      	ldrb	r3, [r3, #0]
 801cfa6:	b2db      	uxtb	r3, r3
 801cfa8:	f003 0301 	and.w	r3, r3, #1
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d001      	beq.n	801cfb4 <SD_ioctl+0x28>
 801cfb0:	2303      	movs	r3, #3
 801cfb2:	e03c      	b.n	801d02e <SD_ioctl+0xa2>

  switch (cmd)
 801cfb4:	79bb      	ldrb	r3, [r7, #6]
 801cfb6:	2b03      	cmp	r3, #3
 801cfb8:	d834      	bhi.n	801d024 <SD_ioctl+0x98>
 801cfba:	a201      	add	r2, pc, #4	@ (adr r2, 801cfc0 <SD_ioctl+0x34>)
 801cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfc0:	0801cfd1 	.word	0x0801cfd1
 801cfc4:	0801cfd9 	.word	0x0801cfd9
 801cfc8:	0801cff1 	.word	0x0801cff1
 801cfcc:	0801d00b 	.word	0x0801d00b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801cfd6:	e028      	b.n	801d02a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801cfd8:	f107 0308 	add.w	r3, r7, #8
 801cfdc:	4618      	mov	r0, r3
 801cfde:	f7ff fe05 	bl	801cbec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801cfe2:	6a3a      	ldr	r2, [r7, #32]
 801cfe4:	683b      	ldr	r3, [r7, #0]
 801cfe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801cfe8:	2300      	movs	r3, #0
 801cfea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801cfee:	e01c      	b.n	801d02a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801cff0:	f107 0308 	add.w	r3, r7, #8
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7ff fdf9 	bl	801cbec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cffc:	b29a      	uxth	r2, r3
 801cffe:	683b      	ldr	r3, [r7, #0]
 801d000:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801d002:	2300      	movs	r3, #0
 801d004:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801d008:	e00f      	b.n	801d02a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801d00a:	f107 0308 	add.w	r3, r7, #8
 801d00e:	4618      	mov	r0, r3
 801d010:	f7ff fdec 	bl	801cbec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d016:	0a5a      	lsrs	r2, r3, #9
 801d018:	683b      	ldr	r3, [r7, #0]
 801d01a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801d01c:	2300      	movs	r3, #0
 801d01e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801d022:	e002      	b.n	801d02a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801d024:	2304      	movs	r3, #4
 801d026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801d02a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801d02e:	4618      	mov	r0, r3
 801d030:	3730      	adds	r7, #48	@ 0x30
 801d032:	46bd      	mov	sp, r7
 801d034:	bd80      	pop	{r7, pc}
 801d036:	bf00      	nop
 801d038:	24000029 	.word	0x24000029

0801d03c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801d03c:	b480      	push	{r7}
 801d03e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801d040:	4b03      	ldr	r3, [pc, #12]	@ (801d050 <BSP_SD_WriteCpltCallback+0x14>)
 801d042:	2201      	movs	r2, #1
 801d044:	601a      	str	r2, [r3, #0]
}
 801d046:	bf00      	nop
 801d048:	46bd      	mov	sp, r7
 801d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d04e:	4770      	bx	lr
 801d050:	24000a80 	.word	0x24000a80

0801d054 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801d054:	b480      	push	{r7}
 801d056:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801d058:	4b03      	ldr	r3, [pc, #12]	@ (801d068 <BSP_SD_ReadCpltCallback+0x14>)
 801d05a:	2201      	movs	r2, #1
 801d05c:	601a      	str	r2, [r3, #0]
}
 801d05e:	bf00      	nop
 801d060:	46bd      	mov	sp, r7
 801d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d066:	4770      	bx	lr
 801d068:	24000a84 	.word	0x24000a84

0801d06c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b084      	sub	sp, #16
 801d070:	af00      	add	r7, sp, #0
 801d072:	4603      	mov	r3, r0
 801d074:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801d076:	79fb      	ldrb	r3, [r7, #7]
 801d078:	4a08      	ldr	r2, [pc, #32]	@ (801d09c <disk_status+0x30>)
 801d07a:	009b      	lsls	r3, r3, #2
 801d07c:	4413      	add	r3, r2
 801d07e:	685b      	ldr	r3, [r3, #4]
 801d080:	685b      	ldr	r3, [r3, #4]
 801d082:	79fa      	ldrb	r2, [r7, #7]
 801d084:	4905      	ldr	r1, [pc, #20]	@ (801d09c <disk_status+0x30>)
 801d086:	440a      	add	r2, r1
 801d088:	7a12      	ldrb	r2, [r2, #8]
 801d08a:	4610      	mov	r0, r2
 801d08c:	4798      	blx	r3
 801d08e:	4603      	mov	r3, r0
 801d090:	73fb      	strb	r3, [r7, #15]
  return stat;
 801d092:	7bfb      	ldrb	r3, [r7, #15]
}
 801d094:	4618      	mov	r0, r3
 801d096:	3710      	adds	r7, #16
 801d098:	46bd      	mov	sp, r7
 801d09a:	bd80      	pop	{r7, pc}
 801d09c:	24000ab0 	.word	0x24000ab0

0801d0a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b084      	sub	sp, #16
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801d0ae:	79fb      	ldrb	r3, [r7, #7]
 801d0b0:	4a0e      	ldr	r2, [pc, #56]	@ (801d0ec <disk_initialize+0x4c>)
 801d0b2:	5cd3      	ldrb	r3, [r2, r3]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d114      	bne.n	801d0e2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801d0b8:	79fb      	ldrb	r3, [r7, #7]
 801d0ba:	4a0c      	ldr	r2, [pc, #48]	@ (801d0ec <disk_initialize+0x4c>)
 801d0bc:	009b      	lsls	r3, r3, #2
 801d0be:	4413      	add	r3, r2
 801d0c0:	685b      	ldr	r3, [r3, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	79fa      	ldrb	r2, [r7, #7]
 801d0c6:	4909      	ldr	r1, [pc, #36]	@ (801d0ec <disk_initialize+0x4c>)
 801d0c8:	440a      	add	r2, r1
 801d0ca:	7a12      	ldrb	r2, [r2, #8]
 801d0cc:	4610      	mov	r0, r2
 801d0ce:	4798      	blx	r3
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801d0d4:	7bfb      	ldrb	r3, [r7, #15]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d103      	bne.n	801d0e2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801d0da:	79fb      	ldrb	r3, [r7, #7]
 801d0dc:	4a03      	ldr	r2, [pc, #12]	@ (801d0ec <disk_initialize+0x4c>)
 801d0de:	2101      	movs	r1, #1
 801d0e0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801d0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	3710      	adds	r7, #16
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	24000ab0 	.word	0x24000ab0

0801d0f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801d0f0:	b590      	push	{r4, r7, lr}
 801d0f2:	b087      	sub	sp, #28
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	60b9      	str	r1, [r7, #8]
 801d0f8:	607a      	str	r2, [r7, #4]
 801d0fa:	603b      	str	r3, [r7, #0]
 801d0fc:	4603      	mov	r3, r0
 801d0fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801d100:	7bfb      	ldrb	r3, [r7, #15]
 801d102:	4a0a      	ldr	r2, [pc, #40]	@ (801d12c <disk_read+0x3c>)
 801d104:	009b      	lsls	r3, r3, #2
 801d106:	4413      	add	r3, r2
 801d108:	685b      	ldr	r3, [r3, #4]
 801d10a:	689c      	ldr	r4, [r3, #8]
 801d10c:	7bfb      	ldrb	r3, [r7, #15]
 801d10e:	4a07      	ldr	r2, [pc, #28]	@ (801d12c <disk_read+0x3c>)
 801d110:	4413      	add	r3, r2
 801d112:	7a18      	ldrb	r0, [r3, #8]
 801d114:	683b      	ldr	r3, [r7, #0]
 801d116:	687a      	ldr	r2, [r7, #4]
 801d118:	68b9      	ldr	r1, [r7, #8]
 801d11a:	47a0      	blx	r4
 801d11c:	4603      	mov	r3, r0
 801d11e:	75fb      	strb	r3, [r7, #23]
  return res;
 801d120:	7dfb      	ldrb	r3, [r7, #23]
}
 801d122:	4618      	mov	r0, r3
 801d124:	371c      	adds	r7, #28
 801d126:	46bd      	mov	sp, r7
 801d128:	bd90      	pop	{r4, r7, pc}
 801d12a:	bf00      	nop
 801d12c:	24000ab0 	.word	0x24000ab0

0801d130 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801d130:	b590      	push	{r4, r7, lr}
 801d132:	b087      	sub	sp, #28
 801d134:	af00      	add	r7, sp, #0
 801d136:	60b9      	str	r1, [r7, #8]
 801d138:	607a      	str	r2, [r7, #4]
 801d13a:	603b      	str	r3, [r7, #0]
 801d13c:	4603      	mov	r3, r0
 801d13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801d140:	7bfb      	ldrb	r3, [r7, #15]
 801d142:	4a0a      	ldr	r2, [pc, #40]	@ (801d16c <disk_write+0x3c>)
 801d144:	009b      	lsls	r3, r3, #2
 801d146:	4413      	add	r3, r2
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	68dc      	ldr	r4, [r3, #12]
 801d14c:	7bfb      	ldrb	r3, [r7, #15]
 801d14e:	4a07      	ldr	r2, [pc, #28]	@ (801d16c <disk_write+0x3c>)
 801d150:	4413      	add	r3, r2
 801d152:	7a18      	ldrb	r0, [r3, #8]
 801d154:	683b      	ldr	r3, [r7, #0]
 801d156:	687a      	ldr	r2, [r7, #4]
 801d158:	68b9      	ldr	r1, [r7, #8]
 801d15a:	47a0      	blx	r4
 801d15c:	4603      	mov	r3, r0
 801d15e:	75fb      	strb	r3, [r7, #23]
  return res;
 801d160:	7dfb      	ldrb	r3, [r7, #23]
}
 801d162:	4618      	mov	r0, r3
 801d164:	371c      	adds	r7, #28
 801d166:	46bd      	mov	sp, r7
 801d168:	bd90      	pop	{r4, r7, pc}
 801d16a:	bf00      	nop
 801d16c:	24000ab0 	.word	0x24000ab0

0801d170 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b084      	sub	sp, #16
 801d174:	af00      	add	r7, sp, #0
 801d176:	4603      	mov	r3, r0
 801d178:	603a      	str	r2, [r7, #0]
 801d17a:	71fb      	strb	r3, [r7, #7]
 801d17c:	460b      	mov	r3, r1
 801d17e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801d180:	79fb      	ldrb	r3, [r7, #7]
 801d182:	4a09      	ldr	r2, [pc, #36]	@ (801d1a8 <disk_ioctl+0x38>)
 801d184:	009b      	lsls	r3, r3, #2
 801d186:	4413      	add	r3, r2
 801d188:	685b      	ldr	r3, [r3, #4]
 801d18a:	691b      	ldr	r3, [r3, #16]
 801d18c:	79fa      	ldrb	r2, [r7, #7]
 801d18e:	4906      	ldr	r1, [pc, #24]	@ (801d1a8 <disk_ioctl+0x38>)
 801d190:	440a      	add	r2, r1
 801d192:	7a10      	ldrb	r0, [r2, #8]
 801d194:	79b9      	ldrb	r1, [r7, #6]
 801d196:	683a      	ldr	r2, [r7, #0]
 801d198:	4798      	blx	r3
 801d19a:	4603      	mov	r3, r0
 801d19c:	73fb      	strb	r3, [r7, #15]
  return res;
 801d19e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	3710      	adds	r7, #16
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	bd80      	pop	{r7, pc}
 801d1a8:	24000ab0 	.word	0x24000ab0

0801d1ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801d1ac:	b480      	push	{r7}
 801d1ae:	b085      	sub	sp, #20
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	3301      	adds	r3, #1
 801d1b8:	781b      	ldrb	r3, [r3, #0]
 801d1ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801d1bc:	89fb      	ldrh	r3, [r7, #14]
 801d1be:	021b      	lsls	r3, r3, #8
 801d1c0:	b21a      	sxth	r2, r3
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	781b      	ldrb	r3, [r3, #0]
 801d1c6:	b21b      	sxth	r3, r3
 801d1c8:	4313      	orrs	r3, r2
 801d1ca:	b21b      	sxth	r3, r3
 801d1cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 801d1ce:	89fb      	ldrh	r3, [r7, #14]
}
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	3714      	adds	r7, #20
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1da:	4770      	bx	lr

0801d1dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801d1dc:	b480      	push	{r7}
 801d1de:	b085      	sub	sp, #20
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	3303      	adds	r3, #3
 801d1e8:	781b      	ldrb	r3, [r3, #0]
 801d1ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	021b      	lsls	r3, r3, #8
 801d1f0:	687a      	ldr	r2, [r7, #4]
 801d1f2:	3202      	adds	r2, #2
 801d1f4:	7812      	ldrb	r2, [r2, #0]
 801d1f6:	4313      	orrs	r3, r2
 801d1f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	021b      	lsls	r3, r3, #8
 801d1fe:	687a      	ldr	r2, [r7, #4]
 801d200:	3201      	adds	r2, #1
 801d202:	7812      	ldrb	r2, [r2, #0]
 801d204:	4313      	orrs	r3, r2
 801d206:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	021b      	lsls	r3, r3, #8
 801d20c:	687a      	ldr	r2, [r7, #4]
 801d20e:	7812      	ldrb	r2, [r2, #0]
 801d210:	4313      	orrs	r3, r2
 801d212:	60fb      	str	r3, [r7, #12]
	return rv;
 801d214:	68fb      	ldr	r3, [r7, #12]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3714      	adds	r7, #20
 801d21a:	46bd      	mov	sp, r7
 801d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d220:	4770      	bx	lr

0801d222 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801d222:	b480      	push	{r7}
 801d224:	b083      	sub	sp, #12
 801d226:	af00      	add	r7, sp, #0
 801d228:	6078      	str	r0, [r7, #4]
 801d22a:	460b      	mov	r3, r1
 801d22c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	1c5a      	adds	r2, r3, #1
 801d232:	607a      	str	r2, [r7, #4]
 801d234:	887a      	ldrh	r2, [r7, #2]
 801d236:	b2d2      	uxtb	r2, r2
 801d238:	701a      	strb	r2, [r3, #0]
 801d23a:	887b      	ldrh	r3, [r7, #2]
 801d23c:	0a1b      	lsrs	r3, r3, #8
 801d23e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	1c5a      	adds	r2, r3, #1
 801d244:	607a      	str	r2, [r7, #4]
 801d246:	887a      	ldrh	r2, [r7, #2]
 801d248:	b2d2      	uxtb	r2, r2
 801d24a:	701a      	strb	r2, [r3, #0]
}
 801d24c:	bf00      	nop
 801d24e:	370c      	adds	r7, #12
 801d250:	46bd      	mov	sp, r7
 801d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d256:	4770      	bx	lr

0801d258 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801d258:	b480      	push	{r7}
 801d25a:	b083      	sub	sp, #12
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
 801d260:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	1c5a      	adds	r2, r3, #1
 801d266:	607a      	str	r2, [r7, #4]
 801d268:	683a      	ldr	r2, [r7, #0]
 801d26a:	b2d2      	uxtb	r2, r2
 801d26c:	701a      	strb	r2, [r3, #0]
 801d26e:	683b      	ldr	r3, [r7, #0]
 801d270:	0a1b      	lsrs	r3, r3, #8
 801d272:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	1c5a      	adds	r2, r3, #1
 801d278:	607a      	str	r2, [r7, #4]
 801d27a:	683a      	ldr	r2, [r7, #0]
 801d27c:	b2d2      	uxtb	r2, r2
 801d27e:	701a      	strb	r2, [r3, #0]
 801d280:	683b      	ldr	r3, [r7, #0]
 801d282:	0a1b      	lsrs	r3, r3, #8
 801d284:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	1c5a      	adds	r2, r3, #1
 801d28a:	607a      	str	r2, [r7, #4]
 801d28c:	683a      	ldr	r2, [r7, #0]
 801d28e:	b2d2      	uxtb	r2, r2
 801d290:	701a      	strb	r2, [r3, #0]
 801d292:	683b      	ldr	r3, [r7, #0]
 801d294:	0a1b      	lsrs	r3, r3, #8
 801d296:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	1c5a      	adds	r2, r3, #1
 801d29c:	607a      	str	r2, [r7, #4]
 801d29e:	683a      	ldr	r2, [r7, #0]
 801d2a0:	b2d2      	uxtb	r2, r2
 801d2a2:	701a      	strb	r2, [r3, #0]
}
 801d2a4:	bf00      	nop
 801d2a6:	370c      	adds	r7, #12
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2ae:	4770      	bx	lr

0801d2b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801d2b0:	b480      	push	{r7}
 801d2b2:	b087      	sub	sp, #28
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	60f8      	str	r0, [r7, #12]
 801d2b8:	60b9      	str	r1, [r7, #8]
 801d2ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d00d      	beq.n	801d2e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801d2ca:	693a      	ldr	r2, [r7, #16]
 801d2cc:	1c53      	adds	r3, r2, #1
 801d2ce:	613b      	str	r3, [r7, #16]
 801d2d0:	697b      	ldr	r3, [r7, #20]
 801d2d2:	1c59      	adds	r1, r3, #1
 801d2d4:	6179      	str	r1, [r7, #20]
 801d2d6:	7812      	ldrb	r2, [r2, #0]
 801d2d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	3b01      	subs	r3, #1
 801d2de:	607b      	str	r3, [r7, #4]
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d1f1      	bne.n	801d2ca <mem_cpy+0x1a>
	}
}
 801d2e6:	bf00      	nop
 801d2e8:	371c      	adds	r7, #28
 801d2ea:	46bd      	mov	sp, r7
 801d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2f0:	4770      	bx	lr

0801d2f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801d2f2:	b480      	push	{r7}
 801d2f4:	b087      	sub	sp, #28
 801d2f6:	af00      	add	r7, sp, #0
 801d2f8:	60f8      	str	r0, [r7, #12]
 801d2fa:	60b9      	str	r1, [r7, #8]
 801d2fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801d302:	697b      	ldr	r3, [r7, #20]
 801d304:	1c5a      	adds	r2, r3, #1
 801d306:	617a      	str	r2, [r7, #20]
 801d308:	68ba      	ldr	r2, [r7, #8]
 801d30a:	b2d2      	uxtb	r2, r2
 801d30c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	3b01      	subs	r3, #1
 801d312:	607b      	str	r3, [r7, #4]
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d1f3      	bne.n	801d302 <mem_set+0x10>
}
 801d31a:	bf00      	nop
 801d31c:	bf00      	nop
 801d31e:	371c      	adds	r7, #28
 801d320:	46bd      	mov	sp, r7
 801d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d326:	4770      	bx	lr

0801d328 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801d328:	b480      	push	{r7}
 801d32a:	b089      	sub	sp, #36	@ 0x24
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	60f8      	str	r0, [r7, #12]
 801d330:	60b9      	str	r1, [r7, #8]
 801d332:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	61fb      	str	r3, [r7, #28]
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801d33c:	2300      	movs	r3, #0
 801d33e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801d340:	69fb      	ldr	r3, [r7, #28]
 801d342:	1c5a      	adds	r2, r3, #1
 801d344:	61fa      	str	r2, [r7, #28]
 801d346:	781b      	ldrb	r3, [r3, #0]
 801d348:	4619      	mov	r1, r3
 801d34a:	69bb      	ldr	r3, [r7, #24]
 801d34c:	1c5a      	adds	r2, r3, #1
 801d34e:	61ba      	str	r2, [r7, #24]
 801d350:	781b      	ldrb	r3, [r3, #0]
 801d352:	1acb      	subs	r3, r1, r3
 801d354:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	3b01      	subs	r3, #1
 801d35a:	607b      	str	r3, [r7, #4]
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d002      	beq.n	801d368 <mem_cmp+0x40>
 801d362:	697b      	ldr	r3, [r7, #20]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d0eb      	beq.n	801d340 <mem_cmp+0x18>

	return r;
 801d368:	697b      	ldr	r3, [r7, #20]
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	3724      	adds	r7, #36	@ 0x24
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr

0801d376 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801d376:	b480      	push	{r7}
 801d378:	b083      	sub	sp, #12
 801d37a:	af00      	add	r7, sp, #0
 801d37c:	6078      	str	r0, [r7, #4]
 801d37e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801d380:	e002      	b.n	801d388 <chk_chr+0x12>
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	3301      	adds	r3, #1
 801d386:	607b      	str	r3, [r7, #4]
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	781b      	ldrb	r3, [r3, #0]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d005      	beq.n	801d39c <chk_chr+0x26>
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	781b      	ldrb	r3, [r3, #0]
 801d394:	461a      	mov	r2, r3
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	4293      	cmp	r3, r2
 801d39a:	d1f2      	bne.n	801d382 <chk_chr+0xc>
	return *str;
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	781b      	ldrb	r3, [r3, #0]
}
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	370c      	adds	r7, #12
 801d3a4:	46bd      	mov	sp, r7
 801d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3aa:	4770      	bx	lr

0801d3ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801d3ac:	b480      	push	{r7}
 801d3ae:	b085      	sub	sp, #20
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
 801d3b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	60bb      	str	r3, [r7, #8]
 801d3ba:	68bb      	ldr	r3, [r7, #8]
 801d3bc:	60fb      	str	r3, [r7, #12]
 801d3be:	e029      	b.n	801d414 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801d3c0:	4a27      	ldr	r2, [pc, #156]	@ (801d460 <chk_lock+0xb4>)
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	011b      	lsls	r3, r3, #4
 801d3c6:	4413      	add	r3, r2
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d01d      	beq.n	801d40a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801d3ce:	4a24      	ldr	r2, [pc, #144]	@ (801d460 <chk_lock+0xb4>)
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	011b      	lsls	r3, r3, #4
 801d3d4:	4413      	add	r3, r2
 801d3d6:	681a      	ldr	r2, [r3, #0]
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	429a      	cmp	r2, r3
 801d3de:	d116      	bne.n	801d40e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801d3e0:	4a1f      	ldr	r2, [pc, #124]	@ (801d460 <chk_lock+0xb4>)
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	011b      	lsls	r3, r3, #4
 801d3e6:	4413      	add	r3, r2
 801d3e8:	3304      	adds	r3, #4
 801d3ea:	681a      	ldr	r2, [r3, #0]
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801d3f0:	429a      	cmp	r2, r3
 801d3f2:	d10c      	bne.n	801d40e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801d3f4:	4a1a      	ldr	r2, [pc, #104]	@ (801d460 <chk_lock+0xb4>)
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	011b      	lsls	r3, r3, #4
 801d3fa:	4413      	add	r3, r2
 801d3fc:	3308      	adds	r3, #8
 801d3fe:	681a      	ldr	r2, [r3, #0]
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801d404:	429a      	cmp	r2, r3
 801d406:	d102      	bne.n	801d40e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801d408:	e007      	b.n	801d41a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801d40a:	2301      	movs	r3, #1
 801d40c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	3301      	adds	r3, #1
 801d412:	60fb      	str	r3, [r7, #12]
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	2b01      	cmp	r3, #1
 801d418:	d9d2      	bls.n	801d3c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	2b02      	cmp	r3, #2
 801d41e:	d109      	bne.n	801d434 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801d420:	68bb      	ldr	r3, [r7, #8]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d102      	bne.n	801d42c <chk_lock+0x80>
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	2b02      	cmp	r3, #2
 801d42a:	d101      	bne.n	801d430 <chk_lock+0x84>
 801d42c:	2300      	movs	r3, #0
 801d42e:	e010      	b.n	801d452 <chk_lock+0xa6>
 801d430:	2312      	movs	r3, #18
 801d432:	e00e      	b.n	801d452 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801d434:	683b      	ldr	r3, [r7, #0]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d108      	bne.n	801d44c <chk_lock+0xa0>
 801d43a:	4a09      	ldr	r2, [pc, #36]	@ (801d460 <chk_lock+0xb4>)
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	011b      	lsls	r3, r3, #4
 801d440:	4413      	add	r3, r2
 801d442:	330c      	adds	r3, #12
 801d444:	881b      	ldrh	r3, [r3, #0]
 801d446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d44a:	d101      	bne.n	801d450 <chk_lock+0xa4>
 801d44c:	2310      	movs	r3, #16
 801d44e:	e000      	b.n	801d452 <chk_lock+0xa6>
 801d450:	2300      	movs	r3, #0
}
 801d452:	4618      	mov	r0, r3
 801d454:	3714      	adds	r7, #20
 801d456:	46bd      	mov	sp, r7
 801d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d45c:	4770      	bx	lr
 801d45e:	bf00      	nop
 801d460:	24000a90 	.word	0x24000a90

0801d464 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801d464:	b480      	push	{r7}
 801d466:	b083      	sub	sp, #12
 801d468:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801d46a:	2300      	movs	r3, #0
 801d46c:	607b      	str	r3, [r7, #4]
 801d46e:	e002      	b.n	801d476 <enq_lock+0x12>
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	3301      	adds	r3, #1
 801d474:	607b      	str	r3, [r7, #4]
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	2b01      	cmp	r3, #1
 801d47a:	d806      	bhi.n	801d48a <enq_lock+0x26>
 801d47c:	4a09      	ldr	r2, [pc, #36]	@ (801d4a4 <enq_lock+0x40>)
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	011b      	lsls	r3, r3, #4
 801d482:	4413      	add	r3, r2
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d1f2      	bne.n	801d470 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	2b02      	cmp	r3, #2
 801d48e:	bf14      	ite	ne
 801d490:	2301      	movne	r3, #1
 801d492:	2300      	moveq	r3, #0
 801d494:	b2db      	uxtb	r3, r3
}
 801d496:	4618      	mov	r0, r3
 801d498:	370c      	adds	r7, #12
 801d49a:	46bd      	mov	sp, r7
 801d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4a0:	4770      	bx	lr
 801d4a2:	bf00      	nop
 801d4a4:	24000a90 	.word	0x24000a90

0801d4a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801d4a8:	b480      	push	{r7}
 801d4aa:	b085      	sub	sp, #20
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	6078      	str	r0, [r7, #4]
 801d4b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	60fb      	str	r3, [r7, #12]
 801d4b6:	e01f      	b.n	801d4f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801d4b8:	4a41      	ldr	r2, [pc, #260]	@ (801d5c0 <inc_lock+0x118>)
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	011b      	lsls	r3, r3, #4
 801d4be:	4413      	add	r3, r2
 801d4c0:	681a      	ldr	r2, [r3, #0]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	429a      	cmp	r2, r3
 801d4c8:	d113      	bne.n	801d4f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801d4ca:	4a3d      	ldr	r2, [pc, #244]	@ (801d5c0 <inc_lock+0x118>)
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	011b      	lsls	r3, r3, #4
 801d4d0:	4413      	add	r3, r2
 801d4d2:	3304      	adds	r3, #4
 801d4d4:	681a      	ldr	r2, [r3, #0]
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801d4da:	429a      	cmp	r2, r3
 801d4dc:	d109      	bne.n	801d4f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801d4de:	4a38      	ldr	r2, [pc, #224]	@ (801d5c0 <inc_lock+0x118>)
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	011b      	lsls	r3, r3, #4
 801d4e4:	4413      	add	r3, r2
 801d4e6:	3308      	adds	r3, #8
 801d4e8:	681a      	ldr	r2, [r3, #0]
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801d4ee:	429a      	cmp	r2, r3
 801d4f0:	d006      	beq.n	801d500 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	3301      	adds	r3, #1
 801d4f6:	60fb      	str	r3, [r7, #12]
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	2b01      	cmp	r3, #1
 801d4fc:	d9dc      	bls.n	801d4b8 <inc_lock+0x10>
 801d4fe:	e000      	b.n	801d502 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801d500:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	2b02      	cmp	r3, #2
 801d506:	d132      	bne.n	801d56e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801d508:	2300      	movs	r3, #0
 801d50a:	60fb      	str	r3, [r7, #12]
 801d50c:	e002      	b.n	801d514 <inc_lock+0x6c>
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	3301      	adds	r3, #1
 801d512:	60fb      	str	r3, [r7, #12]
 801d514:	68fb      	ldr	r3, [r7, #12]
 801d516:	2b01      	cmp	r3, #1
 801d518:	d806      	bhi.n	801d528 <inc_lock+0x80>
 801d51a:	4a29      	ldr	r2, [pc, #164]	@ (801d5c0 <inc_lock+0x118>)
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	011b      	lsls	r3, r3, #4
 801d520:	4413      	add	r3, r2
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d1f2      	bne.n	801d50e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	2b02      	cmp	r3, #2
 801d52c:	d101      	bne.n	801d532 <inc_lock+0x8a>
 801d52e:	2300      	movs	r3, #0
 801d530:	e040      	b.n	801d5b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	681a      	ldr	r2, [r3, #0]
 801d536:	4922      	ldr	r1, [pc, #136]	@ (801d5c0 <inc_lock+0x118>)
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	011b      	lsls	r3, r3, #4
 801d53c:	440b      	add	r3, r1
 801d53e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	689a      	ldr	r2, [r3, #8]
 801d544:	491e      	ldr	r1, [pc, #120]	@ (801d5c0 <inc_lock+0x118>)
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	011b      	lsls	r3, r3, #4
 801d54a:	440b      	add	r3, r1
 801d54c:	3304      	adds	r3, #4
 801d54e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	695a      	ldr	r2, [r3, #20]
 801d554:	491a      	ldr	r1, [pc, #104]	@ (801d5c0 <inc_lock+0x118>)
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	011b      	lsls	r3, r3, #4
 801d55a:	440b      	add	r3, r1
 801d55c:	3308      	adds	r3, #8
 801d55e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801d560:	4a17      	ldr	r2, [pc, #92]	@ (801d5c0 <inc_lock+0x118>)
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	011b      	lsls	r3, r3, #4
 801d566:	4413      	add	r3, r2
 801d568:	330c      	adds	r3, #12
 801d56a:	2200      	movs	r2, #0
 801d56c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801d56e:	683b      	ldr	r3, [r7, #0]
 801d570:	2b00      	cmp	r3, #0
 801d572:	d009      	beq.n	801d588 <inc_lock+0xe0>
 801d574:	4a12      	ldr	r2, [pc, #72]	@ (801d5c0 <inc_lock+0x118>)
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	011b      	lsls	r3, r3, #4
 801d57a:	4413      	add	r3, r2
 801d57c:	330c      	adds	r3, #12
 801d57e:	881b      	ldrh	r3, [r3, #0]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d001      	beq.n	801d588 <inc_lock+0xe0>
 801d584:	2300      	movs	r3, #0
 801d586:	e015      	b.n	801d5b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801d588:	683b      	ldr	r3, [r7, #0]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d108      	bne.n	801d5a0 <inc_lock+0xf8>
 801d58e:	4a0c      	ldr	r2, [pc, #48]	@ (801d5c0 <inc_lock+0x118>)
 801d590:	68fb      	ldr	r3, [r7, #12]
 801d592:	011b      	lsls	r3, r3, #4
 801d594:	4413      	add	r3, r2
 801d596:	330c      	adds	r3, #12
 801d598:	881b      	ldrh	r3, [r3, #0]
 801d59a:	3301      	adds	r3, #1
 801d59c:	b29a      	uxth	r2, r3
 801d59e:	e001      	b.n	801d5a4 <inc_lock+0xfc>
 801d5a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d5a4:	4906      	ldr	r1, [pc, #24]	@ (801d5c0 <inc_lock+0x118>)
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	011b      	lsls	r3, r3, #4
 801d5aa:	440b      	add	r3, r1
 801d5ac:	330c      	adds	r3, #12
 801d5ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	3301      	adds	r3, #1
}
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	3714      	adds	r7, #20
 801d5b8:	46bd      	mov	sp, r7
 801d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5be:	4770      	bx	lr
 801d5c0:	24000a90 	.word	0x24000a90

0801d5c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801d5c4:	b480      	push	{r7}
 801d5c6:	b085      	sub	sp, #20
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	3b01      	subs	r3, #1
 801d5d0:	607b      	str	r3, [r7, #4]
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	2b01      	cmp	r3, #1
 801d5d6:	d825      	bhi.n	801d624 <dec_lock+0x60>
		n = Files[i].ctr;
 801d5d8:	4a17      	ldr	r2, [pc, #92]	@ (801d638 <dec_lock+0x74>)
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	011b      	lsls	r3, r3, #4
 801d5de:	4413      	add	r3, r2
 801d5e0:	330c      	adds	r3, #12
 801d5e2:	881b      	ldrh	r3, [r3, #0]
 801d5e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801d5e6:	89fb      	ldrh	r3, [r7, #14]
 801d5e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d5ec:	d101      	bne.n	801d5f2 <dec_lock+0x2e>
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801d5f2:	89fb      	ldrh	r3, [r7, #14]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d002      	beq.n	801d5fe <dec_lock+0x3a>
 801d5f8:	89fb      	ldrh	r3, [r7, #14]
 801d5fa:	3b01      	subs	r3, #1
 801d5fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801d5fe:	4a0e      	ldr	r2, [pc, #56]	@ (801d638 <dec_lock+0x74>)
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	011b      	lsls	r3, r3, #4
 801d604:	4413      	add	r3, r2
 801d606:	330c      	adds	r3, #12
 801d608:	89fa      	ldrh	r2, [r7, #14]
 801d60a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801d60c:	89fb      	ldrh	r3, [r7, #14]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d105      	bne.n	801d61e <dec_lock+0x5a>
 801d612:	4a09      	ldr	r2, [pc, #36]	@ (801d638 <dec_lock+0x74>)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	011b      	lsls	r3, r3, #4
 801d618:	4413      	add	r3, r2
 801d61a:	2200      	movs	r2, #0
 801d61c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801d61e:	2300      	movs	r3, #0
 801d620:	737b      	strb	r3, [r7, #13]
 801d622:	e001      	b.n	801d628 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801d624:	2302      	movs	r3, #2
 801d626:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801d628:	7b7b      	ldrb	r3, [r7, #13]
}
 801d62a:	4618      	mov	r0, r3
 801d62c:	3714      	adds	r7, #20
 801d62e:	46bd      	mov	sp, r7
 801d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d634:	4770      	bx	lr
 801d636:	bf00      	nop
 801d638:	24000a90 	.word	0x24000a90

0801d63c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801d63c:	b480      	push	{r7}
 801d63e:	b085      	sub	sp, #20
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801d644:	2300      	movs	r3, #0
 801d646:	60fb      	str	r3, [r7, #12]
 801d648:	e010      	b.n	801d66c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801d64a:	4a0d      	ldr	r2, [pc, #52]	@ (801d680 <clear_lock+0x44>)
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	011b      	lsls	r3, r3, #4
 801d650:	4413      	add	r3, r2
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	687a      	ldr	r2, [r7, #4]
 801d656:	429a      	cmp	r2, r3
 801d658:	d105      	bne.n	801d666 <clear_lock+0x2a>
 801d65a:	4a09      	ldr	r2, [pc, #36]	@ (801d680 <clear_lock+0x44>)
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	011b      	lsls	r3, r3, #4
 801d660:	4413      	add	r3, r2
 801d662:	2200      	movs	r2, #0
 801d664:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	3301      	adds	r3, #1
 801d66a:	60fb      	str	r3, [r7, #12]
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	2b01      	cmp	r3, #1
 801d670:	d9eb      	bls.n	801d64a <clear_lock+0xe>
	}
}
 801d672:	bf00      	nop
 801d674:	bf00      	nop
 801d676:	3714      	adds	r7, #20
 801d678:	46bd      	mov	sp, r7
 801d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d67e:	4770      	bx	lr
 801d680:	24000a90 	.word	0x24000a90

0801d684 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801d684:	b580      	push	{r7, lr}
 801d686:	b086      	sub	sp, #24
 801d688:	af00      	add	r7, sp, #0
 801d68a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801d68c:	2300      	movs	r3, #0
 801d68e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	78db      	ldrb	r3, [r3, #3]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d034      	beq.n	801d702 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d69c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	7858      	ldrb	r0, [r3, #1]
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d6a8:	2301      	movs	r3, #1
 801d6aa:	697a      	ldr	r2, [r7, #20]
 801d6ac:	f7ff fd40 	bl	801d130 <disk_write>
 801d6b0:	4603      	mov	r3, r0
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d002      	beq.n	801d6bc <sync_window+0x38>
			res = FR_DISK_ERR;
 801d6b6:	2301      	movs	r3, #1
 801d6b8:	73fb      	strb	r3, [r7, #15]
 801d6ba:	e022      	b.n	801d702 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	2200      	movs	r2, #0
 801d6c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	6a1b      	ldr	r3, [r3, #32]
 801d6c6:	697a      	ldr	r2, [r7, #20]
 801d6c8:	1ad2      	subs	r2, r2, r3
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	699b      	ldr	r3, [r3, #24]
 801d6ce:	429a      	cmp	r2, r3
 801d6d0:	d217      	bcs.n	801d702 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	789b      	ldrb	r3, [r3, #2]
 801d6d6:	613b      	str	r3, [r7, #16]
 801d6d8:	e010      	b.n	801d6fc <sync_window+0x78>
					wsect += fs->fsize;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	699b      	ldr	r3, [r3, #24]
 801d6de:	697a      	ldr	r2, [r7, #20]
 801d6e0:	4413      	add	r3, r2
 801d6e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	7858      	ldrb	r0, [r3, #1]
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d6ee:	2301      	movs	r3, #1
 801d6f0:	697a      	ldr	r2, [r7, #20]
 801d6f2:	f7ff fd1d 	bl	801d130 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	3b01      	subs	r3, #1
 801d6fa:	613b      	str	r3, [r7, #16]
 801d6fc:	693b      	ldr	r3, [r7, #16]
 801d6fe:	2b01      	cmp	r3, #1
 801d700:	d8eb      	bhi.n	801d6da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801d702:	7bfb      	ldrb	r3, [r7, #15]
}
 801d704:	4618      	mov	r0, r3
 801d706:	3718      	adds	r7, #24
 801d708:	46bd      	mov	sp, r7
 801d70a:	bd80      	pop	{r7, pc}

0801d70c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801d70c:	b580      	push	{r7, lr}
 801d70e:	b084      	sub	sp, #16
 801d710:	af00      	add	r7, sp, #0
 801d712:	6078      	str	r0, [r7, #4]
 801d714:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801d716:	2300      	movs	r3, #0
 801d718:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d71e:	683a      	ldr	r2, [r7, #0]
 801d720:	429a      	cmp	r2, r3
 801d722:	d01b      	beq.n	801d75c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801d724:	6878      	ldr	r0, [r7, #4]
 801d726:	f7ff ffad 	bl	801d684 <sync_window>
 801d72a:	4603      	mov	r3, r0
 801d72c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801d72e:	7bfb      	ldrb	r3, [r7, #15]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d113      	bne.n	801d75c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	7858      	ldrb	r0, [r3, #1]
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d73e:	2301      	movs	r3, #1
 801d740:	683a      	ldr	r2, [r7, #0]
 801d742:	f7ff fcd5 	bl	801d0f0 <disk_read>
 801d746:	4603      	mov	r3, r0
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d004      	beq.n	801d756 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801d74c:	f04f 33ff 	mov.w	r3, #4294967295
 801d750:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801d752:	2301      	movs	r3, #1
 801d754:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	683a      	ldr	r2, [r7, #0]
 801d75a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801d75c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d75e:	4618      	mov	r0, r3
 801d760:	3710      	adds	r7, #16
 801d762:	46bd      	mov	sp, r7
 801d764:	bd80      	pop	{r7, pc}
	...

0801d768 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801d768:	b580      	push	{r7, lr}
 801d76a:	b084      	sub	sp, #16
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801d770:	6878      	ldr	r0, [r7, #4]
 801d772:	f7ff ff87 	bl	801d684 <sync_window>
 801d776:	4603      	mov	r3, r0
 801d778:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d77a:	7bfb      	ldrb	r3, [r7, #15]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d158      	bne.n	801d832 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	781b      	ldrb	r3, [r3, #0]
 801d784:	2b03      	cmp	r3, #3
 801d786:	d148      	bne.n	801d81a <sync_fs+0xb2>
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	791b      	ldrb	r3, [r3, #4]
 801d78c:	2b01      	cmp	r3, #1
 801d78e:	d144      	bne.n	801d81a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	3330      	adds	r3, #48	@ 0x30
 801d794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d798:	2100      	movs	r1, #0
 801d79a:	4618      	mov	r0, r3
 801d79c:	f7ff fda9 	bl	801d2f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	3330      	adds	r3, #48	@ 0x30
 801d7a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d7a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f7ff fd38 	bl	801d222 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	3330      	adds	r3, #48	@ 0x30
 801d7b6:	4921      	ldr	r1, [pc, #132]	@ (801d83c <sync_fs+0xd4>)
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	f7ff fd4d 	bl	801d258 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	3330      	adds	r3, #48	@ 0x30
 801d7c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d7c6:	491e      	ldr	r1, [pc, #120]	@ (801d840 <sync_fs+0xd8>)
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7ff fd45 	bl	801d258 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	3330      	adds	r3, #48	@ 0x30
 801d7d2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	691b      	ldr	r3, [r3, #16]
 801d7da:	4619      	mov	r1, r3
 801d7dc:	4610      	mov	r0, r2
 801d7de:	f7ff fd3b 	bl	801d258 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	3330      	adds	r3, #48	@ 0x30
 801d7e6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	68db      	ldr	r3, [r3, #12]
 801d7ee:	4619      	mov	r1, r3
 801d7f0:	4610      	mov	r0, r2
 801d7f2:	f7ff fd31 	bl	801d258 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	69db      	ldr	r3, [r3, #28]
 801d7fa:	1c5a      	adds	r2, r3, #1
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	7858      	ldrb	r0, [r3, #1]
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d80e:	2301      	movs	r3, #1
 801d810:	f7ff fc8e 	bl	801d130 <disk_write>
			fs->fsi_flag = 0;
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	2200      	movs	r2, #0
 801d818:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	785b      	ldrb	r3, [r3, #1]
 801d81e:	2200      	movs	r2, #0
 801d820:	2100      	movs	r1, #0
 801d822:	4618      	mov	r0, r3
 801d824:	f7ff fca4 	bl	801d170 <disk_ioctl>
 801d828:	4603      	mov	r3, r0
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d001      	beq.n	801d832 <sync_fs+0xca>
 801d82e:	2301      	movs	r3, #1
 801d830:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801d832:	7bfb      	ldrb	r3, [r7, #15]
}
 801d834:	4618      	mov	r0, r3
 801d836:	3710      	adds	r7, #16
 801d838:	46bd      	mov	sp, r7
 801d83a:	bd80      	pop	{r7, pc}
 801d83c:	41615252 	.word	0x41615252
 801d840:	61417272 	.word	0x61417272

0801d844 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801d844:	b480      	push	{r7}
 801d846:	b083      	sub	sp, #12
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
 801d84c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801d84e:	683b      	ldr	r3, [r7, #0]
 801d850:	3b02      	subs	r3, #2
 801d852:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	695b      	ldr	r3, [r3, #20]
 801d858:	3b02      	subs	r3, #2
 801d85a:	683a      	ldr	r2, [r7, #0]
 801d85c:	429a      	cmp	r2, r3
 801d85e:	d301      	bcc.n	801d864 <clust2sect+0x20>
 801d860:	2300      	movs	r3, #0
 801d862:	e008      	b.n	801d876 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	895b      	ldrh	r3, [r3, #10]
 801d868:	461a      	mov	r2, r3
 801d86a:	683b      	ldr	r3, [r7, #0]
 801d86c:	fb03 f202 	mul.w	r2, r3, r2
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d874:	4413      	add	r3, r2
}
 801d876:	4618      	mov	r0, r3
 801d878:	370c      	adds	r7, #12
 801d87a:	46bd      	mov	sp, r7
 801d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d880:	4770      	bx	lr

0801d882 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801d882:	b580      	push	{r7, lr}
 801d884:	b086      	sub	sp, #24
 801d886:	af00      	add	r7, sp, #0
 801d888:	6078      	str	r0, [r7, #4]
 801d88a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801d892:	683b      	ldr	r3, [r7, #0]
 801d894:	2b01      	cmp	r3, #1
 801d896:	d904      	bls.n	801d8a2 <get_fat+0x20>
 801d898:	693b      	ldr	r3, [r7, #16]
 801d89a:	695b      	ldr	r3, [r3, #20]
 801d89c:	683a      	ldr	r2, [r7, #0]
 801d89e:	429a      	cmp	r2, r3
 801d8a0:	d302      	bcc.n	801d8a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 801d8a2:	2301      	movs	r3, #1
 801d8a4:	617b      	str	r3, [r7, #20]
 801d8a6:	e08e      	b.n	801d9c6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801d8a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801d8ae:	693b      	ldr	r3, [r7, #16]
 801d8b0:	781b      	ldrb	r3, [r3, #0]
 801d8b2:	2b03      	cmp	r3, #3
 801d8b4:	d061      	beq.n	801d97a <get_fat+0xf8>
 801d8b6:	2b03      	cmp	r3, #3
 801d8b8:	dc7b      	bgt.n	801d9b2 <get_fat+0x130>
 801d8ba:	2b01      	cmp	r3, #1
 801d8bc:	d002      	beq.n	801d8c4 <get_fat+0x42>
 801d8be:	2b02      	cmp	r3, #2
 801d8c0:	d041      	beq.n	801d946 <get_fat+0xc4>
 801d8c2:	e076      	b.n	801d9b2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801d8c4:	683b      	ldr	r3, [r7, #0]
 801d8c6:	60fb      	str	r3, [r7, #12]
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	085b      	lsrs	r3, r3, #1
 801d8cc:	68fa      	ldr	r2, [r7, #12]
 801d8ce:	4413      	add	r3, r2
 801d8d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801d8d2:	693b      	ldr	r3, [r7, #16]
 801d8d4:	6a1a      	ldr	r2, [r3, #32]
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	0a5b      	lsrs	r3, r3, #9
 801d8da:	4413      	add	r3, r2
 801d8dc:	4619      	mov	r1, r3
 801d8de:	6938      	ldr	r0, [r7, #16]
 801d8e0:	f7ff ff14 	bl	801d70c <move_window>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d166      	bne.n	801d9b8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	1c5a      	adds	r2, r3, #1
 801d8ee:	60fa      	str	r2, [r7, #12]
 801d8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d8f4:	693a      	ldr	r2, [r7, #16]
 801d8f6:	4413      	add	r3, r2
 801d8f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d8fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801d8fe:	693b      	ldr	r3, [r7, #16]
 801d900:	6a1a      	ldr	r2, [r3, #32]
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	0a5b      	lsrs	r3, r3, #9
 801d906:	4413      	add	r3, r2
 801d908:	4619      	mov	r1, r3
 801d90a:	6938      	ldr	r0, [r7, #16]
 801d90c:	f7ff fefe 	bl	801d70c <move_window>
 801d910:	4603      	mov	r3, r0
 801d912:	2b00      	cmp	r3, #0
 801d914:	d152      	bne.n	801d9bc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d91c:	693a      	ldr	r2, [r7, #16]
 801d91e:	4413      	add	r3, r2
 801d920:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d924:	021b      	lsls	r3, r3, #8
 801d926:	68ba      	ldr	r2, [r7, #8]
 801d928:	4313      	orrs	r3, r2
 801d92a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801d92c:	683b      	ldr	r3, [r7, #0]
 801d92e:	f003 0301 	and.w	r3, r3, #1
 801d932:	2b00      	cmp	r3, #0
 801d934:	d002      	beq.n	801d93c <get_fat+0xba>
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	091b      	lsrs	r3, r3, #4
 801d93a:	e002      	b.n	801d942 <get_fat+0xc0>
 801d93c:	68bb      	ldr	r3, [r7, #8]
 801d93e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d942:	617b      	str	r3, [r7, #20]
			break;
 801d944:	e03f      	b.n	801d9c6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801d946:	693b      	ldr	r3, [r7, #16]
 801d948:	6a1a      	ldr	r2, [r3, #32]
 801d94a:	683b      	ldr	r3, [r7, #0]
 801d94c:	0a1b      	lsrs	r3, r3, #8
 801d94e:	4413      	add	r3, r2
 801d950:	4619      	mov	r1, r3
 801d952:	6938      	ldr	r0, [r7, #16]
 801d954:	f7ff feda 	bl	801d70c <move_window>
 801d958:	4603      	mov	r3, r0
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d130      	bne.n	801d9c0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801d95e:	693b      	ldr	r3, [r7, #16]
 801d960:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d964:	683b      	ldr	r3, [r7, #0]
 801d966:	005b      	lsls	r3, r3, #1
 801d968:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801d96c:	4413      	add	r3, r2
 801d96e:	4618      	mov	r0, r3
 801d970:	f7ff fc1c 	bl	801d1ac <ld_word>
 801d974:	4603      	mov	r3, r0
 801d976:	617b      	str	r3, [r7, #20]
			break;
 801d978:	e025      	b.n	801d9c6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801d97a:	693b      	ldr	r3, [r7, #16]
 801d97c:	6a1a      	ldr	r2, [r3, #32]
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	09db      	lsrs	r3, r3, #7
 801d982:	4413      	add	r3, r2
 801d984:	4619      	mov	r1, r3
 801d986:	6938      	ldr	r0, [r7, #16]
 801d988:	f7ff fec0 	bl	801d70c <move_window>
 801d98c:	4603      	mov	r3, r0
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d118      	bne.n	801d9c4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801d992:	693b      	ldr	r3, [r7, #16]
 801d994:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d998:	683b      	ldr	r3, [r7, #0]
 801d99a:	009b      	lsls	r3, r3, #2
 801d99c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801d9a0:	4413      	add	r3, r2
 801d9a2:	4618      	mov	r0, r3
 801d9a4:	f7ff fc1a 	bl	801d1dc <ld_dword>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801d9ae:	617b      	str	r3, [r7, #20]
			break;
 801d9b0:	e009      	b.n	801d9c6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801d9b2:	2301      	movs	r3, #1
 801d9b4:	617b      	str	r3, [r7, #20]
 801d9b6:	e006      	b.n	801d9c6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801d9b8:	bf00      	nop
 801d9ba:	e004      	b.n	801d9c6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801d9bc:	bf00      	nop
 801d9be:	e002      	b.n	801d9c6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801d9c0:	bf00      	nop
 801d9c2:	e000      	b.n	801d9c6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801d9c4:	bf00      	nop
		}
	}

	return val;
 801d9c6:	697b      	ldr	r3, [r7, #20]
}
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	3718      	adds	r7, #24
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	bd80      	pop	{r7, pc}

0801d9d0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801d9d0:	b590      	push	{r4, r7, lr}
 801d9d2:	b089      	sub	sp, #36	@ 0x24
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	60f8      	str	r0, [r7, #12]
 801d9d8:	60b9      	str	r1, [r7, #8]
 801d9da:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801d9dc:	2302      	movs	r3, #2
 801d9de:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801d9e0:	68bb      	ldr	r3, [r7, #8]
 801d9e2:	2b01      	cmp	r3, #1
 801d9e4:	f240 80d9 	bls.w	801db9a <put_fat+0x1ca>
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	695b      	ldr	r3, [r3, #20]
 801d9ec:	68ba      	ldr	r2, [r7, #8]
 801d9ee:	429a      	cmp	r2, r3
 801d9f0:	f080 80d3 	bcs.w	801db9a <put_fat+0x1ca>
		switch (fs->fs_type) {
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	781b      	ldrb	r3, [r3, #0]
 801d9f8:	2b03      	cmp	r3, #3
 801d9fa:	f000 8096 	beq.w	801db2a <put_fat+0x15a>
 801d9fe:	2b03      	cmp	r3, #3
 801da00:	f300 80cb 	bgt.w	801db9a <put_fat+0x1ca>
 801da04:	2b01      	cmp	r3, #1
 801da06:	d002      	beq.n	801da0e <put_fat+0x3e>
 801da08:	2b02      	cmp	r3, #2
 801da0a:	d06e      	beq.n	801daea <put_fat+0x11a>
 801da0c:	e0c5      	b.n	801db9a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801da0e:	68bb      	ldr	r3, [r7, #8]
 801da10:	61bb      	str	r3, [r7, #24]
 801da12:	69bb      	ldr	r3, [r7, #24]
 801da14:	085b      	lsrs	r3, r3, #1
 801da16:	69ba      	ldr	r2, [r7, #24]
 801da18:	4413      	add	r3, r2
 801da1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	6a1a      	ldr	r2, [r3, #32]
 801da20:	69bb      	ldr	r3, [r7, #24]
 801da22:	0a5b      	lsrs	r3, r3, #9
 801da24:	4413      	add	r3, r2
 801da26:	4619      	mov	r1, r3
 801da28:	68f8      	ldr	r0, [r7, #12]
 801da2a:	f7ff fe6f 	bl	801d70c <move_window>
 801da2e:	4603      	mov	r3, r0
 801da30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801da32:	7ffb      	ldrb	r3, [r7, #31]
 801da34:	2b00      	cmp	r3, #0
 801da36:	f040 80a9 	bne.w	801db8c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801da40:	69bb      	ldr	r3, [r7, #24]
 801da42:	1c59      	adds	r1, r3, #1
 801da44:	61b9      	str	r1, [r7, #24]
 801da46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da4a:	4413      	add	r3, r2
 801da4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801da4e:	68bb      	ldr	r3, [r7, #8]
 801da50:	f003 0301 	and.w	r3, r3, #1
 801da54:	2b00      	cmp	r3, #0
 801da56:	d00d      	beq.n	801da74 <put_fat+0xa4>
 801da58:	697b      	ldr	r3, [r7, #20]
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	b25b      	sxtb	r3, r3
 801da5e:	f003 030f 	and.w	r3, r3, #15
 801da62:	b25a      	sxtb	r2, r3
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	b2db      	uxtb	r3, r3
 801da68:	011b      	lsls	r3, r3, #4
 801da6a:	b25b      	sxtb	r3, r3
 801da6c:	4313      	orrs	r3, r2
 801da6e:	b25b      	sxtb	r3, r3
 801da70:	b2db      	uxtb	r3, r3
 801da72:	e001      	b.n	801da78 <put_fat+0xa8>
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	b2db      	uxtb	r3, r3
 801da78:	697a      	ldr	r2, [r7, #20]
 801da7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	2201      	movs	r2, #1
 801da80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	6a1a      	ldr	r2, [r3, #32]
 801da86:	69bb      	ldr	r3, [r7, #24]
 801da88:	0a5b      	lsrs	r3, r3, #9
 801da8a:	4413      	add	r3, r2
 801da8c:	4619      	mov	r1, r3
 801da8e:	68f8      	ldr	r0, [r7, #12]
 801da90:	f7ff fe3c 	bl	801d70c <move_window>
 801da94:	4603      	mov	r3, r0
 801da96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801da98:	7ffb      	ldrb	r3, [r7, #31]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d178      	bne.n	801db90 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801daa4:	69bb      	ldr	r3, [r7, #24]
 801daa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801daaa:	4413      	add	r3, r2
 801daac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801daae:	68bb      	ldr	r3, [r7, #8]
 801dab0:	f003 0301 	and.w	r3, r3, #1
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d003      	beq.n	801dac0 <put_fat+0xf0>
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	091b      	lsrs	r3, r3, #4
 801dabc:	b2db      	uxtb	r3, r3
 801dabe:	e00e      	b.n	801dade <put_fat+0x10e>
 801dac0:	697b      	ldr	r3, [r7, #20]
 801dac2:	781b      	ldrb	r3, [r3, #0]
 801dac4:	b25b      	sxtb	r3, r3
 801dac6:	f023 030f 	bic.w	r3, r3, #15
 801daca:	b25a      	sxtb	r2, r3
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	0a1b      	lsrs	r3, r3, #8
 801dad0:	b25b      	sxtb	r3, r3
 801dad2:	f003 030f 	and.w	r3, r3, #15
 801dad6:	b25b      	sxtb	r3, r3
 801dad8:	4313      	orrs	r3, r2
 801dada:	b25b      	sxtb	r3, r3
 801dadc:	b2db      	uxtb	r3, r3
 801dade:	697a      	ldr	r2, [r7, #20]
 801dae0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	2201      	movs	r2, #1
 801dae6:	70da      	strb	r2, [r3, #3]
			break;
 801dae8:	e057      	b.n	801db9a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	6a1a      	ldr	r2, [r3, #32]
 801daee:	68bb      	ldr	r3, [r7, #8]
 801daf0:	0a1b      	lsrs	r3, r3, #8
 801daf2:	4413      	add	r3, r2
 801daf4:	4619      	mov	r1, r3
 801daf6:	68f8      	ldr	r0, [r7, #12]
 801daf8:	f7ff fe08 	bl	801d70c <move_window>
 801dafc:	4603      	mov	r3, r0
 801dafe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801db00:	7ffb      	ldrb	r3, [r7, #31]
 801db02:	2b00      	cmp	r3, #0
 801db04:	d146      	bne.n	801db94 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801db0c:	68bb      	ldr	r3, [r7, #8]
 801db0e:	005b      	lsls	r3, r3, #1
 801db10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801db14:	4413      	add	r3, r2
 801db16:	687a      	ldr	r2, [r7, #4]
 801db18:	b292      	uxth	r2, r2
 801db1a:	4611      	mov	r1, r2
 801db1c:	4618      	mov	r0, r3
 801db1e:	f7ff fb80 	bl	801d222 <st_word>
			fs->wflag = 1;
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	2201      	movs	r2, #1
 801db26:	70da      	strb	r2, [r3, #3]
			break;
 801db28:	e037      	b.n	801db9a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	6a1a      	ldr	r2, [r3, #32]
 801db2e:	68bb      	ldr	r3, [r7, #8]
 801db30:	09db      	lsrs	r3, r3, #7
 801db32:	4413      	add	r3, r2
 801db34:	4619      	mov	r1, r3
 801db36:	68f8      	ldr	r0, [r7, #12]
 801db38:	f7ff fde8 	bl	801d70c <move_window>
 801db3c:	4603      	mov	r3, r0
 801db3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801db40:	7ffb      	ldrb	r3, [r7, #31]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d128      	bne.n	801db98 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801db52:	68bb      	ldr	r3, [r7, #8]
 801db54:	009b      	lsls	r3, r3, #2
 801db56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801db5a:	4413      	add	r3, r2
 801db5c:	4618      	mov	r0, r3
 801db5e:	f7ff fb3d 	bl	801d1dc <ld_dword>
 801db62:	4603      	mov	r3, r0
 801db64:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801db68:	4323      	orrs	r3, r4
 801db6a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801db72:	68bb      	ldr	r3, [r7, #8]
 801db74:	009b      	lsls	r3, r3, #2
 801db76:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801db7a:	4413      	add	r3, r2
 801db7c:	6879      	ldr	r1, [r7, #4]
 801db7e:	4618      	mov	r0, r3
 801db80:	f7ff fb6a 	bl	801d258 <st_dword>
			fs->wflag = 1;
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	2201      	movs	r2, #1
 801db88:	70da      	strb	r2, [r3, #3]
			break;
 801db8a:	e006      	b.n	801db9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801db8c:	bf00      	nop
 801db8e:	e004      	b.n	801db9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801db90:	bf00      	nop
 801db92:	e002      	b.n	801db9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801db94:	bf00      	nop
 801db96:	e000      	b.n	801db9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 801db98:	bf00      	nop
		}
	}
	return res;
 801db9a:	7ffb      	ldrb	r3, [r7, #31]
}
 801db9c:	4618      	mov	r0, r3
 801db9e:	3724      	adds	r7, #36	@ 0x24
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bd90      	pop	{r4, r7, pc}

0801dba4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801dba4:	b580      	push	{r7, lr}
 801dba6:	b088      	sub	sp, #32
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	60f8      	str	r0, [r7, #12]
 801dbac:	60b9      	str	r1, [r7, #8]
 801dbae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801dbba:	68bb      	ldr	r3, [r7, #8]
 801dbbc:	2b01      	cmp	r3, #1
 801dbbe:	d904      	bls.n	801dbca <remove_chain+0x26>
 801dbc0:	69bb      	ldr	r3, [r7, #24]
 801dbc2:	695b      	ldr	r3, [r3, #20]
 801dbc4:	68ba      	ldr	r2, [r7, #8]
 801dbc6:	429a      	cmp	r2, r3
 801dbc8:	d301      	bcc.n	801dbce <remove_chain+0x2a>
 801dbca:	2302      	movs	r3, #2
 801dbcc:	e04b      	b.n	801dc66 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d00c      	beq.n	801dbee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801dbd4:	f04f 32ff 	mov.w	r2, #4294967295
 801dbd8:	6879      	ldr	r1, [r7, #4]
 801dbda:	69b8      	ldr	r0, [r7, #24]
 801dbdc:	f7ff fef8 	bl	801d9d0 <put_fat>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801dbe4:	7ffb      	ldrb	r3, [r7, #31]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d001      	beq.n	801dbee <remove_chain+0x4a>
 801dbea:	7ffb      	ldrb	r3, [r7, #31]
 801dbec:	e03b      	b.n	801dc66 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801dbee:	68b9      	ldr	r1, [r7, #8]
 801dbf0:	68f8      	ldr	r0, [r7, #12]
 801dbf2:	f7ff fe46 	bl	801d882 <get_fat>
 801dbf6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801dbf8:	697b      	ldr	r3, [r7, #20]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d031      	beq.n	801dc62 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801dbfe:	697b      	ldr	r3, [r7, #20]
 801dc00:	2b01      	cmp	r3, #1
 801dc02:	d101      	bne.n	801dc08 <remove_chain+0x64>
 801dc04:	2302      	movs	r3, #2
 801dc06:	e02e      	b.n	801dc66 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801dc08:	697b      	ldr	r3, [r7, #20]
 801dc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc0e:	d101      	bne.n	801dc14 <remove_chain+0x70>
 801dc10:	2301      	movs	r3, #1
 801dc12:	e028      	b.n	801dc66 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801dc14:	2200      	movs	r2, #0
 801dc16:	68b9      	ldr	r1, [r7, #8]
 801dc18:	69b8      	ldr	r0, [r7, #24]
 801dc1a:	f7ff fed9 	bl	801d9d0 <put_fat>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801dc22:	7ffb      	ldrb	r3, [r7, #31]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d001      	beq.n	801dc2c <remove_chain+0x88>
 801dc28:	7ffb      	ldrb	r3, [r7, #31]
 801dc2a:	e01c      	b.n	801dc66 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801dc2c:	69bb      	ldr	r3, [r7, #24]
 801dc2e:	691a      	ldr	r2, [r3, #16]
 801dc30:	69bb      	ldr	r3, [r7, #24]
 801dc32:	695b      	ldr	r3, [r3, #20]
 801dc34:	3b02      	subs	r3, #2
 801dc36:	429a      	cmp	r2, r3
 801dc38:	d20b      	bcs.n	801dc52 <remove_chain+0xae>
			fs->free_clst++;
 801dc3a:	69bb      	ldr	r3, [r7, #24]
 801dc3c:	691b      	ldr	r3, [r3, #16]
 801dc3e:	1c5a      	adds	r2, r3, #1
 801dc40:	69bb      	ldr	r3, [r7, #24]
 801dc42:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801dc44:	69bb      	ldr	r3, [r7, #24]
 801dc46:	791b      	ldrb	r3, [r3, #4]
 801dc48:	f043 0301 	orr.w	r3, r3, #1
 801dc4c:	b2da      	uxtb	r2, r3
 801dc4e:	69bb      	ldr	r3, [r7, #24]
 801dc50:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801dc56:	69bb      	ldr	r3, [r7, #24]
 801dc58:	695b      	ldr	r3, [r3, #20]
 801dc5a:	68ba      	ldr	r2, [r7, #8]
 801dc5c:	429a      	cmp	r2, r3
 801dc5e:	d3c6      	bcc.n	801dbee <remove_chain+0x4a>
 801dc60:	e000      	b.n	801dc64 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801dc62:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801dc64:	2300      	movs	r3, #0
}
 801dc66:	4618      	mov	r0, r3
 801dc68:	3720      	adds	r7, #32
 801dc6a:	46bd      	mov	sp, r7
 801dc6c:	bd80      	pop	{r7, pc}

0801dc6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801dc6e:	b580      	push	{r7, lr}
 801dc70:	b088      	sub	sp, #32
 801dc72:	af00      	add	r7, sp, #0
 801dc74:	6078      	str	r0, [r7, #4]
 801dc76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d10d      	bne.n	801dca0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801dc84:	693b      	ldr	r3, [r7, #16]
 801dc86:	68db      	ldr	r3, [r3, #12]
 801dc88:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801dc8a:	69bb      	ldr	r3, [r7, #24]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d004      	beq.n	801dc9a <create_chain+0x2c>
 801dc90:	693b      	ldr	r3, [r7, #16]
 801dc92:	695b      	ldr	r3, [r3, #20]
 801dc94:	69ba      	ldr	r2, [r7, #24]
 801dc96:	429a      	cmp	r2, r3
 801dc98:	d31b      	bcc.n	801dcd2 <create_chain+0x64>
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	61bb      	str	r3, [r7, #24]
 801dc9e:	e018      	b.n	801dcd2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801dca0:	6839      	ldr	r1, [r7, #0]
 801dca2:	6878      	ldr	r0, [r7, #4]
 801dca4:	f7ff fded 	bl	801d882 <get_fat>
 801dca8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	2b01      	cmp	r3, #1
 801dcae:	d801      	bhi.n	801dcb4 <create_chain+0x46>
 801dcb0:	2301      	movs	r3, #1
 801dcb2:	e070      	b.n	801dd96 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcba:	d101      	bne.n	801dcc0 <create_chain+0x52>
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	e06a      	b.n	801dd96 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801dcc0:	693b      	ldr	r3, [r7, #16]
 801dcc2:	695b      	ldr	r3, [r3, #20]
 801dcc4:	68fa      	ldr	r2, [r7, #12]
 801dcc6:	429a      	cmp	r2, r3
 801dcc8:	d201      	bcs.n	801dcce <create_chain+0x60>
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	e063      	b.n	801dd96 <create_chain+0x128>
		scl = clst;
 801dcce:	683b      	ldr	r3, [r7, #0]
 801dcd0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801dcd2:	69bb      	ldr	r3, [r7, #24]
 801dcd4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801dcd6:	69fb      	ldr	r3, [r7, #28]
 801dcd8:	3301      	adds	r3, #1
 801dcda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801dcdc:	693b      	ldr	r3, [r7, #16]
 801dcde:	695b      	ldr	r3, [r3, #20]
 801dce0:	69fa      	ldr	r2, [r7, #28]
 801dce2:	429a      	cmp	r2, r3
 801dce4:	d307      	bcc.n	801dcf6 <create_chain+0x88>
				ncl = 2;
 801dce6:	2302      	movs	r3, #2
 801dce8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801dcea:	69fa      	ldr	r2, [r7, #28]
 801dcec:	69bb      	ldr	r3, [r7, #24]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	d901      	bls.n	801dcf6 <create_chain+0x88>
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	e04f      	b.n	801dd96 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801dcf6:	69f9      	ldr	r1, [r7, #28]
 801dcf8:	6878      	ldr	r0, [r7, #4]
 801dcfa:	f7ff fdc2 	bl	801d882 <get_fat>
 801dcfe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d00e      	beq.n	801dd24 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	2b01      	cmp	r3, #1
 801dd0a:	d003      	beq.n	801dd14 <create_chain+0xa6>
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd12:	d101      	bne.n	801dd18 <create_chain+0xaa>
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	e03e      	b.n	801dd96 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801dd18:	69fa      	ldr	r2, [r7, #28]
 801dd1a:	69bb      	ldr	r3, [r7, #24]
 801dd1c:	429a      	cmp	r2, r3
 801dd1e:	d1da      	bne.n	801dcd6 <create_chain+0x68>
 801dd20:	2300      	movs	r3, #0
 801dd22:	e038      	b.n	801dd96 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801dd24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801dd26:	f04f 32ff 	mov.w	r2, #4294967295
 801dd2a:	69f9      	ldr	r1, [r7, #28]
 801dd2c:	6938      	ldr	r0, [r7, #16]
 801dd2e:	f7ff fe4f 	bl	801d9d0 <put_fat>
 801dd32:	4603      	mov	r3, r0
 801dd34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801dd36:	7dfb      	ldrb	r3, [r7, #23]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d109      	bne.n	801dd50 <create_chain+0xe2>
 801dd3c:	683b      	ldr	r3, [r7, #0]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d006      	beq.n	801dd50 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801dd42:	69fa      	ldr	r2, [r7, #28]
 801dd44:	6839      	ldr	r1, [r7, #0]
 801dd46:	6938      	ldr	r0, [r7, #16]
 801dd48:	f7ff fe42 	bl	801d9d0 <put_fat>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801dd50:	7dfb      	ldrb	r3, [r7, #23]
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d116      	bne.n	801dd84 <create_chain+0x116>
		fs->last_clst = ncl;
 801dd56:	693b      	ldr	r3, [r7, #16]
 801dd58:	69fa      	ldr	r2, [r7, #28]
 801dd5a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801dd5c:	693b      	ldr	r3, [r7, #16]
 801dd5e:	691a      	ldr	r2, [r3, #16]
 801dd60:	693b      	ldr	r3, [r7, #16]
 801dd62:	695b      	ldr	r3, [r3, #20]
 801dd64:	3b02      	subs	r3, #2
 801dd66:	429a      	cmp	r2, r3
 801dd68:	d804      	bhi.n	801dd74 <create_chain+0x106>
 801dd6a:	693b      	ldr	r3, [r7, #16]
 801dd6c:	691b      	ldr	r3, [r3, #16]
 801dd6e:	1e5a      	subs	r2, r3, #1
 801dd70:	693b      	ldr	r3, [r7, #16]
 801dd72:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801dd74:	693b      	ldr	r3, [r7, #16]
 801dd76:	791b      	ldrb	r3, [r3, #4]
 801dd78:	f043 0301 	orr.w	r3, r3, #1
 801dd7c:	b2da      	uxtb	r2, r3
 801dd7e:	693b      	ldr	r3, [r7, #16]
 801dd80:	711a      	strb	r2, [r3, #4]
 801dd82:	e007      	b.n	801dd94 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801dd84:	7dfb      	ldrb	r3, [r7, #23]
 801dd86:	2b01      	cmp	r3, #1
 801dd88:	d102      	bne.n	801dd90 <create_chain+0x122>
 801dd8a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd8e:	e000      	b.n	801dd92 <create_chain+0x124>
 801dd90:	2301      	movs	r3, #1
 801dd92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801dd94:	69fb      	ldr	r3, [r7, #28]
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	3720      	adds	r7, #32
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bd80      	pop	{r7, pc}

0801dd9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801dd9e:	b480      	push	{r7}
 801dda0:	b087      	sub	sp, #28
 801dda2:	af00      	add	r7, sp, #0
 801dda4:	6078      	str	r0, [r7, #4]
 801dda6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ddb2:	3304      	adds	r3, #4
 801ddb4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801ddb6:	683b      	ldr	r3, [r7, #0]
 801ddb8:	0a5b      	lsrs	r3, r3, #9
 801ddba:	68fa      	ldr	r2, [r7, #12]
 801ddbc:	8952      	ldrh	r2, [r2, #10]
 801ddbe:	fbb3 f3f2 	udiv	r3, r3, r2
 801ddc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ddc4:	693b      	ldr	r3, [r7, #16]
 801ddc6:	1d1a      	adds	r2, r3, #4
 801ddc8:	613a      	str	r2, [r7, #16]
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801ddce:	68bb      	ldr	r3, [r7, #8]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d101      	bne.n	801ddd8 <clmt_clust+0x3a>
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	e010      	b.n	801ddfa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801ddd8:	697a      	ldr	r2, [r7, #20]
 801ddda:	68bb      	ldr	r3, [r7, #8]
 801dddc:	429a      	cmp	r2, r3
 801ddde:	d307      	bcc.n	801ddf0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801dde0:	697a      	ldr	r2, [r7, #20]
 801dde2:	68bb      	ldr	r3, [r7, #8]
 801dde4:	1ad3      	subs	r3, r2, r3
 801dde6:	617b      	str	r3, [r7, #20]
 801dde8:	693b      	ldr	r3, [r7, #16]
 801ddea:	3304      	adds	r3, #4
 801ddec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ddee:	e7e9      	b.n	801ddc4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801ddf0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801ddf2:	693b      	ldr	r3, [r7, #16]
 801ddf4:	681a      	ldr	r2, [r3, #0]
 801ddf6:	697b      	ldr	r3, [r7, #20]
 801ddf8:	4413      	add	r3, r2
}
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	371c      	adds	r7, #28
 801ddfe:	46bd      	mov	sp, r7
 801de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de04:	4770      	bx	lr

0801de06 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801de06:	b580      	push	{r7, lr}
 801de08:	b086      	sub	sp, #24
 801de0a:	af00      	add	r7, sp, #0
 801de0c:	6078      	str	r0, [r7, #4]
 801de0e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801de16:	683b      	ldr	r3, [r7, #0]
 801de18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801de1c:	d204      	bcs.n	801de28 <dir_sdi+0x22>
 801de1e:	683b      	ldr	r3, [r7, #0]
 801de20:	f003 031f 	and.w	r3, r3, #31
 801de24:	2b00      	cmp	r3, #0
 801de26:	d001      	beq.n	801de2c <dir_sdi+0x26>
		return FR_INT_ERR;
 801de28:	2302      	movs	r3, #2
 801de2a:	e063      	b.n	801def4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	683a      	ldr	r2, [r7, #0]
 801de30:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	689b      	ldr	r3, [r3, #8]
 801de36:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801de38:	697b      	ldr	r3, [r7, #20]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d106      	bne.n	801de4c <dir_sdi+0x46>
 801de3e:	693b      	ldr	r3, [r7, #16]
 801de40:	781b      	ldrb	r3, [r3, #0]
 801de42:	2b02      	cmp	r3, #2
 801de44:	d902      	bls.n	801de4c <dir_sdi+0x46>
		clst = fs->dirbase;
 801de46:	693b      	ldr	r3, [r7, #16]
 801de48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801de4a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801de4c:	697b      	ldr	r3, [r7, #20]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d10c      	bne.n	801de6c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801de52:	683b      	ldr	r3, [r7, #0]
 801de54:	095b      	lsrs	r3, r3, #5
 801de56:	693a      	ldr	r2, [r7, #16]
 801de58:	8912      	ldrh	r2, [r2, #8]
 801de5a:	4293      	cmp	r3, r2
 801de5c:	d301      	bcc.n	801de62 <dir_sdi+0x5c>
 801de5e:	2302      	movs	r3, #2
 801de60:	e048      	b.n	801def4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801de62:	693b      	ldr	r3, [r7, #16]
 801de64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	61da      	str	r2, [r3, #28]
 801de6a:	e029      	b.n	801dec0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801de6c:	693b      	ldr	r3, [r7, #16]
 801de6e:	895b      	ldrh	r3, [r3, #10]
 801de70:	025b      	lsls	r3, r3, #9
 801de72:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801de74:	e019      	b.n	801deaa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	6979      	ldr	r1, [r7, #20]
 801de7a:	4618      	mov	r0, r3
 801de7c:	f7ff fd01 	bl	801d882 <get_fat>
 801de80:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801de82:	697b      	ldr	r3, [r7, #20]
 801de84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de88:	d101      	bne.n	801de8e <dir_sdi+0x88>
 801de8a:	2301      	movs	r3, #1
 801de8c:	e032      	b.n	801def4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801de8e:	697b      	ldr	r3, [r7, #20]
 801de90:	2b01      	cmp	r3, #1
 801de92:	d904      	bls.n	801de9e <dir_sdi+0x98>
 801de94:	693b      	ldr	r3, [r7, #16]
 801de96:	695b      	ldr	r3, [r3, #20]
 801de98:	697a      	ldr	r2, [r7, #20]
 801de9a:	429a      	cmp	r2, r3
 801de9c:	d301      	bcc.n	801dea2 <dir_sdi+0x9c>
 801de9e:	2302      	movs	r3, #2
 801dea0:	e028      	b.n	801def4 <dir_sdi+0xee>
			ofs -= csz;
 801dea2:	683a      	ldr	r2, [r7, #0]
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	1ad3      	subs	r3, r2, r3
 801dea8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801deaa:	683a      	ldr	r2, [r7, #0]
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	429a      	cmp	r2, r3
 801deb0:	d2e1      	bcs.n	801de76 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801deb2:	6979      	ldr	r1, [r7, #20]
 801deb4:	6938      	ldr	r0, [r7, #16]
 801deb6:	f7ff fcc5 	bl	801d844 <clust2sect>
 801deba:	4602      	mov	r2, r0
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	697a      	ldr	r2, [r7, #20]
 801dec4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	69db      	ldr	r3, [r3, #28]
 801deca:	2b00      	cmp	r3, #0
 801decc:	d101      	bne.n	801ded2 <dir_sdi+0xcc>
 801dece:	2302      	movs	r3, #2
 801ded0:	e010      	b.n	801def4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	69da      	ldr	r2, [r3, #28]
 801ded6:	683b      	ldr	r3, [r7, #0]
 801ded8:	0a5b      	lsrs	r3, r3, #9
 801deda:	441a      	add	r2, r3
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801dee0:	693b      	ldr	r3, [r7, #16]
 801dee2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801dee6:	683b      	ldr	r3, [r7, #0]
 801dee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801deec:	441a      	add	r2, r3
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801def2:	2300      	movs	r3, #0
}
 801def4:	4618      	mov	r0, r3
 801def6:	3718      	adds	r7, #24
 801def8:	46bd      	mov	sp, r7
 801defa:	bd80      	pop	{r7, pc}

0801defc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b086      	sub	sp, #24
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]
 801df04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	695b      	ldr	r3, [r3, #20]
 801df10:	3320      	adds	r3, #32
 801df12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	69db      	ldr	r3, [r3, #28]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d003      	beq.n	801df24 <dir_next+0x28>
 801df1c:	68bb      	ldr	r3, [r7, #8]
 801df1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801df22:	d301      	bcc.n	801df28 <dir_next+0x2c>
 801df24:	2304      	movs	r3, #4
 801df26:	e0aa      	b.n	801e07e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801df28:	68bb      	ldr	r3, [r7, #8]
 801df2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df2e:	2b00      	cmp	r3, #0
 801df30:	f040 8098 	bne.w	801e064 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	69db      	ldr	r3, [r3, #28]
 801df38:	1c5a      	adds	r2, r3, #1
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	699b      	ldr	r3, [r3, #24]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d10b      	bne.n	801df5e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801df46:	68bb      	ldr	r3, [r7, #8]
 801df48:	095b      	lsrs	r3, r3, #5
 801df4a:	68fa      	ldr	r2, [r7, #12]
 801df4c:	8912      	ldrh	r2, [r2, #8]
 801df4e:	4293      	cmp	r3, r2
 801df50:	f0c0 8088 	bcc.w	801e064 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	2200      	movs	r2, #0
 801df58:	61da      	str	r2, [r3, #28]
 801df5a:	2304      	movs	r3, #4
 801df5c:	e08f      	b.n	801e07e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801df5e:	68bb      	ldr	r3, [r7, #8]
 801df60:	0a5b      	lsrs	r3, r3, #9
 801df62:	68fa      	ldr	r2, [r7, #12]
 801df64:	8952      	ldrh	r2, [r2, #10]
 801df66:	3a01      	subs	r2, #1
 801df68:	4013      	ands	r3, r2
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d17a      	bne.n	801e064 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801df6e:	687a      	ldr	r2, [r7, #4]
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	699b      	ldr	r3, [r3, #24]
 801df74:	4619      	mov	r1, r3
 801df76:	4610      	mov	r0, r2
 801df78:	f7ff fc83 	bl	801d882 <get_fat>
 801df7c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	2b01      	cmp	r3, #1
 801df82:	d801      	bhi.n	801df88 <dir_next+0x8c>
 801df84:	2302      	movs	r3, #2
 801df86:	e07a      	b.n	801e07e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801df88:	697b      	ldr	r3, [r7, #20]
 801df8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df8e:	d101      	bne.n	801df94 <dir_next+0x98>
 801df90:	2301      	movs	r3, #1
 801df92:	e074      	b.n	801e07e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	695b      	ldr	r3, [r3, #20]
 801df98:	697a      	ldr	r2, [r7, #20]
 801df9a:	429a      	cmp	r2, r3
 801df9c:	d358      	bcc.n	801e050 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801df9e:	683b      	ldr	r3, [r7, #0]
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d104      	bne.n	801dfae <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	61da      	str	r2, [r3, #28]
 801dfaa:	2304      	movs	r3, #4
 801dfac:	e067      	b.n	801e07e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801dfae:	687a      	ldr	r2, [r7, #4]
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	699b      	ldr	r3, [r3, #24]
 801dfb4:	4619      	mov	r1, r3
 801dfb6:	4610      	mov	r0, r2
 801dfb8:	f7ff fe59 	bl	801dc6e <create_chain>
 801dfbc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801dfbe:	697b      	ldr	r3, [r7, #20]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d101      	bne.n	801dfc8 <dir_next+0xcc>
 801dfc4:	2307      	movs	r3, #7
 801dfc6:	e05a      	b.n	801e07e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801dfc8:	697b      	ldr	r3, [r7, #20]
 801dfca:	2b01      	cmp	r3, #1
 801dfcc:	d101      	bne.n	801dfd2 <dir_next+0xd6>
 801dfce:	2302      	movs	r3, #2
 801dfd0:	e055      	b.n	801e07e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801dfd2:	697b      	ldr	r3, [r7, #20]
 801dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dfd8:	d101      	bne.n	801dfde <dir_next+0xe2>
 801dfda:	2301      	movs	r3, #1
 801dfdc:	e04f      	b.n	801e07e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801dfde:	68f8      	ldr	r0, [r7, #12]
 801dfe0:	f7ff fb50 	bl	801d684 <sync_window>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d001      	beq.n	801dfee <dir_next+0xf2>
 801dfea:	2301      	movs	r3, #1
 801dfec:	e047      	b.n	801e07e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	3330      	adds	r3, #48	@ 0x30
 801dff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dff6:	2100      	movs	r1, #0
 801dff8:	4618      	mov	r0, r3
 801dffa:	f7ff f97a 	bl	801d2f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801dffe:	2300      	movs	r3, #0
 801e000:	613b      	str	r3, [r7, #16]
 801e002:	6979      	ldr	r1, [r7, #20]
 801e004:	68f8      	ldr	r0, [r7, #12]
 801e006:	f7ff fc1d 	bl	801d844 <clust2sect>
 801e00a:	4602      	mov	r2, r0
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	62da      	str	r2, [r3, #44]	@ 0x2c
 801e010:	e012      	b.n	801e038 <dir_next+0x13c>
						fs->wflag = 1;
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	2201      	movs	r2, #1
 801e016:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801e018:	68f8      	ldr	r0, [r7, #12]
 801e01a:	f7ff fb33 	bl	801d684 <sync_window>
 801e01e:	4603      	mov	r3, r0
 801e020:	2b00      	cmp	r3, #0
 801e022:	d001      	beq.n	801e028 <dir_next+0x12c>
 801e024:	2301      	movs	r3, #1
 801e026:	e02a      	b.n	801e07e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801e028:	693b      	ldr	r3, [r7, #16]
 801e02a:	3301      	adds	r3, #1
 801e02c:	613b      	str	r3, [r7, #16]
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e032:	1c5a      	adds	r2, r3, #1
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	62da      	str	r2, [r3, #44]	@ 0x2c
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	895b      	ldrh	r3, [r3, #10]
 801e03c:	461a      	mov	r2, r3
 801e03e:	693b      	ldr	r3, [r7, #16]
 801e040:	4293      	cmp	r3, r2
 801e042:	d3e6      	bcc.n	801e012 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e048:	693b      	ldr	r3, [r7, #16]
 801e04a:	1ad2      	subs	r2, r2, r3
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	697a      	ldr	r2, [r7, #20]
 801e054:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801e056:	6979      	ldr	r1, [r7, #20]
 801e058:	68f8      	ldr	r0, [r7, #12]
 801e05a:	f7ff fbf3 	bl	801d844 <clust2sect>
 801e05e:	4602      	mov	r2, r0
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	68ba      	ldr	r2, [r7, #8]
 801e068:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e070:	68bb      	ldr	r3, [r7, #8]
 801e072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e076:	441a      	add	r2, r3
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801e07c:	2300      	movs	r3, #0
}
 801e07e:	4618      	mov	r0, r3
 801e080:	3718      	adds	r7, #24
 801e082:	46bd      	mov	sp, r7
 801e084:	bd80      	pop	{r7, pc}

0801e086 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801e086:	b580      	push	{r7, lr}
 801e088:	b086      	sub	sp, #24
 801e08a:	af00      	add	r7, sp, #0
 801e08c:	6078      	str	r0, [r7, #4]
 801e08e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801e096:	2100      	movs	r1, #0
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f7ff feb4 	bl	801de06 <dir_sdi>
 801e09e:	4603      	mov	r3, r0
 801e0a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801e0a2:	7dfb      	ldrb	r3, [r7, #23]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d12b      	bne.n	801e100 <dir_alloc+0x7a>
		n = 0;
 801e0a8:	2300      	movs	r3, #0
 801e0aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	69db      	ldr	r3, [r3, #28]
 801e0b0:	4619      	mov	r1, r3
 801e0b2:	68f8      	ldr	r0, [r7, #12]
 801e0b4:	f7ff fb2a 	bl	801d70c <move_window>
 801e0b8:	4603      	mov	r3, r0
 801e0ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801e0bc:	7dfb      	ldrb	r3, [r7, #23]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d11d      	bne.n	801e0fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6a1b      	ldr	r3, [r3, #32]
 801e0c6:	781b      	ldrb	r3, [r3, #0]
 801e0c8:	2be5      	cmp	r3, #229	@ 0xe5
 801e0ca:	d004      	beq.n	801e0d6 <dir_alloc+0x50>
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	6a1b      	ldr	r3, [r3, #32]
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d107      	bne.n	801e0e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801e0d6:	693b      	ldr	r3, [r7, #16]
 801e0d8:	3301      	adds	r3, #1
 801e0da:	613b      	str	r3, [r7, #16]
 801e0dc:	693a      	ldr	r2, [r7, #16]
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	429a      	cmp	r2, r3
 801e0e2:	d102      	bne.n	801e0ea <dir_alloc+0x64>
 801e0e4:	e00c      	b.n	801e100 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801e0ea:	2101      	movs	r1, #1
 801e0ec:	6878      	ldr	r0, [r7, #4]
 801e0ee:	f7ff ff05 	bl	801defc <dir_next>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801e0f6:	7dfb      	ldrb	r3, [r7, #23]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d0d7      	beq.n	801e0ac <dir_alloc+0x26>
 801e0fc:	e000      	b.n	801e100 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801e0fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801e100:	7dfb      	ldrb	r3, [r7, #23]
 801e102:	2b04      	cmp	r3, #4
 801e104:	d101      	bne.n	801e10a <dir_alloc+0x84>
 801e106:	2307      	movs	r3, #7
 801e108:	75fb      	strb	r3, [r7, #23]
	return res;
 801e10a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e10c:	4618      	mov	r0, r3
 801e10e:	3718      	adds	r7, #24
 801e110:	46bd      	mov	sp, r7
 801e112:	bd80      	pop	{r7, pc}

0801e114 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801e114:	b580      	push	{r7, lr}
 801e116:	b084      	sub	sp, #16
 801e118:	af00      	add	r7, sp, #0
 801e11a:	6078      	str	r0, [r7, #4]
 801e11c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801e11e:	683b      	ldr	r3, [r7, #0]
 801e120:	331a      	adds	r3, #26
 801e122:	4618      	mov	r0, r3
 801e124:	f7ff f842 	bl	801d1ac <ld_word>
 801e128:	4603      	mov	r3, r0
 801e12a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	781b      	ldrb	r3, [r3, #0]
 801e130:	2b03      	cmp	r3, #3
 801e132:	d109      	bne.n	801e148 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801e134:	683b      	ldr	r3, [r7, #0]
 801e136:	3314      	adds	r3, #20
 801e138:	4618      	mov	r0, r3
 801e13a:	f7ff f837 	bl	801d1ac <ld_word>
 801e13e:	4603      	mov	r3, r0
 801e140:	041b      	lsls	r3, r3, #16
 801e142:	68fa      	ldr	r2, [r7, #12]
 801e144:	4313      	orrs	r3, r2
 801e146:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801e148:	68fb      	ldr	r3, [r7, #12]
}
 801e14a:	4618      	mov	r0, r3
 801e14c:	3710      	adds	r7, #16
 801e14e:	46bd      	mov	sp, r7
 801e150:	bd80      	pop	{r7, pc}

0801e152 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801e152:	b580      	push	{r7, lr}
 801e154:	b084      	sub	sp, #16
 801e156:	af00      	add	r7, sp, #0
 801e158:	60f8      	str	r0, [r7, #12]
 801e15a:	60b9      	str	r1, [r7, #8]
 801e15c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801e15e:	68bb      	ldr	r3, [r7, #8]
 801e160:	331a      	adds	r3, #26
 801e162:	687a      	ldr	r2, [r7, #4]
 801e164:	b292      	uxth	r2, r2
 801e166:	4611      	mov	r1, r2
 801e168:	4618      	mov	r0, r3
 801e16a:	f7ff f85a 	bl	801d222 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	781b      	ldrb	r3, [r3, #0]
 801e172:	2b03      	cmp	r3, #3
 801e174:	d109      	bne.n	801e18a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801e176:	68bb      	ldr	r3, [r7, #8]
 801e178:	f103 0214 	add.w	r2, r3, #20
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	0c1b      	lsrs	r3, r3, #16
 801e180:	b29b      	uxth	r3, r3
 801e182:	4619      	mov	r1, r3
 801e184:	4610      	mov	r0, r2
 801e186:	f7ff f84c 	bl	801d222 <st_word>
	}
}
 801e18a:	bf00      	nop
 801e18c:	3710      	adds	r7, #16
 801e18e:	46bd      	mov	sp, r7
 801e190:	bd80      	pop	{r7, pc}

0801e192 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801e192:	b580      	push	{r7, lr}
 801e194:	b086      	sub	sp, #24
 801e196:	af00      	add	r7, sp, #0
 801e198:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801e1a0:	2100      	movs	r1, #0
 801e1a2:	6878      	ldr	r0, [r7, #4]
 801e1a4:	f7ff fe2f 	bl	801de06 <dir_sdi>
 801e1a8:	4603      	mov	r3, r0
 801e1aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801e1ac:	7dfb      	ldrb	r3, [r7, #23]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d001      	beq.n	801e1b6 <dir_find+0x24>
 801e1b2:	7dfb      	ldrb	r3, [r7, #23]
 801e1b4:	e03e      	b.n	801e234 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	69db      	ldr	r3, [r3, #28]
 801e1ba:	4619      	mov	r1, r3
 801e1bc:	6938      	ldr	r0, [r7, #16]
 801e1be:	f7ff faa5 	bl	801d70c <move_window>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801e1c6:	7dfb      	ldrb	r3, [r7, #23]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d12f      	bne.n	801e22c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	6a1b      	ldr	r3, [r3, #32]
 801e1d0:	781b      	ldrb	r3, [r3, #0]
 801e1d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801e1d4:	7bfb      	ldrb	r3, [r7, #15]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d102      	bne.n	801e1e0 <dir_find+0x4e>
 801e1da:	2304      	movs	r3, #4
 801e1dc:	75fb      	strb	r3, [r7, #23]
 801e1de:	e028      	b.n	801e232 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	6a1b      	ldr	r3, [r3, #32]
 801e1e4:	330b      	adds	r3, #11
 801e1e6:	781b      	ldrb	r3, [r3, #0]
 801e1e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e1ec:	b2da      	uxtb	r2, r3
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	6a1b      	ldr	r3, [r3, #32]
 801e1f6:	330b      	adds	r3, #11
 801e1f8:	781b      	ldrb	r3, [r3, #0]
 801e1fa:	f003 0308 	and.w	r3, r3, #8
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d10a      	bne.n	801e218 <dir_find+0x86>
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	6a18      	ldr	r0, [r3, #32]
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	3324      	adds	r3, #36	@ 0x24
 801e20a:	220b      	movs	r2, #11
 801e20c:	4619      	mov	r1, r3
 801e20e:	f7ff f88b 	bl	801d328 <mem_cmp>
 801e212:	4603      	mov	r3, r0
 801e214:	2b00      	cmp	r3, #0
 801e216:	d00b      	beq.n	801e230 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801e218:	2100      	movs	r1, #0
 801e21a:	6878      	ldr	r0, [r7, #4]
 801e21c:	f7ff fe6e 	bl	801defc <dir_next>
 801e220:	4603      	mov	r3, r0
 801e222:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801e224:	7dfb      	ldrb	r3, [r7, #23]
 801e226:	2b00      	cmp	r3, #0
 801e228:	d0c5      	beq.n	801e1b6 <dir_find+0x24>
 801e22a:	e002      	b.n	801e232 <dir_find+0xa0>
		if (res != FR_OK) break;
 801e22c:	bf00      	nop
 801e22e:	e000      	b.n	801e232 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801e230:	bf00      	nop

	return res;
 801e232:	7dfb      	ldrb	r3, [r7, #23]
}
 801e234:	4618      	mov	r0, r3
 801e236:	3718      	adds	r7, #24
 801e238:	46bd      	mov	sp, r7
 801e23a:	bd80      	pop	{r7, pc}

0801e23c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b084      	sub	sp, #16
 801e240:	af00      	add	r7, sp, #0
 801e242:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801e24a:	2101      	movs	r1, #1
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f7ff ff1a 	bl	801e086 <dir_alloc>
 801e252:	4603      	mov	r3, r0
 801e254:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801e256:	7bfb      	ldrb	r3, [r7, #15]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d11c      	bne.n	801e296 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	69db      	ldr	r3, [r3, #28]
 801e260:	4619      	mov	r1, r3
 801e262:	68b8      	ldr	r0, [r7, #8]
 801e264:	f7ff fa52 	bl	801d70c <move_window>
 801e268:	4603      	mov	r3, r0
 801e26a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801e26c:	7bfb      	ldrb	r3, [r7, #15]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d111      	bne.n	801e296 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	6a1b      	ldr	r3, [r3, #32]
 801e276:	2220      	movs	r2, #32
 801e278:	2100      	movs	r1, #0
 801e27a:	4618      	mov	r0, r3
 801e27c:	f7ff f839 	bl	801d2f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	6a18      	ldr	r0, [r3, #32]
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	3324      	adds	r3, #36	@ 0x24
 801e288:	220b      	movs	r2, #11
 801e28a:	4619      	mov	r1, r3
 801e28c:	f7ff f810 	bl	801d2b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801e290:	68bb      	ldr	r3, [r7, #8]
 801e292:	2201      	movs	r2, #1
 801e294:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801e296:	7bfb      	ldrb	r3, [r7, #15]
}
 801e298:	4618      	mov	r0, r3
 801e29a:	3710      	adds	r7, #16
 801e29c:	46bd      	mov	sp, r7
 801e29e:	bd80      	pop	{r7, pc}

0801e2a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b088      	sub	sp, #32
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
 801e2a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801e2aa:	683b      	ldr	r3, [r7, #0]
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	60fb      	str	r3, [r7, #12]
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	3324      	adds	r3, #36	@ 0x24
 801e2b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801e2b6:	220b      	movs	r2, #11
 801e2b8:	2120      	movs	r1, #32
 801e2ba:	68b8      	ldr	r0, [r7, #8]
 801e2bc:	f7ff f819 	bl	801d2f2 <mem_set>
	si = i = 0; ni = 8;
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	613b      	str	r3, [r7, #16]
 801e2c4:	693b      	ldr	r3, [r7, #16]
 801e2c6:	61fb      	str	r3, [r7, #28]
 801e2c8:	2308      	movs	r3, #8
 801e2ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801e2cc:	69fb      	ldr	r3, [r7, #28]
 801e2ce:	1c5a      	adds	r2, r3, #1
 801e2d0:	61fa      	str	r2, [r7, #28]
 801e2d2:	68fa      	ldr	r2, [r7, #12]
 801e2d4:	4413      	add	r3, r2
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801e2da:	7efb      	ldrb	r3, [r7, #27]
 801e2dc:	2b20      	cmp	r3, #32
 801e2de:	d94e      	bls.n	801e37e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801e2e0:	7efb      	ldrb	r3, [r7, #27]
 801e2e2:	2b2f      	cmp	r3, #47	@ 0x2f
 801e2e4:	d006      	beq.n	801e2f4 <create_name+0x54>
 801e2e6:	7efb      	ldrb	r3, [r7, #27]
 801e2e8:	2b5c      	cmp	r3, #92	@ 0x5c
 801e2ea:	d110      	bne.n	801e30e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801e2ec:	e002      	b.n	801e2f4 <create_name+0x54>
 801e2ee:	69fb      	ldr	r3, [r7, #28]
 801e2f0:	3301      	adds	r3, #1
 801e2f2:	61fb      	str	r3, [r7, #28]
 801e2f4:	68fa      	ldr	r2, [r7, #12]
 801e2f6:	69fb      	ldr	r3, [r7, #28]
 801e2f8:	4413      	add	r3, r2
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	2b2f      	cmp	r3, #47	@ 0x2f
 801e2fe:	d0f6      	beq.n	801e2ee <create_name+0x4e>
 801e300:	68fa      	ldr	r2, [r7, #12]
 801e302:	69fb      	ldr	r3, [r7, #28]
 801e304:	4413      	add	r3, r2
 801e306:	781b      	ldrb	r3, [r3, #0]
 801e308:	2b5c      	cmp	r3, #92	@ 0x5c
 801e30a:	d0f0      	beq.n	801e2ee <create_name+0x4e>
			break;
 801e30c:	e038      	b.n	801e380 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801e30e:	7efb      	ldrb	r3, [r7, #27]
 801e310:	2b2e      	cmp	r3, #46	@ 0x2e
 801e312:	d003      	beq.n	801e31c <create_name+0x7c>
 801e314:	693a      	ldr	r2, [r7, #16]
 801e316:	697b      	ldr	r3, [r7, #20]
 801e318:	429a      	cmp	r2, r3
 801e31a:	d30c      	bcc.n	801e336 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801e31c:	697b      	ldr	r3, [r7, #20]
 801e31e:	2b0b      	cmp	r3, #11
 801e320:	d002      	beq.n	801e328 <create_name+0x88>
 801e322:	7efb      	ldrb	r3, [r7, #27]
 801e324:	2b2e      	cmp	r3, #46	@ 0x2e
 801e326:	d001      	beq.n	801e32c <create_name+0x8c>
 801e328:	2306      	movs	r3, #6
 801e32a:	e044      	b.n	801e3b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801e32c:	2308      	movs	r3, #8
 801e32e:	613b      	str	r3, [r7, #16]
 801e330:	230b      	movs	r3, #11
 801e332:	617b      	str	r3, [r7, #20]
			continue;
 801e334:	e022      	b.n	801e37c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801e336:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	da04      	bge.n	801e348 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801e33e:	7efb      	ldrb	r3, [r7, #27]
 801e340:	3b80      	subs	r3, #128	@ 0x80
 801e342:	4a1f      	ldr	r2, [pc, #124]	@ (801e3c0 <create_name+0x120>)
 801e344:	5cd3      	ldrb	r3, [r2, r3]
 801e346:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801e348:	7efb      	ldrb	r3, [r7, #27]
 801e34a:	4619      	mov	r1, r3
 801e34c:	481d      	ldr	r0, [pc, #116]	@ (801e3c4 <create_name+0x124>)
 801e34e:	f7ff f812 	bl	801d376 <chk_chr>
 801e352:	4603      	mov	r3, r0
 801e354:	2b00      	cmp	r3, #0
 801e356:	d001      	beq.n	801e35c <create_name+0xbc>
 801e358:	2306      	movs	r3, #6
 801e35a:	e02c      	b.n	801e3b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801e35c:	7efb      	ldrb	r3, [r7, #27]
 801e35e:	2b60      	cmp	r3, #96	@ 0x60
 801e360:	d905      	bls.n	801e36e <create_name+0xce>
 801e362:	7efb      	ldrb	r3, [r7, #27]
 801e364:	2b7a      	cmp	r3, #122	@ 0x7a
 801e366:	d802      	bhi.n	801e36e <create_name+0xce>
 801e368:	7efb      	ldrb	r3, [r7, #27]
 801e36a:	3b20      	subs	r3, #32
 801e36c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801e36e:	693b      	ldr	r3, [r7, #16]
 801e370:	1c5a      	adds	r2, r3, #1
 801e372:	613a      	str	r2, [r7, #16]
 801e374:	68ba      	ldr	r2, [r7, #8]
 801e376:	4413      	add	r3, r2
 801e378:	7efa      	ldrb	r2, [r7, #27]
 801e37a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801e37c:	e7a6      	b.n	801e2cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801e37e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801e380:	68fa      	ldr	r2, [r7, #12]
 801e382:	69fb      	ldr	r3, [r7, #28]
 801e384:	441a      	add	r2, r3
 801e386:	683b      	ldr	r3, [r7, #0]
 801e388:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801e38a:	693b      	ldr	r3, [r7, #16]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d101      	bne.n	801e394 <create_name+0xf4>
 801e390:	2306      	movs	r3, #6
 801e392:	e010      	b.n	801e3b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801e394:	68bb      	ldr	r3, [r7, #8]
 801e396:	781b      	ldrb	r3, [r3, #0]
 801e398:	2be5      	cmp	r3, #229	@ 0xe5
 801e39a:	d102      	bne.n	801e3a2 <create_name+0x102>
 801e39c:	68bb      	ldr	r3, [r7, #8]
 801e39e:	2205      	movs	r2, #5
 801e3a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801e3a2:	7efb      	ldrb	r3, [r7, #27]
 801e3a4:	2b20      	cmp	r3, #32
 801e3a6:	d801      	bhi.n	801e3ac <create_name+0x10c>
 801e3a8:	2204      	movs	r2, #4
 801e3aa:	e000      	b.n	801e3ae <create_name+0x10e>
 801e3ac:	2200      	movs	r2, #0
 801e3ae:	68bb      	ldr	r3, [r7, #8]
 801e3b0:	330b      	adds	r3, #11
 801e3b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801e3b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	3720      	adds	r7, #32
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	bd80      	pop	{r7, pc}
 801e3be:	bf00      	nop
 801e3c0:	08021a50 	.word	0x08021a50
 801e3c4:	08021688 	.word	0x08021688

0801e3c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801e3c8:	b580      	push	{r7, lr}
 801e3ca:	b086      	sub	sp, #24
 801e3cc:	af00      	add	r7, sp, #0
 801e3ce:	6078      	str	r0, [r7, #4]
 801e3d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801e3d6:	693b      	ldr	r3, [r7, #16]
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801e3dc:	e002      	b.n	801e3e4 <follow_path+0x1c>
 801e3de:	683b      	ldr	r3, [r7, #0]
 801e3e0:	3301      	adds	r3, #1
 801e3e2:	603b      	str	r3, [r7, #0]
 801e3e4:	683b      	ldr	r3, [r7, #0]
 801e3e6:	781b      	ldrb	r3, [r3, #0]
 801e3e8:	2b2f      	cmp	r3, #47	@ 0x2f
 801e3ea:	d0f8      	beq.n	801e3de <follow_path+0x16>
 801e3ec:	683b      	ldr	r3, [r7, #0]
 801e3ee:	781b      	ldrb	r3, [r3, #0]
 801e3f0:	2b5c      	cmp	r3, #92	@ 0x5c
 801e3f2:	d0f4      	beq.n	801e3de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801e3f4:	693b      	ldr	r3, [r7, #16]
 801e3f6:	2200      	movs	r2, #0
 801e3f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	781b      	ldrb	r3, [r3, #0]
 801e3fe:	2b1f      	cmp	r3, #31
 801e400:	d80a      	bhi.n	801e418 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	2280      	movs	r2, #128	@ 0x80
 801e406:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801e40a:	2100      	movs	r1, #0
 801e40c:	6878      	ldr	r0, [r7, #4]
 801e40e:	f7ff fcfa 	bl	801de06 <dir_sdi>
 801e412:	4603      	mov	r3, r0
 801e414:	75fb      	strb	r3, [r7, #23]
 801e416:	e043      	b.n	801e4a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801e418:	463b      	mov	r3, r7
 801e41a:	4619      	mov	r1, r3
 801e41c:	6878      	ldr	r0, [r7, #4]
 801e41e:	f7ff ff3f 	bl	801e2a0 <create_name>
 801e422:	4603      	mov	r3, r0
 801e424:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801e426:	7dfb      	ldrb	r3, [r7, #23]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d134      	bne.n	801e496 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801e42c:	6878      	ldr	r0, [r7, #4]
 801e42e:	f7ff feb0 	bl	801e192 <dir_find>
 801e432:	4603      	mov	r3, r0
 801e434:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801e43c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801e43e:	7dfb      	ldrb	r3, [r7, #23]
 801e440:	2b00      	cmp	r3, #0
 801e442:	d00a      	beq.n	801e45a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801e444:	7dfb      	ldrb	r3, [r7, #23]
 801e446:	2b04      	cmp	r3, #4
 801e448:	d127      	bne.n	801e49a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801e44a:	7afb      	ldrb	r3, [r7, #11]
 801e44c:	f003 0304 	and.w	r3, r3, #4
 801e450:	2b00      	cmp	r3, #0
 801e452:	d122      	bne.n	801e49a <follow_path+0xd2>
 801e454:	2305      	movs	r3, #5
 801e456:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801e458:	e01f      	b.n	801e49a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801e45a:	7afb      	ldrb	r3, [r7, #11]
 801e45c:	f003 0304 	and.w	r3, r3, #4
 801e460:	2b00      	cmp	r3, #0
 801e462:	d11c      	bne.n	801e49e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801e464:	693b      	ldr	r3, [r7, #16]
 801e466:	799b      	ldrb	r3, [r3, #6]
 801e468:	f003 0310 	and.w	r3, r3, #16
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d102      	bne.n	801e476 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801e470:	2305      	movs	r3, #5
 801e472:	75fb      	strb	r3, [r7, #23]
 801e474:	e014      	b.n	801e4a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	695b      	ldr	r3, [r3, #20]
 801e480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e484:	4413      	add	r3, r2
 801e486:	4619      	mov	r1, r3
 801e488:	68f8      	ldr	r0, [r7, #12]
 801e48a:	f7ff fe43 	bl	801e114 <ld_clust>
 801e48e:	4602      	mov	r2, r0
 801e490:	693b      	ldr	r3, [r7, #16]
 801e492:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801e494:	e7c0      	b.n	801e418 <follow_path+0x50>
			if (res != FR_OK) break;
 801e496:	bf00      	nop
 801e498:	e002      	b.n	801e4a0 <follow_path+0xd8>
				break;
 801e49a:	bf00      	nop
 801e49c:	e000      	b.n	801e4a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801e49e:	bf00      	nop
			}
		}
	}

	return res;
 801e4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	3718      	adds	r7, #24
 801e4a6:	46bd      	mov	sp, r7
 801e4a8:	bd80      	pop	{r7, pc}

0801e4aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801e4aa:	b480      	push	{r7}
 801e4ac:	b087      	sub	sp, #28
 801e4ae:	af00      	add	r7, sp, #0
 801e4b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801e4b2:	f04f 33ff 	mov.w	r3, #4294967295
 801e4b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d031      	beq.n	801e524 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	617b      	str	r3, [r7, #20]
 801e4c6:	e002      	b.n	801e4ce <get_ldnumber+0x24>
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	617b      	str	r3, [r7, #20]
 801e4ce:	697b      	ldr	r3, [r7, #20]
 801e4d0:	781b      	ldrb	r3, [r3, #0]
 801e4d2:	2b20      	cmp	r3, #32
 801e4d4:	d903      	bls.n	801e4de <get_ldnumber+0x34>
 801e4d6:	697b      	ldr	r3, [r7, #20]
 801e4d8:	781b      	ldrb	r3, [r3, #0]
 801e4da:	2b3a      	cmp	r3, #58	@ 0x3a
 801e4dc:	d1f4      	bne.n	801e4c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	781b      	ldrb	r3, [r3, #0]
 801e4e2:	2b3a      	cmp	r3, #58	@ 0x3a
 801e4e4:	d11c      	bne.n	801e520 <get_ldnumber+0x76>
			tp = *path;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801e4ec:	68fb      	ldr	r3, [r7, #12]
 801e4ee:	1c5a      	adds	r2, r3, #1
 801e4f0:	60fa      	str	r2, [r7, #12]
 801e4f2:	781b      	ldrb	r3, [r3, #0]
 801e4f4:	3b30      	subs	r3, #48	@ 0x30
 801e4f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801e4f8:	68bb      	ldr	r3, [r7, #8]
 801e4fa:	2b09      	cmp	r3, #9
 801e4fc:	d80e      	bhi.n	801e51c <get_ldnumber+0x72>
 801e4fe:	68fa      	ldr	r2, [r7, #12]
 801e500:	697b      	ldr	r3, [r7, #20]
 801e502:	429a      	cmp	r2, r3
 801e504:	d10a      	bne.n	801e51c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801e506:	68bb      	ldr	r3, [r7, #8]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d107      	bne.n	801e51c <get_ldnumber+0x72>
					vol = (int)i;
 801e50c:	68bb      	ldr	r3, [r7, #8]
 801e50e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801e510:	697b      	ldr	r3, [r7, #20]
 801e512:	3301      	adds	r3, #1
 801e514:	617b      	str	r3, [r7, #20]
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	697a      	ldr	r2, [r7, #20]
 801e51a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801e51c:	693b      	ldr	r3, [r7, #16]
 801e51e:	e002      	b.n	801e526 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801e520:	2300      	movs	r3, #0
 801e522:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801e524:	693b      	ldr	r3, [r7, #16]
}
 801e526:	4618      	mov	r0, r3
 801e528:	371c      	adds	r7, #28
 801e52a:	46bd      	mov	sp, r7
 801e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e530:	4770      	bx	lr
	...

0801e534 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801e534:	b580      	push	{r7, lr}
 801e536:	b082      	sub	sp, #8
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
 801e53c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	2200      	movs	r2, #0
 801e542:	70da      	strb	r2, [r3, #3]
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	f04f 32ff 	mov.w	r2, #4294967295
 801e54a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801e54c:	6839      	ldr	r1, [r7, #0]
 801e54e:	6878      	ldr	r0, [r7, #4]
 801e550:	f7ff f8dc 	bl	801d70c <move_window>
 801e554:	4603      	mov	r3, r0
 801e556:	2b00      	cmp	r3, #0
 801e558:	d001      	beq.n	801e55e <check_fs+0x2a>
 801e55a:	2304      	movs	r3, #4
 801e55c:	e038      	b.n	801e5d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	3330      	adds	r3, #48	@ 0x30
 801e562:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801e566:	4618      	mov	r0, r3
 801e568:	f7fe fe20 	bl	801d1ac <ld_word>
 801e56c:	4603      	mov	r3, r0
 801e56e:	461a      	mov	r2, r3
 801e570:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801e574:	429a      	cmp	r2, r3
 801e576:	d001      	beq.n	801e57c <check_fs+0x48>
 801e578:	2303      	movs	r3, #3
 801e57a:	e029      	b.n	801e5d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e582:	2be9      	cmp	r3, #233	@ 0xe9
 801e584:	d009      	beq.n	801e59a <check_fs+0x66>
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e58c:	2beb      	cmp	r3, #235	@ 0xeb
 801e58e:	d11e      	bne.n	801e5ce <check_fs+0x9a>
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801e596:	2b90      	cmp	r3, #144	@ 0x90
 801e598:	d119      	bne.n	801e5ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	3330      	adds	r3, #48	@ 0x30
 801e59e:	3336      	adds	r3, #54	@ 0x36
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7fe fe1b 	bl	801d1dc <ld_dword>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801e5ac:	4a0a      	ldr	r2, [pc, #40]	@ (801e5d8 <check_fs+0xa4>)
 801e5ae:	4293      	cmp	r3, r2
 801e5b0:	d101      	bne.n	801e5b6 <check_fs+0x82>
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	e00c      	b.n	801e5d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	3330      	adds	r3, #48	@ 0x30
 801e5ba:	3352      	adds	r3, #82	@ 0x52
 801e5bc:	4618      	mov	r0, r3
 801e5be:	f7fe fe0d 	bl	801d1dc <ld_dword>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	4a05      	ldr	r2, [pc, #20]	@ (801e5dc <check_fs+0xa8>)
 801e5c6:	4293      	cmp	r3, r2
 801e5c8:	d101      	bne.n	801e5ce <check_fs+0x9a>
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	e000      	b.n	801e5d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801e5ce:	2302      	movs	r3, #2
}
 801e5d0:	4618      	mov	r0, r3
 801e5d2:	3708      	adds	r7, #8
 801e5d4:	46bd      	mov	sp, r7
 801e5d6:	bd80      	pop	{r7, pc}
 801e5d8:	00544146 	.word	0x00544146
 801e5dc:	33544146 	.word	0x33544146

0801e5e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801e5e0:	b580      	push	{r7, lr}
 801e5e2:	b096      	sub	sp, #88	@ 0x58
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	60f8      	str	r0, [r7, #12]
 801e5e8:	60b9      	str	r1, [r7, #8]
 801e5ea:	4613      	mov	r3, r2
 801e5ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801e5ee:	68bb      	ldr	r3, [r7, #8]
 801e5f0:	2200      	movs	r2, #0
 801e5f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801e5f4:	68f8      	ldr	r0, [r7, #12]
 801e5f6:	f7ff ff58 	bl	801e4aa <get_ldnumber>
 801e5fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801e5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	da01      	bge.n	801e606 <find_volume+0x26>
 801e602:	230b      	movs	r3, #11
 801e604:	e22d      	b.n	801ea62 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801e606:	4aa1      	ldr	r2, [pc, #644]	@ (801e88c <find_volume+0x2ac>)
 801e608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e60e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801e610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e612:	2b00      	cmp	r3, #0
 801e614:	d101      	bne.n	801e61a <find_volume+0x3a>
 801e616:	230c      	movs	r3, #12
 801e618:	e223      	b.n	801ea62 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801e61a:	68bb      	ldr	r3, [r7, #8]
 801e61c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e61e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801e620:	79fb      	ldrb	r3, [r7, #7]
 801e622:	f023 0301 	bic.w	r3, r3, #1
 801e626:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801e628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e62a:	781b      	ldrb	r3, [r3, #0]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d01a      	beq.n	801e666 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801e630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e632:	785b      	ldrb	r3, [r3, #1]
 801e634:	4618      	mov	r0, r3
 801e636:	f7fe fd19 	bl	801d06c <disk_status>
 801e63a:	4603      	mov	r3, r0
 801e63c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801e640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801e644:	f003 0301 	and.w	r3, r3, #1
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d10c      	bne.n	801e666 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801e64c:	79fb      	ldrb	r3, [r7, #7]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d007      	beq.n	801e662 <find_volume+0x82>
 801e652:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801e656:	f003 0304 	and.w	r3, r3, #4
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d001      	beq.n	801e662 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801e65e:	230a      	movs	r3, #10
 801e660:	e1ff      	b.n	801ea62 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801e662:	2300      	movs	r3, #0
 801e664:	e1fd      	b.n	801ea62 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801e666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e668:	2200      	movs	r2, #0
 801e66a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801e66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e66e:	b2da      	uxtb	r2, r3
 801e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e672:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801e674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e676:	785b      	ldrb	r3, [r3, #1]
 801e678:	4618      	mov	r0, r3
 801e67a:	f7fe fd11 	bl	801d0a0 <disk_initialize>
 801e67e:	4603      	mov	r3, r0
 801e680:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801e684:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801e688:	f003 0301 	and.w	r3, r3, #1
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d001      	beq.n	801e694 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801e690:	2303      	movs	r3, #3
 801e692:	e1e6      	b.n	801ea62 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801e694:	79fb      	ldrb	r3, [r7, #7]
 801e696:	2b00      	cmp	r3, #0
 801e698:	d007      	beq.n	801e6aa <find_volume+0xca>
 801e69a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801e69e:	f003 0304 	and.w	r3, r3, #4
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d001      	beq.n	801e6aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801e6a6:	230a      	movs	r3, #10
 801e6a8:	e1db      	b.n	801ea62 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801e6ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e6b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801e6b2:	f7ff ff3f 	bl	801e534 <check_fs>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801e6bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e6c0:	2b02      	cmp	r3, #2
 801e6c2:	d149      	bne.n	801e758 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	643b      	str	r3, [r7, #64]	@ 0x40
 801e6c8:	e01e      	b.n	801e708 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801e6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e6d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e6d2:	011b      	lsls	r3, r3, #4
 801e6d4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801e6d8:	4413      	add	r3, r2
 801e6da:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801e6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6de:	3304      	adds	r3, #4
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d006      	beq.n	801e6f4 <find_volume+0x114>
 801e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6e8:	3308      	adds	r3, #8
 801e6ea:	4618      	mov	r0, r3
 801e6ec:	f7fe fd76 	bl	801d1dc <ld_dword>
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	e000      	b.n	801e6f6 <find_volume+0x116>
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e6f8:	009b      	lsls	r3, r3, #2
 801e6fa:	3358      	adds	r3, #88	@ 0x58
 801e6fc:	443b      	add	r3, r7
 801e6fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801e702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e704:	3301      	adds	r3, #1
 801e706:	643b      	str	r3, [r7, #64]	@ 0x40
 801e708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e70a:	2b03      	cmp	r3, #3
 801e70c:	d9dd      	bls.n	801e6ca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801e70e:	2300      	movs	r3, #0
 801e710:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801e712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e714:	2b00      	cmp	r3, #0
 801e716:	d002      	beq.n	801e71e <find_volume+0x13e>
 801e718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e71a:	3b01      	subs	r3, #1
 801e71c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801e71e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e720:	009b      	lsls	r3, r3, #2
 801e722:	3358      	adds	r3, #88	@ 0x58
 801e724:	443b      	add	r3, r7
 801e726:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801e72a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801e72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d005      	beq.n	801e73e <find_volume+0x15e>
 801e732:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e734:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801e736:	f7ff fefd 	bl	801e534 <check_fs>
 801e73a:	4603      	mov	r3, r0
 801e73c:	e000      	b.n	801e740 <find_volume+0x160>
 801e73e:	2303      	movs	r3, #3
 801e740:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801e744:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e748:	2b01      	cmp	r3, #1
 801e74a:	d905      	bls.n	801e758 <find_volume+0x178>
 801e74c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e74e:	3301      	adds	r3, #1
 801e750:	643b      	str	r3, [r7, #64]	@ 0x40
 801e752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e754:	2b03      	cmp	r3, #3
 801e756:	d9e2      	bls.n	801e71e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801e758:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e75c:	2b04      	cmp	r3, #4
 801e75e:	d101      	bne.n	801e764 <find_volume+0x184>
 801e760:	2301      	movs	r3, #1
 801e762:	e17e      	b.n	801ea62 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801e764:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e768:	2b01      	cmp	r3, #1
 801e76a:	d901      	bls.n	801e770 <find_volume+0x190>
 801e76c:	230d      	movs	r3, #13
 801e76e:	e178      	b.n	801ea62 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801e770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e772:	3330      	adds	r3, #48	@ 0x30
 801e774:	330b      	adds	r3, #11
 801e776:	4618      	mov	r0, r3
 801e778:	f7fe fd18 	bl	801d1ac <ld_word>
 801e77c:	4603      	mov	r3, r0
 801e77e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e782:	d001      	beq.n	801e788 <find_volume+0x1a8>
 801e784:	230d      	movs	r3, #13
 801e786:	e16c      	b.n	801ea62 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801e788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e78a:	3330      	adds	r3, #48	@ 0x30
 801e78c:	3316      	adds	r3, #22
 801e78e:	4618      	mov	r0, r3
 801e790:	f7fe fd0c 	bl	801d1ac <ld_word>
 801e794:	4603      	mov	r3, r0
 801e796:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801e798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d106      	bne.n	801e7ac <find_volume+0x1cc>
 801e79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7a0:	3330      	adds	r3, #48	@ 0x30
 801e7a2:	3324      	adds	r3, #36	@ 0x24
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	f7fe fd19 	bl	801d1dc <ld_dword>
 801e7aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801e7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e7b0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801e7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7b4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801e7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7be:	789b      	ldrb	r3, [r3, #2]
 801e7c0:	2b01      	cmp	r3, #1
 801e7c2:	d005      	beq.n	801e7d0 <find_volume+0x1f0>
 801e7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7c6:	789b      	ldrb	r3, [r3, #2]
 801e7c8:	2b02      	cmp	r3, #2
 801e7ca:	d001      	beq.n	801e7d0 <find_volume+0x1f0>
 801e7cc:	230d      	movs	r3, #13
 801e7ce:	e148      	b.n	801ea62 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801e7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7d2:	789b      	ldrb	r3, [r3, #2]
 801e7d4:	461a      	mov	r2, r3
 801e7d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e7d8:	fb02 f303 	mul.w	r3, r2, r3
 801e7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801e7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e7e4:	461a      	mov	r2, r3
 801e7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801e7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7ec:	895b      	ldrh	r3, [r3, #10]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d008      	beq.n	801e804 <find_volume+0x224>
 801e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7f4:	895b      	ldrh	r3, [r3, #10]
 801e7f6:	461a      	mov	r2, r3
 801e7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7fa:	895b      	ldrh	r3, [r3, #10]
 801e7fc:	3b01      	subs	r3, #1
 801e7fe:	4013      	ands	r3, r2
 801e800:	2b00      	cmp	r3, #0
 801e802:	d001      	beq.n	801e808 <find_volume+0x228>
 801e804:	230d      	movs	r3, #13
 801e806:	e12c      	b.n	801ea62 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801e808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e80a:	3330      	adds	r3, #48	@ 0x30
 801e80c:	3311      	adds	r3, #17
 801e80e:	4618      	mov	r0, r3
 801e810:	f7fe fccc 	bl	801d1ac <ld_word>
 801e814:	4603      	mov	r3, r0
 801e816:	461a      	mov	r2, r3
 801e818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e81a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801e81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e81e:	891b      	ldrh	r3, [r3, #8]
 801e820:	f003 030f 	and.w	r3, r3, #15
 801e824:	b29b      	uxth	r3, r3
 801e826:	2b00      	cmp	r3, #0
 801e828:	d001      	beq.n	801e82e <find_volume+0x24e>
 801e82a:	230d      	movs	r3, #13
 801e82c:	e119      	b.n	801ea62 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801e82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e830:	3330      	adds	r3, #48	@ 0x30
 801e832:	3313      	adds	r3, #19
 801e834:	4618      	mov	r0, r3
 801e836:	f7fe fcb9 	bl	801d1ac <ld_word>
 801e83a:	4603      	mov	r3, r0
 801e83c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801e83e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e840:	2b00      	cmp	r3, #0
 801e842:	d106      	bne.n	801e852 <find_volume+0x272>
 801e844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e846:	3330      	adds	r3, #48	@ 0x30
 801e848:	3320      	adds	r3, #32
 801e84a:	4618      	mov	r0, r3
 801e84c:	f7fe fcc6 	bl	801d1dc <ld_dword>
 801e850:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801e852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e854:	3330      	adds	r3, #48	@ 0x30
 801e856:	330e      	adds	r3, #14
 801e858:	4618      	mov	r0, r3
 801e85a:	f7fe fca7 	bl	801d1ac <ld_word>
 801e85e:	4603      	mov	r3, r0
 801e860:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801e862:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e864:	2b00      	cmp	r3, #0
 801e866:	d101      	bne.n	801e86c <find_volume+0x28c>
 801e868:	230d      	movs	r3, #13
 801e86a:	e0fa      	b.n	801ea62 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801e86c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801e86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e870:	4413      	add	r3, r2
 801e872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e874:	8912      	ldrh	r2, [r2, #8]
 801e876:	0912      	lsrs	r2, r2, #4
 801e878:	b292      	uxth	r2, r2
 801e87a:	4413      	add	r3, r2
 801e87c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801e87e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e882:	429a      	cmp	r2, r3
 801e884:	d204      	bcs.n	801e890 <find_volume+0x2b0>
 801e886:	230d      	movs	r3, #13
 801e888:	e0eb      	b.n	801ea62 <find_volume+0x482>
 801e88a:	bf00      	nop
 801e88c:	24000a88 	.word	0x24000a88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801e890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e894:	1ad3      	subs	r3, r2, r3
 801e896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e898:	8952      	ldrh	r2, [r2, #10]
 801e89a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e89e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801e8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d101      	bne.n	801e8aa <find_volume+0x2ca>
 801e8a6:	230d      	movs	r3, #13
 801e8a8:	e0db      	b.n	801ea62 <find_volume+0x482>
		fmt = FS_FAT32;
 801e8aa:	2303      	movs	r3, #3
 801e8ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8b2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	d802      	bhi.n	801e8c0 <find_volume+0x2e0>
 801e8ba:	2302      	movs	r3, #2
 801e8bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801e8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8c2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801e8c6:	4293      	cmp	r3, r2
 801e8c8:	d802      	bhi.n	801e8d0 <find_volume+0x2f0>
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801e8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8d2:	1c9a      	adds	r2, r3, #2
 801e8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8d6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801e8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e8dc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801e8de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801e8e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8e2:	441a      	add	r2, r3
 801e8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8e6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801e8e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8ec:	441a      	add	r2, r3
 801e8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8f0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801e8f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e8f6:	2b03      	cmp	r3, #3
 801e8f8:	d11e      	bne.n	801e938 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801e8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8fc:	3330      	adds	r3, #48	@ 0x30
 801e8fe:	332a      	adds	r3, #42	@ 0x2a
 801e900:	4618      	mov	r0, r3
 801e902:	f7fe fc53 	bl	801d1ac <ld_word>
 801e906:	4603      	mov	r3, r0
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d001      	beq.n	801e910 <find_volume+0x330>
 801e90c:	230d      	movs	r3, #13
 801e90e:	e0a8      	b.n	801ea62 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801e910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e912:	891b      	ldrh	r3, [r3, #8]
 801e914:	2b00      	cmp	r3, #0
 801e916:	d001      	beq.n	801e91c <find_volume+0x33c>
 801e918:	230d      	movs	r3, #13
 801e91a:	e0a2      	b.n	801ea62 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801e91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e91e:	3330      	adds	r3, #48	@ 0x30
 801e920:	332c      	adds	r3, #44	@ 0x2c
 801e922:	4618      	mov	r0, r3
 801e924:	f7fe fc5a 	bl	801d1dc <ld_dword>
 801e928:	4602      	mov	r2, r0
 801e92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e92c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801e92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e930:	695b      	ldr	r3, [r3, #20]
 801e932:	009b      	lsls	r3, r3, #2
 801e934:	647b      	str	r3, [r7, #68]	@ 0x44
 801e936:	e01f      	b.n	801e978 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801e938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e93a:	891b      	ldrh	r3, [r3, #8]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d101      	bne.n	801e944 <find_volume+0x364>
 801e940:	230d      	movs	r3, #13
 801e942:	e08e      	b.n	801ea62 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801e944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e946:	6a1a      	ldr	r2, [r3, #32]
 801e948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e94a:	441a      	add	r2, r3
 801e94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e94e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801e950:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e954:	2b02      	cmp	r3, #2
 801e956:	d103      	bne.n	801e960 <find_volume+0x380>
 801e958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e95a:	695b      	ldr	r3, [r3, #20]
 801e95c:	005b      	lsls	r3, r3, #1
 801e95e:	e00a      	b.n	801e976 <find_volume+0x396>
 801e960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e962:	695a      	ldr	r2, [r3, #20]
 801e964:	4613      	mov	r3, r2
 801e966:	005b      	lsls	r3, r3, #1
 801e968:	4413      	add	r3, r2
 801e96a:	085a      	lsrs	r2, r3, #1
 801e96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e96e:	695b      	ldr	r3, [r3, #20]
 801e970:	f003 0301 	and.w	r3, r3, #1
 801e974:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801e976:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801e978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e97a:	699a      	ldr	r2, [r3, #24]
 801e97c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e97e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801e982:	0a5b      	lsrs	r3, r3, #9
 801e984:	429a      	cmp	r2, r3
 801e986:	d201      	bcs.n	801e98c <find_volume+0x3ac>
 801e988:	230d      	movs	r3, #13
 801e98a:	e06a      	b.n	801ea62 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801e98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e98e:	f04f 32ff 	mov.w	r2, #4294967295
 801e992:	611a      	str	r2, [r3, #16]
 801e994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e996:	691a      	ldr	r2, [r3, #16]
 801e998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e99a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801e99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e99e:	2280      	movs	r2, #128	@ 0x80
 801e9a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801e9a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801e9a6:	2b03      	cmp	r3, #3
 801e9a8:	d149      	bne.n	801ea3e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801e9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9ac:	3330      	adds	r3, #48	@ 0x30
 801e9ae:	3330      	adds	r3, #48	@ 0x30
 801e9b0:	4618      	mov	r0, r3
 801e9b2:	f7fe fbfb 	bl	801d1ac <ld_word>
 801e9b6:	4603      	mov	r3, r0
 801e9b8:	2b01      	cmp	r3, #1
 801e9ba:	d140      	bne.n	801ea3e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801e9bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e9be:	3301      	adds	r3, #1
 801e9c0:	4619      	mov	r1, r3
 801e9c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801e9c4:	f7fe fea2 	bl	801d70c <move_window>
 801e9c8:	4603      	mov	r3, r0
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d137      	bne.n	801ea3e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801e9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9d0:	2200      	movs	r2, #0
 801e9d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801e9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9d6:	3330      	adds	r3, #48	@ 0x30
 801e9d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801e9dc:	4618      	mov	r0, r3
 801e9de:	f7fe fbe5 	bl	801d1ac <ld_word>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	461a      	mov	r2, r3
 801e9e6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801e9ea:	429a      	cmp	r2, r3
 801e9ec:	d127      	bne.n	801ea3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801e9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9f0:	3330      	adds	r3, #48	@ 0x30
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	f7fe fbf2 	bl	801d1dc <ld_dword>
 801e9f8:	4603      	mov	r3, r0
 801e9fa:	4a1c      	ldr	r2, [pc, #112]	@ (801ea6c <find_volume+0x48c>)
 801e9fc:	4293      	cmp	r3, r2
 801e9fe:	d11e      	bne.n	801ea3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801ea00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea02:	3330      	adds	r3, #48	@ 0x30
 801ea04:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801ea08:	4618      	mov	r0, r3
 801ea0a:	f7fe fbe7 	bl	801d1dc <ld_dword>
 801ea0e:	4603      	mov	r3, r0
 801ea10:	4a17      	ldr	r2, [pc, #92]	@ (801ea70 <find_volume+0x490>)
 801ea12:	4293      	cmp	r3, r2
 801ea14:	d113      	bne.n	801ea3e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801ea16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea18:	3330      	adds	r3, #48	@ 0x30
 801ea1a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801ea1e:	4618      	mov	r0, r3
 801ea20:	f7fe fbdc 	bl	801d1dc <ld_dword>
 801ea24:	4602      	mov	r2, r0
 801ea26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea28:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801ea2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea2c:	3330      	adds	r3, #48	@ 0x30
 801ea2e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801ea32:	4618      	mov	r0, r3
 801ea34:	f7fe fbd2 	bl	801d1dc <ld_dword>
 801ea38:	4602      	mov	r2, r0
 801ea3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea3c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801ea3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea40:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801ea44:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801ea46:	4b0b      	ldr	r3, [pc, #44]	@ (801ea74 <find_volume+0x494>)
 801ea48:	881b      	ldrh	r3, [r3, #0]
 801ea4a:	3301      	adds	r3, #1
 801ea4c:	b29a      	uxth	r2, r3
 801ea4e:	4b09      	ldr	r3, [pc, #36]	@ (801ea74 <find_volume+0x494>)
 801ea50:	801a      	strh	r2, [r3, #0]
 801ea52:	4b08      	ldr	r3, [pc, #32]	@ (801ea74 <find_volume+0x494>)
 801ea54:	881a      	ldrh	r2, [r3, #0]
 801ea56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea58:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801ea5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ea5c:	f7fe fdee 	bl	801d63c <clear_lock>
#endif
	return FR_OK;
 801ea60:	2300      	movs	r3, #0
}
 801ea62:	4618      	mov	r0, r3
 801ea64:	3758      	adds	r7, #88	@ 0x58
 801ea66:	46bd      	mov	sp, r7
 801ea68:	bd80      	pop	{r7, pc}
 801ea6a:	bf00      	nop
 801ea6c:	41615252 	.word	0x41615252
 801ea70:	61417272 	.word	0x61417272
 801ea74:	24000a8c 	.word	0x24000a8c

0801ea78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801ea78:	b580      	push	{r7, lr}
 801ea7a:	b084      	sub	sp, #16
 801ea7c:	af00      	add	r7, sp, #0
 801ea7e:	6078      	str	r0, [r7, #4]
 801ea80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801ea82:	2309      	movs	r3, #9
 801ea84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d01c      	beq.n	801eac6 <validate+0x4e>
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	d018      	beq.n	801eac6 <validate+0x4e>
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	781b      	ldrb	r3, [r3, #0]
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d013      	beq.n	801eac6 <validate+0x4e>
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	889a      	ldrh	r2, [r3, #4]
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	88db      	ldrh	r3, [r3, #6]
 801eaa8:	429a      	cmp	r2, r3
 801eaaa:	d10c      	bne.n	801eac6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	785b      	ldrb	r3, [r3, #1]
 801eab2:	4618      	mov	r0, r3
 801eab4:	f7fe fada 	bl	801d06c <disk_status>
 801eab8:	4603      	mov	r3, r0
 801eaba:	f003 0301 	and.w	r3, r3, #1
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d101      	bne.n	801eac6 <validate+0x4e>
			res = FR_OK;
 801eac2:	2300      	movs	r3, #0
 801eac4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801eac6:	7bfb      	ldrb	r3, [r7, #15]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d102      	bne.n	801ead2 <validate+0x5a>
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	e000      	b.n	801ead4 <validate+0x5c>
 801ead2:	2300      	movs	r3, #0
 801ead4:	683a      	ldr	r2, [r7, #0]
 801ead6:	6013      	str	r3, [r2, #0]
	return res;
 801ead8:	7bfb      	ldrb	r3, [r7, #15]
}
 801eada:	4618      	mov	r0, r3
 801eadc:	3710      	adds	r7, #16
 801eade:	46bd      	mov	sp, r7
 801eae0:	bd80      	pop	{r7, pc}
	...

0801eae4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b088      	sub	sp, #32
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	60f8      	str	r0, [r7, #12]
 801eaec:	60b9      	str	r1, [r7, #8]
 801eaee:	4613      	mov	r3, r2
 801eaf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801eaf2:	68bb      	ldr	r3, [r7, #8]
 801eaf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801eaf6:	f107 0310 	add.w	r3, r7, #16
 801eafa:	4618      	mov	r0, r3
 801eafc:	f7ff fcd5 	bl	801e4aa <get_ldnumber>
 801eb00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801eb02:	69fb      	ldr	r3, [r7, #28]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	da01      	bge.n	801eb0c <f_mount+0x28>
 801eb08:	230b      	movs	r3, #11
 801eb0a:	e02b      	b.n	801eb64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801eb0c:	4a17      	ldr	r2, [pc, #92]	@ (801eb6c <f_mount+0x88>)
 801eb0e:	69fb      	ldr	r3, [r7, #28]
 801eb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eb14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801eb16:	69bb      	ldr	r3, [r7, #24]
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d005      	beq.n	801eb28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801eb1c:	69b8      	ldr	r0, [r7, #24]
 801eb1e:	f7fe fd8d 	bl	801d63c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801eb22:	69bb      	ldr	r3, [r7, #24]
 801eb24:	2200      	movs	r2, #0
 801eb26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d002      	beq.n	801eb34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	2200      	movs	r2, #0
 801eb32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801eb34:	68fa      	ldr	r2, [r7, #12]
 801eb36:	490d      	ldr	r1, [pc, #52]	@ (801eb6c <f_mount+0x88>)
 801eb38:	69fb      	ldr	r3, [r7, #28]
 801eb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801eb3e:	68fb      	ldr	r3, [r7, #12]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d002      	beq.n	801eb4a <f_mount+0x66>
 801eb44:	79fb      	ldrb	r3, [r7, #7]
 801eb46:	2b01      	cmp	r3, #1
 801eb48:	d001      	beq.n	801eb4e <f_mount+0x6a>
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	e00a      	b.n	801eb64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801eb4e:	f107 010c 	add.w	r1, r7, #12
 801eb52:	f107 0308 	add.w	r3, r7, #8
 801eb56:	2200      	movs	r2, #0
 801eb58:	4618      	mov	r0, r3
 801eb5a:	f7ff fd41 	bl	801e5e0 <find_volume>
 801eb5e:	4603      	mov	r3, r0
 801eb60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801eb62:	7dfb      	ldrb	r3, [r7, #23]
}
 801eb64:	4618      	mov	r0, r3
 801eb66:	3720      	adds	r7, #32
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	bd80      	pop	{r7, pc}
 801eb6c:	24000a88 	.word	0x24000a88

0801eb70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b098      	sub	sp, #96	@ 0x60
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	60f8      	str	r0, [r7, #12]
 801eb78:	60b9      	str	r1, [r7, #8]
 801eb7a:	4613      	mov	r3, r2
 801eb7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d101      	bne.n	801eb88 <f_open+0x18>
 801eb84:	2309      	movs	r3, #9
 801eb86:	e1a9      	b.n	801eedc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801eb88:	79fb      	ldrb	r3, [r7, #7]
 801eb8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801eb90:	79fa      	ldrb	r2, [r7, #7]
 801eb92:	f107 0110 	add.w	r1, r7, #16
 801eb96:	f107 0308 	add.w	r3, r7, #8
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	f7ff fd20 	bl	801e5e0 <find_volume>
 801eba0:	4603      	mov	r3, r0
 801eba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801eba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	f040 818d 	bne.w	801eeca <f_open+0x35a>
		dj.obj.fs = fs;
 801ebb0:	693b      	ldr	r3, [r7, #16]
 801ebb2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801ebb4:	68ba      	ldr	r2, [r7, #8]
 801ebb6:	f107 0314 	add.w	r3, r7, #20
 801ebba:	4611      	mov	r1, r2
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	f7ff fc03 	bl	801e3c8 <follow_path>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801ebc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d118      	bne.n	801ec02 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801ebd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ebd4:	b25b      	sxtb	r3, r3
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	da03      	bge.n	801ebe2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801ebda:	2306      	movs	r3, #6
 801ebdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801ebe0:	e00f      	b.n	801ec02 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ebe2:	79fb      	ldrb	r3, [r7, #7]
 801ebe4:	2b01      	cmp	r3, #1
 801ebe6:	bf8c      	ite	hi
 801ebe8:	2301      	movhi	r3, #1
 801ebea:	2300      	movls	r3, #0
 801ebec:	b2db      	uxtb	r3, r3
 801ebee:	461a      	mov	r2, r3
 801ebf0:	f107 0314 	add.w	r3, r7, #20
 801ebf4:	4611      	mov	r1, r2
 801ebf6:	4618      	mov	r0, r3
 801ebf8:	f7fe fbd8 	bl	801d3ac <chk_lock>
 801ebfc:	4603      	mov	r3, r0
 801ebfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ec02:	79fb      	ldrb	r3, [r7, #7]
 801ec04:	f003 031c 	and.w	r3, r3, #28
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d07f      	beq.n	801ed0c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801ec0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d017      	beq.n	801ec44 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801ec14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ec18:	2b04      	cmp	r3, #4
 801ec1a:	d10e      	bne.n	801ec3a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801ec1c:	f7fe fc22 	bl	801d464 <enq_lock>
 801ec20:	4603      	mov	r3, r0
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d006      	beq.n	801ec34 <f_open+0xc4>
 801ec26:	f107 0314 	add.w	r3, r7, #20
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	f7ff fb06 	bl	801e23c <dir_register>
 801ec30:	4603      	mov	r3, r0
 801ec32:	e000      	b.n	801ec36 <f_open+0xc6>
 801ec34:	2312      	movs	r3, #18
 801ec36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801ec3a:	79fb      	ldrb	r3, [r7, #7]
 801ec3c:	f043 0308 	orr.w	r3, r3, #8
 801ec40:	71fb      	strb	r3, [r7, #7]
 801ec42:	e010      	b.n	801ec66 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801ec44:	7ebb      	ldrb	r3, [r7, #26]
 801ec46:	f003 0311 	and.w	r3, r3, #17
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d003      	beq.n	801ec56 <f_open+0xe6>
					res = FR_DENIED;
 801ec4e:	2307      	movs	r3, #7
 801ec50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801ec54:	e007      	b.n	801ec66 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801ec56:	79fb      	ldrb	r3, [r7, #7]
 801ec58:	f003 0304 	and.w	r3, r3, #4
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d002      	beq.n	801ec66 <f_open+0xf6>
 801ec60:	2308      	movs	r3, #8
 801ec62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ec66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d168      	bne.n	801ed40 <f_open+0x1d0>
 801ec6e:	79fb      	ldrb	r3, [r7, #7]
 801ec70:	f003 0308 	and.w	r3, r3, #8
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d063      	beq.n	801ed40 <f_open+0x1d0>
				dw = GET_FATTIME();
 801ec78:	f7fd ff6c 	bl	801cb54 <get_fattime>
 801ec7c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ec7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec80:	330e      	adds	r3, #14
 801ec82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ec84:	4618      	mov	r0, r3
 801ec86:	f7fe fae7 	bl	801d258 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ec8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec8c:	3316      	adds	r3, #22
 801ec8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ec90:	4618      	mov	r0, r3
 801ec92:	f7fe fae1 	bl	801d258 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ec96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec98:	330b      	adds	r3, #11
 801ec9a:	2220      	movs	r2, #32
 801ec9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ec9e:	693b      	ldr	r3, [r7, #16]
 801eca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801eca2:	4611      	mov	r1, r2
 801eca4:	4618      	mov	r0, r3
 801eca6:	f7ff fa35 	bl	801e114 <ld_clust>
 801ecaa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ecac:	693b      	ldr	r3, [r7, #16]
 801ecae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ecb0:	2200      	movs	r2, #0
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f7ff fa4d 	bl	801e152 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ecb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ecba:	331c      	adds	r3, #28
 801ecbc:	2100      	movs	r1, #0
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7fe faca 	bl	801d258 <st_dword>
					fs->wflag = 1;
 801ecc4:	693b      	ldr	r3, [r7, #16]
 801ecc6:	2201      	movs	r2, #1
 801ecc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ecca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d037      	beq.n	801ed40 <f_open+0x1d0>
						dw = fs->winsect;
 801ecd0:	693b      	ldr	r3, [r7, #16]
 801ecd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ecd4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801ecd6:	f107 0314 	add.w	r3, r7, #20
 801ecda:	2200      	movs	r2, #0
 801ecdc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801ecde:	4618      	mov	r0, r3
 801ece0:	f7fe ff60 	bl	801dba4 <remove_chain>
 801ece4:	4603      	mov	r3, r0
 801ece6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801ecea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d126      	bne.n	801ed40 <f_open+0x1d0>
							res = move_window(fs, dw);
 801ecf2:	693b      	ldr	r3, [r7, #16]
 801ecf4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801ecf6:	4618      	mov	r0, r3
 801ecf8:	f7fe fd08 	bl	801d70c <move_window>
 801ecfc:	4603      	mov	r3, r0
 801ecfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ed02:	693b      	ldr	r3, [r7, #16]
 801ed04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ed06:	3a01      	subs	r2, #1
 801ed08:	60da      	str	r2, [r3, #12]
 801ed0a:	e019      	b.n	801ed40 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ed0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d115      	bne.n	801ed40 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ed14:	7ebb      	ldrb	r3, [r7, #26]
 801ed16:	f003 0310 	and.w	r3, r3, #16
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	d003      	beq.n	801ed26 <f_open+0x1b6>
					res = FR_NO_FILE;
 801ed1e:	2304      	movs	r3, #4
 801ed20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801ed24:	e00c      	b.n	801ed40 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ed26:	79fb      	ldrb	r3, [r7, #7]
 801ed28:	f003 0302 	and.w	r3, r3, #2
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d007      	beq.n	801ed40 <f_open+0x1d0>
 801ed30:	7ebb      	ldrb	r3, [r7, #26]
 801ed32:	f003 0301 	and.w	r3, r3, #1
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d002      	beq.n	801ed40 <f_open+0x1d0>
						res = FR_DENIED;
 801ed3a:	2307      	movs	r3, #7
 801ed3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801ed40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d126      	bne.n	801ed96 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ed48:	79fb      	ldrb	r3, [r7, #7]
 801ed4a:	f003 0308 	and.w	r3, r3, #8
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d003      	beq.n	801ed5a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801ed52:	79fb      	ldrb	r3, [r7, #7]
 801ed54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ed5a:	693b      	ldr	r3, [r7, #16]
 801ed5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801ed62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ed68:	79fb      	ldrb	r3, [r7, #7]
 801ed6a:	2b01      	cmp	r3, #1
 801ed6c:	bf8c      	ite	hi
 801ed6e:	2301      	movhi	r3, #1
 801ed70:	2300      	movls	r3, #0
 801ed72:	b2db      	uxtb	r3, r3
 801ed74:	461a      	mov	r2, r3
 801ed76:	f107 0314 	add.w	r3, r7, #20
 801ed7a:	4611      	mov	r1, r2
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	f7fe fb93 	bl	801d4a8 <inc_lock>
 801ed82:	4602      	mov	r2, r0
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	691b      	ldr	r3, [r3, #16]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d102      	bne.n	801ed96 <f_open+0x226>
 801ed90:	2302      	movs	r3, #2
 801ed92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801ed96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	f040 8095 	bne.w	801eeca <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801eda0:	693b      	ldr	r3, [r7, #16]
 801eda2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801eda4:	4611      	mov	r1, r2
 801eda6:	4618      	mov	r0, r3
 801eda8:	f7ff f9b4 	bl	801e114 <ld_clust>
 801edac:	4602      	mov	r2, r0
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801edb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801edb4:	331c      	adds	r3, #28
 801edb6:	4618      	mov	r0, r3
 801edb8:	f7fe fa10 	bl	801d1dc <ld_dword>
 801edbc:	4602      	mov	r2, r0
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	2200      	movs	r2, #0
 801edc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801edc8:	693a      	ldr	r2, [r7, #16]
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801edce:	693b      	ldr	r3, [r7, #16]
 801edd0:	88da      	ldrh	r2, [r3, #6]
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	79fa      	ldrb	r2, [r7, #7]
 801edda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	2200      	movs	r2, #0
 801ede0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	2200      	movs	r2, #0
 801ede6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	2200      	movs	r2, #0
 801edec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	3330      	adds	r3, #48	@ 0x30
 801edf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801edf6:	2100      	movs	r1, #0
 801edf8:	4618      	mov	r0, r3
 801edfa:	f7fe fa7a 	bl	801d2f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801edfe:	79fb      	ldrb	r3, [r7, #7]
 801ee00:	f003 0320 	and.w	r3, r3, #32
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d060      	beq.n	801eeca <f_open+0x35a>
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	68db      	ldr	r3, [r3, #12]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d05c      	beq.n	801eeca <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	68da      	ldr	r2, [r3, #12]
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801ee18:	693b      	ldr	r3, [r7, #16]
 801ee1a:	895b      	ldrh	r3, [r3, #10]
 801ee1c:	025b      	lsls	r3, r3, #9
 801ee1e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	689b      	ldr	r3, [r3, #8]
 801ee24:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	68db      	ldr	r3, [r3, #12]
 801ee2a:	657b      	str	r3, [r7, #84]	@ 0x54
 801ee2c:	e016      	b.n	801ee5c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ee32:	4618      	mov	r0, r3
 801ee34:	f7fe fd25 	bl	801d882 <get_fat>
 801ee38:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801ee3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ee3c:	2b01      	cmp	r3, #1
 801ee3e:	d802      	bhi.n	801ee46 <f_open+0x2d6>
 801ee40:	2302      	movs	r3, #2
 801ee42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801ee46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ee48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee4c:	d102      	bne.n	801ee54 <f_open+0x2e4>
 801ee4e:	2301      	movs	r3, #1
 801ee50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801ee54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ee56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee58:	1ad3      	subs	r3, r2, r3
 801ee5a:	657b      	str	r3, [r7, #84]	@ 0x54
 801ee5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d103      	bne.n	801ee6c <f_open+0x2fc>
 801ee64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ee66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee68:	429a      	cmp	r2, r3
 801ee6a:	d8e0      	bhi.n	801ee2e <f_open+0x2be>
				}
				fp->clust = clst;
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ee70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801ee72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d127      	bne.n	801eeca <f_open+0x35a>
 801ee7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d022      	beq.n	801eeca <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801ee84:	693b      	ldr	r3, [r7, #16]
 801ee86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ee88:	4618      	mov	r0, r3
 801ee8a:	f7fe fcdb 	bl	801d844 <clust2sect>
 801ee8e:	6478      	str	r0, [r7, #68]	@ 0x44
 801ee90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d103      	bne.n	801ee9e <f_open+0x32e>
						res = FR_INT_ERR;
 801ee96:	2302      	movs	r3, #2
 801ee98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801ee9c:	e015      	b.n	801eeca <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801ee9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eea0:	0a5a      	lsrs	r2, r3, #9
 801eea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eea4:	441a      	add	r2, r3
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801eeaa:	693b      	ldr	r3, [r7, #16]
 801eeac:	7858      	ldrb	r0, [r3, #1]
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801eeb4:	68fb      	ldr	r3, [r7, #12]
 801eeb6:	6a1a      	ldr	r2, [r3, #32]
 801eeb8:	2301      	movs	r3, #1
 801eeba:	f7fe f919 	bl	801d0f0 <disk_read>
 801eebe:	4603      	mov	r3, r0
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d002      	beq.n	801eeca <f_open+0x35a>
 801eec4:	2301      	movs	r3, #1
 801eec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801eeca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d002      	beq.n	801eed8 <f_open+0x368>
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	2200      	movs	r2, #0
 801eed6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801eed8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801eedc:	4618      	mov	r0, r3
 801eede:	3760      	adds	r7, #96	@ 0x60
 801eee0:	46bd      	mov	sp, r7
 801eee2:	bd80      	pop	{r7, pc}

0801eee4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801eee4:	b580      	push	{r7, lr}
 801eee6:	b08e      	sub	sp, #56	@ 0x38
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	60f8      	str	r0, [r7, #12]
 801eeec:	60b9      	str	r1, [r7, #8]
 801eeee:	607a      	str	r2, [r7, #4]
 801eef0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801eef2:	68bb      	ldr	r3, [r7, #8]
 801eef4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801eef6:	683b      	ldr	r3, [r7, #0]
 801eef8:	2200      	movs	r2, #0
 801eefa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	f107 0214 	add.w	r2, r7, #20
 801ef02:	4611      	mov	r1, r2
 801ef04:	4618      	mov	r0, r3
 801ef06:	f7ff fdb7 	bl	801ea78 <validate>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801ef10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d107      	bne.n	801ef28 <f_read+0x44>
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	7d5b      	ldrb	r3, [r3, #21]
 801ef1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801ef20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d002      	beq.n	801ef2e <f_read+0x4a>
 801ef28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ef2c:	e115      	b.n	801f15a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	7d1b      	ldrb	r3, [r3, #20]
 801ef32:	f003 0301 	and.w	r3, r3, #1
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d101      	bne.n	801ef3e <f_read+0x5a>
 801ef3a:	2307      	movs	r3, #7
 801ef3c:	e10d      	b.n	801f15a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	68da      	ldr	r2, [r3, #12]
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	699b      	ldr	r3, [r3, #24]
 801ef46:	1ad3      	subs	r3, r2, r3
 801ef48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801ef4a:	687a      	ldr	r2, [r7, #4]
 801ef4c:	6a3b      	ldr	r3, [r7, #32]
 801ef4e:	429a      	cmp	r2, r3
 801ef50:	f240 80fe 	bls.w	801f150 <f_read+0x26c>
 801ef54:	6a3b      	ldr	r3, [r7, #32]
 801ef56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801ef58:	e0fa      	b.n	801f150 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	699b      	ldr	r3, [r3, #24]
 801ef5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	f040 80c6 	bne.w	801f0f4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	699b      	ldr	r3, [r3, #24]
 801ef6c:	0a5b      	lsrs	r3, r3, #9
 801ef6e:	697a      	ldr	r2, [r7, #20]
 801ef70:	8952      	ldrh	r2, [r2, #10]
 801ef72:	3a01      	subs	r2, #1
 801ef74:	4013      	ands	r3, r2
 801ef76:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801ef78:	69fb      	ldr	r3, [r7, #28]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d12f      	bne.n	801efde <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	699b      	ldr	r3, [r3, #24]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d103      	bne.n	801ef8e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	689b      	ldr	r3, [r3, #8]
 801ef8a:	633b      	str	r3, [r7, #48]	@ 0x30
 801ef8c:	e013      	b.n	801efb6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d007      	beq.n	801efa6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	699b      	ldr	r3, [r3, #24]
 801ef9a:	4619      	mov	r1, r3
 801ef9c:	68f8      	ldr	r0, [r7, #12]
 801ef9e:	f7fe fefe 	bl	801dd9e <clmt_clust>
 801efa2:	6338      	str	r0, [r7, #48]	@ 0x30
 801efa4:	e007      	b.n	801efb6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801efa6:	68fa      	ldr	r2, [r7, #12]
 801efa8:	68fb      	ldr	r3, [r7, #12]
 801efaa:	69db      	ldr	r3, [r3, #28]
 801efac:	4619      	mov	r1, r3
 801efae:	4610      	mov	r0, r2
 801efb0:	f7fe fc67 	bl	801d882 <get_fat>
 801efb4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801efb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efb8:	2b01      	cmp	r3, #1
 801efba:	d804      	bhi.n	801efc6 <f_read+0xe2>
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	2202      	movs	r2, #2
 801efc0:	755a      	strb	r2, [r3, #21]
 801efc2:	2302      	movs	r3, #2
 801efc4:	e0c9      	b.n	801f15a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801efc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801efcc:	d104      	bne.n	801efd8 <f_read+0xf4>
 801efce:	68fb      	ldr	r3, [r7, #12]
 801efd0:	2201      	movs	r2, #1
 801efd2:	755a      	strb	r2, [r3, #21]
 801efd4:	2301      	movs	r3, #1
 801efd6:	e0c0      	b.n	801f15a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801efdc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801efde:	697a      	ldr	r2, [r7, #20]
 801efe0:	68fb      	ldr	r3, [r7, #12]
 801efe2:	69db      	ldr	r3, [r3, #28]
 801efe4:	4619      	mov	r1, r3
 801efe6:	4610      	mov	r0, r2
 801efe8:	f7fe fc2c 	bl	801d844 <clust2sect>
 801efec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801efee:	69bb      	ldr	r3, [r7, #24]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d104      	bne.n	801effe <f_read+0x11a>
 801eff4:	68fb      	ldr	r3, [r7, #12]
 801eff6:	2202      	movs	r2, #2
 801eff8:	755a      	strb	r2, [r3, #21]
 801effa:	2302      	movs	r3, #2
 801effc:	e0ad      	b.n	801f15a <f_read+0x276>
			sect += csect;
 801effe:	69ba      	ldr	r2, [r7, #24]
 801f000:	69fb      	ldr	r3, [r7, #28]
 801f002:	4413      	add	r3, r2
 801f004:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	0a5b      	lsrs	r3, r3, #9
 801f00a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801f00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d039      	beq.n	801f086 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801f012:	69fa      	ldr	r2, [r7, #28]
 801f014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f016:	4413      	add	r3, r2
 801f018:	697a      	ldr	r2, [r7, #20]
 801f01a:	8952      	ldrh	r2, [r2, #10]
 801f01c:	4293      	cmp	r3, r2
 801f01e:	d905      	bls.n	801f02c <f_read+0x148>
					cc = fs->csize - csect;
 801f020:	697b      	ldr	r3, [r7, #20]
 801f022:	895b      	ldrh	r3, [r3, #10]
 801f024:	461a      	mov	r2, r3
 801f026:	69fb      	ldr	r3, [r7, #28]
 801f028:	1ad3      	subs	r3, r2, r3
 801f02a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801f02c:	697b      	ldr	r3, [r7, #20]
 801f02e:	7858      	ldrb	r0, [r3, #1]
 801f030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f032:	69ba      	ldr	r2, [r7, #24]
 801f034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f036:	f7fe f85b 	bl	801d0f0 <disk_read>
 801f03a:	4603      	mov	r3, r0
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d004      	beq.n	801f04a <f_read+0x166>
 801f040:	68fb      	ldr	r3, [r7, #12]
 801f042:	2201      	movs	r2, #1
 801f044:	755a      	strb	r2, [r3, #21]
 801f046:	2301      	movs	r3, #1
 801f048:	e087      	b.n	801f15a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	7d1b      	ldrb	r3, [r3, #20]
 801f04e:	b25b      	sxtb	r3, r3
 801f050:	2b00      	cmp	r3, #0
 801f052:	da14      	bge.n	801f07e <f_read+0x19a>
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	6a1a      	ldr	r2, [r3, #32]
 801f058:	69bb      	ldr	r3, [r7, #24]
 801f05a:	1ad3      	subs	r3, r2, r3
 801f05c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f05e:	429a      	cmp	r2, r3
 801f060:	d90d      	bls.n	801f07e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801f062:	68fb      	ldr	r3, [r7, #12]
 801f064:	6a1a      	ldr	r2, [r3, #32]
 801f066:	69bb      	ldr	r3, [r7, #24]
 801f068:	1ad3      	subs	r3, r2, r3
 801f06a:	025b      	lsls	r3, r3, #9
 801f06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f06e:	18d0      	adds	r0, r2, r3
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	3330      	adds	r3, #48	@ 0x30
 801f074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f078:	4619      	mov	r1, r3
 801f07a:	f7fe f919 	bl	801d2b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801f07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f080:	025b      	lsls	r3, r3, #9
 801f082:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801f084:	e050      	b.n	801f128 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	6a1b      	ldr	r3, [r3, #32]
 801f08a:	69ba      	ldr	r2, [r7, #24]
 801f08c:	429a      	cmp	r2, r3
 801f08e:	d02e      	beq.n	801f0ee <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	7d1b      	ldrb	r3, [r3, #20]
 801f094:	b25b      	sxtb	r3, r3
 801f096:	2b00      	cmp	r3, #0
 801f098:	da18      	bge.n	801f0cc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801f09a:	697b      	ldr	r3, [r7, #20]
 801f09c:	7858      	ldrb	r0, [r3, #1]
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	6a1a      	ldr	r2, [r3, #32]
 801f0a8:	2301      	movs	r3, #1
 801f0aa:	f7fe f841 	bl	801d130 <disk_write>
 801f0ae:	4603      	mov	r3, r0
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d004      	beq.n	801f0be <f_read+0x1da>
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	2201      	movs	r2, #1
 801f0b8:	755a      	strb	r2, [r3, #21]
 801f0ba:	2301      	movs	r3, #1
 801f0bc:	e04d      	b.n	801f15a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	7d1b      	ldrb	r3, [r3, #20]
 801f0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f0c6:	b2da      	uxtb	r2, r3
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801f0cc:	697b      	ldr	r3, [r7, #20]
 801f0ce:	7858      	ldrb	r0, [r3, #1]
 801f0d0:	68fb      	ldr	r3, [r7, #12]
 801f0d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801f0d6:	2301      	movs	r3, #1
 801f0d8:	69ba      	ldr	r2, [r7, #24]
 801f0da:	f7fe f809 	bl	801d0f0 <disk_read>
 801f0de:	4603      	mov	r3, r0
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d004      	beq.n	801f0ee <f_read+0x20a>
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	2201      	movs	r2, #1
 801f0e8:	755a      	strb	r2, [r3, #21]
 801f0ea:	2301      	movs	r3, #1
 801f0ec:	e035      	b.n	801f15a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	69ba      	ldr	r2, [r7, #24]
 801f0f2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	699b      	ldr	r3, [r3, #24]
 801f0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0fc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801f100:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801f102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	429a      	cmp	r2, r3
 801f108:	d901      	bls.n	801f10e <f_read+0x22a>
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f114:	68fb      	ldr	r3, [r7, #12]
 801f116:	699b      	ldr	r3, [r3, #24]
 801f118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f11c:	4413      	add	r3, r2
 801f11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f120:	4619      	mov	r1, r3
 801f122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f124:	f7fe f8c4 	bl	801d2b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801f128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f12c:	4413      	add	r3, r2
 801f12e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f130:	68fb      	ldr	r3, [r7, #12]
 801f132:	699a      	ldr	r2, [r3, #24]
 801f134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f136:	441a      	add	r2, r3
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	619a      	str	r2, [r3, #24]
 801f13c:	683b      	ldr	r3, [r7, #0]
 801f13e:	681a      	ldr	r2, [r3, #0]
 801f140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f142:	441a      	add	r2, r3
 801f144:	683b      	ldr	r3, [r7, #0]
 801f146:	601a      	str	r2, [r3, #0]
 801f148:	687a      	ldr	r2, [r7, #4]
 801f14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f14c:	1ad3      	subs	r3, r2, r3
 801f14e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	2b00      	cmp	r3, #0
 801f154:	f47f af01 	bne.w	801ef5a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801f158:	2300      	movs	r3, #0
}
 801f15a:	4618      	mov	r0, r3
 801f15c:	3738      	adds	r7, #56	@ 0x38
 801f15e:	46bd      	mov	sp, r7
 801f160:	bd80      	pop	{r7, pc}

0801f162 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801f162:	b580      	push	{r7, lr}
 801f164:	b086      	sub	sp, #24
 801f166:	af00      	add	r7, sp, #0
 801f168:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	f107 0208 	add.w	r2, r7, #8
 801f170:	4611      	mov	r1, r2
 801f172:	4618      	mov	r0, r3
 801f174:	f7ff fc80 	bl	801ea78 <validate>
 801f178:	4603      	mov	r3, r0
 801f17a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801f17c:	7dfb      	ldrb	r3, [r7, #23]
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d168      	bne.n	801f254 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	7d1b      	ldrb	r3, [r3, #20]
 801f186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d062      	beq.n	801f254 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	7d1b      	ldrb	r3, [r3, #20]
 801f192:	b25b      	sxtb	r3, r3
 801f194:	2b00      	cmp	r3, #0
 801f196:	da15      	bge.n	801f1c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801f198:	68bb      	ldr	r3, [r7, #8]
 801f19a:	7858      	ldrb	r0, [r3, #1]
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	6a1a      	ldr	r2, [r3, #32]
 801f1a6:	2301      	movs	r3, #1
 801f1a8:	f7fd ffc2 	bl	801d130 <disk_write>
 801f1ac:	4603      	mov	r3, r0
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d001      	beq.n	801f1b6 <f_sync+0x54>
 801f1b2:	2301      	movs	r3, #1
 801f1b4:	e04f      	b.n	801f256 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	7d1b      	ldrb	r3, [r3, #20]
 801f1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f1be:	b2da      	uxtb	r2, r3
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801f1c4:	f7fd fcc6 	bl	801cb54 <get_fattime>
 801f1c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801f1ca:	68ba      	ldr	r2, [r7, #8]
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f1d0:	4619      	mov	r1, r3
 801f1d2:	4610      	mov	r0, r2
 801f1d4:	f7fe fa9a 	bl	801d70c <move_window>
 801f1d8:	4603      	mov	r3, r0
 801f1da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801f1dc:	7dfb      	ldrb	r3, [r7, #23]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d138      	bne.n	801f254 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	330b      	adds	r3, #11
 801f1ec:	781a      	ldrb	r2, [r3, #0]
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	330b      	adds	r3, #11
 801f1f2:	f042 0220 	orr.w	r2, r2, #32
 801f1f6:	b2d2      	uxtb	r2, r2
 801f1f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	6818      	ldr	r0, [r3, #0]
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	689b      	ldr	r3, [r3, #8]
 801f202:	461a      	mov	r2, r3
 801f204:	68f9      	ldr	r1, [r7, #12]
 801f206:	f7fe ffa4 	bl	801e152 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	f103 021c 	add.w	r2, r3, #28
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	4619      	mov	r1, r3
 801f216:	4610      	mov	r0, r2
 801f218:	f7fe f81e 	bl	801d258 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	3316      	adds	r3, #22
 801f220:	6939      	ldr	r1, [r7, #16]
 801f222:	4618      	mov	r0, r3
 801f224:	f7fe f818 	bl	801d258 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801f228:	68fb      	ldr	r3, [r7, #12]
 801f22a:	3312      	adds	r3, #18
 801f22c:	2100      	movs	r1, #0
 801f22e:	4618      	mov	r0, r3
 801f230:	f7fd fff7 	bl	801d222 <st_word>
					fs->wflag = 1;
 801f234:	68bb      	ldr	r3, [r7, #8]
 801f236:	2201      	movs	r2, #1
 801f238:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801f23a:	68bb      	ldr	r3, [r7, #8]
 801f23c:	4618      	mov	r0, r3
 801f23e:	f7fe fa93 	bl	801d768 <sync_fs>
 801f242:	4603      	mov	r3, r0
 801f244:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	7d1b      	ldrb	r3, [r3, #20]
 801f24a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801f24e:	b2da      	uxtb	r2, r3
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801f254:	7dfb      	ldrb	r3, [r7, #23]
}
 801f256:	4618      	mov	r0, r3
 801f258:	3718      	adds	r7, #24
 801f25a:	46bd      	mov	sp, r7
 801f25c:	bd80      	pop	{r7, pc}

0801f25e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801f25e:	b580      	push	{r7, lr}
 801f260:	b084      	sub	sp, #16
 801f262:	af00      	add	r7, sp, #0
 801f264:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801f266:	6878      	ldr	r0, [r7, #4]
 801f268:	f7ff ff7b 	bl	801f162 <f_sync>
 801f26c:	4603      	mov	r3, r0
 801f26e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801f270:	7bfb      	ldrb	r3, [r7, #15]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d118      	bne.n	801f2a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f107 0208 	add.w	r2, r7, #8
 801f27c:	4611      	mov	r1, r2
 801f27e:	4618      	mov	r0, r3
 801f280:	f7ff fbfa 	bl	801ea78 <validate>
 801f284:	4603      	mov	r3, r0
 801f286:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801f288:	7bfb      	ldrb	r3, [r7, #15]
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d10c      	bne.n	801f2a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	691b      	ldr	r3, [r3, #16]
 801f292:	4618      	mov	r0, r3
 801f294:	f7fe f996 	bl	801d5c4 <dec_lock>
 801f298:	4603      	mov	r3, r0
 801f29a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801f29c:	7bfb      	ldrb	r3, [r7, #15]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d102      	bne.n	801f2a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	2200      	movs	r2, #0
 801f2a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801f2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801f2aa:	4618      	mov	r0, r3
 801f2ac:	3710      	adds	r7, #16
 801f2ae:	46bd      	mov	sp, r7
 801f2b0:	bd80      	pop	{r7, pc}
	...

0801f2b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801f2b4:	b480      	push	{r7}
 801f2b6:	b087      	sub	sp, #28
 801f2b8:	af00      	add	r7, sp, #0
 801f2ba:	60f8      	str	r0, [r7, #12]
 801f2bc:	60b9      	str	r1, [r7, #8]
 801f2be:	4613      	mov	r3, r2
 801f2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801f2c2:	2301      	movs	r3, #1
 801f2c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801f2c6:	2300      	movs	r3, #0
 801f2c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801f2ca:	4b1f      	ldr	r3, [pc, #124]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2cc:	7a5b      	ldrb	r3, [r3, #9]
 801f2ce:	b2db      	uxtb	r3, r3
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	d131      	bne.n	801f338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801f2d4:	4b1c      	ldr	r3, [pc, #112]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2d6:	7a5b      	ldrb	r3, [r3, #9]
 801f2d8:	b2db      	uxtb	r3, r3
 801f2da:	461a      	mov	r2, r3
 801f2dc:	4b1a      	ldr	r3, [pc, #104]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2de:	2100      	movs	r1, #0
 801f2e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801f2e2:	4b19      	ldr	r3, [pc, #100]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2e4:	7a5b      	ldrb	r3, [r3, #9]
 801f2e6:	b2db      	uxtb	r3, r3
 801f2e8:	4a17      	ldr	r2, [pc, #92]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2ea:	009b      	lsls	r3, r3, #2
 801f2ec:	4413      	add	r3, r2
 801f2ee:	68fa      	ldr	r2, [r7, #12]
 801f2f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801f2f2:	4b15      	ldr	r3, [pc, #84]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2f4:	7a5b      	ldrb	r3, [r3, #9]
 801f2f6:	b2db      	uxtb	r3, r3
 801f2f8:	461a      	mov	r2, r3
 801f2fa:	4b13      	ldr	r3, [pc, #76]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f2fc:	4413      	add	r3, r2
 801f2fe:	79fa      	ldrb	r2, [r7, #7]
 801f300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801f302:	4b11      	ldr	r3, [pc, #68]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f304:	7a5b      	ldrb	r3, [r3, #9]
 801f306:	b2db      	uxtb	r3, r3
 801f308:	1c5a      	adds	r2, r3, #1
 801f30a:	b2d1      	uxtb	r1, r2
 801f30c:	4a0e      	ldr	r2, [pc, #56]	@ (801f348 <FATFS_LinkDriverEx+0x94>)
 801f30e:	7251      	strb	r1, [r2, #9]
 801f310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801f312:	7dbb      	ldrb	r3, [r7, #22]
 801f314:	3330      	adds	r3, #48	@ 0x30
 801f316:	b2da      	uxtb	r2, r3
 801f318:	68bb      	ldr	r3, [r7, #8]
 801f31a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801f31c:	68bb      	ldr	r3, [r7, #8]
 801f31e:	3301      	adds	r3, #1
 801f320:	223a      	movs	r2, #58	@ 0x3a
 801f322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	3302      	adds	r3, #2
 801f328:	222f      	movs	r2, #47	@ 0x2f
 801f32a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801f32c:	68bb      	ldr	r3, [r7, #8]
 801f32e:	3303      	adds	r3, #3
 801f330:	2200      	movs	r2, #0
 801f332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801f334:	2300      	movs	r3, #0
 801f336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801f338:	7dfb      	ldrb	r3, [r7, #23]
}
 801f33a:	4618      	mov	r0, r3
 801f33c:	371c      	adds	r7, #28
 801f33e:	46bd      	mov	sp, r7
 801f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f344:	4770      	bx	lr
 801f346:	bf00      	nop
 801f348:	24000ab0 	.word	0x24000ab0

0801f34c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801f34c:	b580      	push	{r7, lr}
 801f34e:	b082      	sub	sp, #8
 801f350:	af00      	add	r7, sp, #0
 801f352:	6078      	str	r0, [r7, #4]
 801f354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801f356:	2200      	movs	r2, #0
 801f358:	6839      	ldr	r1, [r7, #0]
 801f35a:	6878      	ldr	r0, [r7, #4]
 801f35c:	f7ff ffaa 	bl	801f2b4 <FATFS_LinkDriverEx>
 801f360:	4603      	mov	r3, r0
}
 801f362:	4618      	mov	r0, r3
 801f364:	3708      	adds	r7, #8
 801f366:	46bd      	mov	sp, r7
 801f368:	bd80      	pop	{r7, pc}

0801f36a <_ZdlPvj>:
 801f36a:	f000 baab 	b.w	801f8c4 <_ZdlPv>

0801f36e <__cxa_guard_acquire>:
 801f36e:	6802      	ldr	r2, [r0, #0]
 801f370:	07d2      	lsls	r2, r2, #31
 801f372:	4603      	mov	r3, r0
 801f374:	d405      	bmi.n	801f382 <__cxa_guard_acquire+0x14>
 801f376:	7842      	ldrb	r2, [r0, #1]
 801f378:	b102      	cbz	r2, 801f37c <__cxa_guard_acquire+0xe>
 801f37a:	deff      	udf	#255	@ 0xff
 801f37c:	2001      	movs	r0, #1
 801f37e:	7058      	strb	r0, [r3, #1]
 801f380:	4770      	bx	lr
 801f382:	2000      	movs	r0, #0
 801f384:	4770      	bx	lr

0801f386 <__cxa_guard_release>:
 801f386:	2301      	movs	r3, #1
 801f388:	6003      	str	r3, [r0, #0]
 801f38a:	4770      	bx	lr

0801f38c <_Znwj>:
 801f38c:	2801      	cmp	r0, #1
 801f38e:	bf38      	it	cc
 801f390:	2001      	movcc	r0, #1
 801f392:	b510      	push	{r4, lr}
 801f394:	4604      	mov	r4, r0
 801f396:	4620      	mov	r0, r4
 801f398:	f000 fb40 	bl	801fa1c <malloc>
 801f39c:	b100      	cbz	r0, 801f3a0 <_Znwj+0x14>
 801f39e:	bd10      	pop	{r4, pc}
 801f3a0:	f000 fa92 	bl	801f8c8 <_ZSt15get_new_handlerv>
 801f3a4:	b908      	cbnz	r0, 801f3aa <_Znwj+0x1e>
 801f3a6:	f000 fb31 	bl	801fa0c <abort>
 801f3aa:	4780      	blx	r0
 801f3ac:	e7f3      	b.n	801f396 <_Znwj+0xa>

0801f3ae <_ZNSaIcEC1Ev>:
 801f3ae:	4770      	bx	lr

0801f3b0 <_ZNSaIcED1Ev>:
 801f3b0:	4770      	bx	lr

0801f3b2 <_ZSt17__throw_bad_allocv>:
 801f3b2:	b508      	push	{r3, lr}
 801f3b4:	f000 fb2a 	bl	801fa0c <abort>

0801f3b8 <_ZSt28__throw_bad_array_new_lengthv>:
 801f3b8:	b508      	push	{r3, lr}
 801f3ba:	f000 fb27 	bl	801fa0c <abort>

0801f3be <_ZSt19__throw_logic_errorPKc>:
 801f3be:	b508      	push	{r3, lr}
 801f3c0:	f000 fb24 	bl	801fa0c <abort>

0801f3c4 <_ZSt24__throw_invalid_argumentPKc>:
 801f3c4:	b508      	push	{r3, lr}
 801f3c6:	f000 fb21 	bl	801fa0c <abort>

0801f3ca <_ZSt20__throw_length_errorPKc>:
 801f3ca:	b508      	push	{r3, lr}
 801f3cc:	f000 fb1e 	bl	801fa0c <abort>

0801f3d0 <_ZSt20__throw_out_of_rangePKc>:
 801f3d0:	b508      	push	{r3, lr}
 801f3d2:	f000 fb1b 	bl	801fa0c <abort>

0801f3d6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801f3d6:	b40f      	push	{r0, r1, r2, r3}
 801f3d8:	b508      	push	{r3, lr}
 801f3da:	f000 fb17 	bl	801fa0c <abort>

0801f3de <_ZSt25__throw_bad_function_callv>:
 801f3de:	b508      	push	{r3, lr}
 801f3e0:	f000 fb14 	bl	801fa0c <abort>

0801f3e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 801f3e4:	4901      	ldr	r1, [pc, #4]	@ (801f3ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 801f3e6:	f000 bafb 	b.w	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f3ea:	bf00      	nop
 801f3ec:	08021ae8 	.word	0x08021ae8

0801f3f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801f3f0:	b10a      	cbz	r2, 801f3f6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801f3f2:	f000 bf86 	b.w	8020302 <memcpy>
 801f3f6:	4770      	bx	lr

0801f3f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801f3f8:	6001      	str	r1, [r0, #0]
 801f3fa:	4770      	bx	lr

0801f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801f3fc:	6800      	ldr	r0, [r0, #0]
 801f3fe:	4770      	bx	lr

0801f400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801f400:	3008      	adds	r0, #8
 801f402:	4770      	bx	lr

0801f404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801f404:	6081      	str	r1, [r0, #8]
 801f406:	4770      	bx	lr

0801f408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801f408:	6803      	ldr	r3, [r0, #0]
 801f40a:	6041      	str	r1, [r0, #4]
 801f40c:	2200      	movs	r2, #0
 801f40e:	545a      	strb	r2, [r3, r1]
 801f410:	4770      	bx	lr

0801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801f412:	f850 3b08 	ldr.w	r3, [r0], #8
 801f416:	1a1b      	subs	r3, r3, r0
 801f418:	4258      	negs	r0, r3
 801f41a:	4158      	adcs	r0, r3
 801f41c:	4770      	bx	lr
	...

0801f420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801f420:	b508      	push	{r3, lr}
 801f422:	680b      	ldr	r3, [r1, #0]
 801f424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f428:	d302      	bcc.n	801f430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801f42a:	480d      	ldr	r0, [pc, #52]	@ (801f460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801f42c:	f7ff ffcd 	bl	801f3ca <_ZSt20__throw_length_errorPKc>
 801f430:	4293      	cmp	r3, r2
 801f432:	d90b      	bls.n	801f44c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f434:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f438:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801f43c:	d206      	bcs.n	801f44c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f43e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801f442:	bf2a      	itet	cs
 801f444:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801f448:	6008      	strcc	r0, [r1, #0]
 801f44a:	600b      	strcs	r3, [r1, #0]
 801f44c:	6808      	ldr	r0, [r1, #0]
 801f44e:	3001      	adds	r0, #1
 801f450:	d501      	bpl.n	801f456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801f452:	f7ff ffae 	bl	801f3b2 <_ZSt17__throw_bad_allocv>
 801f456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f45a:	f7ff bf97 	b.w	801f38c <_Znwj>
 801f45e:	bf00      	nop
 801f460:	08021af0 	.word	0x08021af0

0801f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801f464:	b510      	push	{r4, lr}
 801f466:	4604      	mov	r4, r0
 801f468:	f7ff ffd3 	bl	801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801f46c:	b920      	cbnz	r0, 801f478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801f46e:	6820      	ldr	r0, [r4, #0]
 801f470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f474:	f000 ba26 	b.w	801f8c4 <_ZdlPv>
 801f478:	bd10      	pop	{r4, pc}
	...

0801f47c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 801f47c:	b508      	push	{r3, lr}
 801f47e:	4603      	mov	r3, r0
 801f480:	4608      	mov	r0, r1
 801f482:	685b      	ldr	r3, [r3, #4]
 801f484:	4298      	cmp	r0, r3
 801f486:	4611      	mov	r1, r2
 801f488:	d903      	bls.n	801f492 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 801f48a:	4602      	mov	r2, r0
 801f48c:	4801      	ldr	r0, [pc, #4]	@ (801f494 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 801f48e:	f7ff ffa2 	bl	801f3d6 <_ZSt24__throw_out_of_range_fmtPKcz>
 801f492:	bd08      	pop	{r3, pc}
 801f494:	08021b08 	.word	0x08021b08

0801f498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801f498:	6840      	ldr	r0, [r0, #4]
 801f49a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801f49e:	3901      	subs	r1, #1
 801f4a0:	1a09      	subs	r1, r1, r0
 801f4a2:	4291      	cmp	r1, r2
 801f4a4:	b508      	push	{r3, lr}
 801f4a6:	d202      	bcs.n	801f4ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	f7ff ff8e 	bl	801f3ca <_ZSt20__throw_length_errorPKc>
 801f4ae:	bd08      	pop	{r3, pc}

0801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801f4b0:	2a01      	cmp	r2, #1
 801f4b2:	b410      	push	{r4}
 801f4b4:	d104      	bne.n	801f4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801f4b6:	780a      	ldrb	r2, [r1, #0]
 801f4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4bc:	7002      	strb	r2, [r0, #0]
 801f4be:	4770      	bx	lr
 801f4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4c4:	f7ff bf94 	b.w	801f3f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801f4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801f4c8:	2a01      	cmp	r2, #1
 801f4ca:	b430      	push	{r4, r5}
 801f4cc:	d103      	bne.n	801f4d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801f4ce:	780b      	ldrb	r3, [r1, #0]
 801f4d0:	7003      	strb	r3, [r0, #0]
 801f4d2:	bc30      	pop	{r4, r5}
 801f4d4:	4770      	bx	lr
 801f4d6:	2a00      	cmp	r2, #0
 801f4d8:	d0fb      	beq.n	801f4d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801f4da:	bc30      	pop	{r4, r5}
 801f4dc:	f000 be28 	b.w	8020130 <memmove>

0801f4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801f4e0:	460b      	mov	r3, r1
 801f4e2:	2b01      	cmp	r3, #1
 801f4e4:	b410      	push	{r4}
 801f4e6:	4611      	mov	r1, r2
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	d103      	bne.n	801f4f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801f4ec:	7022      	strb	r2, [r4, #0]
 801f4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4f2:	4770      	bx	lr
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d0fa      	beq.n	801f4ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801f4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4fc:	461a      	mov	r2, r3
 801f4fe:	f000 be31 	b.w	8020164 <memset>

0801f502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801f502:	b508      	push	{r3, lr}
 801f504:	1a52      	subs	r2, r2, r1
 801f506:	f7ff ffd3 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f50a:	bd08      	pop	{r3, pc}

0801f50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801f50c:	b508      	push	{r3, lr}
 801f50e:	1a52      	subs	r2, r2, r1
 801f510:	f7ff ffce 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f514:	bd08      	pop	{r3, pc}

0801f516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801f516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f518:	f100 0708 	add.w	r7, r0, #8
 801f51c:	6007      	str	r7, [r0, #0]
 801f51e:	4605      	mov	r5, r0
 801f520:	4608      	mov	r0, r1
 801f522:	460c      	mov	r4, r1
 801f524:	f7ff ff75 	bl	801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801f528:	f104 0608 	add.w	r6, r4, #8
 801f52c:	6862      	ldr	r2, [r4, #4]
 801f52e:	b160      	cbz	r0, 801f54a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 801f530:	3201      	adds	r2, #1
 801f532:	4631      	mov	r1, r6
 801f534:	4638      	mov	r0, r7
 801f536:	f7ff ff5b 	bl	801f3f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 801f53a:	6863      	ldr	r3, [r4, #4]
 801f53c:	606b      	str	r3, [r5, #4]
 801f53e:	2300      	movs	r3, #0
 801f540:	7223      	strb	r3, [r4, #8]
 801f542:	6026      	str	r6, [r4, #0]
 801f544:	6063      	str	r3, [r4, #4]
 801f546:	4628      	mov	r0, r5
 801f548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f54a:	6823      	ldr	r3, [r4, #0]
 801f54c:	602b      	str	r3, [r5, #0]
 801f54e:	68a3      	ldr	r3, [r4, #8]
 801f550:	60ab      	str	r3, [r5, #8]
 801f552:	e7f2      	b.n	801f53a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801f554:	b510      	push	{r4, lr}
 801f556:	4604      	mov	r4, r0
 801f558:	f7ff ff84 	bl	801f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f55c:	4620      	mov	r0, r4
 801f55e:	bd10      	pop	{r4, pc}

0801f560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f562:	460c      	mov	r4, r1
 801f564:	4605      	mov	r5, r0
 801f566:	f7ff ff54 	bl	801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801f56a:	4606      	mov	r6, r0
 801f56c:	4620      	mov	r0, r4
 801f56e:	f7ff ff50 	bl	801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801f572:	b190      	cbz	r0, 801f59a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801f574:	42a5      	cmp	r5, r4
 801f576:	d00a      	beq.n	801f58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801f578:	6862      	ldr	r2, [r4, #4]
 801f57a:	b11a      	cbz	r2, 801f584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801f57c:	6821      	ldr	r1, [r4, #0]
 801f57e:	6828      	ldr	r0, [r5, #0]
 801f580:	f7ff ff96 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f584:	6863      	ldr	r3, [r4, #4]
 801f586:	682a      	ldr	r2, [r5, #0]
 801f588:	606b      	str	r3, [r5, #4]
 801f58a:	2100      	movs	r1, #0
 801f58c:	54d1      	strb	r1, [r2, r3]
 801f58e:	6822      	ldr	r2, [r4, #0]
 801f590:	2300      	movs	r3, #0
 801f592:	6063      	str	r3, [r4, #4]
 801f594:	7013      	strb	r3, [r2, #0]
 801f596:	4628      	mov	r0, r5
 801f598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f59a:	b90e      	cbnz	r6, 801f5a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801f59c:	6828      	ldr	r0, [r5, #0]
 801f59e:	68af      	ldr	r7, [r5, #8]
 801f5a0:	6823      	ldr	r3, [r4, #0]
 801f5a2:	602b      	str	r3, [r5, #0]
 801f5a4:	6863      	ldr	r3, [r4, #4]
 801f5a6:	606b      	str	r3, [r5, #4]
 801f5a8:	68a3      	ldr	r3, [r4, #8]
 801f5aa:	60ab      	str	r3, [r5, #8]
 801f5ac:	b110      	cbz	r0, 801f5b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801f5ae:	6020      	str	r0, [r4, #0]
 801f5b0:	60a7      	str	r7, [r4, #8]
 801f5b2:	e7ec      	b.n	801f58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801f5b4:	f104 0308 	add.w	r3, r4, #8
 801f5b8:	6023      	str	r3, [r4, #0]
 801f5ba:	e7e8      	b.n	801f58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801f5bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801f5bc:	b510      	push	{r4, lr}
 801f5be:	4604      	mov	r4, r0
 801f5c0:	f7ff ff27 	bl	801f412 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801f5c4:	b908      	cbnz	r0, 801f5ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801f5c6:	68a0      	ldr	r0, [r4, #8]
 801f5c8:	bd10      	pop	{r4, pc}
 801f5ca:	200f      	movs	r0, #15
 801f5cc:	e7fc      	b.n	801f5c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801f5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801f5ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f5d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f5d4:	461f      	mov	r7, r3
 801f5d6:	6843      	ldr	r3, [r0, #4]
 801f5d8:	eb01 0802 	add.w	r8, r1, r2
 801f5dc:	1ab2      	subs	r2, r6, r2
 801f5de:	441a      	add	r2, r3
 801f5e0:	4604      	mov	r4, r0
 801f5e2:	460d      	mov	r5, r1
 801f5e4:	eba3 0908 	sub.w	r9, r3, r8
 801f5e8:	9201      	str	r2, [sp, #4]
 801f5ea:	f7ff ffe7 	bl	801f5bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801f5ee:	a901      	add	r1, sp, #4
 801f5f0:	4602      	mov	r2, r0
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f7ff ff14 	bl	801f420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f5f8:	4682      	mov	sl, r0
 801f5fa:	b11d      	cbz	r5, 801f604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801f5fc:	6821      	ldr	r1, [r4, #0]
 801f5fe:	462a      	mov	r2, r5
 801f600:	f7ff ff56 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f604:	b137      	cbz	r7, 801f614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801f606:	b12e      	cbz	r6, 801f614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801f608:	4632      	mov	r2, r6
 801f60a:	4639      	mov	r1, r7
 801f60c:	eb0a 0005 	add.w	r0, sl, r5
 801f610:	f7ff ff4e 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f614:	f1b9 0f00 	cmp.w	r9, #0
 801f618:	d007      	beq.n	801f62a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801f61a:	6821      	ldr	r1, [r4, #0]
 801f61c:	4435      	add	r5, r6
 801f61e:	464a      	mov	r2, r9
 801f620:	4441      	add	r1, r8
 801f622:	eb0a 0005 	add.w	r0, sl, r5
 801f626:	f7ff ff43 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f62a:	4620      	mov	r0, r4
 801f62c:	f7ff ff1a 	bl	801f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f630:	9b01      	ldr	r3, [sp, #4]
 801f632:	f8c4 a000 	str.w	sl, [r4]
 801f636:	60a3      	str	r3, [r4, #8]
 801f638:	b002      	add	sp, #8
 801f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801f63e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f640:	4604      	mov	r4, r0
 801f642:	9101      	str	r1, [sp, #4]
 801f644:	f7ff ffba 	bl	801f5bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801f648:	9b01      	ldr	r3, [sp, #4]
 801f64a:	4283      	cmp	r3, r0
 801f64c:	4602      	mov	r2, r0
 801f64e:	d90f      	bls.n	801f670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801f650:	a901      	add	r1, sp, #4
 801f652:	4620      	mov	r0, r4
 801f654:	f7ff fee4 	bl	801f420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f658:	6862      	ldr	r2, [r4, #4]
 801f65a:	6821      	ldr	r1, [r4, #0]
 801f65c:	3201      	adds	r2, #1
 801f65e:	4605      	mov	r5, r0
 801f660:	f7ff ff26 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f664:	4620      	mov	r0, r4
 801f666:	f7ff fefd 	bl	801f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f66a:	9b01      	ldr	r3, [sp, #4]
 801f66c:	6025      	str	r5, [r4, #0]
 801f66e:	60a3      	str	r3, [r4, #8]
 801f670:	b003      	add	sp, #12
 801f672:	bd30      	pop	{r4, r5, pc}

0801f674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801f674:	6802      	ldr	r2, [r0, #0]
 801f676:	2300      	movs	r3, #0
 801f678:	6043      	str	r3, [r0, #4]
 801f67a:	7013      	strb	r3, [r2, #0]
 801f67c:	4770      	bx	lr

0801f67e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801f67e:	6800      	ldr	r0, [r0, #0]
 801f680:	4408      	add	r0, r1
 801f682:	4770      	bx	lr

0801f684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801f684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f688:	4616      	mov	r6, r2
 801f68a:	461d      	mov	r5, r3
 801f68c:	4604      	mov	r4, r0
 801f68e:	4b1b      	ldr	r3, [pc, #108]	@ (801f6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801f690:	462a      	mov	r2, r5
 801f692:	460f      	mov	r7, r1
 801f694:	4631      	mov	r1, r6
 801f696:	f7ff feff 	bl	801f498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801f69a:	4620      	mov	r0, r4
 801f69c:	f7ff ff8e 	bl	801f5bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801f6a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f6a4:	eba5 0806 	sub.w	r8, r5, r6
 801f6a8:	44c8      	add	r8, r9
 801f6aa:	4540      	cmp	r0, r8
 801f6ac:	d31d      	bcc.n	801f6ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801f6ae:	19f3      	adds	r3, r6, r7
 801f6b0:	ebb9 0203 	subs.w	r2, r9, r3
 801f6b4:	d007      	beq.n	801f6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801f6b6:	42ae      	cmp	r6, r5
 801f6b8:	d005      	beq.n	801f6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801f6ba:	6820      	ldr	r0, [r4, #0]
 801f6bc:	4438      	add	r0, r7
 801f6be:	1981      	adds	r1, r0, r6
 801f6c0:	4428      	add	r0, r5
 801f6c2:	f7ff ff01 	bl	801f4c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801f6c6:	b135      	cbz	r5, 801f6d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801f6c8:	6820      	ldr	r0, [r4, #0]
 801f6ca:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801f6ce:	4629      	mov	r1, r5
 801f6d0:	4438      	add	r0, r7
 801f6d2:	f7ff ff05 	bl	801f4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801f6d6:	6823      	ldr	r3, [r4, #0]
 801f6d8:	f8c4 8004 	str.w	r8, [r4, #4]
 801f6dc:	2200      	movs	r2, #0
 801f6de:	4620      	mov	r0, r4
 801f6e0:	f803 2008 	strb.w	r2, [r3, r8]
 801f6e4:	b003      	add	sp, #12
 801f6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6ea:	9500      	str	r5, [sp, #0]
 801f6ec:	2300      	movs	r3, #0
 801f6ee:	4632      	mov	r2, r6
 801f6f0:	4639      	mov	r1, r7
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	f7ff ff6b 	bl	801f5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801f6f8:	e7e5      	b.n	801f6c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801f6fa:	bf00      	nop
 801f6fc:	08021b3f 	.word	0x08021b3f

0801f700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801f700:	b507      	push	{r0, r1, r2, lr}
 801f702:	9200      	str	r2, [sp, #0]
 801f704:	460b      	mov	r3, r1
 801f706:	2200      	movs	r2, #0
 801f708:	6841      	ldr	r1, [r0, #4]
 801f70a:	f7ff ffbb 	bl	801f684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801f70e:	b003      	add	sp, #12
 801f710:	f85d fb04 	ldr.w	pc, [sp], #4

0801f714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801f714:	6800      	ldr	r0, [r0, #0]
 801f716:	4770      	bx	lr

0801f718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801f718:	6001      	str	r1, [r0, #0]
 801f71a:	4770      	bx	lr

0801f71c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801f71c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f71e:	1a53      	subs	r3, r2, r1
 801f720:	2b0f      	cmp	r3, #15
 801f722:	4604      	mov	r4, r0
 801f724:	460d      	mov	r5, r1
 801f726:	4616      	mov	r6, r2
 801f728:	9301      	str	r3, [sp, #4]
 801f72a:	d906      	bls.n	801f73a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801f72c:	2200      	movs	r2, #0
 801f72e:	a901      	add	r1, sp, #4
 801f730:	f7ff fe76 	bl	801f420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f734:	9b01      	ldr	r3, [sp, #4]
 801f736:	6020      	str	r0, [r4, #0]
 801f738:	60a3      	str	r3, [r4, #8]
 801f73a:	4632      	mov	r2, r6
 801f73c:	4629      	mov	r1, r5
 801f73e:	6820      	ldr	r0, [r4, #0]
 801f740:	f7ff fedf 	bl	801f502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801f744:	9b01      	ldr	r3, [sp, #4]
 801f746:	6822      	ldr	r2, [r4, #0]
 801f748:	6063      	str	r3, [r4, #4]
 801f74a:	2100      	movs	r1, #0
 801f74c:	54d1      	strb	r1, [r2, r3]
 801f74e:	b002      	add	sp, #8
 801f750:	bd70      	pop	{r4, r5, r6, pc}

0801f752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801f752:	f100 0208 	add.w	r2, r0, #8
 801f756:	b510      	push	{r4, lr}
 801f758:	6002      	str	r2, [r0, #0]
 801f75a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f75e:	4604      	mov	r4, r0
 801f760:	f04f 0300 	mov.w	r3, #0
 801f764:	440a      	add	r2, r1
 801f766:	f7ff ffd9 	bl	801f71c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801f76a:	4620      	mov	r0, r4
 801f76c:	bd10      	pop	{r4, pc}
	...

0801f770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 801f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f774:	4698      	mov	r8, r3
 801f776:	f100 0308 	add.w	r3, r0, #8
 801f77a:	460d      	mov	r5, r1
 801f77c:	4617      	mov	r7, r2
 801f77e:	6003      	str	r3, [r0, #0]
 801f780:	680e      	ldr	r6, [r1, #0]
 801f782:	4a0b      	ldr	r2, [pc, #44]	@ (801f7b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 801f784:	4604      	mov	r4, r0
 801f786:	4639      	mov	r1, r7
 801f788:	4628      	mov	r0, r5
 801f78a:	f7ff fe77 	bl	801f47c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801f78e:	686a      	ldr	r2, [r5, #4]
 801f790:	1831      	adds	r1, r6, r0
 801f792:	1bd2      	subs	r2, r2, r7
 801f794:	4620      	mov	r0, r4
 801f796:	f04f 0300 	mov.w	r3, #0
 801f79a:	4542      	cmp	r2, r8
 801f79c:	bf94      	ite	ls
 801f79e:	188a      	addls	r2, r1, r2
 801f7a0:	eb01 0208 	addhi.w	r2, r1, r8
 801f7a4:	f7e5 fd91 	bl	80052ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801f7a8:	4620      	mov	r0, r4
 801f7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7ae:	bf00      	nop
 801f7b0:	08021b5c 	.word	0x08021b5c

0801f7b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 801f7b4:	b570      	push	{r4, r5, r6, lr}
 801f7b6:	460d      	mov	r5, r1
 801f7b8:	4604      	mov	r4, r0
 801f7ba:	4611      	mov	r1, r2
 801f7bc:	4628      	mov	r0, r5
 801f7be:	4a06      	ldr	r2, [pc, #24]	@ (801f7d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 801f7c0:	461e      	mov	r6, r3
 801f7c2:	f7ff fe5b 	bl	801f47c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801f7c6:	4633      	mov	r3, r6
 801f7c8:	4602      	mov	r2, r0
 801f7ca:	4629      	mov	r1, r5
 801f7cc:	4620      	mov	r0, r4
 801f7ce:	f7ff ffcf 	bl	801f770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 801f7d2:	4620      	mov	r0, r4
 801f7d4:	bd70      	pop	{r4, r5, r6, pc}
 801f7d6:	bf00      	nop
 801f7d8:	08021b77 	.word	0x08021b77

0801f7dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801f7dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801f7de:	2400      	movs	r4, #0
 801f7e0:	2310      	movs	r3, #16
 801f7e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f7e6:	6803      	ldr	r3, [r0, #0]
 801f7e8:	4615      	mov	r5, r2
 801f7ea:	699e      	ldr	r6, [r3, #24]
 801f7ec:	6812      	ldr	r2, [r2, #0]
 801f7ee:	466b      	mov	r3, sp
 801f7f0:	e9cd 4400 	strd	r4, r4, [sp]
 801f7f4:	47b0      	blx	r6
 801f7f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801f7fa:	f003 0306 	and.w	r3, r3, #6
 801f7fe:	2b06      	cmp	r3, #6
 801f800:	bf03      	ittte	eq
 801f802:	9b00      	ldreq	r3, [sp, #0]
 801f804:	602b      	streq	r3, [r5, #0]
 801f806:	2001      	moveq	r0, #1
 801f808:	4620      	movne	r0, r4
 801f80a:	b004      	add	sp, #16
 801f80c:	bd70      	pop	{r4, r5, r6, pc}

0801f80e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801f80e:	9800      	ldr	r0, [sp, #0]
 801f810:	4290      	cmp	r0, r2
 801f812:	bf0c      	ite	eq
 801f814:	2006      	moveq	r0, #6
 801f816:	2001      	movne	r0, #1
 801f818:	4770      	bx	lr
	...

0801f81c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801f81c:	b510      	push	{r4, lr}
 801f81e:	4b03      	ldr	r3, [pc, #12]	@ (801f82c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801f820:	6003      	str	r3, [r0, #0]
 801f822:	4604      	mov	r4, r0
 801f824:	f000 f8d9 	bl	801f9da <_ZNSt9type_infoD1Ev>
 801f828:	4620      	mov	r0, r4
 801f82a:	bd10      	pop	{r4, pc}
 801f82c:	08021bc4 	.word	0x08021bc4

0801f830 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801f830:	b510      	push	{r4, lr}
 801f832:	4604      	mov	r4, r0
 801f834:	f7ff fff2 	bl	801f81c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801f838:	4620      	mov	r0, r4
 801f83a:	2108      	movs	r1, #8
 801f83c:	f7ff fd95 	bl	801f36a <_ZdlPvj>
 801f840:	4620      	mov	r0, r4
 801f842:	bd10      	pop	{r4, pc}

0801f844 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801f844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f848:	461f      	mov	r7, r3
 801f84a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801f84e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f852:	4598      	cmp	r8, r3
 801f854:	4606      	mov	r6, r0
 801f856:	4615      	mov	r5, r2
 801f858:	d107      	bne.n	801f86a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801f85a:	9907      	ldr	r1, [sp, #28]
 801f85c:	f000 f8c0 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f860:	b118      	cbz	r0, 801f86a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801f862:	7165      	strb	r5, [r4, #5]
 801f864:	2000      	movs	r0, #0
 801f866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f86a:	4639      	mov	r1, r7
 801f86c:	4630      	mov	r0, r6
 801f86e:	f000 f8b7 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f872:	2800      	cmp	r0, #0
 801f874:	d0f6      	beq.n	801f864 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801f876:	2301      	movs	r3, #1
 801f878:	f8c4 8000 	str.w	r8, [r4]
 801f87c:	7125      	strb	r5, [r4, #4]
 801f87e:	71a3      	strb	r3, [r4, #6]
 801f880:	e7f0      	b.n	801f864 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801f882 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801f882:	b538      	push	{r3, r4, r5, lr}
 801f884:	4615      	mov	r5, r2
 801f886:	461c      	mov	r4, r3
 801f888:	f000 f8aa 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f88c:	b120      	cbz	r0, 801f898 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801f88e:	2308      	movs	r3, #8
 801f890:	60e3      	str	r3, [r4, #12]
 801f892:	2306      	movs	r3, #6
 801f894:	6025      	str	r5, [r4, #0]
 801f896:	7123      	strb	r3, [r4, #4]
 801f898:	bd38      	pop	{r3, r4, r5, pc}

0801f89a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801f89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f89e:	4605      	mov	r5, r0
 801f8a0:	460c      	mov	r4, r1
 801f8a2:	4616      	mov	r6, r2
 801f8a4:	461f      	mov	r7, r3
 801f8a6:	f000 f89b 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f8aa:	b948      	cbnz	r0, 801f8c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801f8ac:	2f03      	cmp	r7, #3
 801f8ae:	d807      	bhi.n	801f8c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801f8b0:	6823      	ldr	r3, [r4, #0]
 801f8b2:	4632      	mov	r2, r6
 801f8b4:	4629      	mov	r1, r5
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	695b      	ldr	r3, [r3, #20]
 801f8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f8be:	4718      	bx	r3
 801f8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f8c4 <_ZdlPv>:
 801f8c4:	f000 b8b2 	b.w	801fa2c <free>

0801f8c8 <_ZSt15get_new_handlerv>:
 801f8c8:	4b02      	ldr	r3, [pc, #8]	@ (801f8d4 <_ZSt15get_new_handlerv+0xc>)
 801f8ca:	6818      	ldr	r0, [r3, #0]
 801f8cc:	f3bf 8f5b 	dmb	ish
 801f8d0:	4770      	bx	lr
 801f8d2:	bf00      	nop
 801f8d4:	24000abc 	.word	0x24000abc

0801f8d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801f8d8:	b510      	push	{r4, lr}
 801f8da:	4b03      	ldr	r3, [pc, #12]	@ (801f8e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801f8dc:	6003      	str	r3, [r0, #0]
 801f8de:	4604      	mov	r4, r0
 801f8e0:	f7ff ff9c 	bl	801f81c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801f8e4:	4620      	mov	r0, r4
 801f8e6:	bd10      	pop	{r4, pc}
 801f8e8:	08021c24 	.word	0x08021c24

0801f8ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801f8ec:	b510      	push	{r4, lr}
 801f8ee:	4604      	mov	r4, r0
 801f8f0:	f7ff fff2 	bl	801f8d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	210c      	movs	r1, #12
 801f8f8:	f7ff fd37 	bl	801f36a <_ZdlPvj>
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	bd10      	pop	{r4, pc}

0801f900 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f904:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f908:	4590      	cmp	r8, r2
 801f90a:	4606      	mov	r6, r0
 801f90c:	460f      	mov	r7, r1
 801f90e:	4615      	mov	r5, r2
 801f910:	461c      	mov	r4, r3
 801f912:	d00b      	beq.n	801f92c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801f914:	68b0      	ldr	r0, [r6, #8]
 801f916:	6803      	ldr	r3, [r0, #0]
 801f918:	f8cd 8018 	str.w	r8, [sp, #24]
 801f91c:	6a1e      	ldr	r6, [r3, #32]
 801f91e:	462a      	mov	r2, r5
 801f920:	4623      	mov	r3, r4
 801f922:	4639      	mov	r1, r7
 801f924:	46b4      	mov	ip, r6
 801f926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f92a:	4760      	bx	ip
 801f92c:	4619      	mov	r1, r3
 801f92e:	f000 f857 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f932:	2800      	cmp	r0, #0
 801f934:	d0ee      	beq.n	801f914 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801f936:	2006      	movs	r0, #6
 801f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f93c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801f93c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f940:	460d      	mov	r5, r1
 801f942:	4619      	mov	r1, r3
 801f944:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801f948:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801f94c:	4681      	mov	r9, r0
 801f94e:	4617      	mov	r7, r2
 801f950:	4698      	mov	r8, r3
 801f952:	f000 f845 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f956:	b190      	cbz	r0, 801f97e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801f958:	2d00      	cmp	r5, #0
 801f95a:	6034      	str	r4, [r6, #0]
 801f95c:	7137      	strb	r7, [r6, #4]
 801f95e:	db09      	blt.n	801f974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801f960:	442c      	add	r4, r5
 801f962:	45a2      	cmp	sl, r4
 801f964:	bf14      	ite	ne
 801f966:	2401      	movne	r4, #1
 801f968:	2406      	moveq	r4, #6
 801f96a:	71b4      	strb	r4, [r6, #6]
 801f96c:	2000      	movs	r0, #0
 801f96e:	b001      	add	sp, #4
 801f970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f974:	3502      	adds	r5, #2
 801f976:	d1f9      	bne.n	801f96c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801f978:	2301      	movs	r3, #1
 801f97a:	71b3      	strb	r3, [r6, #6]
 801f97c:	e7f6      	b.n	801f96c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801f97e:	4554      	cmp	r4, sl
 801f980:	d106      	bne.n	801f990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801f982:	4659      	mov	r1, fp
 801f984:	4648      	mov	r0, r9
 801f986:	f000 f82b 	bl	801f9e0 <_ZNKSt9type_info7__equalERKS_>
 801f98a:	b108      	cbz	r0, 801f990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801f98c:	7177      	strb	r7, [r6, #5]
 801f98e:	e7ed      	b.n	801f96c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801f990:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801f994:	6803      	ldr	r3, [r0, #0]
 801f996:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801f99a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801f99e:	69dc      	ldr	r4, [r3, #28]
 801f9a0:	463a      	mov	r2, r7
 801f9a2:	4643      	mov	r3, r8
 801f9a4:	4629      	mov	r1, r5
 801f9a6:	46a4      	mov	ip, r4
 801f9a8:	b001      	add	sp, #4
 801f9aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ae:	4760      	bx	ip

0801f9b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9b4:	4607      	mov	r7, r0
 801f9b6:	460c      	mov	r4, r1
 801f9b8:	4615      	mov	r5, r2
 801f9ba:	461e      	mov	r6, r3
 801f9bc:	f7ff ff61 	bl	801f882 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801f9c0:	b948      	cbnz	r0, 801f9d6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801f9c2:	68b8      	ldr	r0, [r7, #8]
 801f9c4:	6803      	ldr	r3, [r0, #0]
 801f9c6:	699f      	ldr	r7, [r3, #24]
 801f9c8:	462a      	mov	r2, r5
 801f9ca:	4633      	mov	r3, r6
 801f9cc:	4621      	mov	r1, r4
 801f9ce:	46bc      	mov	ip, r7
 801f9d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9d4:	4760      	bx	ip
 801f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f9da <_ZNSt9type_infoD1Ev>:
 801f9da:	4770      	bx	lr

0801f9dc <_ZNKSt9type_info14__is_pointer_pEv>:
 801f9dc:	2000      	movs	r0, #0
 801f9de:	4770      	bx	lr

0801f9e0 <_ZNKSt9type_info7__equalERKS_>:
 801f9e0:	4281      	cmp	r1, r0
 801f9e2:	b508      	push	{r3, lr}
 801f9e4:	d00e      	beq.n	801fa04 <_ZNKSt9type_info7__equalERKS_+0x24>
 801f9e6:	6840      	ldr	r0, [r0, #4]
 801f9e8:	7803      	ldrb	r3, [r0, #0]
 801f9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801f9ec:	d00c      	beq.n	801fa08 <_ZNKSt9type_info7__equalERKS_+0x28>
 801f9ee:	6849      	ldr	r1, [r1, #4]
 801f9f0:	780b      	ldrb	r3, [r1, #0]
 801f9f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801f9f4:	bf08      	it	eq
 801f9f6:	3101      	addeq	r1, #1
 801f9f8:	f7e0 fc72 	bl	80002e0 <strcmp>
 801f9fc:	fab0 f080 	clz	r0, r0
 801fa00:	0940      	lsrs	r0, r0, #5
 801fa02:	bd08      	pop	{r3, pc}
 801fa04:	2001      	movs	r0, #1
 801fa06:	e7fc      	b.n	801fa02 <_ZNKSt9type_info7__equalERKS_+0x22>
 801fa08:	2000      	movs	r0, #0
 801fa0a:	e7fa      	b.n	801fa02 <_ZNKSt9type_info7__equalERKS_+0x22>

0801fa0c <abort>:
 801fa0c:	b508      	push	{r3, lr}
 801fa0e:	2006      	movs	r0, #6
 801fa10:	f000 fbd8 	bl	80201c4 <raise>
 801fa14:	2001      	movs	r0, #1
 801fa16:	f7ec f93b 	bl	800bc90 <_exit>
	...

0801fa1c <malloc>:
 801fa1c:	4b02      	ldr	r3, [pc, #8]	@ (801fa28 <malloc+0xc>)
 801fa1e:	4601      	mov	r1, r0
 801fa20:	6818      	ldr	r0, [r3, #0]
 801fa22:	f000 b82d 	b.w	801fa80 <_malloc_r>
 801fa26:	bf00      	nop
 801fa28:	24000038 	.word	0x24000038

0801fa2c <free>:
 801fa2c:	4b02      	ldr	r3, [pc, #8]	@ (801fa38 <free+0xc>)
 801fa2e:	4601      	mov	r1, r0
 801fa30:	6818      	ldr	r0, [r3, #0]
 801fa32:	f000 bc75 	b.w	8020320 <_free_r>
 801fa36:	bf00      	nop
 801fa38:	24000038 	.word	0x24000038

0801fa3c <sbrk_aligned>:
 801fa3c:	b570      	push	{r4, r5, r6, lr}
 801fa3e:	4e0f      	ldr	r6, [pc, #60]	@ (801fa7c <sbrk_aligned+0x40>)
 801fa40:	460c      	mov	r4, r1
 801fa42:	6831      	ldr	r1, [r6, #0]
 801fa44:	4605      	mov	r5, r0
 801fa46:	b911      	cbnz	r1, 801fa4e <sbrk_aligned+0x12>
 801fa48:	f000 fc0c 	bl	8020264 <_sbrk_r>
 801fa4c:	6030      	str	r0, [r6, #0]
 801fa4e:	4621      	mov	r1, r4
 801fa50:	4628      	mov	r0, r5
 801fa52:	f000 fc07 	bl	8020264 <_sbrk_r>
 801fa56:	1c43      	adds	r3, r0, #1
 801fa58:	d103      	bne.n	801fa62 <sbrk_aligned+0x26>
 801fa5a:	f04f 34ff 	mov.w	r4, #4294967295
 801fa5e:	4620      	mov	r0, r4
 801fa60:	bd70      	pop	{r4, r5, r6, pc}
 801fa62:	1cc4      	adds	r4, r0, #3
 801fa64:	f024 0403 	bic.w	r4, r4, #3
 801fa68:	42a0      	cmp	r0, r4
 801fa6a:	d0f8      	beq.n	801fa5e <sbrk_aligned+0x22>
 801fa6c:	1a21      	subs	r1, r4, r0
 801fa6e:	4628      	mov	r0, r5
 801fa70:	f000 fbf8 	bl	8020264 <_sbrk_r>
 801fa74:	3001      	adds	r0, #1
 801fa76:	d1f2      	bne.n	801fa5e <sbrk_aligned+0x22>
 801fa78:	e7ef      	b.n	801fa5a <sbrk_aligned+0x1e>
 801fa7a:	bf00      	nop
 801fa7c:	24000ac0 	.word	0x24000ac0

0801fa80 <_malloc_r>:
 801fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa84:	1ccd      	adds	r5, r1, #3
 801fa86:	f025 0503 	bic.w	r5, r5, #3
 801fa8a:	3508      	adds	r5, #8
 801fa8c:	2d0c      	cmp	r5, #12
 801fa8e:	bf38      	it	cc
 801fa90:	250c      	movcc	r5, #12
 801fa92:	2d00      	cmp	r5, #0
 801fa94:	4606      	mov	r6, r0
 801fa96:	db01      	blt.n	801fa9c <_malloc_r+0x1c>
 801fa98:	42a9      	cmp	r1, r5
 801fa9a:	d904      	bls.n	801faa6 <_malloc_r+0x26>
 801fa9c:	230c      	movs	r3, #12
 801fa9e:	6033      	str	r3, [r6, #0]
 801faa0:	2000      	movs	r0, #0
 801faa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801faa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801fb7c <_malloc_r+0xfc>
 801faaa:	f000 f869 	bl	801fb80 <__malloc_lock>
 801faae:	f8d8 3000 	ldr.w	r3, [r8]
 801fab2:	461c      	mov	r4, r3
 801fab4:	bb44      	cbnz	r4, 801fb08 <_malloc_r+0x88>
 801fab6:	4629      	mov	r1, r5
 801fab8:	4630      	mov	r0, r6
 801faba:	f7ff ffbf 	bl	801fa3c <sbrk_aligned>
 801fabe:	1c43      	adds	r3, r0, #1
 801fac0:	4604      	mov	r4, r0
 801fac2:	d158      	bne.n	801fb76 <_malloc_r+0xf6>
 801fac4:	f8d8 4000 	ldr.w	r4, [r8]
 801fac8:	4627      	mov	r7, r4
 801faca:	2f00      	cmp	r7, #0
 801facc:	d143      	bne.n	801fb56 <_malloc_r+0xd6>
 801face:	2c00      	cmp	r4, #0
 801fad0:	d04b      	beq.n	801fb6a <_malloc_r+0xea>
 801fad2:	6823      	ldr	r3, [r4, #0]
 801fad4:	4639      	mov	r1, r7
 801fad6:	4630      	mov	r0, r6
 801fad8:	eb04 0903 	add.w	r9, r4, r3
 801fadc:	f000 fbc2 	bl	8020264 <_sbrk_r>
 801fae0:	4581      	cmp	r9, r0
 801fae2:	d142      	bne.n	801fb6a <_malloc_r+0xea>
 801fae4:	6821      	ldr	r1, [r4, #0]
 801fae6:	1a6d      	subs	r5, r5, r1
 801fae8:	4629      	mov	r1, r5
 801faea:	4630      	mov	r0, r6
 801faec:	f7ff ffa6 	bl	801fa3c <sbrk_aligned>
 801faf0:	3001      	adds	r0, #1
 801faf2:	d03a      	beq.n	801fb6a <_malloc_r+0xea>
 801faf4:	6823      	ldr	r3, [r4, #0]
 801faf6:	442b      	add	r3, r5
 801faf8:	6023      	str	r3, [r4, #0]
 801fafa:	f8d8 3000 	ldr.w	r3, [r8]
 801fafe:	685a      	ldr	r2, [r3, #4]
 801fb00:	bb62      	cbnz	r2, 801fb5c <_malloc_r+0xdc>
 801fb02:	f8c8 7000 	str.w	r7, [r8]
 801fb06:	e00f      	b.n	801fb28 <_malloc_r+0xa8>
 801fb08:	6822      	ldr	r2, [r4, #0]
 801fb0a:	1b52      	subs	r2, r2, r5
 801fb0c:	d420      	bmi.n	801fb50 <_malloc_r+0xd0>
 801fb0e:	2a0b      	cmp	r2, #11
 801fb10:	d917      	bls.n	801fb42 <_malloc_r+0xc2>
 801fb12:	1961      	adds	r1, r4, r5
 801fb14:	42a3      	cmp	r3, r4
 801fb16:	6025      	str	r5, [r4, #0]
 801fb18:	bf18      	it	ne
 801fb1a:	6059      	strne	r1, [r3, #4]
 801fb1c:	6863      	ldr	r3, [r4, #4]
 801fb1e:	bf08      	it	eq
 801fb20:	f8c8 1000 	streq.w	r1, [r8]
 801fb24:	5162      	str	r2, [r4, r5]
 801fb26:	604b      	str	r3, [r1, #4]
 801fb28:	4630      	mov	r0, r6
 801fb2a:	f000 f82f 	bl	801fb8c <__malloc_unlock>
 801fb2e:	f104 000b 	add.w	r0, r4, #11
 801fb32:	1d23      	adds	r3, r4, #4
 801fb34:	f020 0007 	bic.w	r0, r0, #7
 801fb38:	1ac2      	subs	r2, r0, r3
 801fb3a:	bf1c      	itt	ne
 801fb3c:	1a1b      	subne	r3, r3, r0
 801fb3e:	50a3      	strne	r3, [r4, r2]
 801fb40:	e7af      	b.n	801faa2 <_malloc_r+0x22>
 801fb42:	6862      	ldr	r2, [r4, #4]
 801fb44:	42a3      	cmp	r3, r4
 801fb46:	bf0c      	ite	eq
 801fb48:	f8c8 2000 	streq.w	r2, [r8]
 801fb4c:	605a      	strne	r2, [r3, #4]
 801fb4e:	e7eb      	b.n	801fb28 <_malloc_r+0xa8>
 801fb50:	4623      	mov	r3, r4
 801fb52:	6864      	ldr	r4, [r4, #4]
 801fb54:	e7ae      	b.n	801fab4 <_malloc_r+0x34>
 801fb56:	463c      	mov	r4, r7
 801fb58:	687f      	ldr	r7, [r7, #4]
 801fb5a:	e7b6      	b.n	801faca <_malloc_r+0x4a>
 801fb5c:	461a      	mov	r2, r3
 801fb5e:	685b      	ldr	r3, [r3, #4]
 801fb60:	42a3      	cmp	r3, r4
 801fb62:	d1fb      	bne.n	801fb5c <_malloc_r+0xdc>
 801fb64:	2300      	movs	r3, #0
 801fb66:	6053      	str	r3, [r2, #4]
 801fb68:	e7de      	b.n	801fb28 <_malloc_r+0xa8>
 801fb6a:	230c      	movs	r3, #12
 801fb6c:	6033      	str	r3, [r6, #0]
 801fb6e:	4630      	mov	r0, r6
 801fb70:	f000 f80c 	bl	801fb8c <__malloc_unlock>
 801fb74:	e794      	b.n	801faa0 <_malloc_r+0x20>
 801fb76:	6005      	str	r5, [r0, #0]
 801fb78:	e7d6      	b.n	801fb28 <_malloc_r+0xa8>
 801fb7a:	bf00      	nop
 801fb7c:	24000ac4 	.word	0x24000ac4

0801fb80 <__malloc_lock>:
 801fb80:	4801      	ldr	r0, [pc, #4]	@ (801fb88 <__malloc_lock+0x8>)
 801fb82:	f000 bbbc 	b.w	80202fe <__retarget_lock_acquire_recursive>
 801fb86:	bf00      	nop
 801fb88:	24000c08 	.word	0x24000c08

0801fb8c <__malloc_unlock>:
 801fb8c:	4801      	ldr	r0, [pc, #4]	@ (801fb94 <__malloc_unlock+0x8>)
 801fb8e:	f000 bbb7 	b.w	8020300 <__retarget_lock_release_recursive>
 801fb92:	bf00      	nop
 801fb94:	24000c08 	.word	0x24000c08

0801fb98 <realloc>:
 801fb98:	4b02      	ldr	r3, [pc, #8]	@ (801fba4 <realloc+0xc>)
 801fb9a:	460a      	mov	r2, r1
 801fb9c:	4601      	mov	r1, r0
 801fb9e:	6818      	ldr	r0, [r3, #0]
 801fba0:	f000 b802 	b.w	801fba8 <_realloc_r>
 801fba4:	24000038 	.word	0x24000038

0801fba8 <_realloc_r>:
 801fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbac:	4680      	mov	r8, r0
 801fbae:	4615      	mov	r5, r2
 801fbb0:	460c      	mov	r4, r1
 801fbb2:	b921      	cbnz	r1, 801fbbe <_realloc_r+0x16>
 801fbb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fbb8:	4611      	mov	r1, r2
 801fbba:	f7ff bf61 	b.w	801fa80 <_malloc_r>
 801fbbe:	b92a      	cbnz	r2, 801fbcc <_realloc_r+0x24>
 801fbc0:	f000 fbae 	bl	8020320 <_free_r>
 801fbc4:	2400      	movs	r4, #0
 801fbc6:	4620      	mov	r0, r4
 801fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbcc:	f000 fbf2 	bl	80203b4 <_malloc_usable_size_r>
 801fbd0:	4285      	cmp	r5, r0
 801fbd2:	4606      	mov	r6, r0
 801fbd4:	d802      	bhi.n	801fbdc <_realloc_r+0x34>
 801fbd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801fbda:	d8f4      	bhi.n	801fbc6 <_realloc_r+0x1e>
 801fbdc:	4629      	mov	r1, r5
 801fbde:	4640      	mov	r0, r8
 801fbe0:	f7ff ff4e 	bl	801fa80 <_malloc_r>
 801fbe4:	4607      	mov	r7, r0
 801fbe6:	2800      	cmp	r0, #0
 801fbe8:	d0ec      	beq.n	801fbc4 <_realloc_r+0x1c>
 801fbea:	42b5      	cmp	r5, r6
 801fbec:	462a      	mov	r2, r5
 801fbee:	4621      	mov	r1, r4
 801fbf0:	bf28      	it	cs
 801fbf2:	4632      	movcs	r2, r6
 801fbf4:	f000 fb85 	bl	8020302 <memcpy>
 801fbf8:	4621      	mov	r1, r4
 801fbfa:	4640      	mov	r0, r8
 801fbfc:	f000 fb90 	bl	8020320 <_free_r>
 801fc00:	463c      	mov	r4, r7
 801fc02:	e7e0      	b.n	801fbc6 <_realloc_r+0x1e>

0801fc04 <_strtol_l.constprop.0>:
 801fc04:	2b24      	cmp	r3, #36	@ 0x24
 801fc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc0a:	4686      	mov	lr, r0
 801fc0c:	4690      	mov	r8, r2
 801fc0e:	d801      	bhi.n	801fc14 <_strtol_l.constprop.0+0x10>
 801fc10:	2b01      	cmp	r3, #1
 801fc12:	d106      	bne.n	801fc22 <_strtol_l.constprop.0+0x1e>
 801fc14:	f000 fb48 	bl	80202a8 <__errno>
 801fc18:	2316      	movs	r3, #22
 801fc1a:	6003      	str	r3, [r0, #0]
 801fc1c:	2000      	movs	r0, #0
 801fc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc22:	4834      	ldr	r0, [pc, #208]	@ (801fcf4 <_strtol_l.constprop.0+0xf0>)
 801fc24:	460d      	mov	r5, r1
 801fc26:	462a      	mov	r2, r5
 801fc28:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fc2c:	5d06      	ldrb	r6, [r0, r4]
 801fc2e:	f016 0608 	ands.w	r6, r6, #8
 801fc32:	d1f8      	bne.n	801fc26 <_strtol_l.constprop.0+0x22>
 801fc34:	2c2d      	cmp	r4, #45	@ 0x2d
 801fc36:	d12d      	bne.n	801fc94 <_strtol_l.constprop.0+0x90>
 801fc38:	782c      	ldrb	r4, [r5, #0]
 801fc3a:	2601      	movs	r6, #1
 801fc3c:	1c95      	adds	r5, r2, #2
 801fc3e:	f033 0210 	bics.w	r2, r3, #16
 801fc42:	d109      	bne.n	801fc58 <_strtol_l.constprop.0+0x54>
 801fc44:	2c30      	cmp	r4, #48	@ 0x30
 801fc46:	d12a      	bne.n	801fc9e <_strtol_l.constprop.0+0x9a>
 801fc48:	782a      	ldrb	r2, [r5, #0]
 801fc4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801fc4e:	2a58      	cmp	r2, #88	@ 0x58
 801fc50:	d125      	bne.n	801fc9e <_strtol_l.constprop.0+0x9a>
 801fc52:	786c      	ldrb	r4, [r5, #1]
 801fc54:	2310      	movs	r3, #16
 801fc56:	3502      	adds	r5, #2
 801fc58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801fc5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fc60:	2200      	movs	r2, #0
 801fc62:	fbbc f9f3 	udiv	r9, ip, r3
 801fc66:	4610      	mov	r0, r2
 801fc68:	fb03 ca19 	mls	sl, r3, r9, ip
 801fc6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801fc70:	2f09      	cmp	r7, #9
 801fc72:	d81b      	bhi.n	801fcac <_strtol_l.constprop.0+0xa8>
 801fc74:	463c      	mov	r4, r7
 801fc76:	42a3      	cmp	r3, r4
 801fc78:	dd27      	ble.n	801fcca <_strtol_l.constprop.0+0xc6>
 801fc7a:	1c57      	adds	r7, r2, #1
 801fc7c:	d007      	beq.n	801fc8e <_strtol_l.constprop.0+0x8a>
 801fc7e:	4581      	cmp	r9, r0
 801fc80:	d320      	bcc.n	801fcc4 <_strtol_l.constprop.0+0xc0>
 801fc82:	d101      	bne.n	801fc88 <_strtol_l.constprop.0+0x84>
 801fc84:	45a2      	cmp	sl, r4
 801fc86:	db1d      	blt.n	801fcc4 <_strtol_l.constprop.0+0xc0>
 801fc88:	fb00 4003 	mla	r0, r0, r3, r4
 801fc8c:	2201      	movs	r2, #1
 801fc8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fc92:	e7eb      	b.n	801fc6c <_strtol_l.constprop.0+0x68>
 801fc94:	2c2b      	cmp	r4, #43	@ 0x2b
 801fc96:	bf04      	itt	eq
 801fc98:	782c      	ldrbeq	r4, [r5, #0]
 801fc9a:	1c95      	addeq	r5, r2, #2
 801fc9c:	e7cf      	b.n	801fc3e <_strtol_l.constprop.0+0x3a>
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d1da      	bne.n	801fc58 <_strtol_l.constprop.0+0x54>
 801fca2:	2c30      	cmp	r4, #48	@ 0x30
 801fca4:	bf0c      	ite	eq
 801fca6:	2308      	moveq	r3, #8
 801fca8:	230a      	movne	r3, #10
 801fcaa:	e7d5      	b.n	801fc58 <_strtol_l.constprop.0+0x54>
 801fcac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801fcb0:	2f19      	cmp	r7, #25
 801fcb2:	d801      	bhi.n	801fcb8 <_strtol_l.constprop.0+0xb4>
 801fcb4:	3c37      	subs	r4, #55	@ 0x37
 801fcb6:	e7de      	b.n	801fc76 <_strtol_l.constprop.0+0x72>
 801fcb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801fcbc:	2f19      	cmp	r7, #25
 801fcbe:	d804      	bhi.n	801fcca <_strtol_l.constprop.0+0xc6>
 801fcc0:	3c57      	subs	r4, #87	@ 0x57
 801fcc2:	e7d8      	b.n	801fc76 <_strtol_l.constprop.0+0x72>
 801fcc4:	f04f 32ff 	mov.w	r2, #4294967295
 801fcc8:	e7e1      	b.n	801fc8e <_strtol_l.constprop.0+0x8a>
 801fcca:	1c53      	adds	r3, r2, #1
 801fccc:	d108      	bne.n	801fce0 <_strtol_l.constprop.0+0xdc>
 801fcce:	2322      	movs	r3, #34	@ 0x22
 801fcd0:	f8ce 3000 	str.w	r3, [lr]
 801fcd4:	4660      	mov	r0, ip
 801fcd6:	f1b8 0f00 	cmp.w	r8, #0
 801fcda:	d0a0      	beq.n	801fc1e <_strtol_l.constprop.0+0x1a>
 801fcdc:	1e69      	subs	r1, r5, #1
 801fcde:	e006      	b.n	801fcee <_strtol_l.constprop.0+0xea>
 801fce0:	b106      	cbz	r6, 801fce4 <_strtol_l.constprop.0+0xe0>
 801fce2:	4240      	negs	r0, r0
 801fce4:	f1b8 0f00 	cmp.w	r8, #0
 801fce8:	d099      	beq.n	801fc1e <_strtol_l.constprop.0+0x1a>
 801fcea:	2a00      	cmp	r2, #0
 801fcec:	d1f6      	bne.n	801fcdc <_strtol_l.constprop.0+0xd8>
 801fcee:	f8c8 1000 	str.w	r1, [r8]
 801fcf2:	e794      	b.n	801fc1e <_strtol_l.constprop.0+0x1a>
 801fcf4:	08021c61 	.word	0x08021c61

0801fcf8 <strtol>:
 801fcf8:	4613      	mov	r3, r2
 801fcfa:	460a      	mov	r2, r1
 801fcfc:	4601      	mov	r1, r0
 801fcfe:	4802      	ldr	r0, [pc, #8]	@ (801fd08 <strtol+0x10>)
 801fd00:	6800      	ldr	r0, [r0, #0]
 801fd02:	f7ff bf7f 	b.w	801fc04 <_strtol_l.constprop.0>
 801fd06:	bf00      	nop
 801fd08:	24000038 	.word	0x24000038

0801fd0c <std>:
 801fd0c:	2300      	movs	r3, #0
 801fd0e:	b510      	push	{r4, lr}
 801fd10:	4604      	mov	r4, r0
 801fd12:	e9c0 3300 	strd	r3, r3, [r0]
 801fd16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fd1a:	6083      	str	r3, [r0, #8]
 801fd1c:	8181      	strh	r1, [r0, #12]
 801fd1e:	6643      	str	r3, [r0, #100]	@ 0x64
 801fd20:	81c2      	strh	r2, [r0, #14]
 801fd22:	6183      	str	r3, [r0, #24]
 801fd24:	4619      	mov	r1, r3
 801fd26:	2208      	movs	r2, #8
 801fd28:	305c      	adds	r0, #92	@ 0x5c
 801fd2a:	f000 fa1b 	bl	8020164 <memset>
 801fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (801fd64 <std+0x58>)
 801fd30:	6263      	str	r3, [r4, #36]	@ 0x24
 801fd32:	4b0d      	ldr	r3, [pc, #52]	@ (801fd68 <std+0x5c>)
 801fd34:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fd36:	4b0d      	ldr	r3, [pc, #52]	@ (801fd6c <std+0x60>)
 801fd38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fd3a:	4b0d      	ldr	r3, [pc, #52]	@ (801fd70 <std+0x64>)
 801fd3c:	6323      	str	r3, [r4, #48]	@ 0x30
 801fd3e:	4b0d      	ldr	r3, [pc, #52]	@ (801fd74 <std+0x68>)
 801fd40:	6224      	str	r4, [r4, #32]
 801fd42:	429c      	cmp	r4, r3
 801fd44:	d006      	beq.n	801fd54 <std+0x48>
 801fd46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801fd4a:	4294      	cmp	r4, r2
 801fd4c:	d002      	beq.n	801fd54 <std+0x48>
 801fd4e:	33d0      	adds	r3, #208	@ 0xd0
 801fd50:	429c      	cmp	r4, r3
 801fd52:	d105      	bne.n	801fd60 <std+0x54>
 801fd54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801fd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd5c:	f000 bace 	b.w	80202fc <__retarget_lock_init_recursive>
 801fd60:	bd10      	pop	{r4, pc}
 801fd62:	bf00      	nop
 801fd64:	0801ff81 	.word	0x0801ff81
 801fd68:	0801ffa3 	.word	0x0801ffa3
 801fd6c:	0801ffdb 	.word	0x0801ffdb
 801fd70:	0801ffff 	.word	0x0801ffff
 801fd74:	24000ac8 	.word	0x24000ac8

0801fd78 <stdio_exit_handler>:
 801fd78:	4a02      	ldr	r2, [pc, #8]	@ (801fd84 <stdio_exit_handler+0xc>)
 801fd7a:	4903      	ldr	r1, [pc, #12]	@ (801fd88 <stdio_exit_handler+0x10>)
 801fd7c:	4803      	ldr	r0, [pc, #12]	@ (801fd8c <stdio_exit_handler+0x14>)
 801fd7e:	f000 b869 	b.w	801fe54 <_fwalk_sglue>
 801fd82:	bf00      	nop
 801fd84:	2400002c 	.word	0x2400002c
 801fd88:	08020a6d 	.word	0x08020a6d
 801fd8c:	2400003c 	.word	0x2400003c

0801fd90 <cleanup_stdio>:
 801fd90:	6841      	ldr	r1, [r0, #4]
 801fd92:	4b0c      	ldr	r3, [pc, #48]	@ (801fdc4 <cleanup_stdio+0x34>)
 801fd94:	4299      	cmp	r1, r3
 801fd96:	b510      	push	{r4, lr}
 801fd98:	4604      	mov	r4, r0
 801fd9a:	d001      	beq.n	801fda0 <cleanup_stdio+0x10>
 801fd9c:	f000 fe66 	bl	8020a6c <_fflush_r>
 801fda0:	68a1      	ldr	r1, [r4, #8]
 801fda2:	4b09      	ldr	r3, [pc, #36]	@ (801fdc8 <cleanup_stdio+0x38>)
 801fda4:	4299      	cmp	r1, r3
 801fda6:	d002      	beq.n	801fdae <cleanup_stdio+0x1e>
 801fda8:	4620      	mov	r0, r4
 801fdaa:	f000 fe5f 	bl	8020a6c <_fflush_r>
 801fdae:	68e1      	ldr	r1, [r4, #12]
 801fdb0:	4b06      	ldr	r3, [pc, #24]	@ (801fdcc <cleanup_stdio+0x3c>)
 801fdb2:	4299      	cmp	r1, r3
 801fdb4:	d004      	beq.n	801fdc0 <cleanup_stdio+0x30>
 801fdb6:	4620      	mov	r0, r4
 801fdb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdbc:	f000 be56 	b.w	8020a6c <_fflush_r>
 801fdc0:	bd10      	pop	{r4, pc}
 801fdc2:	bf00      	nop
 801fdc4:	24000ac8 	.word	0x24000ac8
 801fdc8:	24000b30 	.word	0x24000b30
 801fdcc:	24000b98 	.word	0x24000b98

0801fdd0 <global_stdio_init.part.0>:
 801fdd0:	b510      	push	{r4, lr}
 801fdd2:	4b0b      	ldr	r3, [pc, #44]	@ (801fe00 <global_stdio_init.part.0+0x30>)
 801fdd4:	4c0b      	ldr	r4, [pc, #44]	@ (801fe04 <global_stdio_init.part.0+0x34>)
 801fdd6:	4a0c      	ldr	r2, [pc, #48]	@ (801fe08 <global_stdio_init.part.0+0x38>)
 801fdd8:	601a      	str	r2, [r3, #0]
 801fdda:	4620      	mov	r0, r4
 801fddc:	2200      	movs	r2, #0
 801fdde:	2104      	movs	r1, #4
 801fde0:	f7ff ff94 	bl	801fd0c <std>
 801fde4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801fde8:	2201      	movs	r2, #1
 801fdea:	2109      	movs	r1, #9
 801fdec:	f7ff ff8e 	bl	801fd0c <std>
 801fdf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801fdf4:	2202      	movs	r2, #2
 801fdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdfa:	2112      	movs	r1, #18
 801fdfc:	f7ff bf86 	b.w	801fd0c <std>
 801fe00:	24000c00 	.word	0x24000c00
 801fe04:	24000ac8 	.word	0x24000ac8
 801fe08:	0801fd79 	.word	0x0801fd79

0801fe0c <__sfp_lock_acquire>:
 801fe0c:	4801      	ldr	r0, [pc, #4]	@ (801fe14 <__sfp_lock_acquire+0x8>)
 801fe0e:	f000 ba76 	b.w	80202fe <__retarget_lock_acquire_recursive>
 801fe12:	bf00      	nop
 801fe14:	24000c09 	.word	0x24000c09

0801fe18 <__sfp_lock_release>:
 801fe18:	4801      	ldr	r0, [pc, #4]	@ (801fe20 <__sfp_lock_release+0x8>)
 801fe1a:	f000 ba71 	b.w	8020300 <__retarget_lock_release_recursive>
 801fe1e:	bf00      	nop
 801fe20:	24000c09 	.word	0x24000c09

0801fe24 <__sinit>:
 801fe24:	b510      	push	{r4, lr}
 801fe26:	4604      	mov	r4, r0
 801fe28:	f7ff fff0 	bl	801fe0c <__sfp_lock_acquire>
 801fe2c:	6a23      	ldr	r3, [r4, #32]
 801fe2e:	b11b      	cbz	r3, 801fe38 <__sinit+0x14>
 801fe30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe34:	f7ff bff0 	b.w	801fe18 <__sfp_lock_release>
 801fe38:	4b04      	ldr	r3, [pc, #16]	@ (801fe4c <__sinit+0x28>)
 801fe3a:	6223      	str	r3, [r4, #32]
 801fe3c:	4b04      	ldr	r3, [pc, #16]	@ (801fe50 <__sinit+0x2c>)
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d1f5      	bne.n	801fe30 <__sinit+0xc>
 801fe44:	f7ff ffc4 	bl	801fdd0 <global_stdio_init.part.0>
 801fe48:	e7f2      	b.n	801fe30 <__sinit+0xc>
 801fe4a:	bf00      	nop
 801fe4c:	0801fd91 	.word	0x0801fd91
 801fe50:	24000c00 	.word	0x24000c00

0801fe54 <_fwalk_sglue>:
 801fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe58:	4607      	mov	r7, r0
 801fe5a:	4688      	mov	r8, r1
 801fe5c:	4614      	mov	r4, r2
 801fe5e:	2600      	movs	r6, #0
 801fe60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fe64:	f1b9 0901 	subs.w	r9, r9, #1
 801fe68:	d505      	bpl.n	801fe76 <_fwalk_sglue+0x22>
 801fe6a:	6824      	ldr	r4, [r4, #0]
 801fe6c:	2c00      	cmp	r4, #0
 801fe6e:	d1f7      	bne.n	801fe60 <_fwalk_sglue+0xc>
 801fe70:	4630      	mov	r0, r6
 801fe72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe76:	89ab      	ldrh	r3, [r5, #12]
 801fe78:	2b01      	cmp	r3, #1
 801fe7a:	d907      	bls.n	801fe8c <_fwalk_sglue+0x38>
 801fe7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe80:	3301      	adds	r3, #1
 801fe82:	d003      	beq.n	801fe8c <_fwalk_sglue+0x38>
 801fe84:	4629      	mov	r1, r5
 801fe86:	4638      	mov	r0, r7
 801fe88:	47c0      	blx	r8
 801fe8a:	4306      	orrs	r6, r0
 801fe8c:	3568      	adds	r5, #104	@ 0x68
 801fe8e:	e7e9      	b.n	801fe64 <_fwalk_sglue+0x10>

0801fe90 <iprintf>:
 801fe90:	b40f      	push	{r0, r1, r2, r3}
 801fe92:	b507      	push	{r0, r1, r2, lr}
 801fe94:	4906      	ldr	r1, [pc, #24]	@ (801feb0 <iprintf+0x20>)
 801fe96:	ab04      	add	r3, sp, #16
 801fe98:	6808      	ldr	r0, [r1, #0]
 801fe9a:	f853 2b04 	ldr.w	r2, [r3], #4
 801fe9e:	6881      	ldr	r1, [r0, #8]
 801fea0:	9301      	str	r3, [sp, #4]
 801fea2:	f000 fab9 	bl	8020418 <_vfiprintf_r>
 801fea6:	b003      	add	sp, #12
 801fea8:	f85d eb04 	ldr.w	lr, [sp], #4
 801feac:	b004      	add	sp, #16
 801feae:	4770      	bx	lr
 801feb0:	24000038 	.word	0x24000038

0801feb4 <putchar>:
 801feb4:	4b02      	ldr	r3, [pc, #8]	@ (801fec0 <putchar+0xc>)
 801feb6:	4601      	mov	r1, r0
 801feb8:	6818      	ldr	r0, [r3, #0]
 801feba:	6882      	ldr	r2, [r0, #8]
 801febc:	f000 be60 	b.w	8020b80 <_putc_r>
 801fec0:	24000038 	.word	0x24000038

0801fec4 <_puts_r>:
 801fec4:	6a03      	ldr	r3, [r0, #32]
 801fec6:	b570      	push	{r4, r5, r6, lr}
 801fec8:	6884      	ldr	r4, [r0, #8]
 801feca:	4605      	mov	r5, r0
 801fecc:	460e      	mov	r6, r1
 801fece:	b90b      	cbnz	r3, 801fed4 <_puts_r+0x10>
 801fed0:	f7ff ffa8 	bl	801fe24 <__sinit>
 801fed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fed6:	07db      	lsls	r3, r3, #31
 801fed8:	d405      	bmi.n	801fee6 <_puts_r+0x22>
 801feda:	89a3      	ldrh	r3, [r4, #12]
 801fedc:	0598      	lsls	r0, r3, #22
 801fede:	d402      	bmi.n	801fee6 <_puts_r+0x22>
 801fee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fee2:	f000 fa0c 	bl	80202fe <__retarget_lock_acquire_recursive>
 801fee6:	89a3      	ldrh	r3, [r4, #12]
 801fee8:	0719      	lsls	r1, r3, #28
 801feea:	d502      	bpl.n	801fef2 <_puts_r+0x2e>
 801feec:	6923      	ldr	r3, [r4, #16]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d135      	bne.n	801ff5e <_puts_r+0x9a>
 801fef2:	4621      	mov	r1, r4
 801fef4:	4628      	mov	r0, r5
 801fef6:	f000 f8c5 	bl	8020084 <__swsetup_r>
 801fefa:	b380      	cbz	r0, 801ff5e <_puts_r+0x9a>
 801fefc:	f04f 35ff 	mov.w	r5, #4294967295
 801ff00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ff02:	07da      	lsls	r2, r3, #31
 801ff04:	d405      	bmi.n	801ff12 <_puts_r+0x4e>
 801ff06:	89a3      	ldrh	r3, [r4, #12]
 801ff08:	059b      	lsls	r3, r3, #22
 801ff0a:	d402      	bmi.n	801ff12 <_puts_r+0x4e>
 801ff0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ff0e:	f000 f9f7 	bl	8020300 <__retarget_lock_release_recursive>
 801ff12:	4628      	mov	r0, r5
 801ff14:	bd70      	pop	{r4, r5, r6, pc}
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	da04      	bge.n	801ff24 <_puts_r+0x60>
 801ff1a:	69a2      	ldr	r2, [r4, #24]
 801ff1c:	429a      	cmp	r2, r3
 801ff1e:	dc17      	bgt.n	801ff50 <_puts_r+0x8c>
 801ff20:	290a      	cmp	r1, #10
 801ff22:	d015      	beq.n	801ff50 <_puts_r+0x8c>
 801ff24:	6823      	ldr	r3, [r4, #0]
 801ff26:	1c5a      	adds	r2, r3, #1
 801ff28:	6022      	str	r2, [r4, #0]
 801ff2a:	7019      	strb	r1, [r3, #0]
 801ff2c:	68a3      	ldr	r3, [r4, #8]
 801ff2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ff32:	3b01      	subs	r3, #1
 801ff34:	60a3      	str	r3, [r4, #8]
 801ff36:	2900      	cmp	r1, #0
 801ff38:	d1ed      	bne.n	801ff16 <_puts_r+0x52>
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	da11      	bge.n	801ff62 <_puts_r+0x9e>
 801ff3e:	4622      	mov	r2, r4
 801ff40:	210a      	movs	r1, #10
 801ff42:	4628      	mov	r0, r5
 801ff44:	f000 f85f 	bl	8020006 <__swbuf_r>
 801ff48:	3001      	adds	r0, #1
 801ff4a:	d0d7      	beq.n	801fefc <_puts_r+0x38>
 801ff4c:	250a      	movs	r5, #10
 801ff4e:	e7d7      	b.n	801ff00 <_puts_r+0x3c>
 801ff50:	4622      	mov	r2, r4
 801ff52:	4628      	mov	r0, r5
 801ff54:	f000 f857 	bl	8020006 <__swbuf_r>
 801ff58:	3001      	adds	r0, #1
 801ff5a:	d1e7      	bne.n	801ff2c <_puts_r+0x68>
 801ff5c:	e7ce      	b.n	801fefc <_puts_r+0x38>
 801ff5e:	3e01      	subs	r6, #1
 801ff60:	e7e4      	b.n	801ff2c <_puts_r+0x68>
 801ff62:	6823      	ldr	r3, [r4, #0]
 801ff64:	1c5a      	adds	r2, r3, #1
 801ff66:	6022      	str	r2, [r4, #0]
 801ff68:	220a      	movs	r2, #10
 801ff6a:	701a      	strb	r2, [r3, #0]
 801ff6c:	e7ee      	b.n	801ff4c <_puts_r+0x88>
	...

0801ff70 <puts>:
 801ff70:	4b02      	ldr	r3, [pc, #8]	@ (801ff7c <puts+0xc>)
 801ff72:	4601      	mov	r1, r0
 801ff74:	6818      	ldr	r0, [r3, #0]
 801ff76:	f7ff bfa5 	b.w	801fec4 <_puts_r>
 801ff7a:	bf00      	nop
 801ff7c:	24000038 	.word	0x24000038

0801ff80 <__sread>:
 801ff80:	b510      	push	{r4, lr}
 801ff82:	460c      	mov	r4, r1
 801ff84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff88:	f000 f946 	bl	8020218 <_read_r>
 801ff8c:	2800      	cmp	r0, #0
 801ff8e:	bfab      	itete	ge
 801ff90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ff92:	89a3      	ldrhlt	r3, [r4, #12]
 801ff94:	181b      	addge	r3, r3, r0
 801ff96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ff9a:	bfac      	ite	ge
 801ff9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ff9e:	81a3      	strhlt	r3, [r4, #12]
 801ffa0:	bd10      	pop	{r4, pc}

0801ffa2 <__swrite>:
 801ffa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffa6:	461f      	mov	r7, r3
 801ffa8:	898b      	ldrh	r3, [r1, #12]
 801ffaa:	05db      	lsls	r3, r3, #23
 801ffac:	4605      	mov	r5, r0
 801ffae:	460c      	mov	r4, r1
 801ffb0:	4616      	mov	r6, r2
 801ffb2:	d505      	bpl.n	801ffc0 <__swrite+0x1e>
 801ffb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffb8:	2302      	movs	r3, #2
 801ffba:	2200      	movs	r2, #0
 801ffbc:	f000 f91a 	bl	80201f4 <_lseek_r>
 801ffc0:	89a3      	ldrh	r3, [r4, #12]
 801ffc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ffc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ffca:	81a3      	strh	r3, [r4, #12]
 801ffcc:	4632      	mov	r2, r6
 801ffce:	463b      	mov	r3, r7
 801ffd0:	4628      	mov	r0, r5
 801ffd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ffd6:	f000 b955 	b.w	8020284 <_write_r>

0801ffda <__sseek>:
 801ffda:	b510      	push	{r4, lr}
 801ffdc:	460c      	mov	r4, r1
 801ffde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffe2:	f000 f907 	bl	80201f4 <_lseek_r>
 801ffe6:	1c43      	adds	r3, r0, #1
 801ffe8:	89a3      	ldrh	r3, [r4, #12]
 801ffea:	bf15      	itete	ne
 801ffec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ffee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801fff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801fff6:	81a3      	strheq	r3, [r4, #12]
 801fff8:	bf18      	it	ne
 801fffa:	81a3      	strhne	r3, [r4, #12]
 801fffc:	bd10      	pop	{r4, pc}

0801fffe <__sclose>:
 801fffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020002:	f000 b8e7 	b.w	80201d4 <_close_r>

08020006 <__swbuf_r>:
 8020006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020008:	460e      	mov	r6, r1
 802000a:	4614      	mov	r4, r2
 802000c:	4605      	mov	r5, r0
 802000e:	b118      	cbz	r0, 8020018 <__swbuf_r+0x12>
 8020010:	6a03      	ldr	r3, [r0, #32]
 8020012:	b90b      	cbnz	r3, 8020018 <__swbuf_r+0x12>
 8020014:	f7ff ff06 	bl	801fe24 <__sinit>
 8020018:	69a3      	ldr	r3, [r4, #24]
 802001a:	60a3      	str	r3, [r4, #8]
 802001c:	89a3      	ldrh	r3, [r4, #12]
 802001e:	071a      	lsls	r2, r3, #28
 8020020:	d501      	bpl.n	8020026 <__swbuf_r+0x20>
 8020022:	6923      	ldr	r3, [r4, #16]
 8020024:	b943      	cbnz	r3, 8020038 <__swbuf_r+0x32>
 8020026:	4621      	mov	r1, r4
 8020028:	4628      	mov	r0, r5
 802002a:	f000 f82b 	bl	8020084 <__swsetup_r>
 802002e:	b118      	cbz	r0, 8020038 <__swbuf_r+0x32>
 8020030:	f04f 37ff 	mov.w	r7, #4294967295
 8020034:	4638      	mov	r0, r7
 8020036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020038:	6823      	ldr	r3, [r4, #0]
 802003a:	6922      	ldr	r2, [r4, #16]
 802003c:	1a98      	subs	r0, r3, r2
 802003e:	6963      	ldr	r3, [r4, #20]
 8020040:	b2f6      	uxtb	r6, r6
 8020042:	4283      	cmp	r3, r0
 8020044:	4637      	mov	r7, r6
 8020046:	dc05      	bgt.n	8020054 <__swbuf_r+0x4e>
 8020048:	4621      	mov	r1, r4
 802004a:	4628      	mov	r0, r5
 802004c:	f000 fd0e 	bl	8020a6c <_fflush_r>
 8020050:	2800      	cmp	r0, #0
 8020052:	d1ed      	bne.n	8020030 <__swbuf_r+0x2a>
 8020054:	68a3      	ldr	r3, [r4, #8]
 8020056:	3b01      	subs	r3, #1
 8020058:	60a3      	str	r3, [r4, #8]
 802005a:	6823      	ldr	r3, [r4, #0]
 802005c:	1c5a      	adds	r2, r3, #1
 802005e:	6022      	str	r2, [r4, #0]
 8020060:	701e      	strb	r6, [r3, #0]
 8020062:	6962      	ldr	r2, [r4, #20]
 8020064:	1c43      	adds	r3, r0, #1
 8020066:	429a      	cmp	r2, r3
 8020068:	d004      	beq.n	8020074 <__swbuf_r+0x6e>
 802006a:	89a3      	ldrh	r3, [r4, #12]
 802006c:	07db      	lsls	r3, r3, #31
 802006e:	d5e1      	bpl.n	8020034 <__swbuf_r+0x2e>
 8020070:	2e0a      	cmp	r6, #10
 8020072:	d1df      	bne.n	8020034 <__swbuf_r+0x2e>
 8020074:	4621      	mov	r1, r4
 8020076:	4628      	mov	r0, r5
 8020078:	f000 fcf8 	bl	8020a6c <_fflush_r>
 802007c:	2800      	cmp	r0, #0
 802007e:	d0d9      	beq.n	8020034 <__swbuf_r+0x2e>
 8020080:	e7d6      	b.n	8020030 <__swbuf_r+0x2a>
	...

08020084 <__swsetup_r>:
 8020084:	b538      	push	{r3, r4, r5, lr}
 8020086:	4b29      	ldr	r3, [pc, #164]	@ (802012c <__swsetup_r+0xa8>)
 8020088:	4605      	mov	r5, r0
 802008a:	6818      	ldr	r0, [r3, #0]
 802008c:	460c      	mov	r4, r1
 802008e:	b118      	cbz	r0, 8020098 <__swsetup_r+0x14>
 8020090:	6a03      	ldr	r3, [r0, #32]
 8020092:	b90b      	cbnz	r3, 8020098 <__swsetup_r+0x14>
 8020094:	f7ff fec6 	bl	801fe24 <__sinit>
 8020098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802009c:	0719      	lsls	r1, r3, #28
 802009e:	d422      	bmi.n	80200e6 <__swsetup_r+0x62>
 80200a0:	06da      	lsls	r2, r3, #27
 80200a2:	d407      	bmi.n	80200b4 <__swsetup_r+0x30>
 80200a4:	2209      	movs	r2, #9
 80200a6:	602a      	str	r2, [r5, #0]
 80200a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80200ac:	81a3      	strh	r3, [r4, #12]
 80200ae:	f04f 30ff 	mov.w	r0, #4294967295
 80200b2:	e033      	b.n	802011c <__swsetup_r+0x98>
 80200b4:	0758      	lsls	r0, r3, #29
 80200b6:	d512      	bpl.n	80200de <__swsetup_r+0x5a>
 80200b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80200ba:	b141      	cbz	r1, 80200ce <__swsetup_r+0x4a>
 80200bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80200c0:	4299      	cmp	r1, r3
 80200c2:	d002      	beq.n	80200ca <__swsetup_r+0x46>
 80200c4:	4628      	mov	r0, r5
 80200c6:	f000 f92b 	bl	8020320 <_free_r>
 80200ca:	2300      	movs	r3, #0
 80200cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80200ce:	89a3      	ldrh	r3, [r4, #12]
 80200d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80200d4:	81a3      	strh	r3, [r4, #12]
 80200d6:	2300      	movs	r3, #0
 80200d8:	6063      	str	r3, [r4, #4]
 80200da:	6923      	ldr	r3, [r4, #16]
 80200dc:	6023      	str	r3, [r4, #0]
 80200de:	89a3      	ldrh	r3, [r4, #12]
 80200e0:	f043 0308 	orr.w	r3, r3, #8
 80200e4:	81a3      	strh	r3, [r4, #12]
 80200e6:	6923      	ldr	r3, [r4, #16]
 80200e8:	b94b      	cbnz	r3, 80200fe <__swsetup_r+0x7a>
 80200ea:	89a3      	ldrh	r3, [r4, #12]
 80200ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80200f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80200f4:	d003      	beq.n	80200fe <__swsetup_r+0x7a>
 80200f6:	4621      	mov	r1, r4
 80200f8:	4628      	mov	r0, r5
 80200fa:	f000 fd05 	bl	8020b08 <__smakebuf_r>
 80200fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020102:	f013 0201 	ands.w	r2, r3, #1
 8020106:	d00a      	beq.n	802011e <__swsetup_r+0x9a>
 8020108:	2200      	movs	r2, #0
 802010a:	60a2      	str	r2, [r4, #8]
 802010c:	6962      	ldr	r2, [r4, #20]
 802010e:	4252      	negs	r2, r2
 8020110:	61a2      	str	r2, [r4, #24]
 8020112:	6922      	ldr	r2, [r4, #16]
 8020114:	b942      	cbnz	r2, 8020128 <__swsetup_r+0xa4>
 8020116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802011a:	d1c5      	bne.n	80200a8 <__swsetup_r+0x24>
 802011c:	bd38      	pop	{r3, r4, r5, pc}
 802011e:	0799      	lsls	r1, r3, #30
 8020120:	bf58      	it	pl
 8020122:	6962      	ldrpl	r2, [r4, #20]
 8020124:	60a2      	str	r2, [r4, #8]
 8020126:	e7f4      	b.n	8020112 <__swsetup_r+0x8e>
 8020128:	2000      	movs	r0, #0
 802012a:	e7f7      	b.n	802011c <__swsetup_r+0x98>
 802012c:	24000038 	.word	0x24000038

08020130 <memmove>:
 8020130:	4288      	cmp	r0, r1
 8020132:	b510      	push	{r4, lr}
 8020134:	eb01 0402 	add.w	r4, r1, r2
 8020138:	d902      	bls.n	8020140 <memmove+0x10>
 802013a:	4284      	cmp	r4, r0
 802013c:	4623      	mov	r3, r4
 802013e:	d807      	bhi.n	8020150 <memmove+0x20>
 8020140:	1e43      	subs	r3, r0, #1
 8020142:	42a1      	cmp	r1, r4
 8020144:	d008      	beq.n	8020158 <memmove+0x28>
 8020146:	f811 2b01 	ldrb.w	r2, [r1], #1
 802014a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802014e:	e7f8      	b.n	8020142 <memmove+0x12>
 8020150:	4402      	add	r2, r0
 8020152:	4601      	mov	r1, r0
 8020154:	428a      	cmp	r2, r1
 8020156:	d100      	bne.n	802015a <memmove+0x2a>
 8020158:	bd10      	pop	{r4, pc}
 802015a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802015e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020162:	e7f7      	b.n	8020154 <memmove+0x24>

08020164 <memset>:
 8020164:	4402      	add	r2, r0
 8020166:	4603      	mov	r3, r0
 8020168:	4293      	cmp	r3, r2
 802016a:	d100      	bne.n	802016e <memset+0xa>
 802016c:	4770      	bx	lr
 802016e:	f803 1b01 	strb.w	r1, [r3], #1
 8020172:	e7f9      	b.n	8020168 <memset+0x4>

08020174 <_raise_r>:
 8020174:	291f      	cmp	r1, #31
 8020176:	b538      	push	{r3, r4, r5, lr}
 8020178:	4605      	mov	r5, r0
 802017a:	460c      	mov	r4, r1
 802017c:	d904      	bls.n	8020188 <_raise_r+0x14>
 802017e:	2316      	movs	r3, #22
 8020180:	6003      	str	r3, [r0, #0]
 8020182:	f04f 30ff 	mov.w	r0, #4294967295
 8020186:	bd38      	pop	{r3, r4, r5, pc}
 8020188:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802018a:	b112      	cbz	r2, 8020192 <_raise_r+0x1e>
 802018c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020190:	b94b      	cbnz	r3, 80201a6 <_raise_r+0x32>
 8020192:	4628      	mov	r0, r5
 8020194:	f000 f864 	bl	8020260 <_getpid_r>
 8020198:	4622      	mov	r2, r4
 802019a:	4601      	mov	r1, r0
 802019c:	4628      	mov	r0, r5
 802019e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80201a2:	f000 b84b 	b.w	802023c <_kill_r>
 80201a6:	2b01      	cmp	r3, #1
 80201a8:	d00a      	beq.n	80201c0 <_raise_r+0x4c>
 80201aa:	1c59      	adds	r1, r3, #1
 80201ac:	d103      	bne.n	80201b6 <_raise_r+0x42>
 80201ae:	2316      	movs	r3, #22
 80201b0:	6003      	str	r3, [r0, #0]
 80201b2:	2001      	movs	r0, #1
 80201b4:	e7e7      	b.n	8020186 <_raise_r+0x12>
 80201b6:	2100      	movs	r1, #0
 80201b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80201bc:	4620      	mov	r0, r4
 80201be:	4798      	blx	r3
 80201c0:	2000      	movs	r0, #0
 80201c2:	e7e0      	b.n	8020186 <_raise_r+0x12>

080201c4 <raise>:
 80201c4:	4b02      	ldr	r3, [pc, #8]	@ (80201d0 <raise+0xc>)
 80201c6:	4601      	mov	r1, r0
 80201c8:	6818      	ldr	r0, [r3, #0]
 80201ca:	f7ff bfd3 	b.w	8020174 <_raise_r>
 80201ce:	bf00      	nop
 80201d0:	24000038 	.word	0x24000038

080201d4 <_close_r>:
 80201d4:	b538      	push	{r3, r4, r5, lr}
 80201d6:	4d06      	ldr	r5, [pc, #24]	@ (80201f0 <_close_r+0x1c>)
 80201d8:	2300      	movs	r3, #0
 80201da:	4604      	mov	r4, r0
 80201dc:	4608      	mov	r0, r1
 80201de:	602b      	str	r3, [r5, #0]
 80201e0:	f7eb fd9a 	bl	800bd18 <_close>
 80201e4:	1c43      	adds	r3, r0, #1
 80201e6:	d102      	bne.n	80201ee <_close_r+0x1a>
 80201e8:	682b      	ldr	r3, [r5, #0]
 80201ea:	b103      	cbz	r3, 80201ee <_close_r+0x1a>
 80201ec:	6023      	str	r3, [r4, #0]
 80201ee:	bd38      	pop	{r3, r4, r5, pc}
 80201f0:	24000c04 	.word	0x24000c04

080201f4 <_lseek_r>:
 80201f4:	b538      	push	{r3, r4, r5, lr}
 80201f6:	4d07      	ldr	r5, [pc, #28]	@ (8020214 <_lseek_r+0x20>)
 80201f8:	4604      	mov	r4, r0
 80201fa:	4608      	mov	r0, r1
 80201fc:	4611      	mov	r1, r2
 80201fe:	2200      	movs	r2, #0
 8020200:	602a      	str	r2, [r5, #0]
 8020202:	461a      	mov	r2, r3
 8020204:	f7eb fdaf 	bl	800bd66 <_lseek>
 8020208:	1c43      	adds	r3, r0, #1
 802020a:	d102      	bne.n	8020212 <_lseek_r+0x1e>
 802020c:	682b      	ldr	r3, [r5, #0]
 802020e:	b103      	cbz	r3, 8020212 <_lseek_r+0x1e>
 8020210:	6023      	str	r3, [r4, #0]
 8020212:	bd38      	pop	{r3, r4, r5, pc}
 8020214:	24000c04 	.word	0x24000c04

08020218 <_read_r>:
 8020218:	b538      	push	{r3, r4, r5, lr}
 802021a:	4d07      	ldr	r5, [pc, #28]	@ (8020238 <_read_r+0x20>)
 802021c:	4604      	mov	r4, r0
 802021e:	4608      	mov	r0, r1
 8020220:	4611      	mov	r1, r2
 8020222:	2200      	movs	r2, #0
 8020224:	602a      	str	r2, [r5, #0]
 8020226:	461a      	mov	r2, r3
 8020228:	f7eb fd3d 	bl	800bca6 <_read>
 802022c:	1c43      	adds	r3, r0, #1
 802022e:	d102      	bne.n	8020236 <_read_r+0x1e>
 8020230:	682b      	ldr	r3, [r5, #0]
 8020232:	b103      	cbz	r3, 8020236 <_read_r+0x1e>
 8020234:	6023      	str	r3, [r4, #0]
 8020236:	bd38      	pop	{r3, r4, r5, pc}
 8020238:	24000c04 	.word	0x24000c04

0802023c <_kill_r>:
 802023c:	b538      	push	{r3, r4, r5, lr}
 802023e:	4d07      	ldr	r5, [pc, #28]	@ (802025c <_kill_r+0x20>)
 8020240:	2300      	movs	r3, #0
 8020242:	4604      	mov	r4, r0
 8020244:	4608      	mov	r0, r1
 8020246:	4611      	mov	r1, r2
 8020248:	602b      	str	r3, [r5, #0]
 802024a:	f7eb fd11 	bl	800bc70 <_kill>
 802024e:	1c43      	adds	r3, r0, #1
 8020250:	d102      	bne.n	8020258 <_kill_r+0x1c>
 8020252:	682b      	ldr	r3, [r5, #0]
 8020254:	b103      	cbz	r3, 8020258 <_kill_r+0x1c>
 8020256:	6023      	str	r3, [r4, #0]
 8020258:	bd38      	pop	{r3, r4, r5, pc}
 802025a:	bf00      	nop
 802025c:	24000c04 	.word	0x24000c04

08020260 <_getpid_r>:
 8020260:	f7eb bcfe 	b.w	800bc60 <_getpid>

08020264 <_sbrk_r>:
 8020264:	b538      	push	{r3, r4, r5, lr}
 8020266:	4d06      	ldr	r5, [pc, #24]	@ (8020280 <_sbrk_r+0x1c>)
 8020268:	2300      	movs	r3, #0
 802026a:	4604      	mov	r4, r0
 802026c:	4608      	mov	r0, r1
 802026e:	602b      	str	r3, [r5, #0]
 8020270:	f7eb fd86 	bl	800bd80 <_sbrk>
 8020274:	1c43      	adds	r3, r0, #1
 8020276:	d102      	bne.n	802027e <_sbrk_r+0x1a>
 8020278:	682b      	ldr	r3, [r5, #0]
 802027a:	b103      	cbz	r3, 802027e <_sbrk_r+0x1a>
 802027c:	6023      	str	r3, [r4, #0]
 802027e:	bd38      	pop	{r3, r4, r5, pc}
 8020280:	24000c04 	.word	0x24000c04

08020284 <_write_r>:
 8020284:	b538      	push	{r3, r4, r5, lr}
 8020286:	4d07      	ldr	r5, [pc, #28]	@ (80202a4 <_write_r+0x20>)
 8020288:	4604      	mov	r4, r0
 802028a:	4608      	mov	r0, r1
 802028c:	4611      	mov	r1, r2
 802028e:	2200      	movs	r2, #0
 8020290:	602a      	str	r2, [r5, #0]
 8020292:	461a      	mov	r2, r3
 8020294:	f7eb fd24 	bl	800bce0 <_write>
 8020298:	1c43      	adds	r3, r0, #1
 802029a:	d102      	bne.n	80202a2 <_write_r+0x1e>
 802029c:	682b      	ldr	r3, [r5, #0]
 802029e:	b103      	cbz	r3, 80202a2 <_write_r+0x1e>
 80202a0:	6023      	str	r3, [r4, #0]
 80202a2:	bd38      	pop	{r3, r4, r5, pc}
 80202a4:	24000c04 	.word	0x24000c04

080202a8 <__errno>:
 80202a8:	4b01      	ldr	r3, [pc, #4]	@ (80202b0 <__errno+0x8>)
 80202aa:	6818      	ldr	r0, [r3, #0]
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop
 80202b0:	24000038 	.word	0x24000038

080202b4 <__libc_init_array>:
 80202b4:	b570      	push	{r4, r5, r6, lr}
 80202b6:	4d0d      	ldr	r5, [pc, #52]	@ (80202ec <__libc_init_array+0x38>)
 80202b8:	4c0d      	ldr	r4, [pc, #52]	@ (80202f0 <__libc_init_array+0x3c>)
 80202ba:	1b64      	subs	r4, r4, r5
 80202bc:	10a4      	asrs	r4, r4, #2
 80202be:	2600      	movs	r6, #0
 80202c0:	42a6      	cmp	r6, r4
 80202c2:	d109      	bne.n	80202d8 <__libc_init_array+0x24>
 80202c4:	4d0b      	ldr	r5, [pc, #44]	@ (80202f4 <__libc_init_array+0x40>)
 80202c6:	4c0c      	ldr	r4, [pc, #48]	@ (80202f8 <__libc_init_array+0x44>)
 80202c8:	f000 fcb0 	bl	8020c2c <_init>
 80202cc:	1b64      	subs	r4, r4, r5
 80202ce:	10a4      	asrs	r4, r4, #2
 80202d0:	2600      	movs	r6, #0
 80202d2:	42a6      	cmp	r6, r4
 80202d4:	d105      	bne.n	80202e2 <__libc_init_array+0x2e>
 80202d6:	bd70      	pop	{r4, r5, r6, pc}
 80202d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80202dc:	4798      	blx	r3
 80202de:	3601      	adds	r6, #1
 80202e0:	e7ee      	b.n	80202c0 <__libc_init_array+0xc>
 80202e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80202e6:	4798      	blx	r3
 80202e8:	3601      	adds	r6, #1
 80202ea:	e7f2      	b.n	80202d2 <__libc_init_array+0x1e>
 80202ec:	08021d9c 	.word	0x08021d9c
 80202f0:	08021d9c 	.word	0x08021d9c
 80202f4:	08021d9c 	.word	0x08021d9c
 80202f8:	08021da8 	.word	0x08021da8

080202fc <__retarget_lock_init_recursive>:
 80202fc:	4770      	bx	lr

080202fe <__retarget_lock_acquire_recursive>:
 80202fe:	4770      	bx	lr

08020300 <__retarget_lock_release_recursive>:
 8020300:	4770      	bx	lr

08020302 <memcpy>:
 8020302:	440a      	add	r2, r1
 8020304:	4291      	cmp	r1, r2
 8020306:	f100 33ff 	add.w	r3, r0, #4294967295
 802030a:	d100      	bne.n	802030e <memcpy+0xc>
 802030c:	4770      	bx	lr
 802030e:	b510      	push	{r4, lr}
 8020310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020318:	4291      	cmp	r1, r2
 802031a:	d1f9      	bne.n	8020310 <memcpy+0xe>
 802031c:	bd10      	pop	{r4, pc}
	...

08020320 <_free_r>:
 8020320:	b538      	push	{r3, r4, r5, lr}
 8020322:	4605      	mov	r5, r0
 8020324:	2900      	cmp	r1, #0
 8020326:	d041      	beq.n	80203ac <_free_r+0x8c>
 8020328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802032c:	1f0c      	subs	r4, r1, #4
 802032e:	2b00      	cmp	r3, #0
 8020330:	bfb8      	it	lt
 8020332:	18e4      	addlt	r4, r4, r3
 8020334:	f7ff fc24 	bl	801fb80 <__malloc_lock>
 8020338:	4a1d      	ldr	r2, [pc, #116]	@ (80203b0 <_free_r+0x90>)
 802033a:	6813      	ldr	r3, [r2, #0]
 802033c:	b933      	cbnz	r3, 802034c <_free_r+0x2c>
 802033e:	6063      	str	r3, [r4, #4]
 8020340:	6014      	str	r4, [r2, #0]
 8020342:	4628      	mov	r0, r5
 8020344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020348:	f7ff bc20 	b.w	801fb8c <__malloc_unlock>
 802034c:	42a3      	cmp	r3, r4
 802034e:	d908      	bls.n	8020362 <_free_r+0x42>
 8020350:	6820      	ldr	r0, [r4, #0]
 8020352:	1821      	adds	r1, r4, r0
 8020354:	428b      	cmp	r3, r1
 8020356:	bf01      	itttt	eq
 8020358:	6819      	ldreq	r1, [r3, #0]
 802035a:	685b      	ldreq	r3, [r3, #4]
 802035c:	1809      	addeq	r1, r1, r0
 802035e:	6021      	streq	r1, [r4, #0]
 8020360:	e7ed      	b.n	802033e <_free_r+0x1e>
 8020362:	461a      	mov	r2, r3
 8020364:	685b      	ldr	r3, [r3, #4]
 8020366:	b10b      	cbz	r3, 802036c <_free_r+0x4c>
 8020368:	42a3      	cmp	r3, r4
 802036a:	d9fa      	bls.n	8020362 <_free_r+0x42>
 802036c:	6811      	ldr	r1, [r2, #0]
 802036e:	1850      	adds	r0, r2, r1
 8020370:	42a0      	cmp	r0, r4
 8020372:	d10b      	bne.n	802038c <_free_r+0x6c>
 8020374:	6820      	ldr	r0, [r4, #0]
 8020376:	4401      	add	r1, r0
 8020378:	1850      	adds	r0, r2, r1
 802037a:	4283      	cmp	r3, r0
 802037c:	6011      	str	r1, [r2, #0]
 802037e:	d1e0      	bne.n	8020342 <_free_r+0x22>
 8020380:	6818      	ldr	r0, [r3, #0]
 8020382:	685b      	ldr	r3, [r3, #4]
 8020384:	6053      	str	r3, [r2, #4]
 8020386:	4408      	add	r0, r1
 8020388:	6010      	str	r0, [r2, #0]
 802038a:	e7da      	b.n	8020342 <_free_r+0x22>
 802038c:	d902      	bls.n	8020394 <_free_r+0x74>
 802038e:	230c      	movs	r3, #12
 8020390:	602b      	str	r3, [r5, #0]
 8020392:	e7d6      	b.n	8020342 <_free_r+0x22>
 8020394:	6820      	ldr	r0, [r4, #0]
 8020396:	1821      	adds	r1, r4, r0
 8020398:	428b      	cmp	r3, r1
 802039a:	bf04      	itt	eq
 802039c:	6819      	ldreq	r1, [r3, #0]
 802039e:	685b      	ldreq	r3, [r3, #4]
 80203a0:	6063      	str	r3, [r4, #4]
 80203a2:	bf04      	itt	eq
 80203a4:	1809      	addeq	r1, r1, r0
 80203a6:	6021      	streq	r1, [r4, #0]
 80203a8:	6054      	str	r4, [r2, #4]
 80203aa:	e7ca      	b.n	8020342 <_free_r+0x22>
 80203ac:	bd38      	pop	{r3, r4, r5, pc}
 80203ae:	bf00      	nop
 80203b0:	24000ac4 	.word	0x24000ac4

080203b4 <_malloc_usable_size_r>:
 80203b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80203b8:	1f18      	subs	r0, r3, #4
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	bfbc      	itt	lt
 80203be:	580b      	ldrlt	r3, [r1, r0]
 80203c0:	18c0      	addlt	r0, r0, r3
 80203c2:	4770      	bx	lr

080203c4 <__sfputc_r>:
 80203c4:	6893      	ldr	r3, [r2, #8]
 80203c6:	3b01      	subs	r3, #1
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	b410      	push	{r4}
 80203cc:	6093      	str	r3, [r2, #8]
 80203ce:	da08      	bge.n	80203e2 <__sfputc_r+0x1e>
 80203d0:	6994      	ldr	r4, [r2, #24]
 80203d2:	42a3      	cmp	r3, r4
 80203d4:	db01      	blt.n	80203da <__sfputc_r+0x16>
 80203d6:	290a      	cmp	r1, #10
 80203d8:	d103      	bne.n	80203e2 <__sfputc_r+0x1e>
 80203da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80203de:	f7ff be12 	b.w	8020006 <__swbuf_r>
 80203e2:	6813      	ldr	r3, [r2, #0]
 80203e4:	1c58      	adds	r0, r3, #1
 80203e6:	6010      	str	r0, [r2, #0]
 80203e8:	7019      	strb	r1, [r3, #0]
 80203ea:	4608      	mov	r0, r1
 80203ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80203f0:	4770      	bx	lr

080203f2 <__sfputs_r>:
 80203f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203f4:	4606      	mov	r6, r0
 80203f6:	460f      	mov	r7, r1
 80203f8:	4614      	mov	r4, r2
 80203fa:	18d5      	adds	r5, r2, r3
 80203fc:	42ac      	cmp	r4, r5
 80203fe:	d101      	bne.n	8020404 <__sfputs_r+0x12>
 8020400:	2000      	movs	r0, #0
 8020402:	e007      	b.n	8020414 <__sfputs_r+0x22>
 8020404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020408:	463a      	mov	r2, r7
 802040a:	4630      	mov	r0, r6
 802040c:	f7ff ffda 	bl	80203c4 <__sfputc_r>
 8020410:	1c43      	adds	r3, r0, #1
 8020412:	d1f3      	bne.n	80203fc <__sfputs_r+0xa>
 8020414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020418 <_vfiprintf_r>:
 8020418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802041c:	460d      	mov	r5, r1
 802041e:	b09d      	sub	sp, #116	@ 0x74
 8020420:	4614      	mov	r4, r2
 8020422:	4698      	mov	r8, r3
 8020424:	4606      	mov	r6, r0
 8020426:	b118      	cbz	r0, 8020430 <_vfiprintf_r+0x18>
 8020428:	6a03      	ldr	r3, [r0, #32]
 802042a:	b90b      	cbnz	r3, 8020430 <_vfiprintf_r+0x18>
 802042c:	f7ff fcfa 	bl	801fe24 <__sinit>
 8020430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020432:	07d9      	lsls	r1, r3, #31
 8020434:	d405      	bmi.n	8020442 <_vfiprintf_r+0x2a>
 8020436:	89ab      	ldrh	r3, [r5, #12]
 8020438:	059a      	lsls	r2, r3, #22
 802043a:	d402      	bmi.n	8020442 <_vfiprintf_r+0x2a>
 802043c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802043e:	f7ff ff5e 	bl	80202fe <__retarget_lock_acquire_recursive>
 8020442:	89ab      	ldrh	r3, [r5, #12]
 8020444:	071b      	lsls	r3, r3, #28
 8020446:	d501      	bpl.n	802044c <_vfiprintf_r+0x34>
 8020448:	692b      	ldr	r3, [r5, #16]
 802044a:	b99b      	cbnz	r3, 8020474 <_vfiprintf_r+0x5c>
 802044c:	4629      	mov	r1, r5
 802044e:	4630      	mov	r0, r6
 8020450:	f7ff fe18 	bl	8020084 <__swsetup_r>
 8020454:	b170      	cbz	r0, 8020474 <_vfiprintf_r+0x5c>
 8020456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020458:	07dc      	lsls	r4, r3, #31
 802045a:	d504      	bpl.n	8020466 <_vfiprintf_r+0x4e>
 802045c:	f04f 30ff 	mov.w	r0, #4294967295
 8020460:	b01d      	add	sp, #116	@ 0x74
 8020462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020466:	89ab      	ldrh	r3, [r5, #12]
 8020468:	0598      	lsls	r0, r3, #22
 802046a:	d4f7      	bmi.n	802045c <_vfiprintf_r+0x44>
 802046c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802046e:	f7ff ff47 	bl	8020300 <__retarget_lock_release_recursive>
 8020472:	e7f3      	b.n	802045c <_vfiprintf_r+0x44>
 8020474:	2300      	movs	r3, #0
 8020476:	9309      	str	r3, [sp, #36]	@ 0x24
 8020478:	2320      	movs	r3, #32
 802047a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802047e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020482:	2330      	movs	r3, #48	@ 0x30
 8020484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020634 <_vfiprintf_r+0x21c>
 8020488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802048c:	f04f 0901 	mov.w	r9, #1
 8020490:	4623      	mov	r3, r4
 8020492:	469a      	mov	sl, r3
 8020494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020498:	b10a      	cbz	r2, 802049e <_vfiprintf_r+0x86>
 802049a:	2a25      	cmp	r2, #37	@ 0x25
 802049c:	d1f9      	bne.n	8020492 <_vfiprintf_r+0x7a>
 802049e:	ebba 0b04 	subs.w	fp, sl, r4
 80204a2:	d00b      	beq.n	80204bc <_vfiprintf_r+0xa4>
 80204a4:	465b      	mov	r3, fp
 80204a6:	4622      	mov	r2, r4
 80204a8:	4629      	mov	r1, r5
 80204aa:	4630      	mov	r0, r6
 80204ac:	f7ff ffa1 	bl	80203f2 <__sfputs_r>
 80204b0:	3001      	adds	r0, #1
 80204b2:	f000 80a7 	beq.w	8020604 <_vfiprintf_r+0x1ec>
 80204b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204b8:	445a      	add	r2, fp
 80204ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80204bc:	f89a 3000 	ldrb.w	r3, [sl]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	f000 809f 	beq.w	8020604 <_vfiprintf_r+0x1ec>
 80204c6:	2300      	movs	r3, #0
 80204c8:	f04f 32ff 	mov.w	r2, #4294967295
 80204cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80204d0:	f10a 0a01 	add.w	sl, sl, #1
 80204d4:	9304      	str	r3, [sp, #16]
 80204d6:	9307      	str	r3, [sp, #28]
 80204d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80204dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80204de:	4654      	mov	r4, sl
 80204e0:	2205      	movs	r2, #5
 80204e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204e6:	4853      	ldr	r0, [pc, #332]	@ (8020634 <_vfiprintf_r+0x21c>)
 80204e8:	f7df ff0a 	bl	8000300 <memchr>
 80204ec:	9a04      	ldr	r2, [sp, #16]
 80204ee:	b9d8      	cbnz	r0, 8020528 <_vfiprintf_r+0x110>
 80204f0:	06d1      	lsls	r1, r2, #27
 80204f2:	bf44      	itt	mi
 80204f4:	2320      	movmi	r3, #32
 80204f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80204fa:	0713      	lsls	r3, r2, #28
 80204fc:	bf44      	itt	mi
 80204fe:	232b      	movmi	r3, #43	@ 0x2b
 8020500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020504:	f89a 3000 	ldrb.w	r3, [sl]
 8020508:	2b2a      	cmp	r3, #42	@ 0x2a
 802050a:	d015      	beq.n	8020538 <_vfiprintf_r+0x120>
 802050c:	9a07      	ldr	r2, [sp, #28]
 802050e:	4654      	mov	r4, sl
 8020510:	2000      	movs	r0, #0
 8020512:	f04f 0c0a 	mov.w	ip, #10
 8020516:	4621      	mov	r1, r4
 8020518:	f811 3b01 	ldrb.w	r3, [r1], #1
 802051c:	3b30      	subs	r3, #48	@ 0x30
 802051e:	2b09      	cmp	r3, #9
 8020520:	d94b      	bls.n	80205ba <_vfiprintf_r+0x1a2>
 8020522:	b1b0      	cbz	r0, 8020552 <_vfiprintf_r+0x13a>
 8020524:	9207      	str	r2, [sp, #28]
 8020526:	e014      	b.n	8020552 <_vfiprintf_r+0x13a>
 8020528:	eba0 0308 	sub.w	r3, r0, r8
 802052c:	fa09 f303 	lsl.w	r3, r9, r3
 8020530:	4313      	orrs	r3, r2
 8020532:	9304      	str	r3, [sp, #16]
 8020534:	46a2      	mov	sl, r4
 8020536:	e7d2      	b.n	80204de <_vfiprintf_r+0xc6>
 8020538:	9b03      	ldr	r3, [sp, #12]
 802053a:	1d19      	adds	r1, r3, #4
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	9103      	str	r1, [sp, #12]
 8020540:	2b00      	cmp	r3, #0
 8020542:	bfbb      	ittet	lt
 8020544:	425b      	neglt	r3, r3
 8020546:	f042 0202 	orrlt.w	r2, r2, #2
 802054a:	9307      	strge	r3, [sp, #28]
 802054c:	9307      	strlt	r3, [sp, #28]
 802054e:	bfb8      	it	lt
 8020550:	9204      	strlt	r2, [sp, #16]
 8020552:	7823      	ldrb	r3, [r4, #0]
 8020554:	2b2e      	cmp	r3, #46	@ 0x2e
 8020556:	d10a      	bne.n	802056e <_vfiprintf_r+0x156>
 8020558:	7863      	ldrb	r3, [r4, #1]
 802055a:	2b2a      	cmp	r3, #42	@ 0x2a
 802055c:	d132      	bne.n	80205c4 <_vfiprintf_r+0x1ac>
 802055e:	9b03      	ldr	r3, [sp, #12]
 8020560:	1d1a      	adds	r2, r3, #4
 8020562:	681b      	ldr	r3, [r3, #0]
 8020564:	9203      	str	r2, [sp, #12]
 8020566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802056a:	3402      	adds	r4, #2
 802056c:	9305      	str	r3, [sp, #20]
 802056e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020644 <_vfiprintf_r+0x22c>
 8020572:	7821      	ldrb	r1, [r4, #0]
 8020574:	2203      	movs	r2, #3
 8020576:	4650      	mov	r0, sl
 8020578:	f7df fec2 	bl	8000300 <memchr>
 802057c:	b138      	cbz	r0, 802058e <_vfiprintf_r+0x176>
 802057e:	9b04      	ldr	r3, [sp, #16]
 8020580:	eba0 000a 	sub.w	r0, r0, sl
 8020584:	2240      	movs	r2, #64	@ 0x40
 8020586:	4082      	lsls	r2, r0
 8020588:	4313      	orrs	r3, r2
 802058a:	3401      	adds	r4, #1
 802058c:	9304      	str	r3, [sp, #16]
 802058e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020592:	4829      	ldr	r0, [pc, #164]	@ (8020638 <_vfiprintf_r+0x220>)
 8020594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020598:	2206      	movs	r2, #6
 802059a:	f7df feb1 	bl	8000300 <memchr>
 802059e:	2800      	cmp	r0, #0
 80205a0:	d03f      	beq.n	8020622 <_vfiprintf_r+0x20a>
 80205a2:	4b26      	ldr	r3, [pc, #152]	@ (802063c <_vfiprintf_r+0x224>)
 80205a4:	bb1b      	cbnz	r3, 80205ee <_vfiprintf_r+0x1d6>
 80205a6:	9b03      	ldr	r3, [sp, #12]
 80205a8:	3307      	adds	r3, #7
 80205aa:	f023 0307 	bic.w	r3, r3, #7
 80205ae:	3308      	adds	r3, #8
 80205b0:	9303      	str	r3, [sp, #12]
 80205b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205b4:	443b      	add	r3, r7
 80205b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80205b8:	e76a      	b.n	8020490 <_vfiprintf_r+0x78>
 80205ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80205be:	460c      	mov	r4, r1
 80205c0:	2001      	movs	r0, #1
 80205c2:	e7a8      	b.n	8020516 <_vfiprintf_r+0xfe>
 80205c4:	2300      	movs	r3, #0
 80205c6:	3401      	adds	r4, #1
 80205c8:	9305      	str	r3, [sp, #20]
 80205ca:	4619      	mov	r1, r3
 80205cc:	f04f 0c0a 	mov.w	ip, #10
 80205d0:	4620      	mov	r0, r4
 80205d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80205d6:	3a30      	subs	r2, #48	@ 0x30
 80205d8:	2a09      	cmp	r2, #9
 80205da:	d903      	bls.n	80205e4 <_vfiprintf_r+0x1cc>
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d0c6      	beq.n	802056e <_vfiprintf_r+0x156>
 80205e0:	9105      	str	r1, [sp, #20]
 80205e2:	e7c4      	b.n	802056e <_vfiprintf_r+0x156>
 80205e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80205e8:	4604      	mov	r4, r0
 80205ea:	2301      	movs	r3, #1
 80205ec:	e7f0      	b.n	80205d0 <_vfiprintf_r+0x1b8>
 80205ee:	ab03      	add	r3, sp, #12
 80205f0:	9300      	str	r3, [sp, #0]
 80205f2:	462a      	mov	r2, r5
 80205f4:	4b12      	ldr	r3, [pc, #72]	@ (8020640 <_vfiprintf_r+0x228>)
 80205f6:	a904      	add	r1, sp, #16
 80205f8:	4630      	mov	r0, r6
 80205fa:	f3af 8000 	nop.w
 80205fe:	4607      	mov	r7, r0
 8020600:	1c78      	adds	r0, r7, #1
 8020602:	d1d6      	bne.n	80205b2 <_vfiprintf_r+0x19a>
 8020604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020606:	07d9      	lsls	r1, r3, #31
 8020608:	d405      	bmi.n	8020616 <_vfiprintf_r+0x1fe>
 802060a:	89ab      	ldrh	r3, [r5, #12]
 802060c:	059a      	lsls	r2, r3, #22
 802060e:	d402      	bmi.n	8020616 <_vfiprintf_r+0x1fe>
 8020610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020612:	f7ff fe75 	bl	8020300 <__retarget_lock_release_recursive>
 8020616:	89ab      	ldrh	r3, [r5, #12]
 8020618:	065b      	lsls	r3, r3, #25
 802061a:	f53f af1f 	bmi.w	802045c <_vfiprintf_r+0x44>
 802061e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020620:	e71e      	b.n	8020460 <_vfiprintf_r+0x48>
 8020622:	ab03      	add	r3, sp, #12
 8020624:	9300      	str	r3, [sp, #0]
 8020626:	462a      	mov	r2, r5
 8020628:	4b05      	ldr	r3, [pc, #20]	@ (8020640 <_vfiprintf_r+0x228>)
 802062a:	a904      	add	r1, sp, #16
 802062c:	4630      	mov	r0, r6
 802062e:	f000 f879 	bl	8020724 <_printf_i>
 8020632:	e7e4      	b.n	80205fe <_vfiprintf_r+0x1e6>
 8020634:	08021d61 	.word	0x08021d61
 8020638:	08021d6b 	.word	0x08021d6b
 802063c:	00000000 	.word	0x00000000
 8020640:	080203f3 	.word	0x080203f3
 8020644:	08021d67 	.word	0x08021d67

08020648 <_printf_common>:
 8020648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802064c:	4616      	mov	r6, r2
 802064e:	4698      	mov	r8, r3
 8020650:	688a      	ldr	r2, [r1, #8]
 8020652:	690b      	ldr	r3, [r1, #16]
 8020654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020658:	4293      	cmp	r3, r2
 802065a:	bfb8      	it	lt
 802065c:	4613      	movlt	r3, r2
 802065e:	6033      	str	r3, [r6, #0]
 8020660:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020664:	4607      	mov	r7, r0
 8020666:	460c      	mov	r4, r1
 8020668:	b10a      	cbz	r2, 802066e <_printf_common+0x26>
 802066a:	3301      	adds	r3, #1
 802066c:	6033      	str	r3, [r6, #0]
 802066e:	6823      	ldr	r3, [r4, #0]
 8020670:	0699      	lsls	r1, r3, #26
 8020672:	bf42      	ittt	mi
 8020674:	6833      	ldrmi	r3, [r6, #0]
 8020676:	3302      	addmi	r3, #2
 8020678:	6033      	strmi	r3, [r6, #0]
 802067a:	6825      	ldr	r5, [r4, #0]
 802067c:	f015 0506 	ands.w	r5, r5, #6
 8020680:	d106      	bne.n	8020690 <_printf_common+0x48>
 8020682:	f104 0a19 	add.w	sl, r4, #25
 8020686:	68e3      	ldr	r3, [r4, #12]
 8020688:	6832      	ldr	r2, [r6, #0]
 802068a:	1a9b      	subs	r3, r3, r2
 802068c:	42ab      	cmp	r3, r5
 802068e:	dc26      	bgt.n	80206de <_printf_common+0x96>
 8020690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020694:	6822      	ldr	r2, [r4, #0]
 8020696:	3b00      	subs	r3, #0
 8020698:	bf18      	it	ne
 802069a:	2301      	movne	r3, #1
 802069c:	0692      	lsls	r2, r2, #26
 802069e:	d42b      	bmi.n	80206f8 <_printf_common+0xb0>
 80206a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80206a4:	4641      	mov	r1, r8
 80206a6:	4638      	mov	r0, r7
 80206a8:	47c8      	blx	r9
 80206aa:	3001      	adds	r0, #1
 80206ac:	d01e      	beq.n	80206ec <_printf_common+0xa4>
 80206ae:	6823      	ldr	r3, [r4, #0]
 80206b0:	6922      	ldr	r2, [r4, #16]
 80206b2:	f003 0306 	and.w	r3, r3, #6
 80206b6:	2b04      	cmp	r3, #4
 80206b8:	bf02      	ittt	eq
 80206ba:	68e5      	ldreq	r5, [r4, #12]
 80206bc:	6833      	ldreq	r3, [r6, #0]
 80206be:	1aed      	subeq	r5, r5, r3
 80206c0:	68a3      	ldr	r3, [r4, #8]
 80206c2:	bf0c      	ite	eq
 80206c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80206c8:	2500      	movne	r5, #0
 80206ca:	4293      	cmp	r3, r2
 80206cc:	bfc4      	itt	gt
 80206ce:	1a9b      	subgt	r3, r3, r2
 80206d0:	18ed      	addgt	r5, r5, r3
 80206d2:	2600      	movs	r6, #0
 80206d4:	341a      	adds	r4, #26
 80206d6:	42b5      	cmp	r5, r6
 80206d8:	d11a      	bne.n	8020710 <_printf_common+0xc8>
 80206da:	2000      	movs	r0, #0
 80206dc:	e008      	b.n	80206f0 <_printf_common+0xa8>
 80206de:	2301      	movs	r3, #1
 80206e0:	4652      	mov	r2, sl
 80206e2:	4641      	mov	r1, r8
 80206e4:	4638      	mov	r0, r7
 80206e6:	47c8      	blx	r9
 80206e8:	3001      	adds	r0, #1
 80206ea:	d103      	bne.n	80206f4 <_printf_common+0xac>
 80206ec:	f04f 30ff 	mov.w	r0, #4294967295
 80206f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206f4:	3501      	adds	r5, #1
 80206f6:	e7c6      	b.n	8020686 <_printf_common+0x3e>
 80206f8:	18e1      	adds	r1, r4, r3
 80206fa:	1c5a      	adds	r2, r3, #1
 80206fc:	2030      	movs	r0, #48	@ 0x30
 80206fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020702:	4422      	add	r2, r4
 8020704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020708:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802070c:	3302      	adds	r3, #2
 802070e:	e7c7      	b.n	80206a0 <_printf_common+0x58>
 8020710:	2301      	movs	r3, #1
 8020712:	4622      	mov	r2, r4
 8020714:	4641      	mov	r1, r8
 8020716:	4638      	mov	r0, r7
 8020718:	47c8      	blx	r9
 802071a:	3001      	adds	r0, #1
 802071c:	d0e6      	beq.n	80206ec <_printf_common+0xa4>
 802071e:	3601      	adds	r6, #1
 8020720:	e7d9      	b.n	80206d6 <_printf_common+0x8e>
	...

08020724 <_printf_i>:
 8020724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020728:	7e0f      	ldrb	r7, [r1, #24]
 802072a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802072c:	2f78      	cmp	r7, #120	@ 0x78
 802072e:	4691      	mov	r9, r2
 8020730:	4680      	mov	r8, r0
 8020732:	460c      	mov	r4, r1
 8020734:	469a      	mov	sl, r3
 8020736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802073a:	d807      	bhi.n	802074c <_printf_i+0x28>
 802073c:	2f62      	cmp	r7, #98	@ 0x62
 802073e:	d80a      	bhi.n	8020756 <_printf_i+0x32>
 8020740:	2f00      	cmp	r7, #0
 8020742:	f000 80d2 	beq.w	80208ea <_printf_i+0x1c6>
 8020746:	2f58      	cmp	r7, #88	@ 0x58
 8020748:	f000 80b9 	beq.w	80208be <_printf_i+0x19a>
 802074c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020754:	e03a      	b.n	80207cc <_printf_i+0xa8>
 8020756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802075a:	2b15      	cmp	r3, #21
 802075c:	d8f6      	bhi.n	802074c <_printf_i+0x28>
 802075e:	a101      	add	r1, pc, #4	@ (adr r1, 8020764 <_printf_i+0x40>)
 8020760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020764:	080207bd 	.word	0x080207bd
 8020768:	080207d1 	.word	0x080207d1
 802076c:	0802074d 	.word	0x0802074d
 8020770:	0802074d 	.word	0x0802074d
 8020774:	0802074d 	.word	0x0802074d
 8020778:	0802074d 	.word	0x0802074d
 802077c:	080207d1 	.word	0x080207d1
 8020780:	0802074d 	.word	0x0802074d
 8020784:	0802074d 	.word	0x0802074d
 8020788:	0802074d 	.word	0x0802074d
 802078c:	0802074d 	.word	0x0802074d
 8020790:	080208d1 	.word	0x080208d1
 8020794:	080207fb 	.word	0x080207fb
 8020798:	0802088b 	.word	0x0802088b
 802079c:	0802074d 	.word	0x0802074d
 80207a0:	0802074d 	.word	0x0802074d
 80207a4:	080208f3 	.word	0x080208f3
 80207a8:	0802074d 	.word	0x0802074d
 80207ac:	080207fb 	.word	0x080207fb
 80207b0:	0802074d 	.word	0x0802074d
 80207b4:	0802074d 	.word	0x0802074d
 80207b8:	08020893 	.word	0x08020893
 80207bc:	6833      	ldr	r3, [r6, #0]
 80207be:	1d1a      	adds	r2, r3, #4
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	6032      	str	r2, [r6, #0]
 80207c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80207c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80207cc:	2301      	movs	r3, #1
 80207ce:	e09d      	b.n	802090c <_printf_i+0x1e8>
 80207d0:	6833      	ldr	r3, [r6, #0]
 80207d2:	6820      	ldr	r0, [r4, #0]
 80207d4:	1d19      	adds	r1, r3, #4
 80207d6:	6031      	str	r1, [r6, #0]
 80207d8:	0606      	lsls	r6, r0, #24
 80207da:	d501      	bpl.n	80207e0 <_printf_i+0xbc>
 80207dc:	681d      	ldr	r5, [r3, #0]
 80207de:	e003      	b.n	80207e8 <_printf_i+0xc4>
 80207e0:	0645      	lsls	r5, r0, #25
 80207e2:	d5fb      	bpl.n	80207dc <_printf_i+0xb8>
 80207e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80207e8:	2d00      	cmp	r5, #0
 80207ea:	da03      	bge.n	80207f4 <_printf_i+0xd0>
 80207ec:	232d      	movs	r3, #45	@ 0x2d
 80207ee:	426d      	negs	r5, r5
 80207f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80207f4:	4859      	ldr	r0, [pc, #356]	@ (802095c <_printf_i+0x238>)
 80207f6:	230a      	movs	r3, #10
 80207f8:	e011      	b.n	802081e <_printf_i+0xfa>
 80207fa:	6821      	ldr	r1, [r4, #0]
 80207fc:	6833      	ldr	r3, [r6, #0]
 80207fe:	0608      	lsls	r0, r1, #24
 8020800:	f853 5b04 	ldr.w	r5, [r3], #4
 8020804:	d402      	bmi.n	802080c <_printf_i+0xe8>
 8020806:	0649      	lsls	r1, r1, #25
 8020808:	bf48      	it	mi
 802080a:	b2ad      	uxthmi	r5, r5
 802080c:	2f6f      	cmp	r7, #111	@ 0x6f
 802080e:	4853      	ldr	r0, [pc, #332]	@ (802095c <_printf_i+0x238>)
 8020810:	6033      	str	r3, [r6, #0]
 8020812:	bf14      	ite	ne
 8020814:	230a      	movne	r3, #10
 8020816:	2308      	moveq	r3, #8
 8020818:	2100      	movs	r1, #0
 802081a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802081e:	6866      	ldr	r6, [r4, #4]
 8020820:	60a6      	str	r6, [r4, #8]
 8020822:	2e00      	cmp	r6, #0
 8020824:	bfa2      	ittt	ge
 8020826:	6821      	ldrge	r1, [r4, #0]
 8020828:	f021 0104 	bicge.w	r1, r1, #4
 802082c:	6021      	strge	r1, [r4, #0]
 802082e:	b90d      	cbnz	r5, 8020834 <_printf_i+0x110>
 8020830:	2e00      	cmp	r6, #0
 8020832:	d04b      	beq.n	80208cc <_printf_i+0x1a8>
 8020834:	4616      	mov	r6, r2
 8020836:	fbb5 f1f3 	udiv	r1, r5, r3
 802083a:	fb03 5711 	mls	r7, r3, r1, r5
 802083e:	5dc7      	ldrb	r7, [r0, r7]
 8020840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020844:	462f      	mov	r7, r5
 8020846:	42bb      	cmp	r3, r7
 8020848:	460d      	mov	r5, r1
 802084a:	d9f4      	bls.n	8020836 <_printf_i+0x112>
 802084c:	2b08      	cmp	r3, #8
 802084e:	d10b      	bne.n	8020868 <_printf_i+0x144>
 8020850:	6823      	ldr	r3, [r4, #0]
 8020852:	07df      	lsls	r7, r3, #31
 8020854:	d508      	bpl.n	8020868 <_printf_i+0x144>
 8020856:	6923      	ldr	r3, [r4, #16]
 8020858:	6861      	ldr	r1, [r4, #4]
 802085a:	4299      	cmp	r1, r3
 802085c:	bfde      	ittt	le
 802085e:	2330      	movle	r3, #48	@ 0x30
 8020860:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020864:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020868:	1b92      	subs	r2, r2, r6
 802086a:	6122      	str	r2, [r4, #16]
 802086c:	f8cd a000 	str.w	sl, [sp]
 8020870:	464b      	mov	r3, r9
 8020872:	aa03      	add	r2, sp, #12
 8020874:	4621      	mov	r1, r4
 8020876:	4640      	mov	r0, r8
 8020878:	f7ff fee6 	bl	8020648 <_printf_common>
 802087c:	3001      	adds	r0, #1
 802087e:	d14a      	bne.n	8020916 <_printf_i+0x1f2>
 8020880:	f04f 30ff 	mov.w	r0, #4294967295
 8020884:	b004      	add	sp, #16
 8020886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802088a:	6823      	ldr	r3, [r4, #0]
 802088c:	f043 0320 	orr.w	r3, r3, #32
 8020890:	6023      	str	r3, [r4, #0]
 8020892:	4833      	ldr	r0, [pc, #204]	@ (8020960 <_printf_i+0x23c>)
 8020894:	2778      	movs	r7, #120	@ 0x78
 8020896:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802089a:	6823      	ldr	r3, [r4, #0]
 802089c:	6831      	ldr	r1, [r6, #0]
 802089e:	061f      	lsls	r7, r3, #24
 80208a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80208a4:	d402      	bmi.n	80208ac <_printf_i+0x188>
 80208a6:	065f      	lsls	r7, r3, #25
 80208a8:	bf48      	it	mi
 80208aa:	b2ad      	uxthmi	r5, r5
 80208ac:	6031      	str	r1, [r6, #0]
 80208ae:	07d9      	lsls	r1, r3, #31
 80208b0:	bf44      	itt	mi
 80208b2:	f043 0320 	orrmi.w	r3, r3, #32
 80208b6:	6023      	strmi	r3, [r4, #0]
 80208b8:	b11d      	cbz	r5, 80208c2 <_printf_i+0x19e>
 80208ba:	2310      	movs	r3, #16
 80208bc:	e7ac      	b.n	8020818 <_printf_i+0xf4>
 80208be:	4827      	ldr	r0, [pc, #156]	@ (802095c <_printf_i+0x238>)
 80208c0:	e7e9      	b.n	8020896 <_printf_i+0x172>
 80208c2:	6823      	ldr	r3, [r4, #0]
 80208c4:	f023 0320 	bic.w	r3, r3, #32
 80208c8:	6023      	str	r3, [r4, #0]
 80208ca:	e7f6      	b.n	80208ba <_printf_i+0x196>
 80208cc:	4616      	mov	r6, r2
 80208ce:	e7bd      	b.n	802084c <_printf_i+0x128>
 80208d0:	6833      	ldr	r3, [r6, #0]
 80208d2:	6825      	ldr	r5, [r4, #0]
 80208d4:	6961      	ldr	r1, [r4, #20]
 80208d6:	1d18      	adds	r0, r3, #4
 80208d8:	6030      	str	r0, [r6, #0]
 80208da:	062e      	lsls	r6, r5, #24
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	d501      	bpl.n	80208e4 <_printf_i+0x1c0>
 80208e0:	6019      	str	r1, [r3, #0]
 80208e2:	e002      	b.n	80208ea <_printf_i+0x1c6>
 80208e4:	0668      	lsls	r0, r5, #25
 80208e6:	d5fb      	bpl.n	80208e0 <_printf_i+0x1bc>
 80208e8:	8019      	strh	r1, [r3, #0]
 80208ea:	2300      	movs	r3, #0
 80208ec:	6123      	str	r3, [r4, #16]
 80208ee:	4616      	mov	r6, r2
 80208f0:	e7bc      	b.n	802086c <_printf_i+0x148>
 80208f2:	6833      	ldr	r3, [r6, #0]
 80208f4:	1d1a      	adds	r2, r3, #4
 80208f6:	6032      	str	r2, [r6, #0]
 80208f8:	681e      	ldr	r6, [r3, #0]
 80208fa:	6862      	ldr	r2, [r4, #4]
 80208fc:	2100      	movs	r1, #0
 80208fe:	4630      	mov	r0, r6
 8020900:	f7df fcfe 	bl	8000300 <memchr>
 8020904:	b108      	cbz	r0, 802090a <_printf_i+0x1e6>
 8020906:	1b80      	subs	r0, r0, r6
 8020908:	6060      	str	r0, [r4, #4]
 802090a:	6863      	ldr	r3, [r4, #4]
 802090c:	6123      	str	r3, [r4, #16]
 802090e:	2300      	movs	r3, #0
 8020910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020914:	e7aa      	b.n	802086c <_printf_i+0x148>
 8020916:	6923      	ldr	r3, [r4, #16]
 8020918:	4632      	mov	r2, r6
 802091a:	4649      	mov	r1, r9
 802091c:	4640      	mov	r0, r8
 802091e:	47d0      	blx	sl
 8020920:	3001      	adds	r0, #1
 8020922:	d0ad      	beq.n	8020880 <_printf_i+0x15c>
 8020924:	6823      	ldr	r3, [r4, #0]
 8020926:	079b      	lsls	r3, r3, #30
 8020928:	d413      	bmi.n	8020952 <_printf_i+0x22e>
 802092a:	68e0      	ldr	r0, [r4, #12]
 802092c:	9b03      	ldr	r3, [sp, #12]
 802092e:	4298      	cmp	r0, r3
 8020930:	bfb8      	it	lt
 8020932:	4618      	movlt	r0, r3
 8020934:	e7a6      	b.n	8020884 <_printf_i+0x160>
 8020936:	2301      	movs	r3, #1
 8020938:	4632      	mov	r2, r6
 802093a:	4649      	mov	r1, r9
 802093c:	4640      	mov	r0, r8
 802093e:	47d0      	blx	sl
 8020940:	3001      	adds	r0, #1
 8020942:	d09d      	beq.n	8020880 <_printf_i+0x15c>
 8020944:	3501      	adds	r5, #1
 8020946:	68e3      	ldr	r3, [r4, #12]
 8020948:	9903      	ldr	r1, [sp, #12]
 802094a:	1a5b      	subs	r3, r3, r1
 802094c:	42ab      	cmp	r3, r5
 802094e:	dcf2      	bgt.n	8020936 <_printf_i+0x212>
 8020950:	e7eb      	b.n	802092a <_printf_i+0x206>
 8020952:	2500      	movs	r5, #0
 8020954:	f104 0619 	add.w	r6, r4, #25
 8020958:	e7f5      	b.n	8020946 <_printf_i+0x222>
 802095a:	bf00      	nop
 802095c:	08021d72 	.word	0x08021d72
 8020960:	08021d83 	.word	0x08021d83

08020964 <__sflush_r>:
 8020964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802096c:	0716      	lsls	r6, r2, #28
 802096e:	4605      	mov	r5, r0
 8020970:	460c      	mov	r4, r1
 8020972:	d454      	bmi.n	8020a1e <__sflush_r+0xba>
 8020974:	684b      	ldr	r3, [r1, #4]
 8020976:	2b00      	cmp	r3, #0
 8020978:	dc02      	bgt.n	8020980 <__sflush_r+0x1c>
 802097a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802097c:	2b00      	cmp	r3, #0
 802097e:	dd48      	ble.n	8020a12 <__sflush_r+0xae>
 8020980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020982:	2e00      	cmp	r6, #0
 8020984:	d045      	beq.n	8020a12 <__sflush_r+0xae>
 8020986:	2300      	movs	r3, #0
 8020988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802098c:	682f      	ldr	r7, [r5, #0]
 802098e:	6a21      	ldr	r1, [r4, #32]
 8020990:	602b      	str	r3, [r5, #0]
 8020992:	d030      	beq.n	80209f6 <__sflush_r+0x92>
 8020994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020996:	89a3      	ldrh	r3, [r4, #12]
 8020998:	0759      	lsls	r1, r3, #29
 802099a:	d505      	bpl.n	80209a8 <__sflush_r+0x44>
 802099c:	6863      	ldr	r3, [r4, #4]
 802099e:	1ad2      	subs	r2, r2, r3
 80209a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80209a2:	b10b      	cbz	r3, 80209a8 <__sflush_r+0x44>
 80209a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80209a6:	1ad2      	subs	r2, r2, r3
 80209a8:	2300      	movs	r3, #0
 80209aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80209ac:	6a21      	ldr	r1, [r4, #32]
 80209ae:	4628      	mov	r0, r5
 80209b0:	47b0      	blx	r6
 80209b2:	1c43      	adds	r3, r0, #1
 80209b4:	89a3      	ldrh	r3, [r4, #12]
 80209b6:	d106      	bne.n	80209c6 <__sflush_r+0x62>
 80209b8:	6829      	ldr	r1, [r5, #0]
 80209ba:	291d      	cmp	r1, #29
 80209bc:	d82b      	bhi.n	8020a16 <__sflush_r+0xb2>
 80209be:	4a2a      	ldr	r2, [pc, #168]	@ (8020a68 <__sflush_r+0x104>)
 80209c0:	410a      	asrs	r2, r1
 80209c2:	07d6      	lsls	r6, r2, #31
 80209c4:	d427      	bmi.n	8020a16 <__sflush_r+0xb2>
 80209c6:	2200      	movs	r2, #0
 80209c8:	6062      	str	r2, [r4, #4]
 80209ca:	04d9      	lsls	r1, r3, #19
 80209cc:	6922      	ldr	r2, [r4, #16]
 80209ce:	6022      	str	r2, [r4, #0]
 80209d0:	d504      	bpl.n	80209dc <__sflush_r+0x78>
 80209d2:	1c42      	adds	r2, r0, #1
 80209d4:	d101      	bne.n	80209da <__sflush_r+0x76>
 80209d6:	682b      	ldr	r3, [r5, #0]
 80209d8:	b903      	cbnz	r3, 80209dc <__sflush_r+0x78>
 80209da:	6560      	str	r0, [r4, #84]	@ 0x54
 80209dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80209de:	602f      	str	r7, [r5, #0]
 80209e0:	b1b9      	cbz	r1, 8020a12 <__sflush_r+0xae>
 80209e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80209e6:	4299      	cmp	r1, r3
 80209e8:	d002      	beq.n	80209f0 <__sflush_r+0x8c>
 80209ea:	4628      	mov	r0, r5
 80209ec:	f7ff fc98 	bl	8020320 <_free_r>
 80209f0:	2300      	movs	r3, #0
 80209f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80209f4:	e00d      	b.n	8020a12 <__sflush_r+0xae>
 80209f6:	2301      	movs	r3, #1
 80209f8:	4628      	mov	r0, r5
 80209fa:	47b0      	blx	r6
 80209fc:	4602      	mov	r2, r0
 80209fe:	1c50      	adds	r0, r2, #1
 8020a00:	d1c9      	bne.n	8020996 <__sflush_r+0x32>
 8020a02:	682b      	ldr	r3, [r5, #0]
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d0c6      	beq.n	8020996 <__sflush_r+0x32>
 8020a08:	2b1d      	cmp	r3, #29
 8020a0a:	d001      	beq.n	8020a10 <__sflush_r+0xac>
 8020a0c:	2b16      	cmp	r3, #22
 8020a0e:	d11e      	bne.n	8020a4e <__sflush_r+0xea>
 8020a10:	602f      	str	r7, [r5, #0]
 8020a12:	2000      	movs	r0, #0
 8020a14:	e022      	b.n	8020a5c <__sflush_r+0xf8>
 8020a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020a1a:	b21b      	sxth	r3, r3
 8020a1c:	e01b      	b.n	8020a56 <__sflush_r+0xf2>
 8020a1e:	690f      	ldr	r7, [r1, #16]
 8020a20:	2f00      	cmp	r7, #0
 8020a22:	d0f6      	beq.n	8020a12 <__sflush_r+0xae>
 8020a24:	0793      	lsls	r3, r2, #30
 8020a26:	680e      	ldr	r6, [r1, #0]
 8020a28:	bf08      	it	eq
 8020a2a:	694b      	ldreq	r3, [r1, #20]
 8020a2c:	600f      	str	r7, [r1, #0]
 8020a2e:	bf18      	it	ne
 8020a30:	2300      	movne	r3, #0
 8020a32:	eba6 0807 	sub.w	r8, r6, r7
 8020a36:	608b      	str	r3, [r1, #8]
 8020a38:	f1b8 0f00 	cmp.w	r8, #0
 8020a3c:	dde9      	ble.n	8020a12 <__sflush_r+0xae>
 8020a3e:	6a21      	ldr	r1, [r4, #32]
 8020a40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020a42:	4643      	mov	r3, r8
 8020a44:	463a      	mov	r2, r7
 8020a46:	4628      	mov	r0, r5
 8020a48:	47b0      	blx	r6
 8020a4a:	2800      	cmp	r0, #0
 8020a4c:	dc08      	bgt.n	8020a60 <__sflush_r+0xfc>
 8020a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020a56:	81a3      	strh	r3, [r4, #12]
 8020a58:	f04f 30ff 	mov.w	r0, #4294967295
 8020a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a60:	4407      	add	r7, r0
 8020a62:	eba8 0800 	sub.w	r8, r8, r0
 8020a66:	e7e7      	b.n	8020a38 <__sflush_r+0xd4>
 8020a68:	dfbffffe 	.word	0xdfbffffe

08020a6c <_fflush_r>:
 8020a6c:	b538      	push	{r3, r4, r5, lr}
 8020a6e:	690b      	ldr	r3, [r1, #16]
 8020a70:	4605      	mov	r5, r0
 8020a72:	460c      	mov	r4, r1
 8020a74:	b913      	cbnz	r3, 8020a7c <_fflush_r+0x10>
 8020a76:	2500      	movs	r5, #0
 8020a78:	4628      	mov	r0, r5
 8020a7a:	bd38      	pop	{r3, r4, r5, pc}
 8020a7c:	b118      	cbz	r0, 8020a86 <_fflush_r+0x1a>
 8020a7e:	6a03      	ldr	r3, [r0, #32]
 8020a80:	b90b      	cbnz	r3, 8020a86 <_fflush_r+0x1a>
 8020a82:	f7ff f9cf 	bl	801fe24 <__sinit>
 8020a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d0f3      	beq.n	8020a76 <_fflush_r+0xa>
 8020a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020a90:	07d0      	lsls	r0, r2, #31
 8020a92:	d404      	bmi.n	8020a9e <_fflush_r+0x32>
 8020a94:	0599      	lsls	r1, r3, #22
 8020a96:	d402      	bmi.n	8020a9e <_fflush_r+0x32>
 8020a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020a9a:	f7ff fc30 	bl	80202fe <__retarget_lock_acquire_recursive>
 8020a9e:	4628      	mov	r0, r5
 8020aa0:	4621      	mov	r1, r4
 8020aa2:	f7ff ff5f 	bl	8020964 <__sflush_r>
 8020aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020aa8:	07da      	lsls	r2, r3, #31
 8020aaa:	4605      	mov	r5, r0
 8020aac:	d4e4      	bmi.n	8020a78 <_fflush_r+0xc>
 8020aae:	89a3      	ldrh	r3, [r4, #12]
 8020ab0:	059b      	lsls	r3, r3, #22
 8020ab2:	d4e1      	bmi.n	8020a78 <_fflush_r+0xc>
 8020ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020ab6:	f7ff fc23 	bl	8020300 <__retarget_lock_release_recursive>
 8020aba:	e7dd      	b.n	8020a78 <_fflush_r+0xc>

08020abc <__swhatbuf_r>:
 8020abc:	b570      	push	{r4, r5, r6, lr}
 8020abe:	460c      	mov	r4, r1
 8020ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ac4:	2900      	cmp	r1, #0
 8020ac6:	b096      	sub	sp, #88	@ 0x58
 8020ac8:	4615      	mov	r5, r2
 8020aca:	461e      	mov	r6, r3
 8020acc:	da0d      	bge.n	8020aea <__swhatbuf_r+0x2e>
 8020ace:	89a3      	ldrh	r3, [r4, #12]
 8020ad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020ad4:	f04f 0100 	mov.w	r1, #0
 8020ad8:	bf14      	ite	ne
 8020ada:	2340      	movne	r3, #64	@ 0x40
 8020adc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020ae0:	2000      	movs	r0, #0
 8020ae2:	6031      	str	r1, [r6, #0]
 8020ae4:	602b      	str	r3, [r5, #0]
 8020ae6:	b016      	add	sp, #88	@ 0x58
 8020ae8:	bd70      	pop	{r4, r5, r6, pc}
 8020aea:	466a      	mov	r2, sp
 8020aec:	f000 f87c 	bl	8020be8 <_fstat_r>
 8020af0:	2800      	cmp	r0, #0
 8020af2:	dbec      	blt.n	8020ace <__swhatbuf_r+0x12>
 8020af4:	9901      	ldr	r1, [sp, #4]
 8020af6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020afa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020afe:	4259      	negs	r1, r3
 8020b00:	4159      	adcs	r1, r3
 8020b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020b06:	e7eb      	b.n	8020ae0 <__swhatbuf_r+0x24>

08020b08 <__smakebuf_r>:
 8020b08:	898b      	ldrh	r3, [r1, #12]
 8020b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020b0c:	079d      	lsls	r5, r3, #30
 8020b0e:	4606      	mov	r6, r0
 8020b10:	460c      	mov	r4, r1
 8020b12:	d507      	bpl.n	8020b24 <__smakebuf_r+0x1c>
 8020b14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020b18:	6023      	str	r3, [r4, #0]
 8020b1a:	6123      	str	r3, [r4, #16]
 8020b1c:	2301      	movs	r3, #1
 8020b1e:	6163      	str	r3, [r4, #20]
 8020b20:	b003      	add	sp, #12
 8020b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b24:	ab01      	add	r3, sp, #4
 8020b26:	466a      	mov	r2, sp
 8020b28:	f7ff ffc8 	bl	8020abc <__swhatbuf_r>
 8020b2c:	9f00      	ldr	r7, [sp, #0]
 8020b2e:	4605      	mov	r5, r0
 8020b30:	4639      	mov	r1, r7
 8020b32:	4630      	mov	r0, r6
 8020b34:	f7fe ffa4 	bl	801fa80 <_malloc_r>
 8020b38:	b948      	cbnz	r0, 8020b4e <__smakebuf_r+0x46>
 8020b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b3e:	059a      	lsls	r2, r3, #22
 8020b40:	d4ee      	bmi.n	8020b20 <__smakebuf_r+0x18>
 8020b42:	f023 0303 	bic.w	r3, r3, #3
 8020b46:	f043 0302 	orr.w	r3, r3, #2
 8020b4a:	81a3      	strh	r3, [r4, #12]
 8020b4c:	e7e2      	b.n	8020b14 <__smakebuf_r+0xc>
 8020b4e:	89a3      	ldrh	r3, [r4, #12]
 8020b50:	6020      	str	r0, [r4, #0]
 8020b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020b56:	81a3      	strh	r3, [r4, #12]
 8020b58:	9b01      	ldr	r3, [sp, #4]
 8020b5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020b5e:	b15b      	cbz	r3, 8020b78 <__smakebuf_r+0x70>
 8020b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b64:	4630      	mov	r0, r6
 8020b66:	f000 f851 	bl	8020c0c <_isatty_r>
 8020b6a:	b128      	cbz	r0, 8020b78 <__smakebuf_r+0x70>
 8020b6c:	89a3      	ldrh	r3, [r4, #12]
 8020b6e:	f023 0303 	bic.w	r3, r3, #3
 8020b72:	f043 0301 	orr.w	r3, r3, #1
 8020b76:	81a3      	strh	r3, [r4, #12]
 8020b78:	89a3      	ldrh	r3, [r4, #12]
 8020b7a:	431d      	orrs	r5, r3
 8020b7c:	81a5      	strh	r5, [r4, #12]
 8020b7e:	e7cf      	b.n	8020b20 <__smakebuf_r+0x18>

08020b80 <_putc_r>:
 8020b80:	b570      	push	{r4, r5, r6, lr}
 8020b82:	460d      	mov	r5, r1
 8020b84:	4614      	mov	r4, r2
 8020b86:	4606      	mov	r6, r0
 8020b88:	b118      	cbz	r0, 8020b92 <_putc_r+0x12>
 8020b8a:	6a03      	ldr	r3, [r0, #32]
 8020b8c:	b90b      	cbnz	r3, 8020b92 <_putc_r+0x12>
 8020b8e:	f7ff f949 	bl	801fe24 <__sinit>
 8020b92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020b94:	07d8      	lsls	r0, r3, #31
 8020b96:	d405      	bmi.n	8020ba4 <_putc_r+0x24>
 8020b98:	89a3      	ldrh	r3, [r4, #12]
 8020b9a:	0599      	lsls	r1, r3, #22
 8020b9c:	d402      	bmi.n	8020ba4 <_putc_r+0x24>
 8020b9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020ba0:	f7ff fbad 	bl	80202fe <__retarget_lock_acquire_recursive>
 8020ba4:	68a3      	ldr	r3, [r4, #8]
 8020ba6:	3b01      	subs	r3, #1
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	60a3      	str	r3, [r4, #8]
 8020bac:	da05      	bge.n	8020bba <_putc_r+0x3a>
 8020bae:	69a2      	ldr	r2, [r4, #24]
 8020bb0:	4293      	cmp	r3, r2
 8020bb2:	db12      	blt.n	8020bda <_putc_r+0x5a>
 8020bb4:	b2eb      	uxtb	r3, r5
 8020bb6:	2b0a      	cmp	r3, #10
 8020bb8:	d00f      	beq.n	8020bda <_putc_r+0x5a>
 8020bba:	6823      	ldr	r3, [r4, #0]
 8020bbc:	1c5a      	adds	r2, r3, #1
 8020bbe:	6022      	str	r2, [r4, #0]
 8020bc0:	701d      	strb	r5, [r3, #0]
 8020bc2:	b2ed      	uxtb	r5, r5
 8020bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020bc6:	07da      	lsls	r2, r3, #31
 8020bc8:	d405      	bmi.n	8020bd6 <_putc_r+0x56>
 8020bca:	89a3      	ldrh	r3, [r4, #12]
 8020bcc:	059b      	lsls	r3, r3, #22
 8020bce:	d402      	bmi.n	8020bd6 <_putc_r+0x56>
 8020bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020bd2:	f7ff fb95 	bl	8020300 <__retarget_lock_release_recursive>
 8020bd6:	4628      	mov	r0, r5
 8020bd8:	bd70      	pop	{r4, r5, r6, pc}
 8020bda:	4629      	mov	r1, r5
 8020bdc:	4622      	mov	r2, r4
 8020bde:	4630      	mov	r0, r6
 8020be0:	f7ff fa11 	bl	8020006 <__swbuf_r>
 8020be4:	4605      	mov	r5, r0
 8020be6:	e7ed      	b.n	8020bc4 <_putc_r+0x44>

08020be8 <_fstat_r>:
 8020be8:	b538      	push	{r3, r4, r5, lr}
 8020bea:	4d07      	ldr	r5, [pc, #28]	@ (8020c08 <_fstat_r+0x20>)
 8020bec:	2300      	movs	r3, #0
 8020bee:	4604      	mov	r4, r0
 8020bf0:	4608      	mov	r0, r1
 8020bf2:	4611      	mov	r1, r2
 8020bf4:	602b      	str	r3, [r5, #0]
 8020bf6:	f7eb f89b 	bl	800bd30 <_fstat>
 8020bfa:	1c43      	adds	r3, r0, #1
 8020bfc:	d102      	bne.n	8020c04 <_fstat_r+0x1c>
 8020bfe:	682b      	ldr	r3, [r5, #0]
 8020c00:	b103      	cbz	r3, 8020c04 <_fstat_r+0x1c>
 8020c02:	6023      	str	r3, [r4, #0]
 8020c04:	bd38      	pop	{r3, r4, r5, pc}
 8020c06:	bf00      	nop
 8020c08:	24000c04 	.word	0x24000c04

08020c0c <_isatty_r>:
 8020c0c:	b538      	push	{r3, r4, r5, lr}
 8020c0e:	4d06      	ldr	r5, [pc, #24]	@ (8020c28 <_isatty_r+0x1c>)
 8020c10:	2300      	movs	r3, #0
 8020c12:	4604      	mov	r4, r0
 8020c14:	4608      	mov	r0, r1
 8020c16:	602b      	str	r3, [r5, #0]
 8020c18:	f7eb f89a 	bl	800bd50 <_isatty>
 8020c1c:	1c43      	adds	r3, r0, #1
 8020c1e:	d102      	bne.n	8020c26 <_isatty_r+0x1a>
 8020c20:	682b      	ldr	r3, [r5, #0]
 8020c22:	b103      	cbz	r3, 8020c26 <_isatty_r+0x1a>
 8020c24:	6023      	str	r3, [r4, #0]
 8020c26:	bd38      	pop	{r3, r4, r5, pc}
 8020c28:	24000c04 	.word	0x24000c04

08020c2c <_init>:
 8020c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c2e:	bf00      	nop
 8020c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020c32:	bc08      	pop	{r3}
 8020c34:	469e      	mov	lr, r3
 8020c36:	4770      	bx	lr

08020c38 <_fini>:
 8020c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c3a:	bf00      	nop
 8020c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020c3e:	bc08      	pop	{r3}
 8020c40:	469e      	mov	lr, r3
 8020c42:	4770      	bx	lr
